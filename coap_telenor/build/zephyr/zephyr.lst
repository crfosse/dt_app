
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_table>:
    c000:	20028888 	.word	0x20028888
    c004:	0000dba5 	.word	0x0000dba5
    c008:	0001d4eb 	.word	0x0001d4eb
    c00c:	0000daf9 	.word	0x0000daf9
    c010:	0000daf9 	.word	0x0000daf9
    c014:	0000daf9 	.word	0x0000daf9
    c018:	0000daf9 	.word	0x0000daf9
    c01c:	0000daf9 	.word	0x0000daf9
    c020:	0000daf9 	.word	0x0000daf9
    c024:	0000daf9 	.word	0x0000daf9
    c028:	0000daf9 	.word	0x0000daf9
    c02c:	0000d925 	.word	0x0000d925
    c030:	0000daf9 	.word	0x0000daf9
    c034:	0000daf9 	.word	0x0000daf9
    c038:	0000d861 	.word	0x0000d861
    c03c:	0000d469 	.word	0x0000d469

0000c040 <_irq_vector_table>:
    c040:	0000db65 0000db65 0000db65 0000db65     e...e...e...e...
    c050:	0000db65 0000db65 0000db65 0000db65     e...e...e...e...
    c060:	0000db65 0000db65 0000db65 0000db65     e...e...e...e...
    c070:	0000db65 0000db65 0000db65 0000db65     e...e...e...e...
    c080:	0000db65 0000db65 0000db65 0000db65     e...e...e...e...
    c090:	0000db65 0000db65 0000db65 0000db65     e...e...e...e...
    c0a0:	0000db65 0000db65 0000db65 0000db65     e...e...e...e...
    c0b0:	0000f539 0001dcaf 0000db65 0000db65     9.......e...e...
    c0c0:	0000db65 0000db65 0000db65 0000db65     e...e...e...e...
    c0d0:	0000db65 0000db65 0000db65 0000db65     e...e...e...e...
    c0e0:	0000db65 0000db65 0001dccd 0000db65     e...e.......e...
    c0f0:	0000db65 0000db65 0000db65 0000db65     e...e...e...e...
    c100:	0000db65 0000db65 0000db65 0000db65     e...e...e...e...
    c110:	0000db65 0000db65 0000db65 0000db65     e...e...e...e...
    c120:	0000db65 0000db65 0000db65 0000db65     e...e...e...e...
    c130:	0000db65 0000db65 0000db65 0000db65     e...e...e...e...
    c140:	0000db65                                e...

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	00014c70 00000001 0000c000 0000c000     pL..............
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c23c <__aeabi_uldivmod>:
    c23c:	b953      	cbnz	r3, c254 <__aeabi_uldivmod+0x18>
    c23e:	b94a      	cbnz	r2, c254 <__aeabi_uldivmod+0x18>
    c240:	2900      	cmp	r1, #0
    c242:	bf08      	it	eq
    c244:	2800      	cmpeq	r0, #0
    c246:	bf1c      	itt	ne
    c248:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c24c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c250:	f000 b970 	b.w	c534 <__aeabi_idiv0>
    c254:	f1ad 0c08 	sub.w	ip, sp, #8
    c258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c25c:	f000 f806 	bl	c26c <__udivmoddi4>
    c260:	f8dd e004 	ldr.w	lr, [sp, #4]
    c264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c268:	b004      	add	sp, #16
    c26a:	4770      	bx	lr

0000c26c <__udivmoddi4>:
    c26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c270:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c272:	4604      	mov	r4, r0
    c274:	4689      	mov	r9, r1
    c276:	2b00      	cmp	r3, #0
    c278:	f040 8083 	bne.w	c382 <__udivmoddi4+0x116>
    c27c:	428a      	cmp	r2, r1
    c27e:	4615      	mov	r5, r2
    c280:	d945      	bls.n	c30e <__udivmoddi4+0xa2>
    c282:	fab2 f282 	clz	r2, r2
    c286:	b14a      	cbz	r2, c29c <__udivmoddi4+0x30>
    c288:	f1c2 0720 	rsb	r7, r2, #32
    c28c:	fa01 f302 	lsl.w	r3, r1, r2
    c290:	4095      	lsls	r5, r2
    c292:	4094      	lsls	r4, r2
    c294:	fa20 f707 	lsr.w	r7, r0, r7
    c298:	ea47 0903 	orr.w	r9, r7, r3
    c29c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c2a0:	0c23      	lsrs	r3, r4, #16
    c2a2:	fa1f f885 	uxth.w	r8, r5
    c2a6:	fbb9 fcfe 	udiv	ip, r9, lr
    c2aa:	fb0e 991c 	mls	r9, lr, ip, r9
    c2ae:	fb0c f108 	mul.w	r1, ip, r8
    c2b2:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
    c2b6:	4299      	cmp	r1, r3
    c2b8:	d90a      	bls.n	c2d0 <__udivmoddi4+0x64>
    c2ba:	18eb      	adds	r3, r5, r3
    c2bc:	bf2c      	ite	cs
    c2be:	2001      	movcs	r0, #1
    c2c0:	2000      	movcc	r0, #0
    c2c2:	4299      	cmp	r1, r3
    c2c4:	d902      	bls.n	c2cc <__udivmoddi4+0x60>
    c2c6:	2800      	cmp	r0, #0
    c2c8:	f000 811d 	beq.w	c506 <__udivmoddi4+0x29a>
    c2cc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c2d0:	1a59      	subs	r1, r3, r1
    c2d2:	b2a3      	uxth	r3, r4
    c2d4:	fbb1 f0fe 	udiv	r0, r1, lr
    c2d8:	fb0e 1110 	mls	r1, lr, r0, r1
    c2dc:	fb00 f808 	mul.w	r8, r0, r8
    c2e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c2e4:	45a0      	cmp	r8, r4
    c2e6:	d905      	bls.n	c2f4 <__udivmoddi4+0x88>
    c2e8:	192c      	adds	r4, r5, r4
    c2ea:	d202      	bcs.n	c2f2 <__udivmoddi4+0x86>
    c2ec:	45a0      	cmp	r8, r4
    c2ee:	f200 810e 	bhi.w	c50e <__udivmoddi4+0x2a2>
    c2f2:	3801      	subs	r0, #1
    c2f4:	eba4 0408 	sub.w	r4, r4, r8
    c2f8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c2fc:	2700      	movs	r7, #0
    c2fe:	b11e      	cbz	r6, c308 <__udivmoddi4+0x9c>
    c300:	40d4      	lsrs	r4, r2
    c302:	2300      	movs	r3, #0
    c304:	e9c6 4300 	strd	r4, r3, [r6]
    c308:	4639      	mov	r1, r7
    c30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c30e:	2a00      	cmp	r2, #0
    c310:	d051      	beq.n	c3b6 <__udivmoddi4+0x14a>
    c312:	fab2 f282 	clz	r2, r2
    c316:	2a00      	cmp	r2, #0
    c318:	f040 80af 	bne.w	c47a <__udivmoddi4+0x20e>
    c31c:	1b49      	subs	r1, r1, r5
    c31e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c322:	fa1f f885 	uxth.w	r8, r5
    c326:	2701      	movs	r7, #1
    c328:	0c23      	lsrs	r3, r4, #16
    c32a:	fbb1 fcfe 	udiv	ip, r1, lr
    c32e:	fb0e 111c 	mls	r1, lr, ip, r1
    c332:	fb08 f00c 	mul.w	r0, r8, ip
    c336:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c33a:	4298      	cmp	r0, r3
    c33c:	d90a      	bls.n	c354 <__udivmoddi4+0xe8>
    c33e:	18eb      	adds	r3, r5, r3
    c340:	bf2c      	ite	cs
    c342:	2101      	movcs	r1, #1
    c344:	2100      	movcc	r1, #0
    c346:	4298      	cmp	r0, r3
    c348:	d902      	bls.n	c350 <__udivmoddi4+0xe4>
    c34a:	2900      	cmp	r1, #0
    c34c:	f000 80d7 	beq.w	c4fe <__udivmoddi4+0x292>
    c350:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c354:	1a19      	subs	r1, r3, r0
    c356:	b2a3      	uxth	r3, r4
    c358:	fbb1 f0fe 	udiv	r0, r1, lr
    c35c:	fb0e 1110 	mls	r1, lr, r0, r1
    c360:	fb08 f800 	mul.w	r8, r8, r0
    c364:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c368:	45a0      	cmp	r8, r4
    c36a:	d905      	bls.n	c378 <__udivmoddi4+0x10c>
    c36c:	192c      	adds	r4, r5, r4
    c36e:	d202      	bcs.n	c376 <__udivmoddi4+0x10a>
    c370:	45a0      	cmp	r8, r4
    c372:	f200 80c1 	bhi.w	c4f8 <__udivmoddi4+0x28c>
    c376:	3801      	subs	r0, #1
    c378:	eba4 0408 	sub.w	r4, r4, r8
    c37c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c380:	e7bd      	b.n	c2fe <__udivmoddi4+0x92>
    c382:	428b      	cmp	r3, r1
    c384:	d908      	bls.n	c398 <__udivmoddi4+0x12c>
    c386:	2e00      	cmp	r6, #0
    c388:	d074      	beq.n	c474 <__udivmoddi4+0x208>
    c38a:	2700      	movs	r7, #0
    c38c:	e9c6 0100 	strd	r0, r1, [r6]
    c390:	4638      	mov	r0, r7
    c392:	4639      	mov	r1, r7
    c394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c398:	fab3 f783 	clz	r7, r3
    c39c:	b967      	cbnz	r7, c3b8 <__udivmoddi4+0x14c>
    c39e:	428b      	cmp	r3, r1
    c3a0:	f0c0 80a4 	bcc.w	c4ec <__udivmoddi4+0x280>
    c3a4:	4282      	cmp	r2, r0
    c3a6:	f240 80a1 	bls.w	c4ec <__udivmoddi4+0x280>
    c3aa:	4638      	mov	r0, r7
    c3ac:	2e00      	cmp	r6, #0
    c3ae:	d0ab      	beq.n	c308 <__udivmoddi4+0x9c>
    c3b0:	e9c6 4900 	strd	r4, r9, [r6]
    c3b4:	e7a8      	b.n	c308 <__udivmoddi4+0x9c>
    c3b6:	deff      	udf	#255	; 0xff
    c3b8:	f1c7 0520 	rsb	r5, r7, #32
    c3bc:	40bb      	lsls	r3, r7
    c3be:	fa02 fc07 	lsl.w	ip, r2, r7
    c3c2:	fa01 f407 	lsl.w	r4, r1, r7
    c3c6:	40ea      	lsrs	r2, r5
    c3c8:	fa20 f805 	lsr.w	r8, r0, r5
    c3cc:	40e9      	lsrs	r1, r5
    c3ce:	fa00 fe07 	lsl.w	lr, r0, r7
    c3d2:	431a      	orrs	r2, r3
    c3d4:	ea48 0404 	orr.w	r4, r8, r4
    c3d8:	ea4f 4812 	mov.w	r8, r2, lsr #16
    c3dc:	0c20      	lsrs	r0, r4, #16
    c3de:	fa1f f982 	uxth.w	r9, r2
    c3e2:	fbb1 faf8 	udiv	sl, r1, r8
    c3e6:	fb08 111a 	mls	r1, r8, sl, r1
    c3ea:	fb0a fb09 	mul.w	fp, sl, r9
    c3ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    c3f2:	458b      	cmp	fp, r1
    c3f4:	d90a      	bls.n	c40c <__udivmoddi4+0x1a0>
    c3f6:	1851      	adds	r1, r2, r1
    c3f8:	bf2c      	ite	cs
    c3fa:	2301      	movcs	r3, #1
    c3fc:	2300      	movcc	r3, #0
    c3fe:	458b      	cmp	fp, r1
    c400:	d902      	bls.n	c408 <__udivmoddi4+0x19c>
    c402:	2b00      	cmp	r3, #0
    c404:	f000 8088 	beq.w	c518 <__udivmoddi4+0x2ac>
    c408:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    c40c:	eba1 010b 	sub.w	r1, r1, fp
    c410:	b2a4      	uxth	r4, r4
    c412:	fbb1 f0f8 	udiv	r0, r1, r8
    c416:	fb08 1110 	mls	r1, r8, r0, r1
    c41a:	fb00 f909 	mul.w	r9, r0, r9
    c41e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
    c422:	4589      	cmp	r9, r1
    c424:	d904      	bls.n	c430 <__udivmoddi4+0x1c4>
    c426:	1851      	adds	r1, r2, r1
    c428:	d201      	bcs.n	c42e <__udivmoddi4+0x1c2>
    c42a:	4589      	cmp	r9, r1
    c42c:	d87b      	bhi.n	c526 <__udivmoddi4+0x2ba>
    c42e:	3801      	subs	r0, #1
    c430:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    c434:	eba1 0109 	sub.w	r1, r1, r9
    c438:	fba0 890c 	umull	r8, r9, r0, ip
    c43c:	4549      	cmp	r1, r9
    c43e:	4644      	mov	r4, r8
    c440:	464b      	mov	r3, r9
    c442:	d302      	bcc.n	c44a <__udivmoddi4+0x1de>
    c444:	d106      	bne.n	c454 <__udivmoddi4+0x1e8>
    c446:	45c6      	cmp	lr, r8
    c448:	d204      	bcs.n	c454 <__udivmoddi4+0x1e8>
    c44a:	3801      	subs	r0, #1
    c44c:	ebb8 040c 	subs.w	r4, r8, ip
    c450:	eb69 0302 	sbc.w	r3, r9, r2
    c454:	2e00      	cmp	r6, #0
    c456:	d05d      	beq.n	c514 <__udivmoddi4+0x2a8>
    c458:	ebbe 0204 	subs.w	r2, lr, r4
    c45c:	eb61 0103 	sbc.w	r1, r1, r3
    c460:	fa01 f505 	lsl.w	r5, r1, r5
    c464:	fa22 f307 	lsr.w	r3, r2, r7
    c468:	40f9      	lsrs	r1, r7
    c46a:	2700      	movs	r7, #0
    c46c:	431d      	orrs	r5, r3
    c46e:	e9c6 5100 	strd	r5, r1, [r6]
    c472:	e749      	b.n	c308 <__udivmoddi4+0x9c>
    c474:	4637      	mov	r7, r6
    c476:	4630      	mov	r0, r6
    c478:	e746      	b.n	c308 <__udivmoddi4+0x9c>
    c47a:	f1c2 0020 	rsb	r0, r2, #32
    c47e:	4095      	lsls	r5, r2
    c480:	fa01 f702 	lsl.w	r7, r1, r2
    c484:	fa21 f300 	lsr.w	r3, r1, r0
    c488:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c48c:	fa24 f100 	lsr.w	r1, r4, r0
    c490:	fa1f f885 	uxth.w	r8, r5
    c494:	4094      	lsls	r4, r2
    c496:	4339      	orrs	r1, r7
    c498:	fbb3 f0fe 	udiv	r0, r3, lr
    c49c:	0c0f      	lsrs	r7, r1, #16
    c49e:	fb0e 3310 	mls	r3, lr, r0, r3
    c4a2:	fb00 fc08 	mul.w	ip, r0, r8
    c4a6:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
    c4aa:	459c      	cmp	ip, r3
    c4ac:	d907      	bls.n	c4be <__udivmoddi4+0x252>
    c4ae:	18eb      	adds	r3, r5, r3
    c4b0:	bf2c      	ite	cs
    c4b2:	2701      	movcs	r7, #1
    c4b4:	2700      	movcc	r7, #0
    c4b6:	459c      	cmp	ip, r3
    c4b8:	d900      	bls.n	c4bc <__udivmoddi4+0x250>
    c4ba:	b38f      	cbz	r7, c520 <__udivmoddi4+0x2b4>
    c4bc:	3801      	subs	r0, #1
    c4be:	eba3 030c 	sub.w	r3, r3, ip
    c4c2:	b289      	uxth	r1, r1
    c4c4:	fbb3 f7fe 	udiv	r7, r3, lr
    c4c8:	fb0e 3317 	mls	r3, lr, r7, r3
    c4cc:	fb07 fc08 	mul.w	ip, r7, r8
    c4d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c4d4:	458c      	cmp	ip, r1
    c4d6:	d904      	bls.n	c4e2 <__udivmoddi4+0x276>
    c4d8:	1869      	adds	r1, r5, r1
    c4da:	d201      	bcs.n	c4e0 <__udivmoddi4+0x274>
    c4dc:	458c      	cmp	ip, r1
    c4de:	d825      	bhi.n	c52c <__udivmoddi4+0x2c0>
    c4e0:	3f01      	subs	r7, #1
    c4e2:	eba1 010c 	sub.w	r1, r1, ip
    c4e6:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
    c4ea:	e71d      	b.n	c328 <__udivmoddi4+0xbc>
    c4ec:	1a84      	subs	r4, r0, r2
    c4ee:	eb61 0303 	sbc.w	r3, r1, r3
    c4f2:	2001      	movs	r0, #1
    c4f4:	4699      	mov	r9, r3
    c4f6:	e759      	b.n	c3ac <__udivmoddi4+0x140>
    c4f8:	3802      	subs	r0, #2
    c4fa:	442c      	add	r4, r5
    c4fc:	e73c      	b.n	c378 <__udivmoddi4+0x10c>
    c4fe:	f1ac 0c02 	sub.w	ip, ip, #2
    c502:	442b      	add	r3, r5
    c504:	e726      	b.n	c354 <__udivmoddi4+0xe8>
    c506:	f1ac 0c02 	sub.w	ip, ip, #2
    c50a:	442b      	add	r3, r5
    c50c:	e6e0      	b.n	c2d0 <__udivmoddi4+0x64>
    c50e:	3802      	subs	r0, #2
    c510:	442c      	add	r4, r5
    c512:	e6ef      	b.n	c2f4 <__udivmoddi4+0x88>
    c514:	4637      	mov	r7, r6
    c516:	e6f7      	b.n	c308 <__udivmoddi4+0x9c>
    c518:	f1aa 0a02 	sub.w	sl, sl, #2
    c51c:	4411      	add	r1, r2
    c51e:	e775      	b.n	c40c <__udivmoddi4+0x1a0>
    c520:	3802      	subs	r0, #2
    c522:	442b      	add	r3, r5
    c524:	e7cb      	b.n	c4be <__udivmoddi4+0x252>
    c526:	3802      	subs	r0, #2
    c528:	4411      	add	r1, r2
    c52a:	e781      	b.n	c430 <__udivmoddi4+0x1c4>
    c52c:	3f02      	subs	r7, #2
    c52e:	4429      	add	r1, r5
    c530:	e7d7      	b.n	c4e2 <__udivmoddi4+0x276>
    c532:	bf00      	nop

0000c534 <__aeabi_idiv0>:
    c534:	4770      	bx	lr
    c536:	bf00      	nop

0000c538 <app_timer_handler>:

void app_timer_handler(struct k_timer *dummy)
{
	static u32_t minutes;

	minutes++;
    c538:	4a07      	ldr	r2, [pc, #28]	; (c558 <app_timer_handler+0x20>)
    c53a:	6813      	ldr	r3, [r2, #0]
    c53c:	3301      	adds	r3, #1
    c53e:	6013      	str	r3, [r2, #0]
	/* This shall match the PSM interval*/
	if (minutes % actual_tau == 0) {
    c540:	4a06      	ldr	r2, [pc, #24]	; (c55c <app_timer_handler+0x24>)
    c542:	6811      	ldr	r1, [r2, #0]
    c544:	fbb3 f2f1 	udiv	r2, r3, r1
    c548:	fb01 3312 	mls	r3, r1, r2, r3
    c54c:	b913      	cbnz	r3, c554 <app_timer_handler+0x1c>
		transmit = true;
    c54e:	2201      	movs	r2, #1
    c550:	4b03      	ldr	r3, [pc, #12]	; (c560 <app_timer_handler+0x28>)
    c552:	701a      	strb	r2, [r3, #0]
		LOG_INF("Ready for transmit");
	}
	LOG_INF("Elapsed time: %d\n", minutes);
}
    c554:	4770      	bx	lr
    c556:	bf00      	nop
    c558:	20020010 	.word	0x20020010
    c55c:	20020008 	.word	0x20020008
    c560:	20024f30 	.word	0x20024f30

0000c564 <button_handler>:
{
    c564:	b513      	push	{r0, r1, r4, lr}
	if (has_changed & button_states & DK_BTN1_MSK) {
    c566:	4001      	ands	r1, r0
    c568:	07ca      	lsls	r2, r1, #31
    c56a:	d516      	bpl.n	c59a <button_handler+0x36>
		if(test_index < TEST_DATA_SIZE) {
    c56c:	4c0e      	ldr	r4, [pc, #56]	; (c5a8 <button_handler+0x44>)
    c56e:	6823      	ldr	r3, [r4, #0]
    c570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    c574:	d213      	bcs.n	c59e <button_handler+0x3a>
				int ret = coap_endpoint_post(coap, (struct sockaddr *)&remote_addr, sizeof(remote_addr), path, testData, test_index);
    c576:	9301      	str	r3, [sp, #4]
    c578:	4b0c      	ldr	r3, [pc, #48]	; (c5ac <button_handler+0x48>)
    c57a:	480d      	ldr	r0, [pc, #52]	; (c5b0 <button_handler+0x4c>)
    c57c:	681b      	ldr	r3, [r3, #0]
    c57e:	2208      	movs	r2, #8
    c580:	9300      	str	r3, [sp, #0]
    c582:	490c      	ldr	r1, [pc, #48]	; (c5b4 <button_handler+0x50>)
    c584:	4b0c      	ldr	r3, [pc, #48]	; (c5b8 <button_handler+0x54>)
    c586:	6800      	ldr	r0, [r0, #0]
    c588:	f000 fa92 	bl	cab0 <coap_endpoint_post>
				if (ret != COAP_RESPONSE_CODE_CREATED) {
    c58c:	2841      	cmp	r0, #65	; 0x41
    c58e:	d102      	bne.n	c596 <button_handler+0x32>
			test_index += 5;
    c590:	6823      	ldr	r3, [r4, #0]
    c592:	3305      	adds	r3, #5
    c594:	6023      	str	r3, [r4, #0]
}
    c596:	b002      	add	sp, #8
    c598:	bd10      	pop	{r4, pc}
	else if (has_changed & button_states & DK_BTN2_MSK) {
    c59a:	078b      	lsls	r3, r1, #30
    c59c:	d5fb      	bpl.n	c596 <button_handler+0x32>
			test_index = 0;
    c59e:	2200      	movs	r2, #0
    c5a0:	4b01      	ldr	r3, [pc, #4]	; (c5a8 <button_handler+0x44>)
    c5a2:	601a      	str	r2, [r3, #0]
    c5a4:	e7f7      	b.n	c596 <button_handler+0x32>
    c5a6:	bf00      	nop
    c5a8:	20020014 	.word	0x20020014
    c5ac:	2002c460 	.word	0x2002c460
    c5b0:	2002000c 	.word	0x2002000c
    c5b4:	2002c408 	.word	0x2002c408
    c5b8:	0001ed78 	.word	0x0001ed78

0000c5bc <setup_psm>:
	printk("PSM bits: %c%c%c\n", psm_settings[0], psm_settings[1],
    c5bc:	2331      	movs	r3, #49	; 0x31
{
    c5be:	b513      	push	{r0, r1, r4, lr}
	printk("PSM bits: %c%c%c\n", psm_settings[0], psm_settings[1],
    c5c0:	2230      	movs	r2, #48	; 0x30
    c5c2:	4619      	mov	r1, r3
    c5c4:	480d      	ldr	r0, [pc, #52]	; (c5fc <setup_psm+0x40>)
    c5c6:	f010 fbf7 	bl	1cdb8 <printk>
	printk("PSM Interval: %c%c%c%c%c\n", psm_settings[3], psm_settings[4],
    c5ca:	2230      	movs	r2, #48	; 0x30
    c5cc:	2331      	movs	r3, #49	; 0x31
    c5ce:	4611      	mov	r1, r2
    c5d0:	e9cd 2300 	strd	r2, r3, [sp]
    c5d4:	480a      	ldr	r0, [pc, #40]	; (c600 <setup_psm+0x44>)
    c5d6:	f010 fbef 	bl	1cdb8 <printk>
	int err = lte_lc_psm_req(true);
    c5da:	2001      	movs	r0, #1
    c5dc:	f004 fa3e 	bl	10a5c <lte_lc_psm_req>
	if (err < 0) {
    c5e0:	1e04      	subs	r4, r0, #0
    c5e2:	da09      	bge.n	c5f8 <setup_psm+0x3c>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    c5e4:	f00c fd86 	bl	190f4 <z_impl_z_errno>
		printk("Error setting PSM: %d Errno: %d\n", err, errno);
    c5e8:	4621      	mov	r1, r4
    c5ea:	6802      	ldr	r2, [r0, #0]
    c5ec:	4805      	ldr	r0, [pc, #20]	; (c604 <setup_psm+0x48>)
}
    c5ee:	b002      	add	sp, #8
    c5f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Error setting PSM: %d Errno: %d\n", err, errno);
    c5f4:	f010 bbe0 	b.w	1cdb8 <printk>
}
    c5f8:	b002      	add	sp, #8
    c5fa:	bd10      	pop	{r4, pc}
    c5fc:	0001f239 	.word	0x0001f239
    c600:	0001f24b 	.word	0x0001f24b
    c604:	0001f265 	.word	0x0001f265

0000c608 <timer_init>:
		arch_syscall_invoke3(*(uintptr_t *)&timer, *(uintptr_t *)&duration, *(uintptr_t *)&period, K_SYSCALL_K_TIMER_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_start(timer, duration, period);
    c608:	f64e 2260 	movw	r2, #60000	; 0xea60
    c60c:	4801      	ldr	r0, [pc, #4]	; (c614 <timer_init+0xc>)
    c60e:	4611      	mov	r1, r2
    c610:	f00f bc86 	b.w	1bf20 <z_impl_k_timer_start>
    c614:	2002c540 	.word	0x2002c540

0000c618 <init_endpoint>:
{
	k_timer_start(&app_timer, K_MINUTES(1), K_MINUTES(1));
}

void init_endpoint(void) {
	struct sockaddr_in local_addr = {
    c618:	2200      	movs	r2, #0
void init_endpoint(void) {
    c61a:	b513      	push	{r0, r1, r4, lr}
	struct sockaddr_in local_addr = {
    c61c:	4b09      	ldr	r3, [pc, #36]	; (c644 <init_endpoint+0x2c>)
		.sin_family = AF_INET,
		.sin_port = htons(5683),
	};
	coap = coap_endpoint_init((struct sockaddr *)&local_addr, sizeof(local_addr), resources);
    c61e:	4c0a      	ldr	r4, [pc, #40]	; (c648 <init_endpoint+0x30>)
	struct sockaddr_in local_addr = {
    c620:	e9cd 3200 	strd	r3, r2, [sp]
	coap = coap_endpoint_init((struct sockaddr *)&local_addr, sizeof(local_addr), resources);
    c624:	2108      	movs	r1, #8
    c626:	4622      	mov	r2, r4
    c628:	4668      	mov	r0, sp
    c62a:	f000 f91f 	bl	c86c <coap_endpoint_init>
    c62e:	4b07      	ldr	r3, [pc, #28]	; (c64c <init_endpoint+0x34>)
    c630:	6018      	str	r0, [r3, #0]
	if (coap == NULL) {
    c632:	b128      	cbz	r0, c640 <init_endpoint+0x28>
		LOG_ERR("coap_endpoint_init");
		return;
	}

	resources[0].user_data = coap;
    c634:	61a0      	str	r0, [r4, #24]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, K_SYSCALL_NET_ADDR_PTON);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_pton(family, src, dst);
    c636:	4a06      	ldr	r2, [pc, #24]	; (c650 <init_endpoint+0x38>)
    c638:	4906      	ldr	r1, [pc, #24]	; (c654 <init_endpoint+0x3c>)
    c63a:	2001      	movs	r0, #1
    c63c:	f011 f9fe 	bl	1da3c <z_impl_net_addr_pton>

	net_addr_pton(AF_INET, "172.16.15.14", &remote_addr.sin_addr);
}
    c640:	b002      	add	sp, #8
    c642:	bd10      	pop	{r4, pc}
    c644:	33160001 	.word	0x33160001
    c648:	2002c410 	.word	0x2002c410
    c64c:	2002000c 	.word	0x2002000c
    c650:	2002c40c 	.word	0x2002c40c
    c654:	0001f22c 	.word	0x0001f22c

0000c658 <main>:

void main() {
    c658:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	err = dk_buttons_init(button_handler);
    c65c:	4831      	ldr	r0, [pc, #196]	; (c724 <main+0xcc>)
    c65e:	f003 fb2b 	bl	fcb8 <dk_buttons_init>
	err = dk_leds_init();
    c662:	f003 faf5 	bl	fc50 <dk_leds_init>
	err = dk_set_leds_state(DK_ALL_LEDS_MSK, DK_NO_LEDS_MSK);
    c666:	2100      	movs	r1, #0
    c668:	200f      	movs	r0, #15
    c66a:	f011 ff26 	bl	1e4ba <dk_set_leds_state>
	LOG_INF("CoAP sample application started");
	buttons_leds_init();
	init_endpoint();
    c66e:	f7ff ffd3 	bl	c618 <init_endpoint>

	setup_psm();
    c672:	f7ff ffa3 	bl	c5bc <setup_psm>


	//Lighting LED1 to indicate that we have entered the loop.
	dk_set_led(DK_LED2,0);
    c676:	2100      	movs	r1, #0
    c678:	2001      	movs	r0, #1
    c67a:	f003 fbb3 	bl	fde4 <dk_set_led>
	return z_impl_k_sleep(ms);
    c67e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    c682:	f00e fdbf 	bl	1b204 <z_impl_k_sleep>
	k_sleep(K_SECONDS(2));
	dk_set_led(DK_LED2,1);
    c686:	2101      	movs	r1, #1
    c688:	4608      	mov	r0, r1
    c68a:	f003 fbab 	bl	fde4 <dk_set_led>
	LOG_INF("Waiting for network response for PSM");
	k_sleep(K_SECONDS(30));

	// The network can provide other PSM values. So we fetch the actual values of the network 
	int curr_active;
	lte_lc_psm_get(&actual_tau, &curr_active);
    c68e:	4c26      	ldr	r4, [pc, #152]	; (c728 <main+0xd0>)
    c690:	f247 5030 	movw	r0, #30000	; 0x7530
    c694:	f00e fdb6 	bl	1b204 <z_impl_k_sleep>
    c698:	a903      	add	r1, sp, #12
    c69a:	4620      	mov	r0, r4
    c69c:	f004 f9f4 	bl	10a88 <lte_lc_psm_get>
	//lte_lc_psm_get_with_cb();
	LOG_INF("Reqested: TAU = %s | AT = %s", log_strdup(CONFIG_LTE_PSM_REQ_RPTAU), log_strdup(CONFIG_LTE_PSM_REQ_RAT));
	LOG_INF("Got: TAU = %d | AT = %d", actual_tau, curr_active);

	// Converting TAU to minutes
	actual_tau = actual_tau/60;
    c6a0:	223c      	movs	r2, #60	; 0x3c
    c6a2:	6823      	ldr	r3, [r4, #0]

	//Lighting LED1 to indicate that we have entered the loop.
	dk_set_led(DK_LED1, 0);
	while(1) {
		current_sample = sensor_data_get();
		if (transmit) {
    c6a4:	4e21      	ldr	r6, [pc, #132]	; (c72c <main+0xd4>)
	actual_tau = actual_tau/60;
    c6a6:	fb93 f3f2 	sdiv	r3, r3, r2
    c6aa:	6023      	str	r3, [r4, #0]
	timer_init();
    c6ac:	f7ff ffac 	bl	c608 <timer_init>
	dk_set_led(DK_LED1, 0);
    c6b0:	2100      	movs	r1, #0
    c6b2:	4608      	mov	r0, r1
    c6b4:	f003 fb96 	bl	fde4 <dk_set_led>
	bool transmit_finished = false;
    c6b8:	2400      	movs	r4, #0
    c6ba:	4635      	mov	r5, r6
			//Lighting LED2 to indicate that transmission is initiated
			dk_set_led(DK_LED2, 0);

			//Data upload
			int ret = coap_endpoint_post(coap, (struct sockaddr *)&remote_addr, sizeof(remote_addr), path, &current_sample, 1);
    c6bc:	4f1c      	ldr	r7, [pc, #112]	; (c730 <main+0xd8>)
	random_sample = sys_rand32_get() % 255;
    c6be:	f002 fc17 	bl	eef0 <sys_rand32_get>
    c6c2:	23ff      	movs	r3, #255	; 0xff
    c6c4:	fbb0 f3f3 	udiv	r3, r0, r3
		if (transmit) {
    c6c8:	f896 8000 	ldrb.w	r8, [r6]
	random_sample = sys_rand32_get() % 255;
    c6cc:	4418      	add	r0, r3
    c6ce:	f88d 000b 	strb.w	r0, [sp, #11]
		if (transmit) {
    c6d2:	f1b8 0f00 	cmp.w	r8, #0
    c6d6:	d011      	beq.n	c6fc <main+0xa4>
			dk_set_led(DK_LED2, 0);
    c6d8:	2100      	movs	r1, #0
    c6da:	2001      	movs	r0, #1
    c6dc:	f003 fb82 	bl	fde4 <dk_set_led>
			int ret = coap_endpoint_post(coap, (struct sockaddr *)&remote_addr, sizeof(remote_addr), path, &current_sample, 1);
    c6e0:	2301      	movs	r3, #1
    c6e2:	9301      	str	r3, [sp, #4]
    c6e4:	f10d 030b 	add.w	r3, sp, #11
    c6e8:	9300      	str	r3, [sp, #0]
    c6ea:	2208      	movs	r2, #8
    c6ec:	4b11      	ldr	r3, [pc, #68]	; (c734 <main+0xdc>)
    c6ee:	4912      	ldr	r1, [pc, #72]	; (c738 <main+0xe0>)
    c6f0:	6838      	ldr	r0, [r7, #0]
    c6f2:	f000 f9dd 	bl	cab0 <coap_endpoint_post>
				if (ret != COAP_RESPONSE_CODE_CREATED) {
    c6f6:	2841      	cmp	r0, #65	; 0x41
    c6f8:	d110      	bne.n	c71c <main+0xc4>
			}

			//LOG_INF("periodic,%s,%d,%d", log_strdup(modem_info_buff), rsrp.value, sample_acc/sample_cnt);
			LOG_INF("periodic : %d", current_sample);
			
			transmit_finished = true;
    c6fa:	4644      	mov	r4, r8
    c6fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    c700:	f00e fd80 	bl	1b204 <z_impl_k_sleep>
		}

		k_sleep(K_SECONDS(SAMPLE_INTERVAL));

		if(transmit && transmit_finished) {
    c704:	782b      	ldrb	r3, [r5, #0]
    c706:	2b00      	cmp	r3, #0
    c708:	d0d9      	beq.n	c6be <main+0x66>
    c70a:	2c00      	cmp	r4, #0
    c70c:	d0d7      	beq.n	c6be <main+0x66>
			//Transmission phase over.
			dk_set_led(DK_LED2, 1);
    c70e:	2101      	movs	r1, #1
			transmit = false;
    c710:	2400      	movs	r4, #0
			dk_set_led(DK_LED2, 1);
    c712:	4608      	mov	r0, r1
    c714:	f003 fb66 	bl	fde4 <dk_set_led>
			transmit = false;
    c718:	702c      	strb	r4, [r5, #0]
			transmit_finished = false;
    c71a:	e7d0      	b.n	c6be <main+0x66>
		}
	}
}
    c71c:	b004      	add	sp, #16
    c71e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c722:	bf00      	nop
    c724:	0000c565 	.word	0x0000c565
    c728:	20020008 	.word	0x20020008
    c72c:	20024f30 	.word	0x20024f30
    c730:	2002000c 	.word	0x2002000c
    c734:	0001ed78 	.word	0x0001ed78
    c738:	2002c408 	.word	0x2002c408

0000c73c <sendto.constprop.1>:
	__ASSERT_NO_MSG(socket_ops->send);

	return socket_ops->send(sock, buf, len, flags);
}

static inline ssize_t sendto(int sock, const void *buf,
    c73c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
			     size_t len, int flags,
			     const struct sockaddr *to,
			     socklen_t tolen)
{
	__ASSERT_NO_MSG(socket_ops);
    c740:	4c15      	ldr	r4, [pc, #84]	; (c798 <sendto.constprop.1+0x5c>)
static inline ssize_t sendto(int sock, const void *buf,
    c742:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(socket_ops);
    c744:	6823      	ldr	r3, [r4, #0]
static inline ssize_t sendto(int sock, const void *buf,
    c746:	4605      	mov	r5, r0
    c748:	460e      	mov	r6, r1
    c74a:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(socket_ops);
    c74c:	b94b      	cbnz	r3, c762 <sendto.constprop.1+0x26>
    c74e:	4913      	ldr	r1, [pc, #76]	; (c79c <sendto.constprop.1+0x60>)
    c750:	4813      	ldr	r0, [pc, #76]	; (c7a0 <sendto.constprop.1+0x64>)
    c752:	2389      	movs	r3, #137	; 0x89
    c754:	4a13      	ldr	r2, [pc, #76]	; (c7a4 <sendto.constprop.1+0x68>)
    c756:	f010 fb2f 	bl	1cdb8 <printk>
    c75a:	2189      	movs	r1, #137	; 0x89
    c75c:	4811      	ldr	r0, [pc, #68]	; (c7a4 <sendto.constprop.1+0x68>)
    c75e:	f010 fb5d 	bl	1ce1c <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->sendto);
    c762:	6823      	ldr	r3, [r4, #0]
    c764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c766:	b94b      	cbnz	r3, c77c <sendto.constprop.1+0x40>
    c768:	490f      	ldr	r1, [pc, #60]	; (c7a8 <sendto.constprop.1+0x6c>)
    c76a:	480d      	ldr	r0, [pc, #52]	; (c7a0 <sendto.constprop.1+0x64>)
    c76c:	238a      	movs	r3, #138	; 0x8a
    c76e:	4a0d      	ldr	r2, [pc, #52]	; (c7a4 <sendto.constprop.1+0x68>)
    c770:	f010 fb22 	bl	1cdb8 <printk>
    c774:	218a      	movs	r1, #138	; 0x8a
    c776:	480b      	ldr	r0, [pc, #44]	; (c7a4 <sendto.constprop.1+0x68>)
    c778:	f010 fb50 	bl	1ce1c <assert_post_action>

	return socket_ops->sendto(sock, buf, len, flags, to, tolen);
    c77c:	9a08      	ldr	r2, [sp, #32]
    c77e:	6823      	ldr	r3, [r4, #0]
    c780:	e9cd 8200 	strd	r8, r2, [sp]
    c784:	4631      	mov	r1, r6
    c786:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    c788:	463a      	mov	r2, r7
    c78a:	2300      	movs	r3, #0
    c78c:	4628      	mov	r0, r5
    c78e:	47a0      	blx	r4
}
    c790:	b002      	add	sp, #8
    c792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c796:	bf00      	nop
    c798:	20020184 	.word	0x20020184
    c79c:	0001f717 	.word	0x0001f717
    c7a0:	0001f722 	.word	0x0001f722
    c7a4:	0001f6ee 	.word	0x0001f6ee
    c7a8:	0001f73f 	.word	0x0001f73f

0000c7ac <recv_thread>:
	struct coap_option options[MAX_COAP_OPTIONS];
	struct sockaddr addr;
	socklen_t addr_len;
} packet_rx_data_item;

static void recv_thread(void *p1, void *p2, void *p3) {
    c7ac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    c7b0:	4680      	mov	r8, r0
	__ASSERT_NO_MSG(socket_ops);
    c7b2:	4e28      	ldr	r6, [pc, #160]	; (c854 <recv_thread+0xa8>)
    c7b4:	4d28      	ldr	r5, [pc, #160]	; (c858 <recv_thread+0xac>)
	int sock = (int)p1;
	
	while (true) {
		packet_rx_data_item *rx = k_calloc(1, sizeof(packet_rx_data_item));
    c7b6:	f44f 714c 	mov.w	r1, #816	; 0x330
    c7ba:	2001      	movs	r0, #1
    c7bc:	f011 fff8 	bl	1e7b0 <k_calloc>
		if (!rx) {
    c7c0:	4604      	mov	r4, r0
    c7c2:	2800      	cmp	r0, #0
    c7c4:	d043      	beq.n	c84e <recv_thread+0xa2>
			LOG_ERR("unable to allocate memory for packet");
			return;
		}
		rx->addr_len = sizeof(rx->addr);
    c7c6:	2318      	movs	r3, #24
    c7c8:	f8c0 332c 	str.w	r3, [r0, #812]	; 0x32c
    c7cc:	6833      	ldr	r3, [r6, #0]

		int len = recvfrom(sock, rx->data, sizeof(rx->data), 0, &rx->addr, &rx->addr_len);
    c7ce:	1d07      	adds	r7, r0, #4
    c7d0:	f500 7945 	add.w	r9, r0, #788	; 0x314
    c7d4:	f500 7a4b 	add.w	sl, r0, #812	; 0x32c
    c7d8:	b94b      	cbnz	r3, c7ee <recv_thread+0x42>
    c7da:	4920      	ldr	r1, [pc, #128]	; (c85c <recv_thread+0xb0>)
    c7dc:	4820      	ldr	r0, [pc, #128]	; (c860 <recv_thread+0xb4>)
    c7de:	2375      	movs	r3, #117	; 0x75
    c7e0:	462a      	mov	r2, r5
    c7e2:	f010 fae9 	bl	1cdb8 <printk>
    c7e6:	2175      	movs	r1, #117	; 0x75
    c7e8:	4628      	mov	r0, r5
    c7ea:	f010 fb17 	bl	1ce1c <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recvfrom);
    c7ee:	6833      	ldr	r3, [r6, #0]
    c7f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c7f2:	b94b      	cbnz	r3, c808 <recv_thread+0x5c>
    c7f4:	491b      	ldr	r1, [pc, #108]	; (c864 <recv_thread+0xb8>)
    c7f6:	481a      	ldr	r0, [pc, #104]	; (c860 <recv_thread+0xb4>)
    c7f8:	2376      	movs	r3, #118	; 0x76
    c7fa:	462a      	mov	r2, r5
    c7fc:	f010 fadc 	bl	1cdb8 <printk>
    c800:	2176      	movs	r1, #118	; 0x76
    c802:	4628      	mov	r0, r5
    c804:	f010 fb0a 	bl	1ce1c <assert_post_action>
	return socket_ops->recvfrom(sock, buf, len, flags, from, fromlen);
    c808:	e9cd 9a00 	strd	r9, sl, [sp]
    c80c:	6833      	ldr	r3, [r6, #0]
    c80e:	f44f 7200 	mov.w	r2, #512	; 0x200
    c812:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
    c816:	4639      	mov	r1, r7
    c818:	2300      	movs	r3, #0
    c81a:	4640      	mov	r0, r8
    c81c:	47c8      	blx	r9
		if (len < 0) {
    c81e:	2800      	cmp	r0, #0
    c820:	db15      	blt.n	c84e <recv_thread+0xa2>
			LOG_ERR("recvfrom: %d", errno);
			return;
		}

		int err = coap_packet_parse(&rx->packet, rx->data, sizeof(rx->data), rx->options, MAX_COAP_OPTIONS);
    c822:	2310      	movs	r3, #16
    c824:	f44f 7200 	mov.w	r2, #512	; 0x200
    c828:	9300      	str	r3, [sp, #0]
    c82a:	4639      	mov	r1, r7
    c82c:	f504 7305 	add.w	r3, r4, #532	; 0x214
    c830:	f504 7001 	add.w	r0, r4, #516	; 0x204
    c834:	f010 fcfa 	bl	1d22c <coap_packet_parse>
		if (err < 0) {
    c838:	2800      	cmp	r0, #0
    c83a:	da03      	bge.n	c844 <recv_thread+0x98>
			LOG_ERR("coap_packet_parse: %d", err);
			k_free(rx);
    c83c:	4620      	mov	r0, r4
    c83e:	f011 ffb2 	bl	1e7a6 <k_free>
			continue;
    c842:	e7b8      	b.n	c7b6 <recv_thread+0xa>
		}

		k_fifo_put(&rx_fifo, rx);
    c844:	4621      	mov	r1, r4
    c846:	4808      	ldr	r0, [pc, #32]	; (c868 <recv_thread+0xbc>)
    c848:	f011 ffe0 	bl	1e80c <k_queue_append>
    c84c:	e7b3      	b.n	c7b6 <recv_thread+0xa>
	}
}
    c84e:	b002      	add	sp, #8
    c850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c854:	20020184 	.word	0x20020184
    c858:	0001f6ee 	.word	0x0001f6ee
    c85c:	0001f717 	.word	0x0001f717
    c860:	0001f722 	.word	0x0001f722
    c864:	0001f6d9 	.word	0x0001f6d9
    c868:	2002c61c 	.word	0x2002c61c

0000c86c <coap_endpoint_init>:
#define TXRX_THREAD_PRIORITY -1
K_THREAD_STACK_DEFINE(txrx_thread_stack_area, TXRX_THREAD_STACK_SIZE);
static struct k_thread txrx_thread_data;
static k_tid_t txrx_thread_tid = 0;

coap_endpoint *coap_endpoint_init(struct sockaddr *local_addr, socklen_t local_addr_len, struct coap_resource *resources) {
    c86c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (txrx_thread_tid != 0) {
    c870:	4b47      	ldr	r3, [pc, #284]	; (c990 <coap_endpoint_init+0x124>)
coap_endpoint *coap_endpoint_init(struct sockaddr *local_addr, socklen_t local_addr_len, struct coap_resource *resources) {
    c872:	4614      	mov	r4, r2
	if (txrx_thread_tid != 0) {
    c874:	681a      	ldr	r2, [r3, #0]
coap_endpoint *coap_endpoint_init(struct sockaddr *local_addr, socklen_t local_addr_len, struct coap_resource *resources) {
    c876:	b087      	sub	sp, #28
    c878:	4606      	mov	r6, r0
    c87a:	4689      	mov	r9, r1
    c87c:	4698      	mov	r8, r3
	if (txrx_thread_tid != 0) {
    c87e:	2a00      	cmp	r2, #0
    c880:	d16b      	bne.n	c95a <coap_endpoint_init+0xee>
		LOG_ERR("only a single CoAP ep is supported at this time");
		return NULL;
	}
	
	coap_endpoint *ep = k_calloc(1, sizeof(coap_endpoint));
    c882:	2110      	movs	r1, #16
    c884:	2001      	movs	r0, #1
    c886:	f011 ff93 	bl	1e7b0 <k_calloc>
	if (!ep) {
    c88a:	4607      	mov	r7, r0
    c88c:	2800      	cmp	r0, #0
    c88e:	d064      	beq.n	c95a <coap_endpoint_init+0xee>
		return NULL;
	}

	ep->resources = resources;
    c890:	6044      	str	r4, [r0, #4]
	__ASSERT_NO_MSG(socket_ops);
    c892:	4c40      	ldr	r4, [pc, #256]	; (c994 <coap_endpoint_init+0x128>)

	ep->sock = socket(local_addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
    c894:	8835      	ldrh	r5, [r6, #0]
    c896:	6823      	ldr	r3, [r4, #0]
    c898:	b94b      	cbnz	r3, c8ae <coap_endpoint_init+0x42>
    c89a:	493f      	ldr	r1, [pc, #252]	; (c998 <coap_endpoint_init+0x12c>)
    c89c:	483f      	ldr	r0, [pc, #252]	; (c99c <coap_endpoint_init+0x130>)
    c89e:	2319      	movs	r3, #25
    c8a0:	4a3f      	ldr	r2, [pc, #252]	; (c9a0 <coap_endpoint_init+0x134>)
    c8a2:	f010 fa89 	bl	1cdb8 <printk>
    c8a6:	2119      	movs	r1, #25
    c8a8:	483d      	ldr	r0, [pc, #244]	; (c9a0 <coap_endpoint_init+0x134>)
    c8aa:	f010 fab7 	bl	1ce1c <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
    c8ae:	6823      	ldr	r3, [r4, #0]
    c8b0:	681b      	ldr	r3, [r3, #0]
    c8b2:	b94b      	cbnz	r3, c8c8 <coap_endpoint_init+0x5c>
    c8b4:	493b      	ldr	r1, [pc, #236]	; (c9a4 <coap_endpoint_init+0x138>)
    c8b6:	4839      	ldr	r0, [pc, #228]	; (c99c <coap_endpoint_init+0x130>)
    c8b8:	231a      	movs	r3, #26
    c8ba:	4a39      	ldr	r2, [pc, #228]	; (c9a0 <coap_endpoint_init+0x134>)
    c8bc:	f010 fa7c 	bl	1cdb8 <printk>
    c8c0:	211a      	movs	r1, #26
    c8c2:	4837      	ldr	r0, [pc, #220]	; (c9a0 <coap_endpoint_init+0x134>)
    c8c4:	f010 faaa 	bl	1ce1c <assert_post_action>
	return socket_ops->socket(family, type, proto);
    c8c8:	6823      	ldr	r3, [r4, #0]
    c8ca:	4628      	mov	r0, r5
    c8cc:	681b      	ldr	r3, [r3, #0]
    c8ce:	2211      	movs	r2, #17
    c8d0:	2102      	movs	r1, #2
    c8d2:	4798      	blx	r3
	if (ep->sock < 0) {
    c8d4:	2800      	cmp	r0, #0
    c8d6:	4605      	mov	r5, r0
	ep->sock = socket(local_addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
    c8d8:	6038      	str	r0, [r7, #0]
	if (ep->sock < 0) {
    c8da:	db3e      	blt.n	c95a <coap_endpoint_init+0xee>
	__ASSERT_NO_MSG(socket_ops);
    c8dc:	6823      	ldr	r3, [r4, #0]
    c8de:	b94b      	cbnz	r3, c8f4 <coap_endpoint_init+0x88>
    c8e0:	492d      	ldr	r1, [pc, #180]	; (c998 <coap_endpoint_init+0x12c>)
    c8e2:	482e      	ldr	r0, [pc, #184]	; (c99c <coap_endpoint_init+0x130>)
    c8e4:	2334      	movs	r3, #52	; 0x34
    c8e6:	4a2e      	ldr	r2, [pc, #184]	; (c9a0 <coap_endpoint_init+0x134>)
    c8e8:	f010 fa66 	bl	1cdb8 <printk>
    c8ec:	2134      	movs	r1, #52	; 0x34
    c8ee:	482c      	ldr	r0, [pc, #176]	; (c9a0 <coap_endpoint_init+0x134>)
    c8f0:	f010 fa94 	bl	1ce1c <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->bind);
    c8f4:	6823      	ldr	r3, [r4, #0]
    c8f6:	68db      	ldr	r3, [r3, #12]
    c8f8:	b94b      	cbnz	r3, c90e <coap_endpoint_init+0xa2>
    c8fa:	492b      	ldr	r1, [pc, #172]	; (c9a8 <coap_endpoint_init+0x13c>)
    c8fc:	4827      	ldr	r0, [pc, #156]	; (c99c <coap_endpoint_init+0x130>)
    c8fe:	2335      	movs	r3, #53	; 0x35
    c900:	4a27      	ldr	r2, [pc, #156]	; (c9a0 <coap_endpoint_init+0x134>)
    c902:	f010 fa59 	bl	1cdb8 <printk>
    c906:	2135      	movs	r1, #53	; 0x35
    c908:	4825      	ldr	r0, [pc, #148]	; (c9a0 <coap_endpoint_init+0x134>)
    c90a:	f010 fa87 	bl	1ce1c <assert_post_action>
	return socket_ops->bind(sock, addr, addrlen);
    c90e:	6823      	ldr	r3, [r4, #0]
    c910:	464a      	mov	r2, r9
    c912:	68db      	ldr	r3, [r3, #12]
    c914:	4631      	mov	r1, r6
    c916:	4628      	mov	r0, r5
    c918:	4798      	blx	r3
		LOG_ERR("socket: %d", errno);
		return NULL;
	}

	int ret = bind(ep->sock, local_addr, local_addr_len);
	if (ret < 0) {
    c91a:	2800      	cmp	r0, #0
    c91c:	da1f      	bge.n	c95e <coap_endpoint_init+0xf2>
	__ASSERT_NO_MSG(socket_ops);
    c91e:	6823      	ldr	r3, [r4, #0]
		LOG_ERR("bind: %d", errno);
		close(ep->sock);
    c920:	683d      	ldr	r5, [r7, #0]
    c922:	b94b      	cbnz	r3, c938 <coap_endpoint_init+0xcc>
    c924:	491c      	ldr	r1, [pc, #112]	; (c998 <coap_endpoint_init+0x12c>)
    c926:	481d      	ldr	r0, [pc, #116]	; (c99c <coap_endpoint_init+0x130>)
    c928:	2321      	movs	r3, #33	; 0x21
    c92a:	4a1d      	ldr	r2, [pc, #116]	; (c9a0 <coap_endpoint_init+0x134>)
    c92c:	f010 fa44 	bl	1cdb8 <printk>
    c930:	2121      	movs	r1, #33	; 0x21
    c932:	481b      	ldr	r0, [pc, #108]	; (c9a0 <coap_endpoint_init+0x134>)
    c934:	f010 fa72 	bl	1ce1c <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
    c938:	6823      	ldr	r3, [r4, #0]
    c93a:	685b      	ldr	r3, [r3, #4]
    c93c:	b94b      	cbnz	r3, c952 <coap_endpoint_init+0xe6>
    c93e:	491b      	ldr	r1, [pc, #108]	; (c9ac <coap_endpoint_init+0x140>)
    c940:	4816      	ldr	r0, [pc, #88]	; (c99c <coap_endpoint_init+0x130>)
    c942:	2322      	movs	r3, #34	; 0x22
    c944:	4a16      	ldr	r2, [pc, #88]	; (c9a0 <coap_endpoint_init+0x134>)
    c946:	f010 fa37 	bl	1cdb8 <printk>
    c94a:	2122      	movs	r1, #34	; 0x22
    c94c:	4814      	ldr	r0, [pc, #80]	; (c9a0 <coap_endpoint_init+0x134>)
    c94e:	f010 fa65 	bl	1ce1c <assert_post_action>
	return socket_ops->close(sock);
    c952:	6823      	ldr	r3, [r4, #0]
    c954:	4628      	mov	r0, r5
    c956:	685b      	ldr	r3, [r3, #4]
    c958:	4798      	blx	r3
		txrx_thread,
		ep, NULL, NULL,
		TXRX_THREAD_PRIORITY, 0, K_NO_WAIT);
	if (txrx_thread_tid <= 0) {
		LOG_ERR("k_thread_create failed");
		return NULL;
    c95a:	2700      	movs	r7, #0
    c95c:	e013      	b.n	c986 <coap_endpoint_init+0x11a>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    c95e:	2300      	movs	r3, #0
    c960:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c964:	e9cd 3304 	strd	r3, r3, [sp, #16]
    c968:	e9cd 3202 	strd	r3, r2, [sp, #8]
    c96c:	e9cd 7300 	strd	r7, r3, [sp]
    c970:	f44f 6200 	mov.w	r2, #2048	; 0x800
    c974:	4b0e      	ldr	r3, [pc, #56]	; (c9b0 <coap_endpoint_init+0x144>)
    c976:	490f      	ldr	r1, [pc, #60]	; (c9b4 <coap_endpoint_init+0x148>)
    c978:	480f      	ldr	r0, [pc, #60]	; (c9b8 <coap_endpoint_init+0x14c>)
    c97a:	f00e fe01 	bl	1b580 <z_impl_k_thread_create>
	txrx_thread_tid = k_thread_create(
    c97e:	f8c8 0000 	str.w	r0, [r8]
	if (txrx_thread_tid <= 0) {
    c982:	2800      	cmp	r0, #0
    c984:	d0e9      	beq.n	c95a <coap_endpoint_init+0xee>
	}

	return ep;
}
    c986:	4638      	mov	r0, r7
    c988:	b007      	add	sp, #28
    c98a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c98e:	bf00      	nop
    c990:	20020178 	.word	0x20020178
    c994:	20020184 	.word	0x20020184
    c998:	0001f717 	.word	0x0001f717
    c99c:	0001f722 	.word	0x0001f722
    c9a0:	0001f6ee 	.word	0x0001f6ee
    c9a4:	0001f6a3 	.word	0x0001f6a3
    c9a8:	0001f6b6 	.word	0x0001f6b6
    c9ac:	0001f6c7 	.word	0x0001f6c7
    c9b0:	0000cb09 	.word	0x0000cb09
    c9b4:	20025488 	.word	0x20025488
    c9b8:	200200c8 	.word	0x200200c8

0000c9bc <coap_endpoint_post_async>:

	k_sem_take(&post_handler_data.sem, K_FOREVER);
	return post_handler_data.ret;
}

int coap_endpoint_post_async(coap_endpoint *ep, struct sockaddr *addr, socklen_t addr_len, const char *const *path, u8_t *payload, int payload_len, coap_response_handler response_handler, void *response_handler_data) {
    c9bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	u8_t *data = k_calloc(1, MAX_COAP_MSG_LEN);
    c9c0:	2001      	movs	r0, #1
int coap_endpoint_post_async(coap_endpoint *ep, struct sockaddr *addr, socklen_t addr_len, const char *const *path, u8_t *payload, int payload_len, coap_response_handler response_handler, void *response_handler_data) {
    c9c2:	b086      	sub	sp, #24
    c9c4:	460d      	mov	r5, r1
    c9c6:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
	u8_t *data = k_calloc(1, MAX_COAP_MSG_LEN);
    c9ca:	f44f 7100 	mov.w	r1, #512	; 0x200
int coap_endpoint_post_async(coap_endpoint *ep, struct sockaddr *addr, socklen_t addr_len, const char *const *path, u8_t *payload, int payload_len, coap_response_handler response_handler, void *response_handler_data) {
    c9ce:	4692      	mov	sl, r2
    c9d0:	461e      	mov	r6, r3
	u8_t *data = k_calloc(1, MAX_COAP_MSG_LEN);
    c9d2:	f011 feed 	bl	1e7b0 <k_calloc>
	if (!data) {
    c9d6:	4607      	mov	r7, r0
    c9d8:	b140      	cbz	r0, c9ec <coap_endpoint_post_async+0x30>
		return -ENOMEM;
	}

	packet_tx_data_item *tx = k_calloc(1, sizeof(packet_tx_data_item));
    c9da:	2138      	movs	r1, #56	; 0x38
    c9dc:	2001      	movs	r0, #1
    c9de:	f011 fee7 	bl	1e7b0 <k_calloc>
	if (!tx) {
    c9e2:	4604      	mov	r4, r0
    c9e4:	b928      	cbnz	r0, c9f2 <coap_endpoint_post_async+0x36>
		k_free(data);
    c9e6:	4638      	mov	r0, r7
    c9e8:	f011 fedd 	bl	1e7a6 <k_free>
		return -ENOMEM;
    c9ec:	f06f 050b 	mvn.w	r5, #11
    c9f0:	e036      	b.n	ca60 <coap_endpoint_post_async+0xa4>
		return -ENOMEM;
	}

	tx->addr = *addr;
    c9f2:	462b      	mov	r3, r5
    c9f4:	f100 0514 	add.w	r5, r0, #20
    c9f8:	f103 0c18 	add.w	ip, r3, #24
    c9fc:	462a      	mov	r2, r5
    c9fe:	6818      	ldr	r0, [r3, #0]
    ca00:	6859      	ldr	r1, [r3, #4]
    ca02:	3308      	adds	r3, #8
    ca04:	c203      	stmia	r2!, {r0, r1}
    ca06:	4563      	cmp	r3, ip
    ca08:	4615      	mov	r5, r2
    ca0a:	d1f7      	bne.n	c9fc <coap_endpoint_post_async+0x40>
	tx->addr_len = addr_len;
	tx->response_handler = response_handler;
    ca0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	tx->addr_len = addr_len;
    ca0e:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
	tx->response_handler = response_handler;
    ca12:	6323      	str	r3, [r4, #48]	; 0x30
	tx->response_handler_data = response_handler_data;
    ca14:	9b11      	ldr	r3, [sp, #68]	; 0x44

	int err;

	err = coap_packet_init(&tx->packet, data, MAX_COAP_MSG_LEN, 1, COAP_TYPE_CON, 8, coap_next_token(), COAP_METHOD_POST, coap_next_id());
    ca16:	f104 0a04 	add.w	sl, r4, #4
	tx->response_handler_data = response_handler_data;
    ca1a:	6363      	str	r3, [r4, #52]	; 0x34
	err = coap_packet_init(&tx->packet, data, MAX_COAP_MSG_LEN, 1, COAP_TYPE_CON, 8, coap_next_token(), COAP_METHOD_POST, coap_next_id());
    ca1c:	f000 fb7c 	bl	d118 <coap_next_token>
    ca20:	4605      	mov	r5, r0
    ca22:	f000 fb8d 	bl	d140 <coap_next_id>
    ca26:	2302      	movs	r3, #2
    ca28:	2208      	movs	r2, #8
    ca2a:	e9cd 5302 	strd	r5, r3, [sp, #8]
    ca2e:	2300      	movs	r3, #0
    ca30:	9004      	str	r0, [sp, #16]
    ca32:	e9cd 3200 	strd	r3, r2, [sp]
    ca36:	4639      	mov	r1, r7
    ca38:	2301      	movs	r3, #1
    ca3a:	f44f 7200 	mov.w	r2, #512	; 0x200
    ca3e:	4650      	mov	r0, sl
    ca40:	f010 fafa 	bl	1d038 <coap_packet_init>
		goto error;
	}

	for (const char *const *p = path; p && *p; p++) {
		err = coap_packet_append_option(&tx->packet, COAP_OPTION_URI_PATH, *p, strlen(*p));
		if (err < 0) {
    ca44:	1e05      	subs	r5, r0, #0
    ca46:	db29      	blt.n	ca9c <coap_endpoint_post_async+0xe0>
	for (const char *const *p = path; p && *p; p++) {
    ca48:	b116      	cbz	r6, ca50 <coap_endpoint_post_async+0x94>
    ca4a:	f856 5b04 	ldr.w	r5, [r6], #4
    ca4e:	b95d      	cbnz	r5, ca68 <coap_endpoint_post_async+0xac>
			LOG_ERR("coap_packet_append_option: %d", err);
			goto error;
		}
	}

	if (payload != NULL && payload_len > 0) {
    ca50:	f1b8 0f00 	cmp.w	r8, #0
    ca54:	d112      	bne.n	ca7c <coap_endpoint_post_async+0xc0>
			LOG_ERR("coap_packet_append_payload: %d", err);
			goto error;
		}
	}

	k_fifo_put(&tx_fifo, tx);
    ca56:	4621      	mov	r1, r4
    ca58:	4814      	ldr	r0, [pc, #80]	; (caac <coap_endpoint_post_async+0xf0>)
    ca5a:	f011 fed7 	bl	1e80c <k_queue_append>

	return 0;
    ca5e:	2500      	movs	r5, #0
error:
	k_free(tx);
	k_free(data);

	return err;
}
    ca60:	4628      	mov	r0, r5
    ca62:	b006      	add	sp, #24
    ca64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		err = coap_packet_append_option(&tx->packet, COAP_OPTION_URI_PATH, *p, strlen(*p));
    ca68:	4628      	mov	r0, r5
    ca6a:	f010 fec5 	bl	1d7f8 <strlen>
    ca6e:	462a      	mov	r2, r5
    ca70:	b283      	uxth	r3, r0
    ca72:	210b      	movs	r1, #11
    ca74:	4650      	mov	r0, sl
    ca76:	f010 fb29 	bl	1d0cc <coap_packet_append_option>
    ca7a:	e7e3      	b.n	ca44 <coap_endpoint_post_async+0x88>
	if (payload != NULL && payload_len > 0) {
    ca7c:	f1b9 0f00 	cmp.w	r9, #0
    ca80:	dde9      	ble.n	ca56 <coap_endpoint_post_async+0x9a>
		err = coap_packet_append_payload_marker(&tx->packet);
    ca82:	4650      	mov	r0, sl
    ca84:	f010 fbb2 	bl	1d1ec <coap_packet_append_payload_marker>
		if (err < 0) {
    ca88:	1e05      	subs	r5, r0, #0
    ca8a:	db07      	blt.n	ca9c <coap_endpoint_post_async+0xe0>
		err = coap_packet_append_payload(&tx->packet, payload, payload_len);
    ca8c:	fa1f f289 	uxth.w	r2, r9
    ca90:	4641      	mov	r1, r8
    ca92:	4650      	mov	r0, sl
    ca94:	f010 fbb4 	bl	1d200 <coap_packet_append_payload>
		if (err < 0) {
    ca98:	1e05      	subs	r5, r0, #0
    ca9a:	dadc      	bge.n	ca56 <coap_endpoint_post_async+0x9a>
	k_free(tx);
    ca9c:	4620      	mov	r0, r4
    ca9e:	f011 fe82 	bl	1e7a6 <k_free>
	k_free(data);
    caa2:	4638      	mov	r0, r7
    caa4:	f011 fe7f 	bl	1e7a6 <k_free>
	return err;
    caa8:	e7da      	b.n	ca60 <coap_endpoint_post_async+0xa4>
    caaa:	bf00      	nop
    caac:	2002c630 	.word	0x2002c630

0000cab0 <coap_endpoint_post>:
int coap_endpoint_post(coap_endpoint *ep, struct sockaddr *addr, socklen_t addr_len, const char *const *path, u8_t *payload, int payload_len) {
    cab0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cab2:	4604      	mov	r4, r0
    cab4:	460d      	mov	r5, r1
    cab6:	4616      	mov	r6, r2
    cab8:	b08f      	sub	sp, #60	; 0x3c
	post_handler_data post_handler_data = {
    caba:	221c      	movs	r2, #28
    cabc:	2100      	movs	r1, #0
    cabe:	a805      	add	r0, sp, #20
int coap_endpoint_post(coap_endpoint *ep, struct sockaddr *addr, socklen_t addr_len, const char *const *path, u8_t *payload, int payload_len) {
    cac0:	461f      	mov	r7, r3
	post_handler_data post_handler_data = {
    cac2:	f010 fef5 	bl	1d8b0 <memset>
    cac6:	9404      	str	r4, [sp, #16]
    cac8:	e9cd 560c 	strd	r5, r6, [sp, #48]	; 0x30
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    cacc:	2201      	movs	r2, #1
    cace:	2100      	movs	r1, #0
    cad0:	a805      	add	r0, sp, #20
    cad2:	f011 fee4 	bl	1e89e <z_impl_k_sem_init>
	int err = coap_endpoint_post_async(ep, addr, addr_len, path, payload, payload_len, post_handler, &post_handler_data);
    cad6:	ab04      	add	r3, sp, #16
    cad8:	9303      	str	r3, [sp, #12]
    cada:	4b0a      	ldr	r3, [pc, #40]	; (cb04 <coap_endpoint_post+0x54>)
    cadc:	4632      	mov	r2, r6
    cade:	9302      	str	r3, [sp, #8]
    cae0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cae2:	4629      	mov	r1, r5
    cae4:	9301      	str	r3, [sp, #4]
    cae6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cae8:	4620      	mov	r0, r4
    caea:	9300      	str	r3, [sp, #0]
    caec:	463b      	mov	r3, r7
    caee:	f7ff ff65 	bl	c9bc <coap_endpoint_post_async>
	if (err != 0) {
    caf2:	b928      	cbnz	r0, cb00 <coap_endpoint_post+0x50>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sem, *(uintptr_t *)&timeout, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    caf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    caf8:	a805      	add	r0, sp, #20
    cafa:	f00e fc0f 	bl	1b31c <z_impl_k_sem_take>
	return post_handler_data.ret;
    cafe:	980b      	ldr	r0, [sp, #44]	; 0x2c
}
    cb00:	b00f      	add	sp, #60	; 0x3c
    cb02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cb04:	0001c745 	.word	0x0001c745

0000cb08 <txrx_thread>:
static void txrx_thread(void *p1, void *p2, void *p3) {
    cb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	recv_thread_tid = k_thread_create(
    cb0c:	6803      	ldr	r3, [r0, #0]
static void txrx_thread(void *p1, void *p2, void *p3) {
    cb0e:	b09b      	sub	sp, #108	; 0x6c
    cb10:	4604      	mov	r4, r0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    cb12:	2500      	movs	r5, #0
    cb14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cb18:	e9cd 3500 	strd	r3, r5, [sp]
    cb1c:	e9cd 5202 	strd	r5, r2, [sp, #8]
    cb20:	e9cd 5504 	strd	r5, r5, [sp, #16]
    cb24:	4ba4      	ldr	r3, [pc, #656]	; (cdb8 <txrx_thread+0x2b0>)
    cb26:	f44f 6280 	mov.w	r2, #1024	; 0x400
    cb2a:	49a4      	ldr	r1, [pc, #656]	; (cdbc <txrx_thread+0x2b4>)
    cb2c:	48a4      	ldr	r0, [pc, #656]	; (cdc0 <txrx_thread+0x2b8>)
    cb2e:	f00e fd27 	bl	1b580 <z_impl_k_thread_create>
	if (recv_thread_tid <= 0) {
    cb32:	2800      	cmp	r0, #0
    cb34:	f000 81a9 	beq.w	ce8a <txrx_thread+0x382>
	struct k_poll_event events[2] = {
    cb38:	2224      	movs	r2, #36	; 0x24
    cb3a:	4629      	mov	r1, r5
    cb3c:	a810      	add	r0, sp, #64	; 0x40
    cb3e:	f010 feb7 	bl	1d8b0 <memset>
    cb42:	2204      	movs	r2, #4
		inflight_packet *inflight = &ep->inflight_packets[i];
    cb44:	f04f 0944 	mov.w	r9, #68	; 0x44
	struct k_poll_event events[2] = {
    cb48:	f89d 304d 	ldrb.w	r3, [sp, #77]	; 0x4d
    cb4c:	f362 0303 	bfi	r3, r2, #0, #4
    cb50:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
    cb54:	4b9b      	ldr	r3, [pc, #620]	; (cdc4 <txrx_thread+0x2bc>)
    cb56:	9314      	str	r3, [sp, #80]	; 0x50
    cb58:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    cb5c:	f362 0303 	bfi	r3, r2, #0, #4
    cb60:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
    cb64:	4b98      	ldr	r3, [pc, #608]	; (cdc8 <txrx_thread+0x2c0>)
    cb66:	9319      	str	r3, [sp, #100]	; 0x64
	return z_impl_k_queue_get(queue, timeout);
    cb68:	930b      	str	r3, [sp, #44]	; 0x2c
	for (size_t i = 0; i < ep->inflight_packets_len; i++) {
    cb6a:	2300      	movs	r3, #0
	inflight_packet *next = NULL;
    cb6c:	461d      	mov	r5, r3
	for (size_t i = 0; i < ep->inflight_packets_len; i++) {
    cb6e:	68e6      	ldr	r6, [r4, #12]
    cb70:	42b3      	cmp	r3, r6
    cb72:	d124      	bne.n	cbbe <txrx_thread+0xb6>
		if (retransmission != NULL) {
    cb74:	2d00      	cmp	r5, #0
    cb76:	d033      	beq.n	cbe0 <txrx_thread+0xd8>
			timeout = retransmission->deadline - k_uptime_get_32();
    cb78:	6bae      	ldr	r6, [r5, #56]	; 0x38
	return z_impl_k_uptime_get();
    cb7a:	f011 ff1f 	bl	1e9bc <z_impl_k_uptime_get>
    cb7e:	1a32      	subs	r2, r6, r0
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&events, *(uintptr_t *)&num_events, *(uintptr_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    cb80:	2102      	movs	r1, #2
    cb82:	a810      	add	r0, sp, #64	; 0x40
    cb84:	f00f fc56 	bl	1c434 <z_impl_k_poll>
		if (ret == -EAGAIN) {
    cb88:	f110 0f0b 	cmn.w	r0, #11
    cb8c:	4601      	mov	r1, r0
    cb8e:	d134      	bne.n	cbfa <txrx_thread+0xf2>
	inflight->retransmission_count++;
    cb90:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
	inflight->timeout *= 2;
    cb94:	6b6a      	ldr	r2, [r5, #52]	; 0x34
	inflight->deadline += inflight->timeout;
    cb96:	6ba8      	ldr	r0, [r5, #56]	; 0x38
	inflight->retransmission_count++;
    cb98:	3301      	adds	r3, #1
    cb9a:	b2db      	uxtb	r3, r3
	inflight->timeout *= 2;
    cb9c:	0052      	lsls	r2, r2, #1
    cb9e:	636a      	str	r2, [r5, #52]	; 0x34
	if (inflight->retransmission_count > max_retransmission_count) {
    cba0:	2b04      	cmp	r3, #4
	inflight->deadline += inflight->timeout;
    cba2:	4402      	add	r2, r0
	inflight->retransmission_count++;
    cba4:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
	inflight->deadline += inflight->timeout;
    cba8:	63aa      	str	r2, [r5, #56]	; 0x38
	if (inflight->retransmission_count > max_retransmission_count) {
    cbaa:	d91c      	bls.n	cbe6 <txrx_thread+0xde>
		inflight->response_handler(inflight->response_handler_data, -EAGAIN, NULL);
    cbac:	6c28      	ldr	r0, [r5, #64]	; 0x40
    cbae:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    cbb0:	2200      	movs	r2, #0
    cbb2:	4798      	blx	r3
		free_inflight_packet(ep, inflight);
    cbb4:	4629      	mov	r1, r5
    cbb6:	4620      	mov	r0, r4
    cbb8:	f00f fd6c 	bl	1c694 <free_inflight_packet>
		return;
    cbbc:	e7d5      	b.n	cb6a <txrx_thread+0x62>
		inflight_packet *inflight = &ep->inflight_packets[i];
    cbbe:	fb09 f103 	mul.w	r1, r9, r3
    cbc2:	68a0      	ldr	r0, [r4, #8]
    cbc4:	1842      	adds	r2, r0, r1
		if (inflight->retransmit && (next == NULL || inflight->deadline < next->deadline)) {
    cbc6:	5c41      	ldrb	r1, [r0, r1]
    cbc8:	b141      	cbz	r1, cbdc <txrx_thread+0xd4>
    cbca:	b125      	cbz	r5, cbd6 <txrx_thread+0xce>
    cbcc:	6b90      	ldr	r0, [r2, #56]	; 0x38
    cbce:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    cbd0:	4288      	cmp	r0, r1
    cbd2:	bfa8      	it	ge
    cbd4:	462a      	movge	r2, r5
	for (size_t i = 0; i < ep->inflight_packets_len; i++) {
    cbd6:	3301      	adds	r3, #1
    cbd8:	4615      	mov	r5, r2
    cbda:	e7c9      	b.n	cb70 <txrx_thread+0x68>
		if (inflight->retransmit && (next == NULL || inflight->deadline < next->deadline)) {
    cbdc:	462a      	mov	r2, r5
    cbde:	e7fa      	b.n	cbd6 <txrx_thread+0xce>
		s32_t timeout = K_FOREVER;
    cbe0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cbe4:	e7cc      	b.n	cb80 <txrx_thread+0x78>
	if (sendto(ep->sock, inflight->packet.data, inflight->packet.offset, 0, &inflight->addr, inflight->addr_len) < 0) {
    cbe6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    cbe8:	892a      	ldrh	r2, [r5, #8]
    cbea:	9300      	str	r3, [sp, #0]
    cbec:	6869      	ldr	r1, [r5, #4]
    cbee:	f105 0314 	add.w	r3, r5, #20
    cbf2:	6820      	ldr	r0, [r4, #0]
    cbf4:	f7ff fda2 	bl	c73c <sendto.constprop.1>
    cbf8:	e7b7      	b.n	cb6a <txrx_thread+0x62>
		} else if (ret == 0) {
    cbfa:	2800      	cmp	r0, #0
    cbfc:	d1b5      	bne.n	cb6a <txrx_thread+0x62>
			if (events[0].state == K_POLL_STATE_FIFO_DATA_AVAILABLE) {
    cbfe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cc00:	f403 32f8 	and.w	r2, r3, #126976	; 0x1f000
    cc04:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    cc08:	d11e      	bne.n	cc48 <txrx_thread+0x140>
				events[0].state = K_POLL_STATE_NOT_READY;
    cc0a:	f360 3310 	bfi	r3, r0, #12, #5
    cc0e:	9313      	str	r3, [sp, #76]	; 0x4c
	return z_impl_k_queue_get(queue, timeout);
    cc10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    cc14:	486b      	ldr	r0, [pc, #428]	; (cdc4 <txrx_thread+0x2bc>)
    cc16:	f00d f8f7 	bl	19e08 <z_impl_k_queue_get>
    cc1a:	4605      	mov	r5, r0
	inflight_packet *new_inflight_packets = k_calloc(ep->inflight_packets_len + 1, sizeof(inflight_packet));
    cc1c:	68e0      	ldr	r0, [r4, #12]
				transmit_packet(tx, ep, ep->sock);
    cc1e:	6823      	ldr	r3, [r4, #0]
	inflight_packet *new_inflight_packets = k_calloc(ep->inflight_packets_len + 1, sizeof(inflight_packet));
    cc20:	2144      	movs	r1, #68	; 0x44
    cc22:	3001      	adds	r0, #1
				transmit_packet(tx, ep, ep->sock);
    cc24:	9307      	str	r3, [sp, #28]
	inflight_packet *new_inflight_packets = k_calloc(ep->inflight_packets_len + 1, sizeof(inflight_packet));
    cc26:	f011 fdc3 	bl	1e7b0 <k_calloc>
	if (new_inflight_packets == NULL) {
    cc2a:	4607      	mov	r7, r0
    cc2c:	2800      	cmp	r0, #0
    cc2e:	d140      	bne.n	ccb2 <txrx_thread+0x1aa>
		tx->response_handler(tx->response_handler_data, -ENOMEM, NULL);
    cc30:	4602      	mov	r2, r0
    cc32:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    cc34:	6b68      	ldr	r0, [r5, #52]	; 0x34
    cc36:	f06f 010b 	mvn.w	r1, #11
    cc3a:	4798      	blx	r3
		k_free(tx->packet.data);
    cc3c:	6868      	ldr	r0, [r5, #4]
    cc3e:	f011 fdb2 	bl	1e7a6 <k_free>
				k_free(tx);
    cc42:	4628      	mov	r0, r5
    cc44:	f011 fdaf 	bl	1e7a6 <k_free>
			if (events[1].state == K_POLL_STATE_FIFO_DATA_AVAILABLE) {
    cc48:	9b18      	ldr	r3, [sp, #96]	; 0x60
    cc4a:	f403 32f8 	and.w	r2, r3, #126976	; 0x1f000
    cc4e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    cc52:	d18a      	bne.n	cb6a <txrx_thread+0x62>
				events[1].state = K_POLL_STATE_NOT_READY;
    cc54:	f36f 3310 	bfc	r3, #12, #5
    cc58:	9318      	str	r3, [sp, #96]	; 0x60
    cc5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    cc5e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    cc60:	f00d f8d2 	bl	19e08 <z_impl_k_queue_get>
	if (is_request(&rx->packet)) {
    cc64:	f500 7701 	add.w	r7, r0, #516	; 0x204
    cc68:	4606      	mov	r6, r0
    cc6a:	4638      	mov	r0, r7
    cc6c:	f00f fd2d 	bl	1c6ca <is_request>
    cc70:	4605      	mov	r5, r0
    cc72:	2800      	cmp	r0, #0
    cc74:	f000 8081 	beq.w	cd7a <txrx_thread+0x272>
		int err = coap_handle_request(&rx->packet, ep->resources, rx->options, MAX_COAP_OPTIONS, &rx->addr, rx->addr_len);
    cc78:	f8d6 332c 	ldr.w	r3, [r6, #812]	; 0x32c
    cc7c:	f506 7545 	add.w	r5, r6, #788	; 0x314
    cc80:	e9cd 5300 	strd	r5, r3, [sp]
    cc84:	f506 7205 	add.w	r2, r6, #532	; 0x214
    cc88:	2310      	movs	r3, #16
    cc8a:	6861      	ldr	r1, [r4, #4]
    cc8c:	4638      	mov	r0, r7
    cc8e:	f010 fb8c 	bl	1d3aa <coap_handle_request>
		if (err != 0) {
    cc92:	b150      	cbz	r0, ccaa <txrx_thread+0x1a2>
			int err = coap_endpoint_respond(ep, &rx->packet, response_code_for_error(err), NULL, 0, &rx->addr, rx->addr_len);
    cc94:	f8d6 332c 	ldr.w	r3, [r6, #812]	; 0x32c
    cc98:	22a0      	movs	r2, #160	; 0xa0
    cc9a:	e9cd 5301 	strd	r5, r3, [sp, #4]
    cc9e:	2300      	movs	r3, #0
    cca0:	4639      	mov	r1, r7
    cca2:	9300      	str	r3, [sp, #0]
    cca4:	4620      	mov	r0, r4
    cca6:	f00f fd99 	bl	1c7dc <coap_endpoint_respond>
				k_free(rx);
    ccaa:	4630      	mov	r0, r6
    ccac:	f011 fd7b 	bl	1e7a6 <k_free>
    ccb0:	e75b      	b.n	cb6a <txrx_thread+0x62>
	memcpy(new_inflight_packets, ep->inflight_packets, ep->inflight_packets_len * sizeof(inflight_packet));
    ccb2:	68e2      	ldr	r2, [r4, #12]
    ccb4:	68a1      	ldr	r1, [r4, #8]
    ccb6:	fb09 f202 	mul.w	r2, r9, r2
    ccba:	f010 fdcf 	bl	1d85c <memcpy>
	k_free(ep->inflight_packets);
    ccbe:	68a0      	ldr	r0, [r4, #8]
    ccc0:	f011 fd71 	bl	1e7a6 <k_free>
	ep->inflight_packets_len++;
    ccc4:	68e3      	ldr	r3, [r4, #12]
	if (coap_header_get_type(&tx->packet) == COAP_TYPE_CON) {
    ccc6:	f105 0804 	add.w	r8, r5, #4
	ep->inflight_packets_len++;
    ccca:	3301      	adds	r3, #1
    cccc:	60e3      	str	r3, [r4, #12]
	inflight_packet *inflight = &ep->inflight_packets[ep->inflight_packets_len - 1];
    ccce:	fb09 f303 	mul.w	r3, r9, r3
	ep->inflight_packets = new_inflight_packets;
    ccd2:	60a7      	str	r7, [r4, #8]
	if (coap_header_get_type(&tx->packet) == COAP_TYPE_CON) {
    ccd4:	4640      	mov	r0, r8
	inflight_packet *inflight = &ep->inflight_packets[ep->inflight_packets_len - 1];
    ccd6:	f1a3 0b44 	sub.w	fp, r3, #68	; 0x44
	if (coap_header_get_type(&tx->packet) == COAP_TYPE_CON) {
    ccda:	f010 fb00 	bl	1d2de <coap_header_get_type>
	inflight_packet *inflight = &ep->inflight_packets[ep->inflight_packets_len - 1];
    ccde:	eb07 060b 	add.w	r6, r7, fp
	if (coap_header_get_type(&tx->packet) == COAP_TYPE_CON) {
    cce2:	4686      	mov	lr, r0
    cce4:	f105 0a14 	add.w	sl, r5, #20
    cce8:	bb28      	cbnz	r0, cd36 <txrx_thread+0x22e>
		inflight->retransmit = true;
    ccea:	2201      	movs	r2, #1
		inflight->addr = tx->addr;
    ccec:	46d4      	mov	ip, sl
		inflight->retransmit = true;
    ccee:	f807 200b 	strb.w	r2, [r7, fp]
		inflight->packet = tx->packet;
    ccf2:	1d37      	adds	r7, r6, #4
    ccf4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
    ccf8:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
		inflight->addr = tx->addr;
    ccfc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    cd00:	f106 0714 	add.w	r7, r6, #20
    cd04:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    cd06:	e89c 0003 	ldmia.w	ip, {r0, r1}
		inflight->addr_len = tx->addr_len;
    cd0a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		inflight->addr = tx->addr;
    cd0c:	e887 0003 	stmia.w	r7, {r0, r1}
		inflight->addr_len = tx->addr_len;
    cd10:	62f3      	str	r3, [r6, #44]	; 0x2c
		inflight->retransmission_count = 0;
    cd12:	f886 e030 	strb.w	lr, [r6, #48]	; 0x30
		inflight->timeout = K_SECONDS(2) + sys_rand32_get() % K_SECONDS(1);
    cd16:	f002 f8eb 	bl	eef0 <sys_rand32_get>
    cd1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    cd1e:	fbb0 f2f3 	udiv	r2, r0, r3
    cd22:	fb02 0013 	mls	r0, r2, r3, r0
    cd26:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
    cd2a:	6370      	str	r0, [r6, #52]	; 0x34
	return z_impl_k_uptime_get();
    cd2c:	f011 fe46 	bl	1e9bc <z_impl_k_uptime_get>
		inflight->deadline = k_uptime_get_32() + inflight->timeout;
    cd30:	6b73      	ldr	r3, [r6, #52]	; 0x34
    cd32:	4418      	add	r0, r3
    cd34:	63b0      	str	r0, [r6, #56]	; 0x38
	inflight->response_handler = tx->response_handler;
    cd36:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	if (sendto(sock, tx->packet.data, tx->packet.offset, 0, &tx->addr, tx->addr_len) < 0) {
    cd38:	892a      	ldrh	r2, [r5, #8]
	inflight->response_handler = tx->response_handler;
    cd3a:	63f3      	str	r3, [r6, #60]	; 0x3c
	inflight->response_handler_data = tx->response_handler_data;
    cd3c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	if (sendto(sock, tx->packet.data, tx->packet.offset, 0, &tx->addr, tx->addr_len) < 0) {
    cd3e:	9807      	ldr	r0, [sp, #28]
	inflight->response_handler_data = tx->response_handler_data;
    cd40:	6433      	str	r3, [r6, #64]	; 0x40
	if (sendto(sock, tx->packet.data, tx->packet.offset, 0, &tx->addr, tx->addr_len) < 0) {
    cd42:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    cd44:	9300      	str	r3, [sp, #0]
    cd46:	6869      	ldr	r1, [r5, #4]
    cd48:	4653      	mov	r3, sl
    cd4a:	f7ff fcf7 	bl	c73c <sendto.constprop.1>
	if (coap_header_get_type(&tx->packet) != COAP_TYPE_CON) {
    cd4e:	4640      	mov	r0, r8
    cd50:	f010 fac5 	bl	1d2de <coap_header_get_type>
    cd54:	2800      	cmp	r0, #0
    cd56:	f43f af74 	beq.w	cc42 <txrx_thread+0x13a>
		k_free(tx->packet.data);
    cd5a:	6868      	ldr	r0, [r5, #4]
    cd5c:	f011 fd23 	bl	1e7a6 <k_free>
		tx->packet.data = NULL;
    cd60:	2300      	movs	r3, #0
		if (!is_request(&tx->packet)) {
    cd62:	4640      	mov	r0, r8
		tx->packet.data = NULL;
    cd64:	606b      	str	r3, [r5, #4]
		if (!is_request(&tx->packet)) {
    cd66:	f00f fcb0 	bl	1c6ca <is_request>
    cd6a:	2800      	cmp	r0, #0
    cd6c:	f47f af69 	bne.w	cc42 <txrx_thread+0x13a>
			free_inflight_packet(ep, inflight);
    cd70:	4631      	mov	r1, r6
    cd72:	4620      	mov	r0, r4
    cd74:	f00f fc8e 	bl	1c694 <free_inflight_packet>
    cd78:	e763      	b.n	cc42 <txrx_thread+0x13a>
	u16_t id = coap_header_get_id(&rx->packet);
    cd7a:	4638      	mov	r0, r7
    cd7c:	f010 faf7 	bl	1d36e <coap_header_get_id>
	u8_t token_len = coap_header_get_token(&rx->packet, token);
    cd80:	a90c      	add	r1, sp, #48	; 0x30
	u16_t id = coap_header_get_id(&rx->packet);
    cd82:	9008      	str	r0, [sp, #32]
	u8_t token_len = coap_header_get_token(&rx->packet, token);
    cd84:	4638      	mov	r0, r7
    cd86:	f010 fab1 	bl	1d2ec <coap_header_get_token>
	for (size_t i = 0; i < ep->inflight_packets_len; i++) {
    cd8a:	46a8      	mov	r8, r5
		bool addrs_equal = inflight->addr_len == rx->addr_len && memcmp(&inflight->addr, &rx->addr, rx->addr_len) == 0;
    cd8c:	f506 7345 	add.w	r3, r6, #788	; 0x314
	u8_t token_len = coap_header_get_token(&rx->packet, token);
    cd90:	9007      	str	r0, [sp, #28]
		bool addrs_equal = inflight->addr_len == rx->addr_len && memcmp(&inflight->addr, &rx->addr, rx->addr_len) == 0;
    cd92:	930a      	str	r3, [sp, #40]	; 0x28
	for (size_t i = 0; i < ep->inflight_packets_len; i++) {
    cd94:	68e3      	ldr	r3, [r4, #12]
    cd96:	4598      	cmp	r8, r3
    cd98:	d318      	bcc.n	cdcc <txrx_thread+0x2c4>
	if (coap_header_get_type(&rx->packet) == COAP_TYPE_CON) {
    cd9a:	4638      	mov	r0, r7
    cd9c:	f010 fa9f 	bl	1d2de <coap_header_get_type>
    cda0:	2800      	cmp	r0, #0
    cda2:	d182      	bne.n	ccaa <txrx_thread+0x1a2>
		int err = coap_endpoint_reset(ep, &rx->packet, &rx->addr, rx->addr_len);
    cda4:	f8d6 332c 	ldr.w	r3, [r6, #812]	; 0x32c
    cda8:	f506 7245 	add.w	r2, r6, #788	; 0x314
    cdac:	4639      	mov	r1, r7
    cdae:	4620      	mov	r0, r4
    cdb0:	f00f fcdd 	bl	1c76e <coap_endpoint_reset>
		return;
    cdb4:	e779      	b.n	ccaa <txrx_thread+0x1a2>
    cdb6:	bf00      	nop
    cdb8:	0000c7ad 	.word	0x0000c7ad
    cdbc:	20025088 	.word	0x20025088
    cdc0:	20020018 	.word	0x20020018
    cdc4:	2002c630 	.word	0x2002c630
    cdc8:	2002c61c 	.word	0x2002c61c
		inflight_packet *inflight = &ep->inflight_packets[i];
    cdcc:	68a5      	ldr	r5, [r4, #8]
		bool addrs_equal = inflight->addr_len == rx->addr_len && memcmp(&inflight->addr, &rx->addr, rx->addr_len) == 0;
    cdce:	f8d6 332c 	ldr.w	r3, [r6, #812]	; 0x32c
		inflight_packet *inflight = &ep->inflight_packets[i];
    cdd2:	fb09 5508 	mla	r5, r9, r8, r5
		bool addrs_equal = inflight->addr_len == rx->addr_len && memcmp(&inflight->addr, &rx->addr, rx->addr_len) == 0;
    cdd6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    cdd8:	429a      	cmp	r2, r3
    cdda:	d134      	bne.n	ce46 <txrx_thread+0x33e>
    cddc:	990a      	ldr	r1, [sp, #40]	; 0x28
    cdde:	f105 0014 	add.w	r0, r5, #20
    cde2:	f010 fd2b 	bl	1d83c <memcmp>
    cde6:	fab0 fb80 	clz	fp, r0
    cdea:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
		bool ids_equal = coap_header_get_id(&inflight->packet) == id;
    cdee:	f105 0a04 	add.w	sl, r5, #4
    cdf2:	4650      	mov	r0, sl
    cdf4:	f010 fabb 	bl	1d36e <coap_header_get_id>
		bool tokens_equal = coap_header_get_token(&inflight->packet, tok) == token_len && memcmp(tok, token, token_len) == 0;
    cdf8:	a90e      	add	r1, sp, #56	; 0x38
		bool ids_equal = coap_header_get_id(&inflight->packet) == id;
    cdfa:	9009      	str	r0, [sp, #36]	; 0x24
		bool tokens_equal = coap_header_get_token(&inflight->packet, tok) == token_len && memcmp(tok, token, token_len) == 0;
    cdfc:	4650      	mov	r0, sl
    cdfe:	f010 fa75 	bl	1d2ec <coap_header_get_token>
    ce02:	9b07      	ldr	r3, [sp, #28]
    ce04:	4283      	cmp	r3, r0
    ce06:	d121      	bne.n	ce4c <txrx_thread+0x344>
    ce08:	461a      	mov	r2, r3
    ce0a:	a90c      	add	r1, sp, #48	; 0x30
    ce0c:	a80e      	add	r0, sp, #56	; 0x38
    ce0e:	f010 fd15 	bl	1d83c <memcmp>
    ce12:	fab0 f080 	clz	r0, r0
    ce16:	0940      	lsrs	r0, r0, #5
		if (addrs_equal && (ids_equal || tokens_equal)) {
    ce18:	f1bb 0f00 	cmp.w	fp, #0
    ce1c:	d01a      	beq.n	ce54 <txrx_thread+0x34c>
    ce1e:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
    ce22:	4293      	cmp	r3, r2
    ce24:	d114      	bne.n	ce50 <txrx_thread+0x348>
		if (coap_header_get_type(&rx->packet) == COAP_TYPE_RESET) {
    ce26:	4638      	mov	r0, r7
    ce28:	f010 fa59 	bl	1d2de <coap_header_get_type>
    ce2c:	2803      	cmp	r0, #3
    ce2e:	d114      	bne.n	ce5a <txrx_thread+0x352>
			inflight->response_handler(inflight->response_handler_data, -ECANCELED, NULL);
    ce30:	2200      	movs	r2, #0
    ce32:	f06f 0147 	mvn.w	r1, #71	; 0x47
    ce36:	6beb      	ldr	r3, [r5, #60]	; 0x3c
			inflight->response_handler(inflight->response_handler_data, 0, &rx->packet);
    ce38:	6c28      	ldr	r0, [r5, #64]	; 0x40
    ce3a:	4798      	blx	r3
			free_inflight_packet(ep, inflight);
    ce3c:	4629      	mov	r1, r5
    ce3e:	4620      	mov	r0, r4
    ce40:	f00f fc28 	bl	1c694 <free_inflight_packet>
			return;
    ce44:	e731      	b.n	ccaa <txrx_thread+0x1a2>
		bool addrs_equal = inflight->addr_len == rx->addr_len && memcmp(&inflight->addr, &rx->addr, rx->addr_len) == 0;
    ce46:	f04f 0b00 	mov.w	fp, #0
    ce4a:	e7d0      	b.n	cdee <txrx_thread+0x2e6>
		bool tokens_equal = coap_header_get_token(&inflight->packet, tok) == token_len && memcmp(tok, token, token_len) == 0;
    ce4c:	2000      	movs	r0, #0
    ce4e:	e7e3      	b.n	ce18 <txrx_thread+0x310>
		if (addrs_equal && (ids_equal || tokens_equal)) {
    ce50:	2800      	cmp	r0, #0
    ce52:	d1e8      	bne.n	ce26 <txrx_thread+0x31e>
	for (size_t i = 0; i < ep->inflight_packets_len; i++) {
    ce54:	f108 0801 	add.w	r8, r8, #1
    ce58:	e79c      	b.n	cd94 <txrx_thread+0x28c>
	u8_t code = coap_header_get_code(p);
    ce5a:	4638      	mov	r0, r7
    ce5c:	f010 fa5a 	bl	1d314 <coap_header_get_code>
		if (is_response(&rx->packet)) {
    ce60:	f010 08e0 	ands.w	r8, r0, #224	; 0xe0
    ce64:	d003      	beq.n	ce6e <txrx_thread+0x366>
			inflight->response_handler(inflight->response_handler_data, 0, &rx->packet);
    ce66:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    ce68:	463a      	mov	r2, r7
    ce6a:	2100      	movs	r1, #0
    ce6c:	e7e4      	b.n	ce38 <txrx_thread+0x330>
		if (is_request(&inflight->packet)) {
    ce6e:	4650      	mov	r0, sl
    ce70:	f00f fc2b 	bl	1c6ca <is_request>
    ce74:	b110      	cbz	r0, ce7c <txrx_thread+0x374>
			inflight->retransmit = false;
    ce76:	f885 8000 	strb.w	r8, [r5]
			return;
    ce7a:	e716      	b.n	ccaa <txrx_thread+0x1a2>
	u8_t code = coap_header_get_code(p);
    ce7c:	4650      	mov	r0, sl
    ce7e:	f010 fa49 	bl	1d314 <coap_header_get_code>
		if (is_response(&inflight->packet)) {
    ce82:	f010 0fe0 	tst.w	r0, #224	; 0xe0
    ce86:	d088      	beq.n	cd9a <txrx_thread+0x292>
    ce88:	e7d8      	b.n	ce3c <txrx_thread+0x334>
}
    ce8a:	b01b      	add	sp, #108	; 0x6c
    ce8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000ce90 <z_sys_mem_pool_block_free>:
	return 0;
}

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
    ce90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce94:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
    ce96:	7a83      	ldrb	r3, [r0, #10]
{
    ce98:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
    ce9a:	009b      	lsls	r3, r3, #2
    ce9c:	3307      	adds	r3, #7
    ce9e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    cea2:	ebad 0d03 	sub.w	sp, sp, r3
    cea6:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
    cea8:	6843      	ldr	r3, [r0, #4]
{
    ceaa:	4606      	mov	r6, r0
	lsizes[0] = p->max_sz;
    ceac:	465c      	mov	r4, fp
	for (i = 1; i <= level; i++) {
    ceae:	2001      	movs	r0, #1
	lsizes[0] = p->max_sz;
    ceb0:	f8cb 3000 	str.w	r3, [fp]
	for (i = 1; i <= level; i++) {
    ceb4:	4281      	cmp	r1, r0
    ceb6:	d222      	bcs.n	cefe <z_sys_mem_pool_block_free+0x6e>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    ceb8:	7c30      	ldrb	r0, [r6, #16]
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
    ceba:	4688      	mov	r8, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    cebc:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
    cec0:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    cec2:	d001      	beq.n	cec8 <z_sys_mem_pool_block_free+0x38>
    cec4:	f00f fcf0 	bl	1c8a8 <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
    cec8:	4604      	mov	r4, r0
	while (level >= 0) {
    ceca:	f1b8 0f00 	cmp.w	r8, #0
    cece:	da1e      	bge.n	cf0e <z_sys_mem_pool_block_free+0x7e>
	__ASSERT(0, "out of levels");
    ced0:	23bc      	movs	r3, #188	; 0xbc
    ced2:	4a50      	ldr	r2, [pc, #320]	; (d014 <z_sys_mem_pool_block_free+0x184>)
    ced4:	4950      	ldr	r1, [pc, #320]	; (d018 <z_sys_mem_pool_block_free+0x188>)
    ced6:	4851      	ldr	r0, [pc, #324]	; (d01c <z_sys_mem_pool_block_free+0x18c>)
    ced8:	f00f ff6e 	bl	1cdb8 <printk>
    cedc:	4850      	ldr	r0, [pc, #320]	; (d020 <z_sys_mem_pool_block_free+0x190>)
    cede:	f00f ff6b 	bl	1cdb8 <printk>
    cee2:	21bc      	movs	r1, #188	; 0xbc
    cee4:	484b      	ldr	r0, [pc, #300]	; (d014 <z_sys_mem_pool_block_free+0x184>)
    cee6:	f00f ff99 	bl	1ce1c <assert_post_action>
	return -1;
    ceea:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	pool_irq_unlock(p, key);
    ceee:	4621      	mov	r1, r4
    cef0:	7c30      	ldrb	r0, [r6, #16]
    cef2:	f00f fce2 	bl	1c8ba <pool_irq_unlock.isra.4>
}
    cef6:	3714      	adds	r7, #20
    cef8:	46bd      	mov	sp, r7
    cefa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
    cefe:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
    cf00:	3001      	adds	r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
    cf02:	089b      	lsrs	r3, r3, #2
    cf04:	f023 0303 	bic.w	r3, r3, #3
    cf08:	f844 3f04 	str.w	r3, [r4, #4]!
    cf0c:	e7d2      	b.n	ceb4 <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
    cf0e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
    cf12:	462a      	mov	r2, r5
	return (u8_t *)p->buf + lsz * block;
    cf14:	fb03 fa05 	mul.w	sl, r3, r5
		int i, lsz = lsizes[level];
    cf18:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
    cf1a:	6833      	ldr	r3, [r6, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
    cf1c:	4641      	mov	r1, r8
	return (u8_t *)p->buf + lsz * block;
    cf1e:	603b      	str	r3, [r7, #0]
    cf20:	eb03 090a 	add.w	r9, r3, sl
	int bit = get_bit_ptr(p, level, bn, &word);
    cf24:	4630      	mov	r0, r6
    cf26:	f107 030c 	add.w	r3, r7, #12
    cf2a:	f00f fca6 	bl	1c87a <get_bit_ptr>
	return (*word >> bit) & 1;
    cf2e:	68fb      	ldr	r3, [r7, #12]
    cf30:	681b      	ldr	r3, [r3, #0]
    cf32:	fa23 f000 	lsr.w	r0, r3, r0
		__ASSERT(alloc_bit_is_set(p, level, bn),
    cf36:	07c3      	lsls	r3, r0, #31
    cf38:	d40d      	bmi.n	cf56 <z_sys_mem_pool_block_free+0xc6>
    cf3a:	23a3      	movs	r3, #163	; 0xa3
    cf3c:	4a35      	ldr	r2, [pc, #212]	; (d014 <z_sys_mem_pool_block_free+0x184>)
    cf3e:	4939      	ldr	r1, [pc, #228]	; (d024 <z_sys_mem_pool_block_free+0x194>)
    cf40:	4836      	ldr	r0, [pc, #216]	; (d01c <z_sys_mem_pool_block_free+0x18c>)
    cf42:	f00f ff39 	bl	1cdb8 <printk>
    cf46:	4649      	mov	r1, r9
    cf48:	4837      	ldr	r0, [pc, #220]	; (d028 <z_sys_mem_pool_block_free+0x198>)
    cf4a:	f00f ff35 	bl	1cdb8 <printk>
    cf4e:	21a3      	movs	r1, #163	; 0xa3
    cf50:	4830      	ldr	r0, [pc, #192]	; (d014 <z_sys_mem_pool_block_free+0x184>)
    cf52:	f00f ff63 	bl	1ce1c <assert_post_action>
	int bit = get_bit_ptr(p, level, bn, &word);
    cf56:	f107 030c 	add.w	r3, r7, #12
    cf5a:	462a      	mov	r2, r5
    cf5c:	4641      	mov	r1, r8
    cf5e:	4630      	mov	r0, r6
    cf60:	f00f fc8b 	bl	1c87a <get_bit_ptr>
	*word &= ~(1<<bit);
    cf64:	2301      	movs	r3, #1
    cf66:	68fa      	ldr	r2, [r7, #12]
    cf68:	fa03 f000 	lsl.w	r0, r3, r0
    cf6c:	6813      	ldr	r3, [r2, #0]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    cf6e:	6839      	ldr	r1, [r7, #0]
    cf70:	ea23 0300 	bic.w	r3, r3, r0
    cf74:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
    cf76:	230c      	movs	r3, #12
    cf78:	68f2      	ldr	r2, [r6, #12]
    cf7a:	fb03 2308 	mla	r3, r3, r8, r2
    cf7e:	1d1a      	adds	r2, r3, #4
    cf80:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
    cf84:	689a      	ldr	r2, [r3, #8]
		pool_irq_unlock(p, key);
    cf86:	4621      	mov	r1, r4
    cf88:	f8c9 2004 	str.w	r2, [r9, #4]

	list->tail->next = node;
    cf8c:	689a      	ldr	r2, [r3, #8]
    cf8e:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
    cf92:	f8c3 9008 	str.w	r9, [r3, #8]
    cf96:	7c30      	ldrb	r0, [r6, #16]
    cf98:	f00f fc8f 	bl	1c8ba <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    cf9c:	7c30      	ldrb	r0, [r6, #16]
    cf9e:	f010 0001 	ands.w	r0, r0, #1
    cfa2:	d001      	beq.n	cfa8 <z_sys_mem_pool_block_free+0x118>
    cfa4:	f00f fc80 	bl	1c8a8 <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
    cfa8:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
    cfaa:	f1b8 0f00 	cmp.w	r8, #0
    cfae:	d09e      	beq.n	ceee <z_sys_mem_pool_block_free+0x5e>
	int bit = get_bit_ptr(p, level, bn, &word);
    cfb0:	f107 030c 	add.w	r3, r7, #12
    cfb4:	462a      	mov	r2, r5
    cfb6:	4641      	mov	r1, r8
    cfb8:	4630      	mov	r0, r6
    cfba:	f00f fc5e 	bl	1c87a <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
    cfbe:	68fb      	ldr	r3, [r7, #12]
    cfc0:	2800      	cmp	r0, #0
    cfc2:	bfb8      	it	lt
    cfc4:	3003      	addlt	r0, #3
    cfc6:	681b      	ldr	r3, [r3, #0]
    cfc8:	f020 0003 	bic.w	r0, r0, #3
    cfcc:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
    cfd0:	f010 000f 	ands.w	r0, r0, #15
    cfd4:	d18b      	bne.n	ceee <z_sys_mem_pool_block_free+0x5e>
	node->next = NULL;
    cfd6:	4684      	mov	ip, r0
			int b = (bn & ~3) + i;
    cfd8:	f025 0a03 	bic.w	sl, r5, #3
	return (u8_t *)p->buf + lsz * block;
    cfdc:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
    cfde:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
    cfe2:	4353      	muls	r3, r2
    cfe4:	6832      	ldr	r2, [r6, #0]
		for (i = 0; i < 4; i++) {
    cfe6:	3001      	adds	r0, #1
	return (u8_t *)p->buf + lsz * block;
    cfe8:	18d1      	adds	r1, r2, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    cfea:	f8d1 9004 	ldr.w	r9, [r1, #4]
    cfee:	f852 e003 	ldr.w	lr, [r2, r3]
		for (i = 0; i < 4; i++) {
    cff2:	2804      	cmp	r0, #4
    cff4:	f8c9 e000 	str.w	lr, [r9]
	node->next->prev = node->prev;
    cff8:	f8ce 9004 	str.w	r9, [lr, #4]
	node->next = NULL;
    cffc:	f842 c003 	str.w	ip, [r2, r3]
	node->prev = NULL;
    d000:	f8c1 c004 	str.w	ip, [r1, #4]
    d004:	d1ea      	bne.n	cfdc <z_sys_mem_pool_block_free+0x14c>
		bn = bn / 4;
    d006:	2d00      	cmp	r5, #0
    d008:	bfb8      	it	lt
    d00a:	3503      	addlt	r5, #3
		level = level - 1;
    d00c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		bn = bn / 4;
    d010:	10ad      	asrs	r5, r5, #2
    d012:	e75a      	b.n	ceca <z_sys_mem_pool_block_free+0x3a>
    d014:	0001f752 	.word	0x0001f752
    d018:	00020517 	.word	0x00020517
    d01c:	0001f722 	.word	0x0001f722
    d020:	0001f7b3 	.word	0x0001f7b3
    d024:	0001f76f 	.word	0x0001f76f
    d028:	0001f78e 	.word	0x0001f78e

0000d02c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    d02c:	680b      	ldr	r3, [r1, #0]
    d02e:	3301      	adds	r3, #1
    d030:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    d032:	4b01      	ldr	r3, [pc, #4]	; (d038 <char_out+0xc>)
    d034:	681b      	ldr	r3, [r3, #0]
    d036:	4718      	bx	r3
    d038:	2002c464 	.word	0x2002c464

0000d03c <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    d03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d040:	b085      	sub	sp, #20
    d042:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    d044:	469b      	mov	fp, r3
    d046:	2c01      	cmp	r4, #1
    d048:	bfb8      	it	lt
    d04a:	2401      	movlt	r4, #1
    d04c:	2b01      	cmp	r3, #1
    d04e:	bf0c      	ite	eq
    d050:	2330      	moveq	r3, #48	; 0x30
    d052:	2320      	movne	r3, #32
    d054:	4616      	mov	r6, r2
    d056:	4682      	mov	sl, r0
    d058:	4688      	mov	r8, r1
    d05a:	2501      	movs	r5, #1
    d05c:	270a      	movs	r7, #10
    d05e:	2200      	movs	r2, #0
    d060:	f8df 906c 	ldr.w	r9, [pc, #108]	; d0d0 <_printk_dec_ulong+0x94>
    d064:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    d066:	fbb6 f3f9 	udiv	r3, r6, r9
    d06a:	9301      	str	r3, [sp, #4]
    d06c:	b90a      	cbnz	r2, d072 <_printk_dec_ulong+0x36>
    d06e:	45b1      	cmp	r9, r6
    d070:	d81c      	bhi.n	d0ac <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    d072:	9b01      	ldr	r3, [sp, #4]
    d074:	4641      	mov	r1, r8
    d076:	f103 0030 	add.w	r0, r3, #48	; 0x30
    d07a:	47d0      	blx	sl
			found_largest_digit = 1;
    d07c:	2201      	movs	r2, #1
			digits++;
    d07e:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    d080:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    d082:	3f01      	subs	r7, #1
		remainder %= pos;
    d084:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
    d088:	230a      	movs	r3, #10
	while (pos >= 10) {
    d08a:	2f01      	cmp	r7, #1
		pos /= 10;
    d08c:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    d090:	d1e9      	bne.n	d066 <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
    d092:	4641      	mov	r1, r8
    d094:	f106 0030 	add.w	r0, r6, #48	; 0x30
    d098:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    d09a:	f1bb 0f03 	cmp.w	fp, #3
    d09e:	d102      	bne.n	d0a6 <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
    d0a0:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
    d0a2:	2c00      	cmp	r4, #0
    d0a4:	dc0e      	bgt.n	d0c4 <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
    d0a6:	b005      	add	sp, #20
    d0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    d0ac:	42bc      	cmp	r4, r7
    d0ae:	dbe7      	blt.n	d080 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    d0b0:	f1bb 0f02 	cmp.w	fp, #2
    d0b4:	d8e4      	bhi.n	d080 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    d0b6:	4641      	mov	r1, r8
    d0b8:	9802      	ldr	r0, [sp, #8]
    d0ba:	9203      	str	r2, [sp, #12]
			digits++;
    d0bc:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    d0be:	47d0      	blx	sl
			digits++;
    d0c0:	9a03      	ldr	r2, [sp, #12]
    d0c2:	e7dd      	b.n	d080 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    d0c4:	4641      	mov	r1, r8
    d0c6:	2020      	movs	r0, #32
    d0c8:	47d0      	blx	sl
    d0ca:	3c01      	subs	r4, #1
    d0cc:	e7e9      	b.n	d0a2 <_printk_dec_ulong+0x66>
    d0ce:	bf00      	nop
    d0d0:	3b9aca00 	.word	0x3b9aca00

0000d0d4 <vprintk>:
	struct out_context ctx = { 0 };
    d0d4:	2300      	movs	r3, #0
{
    d0d6:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
    d0d8:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    d0da:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    d0dc:	4803      	ldr	r0, [pc, #12]	; (d0ec <vprintk+0x18>)
    d0de:	460b      	mov	r3, r1
    d0e0:	a901      	add	r1, sp, #4
    d0e2:	f00f fcf9 	bl	1cad8 <z_vprintk>
}
    d0e6:	b003      	add	sp, #12
    d0e8:	f85d fb04 	ldr.w	pc, [sp], #4
    d0ec:	0000d02d 	.word	0x0000d02d

0000d0f0 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    d0f0:	f04f 0220 	mov.w	r2, #32
    d0f4:	f3ef 8311 	mrs	r3, BASEPRI
    d0f8:	f382 8811 	msr	BASEPRI, r2
    d0fc:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    d100:	2101      	movs	r1, #1
    d102:	4a04      	ldr	r2, [pc, #16]	; (d114 <nordicsemi_nrf91_init+0x24>)
    d104:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    d108:	f383 8811 	msr	BASEPRI, r3
    d10c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    d110:	2000      	movs	r0, #0
    d112:	4770      	bx	lr
    d114:	40039000 	.word	0x40039000

0000d118 <coap_next_token>:
{
	return append(cpkt, payload, payload_len) ? 0 : -EINVAL;
}

u8_t *coap_next_token(void)
{
    d118:	b510      	push	{r4, lr}
	static u32_t rand[2];

	rand[0] = sys_rand32_get();
    d11a:	f001 fee9 	bl	eef0 <sys_rand32_get>
    d11e:	4c03      	ldr	r4, [pc, #12]	; (d12c <coap_next_token+0x14>)
    d120:	6020      	str	r0, [r4, #0]
	rand[1] = sys_rand32_get();
    d122:	f001 fee5 	bl	eef0 <sys_rand32_get>
    d126:	6060      	str	r0, [r4, #4]

	return (u8_t *) rand;
}
    d128:	4620      	mov	r0, r4
    d12a:	bd10      	pop	{r4, pc}
    d12c:	2002017c 	.word	0x2002017c

0000d130 <net_coap_init>:
 * use and should therefore not be exposed to applications.
 *
 * @return N/A
 */
void net_coap_init(void)
{
    d130:	b508      	push	{r3, lr}
	/* Initialize message_id to a random number */
	message_id = (u16_t)sys_rand32_get();
    d132:	f001 fedd 	bl	eef0 <sys_rand32_get>
    d136:	4b01      	ldr	r3, [pc, #4]	; (d13c <net_coap_init+0xc>)
    d138:	8018      	strh	r0, [r3, #0]
}
    d13a:	bd08      	pop	{r3, pc}
    d13c:	20024f24 	.word	0x20024f24

0000d140 <coap_next_id>:

u16_t coap_next_id(void)
{
	return message_id++;
    d140:	4b02      	ldr	r3, [pc, #8]	; (d14c <coap_next_id+0xc>)
    d142:	8818      	ldrh	r0, [r3, #0]
    d144:	1c42      	adds	r2, r0, #1
    d146:	801a      	strh	r2, [r3, #0]
}
    d148:	4770      	bx	lr
    d14a:	bf00      	nop
    d14c:	20024f24 	.word	0x20024f24

0000d150 <socket_offload_register>:

/* Only one provider may register socket operations upon boot. */
const struct socket_offload *socket_ops;

void socket_offload_register(const struct socket_offload *ops)
{
    d150:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
    d152:	4605      	mov	r5, r0
    d154:	b948      	cbnz	r0, d16a <socket_offload_register+0x1a>
    d156:	490c      	ldr	r1, [pc, #48]	; (d188 <socket_offload_register+0x38>)
    d158:	480c      	ldr	r0, [pc, #48]	; (d18c <socket_offload_register+0x3c>)
    d15a:	2311      	movs	r3, #17
    d15c:	4a0c      	ldr	r2, [pc, #48]	; (d190 <socket_offload_register+0x40>)
    d15e:	f00f fe2b 	bl	1cdb8 <printk>
    d162:	2111      	movs	r1, #17
    d164:	480a      	ldr	r0, [pc, #40]	; (d190 <socket_offload_register+0x40>)
    d166:	f00f fe59 	bl	1ce1c <assert_post_action>
	__ASSERT_NO_MSG(socket_ops == NULL);
    d16a:	4c0a      	ldr	r4, [pc, #40]	; (d194 <socket_offload_register+0x44>)
    d16c:	6822      	ldr	r2, [r4, #0]
    d16e:	b14a      	cbz	r2, d184 <socket_offload_register+0x34>
    d170:	4909      	ldr	r1, [pc, #36]	; (d198 <socket_offload_register+0x48>)
    d172:	4806      	ldr	r0, [pc, #24]	; (d18c <socket_offload_register+0x3c>)
    d174:	2312      	movs	r3, #18
    d176:	4a06      	ldr	r2, [pc, #24]	; (d190 <socket_offload_register+0x40>)
    d178:	f00f fe1e 	bl	1cdb8 <printk>
    d17c:	2112      	movs	r1, #18
    d17e:	4804      	ldr	r0, [pc, #16]	; (d190 <socket_offload_register+0x40>)
    d180:	f00f fe4c 	bl	1ce1c <assert_post_action>

	socket_ops = ops;
    d184:	6025      	str	r5, [r4, #0]
}
    d186:	bd38      	pop	{r3, r4, r5, pc}
    d188:	0001f71e 	.word	0x0001f71e
    d18c:	0001f722 	.word	0x0001f722
    d190:	0001f7c3 	.word	0x0001f7c3
    d194:	20020184 	.word	0x20020184
    d198:	0001f7f7 	.word	0x0001f7f7

0000d19c <clk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int clk_init(struct device *dev)
{
    d19c:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    d19e:	2200      	movs	r2, #0
{
    d1a0:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    d1a2:	2101      	movs	r1, #1
    d1a4:	2005      	movs	r0, #5
    d1a6:	f000 fbdd 	bl	d964 <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    d1aa:	2005      	movs	r0, #5
    d1ac:	f000 fbca 	bl	d944 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    d1b0:	2202      	movs	r2, #2
    d1b2:	4b07      	ldr	r3, [pc, #28]	; (d1d0 <clk_init+0x34>)
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    d1b4:	2000      	movs	r0, #0
    d1b6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    d1ba:	2203      	movs	r2, #3
    d1bc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	clock_irqs_enable();

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		sys_slist_init(&(get_sub_data(dev, i)->list));
    d1c0:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
    d1c2:	e9c3 0000 	strd	r0, r0, [r3]
    d1c6:	68a3      	ldr	r3, [r4, #8]
    d1c8:	e9c3 0003 	strd	r0, r0, [r3, #12]
	}

	return 0;
}
    d1cc:	bd10      	pop	{r4, pc}
    d1ce:	bf00      	nop
    d1d0:	40005000 	.word	0x40005000

0000d1d4 <get_status>:
{
    d1d4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    d1d6:	b2cc      	uxtb	r4, r1
    d1d8:	2c01      	cmp	r4, #1
{
    d1da:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    d1dc:	d909      	bls.n	d1f2 <get_status+0x1e>
    d1de:	490b      	ldr	r1, [pc, #44]	; (d20c <get_status+0x38>)
    d1e0:	480b      	ldr	r0, [pc, #44]	; (d210 <get_status+0x3c>)
    d1e2:	2384      	movs	r3, #132	; 0x84
    d1e4:	4a0b      	ldr	r2, [pc, #44]	; (d214 <get_status+0x40>)
    d1e6:	f00f fde7 	bl	1cdb8 <printk>
    d1ea:	2184      	movs	r1, #132	; 0x84
    d1ec:	4809      	ldr	r0, [pc, #36]	; (d214 <get_status+0x40>)
    d1ee:	f00f fe15 	bl	1ce1c <assert_post_action>
	if (data->started) {
    d1f2:	210c      	movs	r1, #12
	data = get_sub_data(dev, type);
    d1f4:	68ab      	ldr	r3, [r5, #8]
	if (data->started) {
    d1f6:	fb04 3101 	mla	r1, r4, r1, r3
    d1fa:	7a4b      	ldrb	r3, [r1, #9]
    d1fc:	b923      	cbnz	r3, d208 <get_status+0x34>
	if (data->ref > 0) {
    d1fe:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
    d200:	fab0 f080 	clz	r0, r0
    d204:	0940      	lsrs	r0, r0, #5
}
    d206:	bd38      	pop	{r3, r4, r5, pc}
		return CLOCK_CONTROL_STATUS_ON;
    d208:	2002      	movs	r0, #2
    d20a:	e7fc      	b.n	d206 <get_status+0x32>
    d20c:	0001f8a5 	.word	0x0001f8a5
    d210:	0001f722 	.word	0x0001f722
    d214:	0001f871 	.word	0x0001f871

0000d218 <clock_async_start>:
{
    d218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    d21c:	b2cd      	uxtb	r5, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    d21e:	2d01      	cmp	r5, #1
{
    d220:	4607      	mov	r7, r0
    d222:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    d224:	d909      	bls.n	d23a <clock_async_start+0x22>
    d226:	494a      	ldr	r1, [pc, #296]	; (d350 <clock_async_start+0x138>)
    d228:	484a      	ldr	r0, [pc, #296]	; (d354 <clock_async_start+0x13c>)
    d22a:	23fd      	movs	r3, #253	; 0xfd
    d22c:	4a4a      	ldr	r2, [pc, #296]	; (d358 <clock_async_start+0x140>)
    d22e:	f00f fdc3 	bl	1cdb8 <printk>
    d232:	21fd      	movs	r1, #253	; 0xfd
    d234:	4848      	ldr	r0, [pc, #288]	; (d358 <clock_async_start+0x140>)
    d236:	f00f fdf1 	bl	1ce1c <assert_post_action>
	const struct nrf_clock_control_config *config =
    d23a:	683b      	ldr	r3, [r7, #0]
	clk_data = get_sub_data(dev, type);
    d23c:	f8d7 8008 	ldr.w	r8, [r7, #8]
	const struct nrf_clock_control_config *config =
    d240:	f8d3 9008 	ldr.w	r9, [r3, #8]
	__ASSERT_NO_MSG((data == NULL) ||
    d244:	2c00      	cmp	r4, #0
    d246:	d159      	bne.n	d2fc <clock_async_start+0xe4>
	__asm__ volatile(
    d248:	f04f 0320 	mov.w	r3, #32
    d24c:	f3ef 8a11 	mrs	sl, BASEPRI
    d250:	f383 8811 	msr	BASEPRI, r3
    d254:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    d258:	230c      	movs	r3, #12
    d25a:	fb03 8305 	mla	r3, r3, r5, r8
    d25e:	7a1e      	ldrb	r6, [r3, #8]
    d260:	3601      	adds	r6, #1
    d262:	b2f6      	uxtb	r6, r6
    d264:	721e      	strb	r6, [r3, #8]
	__ASSERT_NO_MSG(clk_data->ref > 0);
    d266:	b95e      	cbnz	r6, d280 <clock_async_start+0x68>
    d268:	493c      	ldr	r1, [pc, #240]	; (d35c <clock_async_start+0x144>)
    d26a:	483a      	ldr	r0, [pc, #232]	; (d354 <clock_async_start+0x13c>)
    d26c:	f44f 7387 	mov.w	r3, #270	; 0x10e
    d270:	4a39      	ldr	r2, [pc, #228]	; (d358 <clock_async_start+0x140>)
    d272:	f00f fda1 	bl	1cdb8 <printk>
    d276:	f44f 7187 	mov.w	r1, #270	; 0x10e
    d27a:	4837      	ldr	r0, [pc, #220]	; (d358 <clock_async_start+0x140>)
    d27c:	f00f fdce 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
    d280:	f38a 8811 	msr	BASEPRI, sl
    d284:	f3bf 8f6f 	isb	sy
	if (data) {
    d288:	b32c      	cbz	r4, d2d6 <clock_async_start+0xbe>
    p_reg->INTENCLR = mask;
    d28a:	2203      	movs	r2, #3
    d28c:	4b34      	ldr	r3, [pc, #208]	; (d360 <clock_async_start+0x148>)
    d28e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		already_started = clk_data->started;
    d292:	220c      	movs	r2, #12
    d294:	436a      	muls	r2, r5
    d296:	eb08 0302 	add.w	r3, r8, r2
    d29a:	7a59      	ldrb	r1, [r3, #9]
		if (!already_started) {
    d29c:	b991      	cbnz	r1, d2c4 <clock_async_start+0xac>
	__asm__ volatile(
    d29e:	f04f 0020 	mov.w	r0, #32
    d2a2:	f3ef 8c11 	mrs	ip, BASEPRI
    d2a6:	f380 8811 	msr	BASEPRI, r0
    d2aa:	f3bf 8f6f 	isb	sy
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
    d2ae:	6021      	str	r1, [r4, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    d2b0:	6858      	ldr	r0, [r3, #4]
    d2b2:	2800      	cmp	r0, #0
    d2b4:	d13c      	bne.n	d330 <clock_async_start+0x118>
	list->tail = node;
    d2b6:	605c      	str	r4, [r3, #4]
	list->head = node;
    d2b8:	f848 4002 	str.w	r4, [r8, r2]
	__asm__ volatile(
    d2bc:	f38c 8811 	msr	BASEPRI, ip
    d2c0:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    d2c4:	2203      	movs	r2, #3
    d2c6:	4b26      	ldr	r3, [pc, #152]	; (d360 <clock_async_start+0x148>)
    d2c8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		if (already_started) {
    d2cc:	b119      	cbz	r1, d2d6 <clock_async_start+0xbe>
			data->cb(dev, data->user_data);
    d2ce:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    d2d2:	4638      	mov	r0, r7
    d2d4:	4798      	blx	r3
	if (ref == 1) {
    d2d6:	2e01      	cmp	r6, #1
    d2d8:	d10e      	bne.n	d2f8 <clock_async_start+0xe0>
		do_start =  (config->start_handler) ?
    d2da:	230c      	movs	r3, #12
    d2dc:	436b      	muls	r3, r5
    d2de:	f859 3003 	ldr.w	r3, [r9, r3]
				config->start_handler(dev) : true;
    d2e2:	bb43      	cbnz	r3, d336 <clock_async_start+0x11e>
			nrf_clock_task_trigger(NRF_CLOCK,
    d2e4:	230c      	movs	r3, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d2e6:	2201      	movs	r2, #1
    d2e8:	fb03 9505 	mla	r5, r3, r5, r9
    d2ec:	7aab      	ldrb	r3, [r5, #10]
    d2ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d2f2:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
    d2f6:	601a      	str	r2, [r3, #0]
	return 0;
    d2f8:	2000      	movs	r0, #0
    d2fa:	e027      	b.n	d34c <clock_async_start+0x134>
	__ASSERT_NO_MSG((data == NULL) ||
    d2fc:	6863      	ldr	r3, [r4, #4]
    d2fe:	b95b      	cbnz	r3, d318 <clock_async_start+0x100>
    d300:	4918      	ldr	r1, [pc, #96]	; (d364 <clock_async_start+0x14c>)
    d302:	4814      	ldr	r0, [pc, #80]	; (d354 <clock_async_start+0x13c>)
    d304:	f44f 7381 	mov.w	r3, #258	; 0x102
    d308:	4a13      	ldr	r2, [pc, #76]	; (d358 <clock_async_start+0x140>)
    d30a:	f00f fd55 	bl	1cdb8 <printk>
    d30e:	f44f 7181 	mov.w	r1, #258	; 0x102
    d312:	4811      	ldr	r0, [pc, #68]	; (d358 <clock_async_start+0x140>)
    d314:	f00f fd82 	bl	1ce1c <assert_post_action>
	sys_snode_t *item = sys_slist_peek_head(list);
    d318:	230c      	movs	r3, #12
    d31a:	436b      	muls	r3, r5
    d31c:	f858 3003 	ldr.w	r3, [r8, r3]
		if (item == node) {
    d320:	429c      	cmp	r4, r3
    d322:	d011      	beq.n	d348 <clock_async_start+0x130>
Z_GENLIST_PEEK_NEXT(slist, snode)
    d324:	2b00      	cmp	r3, #0
    d326:	d08f      	beq.n	d248 <clock_async_start+0x30>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d328:	681b      	ldr	r3, [r3, #0]
	} while (item);
    d32a:	2b00      	cmp	r3, #0
    d32c:	d1f8      	bne.n	d320 <clock_async_start+0x108>
    d32e:	e78b      	b.n	d248 <clock_async_start+0x30>
	parent->next = child;
    d330:	6004      	str	r4, [r0, #0]
	list->tail = node;
    d332:	605c      	str	r4, [r3, #4]
    d334:	e7c2      	b.n	d2bc <clock_async_start+0xa4>
				config->start_handler(dev) : true;
    d336:	4638      	mov	r0, r7
    d338:	4798      	blx	r3
    d33a:	2800      	cmp	r0, #0
    d33c:	d1d2      	bne.n	d2e4 <clock_async_start+0xcc>
			clkstarted_handle(dev, type);
    d33e:	4629      	mov	r1, r5
    d340:	4638      	mov	r0, r7
    d342:	f010 f89f 	bl	1d484 <clkstarted_handle>
    d346:	e7d7      	b.n	d2f8 <clock_async_start+0xe0>
		return -EBUSY;
    d348:	f06f 000f 	mvn.w	r0, #15
}
    d34c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d350:	0001f8a5 	.word	0x0001f8a5
    d354:	0001f722 	.word	0x0001f722
    d358:	0001f871 	.word	0x0001f871
    d35c:	0001f85f 	.word	0x0001f85f
    d360:	40005000 	.word	0x40005000
    d364:	0001f811 	.word	0x0001f811

0000d368 <clock_stop>:
{
    d368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    d36c:	b2cc      	uxtb	r4, r1
    d36e:	2c01      	cmp	r4, #1
{
    d370:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    d372:	d909      	bls.n	d388 <clock_stop+0x20>
    d374:	4924      	ldr	r1, [pc, #144]	; (d408 <clock_stop+0xa0>)
    d376:	4825      	ldr	r0, [pc, #148]	; (d40c <clock_stop+0xa4>)
    d378:	2399      	movs	r3, #153	; 0x99
    d37a:	4a25      	ldr	r2, [pc, #148]	; (d410 <clock_stop+0xa8>)
    d37c:	f00f fd1c 	bl	1cdb8 <printk>
    d380:	2199      	movs	r1, #153	; 0x99
    d382:	4823      	ldr	r0, [pc, #140]	; (d410 <clock_stop+0xa8>)
    d384:	f00f fd4a 	bl	1ce1c <assert_post_action>
	const struct nrf_clock_control_config *config =
    d388:	682b      	ldr	r3, [r5, #0]
	data = get_sub_data(dev, type);
    d38a:	68af      	ldr	r7, [r5, #8]
	const struct nrf_clock_control_config *config =
    d38c:	f8d3 8008 	ldr.w	r8, [r3, #8]
	__asm__ volatile(
    d390:	f04f 0320 	mov.w	r3, #32
    d394:	f3ef 8611 	mrs	r6, BASEPRI
    d398:	f383 8811 	msr	BASEPRI, r3
    d39c:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
    d3a0:	220c      	movs	r2, #12
    d3a2:	4362      	muls	r2, r4
    d3a4:	18b9      	adds	r1, r7, r2
    d3a6:	7a0b      	ldrb	r3, [r1, #8]
    d3a8:	b34b      	cbz	r3, d3fe <clock_stop+0x96>
	data->ref--;
    d3aa:	3b01      	subs	r3, #1
    d3ac:	b2db      	uxtb	r3, r3
    d3ae:	720b      	strb	r3, [r1, #8]
	if (data->ref == 0) {
    d3b0:	bb43      	cbnz	r3, d404 <clock_stop+0x9c>
	list->head = NULL;
    d3b2:	50bb      	str	r3, [r7, r2]
		do_stop =  (config->stop_handler) ?
    d3b4:	4442      	add	r2, r8
	list->tail = NULL;
    d3b6:	604b      	str	r3, [r1, #4]
    d3b8:	6853      	ldr	r3, [r2, #4]
				config->stop_handler(dev) : true;
    d3ba:	b9db      	cbnz	r3, d3f4 <clock_stop+0x8c>
			nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
    d3bc:	220c      	movs	r2, #12
    d3be:	2101      	movs	r1, #1
    d3c0:	fb04 8202 	mla	r2, r4, r2, r8
    d3c4:	7ad3      	ldrb	r3, [r2, #11]
    d3c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d3ca:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
    d3ce:	6019      	str	r1, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d3d0:	8913      	ldrh	r3, [r2, #8]
    d3d2:	2200      	movs	r2, #0
    d3d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d3d8:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
    d3dc:	601a      	str	r2, [r3, #0]
		data->started = false;
    d3de:	230c      	movs	r3, #12
    d3e0:	2000      	movs	r0, #0
    d3e2:	fb04 7403 	mla	r4, r4, r3, r7
    d3e6:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
    d3e8:	f386 8811 	msr	BASEPRI, r6
    d3ec:	f3bf 8f6f 	isb	sy
}
    d3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				config->stop_handler(dev) : true;
    d3f4:	4628      	mov	r0, r5
    d3f6:	4798      	blx	r3
    d3f8:	2800      	cmp	r0, #0
    d3fa:	d1df      	bne.n	d3bc <clock_stop+0x54>
    d3fc:	e7ef      	b.n	d3de <clock_stop+0x76>
		err = -EALREADY;
    d3fe:	f06f 0044 	mvn.w	r0, #68	; 0x44
    d402:	e7f1      	b.n	d3e8 <clock_stop+0x80>
	int err = 0;
    d404:	2000      	movs	r0, #0
    d406:	e7ef      	b.n	d3e8 <clock_stop+0x80>
    d408:	0001f8a5 	.word	0x0001f8a5
    d40c:	0001f722 	.word	0x0001f722
    d410:	0001f871 	.word	0x0001f871

0000d414 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    d414:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    d416:	4b10      	ldr	r3, [pc, #64]	; (d458 <nrf_power_clock_isr+0x44>)
    d418:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    d41a:	b162      	cbz	r2, d436 <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
    d41c:	4a0f      	ldr	r2, [pc, #60]	; (d45c <nrf_power_clock_isr+0x48>)
    d41e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    d422:	07d1      	lsls	r1, r2, #31
    d424:	d507      	bpl.n	d436 <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d426:	2200      	movs	r2, #0
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    d428:	480d      	ldr	r0, [pc, #52]	; (d460 <nrf_power_clock_isr+0x4c>)
    d42a:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    d42c:	6883      	ldr	r3, [r0, #8]
    d42e:	7a59      	ldrb	r1, [r3, #9]
    d430:	b909      	cbnz	r1, d436 <nrf_power_clock_isr+0x22>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    d432:	f010 f827 	bl	1d484 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    d436:	4b0b      	ldr	r3, [pc, #44]	; (d464 <nrf_power_clock_isr+0x50>)
    d438:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    d43a:	b162      	cbz	r2, d456 <nrf_power_clock_isr+0x42>
    return p_reg->INTENSET & mask;
    d43c:	4a07      	ldr	r2, [pc, #28]	; (d45c <nrf_power_clock_isr+0x48>)
    d43e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    d442:	0792      	lsls	r2, r2, #30
    d444:	d507      	bpl.n	d456 <nrf_power_clock_isr+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d446:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(dev);
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    d448:	2101      	movs	r1, #1
    d44a:	601a      	str	r2, [r3, #0]
    d44c:	4804      	ldr	r0, [pc, #16]	; (d460 <nrf_power_clock_isr+0x4c>)
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    d44e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    d452:	f010 b817 	b.w	1d484 <clkstarted_handle>
}
    d456:	bd08      	pop	{r3, pc}
    d458:	40005100 	.word	0x40005100
    d45c:	40005000 	.word	0x40005000
    d460:	2002c4b0 	.word	0x2002c4b0
    d464:	40005104 	.word	0x40005104

0000d468 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
    d468:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    d46a:	4c06      	ldr	r4, [pc, #24]	; (d484 <z_clock_isr+0x1c>)
    d46c:	4906      	ldr	r1, [pc, #24]	; (d488 <z_clock_isr+0x20>)
    d46e:	4622      	mov	r2, r4
    d470:	4806      	ldr	r0, [pc, #24]	; (d48c <z_clock_isr+0x24>)
    d472:	2317      	movs	r3, #23
    d474:	f00f fca0 	bl	1cdb8 <printk>
    d478:	4620      	mov	r0, r4
}
    d47a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    d47e:	2117      	movs	r1, #23
    d480:	f00f bccc 	b.w	1ce1c <assert_post_action>
    d484:	0001f8d9 	.word	0x0001f8d9
    d488:	00020517 	.word	0x00020517
    d48c:	0001f722 	.word	0x0001f722

0000d490 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    d490:	2200      	movs	r2, #0
{
    d492:	b538      	push	{r3, r4, r5, lr}
	RTC->EVENTS_COMPARE[0] = 0;
    d494:	4b22      	ldr	r3, [pc, #136]	; (d520 <rtc1_nrf_isr+0x90>)
    d496:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    d49a:	f04f 0320 	mov.w	r3, #32
    d49e:	f3ef 8511 	mrs	r5, BASEPRI
    d4a2:	f383 8811 	msr	BASEPRI, r3
    d4a6:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d4aa:	481e      	ldr	r0, [pc, #120]	; (d524 <rtc1_nrf_isr+0x94>)
    d4ac:	f00d ffea 	bl	1b484 <z_spin_lock_valid>
    d4b0:	b968      	cbnz	r0, d4ce <rtc1_nrf_isr+0x3e>
    d4b2:	234a      	movs	r3, #74	; 0x4a
    d4b4:	4a1c      	ldr	r2, [pc, #112]	; (d528 <rtc1_nrf_isr+0x98>)
    d4b6:	491d      	ldr	r1, [pc, #116]	; (d52c <rtc1_nrf_isr+0x9c>)
    d4b8:	481d      	ldr	r0, [pc, #116]	; (d530 <rtc1_nrf_isr+0xa0>)
    d4ba:	f00f fc7d 	bl	1cdb8 <printk>
    d4be:	4919      	ldr	r1, [pc, #100]	; (d524 <rtc1_nrf_isr+0x94>)
    d4c0:	481c      	ldr	r0, [pc, #112]	; (d534 <rtc1_nrf_isr+0xa4>)
    d4c2:	f00f fc79 	bl	1cdb8 <printk>
    d4c6:	214a      	movs	r1, #74	; 0x4a
    d4c8:	4817      	ldr	r0, [pc, #92]	; (d528 <rtc1_nrf_isr+0x98>)
    d4ca:	f00f fca7 	bl	1ce1c <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
    d4ce:	4815      	ldr	r0, [pc, #84]	; (d524 <rtc1_nrf_isr+0x94>)
    d4d0:	f00d fff6 	bl	1b4c0 <z_spin_lock_set_owner>
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    d4d4:	4b12      	ldr	r3, [pc, #72]	; (d520 <rtc1_nrf_isr+0x90>)

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    d4d6:	4a18      	ldr	r2, [pc, #96]	; (d538 <rtc1_nrf_isr+0xa8>)
    d4d8:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
    d4dc:	6813      	ldr	r3, [r2, #0]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d4de:	4811      	ldr	r0, [pc, #68]	; (d524 <rtc1_nrf_isr+0x94>)
	return (a - b) & COUNTER_MAX;
    d4e0:	1ae4      	subs	r4, r4, r3
    d4e2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    d4e6:	4423      	add	r3, r4
    d4e8:	6013      	str	r3, [r2, #0]
    d4ea:	f00d ffd9 	bl	1b4a0 <z_spin_unlock_valid>
    d4ee:	b968      	cbnz	r0, d50c <rtc1_nrf_isr+0x7c>
    d4f0:	235d      	movs	r3, #93	; 0x5d
    d4f2:	4a0d      	ldr	r2, [pc, #52]	; (d528 <rtc1_nrf_isr+0x98>)
    d4f4:	4911      	ldr	r1, [pc, #68]	; (d53c <rtc1_nrf_isr+0xac>)
    d4f6:	480e      	ldr	r0, [pc, #56]	; (d530 <rtc1_nrf_isr+0xa0>)
    d4f8:	f00f fc5e 	bl	1cdb8 <printk>
    d4fc:	4909      	ldr	r1, [pc, #36]	; (d524 <rtc1_nrf_isr+0x94>)
    d4fe:	4810      	ldr	r0, [pc, #64]	; (d540 <rtc1_nrf_isr+0xb0>)
    d500:	f00f fc5a 	bl	1cdb8 <printk>
    d504:	215d      	movs	r1, #93	; 0x5d
    d506:	4808      	ldr	r0, [pc, #32]	; (d528 <rtc1_nrf_isr+0x98>)
    d508:	f00f fc88 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
    d50c:	f385 8811 	msr	BASEPRI, r5
    d510:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    d514:	4620      	mov	r0, r4
}
    d516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    d51a:	f00e bbd9 	b.w	1bcd0 <z_clock_announce>
    d51e:	bf00      	nop
    d520:	40015000 	.word	0x40015000
    d524:	200201a4 	.word	0x200201a4
    d528:	0001f904 	.word	0x0001f904
    d52c:	0001f923 	.word	0x0001f923
    d530:	0001f722 	.word	0x0001f722
    d534:	0001f938 	.word	0x0001f938
    d538:	200201a0 	.word	0x200201a0
    d53c:	0001f950 	.word	0x0001f950
    d540:	0001f967 	.word	0x0001f967

0000d544 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
    d544:	b570      	push	{r4, r5, r6, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    d546:	4815      	ldr	r0, [pc, #84]	; (d59c <z_clock_driver_init+0x58>)
    d548:	f00b fdae 	bl	190a8 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL);
	if (!clock) {
    d54c:	b310      	cbz	r0, d594 <z_clock_driver_init+0x50>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    d54e:	6843      	ldr	r3, [r0, #4]
    d550:	2101      	movs	r1, #1
    d552:	681b      	ldr	r3, [r3, #0]
    d554:	4798      	blx	r3
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    d556:	2400      	movs	r4, #0
    p_reg->CC[ch] = cc_val;
    d558:	2601      	movs	r6, #1
    p_reg->INTENSET = mask;
    d55a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d55e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    d562:	4d0f      	ldr	r5, [pc, #60]	; (d5a0 <z_clock_driver_init+0x5c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    d564:	4631      	mov	r1, r6
    d566:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    d56a:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    d56e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d572:	4b0c      	ldr	r3, [pc, #48]	; (d5a4 <z_clock_driver_init+0x60>)
    d574:	2015      	movs	r0, #21
    d576:	601c      	str	r4, [r3, #0]
    d578:	4b0b      	ldr	r3, [pc, #44]	; (d5a8 <z_clock_driver_init+0x64>)
    d57a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    d57e:	4622      	mov	r2, r4
    d580:	f000 f9f0 	bl	d964 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    d584:	2015      	movs	r0, #21
    d586:	f000 f9dd 	bl	d944 <arch_irq_enable>

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    d58a:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    d58c:	4b07      	ldr	r3, [pc, #28]	; (d5ac <z_clock_driver_init+0x68>)
    d58e:	601e      	str	r6, [r3, #0]
    d590:	602e      	str	r6, [r5, #0]
}
    d592:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    d594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d598:	e7fb      	b.n	d592 <z_clock_driver_init+0x4e>
    d59a:	bf00      	nop
    d59c:	0001f8c9 	.word	0x0001f8c9
    d5a0:	40015000 	.word	0x40015000
    d5a4:	40015140 	.word	0x40015140
    d5a8:	e000e100 	.word	0xe000e100
    d5ac:	40015008 	.word	0x40015008

0000d5b0 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    d5b0:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    d5b2:	4c3a      	ldr	r4, [pc, #232]	; (d69c <z_clock_set_timeout+0xec>)
    d5b4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    d5b8:	bf18      	it	ne
    d5ba:	4604      	movne	r4, r0
	__asm__ volatile(
    d5bc:	f04f 0320 	mov.w	r3, #32
    d5c0:	f3ef 8511 	mrs	r5, BASEPRI
    d5c4:	f383 8811 	msr	BASEPRI, r3
    d5c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d5cc:	4834      	ldr	r0, [pc, #208]	; (d6a0 <z_clock_set_timeout+0xf0>)
    d5ce:	f00d ff59 	bl	1b484 <z_spin_lock_valid>
    d5d2:	b968      	cbnz	r0, d5f0 <z_clock_set_timeout+0x40>
    d5d4:	234a      	movs	r3, #74	; 0x4a
    d5d6:	4a33      	ldr	r2, [pc, #204]	; (d6a4 <z_clock_set_timeout+0xf4>)
    d5d8:	4933      	ldr	r1, [pc, #204]	; (d6a8 <z_clock_set_timeout+0xf8>)
    d5da:	4834      	ldr	r0, [pc, #208]	; (d6ac <z_clock_set_timeout+0xfc>)
    d5dc:	f00f fbec 	bl	1cdb8 <printk>
    d5e0:	492f      	ldr	r1, [pc, #188]	; (d6a0 <z_clock_set_timeout+0xf0>)
    d5e2:	4833      	ldr	r0, [pc, #204]	; (d6b0 <z_clock_set_timeout+0x100>)
    d5e4:	f00f fbe8 	bl	1cdb8 <printk>
    d5e8:	214a      	movs	r1, #74	; 0x4a
    d5ea:	482e      	ldr	r0, [pc, #184]	; (d6a4 <z_clock_set_timeout+0xf4>)
    d5ec:	f00f fc16 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
    d5f0:	482b      	ldr	r0, [pc, #172]	; (d6a0 <z_clock_set_timeout+0xf0>)
    d5f2:	f00d ff65 	bl	1b4c0 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
    d5f6:	4b2f      	ldr	r3, [pc, #188]	; (d6b4 <z_clock_set_timeout+0x104>)
    d5f8:	4e28      	ldr	r6, [pc, #160]	; (d69c <z_clock_set_timeout+0xec>)
    d5fa:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
    d5fe:	4b2e      	ldr	r3, [pc, #184]	; (d6b8 <z_clock_set_timeout+0x108>)
    d600:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
    d602:	1ad0      	subs	r0, r2, r3
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    d604:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    d608:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
	if (unannounced >= COUNTER_HALF_SPAN) {
    d60c:	d12c      	bne.n	d668 <z_clock_set_timeout+0xb8>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    d60e:	1e60      	subs	r0, r4, #1
    d610:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    d614:	42b0      	cmp	r0, r6
    d616:	bfa8      	it	ge
    d618:	4630      	movge	r0, r6
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    d61a:	3101      	adds	r1, #1
    d61c:	4408      	add	r0, r1
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    d61e:	42b0      	cmp	r0, r6
    d620:	bf94      	ite	ls
    d622:	181b      	addls	r3, r3, r0
    d624:	199b      	addhi	r3, r3, r6
	return (a - b) & COUNTER_MAX;
    d626:	1a9a      	subs	r2, r3, r2
    d628:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    d62c:	4921      	ldr	r1, [pc, #132]	; (d6b4 <z_clock_set_timeout+0x104>)
    d62e:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    d632:	2a02      	cmp	r2, #2
    p_reg->CC[ch] = cc_val;
    d634:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    d638:	d918      	bls.n	d66c <z_clock_set_timeout+0xbc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d63a:	4819      	ldr	r0, [pc, #100]	; (d6a0 <z_clock_set_timeout+0xf0>)
    d63c:	f00d ff30 	bl	1b4a0 <z_spin_unlock_valid>
    d640:	b968      	cbnz	r0, d65e <z_clock_set_timeout+0xae>
    d642:	235d      	movs	r3, #93	; 0x5d
    d644:	4a17      	ldr	r2, [pc, #92]	; (d6a4 <z_clock_set_timeout+0xf4>)
    d646:	491d      	ldr	r1, [pc, #116]	; (d6bc <z_clock_set_timeout+0x10c>)
    d648:	4818      	ldr	r0, [pc, #96]	; (d6ac <z_clock_set_timeout+0xfc>)
    d64a:	f00f fbb5 	bl	1cdb8 <printk>
    d64e:	4914      	ldr	r1, [pc, #80]	; (d6a0 <z_clock_set_timeout+0xf0>)
    d650:	481b      	ldr	r0, [pc, #108]	; (d6c0 <z_clock_set_timeout+0x110>)
    d652:	f00f fbb1 	bl	1cdb8 <printk>
    d656:	215d      	movs	r1, #93	; 0x5d
    d658:	4812      	ldr	r0, [pc, #72]	; (d6a4 <z_clock_set_timeout+0xf4>)
    d65a:	f00f fbdf 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
    d65e:	f385 8811 	msr	BASEPRI, r5
    d662:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    d666:	bd70      	pop	{r4, r5, r6, pc}
		ticks = 0;
    d668:	2000      	movs	r0, #0
    d66a:	e7d6      	b.n	d61a <z_clock_set_timeout+0x6a>
     return p_reg->COUNTER;
    d66c:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    d670:	4814      	ldr	r0, [pc, #80]	; (d6c4 <z_clock_set_timeout+0x114>)
	return (a - b) & COUNTER_MAX;
    d672:	1a9a      	subs	r2, r3, r2
    d674:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    d678:	1e54      	subs	r4, r2, #1
    d67a:	4284      	cmp	r4, r0
    d67c:	d905      	bls.n	d68a <z_clock_set_timeout+0xda>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d67e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    d682:	4b11      	ldr	r3, [pc, #68]	; (d6c8 <z_clock_set_timeout+0x118>)
    d684:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    d688:	e7d7      	b.n	d63a <z_clock_set_timeout+0x8a>
		} else if (dt == 1) {
    d68a:	2a01      	cmp	r2, #1
			set_comparator(cyc + 2);
    d68c:	bf02      	ittt	eq
    d68e:	3302      	addeq	r3, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    d690:	f023 437f 	biceq.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    d694:	f8c1 3540 	streq.w	r3, [r1, #1344]	; 0x540
    d698:	e7cf      	b.n	d63a <z_clock_set_timeout+0x8a>
    d69a:	bf00      	nop
    d69c:	00fffffe 	.word	0x00fffffe
    d6a0:	200201a4 	.word	0x200201a4
    d6a4:	0001f904 	.word	0x0001f904
    d6a8:	0001f923 	.word	0x0001f923
    d6ac:	0001f722 	.word	0x0001f722
    d6b0:	0001f938 	.word	0x0001f938
    d6b4:	40015000 	.word	0x40015000
    d6b8:	200201a0 	.word	0x200201a0
    d6bc:	0001f950 	.word	0x0001f950
    d6c0:	0001f967 	.word	0x0001f967
    d6c4:	007ffffe 	.word	0x007ffffe
    d6c8:	e000e100 	.word	0xe000e100

0000d6cc <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
    d6cc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    d6ce:	f04f 0320 	mov.w	r3, #32
    d6d2:	f3ef 8511 	mrs	r5, BASEPRI
    d6d6:	f383 8811 	msr	BASEPRI, r3
    d6da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d6de:	481a      	ldr	r0, [pc, #104]	; (d748 <z_clock_elapsed+0x7c>)
    d6e0:	f00d fed0 	bl	1b484 <z_spin_lock_valid>
    d6e4:	b968      	cbnz	r0, d702 <z_clock_elapsed+0x36>
    d6e6:	234a      	movs	r3, #74	; 0x4a
    d6e8:	4a18      	ldr	r2, [pc, #96]	; (d74c <z_clock_elapsed+0x80>)
    d6ea:	4919      	ldr	r1, [pc, #100]	; (d750 <z_clock_elapsed+0x84>)
    d6ec:	4819      	ldr	r0, [pc, #100]	; (d754 <z_clock_elapsed+0x88>)
    d6ee:	f00f fb63 	bl	1cdb8 <printk>
    d6f2:	4915      	ldr	r1, [pc, #84]	; (d748 <z_clock_elapsed+0x7c>)
    d6f4:	4818      	ldr	r0, [pc, #96]	; (d758 <z_clock_elapsed+0x8c>)
    d6f6:	f00f fb5f 	bl	1cdb8 <printk>
    d6fa:	214a      	movs	r1, #74	; 0x4a
    d6fc:	4813      	ldr	r0, [pc, #76]	; (d74c <z_clock_elapsed+0x80>)
    d6fe:	f00f fb8d 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
    d702:	4811      	ldr	r0, [pc, #68]	; (d748 <z_clock_elapsed+0x7c>)
    d704:	f00d fedc 	bl	1b4c0 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
    d708:	4b14      	ldr	r3, [pc, #80]	; (d75c <z_clock_elapsed+0x90>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d70a:	480f      	ldr	r0, [pc, #60]	; (d748 <z_clock_elapsed+0x7c>)
    d70c:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    d710:	4b13      	ldr	r3, [pc, #76]	; (d760 <z_clock_elapsed+0x94>)
	return (a - b) & COUNTER_MAX;
    d712:	681b      	ldr	r3, [r3, #0]
    d714:	1ae4      	subs	r4, r4, r3
    d716:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    d71a:	f00d fec1 	bl	1b4a0 <z_spin_unlock_valid>
    d71e:	b968      	cbnz	r0, d73c <z_clock_elapsed+0x70>
    d720:	235d      	movs	r3, #93	; 0x5d
    d722:	4a0a      	ldr	r2, [pc, #40]	; (d74c <z_clock_elapsed+0x80>)
    d724:	490f      	ldr	r1, [pc, #60]	; (d764 <z_clock_elapsed+0x98>)
    d726:	480b      	ldr	r0, [pc, #44]	; (d754 <z_clock_elapsed+0x88>)
    d728:	f00f fb46 	bl	1cdb8 <printk>
    d72c:	4906      	ldr	r1, [pc, #24]	; (d748 <z_clock_elapsed+0x7c>)
    d72e:	480e      	ldr	r0, [pc, #56]	; (d768 <z_clock_elapsed+0x9c>)
    d730:	f00f fb42 	bl	1cdb8 <printk>
    d734:	215d      	movs	r1, #93	; 0x5d
    d736:	4805      	ldr	r0, [pc, #20]	; (d74c <z_clock_elapsed+0x80>)
    d738:	f00f fb70 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
    d73c:	f385 8811 	msr	BASEPRI, r5
    d740:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    d744:	4620      	mov	r0, r4
    d746:	bd38      	pop	{r3, r4, r5, pc}
    d748:	200201a4 	.word	0x200201a4
    d74c:	0001f904 	.word	0x0001f904
    d750:	0001f923 	.word	0x0001f923
    d754:	0001f722 	.word	0x0001f722
    d758:	0001f938 	.word	0x0001f938
    d75c:	40015000 	.word	0x40015000
    d760:	200201a0 	.word	0x200201a0
    d764:	0001f950 	.word	0x0001f950
    d768:	0001f967 	.word	0x0001f967

0000d76c <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
    d76c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    d76e:	f04f 0320 	mov.w	r3, #32
    d772:	f3ef 8511 	mrs	r5, BASEPRI
    d776:	f383 8811 	msr	BASEPRI, r3
    d77a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d77e:	481b      	ldr	r0, [pc, #108]	; (d7ec <z_timer_cycle_get_32+0x80>)
    d780:	f00d fe80 	bl	1b484 <z_spin_lock_valid>
    d784:	b968      	cbnz	r0, d7a2 <z_timer_cycle_get_32+0x36>
    d786:	234a      	movs	r3, #74	; 0x4a
    d788:	4a19      	ldr	r2, [pc, #100]	; (d7f0 <z_timer_cycle_get_32+0x84>)
    d78a:	491a      	ldr	r1, [pc, #104]	; (d7f4 <z_timer_cycle_get_32+0x88>)
    d78c:	481a      	ldr	r0, [pc, #104]	; (d7f8 <z_timer_cycle_get_32+0x8c>)
    d78e:	f00f fb13 	bl	1cdb8 <printk>
    d792:	4916      	ldr	r1, [pc, #88]	; (d7ec <z_timer_cycle_get_32+0x80>)
    d794:	4819      	ldr	r0, [pc, #100]	; (d7fc <z_timer_cycle_get_32+0x90>)
    d796:	f00f fb0f 	bl	1cdb8 <printk>
    d79a:	214a      	movs	r1, #74	; 0x4a
    d79c:	4814      	ldr	r0, [pc, #80]	; (d7f0 <z_timer_cycle_get_32+0x84>)
    d79e:	f00f fb3d 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
    d7a2:	4812      	ldr	r0, [pc, #72]	; (d7ec <z_timer_cycle_get_32+0x80>)
    d7a4:	f00d fe8c 	bl	1b4c0 <z_spin_lock_set_owner>
    d7a8:	4b15      	ldr	r3, [pc, #84]	; (d800 <z_timer_cycle_get_32+0x94>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d7aa:	4810      	ldr	r0, [pc, #64]	; (d7ec <z_timer_cycle_get_32+0x80>)
    d7ac:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    d7b0:	4b14      	ldr	r3, [pc, #80]	; (d804 <z_timer_cycle_get_32+0x98>)
    d7b2:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
    d7b4:	1ae4      	subs	r4, r4, r3
    d7b6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    d7ba:	441c      	add	r4, r3
    d7bc:	f00d fe70 	bl	1b4a0 <z_spin_unlock_valid>
    d7c0:	b968      	cbnz	r0, d7de <z_timer_cycle_get_32+0x72>
    d7c2:	235d      	movs	r3, #93	; 0x5d
    d7c4:	4a0a      	ldr	r2, [pc, #40]	; (d7f0 <z_timer_cycle_get_32+0x84>)
    d7c6:	4910      	ldr	r1, [pc, #64]	; (d808 <z_timer_cycle_get_32+0x9c>)
    d7c8:	480b      	ldr	r0, [pc, #44]	; (d7f8 <z_timer_cycle_get_32+0x8c>)
    d7ca:	f00f faf5 	bl	1cdb8 <printk>
    d7ce:	4907      	ldr	r1, [pc, #28]	; (d7ec <z_timer_cycle_get_32+0x80>)
    d7d0:	480e      	ldr	r0, [pc, #56]	; (d80c <z_timer_cycle_get_32+0xa0>)
    d7d2:	f00f faf1 	bl	1cdb8 <printk>
    d7d6:	215d      	movs	r1, #93	; 0x5d
    d7d8:	4805      	ldr	r0, [pc, #20]	; (d7f0 <z_timer_cycle_get_32+0x84>)
    d7da:	f00f fb1f 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
    d7de:	f385 8811 	msr	BASEPRI, r5
    d7e2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    d7e6:	4620      	mov	r0, r4
    d7e8:	bd38      	pop	{r3, r4, r5, pc}
    d7ea:	bf00      	nop
    d7ec:	200201a4 	.word	0x200201a4
    d7f0:	0001f904 	.word	0x0001f904
    d7f4:	0001f923 	.word	0x0001f923
    d7f8:	0001f722 	.word	0x0001f722
    d7fc:	0001f938 	.word	0x0001f938
    d800:	40015000 	.word	0x40015000
    d804:	200201a0 	.word	0x200201a0
    d808:	0001f950 	.word	0x0001f950
    d80c:	0001f967 	.word	0x0001f967

0000d810 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    d810:	4804      	ldr	r0, [pc, #16]	; (d824 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    d812:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    d814:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    d816:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    d818:	d003      	beq.n	d822 <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    d81a:	4903      	ldr	r1, [pc, #12]	; (d828 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    d81c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    d820:	600a      	str	r2, [r1, #0]

0000d822 <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    d822:	4770      	bx	lr
    ldr r0, =_kernel
    d824:	20024e04 	.word	0x20024e04
    ldr r1, =_SCS_ICSR
    d828:	e000ed04 	.word	0xe000ed04

0000d82c <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    d82c:	4a09      	ldr	r2, [pc, #36]	; (d854 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    d82e:	490a      	ldr	r1, [pc, #40]	; (d858 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    d830:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    d832:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    d834:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    d836:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    d838:	4908      	ldr	r1, [pc, #32]	; (d85c <arch_swap+0x30>)
    d83a:	684b      	ldr	r3, [r1, #4]
    d83c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    d840:	604b      	str	r3, [r1, #4]
    d842:	2300      	movs	r3, #0
    d844:	f383 8811 	msr	BASEPRI, r3
    d848:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    d84c:	6893      	ldr	r3, [r2, #8]
}
    d84e:	6e98      	ldr	r0, [r3, #104]	; 0x68
    d850:	4770      	bx	lr
    d852:	bf00      	nop
    d854:	20024e04 	.word	0x20024e04
    d858:	0001f228 	.word	0x0001f228
    d85c:	e000ed00 	.word	0xe000ed00

0000d860 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    d860:	492e      	ldr	r1, [pc, #184]	; (d91c <in_fp_endif+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    d862:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    d864:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    d868:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    d86a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    d86e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
    d872:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    d876:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
    d87a:	d004      	beq.n	d886 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
    d87c:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
    d880:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
    d884:	e007      	b.n	d896 <out_fp_endif>

0000d886 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
    d886:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
    d88a:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
    d88e:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
    d892:	f050 0004 	orrs.w	r0, r0, #4

0000d896 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
    d896:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    d89a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    d89c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    d8a0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    d8a4:	4f1e      	ldr	r7, [pc, #120]	; (d920 <in_fp_endif+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    d8a6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    d8aa:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    d8ac:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    d8ae:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    d8b0:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    d8b2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    d8b4:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    d8b6:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
    d8ba:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
    d8be:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
    d8c2:	d105      	bne.n	d8d0 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    d8c4:	2300      	movs	r3, #0
    vmsr fpscr, r3
    d8c6:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    d8ca:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
    d8ce:	e005      	b.n	d8dc <in_fp_endif>

0000d8d0 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
    d8d0:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
    d8d4:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
    d8d8:	ec90 8a10 	vldmia	r0, {s16-s31}

0000d8dc <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    d8dc:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
    d8e0:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    d8e4:	f383 8814 	msr	CONTROL, r3
    isb
    d8e8:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    d8ec:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    d8ee:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    d8f0:	f00f fe02 	bl	1d4f8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    d8f4:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    d8f8:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    d8fc:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* clear stack pointer limit before setting the PSP */
    mov r0, #0
    d900:	f04f 0000 	mov.w	r0, #0
    msr PSPLIM, r0
    d904:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    d908:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    d90c:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    d910:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    d912:	f00f fde0 	bl	1d4d6 <configure_builtin_stack_guard>
    pop {r2, lr}
    d916:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    d91a:	4770      	bx	lr
    ldr r1, =_kernel
    d91c:	20024e04 	.word	0x20024e04
    ldr v4, =_SCS_ICSR
    d920:	e000ed04 	.word	0xe000ed04

0000d924 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    d924:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    d928:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    d92a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    d92e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    d932:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    d934:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    d938:	2902      	cmp	r1, #2
    beq _oops
    d93a:	d0ff      	beq.n	d93c <_oops>

0000d93c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    d93c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    d93e:	f00f fdd0 	bl	1d4e2 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    d942:	bd01      	pop	{r0, pc}

0000d944 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    d944:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    d946:	2b00      	cmp	r3, #0
    d948:	db08      	blt.n	d95c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d94a:	2201      	movs	r2, #1
    d94c:	f000 001f 	and.w	r0, r0, #31
    d950:	fa02 f000 	lsl.w	r0, r2, r0
    d954:	4a02      	ldr	r2, [pc, #8]	; (d960 <arch_irq_enable+0x1c>)
    d956:	095b      	lsrs	r3, r3, #5
    d958:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    d95c:	4770      	bx	lr
    d95e:	bf00      	nop
    d960:	e000e100 	.word	0xe000e100

0000d964 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
    d964:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    d966:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
    d968:	2c07      	cmp	r4, #7
{
    d96a:	4605      	mov	r5, r0
    d96c:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
    d96e:	d90e      	bls.n	d98e <z_arm_irq_priority_set+0x2a>
    d970:	235f      	movs	r3, #95	; 0x5f
    d972:	4a10      	ldr	r2, [pc, #64]	; (d9b4 <z_arm_irq_priority_set+0x50>)
    d974:	4910      	ldr	r1, [pc, #64]	; (d9b8 <z_arm_irq_priority_set+0x54>)
    d976:	4811      	ldr	r0, [pc, #68]	; (d9bc <z_arm_irq_priority_set+0x58>)
    d978:	f00f fa1e 	bl	1cdb8 <printk>
    d97c:	4631      	mov	r1, r6
    d97e:	4810      	ldr	r0, [pc, #64]	; (d9c0 <z_arm_irq_priority_set+0x5c>)
    d980:	2207      	movs	r2, #7
    d982:	f00f fa19 	bl	1cdb8 <printk>
    d986:	215f      	movs	r1, #95	; 0x5f
    d988:	480a      	ldr	r0, [pc, #40]	; (d9b4 <z_arm_irq_priority_set+0x50>)
    d98a:	f00f fa47 	bl	1ce1c <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    d98e:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    d990:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d992:	bfa8      	it	ge
    d994:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    d998:	ea4f 1444 	mov.w	r4, r4, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d99c:	bfb8      	it	lt
    d99e:	4b09      	ldrlt	r3, [pc, #36]	; (d9c4 <z_arm_irq_priority_set+0x60>)
    d9a0:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d9a2:	bfab      	itete	ge
    d9a4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d9a8:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d9ac:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d9b0:	555c      	strblt	r4, [r3, r5]
}
    d9b2:	bd70      	pop	{r4, r5, r6, pc}
    d9b4:	0001f97c 	.word	0x0001f97c
    d9b8:	0001f9ab 	.word	0x0001f9ab
    d9bc:	0001f722 	.word	0x0001f722
    d9c0:	0001f9c6 	.word	0x0001f9c6
    d9c4:	e000ed14 	.word	0xe000ed14

0000d9c8 <_arch_isr_direct_pm>:
	z_arm_reserved();
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    d9c8:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    d9ca:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    d9cc:	4b04      	ldr	r3, [pc, #16]	; (d9e0 <_arch_isr_direct_pm+0x18>)
    d9ce:	6a18      	ldr	r0, [r3, #32]
    d9d0:	b118      	cbz	r0, d9da <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    d9d2:	2200      	movs	r2, #0
    d9d4:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    d9d6:	f010 fed0 	bl	1e77a <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    d9da:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    d9dc:	bd08      	pop	{r3, pc}
    d9de:	bf00      	nop
    d9e0:	20024e04 	.word	0x20024e04

0000d9e4 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
    d9e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    d9e8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    d9ea:	4605      	mov	r5, r0
	char *pStackMem = Z_THREAD_STACK_BUFFER(stack);
	char *stackEnd;
	/* Offset between the top of stack and the high end of stack area. */
	u32_t top_of_stack_offset = 0U;

	Z_ASSERT_VALID_PRIO(priority, pEntry);
    d9ec:	2e0f      	cmp	r6, #15
{
    d9ee:	4688      	mov	r8, r1
    d9f0:	4691      	mov	r9, r2
    d9f2:	461f      	mov	r7, r3
	Z_ASSERT_VALID_PRIO(priority, pEntry);
    d9f4:	d126      	bne.n	da44 <arch_new_thread+0x60>
    d9f6:	4b1e      	ldr	r3, [pc, #120]	; (da70 <arch_new_thread+0x8c>)
    d9f8:	429f      	cmp	r7, r3
    d9fa:	d127      	bne.n	da4c <arch_new_thread+0x68>
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
    d9fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d9fe:	464a      	mov	r2, r9
    da00:	9300      	str	r3, [sp, #0]
    da02:	4641      	mov	r1, r8
    da04:	4633      	mov	r3, r6
    da06:	4628      	mov	r0, r5
    da08:	f010 ff62 	bl	1e8d0 <z_new_thread_init>
	stackEnd = pStackMem + stackSize;
    da0c:	eb08 0409 	add.w	r4, r8, r9
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    da10:	4a18      	ldr	r2, [pc, #96]	; (da74 <arch_new_thread+0x90>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    da12:	f1a4 0320 	sub.w	r3, r4, #32
    da16:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    da1a:	f022 0201 	bic.w	r2, r2, #1
    da1e:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    da20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	pInitCtx->basic.a1 = (u32_t)pEntry;
    da22:	601f      	str	r7, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    da24:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    da26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    da28:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    da2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    da2c:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
    da2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    da32:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    da34:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    da36:	2300      	movs	r3, #0
    da38:	666b      	str	r3, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
    da3a:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    da3e:	b003      	add	sp, #12
    da40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(priority, pEntry);
    da44:	f106 0310 	add.w	r3, r6, #16
    da48:	2b1e      	cmp	r3, #30
    da4a:	d9d7      	bls.n	d9fc <arch_new_thread+0x18>
    da4c:	232d      	movs	r3, #45	; 0x2d
    da4e:	4a0a      	ldr	r2, [pc, #40]	; (da78 <arch_new_thread+0x94>)
    da50:	490a      	ldr	r1, [pc, #40]	; (da7c <arch_new_thread+0x98>)
    da52:	480b      	ldr	r0, [pc, #44]	; (da80 <arch_new_thread+0x9c>)
    da54:	f00f f9b0 	bl	1cdb8 <printk>
    da58:	4631      	mov	r1, r6
    da5a:	f06f 030f 	mvn.w	r3, #15
    da5e:	220e      	movs	r2, #14
    da60:	4808      	ldr	r0, [pc, #32]	; (da84 <arch_new_thread+0xa0>)
    da62:	f00f f9a9 	bl	1cdb8 <printk>
    da66:	212d      	movs	r1, #45	; 0x2d
    da68:	4803      	ldr	r0, [pc, #12]	; (da78 <arch_new_thread+0x94>)
    da6a:	f00f f9d7 	bl	1ce1c <assert_post_action>
    da6e:	e7c5      	b.n	d9fc <arch_new_thread+0x18>
    da70:	0001914d 	.word	0x0001914d
    da74:	0001cdd3 	.word	0x0001cdd3
    da78:	0001f9fb 	.word	0x0001f9fb
    da7c:	0001fa26 	.word	0x0001fa26
    da80:	0001f722 	.word	0x0001f722
    da84:	0001fab3 	.word	0x0001fab3

0000da88 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    da88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    da8a:	461f      	mov	r7, r3
    da8c:	4606      	mov	r6, r0
    da8e:	460d      	mov	r5, r1
    da90:	4614      	mov	r4, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    da92:	2300      	movs	r3, #0
    da94:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    da98:	f3ef 8214 	mrs	r2, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    da9c:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    daa0:	f382 8814 	msr	CONTROL, r2
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    daa4:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    daa8:	f000 f9fa 	bl	dea0 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    daac:	4b0b      	ldr	r3, [pc, #44]	; (dadc <arch_switch_to_main_thread+0x54>)
	start_of_main_stack =
    daae:	442c      	add	r4, r5
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    dab0:	4630      	mov	r0, r6
	_current = main_thread;
    dab2:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    dab4:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    dab8:	f00f fd1e 	bl	1d4f8 <z_arm_configure_dynamic_mpu_regions>
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    dabc:	f385 880b 	msr	PSPLIM, r5

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    dac0:	4638      	mov	r0, r7
    dac2:	f384 8809 	msr	PSP, r4
    dac6:	2100      	movs	r1, #0
    dac8:	b663      	cpsie	if
    daca:	f381 8811 	msr	BASEPRI, r1
    dace:	f3bf 8f6f 	isb	sy
    dad2:	2200      	movs	r2, #0
    dad4:	2300      	movs	r3, #0
    dad6:	f00f f97c 	bl	1cdd2 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    dada:	bf00      	nop
    dadc:	20024e04 	.word	0x20024e04

0000dae0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    dae0:	4901      	ldr	r1, [pc, #4]	; (dae8 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    dae2:	2210      	movs	r2, #16
	str r2, [r1]
    dae4:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    dae6:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    dae8:	e000ed10 	.word	0xe000ed10

0000daec <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    daec:	4040      	eors	r0, r0
	msr BASEPRI, r0
    daee:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    daf2:	bf30      	wfi

	bx lr
    daf4:	4770      	bx	lr
    daf6:	bf00      	nop

0000daf8 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
    daf8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    dafc:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    db00:	4672      	mov	r2, lr

	push {r0, lr}
    db02:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
    db04:	f000 f8d2 	bl	dcac <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    db08:	bd01      	pop	{r0, pc}
    db0a:	bf00      	nop

0000db0c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    db0c:	bf30      	wfi
    b z_SysNmiOnReset
    db0e:	f7ff bffd 	b.w	db0c <z_SysNmiOnReset>
    db12:	bf00      	nop

0000db14 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    db14:	4a11      	ldr	r2, [pc, #68]	; (db5c <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    db16:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    db18:	4b11      	ldr	r3, [pc, #68]	; (db60 <z_arm_prep_c+0x4c>)
    db1a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    db1e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    db20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    db24:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    db28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    db2c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    db30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    db34:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    db38:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    db3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    db40:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    db44:	2300      	movs	r3, #0
    db46:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    db4a:	f00b fb19 	bl	19180 <z_bss_zero>
	z_data_copy();
    db4e:	f00b fb21 	bl	19194 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    db52:	f000 f95b 	bl	de0c <z_arm_int_lib_init>
	z_cstart();
    db56:	f00b fb4f 	bl	191f8 <z_cstart>
    db5a:	bf00      	nop
    db5c:	0000c000 	.word	0x0000c000
    db60:	e000ed00 	.word	0xe000ed00

0000db64 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    db64:	b501      	push	{r0, lr}
      * FIXME: Remove the Cortex-M conditional compilation checks for `cpsid i`
      *        and `cpsie i` after the Cortex-R port is updated to support
      *        interrupt nesting.  For more details, refer to the issue #21758.
      */
#if defined(CONFIG_CPU_CORTEX_M)
	cpsid i  /* PRIMASK = 1 */
    db66:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    db68:	4a0b      	ldr	r2, [pc, #44]	; (db98 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    db6a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    db6c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    db6e:	bf1e      	ittt	ne
	movne	r1, #0
    db70:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    db72:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    db74:	f010 fe01 	blne	1e77a <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    db78:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    db7a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    db7e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    db82:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    db86:	4905      	ldr	r1, [pc, #20]	; (db9c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    db88:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    db8a:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    db8c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    db8e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    db92:	4903      	ldr	r1, [pc, #12]	; (dba0 <_isr_wrapper+0x3c>)
	bx r1
    db94:	4708      	bx	r1
    db96:	0000      	.short	0x0000
	ldr r2, =_kernel
    db98:	20024e04 	.word	0x20024e04
	ldr r1, =_sw_isr_table
    db9c:	0001ea90 	.word	0x0001ea90
	ldr r1, =z_arm_int_exit
    dba0:	0000d811 	.word	0x0000d811

0000dba4 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    dba4:	f00f f942 	bl	1ce2c <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    dba8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    dbaa:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    dbae:	4808      	ldr	r0, [pc, #32]	; (dbd0 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    dbb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    dbb4:	1840      	adds	r0, r0, r1
    msr PSP, r0
    dbb6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    dbba:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    dbbe:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    dbc0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    dbc2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    dbc6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    dbca:	f7ff ffa3 	bl	db14 <z_arm_prep_c>
    dbce:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    dbd0:	200289c8 	.word	0x200289c8

0000dbd4 <bus_fault.isra.2>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    dbd4:	4b0d      	ldr	r3, [pc, #52]	; (dc0c <bus_fault.isra.2+0x38>)
    dbd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    dbd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    dbda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dbdc:	0592      	lsls	r2, r2, #22
    dbde:	d508      	bpl.n	dbf2 <bus_fault.isra.2+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    dbe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    dbe2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dbe4:	0412      	lsls	r2, r2, #16
    dbe6:	d504      	bpl.n	dbf2 <bus_fault.isra.2+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    dbe8:	b118      	cbz	r0, dbf2 <bus_fault.isra.2+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    dbea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dbec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    dbf0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
    dbf2:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    dbf4:	4b05      	ldr	r3, [pc, #20]	; (dc0c <bus_fault.isra.2+0x38>)
    dbf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    dbf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dbfa:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    dbfc:	bf58      	it	pl
    dbfe:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    dc00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dc02:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    dc06:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    dc08:	7008      	strb	r0, [r1, #0]

	return reason;
}
    dc0a:	4770      	bx	lr
    dc0c:	e000ed00 	.word	0xe000ed00

0000dc10 <usage_fault.isra.3>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    dc10:	4b09      	ldr	r3, [pc, #36]	; (dc38 <usage_fault.isra.3+0x28>)
    dc12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    dc14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    dc16:	6a98      	ldr	r0, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    dc18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    dc1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    dc1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    dc1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    dc20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    dc22:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    dc26:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    dc2a:	ea6f 4212 	mvn.w	r2, r2, lsr #16

	return reason;
}
    dc2e:	bf18      	it	ne
    dc30:	2002      	movne	r0, #2
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    dc32:	629a      	str	r2, [r3, #40]	; 0x28
}
    dc34:	4770      	bx	lr
    dc36:	bf00      	nop
    dc38:	e000ed00 	.word	0xe000ed00

0000dc3c <mem_manage_fault.isra.6>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    dc3c:	4b16      	ldr	r3, [pc, #88]	; (dc98 <mem_manage_fault.isra.6+0x5c>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    dc3e:	b510      	push	{r4, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    dc40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    dc42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    dc44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    dc46:	460c      	mov	r4, r1
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    dc48:	0791      	lsls	r1, r2, #30
    dc4a:	d508      	bpl.n	dc5e <mem_manage_fault.isra.6+0x22>
		mmfar = SCB->MMFAR;
    dc4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    dc4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dc50:	0612      	lsls	r2, r2, #24
    dc52:	d504      	bpl.n	dc5e <mem_manage_fault.isra.6+0x22>
			if (from_hard_fault) {
    dc54:	b118      	cbz	r0, dc5e <mem_manage_fault.isra.6+0x22>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    dc56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dc58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    dc5c:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    dc5e:	4b0e      	ldr	r3, [pc, #56]	; (dc98 <mem_manage_fault.isra.6+0x5c>)
    dc60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    dc62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    dc64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dc66:	06db      	lsls	r3, r3, #27
    dc68:	d50e      	bpl.n	dc88 <mem_manage_fault.isra.6+0x4c>
	__ASSERT(0,
    dc6a:	490c      	ldr	r1, [pc, #48]	; (dc9c <mem_manage_fault.isra.6+0x60>)
    dc6c:	f44f 739b 	mov.w	r3, #310	; 0x136
    dc70:	4a0b      	ldr	r2, [pc, #44]	; (dca0 <mem_manage_fault.isra.6+0x64>)
    dc72:	480c      	ldr	r0, [pc, #48]	; (dca4 <mem_manage_fault.isra.6+0x68>)
    dc74:	f00f f8a0 	bl	1cdb8 <printk>
    dc78:	480b      	ldr	r0, [pc, #44]	; (dca8 <mem_manage_fault.isra.6+0x6c>)
    dc7a:	f00f f89d 	bl	1cdb8 <printk>
    dc7e:	f44f 719b 	mov.w	r1, #310	; 0x136
    dc82:	4807      	ldr	r0, [pc, #28]	; (dca0 <mem_manage_fault.isra.6+0x64>)
    dc84:	f00f f8ca 	bl	1ce1c <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
    dc88:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    dc8a:	4a03      	ldr	r2, [pc, #12]	; (dc98 <mem_manage_fault.isra.6+0x5c>)
    dc8c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    dc8e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    dc92:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    dc94:	7020      	strb	r0, [r4, #0]
}
    dc96:	bd10      	pop	{r4, pc}
    dc98:	e000ed00 	.word	0xe000ed00
    dc9c:	00020517 	.word	0x00020517
    dca0:	0001fae4 	.word	0x0001fae4
    dca4:	0001f722 	.word	0x0001f722
    dca8:	0001fb17 	.word	0x0001fb17

0000dcac <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    dcac:	b570      	push	{r4, r5, r6, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    dcae:	4b41      	ldr	r3, [pc, #260]	; (ddb4 <z_arm_fault+0x108>)
{
    dcb0:	b09c      	sub	sp, #112	; 0x70
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    dcb2:	685c      	ldr	r4, [r3, #4]
    dcb4:	2500      	movs	r5, #0
    dcb6:	f3c4 0408 	ubfx	r4, r4, #0, #9
    dcba:	f385 8811 	msr	BASEPRI, r5
    dcbe:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    dcc2:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    dcc6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    dcca:	d10e      	bne.n	dcea <z_arm_fault+0x3e>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    dccc:	07d3      	lsls	r3, r2, #31
    dcce:	d40c      	bmi.n	dcea <z_arm_fault+0x3e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    dcd0:	0656      	lsls	r6, r2, #25
    dcd2:	d404      	bmi.n	dcde <z_arm_fault+0x32>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    dcd4:	0715      	lsls	r5, r2, #28
    dcd6:	d405      	bmi.n	dce4 <z_arm_fault+0x38>
			ptr_esf = (z_arch_esf_t *)msp;
    dcd8:	4606      	mov	r6, r0
			*nested_exc = true;
    dcda:	2501      	movs	r5, #1
    dcdc:	e004      	b.n	dce8 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    dcde:	f012 0504 	ands.w	r5, r2, #4
    dce2:	d01c      	beq.n	dd1e <z_arm_fault+0x72>
			ptr_esf = (z_arch_esf_t *)psp;
    dce4:	460e      	mov	r6, r1
	*nested_exc = false;
    dce6:	2500      	movs	r5, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    dce8:	b97e      	cbnz	r6, dd0a <z_arm_fault+0x5e>
    dcea:	f240 33b1 	movw	r3, #945	; 0x3b1
    dcee:	4a32      	ldr	r2, [pc, #200]	; (ddb8 <z_arm_fault+0x10c>)
    dcf0:	4932      	ldr	r1, [pc, #200]	; (ddbc <z_arm_fault+0x110>)
    dcf2:	4833      	ldr	r0, [pc, #204]	; (ddc0 <z_arm_fault+0x114>)
    dcf4:	f00f f860 	bl	1cdb8 <printk>
    dcf8:	4832      	ldr	r0, [pc, #200]	; (ddc4 <z_arm_fault+0x118>)
    dcfa:	f00f f85d 	bl	1cdb8 <printk>
    dcfe:	f240 31b1 	movw	r1, #945	; 0x3b1
    dd02:	482d      	ldr	r0, [pc, #180]	; (ddb8 <z_arm_fault+0x10c>)
    dd04:	f00f f88a 	bl	1ce1c <assert_post_action>
    dd08:	2600      	movs	r6, #0
	*recoverable = false;
    dd0a:	2300      	movs	r3, #0
    dd0c:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    dd10:	1ee3      	subs	r3, r4, #3
    dd12:	2b03      	cmp	r3, #3
    dd14:	d847      	bhi.n	dda6 <z_arm_fault+0xfa>
    dd16:	e8df f003 	tbb	[pc, r3]
    dd1a:	3e04      	.short	0x3e04
    dd1c:	3b42      	.short	0x3b42
			ptr_esf = (z_arch_esf_t *)msp;
    dd1e:	4606      	mov	r6, r0
	if (!alternative_state_exc) {
    dd20:	e7e2      	b.n	dce8 <z_arm_fault+0x3c>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    dd22:	4b24      	ldr	r3, [pc, #144]	; (ddb4 <z_arm_fault+0x108>)
    dd24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    dd26:	0792      	lsls	r2, r2, #30
    dd28:	d43d      	bmi.n	dda6 <z_arm_fault+0xfa>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    dd2a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    dd2c:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    dd30:	d008      	beq.n	dd44 <z_arm_fault+0x98>
		if (SCB_MMFSR != 0) {
    dd32:	3328      	adds	r3, #40	; 0x28
    dd34:	781b      	ldrb	r3, [r3, #0]
    dd36:	b1eb      	cbz	r3, dd74 <z_arm_fault+0xc8>
			reason = mem_manage_fault(esf, 1, recoverable);
    dd38:	2001      	movs	r0, #1
    dd3a:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    dd3e:	f7ff ff7d 	bl	dc3c <mem_manage_fault.isra.6>
		reason = usage_fault(esf);
    dd42:	4604      	mov	r4, r0
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    dd44:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dd48:	b993      	cbnz	r3, dd70 <z_arm_fault+0xc4>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    dd4a:	2268      	movs	r2, #104	; 0x68
    dd4c:	4631      	mov	r1, r6
    dd4e:	a802      	add	r0, sp, #8
    dd50:	f00f fd84 	bl	1d85c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    dd54:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dd56:	b345      	cbz	r5, ddaa <z_arm_fault+0xfe>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    dd58:	f3c3 0208 	ubfx	r2, r3, #0, #9
    dd5c:	b922      	cbnz	r2, dd68 <z_arm_fault+0xbc>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    dd5e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    dd62:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    dd66:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    dd68:	a902      	add	r1, sp, #8
    dd6a:	4620      	mov	r0, r4
    dd6c:	f00f fbb7 	bl	1d4de <z_arm_fatal_error>
}
    dd70:	b01c      	add	sp, #112	; 0x70
    dd72:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    dd74:	4b14      	ldr	r3, [pc, #80]	; (ddc8 <z_arm_fault+0x11c>)
    dd76:	781b      	ldrb	r3, [r3, #0]
    dd78:	b12b      	cbz	r3, dd86 <z_arm_fault+0xda>
			reason = bus_fault(esf, 1, recoverable);
    dd7a:	2001      	movs	r0, #1
    dd7c:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    dd80:	f7ff ff28 	bl	dbd4 <bus_fault.isra.2>
    dd84:	e7dd      	b.n	dd42 <z_arm_fault+0x96>
		} else if (SCB_UFSR != 0) {
    dd86:	4b11      	ldr	r3, [pc, #68]	; (ddcc <z_arm_fault+0x120>)
    dd88:	881c      	ldrh	r4, [r3, #0]
    dd8a:	b2a4      	uxth	r4, r4
    dd8c:	2c00      	cmp	r4, #0
    dd8e:	d0d9      	beq.n	dd44 <z_arm_fault+0x98>
		reason = usage_fault(esf);
    dd90:	f7ff ff3e 	bl	dc10 <usage_fault.isra.3>
    dd94:	e7d5      	b.n	dd42 <z_arm_fault+0x96>
		reason = mem_manage_fault(esf, 0, recoverable);
    dd96:	f10d 0107 	add.w	r1, sp, #7
    dd9a:	2000      	movs	r0, #0
    dd9c:	e7cf      	b.n	dd3e <z_arm_fault+0x92>
		reason = bus_fault(esf, 0, recoverable);
    dd9e:	f10d 0107 	add.w	r1, sp, #7
    dda2:	2000      	movs	r0, #0
    dda4:	e7ec      	b.n	dd80 <z_arm_fault+0xd4>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    dda6:	2400      	movs	r4, #0
    dda8:	e7cc      	b.n	dd44 <z_arm_fault+0x98>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    ddaa:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    ddae:	f023 0301 	bic.w	r3, r3, #1
    ddb2:	e7d8      	b.n	dd66 <z_arm_fault+0xba>
    ddb4:	e000ed00 	.word	0xe000ed00
    ddb8:	0001fae4 	.word	0x0001fae4
    ddbc:	0001fb51 	.word	0x0001fb51
    ddc0:	0001f722 	.word	0x0001f722
    ddc4:	0001fb64 	.word	0x0001fb64
    ddc8:	e000ed29 	.word	0xe000ed29
    ddcc:	e000ed2a 	.word	0xe000ed2a

0000ddd0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    ddd0:	4b04      	ldr	r3, [pc, #16]	; (dde4 <z_arm_fault_init+0x14>)
    ddd2:	695a      	ldr	r2, [r3, #20]
    ddd4:	f042 0210 	orr.w	r2, r2, #16
    ddd8:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    ddda:	695a      	ldr	r2, [r3, #20]
    dddc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    dde0:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    dde2:	4770      	bx	lr
    dde4:	e000ed00 	.word	0xe000ed00

0000dde8 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    dde8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    ddec:	4905      	ldr	r1, [pc, #20]	; (de04 <sys_arch_reboot+0x1c>)
    ddee:	4b06      	ldr	r3, [pc, #24]	; (de08 <sys_arch_reboot+0x20>)
    ddf0:	68ca      	ldr	r2, [r1, #12]
    ddf2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    ddf6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    ddf8:	60cb      	str	r3, [r1, #12]
    ddfa:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    ddfe:	bf00      	nop
    de00:	e7fd      	b.n	ddfe <sys_arch_reboot+0x16>
    de02:	bf00      	nop
    de04:	e000ed00 	.word	0xe000ed00
    de08:	05fa0004 	.word	0x05fa0004

0000de0c <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
    de0c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    de0e:	2120      	movs	r1, #32
    de10:	4803      	ldr	r0, [pc, #12]	; (de20 <z_arm_int_lib_init+0x14>)
    de12:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    de14:	3301      	adds	r3, #1
    de16:	2b41      	cmp	r3, #65	; 0x41
    de18:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    de1c:	d1f9      	bne.n	de12 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    de1e:	4770      	bx	lr
    de20:	e000e100 	.word	0xe000e100

0000de24 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    de24:	b538      	push	{r3, r4, r5, lr}
    de26:	4604      	mov	r4, r0
	__asm__ volatile(
    de28:	f04f 0320 	mov.w	r3, #32
    de2c:	f3ef 8511 	mrs	r5, BASEPRI
    de30:	f383 8811 	msr	BASEPRI, r3
    de34:	f3bf 8f6f 	isb	sy
	unsigned int key;

	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
    de38:	7b03      	ldrb	r3, [r0, #12]
    de3a:	07db      	lsls	r3, r3, #31
    de3c:	d50c      	bpl.n	de58 <z_impl_k_thread_abort+0x34>
    de3e:	4912      	ldr	r1, [pc, #72]	; (de88 <z_impl_k_thread_abort+0x64>)
    de40:	2324      	movs	r3, #36	; 0x24
    de42:	4a12      	ldr	r2, [pc, #72]	; (de8c <z_impl_k_thread_abort+0x68>)
    de44:	4812      	ldr	r0, [pc, #72]	; (de90 <z_impl_k_thread_abort+0x6c>)
    de46:	f00e ffb7 	bl	1cdb8 <printk>
    de4a:	4812      	ldr	r0, [pc, #72]	; (de94 <z_impl_k_thread_abort+0x70>)
    de4c:	f00e ffb4 	bl	1cdb8 <printk>
    de50:	2124      	movs	r1, #36	; 0x24
    de52:	480e      	ldr	r0, [pc, #56]	; (de8c <z_impl_k_thread_abort+0x68>)
    de54:	f00e ffe2 	bl	1ce1c <assert_post_action>
		 "essential thread aborted");

	z_thread_single_abort(thread);
    de58:	4620      	mov	r0, r4
    de5a:	f00c fd97 	bl	1a98c <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    de5e:	4b0e      	ldr	r3, [pc, #56]	; (de98 <z_impl_k_thread_abort+0x74>)
    de60:	689b      	ldr	r3, [r3, #8]
    de62:	42a3      	cmp	r3, r4
    de64:	d10b      	bne.n	de7e <z_impl_k_thread_abort+0x5a>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    de66:	4b0d      	ldr	r3, [pc, #52]	; (de9c <z_impl_k_thread_abort+0x78>)
    de68:	685a      	ldr	r2, [r3, #4]
    de6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
    de6e:	b912      	cbnz	r2, de76 <z_impl_k_thread_abort+0x52>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    de70:	4628      	mov	r0, r5
    de72:	f7ff fcdb 	bl	d82c <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    de76:	685a      	ldr	r2, [r3, #4]
    de78:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    de7c:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    de7e:	4628      	mov	r0, r5
}
    de80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    de84:	f010 bcd9 	b.w	1e83a <z_reschedule_irqlock>
    de88:	0001fbdc 	.word	0x0001fbdc
    de8c:	0001fba2 	.word	0x0001fba2
    de90:	0001f722 	.word	0x0001f722
    de94:	0001fc0a 	.word	0x0001fc0a
    de98:	20024e04 	.word	0x20024e04
    de9c:	e000ed00 	.word	0xe000ed00

0000dea0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    dea0:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    dea2:	4b0e      	ldr	r3, [pc, #56]	; (dedc <z_arm_configure_static_mpu_regions+0x3c>)
{
    dea4:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    dea6:	9302      	str	r3, [sp, #8]
    dea8:	4b0d      	ldr	r3, [pc, #52]	; (dee0 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    deaa:	4c0e      	ldr	r4, [pc, #56]	; (dee4 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    deac:	9303      	str	r3, [sp, #12]
    deae:	4b0e      	ldr	r3, [pc, #56]	; (dee8 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    deb0:	4a0e      	ldr	r2, [pc, #56]	; (deec <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    deb2:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    deb4:	ab02      	add	r3, sp, #8
    deb6:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    deb8:	a801      	add	r0, sp, #4
    deba:	4623      	mov	r3, r4
    debc:	2101      	movs	r1, #1
    debe:	f000 f935 	bl	e12c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    dec2:	2300      	movs	r3, #0
    dec4:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    dec6:	4b0a      	ldr	r3, [pc, #40]	; (def0 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    dec8:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    deca:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    decc:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    dece:	9305      	str	r3, [sp, #20]
    ded0:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    ded2:	f000 f94f 	bl	e174 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    ded6:	b008      	add	sp, #32
    ded8:	bd10      	pop	{r4, pc}
    deda:	bf00      	nop
    dedc:	20020000 	.word	0x20020000
    dee0:	00000000 	.word	0x00000000
    dee4:	20040000 	.word	0x20040000
    dee8:	00010006 	.word	0x00010006
    deec:	20020000 	.word	0x20020000
    def0:	20020000 	.word	0x20020000

0000def4 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    def4:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    def6:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    def8:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    defa:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    defe:	f004 031f 	and.w	r3, r4, #31
    df02:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    df04:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    df06:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    df08:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    df0c:	4904      	ldr	r1, [pc, #16]	; (df20 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    df0e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    df12:	f043 0301 	orr.w	r3, r3, #1
    df16:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    df18:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    df1a:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    df1c:	bd10      	pop	{r4, pc}
    df1e:	bf00      	nop
    df20:	e000ed90 	.word	0xe000ed90

0000df24 <mpu_configure_regions_and_partition.constprop.2>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    df24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    df28:	4680      	mov	r8, r0
    df2a:	4689      	mov	r9, r1
    df2c:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    df2e:	2700      	movs	r7, #0
	MPU->RNR = index;
    df30:	4d48      	ldr	r5, [pc, #288]	; (e054 <mpu_configure_regions_and_partition.constprop.2+0x130>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    df32:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    df34:	454f      	cmp	r7, r9
    df36:	da07      	bge.n	df48 <mpu_configure_regions_and_partition.constprop.2+0x24>
		if (regions[i]->size == 0U) {
    df38:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
    df3c:	685e      	ldr	r6, [r3, #4]
    df3e:	b3c6      	cbz	r6, dfb2 <mpu_configure_regions_and_partition.constprop.2+0x8e>
		&&
    df40:	2e1f      	cmp	r6, #31
    df42:	d805      	bhi.n	df50 <mpu_configure_regions_and_partition.constprop.2+0x2c>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    df44:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    df48:	4620      	mov	r0, r4
    df4a:	b005      	add	sp, #20
    df4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
    df50:	06f2      	lsls	r2, r6, #27
    df52:	d1f7      	bne.n	df44 <mpu_configure_regions_and_partition.constprop.2+0x20>
		((part->start &
    df54:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    df58:	f01a 0f1f 	tst.w	sl, #31
    df5c:	d1f2      	bne.n	df44 <mpu_configure_regions_and_partition.constprop.2+0x20>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    df5e:	4650      	mov	r0, sl
    df60:	f00f faf4 	bl	1d54c <arm_cmse_mpu_region_get>
    df64:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    df66:	eb06 000a 	add.w	r0, r6, sl
    df6a:	3801      	subs	r0, #1
    df6c:	f00f faee 	bl	1d54c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    df70:	4583      	cmp	fp, r0
    df72:	d1e7      	bne.n	df44 <mpu_configure_regions_and_partition.constprop.2+0x20>
		if ((u_reg_index == -EINVAL) ||
    df74:	f11b 0f16 	cmn.w	fp, #22
    df78:	d0e4      	beq.n	df44 <mpu_configure_regions_and_partition.constprop.2+0x20>
			(u_reg_index > (reg_index - 1))) {
    df7a:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    df7c:	455b      	cmp	r3, fp
    df7e:	dbe1      	blt.n	df44 <mpu_configure_regions_and_partition.constprop.2+0x20>
	MPU->RNR = index;
    df80:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    df84:	68e8      	ldr	r0, [r5, #12]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    df86:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	MPU->RNR = index;
    df8a:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    df8e:	692e      	ldr	r6, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    df90:	f020 001f 	bic.w	r0, r0, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    df94:	e9d1 3200 	ldrd	r3, r2, [r1]
    df98:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    df9a:	4298      	cmp	r0, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    df9c:	f046 061f 	orr.w	r6, r6, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    dfa0:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
    dfa4:	d118      	bne.n	dfd8 <mpu_configure_regions_and_partition.constprop.2+0xb4>
    dfa6:	4556      	cmp	r6, sl
    dfa8:	d105      	bne.n	dfb6 <mpu_configure_regions_and_partition.constprop.2+0x92>
			mpu_configure_region(u_reg_index, regions[i]);
    dfaa:	fa5f f08b 	uxtb.w	r0, fp
    dfae:	f00f faab 	bl	1d508 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    dfb2:	3701      	adds	r7, #1
    dfb4:	e7be      	b.n	df34 <mpu_configure_regions_and_partition.constprop.2+0x10>
	MPU->RNR = index;
    dfb6:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    dfba:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    dfbc:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    dfc0:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    dfc4:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    dfc6:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    dfc8:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    dfca:	f00f fa9d 	bl	1d508 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    dfce:	f110 0f16 	cmn.w	r0, #22
    dfd2:	d0b7      	beq.n	df44 <mpu_configure_regions_and_partition.constprop.2+0x20>
			reg_index++;
    dfd4:	1c44      	adds	r4, r0, #1
    dfd6:	e7ec      	b.n	dfb2 <mpu_configure_regions_and_partition.constprop.2+0x8e>
	MPU->RNR = index;
    dfd8:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    dfdc:	692a      	ldr	r2, [r5, #16]
    dfde:	3b01      	subs	r3, #1
    dfe0:	f023 031f 	bic.w	r3, r3, #31
    dfe4:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    dfe8:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    dfea:	4556      	cmp	r6, sl
    dfec:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    dfee:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    dff0:	d0eb      	beq.n	dfca <mpu_configure_regions_and_partition.constprop.2+0xa6>
				mpu_configure_region(reg_index, regions[i]);
    dff2:	f00f fa89 	bl	1d508 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    dff6:	f110 0f16 	cmn.w	r0, #22
    dffa:	d0a3      	beq.n	df44 <mpu_configure_regions_and_partition.constprop.2+0x20>
	MPU->RNR = index;
    dffc:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    e000:	68ea      	ldr	r2, [r5, #12]
    e002:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    e006:	3e01      	subs	r6, #1
	attr->rbar = MPU->RBAR &
    e008:	f362 0304 	bfi	r3, r2, #0, #5
    e00c:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e010:	692b      	ldr	r3, [r5, #16]
    e012:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e016:	085b      	lsrs	r3, r3, #1
    e018:	f363 1247 	bfi	r2, r3, #5, #3
    e01c:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    e020:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
    e024:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
    e026:	e9d2 3200 	ldrd	r3, r2, [r2]
    e02a:	4413      	add	r3, r2
    e02c:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    e02e:	f023 031f 	bic.w	r3, r3, #31
    e032:	441e      	add	r6, r3
    e034:	eba6 060a 	sub.w	r6, r6, sl
    e038:	b2c4      	uxtb	r4, r0
    e03a:	f026 061f 	bic.w	r6, r6, #31

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
    e03e:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
    e040:	9603      	str	r6, [sp, #12]
    e042:	f63f af7f 	bhi.w	df44 <mpu_configure_regions_and_partition.constprop.2+0x20>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    e046:	4620      	mov	r0, r4
    e048:	4669      	mov	r1, sp
    e04a:	f7ff ff53 	bl	def4 <region_init>
			reg_index++;
    e04e:	3401      	adds	r4, #1
    e050:	e7af      	b.n	dfb2 <mpu_configure_regions_and_partition.constprop.2+0x8e>
    e052:	bf00      	nop
    e054:	e000ed90 	.word	0xe000ed90

0000e058 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    e058:	2205      	movs	r2, #5
    e05a:	4b03      	ldr	r3, [pc, #12]	; (e068 <arm_core_mpu_enable+0x10>)
    e05c:	605a      	str	r2, [r3, #4]
    e05e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e062:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    e066:	4770      	bx	lr
    e068:	e000ed90 	.word	0xe000ed90

0000e06c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    e06c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    e070:	2200      	movs	r2, #0
    e072:	4b01      	ldr	r3, [pc, #4]	; (e078 <arm_core_mpu_disable+0xc>)
    e074:	605a      	str	r2, [r3, #4]
}
    e076:	4770      	bx	lr
    e078:	e000ed90 	.word	0xe000ed90

0000e07c <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    e07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    e07e:	4f21      	ldr	r7, [pc, #132]	; (e104 <arm_mpu_init+0x88>)
    e080:	683e      	ldr	r6, [r7, #0]
    e082:	2e10      	cmp	r6, #16
    e084:	d913      	bls.n	e0ae <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    e086:	f240 132d 	movw	r3, #301	; 0x12d
    e08a:	4a1f      	ldr	r2, [pc, #124]	; (e108 <arm_mpu_init+0x8c>)
    e08c:	491f      	ldr	r1, [pc, #124]	; (e10c <arm_mpu_init+0x90>)
    e08e:	4820      	ldr	r0, [pc, #128]	; (e110 <arm_mpu_init+0x94>)
    e090:	f00e fe92 	bl	1cdb8 <printk>
    e094:	2210      	movs	r2, #16
    e096:	4631      	mov	r1, r6
    e098:	481e      	ldr	r0, [pc, #120]	; (e114 <arm_mpu_init+0x98>)
    e09a:	f00e fe8d 	bl	1cdb8 <printk>
    e09e:	481a      	ldr	r0, [pc, #104]	; (e108 <arm_mpu_init+0x8c>)
    e0a0:	f240 112d 	movw	r1, #301	; 0x12d
    e0a4:	f00e feba 	bl	1ce1c <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    e0a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
    e0ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e0ae:	2400      	movs	r4, #0
	arm_core_mpu_disable();
    e0b0:	f7ff ffdc 	bl	e06c <arm_core_mpu_disable>
	MPU->MAIR0 =
    e0b4:	4d18      	ldr	r5, [pc, #96]	; (e118 <arm_mpu_init+0x9c>)
    e0b6:	4a19      	ldr	r2, [pc, #100]	; (e11c <arm_mpu_init+0xa0>)
    e0b8:	632a      	str	r2, [r5, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e0ba:	42a6      	cmp	r6, r4
    e0bc:	d119      	bne.n	e0f2 <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
    e0be:	4b18      	ldr	r3, [pc, #96]	; (e120 <arm_mpu_init+0xa4>)
    e0c0:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
    e0c2:	f7ff ffc9 	bl	e058 <arm_core_mpu_enable>
	__ASSERT(
    e0c6:	682b      	ldr	r3, [r5, #0]
    e0c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e0cc:	2b10      	cmp	r3, #16
    e0ce:	d00e      	beq.n	e0ee <arm_mpu_init+0x72>
    e0d0:	4914      	ldr	r1, [pc, #80]	; (e124 <arm_mpu_init+0xa8>)
    e0d2:	f44f 73a7 	mov.w	r3, #334	; 0x14e
    e0d6:	4a0c      	ldr	r2, [pc, #48]	; (e108 <arm_mpu_init+0x8c>)
    e0d8:	480d      	ldr	r0, [pc, #52]	; (e110 <arm_mpu_init+0x94>)
    e0da:	f00e fe6d 	bl	1cdb8 <printk>
    e0de:	4812      	ldr	r0, [pc, #72]	; (e128 <arm_mpu_init+0xac>)
    e0e0:	f00e fe6a 	bl	1cdb8 <printk>
    e0e4:	f44f 71a7 	mov.w	r1, #334	; 0x14e
    e0e8:	4807      	ldr	r0, [pc, #28]	; (e108 <arm_mpu_init+0x8c>)
    e0ea:	f00e fe97 	bl	1ce1c <assert_post_action>
	return 0;
    e0ee:	2000      	movs	r0, #0
    e0f0:	e7dc      	b.n	e0ac <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    e0f2:	6879      	ldr	r1, [r7, #4]
    e0f4:	4620      	mov	r0, r4
    e0f6:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    e0fa:	f7ff fefb 	bl	def4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e0fe:	3401      	adds	r4, #1
    e100:	e7db      	b.n	e0ba <arm_mpu_init+0x3e>
    e102:	bf00      	nop
    e104:	0001edb4 	.word	0x0001edb4
    e108:	0001fcad 	.word	0x0001fcad
    e10c:	00020517 	.word	0x00020517
    e110:	0001f722 	.word	0x0001f722
    e114:	0001fce6 	.word	0x0001fce6
    e118:	e000ed90 	.word	0xe000ed90
    e11c:	0044ffaa 	.word	0x0044ffaa
    e120:	20024f31 	.word	0x20024f31
    e124:	0001fd1a 	.word	0x0001fd1a
    e128:	0001fd6b 	.word	0x0001fd6b

0000e12c <arm_core_mpu_configure_static_mpu_regions>:
{
    e12c:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    e12e:	4c0c      	ldr	r4, [pc, #48]	; (e160 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    e130:	460d      	mov	r5, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    e132:	7822      	ldrb	r2, [r4, #0]
    e134:	f7ff fef6 	bl	df24 <mpu_configure_regions_and_partition.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    e138:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    e13a:	3016      	adds	r0, #22
    e13c:	d10f      	bne.n	e15e <arm_core_mpu_configure_static_mpu_regions+0x32>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    e13e:	23f3      	movs	r3, #243	; 0xf3
    e140:	4a08      	ldr	r2, [pc, #32]	; (e164 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    e142:	4909      	ldr	r1, [pc, #36]	; (e168 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    e144:	4809      	ldr	r0, [pc, #36]	; (e16c <arm_core_mpu_configure_static_mpu_regions+0x40>)
    e146:	f00e fe37 	bl	1cdb8 <printk>
    e14a:	4629      	mov	r1, r5
    e14c:	4808      	ldr	r0, [pc, #32]	; (e170 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    e14e:	f00e fe33 	bl	1cdb8 <printk>
}
    e152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    e156:	21f3      	movs	r1, #243	; 0xf3
    e158:	4802      	ldr	r0, [pc, #8]	; (e164 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    e15a:	f00e be5f 	b.w	1ce1c <assert_post_action>
}
    e15e:	bd38      	pop	{r3, r4, r5, pc}
    e160:	20024f31 	.word	0x20024f31
    e164:	0001fcad 	.word	0x0001fcad
    e168:	00020517 	.word	0x00020517
    e16c:	0001f722 	.word	0x0001f722
    e170:	0001fc52 	.word	0x0001fc52

0000e174 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    e174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e178:	4c2e      	ldr	r4, [pc, #184]	; (e234 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
    e17a:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e17c:	4680      	mov	r8, r0
    e17e:	2700      	movs	r7, #0
    e180:	46a2      	mov	sl, r4
	attr->rbar = MPU->RBAR &
    e182:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
    e186:	4d2c      	ldr	r5, [pc, #176]	; (e238 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e188:	454f      	cmp	r7, r9
    e18a:	db02      	blt.n	e192 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1e>
}
    e18c:	b003      	add	sp, #12
    e18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    e192:	f8d8 3004 	ldr.w	r3, [r8, #4]
    e196:	9301      	str	r3, [sp, #4]
    e198:	2b00      	cmp	r3, #0
    e19a:	d046      	beq.n	e22a <arm_core_mpu_mark_areas_for_dynamic_regions+0xb6>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    e19c:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e1a0:	4608      	mov	r0, r1
    e1a2:	9100      	str	r1, [sp, #0]
    e1a4:	f00f f9d2 	bl	1d54c <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e1a8:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e1ac:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e1ae:	1858      	adds	r0, r3, r1
    e1b0:	3801      	subs	r0, #1
    e1b2:	f00f f9cb 	bl	1d54c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e1b6:	4286      	cmp	r6, r0
    e1b8:	4a20      	ldr	r2, [pc, #128]	; (e23c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    e1ba:	d018      	beq.n	e1ee <arm_core_mpu_mark_areas_for_dynamic_regions+0x7a>
		dyn_reg_info[i].index =
    e1bc:	2314      	movs	r3, #20
    e1be:	435f      	muls	r7, r3
    e1c0:	f06f 0315 	mvn.w	r3, #21
    e1c4:	f84a 3007 	str.w	r3, [sl, r7]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    e1c8:	f240 1303 	movw	r3, #259	; 0x103
    e1cc:	4a1c      	ldr	r2, [pc, #112]	; (e240 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
    e1ce:	491d      	ldr	r1, [pc, #116]	; (e244 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
    e1d0:	481d      	ldr	r0, [pc, #116]	; (e248 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
    e1d2:	f00e fdf1 	bl	1cdb8 <printk>
    e1d6:	4649      	mov	r1, r9
    e1d8:	481c      	ldr	r0, [pc, #112]	; (e24c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    e1da:	f00e fded 	bl	1cdb8 <printk>
    e1de:	f240 1103 	movw	r1, #259	; 0x103
    e1e2:	4817      	ldr	r0, [pc, #92]	; (e240 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
}
    e1e4:	b003      	add	sp, #12
    e1e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    e1ea:	f00e be17 	b.w	1ce1c <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    e1ee:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
    e1f2:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    e1f4:	d0e8      	beq.n	e1c8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    e1f6:	7813      	ldrb	r3, [r2, #0]
    e1f8:	42b3      	cmp	r3, r6
    e1fa:	dde5      	ble.n	e1c8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    e1fc:	fb0b a307 	mla	r3, fp, r7, sl
	MPU->RNR = index;
    e200:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
    e202:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
    e204:	68e8      	ldr	r0, [r5, #12]
    e206:	7b19      	ldrb	r1, [r3, #12]
    e208:	f360 0104 	bfi	r1, r0, #0, #5
    e20c:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e20e:	6929      	ldr	r1, [r5, #16]
    e210:	7b18      	ldrb	r0, [r3, #12]
    e212:	0849      	lsrs	r1, r1, #1
    e214:	f361 1047 	bfi	r0, r1, #5, #3
    e218:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    e21a:	68eb      	ldr	r3, [r5, #12]
    e21c:	f023 031f 	bic.w	r3, r3, #31
    e220:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    e222:	692b      	ldr	r3, [r5, #16]
    e224:	f023 031f 	bic.w	r3, r3, #31
    e228:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e22a:	3701      	adds	r7, #1
    e22c:	3414      	adds	r4, #20
    e22e:	f108 080c 	add.w	r8, r8, #12
    e232:	e7a9      	b.n	e188 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
    e234:	200201a8 	.word	0x200201a8
    e238:	e000ed90 	.word	0xe000ed90
    e23c:	20024f31 	.word	0x20024f31
    e240:	0001fcad 	.word	0x0001fcad
    e244:	00020517 	.word	0x00020517
    e248:	0001f722 	.word	0x0001f722
    e24c:	0001fc7e 	.word	0x0001fc7e

0000e250 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    e250:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
    e252:	4b16      	ldr	r3, [pc, #88]	; (e2ac <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    e254:	460c      	mov	r4, r1
    e256:	781d      	ldrb	r5, [r3, #0]
    e258:	4606      	mov	r6, r0
    e25a:	462b      	mov	r3, r5
  mpu->RLAR = 0U;
    e25c:	2100      	movs	r1, #0
  mpu->RNR = rnr;
    e25e:	4a14      	ldr	r2, [pc, #80]	; (e2b0 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    e260:	2b0f      	cmp	r3, #15
    e262:	dd1d      	ble.n	e2a0 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>
#if defined(CONFIG_MPU_GAP_FILLING)
	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
    e264:	4913      	ldr	r1, [pc, #76]	; (e2b4 <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
    e266:	f851 0b04 	ldr.w	r0, [r1], #4
    e26a:	f7ff fe43 	bl	def4 <region_init>

	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */
	mpu_reg_index = mpu_configure_regions_and_partition(dynamic_regions,
    e26e:	462a      	mov	r2, r5
    e270:	4621      	mov	r1, r4
    e272:	4630      	mov	r0, r6
    e274:	f7ff fe56 	bl	df24 <mpu_configure_regions_and_partition.constprop.2>
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    e278:	3016      	adds	r0, #22
    e27a:	d115      	bne.n	e2a8 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    e27c:	f44f 7389 	mov.w	r3, #274	; 0x112
    e280:	4a0d      	ldr	r2, [pc, #52]	; (e2b8 <arm_core_mpu_configure_dynamic_mpu_regions+0x68>)
    e282:	490e      	ldr	r1, [pc, #56]	; (e2bc <arm_core_mpu_configure_dynamic_mpu_regions+0x6c>)
    e284:	480e      	ldr	r0, [pc, #56]	; (e2c0 <arm_core_mpu_configure_dynamic_mpu_regions+0x70>)
    e286:	f00e fd97 	bl	1cdb8 <printk>
    e28a:	4621      	mov	r1, r4
    e28c:	480d      	ldr	r0, [pc, #52]	; (e2c4 <arm_core_mpu_configure_dynamic_mpu_regions+0x74>)
    e28e:	f00e fd93 	bl	1cdb8 <printk>
}
    e292:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    e296:	f44f 7189 	mov.w	r1, #274	; 0x112
    e29a:	4807      	ldr	r0, [pc, #28]	; (e2b8 <arm_core_mpu_configure_dynamic_mpu_regions+0x68>)
    e29c:	f00e bdbe 	b.w	1ce1c <assert_post_action>
    e2a0:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    e2a2:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    e2a4:	3301      	adds	r3, #1
    e2a6:	e7db      	b.n	e260 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
}
    e2a8:	bd70      	pop	{r4, r5, r6, pc}
    e2aa:	bf00      	nop
    e2ac:	20024f31 	.word	0x20024f31
    e2b0:	e000ed90 	.word	0xe000ed90
    e2b4:	200201a8 	.word	0x200201a8
    e2b8:	0001fcad 	.word	0x0001fcad
    e2bc:	00020517 	.word	0x00020517
    e2c0:	0001f722 	.word	0x0001f722
    e2c4:	0001fc25 	.word	0x0001fc25

0000e2c8 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
    e2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e2cc:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
    e2ce:	2300      	movs	r3, #0
{
    e2d0:	b0a3      	sub	sp, #140	; 0x8c
    e2d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
	count = 0;
    e2d6:	9301      	str	r3, [sp, #4]

	while ((c = *format++)) {
    e2d8:	4613      	mov	r3, r2
    e2da:	f813 0b01 	ldrb.w	r0, [r3], #1
    e2de:	9308      	str	r3, [sp, #32]
    e2e0:	b158      	cbz	r0, e2fa <z_prf+0x32>
		if (c != '%') {
    e2e2:	2825      	cmp	r0, #37	; 0x25
    e2e4:	f000 8085 	beq.w	e3f2 <z_prf+0x12a>
			PUTC(c);
    e2e8:	9903      	ldr	r1, [sp, #12]
    e2ea:	9b02      	ldr	r3, [sp, #8]
    e2ec:	4798      	blx	r3
    e2ee:	3001      	adds	r0, #1
    e2f0:	f040 841a 	bne.w	eb28 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc8>
    e2f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e2f8:	9301      	str	r3, [sp, #4]
		}
	}
	return count;

#undef PUTC
}
    e2fa:	9801      	ldr	r0, [sp, #4]
    e2fc:	b023      	add	sp, #140	; 0x8c
    e2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
    e302:	2c23      	cmp	r4, #35	; 0x23
    e304:	d06c      	beq.n	e3e0 <z_prf+0x118>
    e306:	d861      	bhi.n	e3cc <z_prf+0x104>
    e308:	2c00      	cmp	r4, #0
    e30a:	d0f6      	beq.n	e2fa <z_prf+0x32>
					fspace = true;
    e30c:	2c20      	cmp	r4, #32
    e30e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e310:	bf08      	it	eq
    e312:	2301      	moveq	r3, #1
    e314:	930e      	str	r3, [sp, #56]	; 0x38
					fminus = true;
    e316:	f8cd 8020 	str.w	r8, [sp, #32]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    e31a:	f8dd 8020 	ldr.w	r8, [sp, #32]
    e31e:	48b7      	ldr	r0, [pc, #732]	; (e5fc <z_prf+0x334>)
    e320:	f818 4b01 	ldrb.w	r4, [r8], #1
    e324:	4621      	mov	r1, r4
    e326:	f00f fa4c 	bl	1d7c2 <strchr>
    e32a:	2800      	cmp	r0, #0
    e32c:	d1e9      	bne.n	e302 <z_prf+0x3a>
			if (c == '*') {
    e32e:	2c2a      	cmp	r4, #42	; 0x2a
    e330:	d166      	bne.n	e400 <z_prf+0x138>
				width = va_arg(vargs, int);
    e332:	f856 3b04 	ldr.w	r3, [r6], #4
				c = *format++;
    e336:	f898 4000 	ldrb.w	r4, [r8]
				if (width < 0) {
    e33a:	2b00      	cmp	r3, #0
				width = va_arg(vargs, int);
    e33c:	9309      	str	r3, [sp, #36]	; 0x24
					width = -width;
    e33e:	bfbf      	itttt	lt
    e340:	425b      	neglt	r3, r3
    e342:	9309      	strlt	r3, [sp, #36]	; 0x24
					fminus = true;
    e344:	2301      	movlt	r3, #1
    e346:	930f      	strlt	r3, [sp, #60]	; 0x3c
				c = *format++;
    e348:	9b08      	ldr	r3, [sp, #32]
    e34a:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
    e34e:	2c2e      	cmp	r4, #46	; 0x2e
    e350:	d17b      	bne.n	e44a <z_prf+0x182>
				if (c == '*') {
    e352:	f898 3000 	ldrb.w	r3, [r8]
    e356:	2b2a      	cmp	r3, #42	; 0x2a
    e358:	d174      	bne.n	e444 <z_prf+0x17c>
					precision = va_arg(vargs, int);
    e35a:	f856 5b04 	ldr.w	r5, [r6], #4
				c = *format++;
    e35e:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
    e362:	f818 4b01 	ldrb.w	r4, [r8], #1
			if (strchr("hlz", c) != NULL) {
    e366:	4621      	mov	r1, r4
    e368:	48a5      	ldr	r0, [pc, #660]	; (e600 <z_prf+0x338>)
    e36a:	4627      	mov	r7, r4
    e36c:	f00f fa29 	bl	1d7c2 <strchr>
    e370:	2800      	cmp	r0, #0
    e372:	d06d      	beq.n	e450 <z_prf+0x188>
				c = *format++;
    e374:	4643      	mov	r3, r8
    e376:	f813 4b01 	ldrb.w	r4, [r3], #1
				} else if (i == 'h' && c == 'h') {
    e37a:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
    e37c:	9308      	str	r3, [sp, #32]
				} else if (i == 'h' && c == 'h') {
    e37e:	d107      	bne.n	e390 <z_prf+0xc8>
    e380:	2c68      	cmp	r4, #104	; 0x68
    e382:	d105      	bne.n	e390 <z_prf+0xc8>
					i = 'H';
    e384:	2748      	movs	r7, #72	; 0x48
					c = *format++;
    e386:	f108 0302 	add.w	r3, r8, #2
    e38a:	f898 4001 	ldrb.w	r4, [r8, #1]
    e38e:	9308      	str	r3, [sp, #32]
			switch (c) {
    e390:	2c67      	cmp	r4, #103	; 0x67
    e392:	d87b      	bhi.n	e48c <z_prf+0x1c4>
    e394:	2c65      	cmp	r4, #101	; 0x65
    e396:	f080 8135 	bcs.w	e604 <z_prf+0x33c>
    e39a:	2c47      	cmp	r4, #71	; 0x47
    e39c:	d85c      	bhi.n	e458 <z_prf+0x190>
    e39e:	2c45      	cmp	r4, #69	; 0x45
    e3a0:	f080 8130 	bcs.w	e604 <z_prf+0x33c>
    e3a4:	2c00      	cmp	r4, #0
    e3a6:	d0a8      	beq.n	e2fa <z_prf+0x32>
    e3a8:	2c25      	cmp	r4, #37	; 0x25
    e3aa:	f000 83b9 	beq.w	eb20 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc0>
				PUTC('%');
    e3ae:	9903      	ldr	r1, [sp, #12]
    e3b0:	2025      	movs	r0, #37	; 0x25
    e3b2:	9b02      	ldr	r3, [sp, #8]
    e3b4:	4798      	blx	r3
    e3b6:	3001      	adds	r0, #1
    e3b8:	d09c      	beq.n	e2f4 <z_prf+0x2c>
				PUTC(c);
    e3ba:	9903      	ldr	r1, [sp, #12]
    e3bc:	4620      	mov	r0, r4
    e3be:	9b02      	ldr	r3, [sp, #8]
    e3c0:	4798      	blx	r3
    e3c2:	3001      	adds	r0, #1
    e3c4:	d096      	beq.n	e2f4 <z_prf+0x2c>
				count += 2;
    e3c6:	9b01      	ldr	r3, [sp, #4]
    e3c8:	3302      	adds	r3, #2
    e3ca:	e3af      	b.n	eb2c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xcc>
				switch (c) {
    e3cc:	2c2d      	cmp	r4, #45	; 0x2d
    e3ce:	d00a      	beq.n	e3e6 <z_prf+0x11e>
    e3d0:	2c30      	cmp	r4, #48	; 0x30
    e3d2:	d00b      	beq.n	e3ec <z_prf+0x124>
					fplus = true;
    e3d4:	2c2b      	cmp	r4, #43	; 0x2b
    e3d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e3d8:	bf08      	it	eq
    e3da:	2301      	moveq	r3, #1
    e3dc:	930b      	str	r3, [sp, #44]	; 0x2c
    e3de:	e79a      	b.n	e316 <z_prf+0x4e>
					falt = true;
    e3e0:	f04f 0b01 	mov.w	fp, #1
    e3e4:	e797      	b.n	e316 <z_prf+0x4e>
					fminus = true;
    e3e6:	2301      	movs	r3, #1
    e3e8:	930f      	str	r3, [sp, #60]	; 0x3c
    e3ea:	e794      	b.n	e316 <z_prf+0x4e>
					fzero = true;
    e3ec:	2301      	movs	r3, #1
    e3ee:	930a      	str	r3, [sp, #40]	; 0x28
    e3f0:	e791      	b.n	e316 <z_prf+0x4e>
			fminus = fplus = fspace = falt = fzero = false;
    e3f2:	2300      	movs	r3, #0
    e3f4:	930a      	str	r3, [sp, #40]	; 0x28
    e3f6:	930e      	str	r3, [sp, #56]	; 0x38
    e3f8:	930b      	str	r3, [sp, #44]	; 0x2c
    e3fa:	930f      	str	r3, [sp, #60]	; 0x3c
    e3fc:	469b      	mov	fp, r3
    e3fe:	e78c      	b.n	e31a <z_prf+0x52>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    e400:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
    e404:	2b09      	cmp	r3, #9
				width = 0;
    e406:	9009      	str	r0, [sp, #36]	; 0x24
			} else if (!isdigit(c)) {
    e408:	d8a1      	bhi.n	e34e <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    e40a:	220a      	movs	r2, #10
	while (isdigit(*p)) {
    e40c:	f8dd 8020 	ldr.w	r8, [sp, #32]
    e410:	f818 4b01 	ldrb.w	r4, [r8], #1
    e414:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    e418:	2b09      	cmp	r3, #9
    e41a:	d898      	bhi.n	e34e <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    e41c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e41e:	fb02 4403 	mla	r4, r2, r3, r4
    e422:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    e426:	e9cd 8308 	strd	r8, r3, [sp, #32]
    e42a:	e7ef      	b.n	e40c <z_prf+0x144>
    e42c:	4690      	mov	r8, r2
    e42e:	fb01 3505 	mla	r5, r1, r5, r3
    e432:	3d30      	subs	r5, #48	; 0x30
	while (isdigit(*p)) {
    e434:	4642      	mov	r2, r8
    e436:	f812 3b01 	ldrb.w	r3, [r2], #1
    e43a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    e43e:	2809      	cmp	r0, #9
    e440:	d9f4      	bls.n	e42c <z_prf+0x164>
    e442:	e78e      	b.n	e362 <z_prf+0x9a>
	int i = 0;
    e444:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
    e446:	210a      	movs	r1, #10
    e448:	e7f4      	b.n	e434 <z_prf+0x16c>
			precision = -1;
    e44a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    e44e:	e78a      	b.n	e366 <z_prf+0x9e>
    e450:	f8cd 8020 	str.w	r8, [sp, #32]
			i = 0;
    e454:	4607      	mov	r7, r0
    e456:	e79b      	b.n	e390 <z_prf+0xc8>
			switch (c) {
    e458:	2c63      	cmp	r4, #99	; 0x63
    e45a:	d059      	beq.n	e510 <z_prf+0x248>
    e45c:	d820      	bhi.n	e4a0 <z_prf+0x1d8>
    e45e:	2c58      	cmp	r4, #88	; 0x58
    e460:	d1a5      	bne.n	e3ae <z_prf+0xe6>
				if (c == 'o') {
    e462:	2c6f      	cmp	r4, #111	; 0x6f
    e464:	f106 0904 	add.w	r9, r6, #4
    e468:	6831      	ldr	r1, [r6, #0]
    e46a:	f040 8328 	bne.w	eabe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5e>
	if (alt_form) {
    e46e:	f1bb 0f00 	cmp.w	fp, #0
    e472:	f000 8317 	beq.w	eaa4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x44>
		*buf++ = '0';
    e476:	2330      	movs	r3, #48	; 0x30
    e478:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		if (!value) {
    e47c:	2900      	cmp	r1, #0
    e47e:	f040 831b 	bne.w	eab8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x58>
			*buf++ = 0;
    e482:	f88d 106d 	strb.w	r1, [sp, #109]	; 0x6d
			prefix = 0;
    e486:	460f      	mov	r7, r1
			return 1;
    e488:	2601      	movs	r6, #1
    e48a:	e025      	b.n	e4d8 <z_prf+0x210>
			switch (c) {
    e48c:	2c70      	cmp	r4, #112	; 0x70
    e48e:	f000 82f5 	beq.w	ea7c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c>
    e492:	d827      	bhi.n	e4e4 <z_prf+0x21c>
    e494:	2c6e      	cmp	r4, #110	; 0x6e
    e496:	f000 82de 	beq.w	ea56 <z_prf+0x78e>
    e49a:	d8e2      	bhi.n	e462 <z_prf+0x19a>
    e49c:	2c69      	cmp	r4, #105	; 0x69
    e49e:	d186      	bne.n	e3ae <z_prf+0xe6>
				switch (i) {
    e4a0:	6837      	ldr	r7, [r6, #0]
    e4a2:	f106 0904 	add.w	r9, r6, #4
	if (value < 0) {
    e4a6:	2f00      	cmp	r7, #0
    e4a8:	f280 809a 	bge.w	e5e0 <z_prf+0x318>
		*buf++ = '-';
    e4ac:	232d      	movs	r3, #45	; 0x2d
		value = -value;
    e4ae:	4279      	negs	r1, r7
		*buf++ = '-';
    e4b0:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		*buf++ = ' ';
    e4b4:	f10d 066d 	add.w	r6, sp, #109	; 0x6d
	return _to_x(buf, value, 10);
    e4b8:	4630      	mov	r0, r6
    e4ba:	220a      	movs	r2, #10
    e4bc:	f00f fa1a 	bl	1d8f4 <_to_x>
				if (fplus || fspace || val < 0) {
    e4c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	return (buf + _to_udec(buf, value)) - start;
    e4c2:	4406      	add	r6, r0
    e4c4:	a81b      	add	r0, sp, #108	; 0x6c
    e4c6:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
    e4c8:	2b00      	cmp	r3, #0
    e4ca:	f040 8332 	bne.w	eb32 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd2>
    e4ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e4d0:	2b00      	cmp	r3, #0
    e4d2:	f040 832e 	bne.w	eb32 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd2>
    e4d6:	0fff      	lsrs	r7, r7, #31
			if (precision >= 0) {
    e4d8:	2d00      	cmp	r5, #0
    e4da:	da21      	bge.n	e520 <z_prf+0x258>
			zero.predot = zero.postdot = zero.trail = 0;
    e4dc:	2500      	movs	r5, #0
    e4de:	46ab      	mov	fp, r5
    e4e0:	46a8      	mov	r8, r5
    e4e2:	e0e1      	b.n	e6a8 <z_prf+0x3e0>
			switch (c) {
    e4e4:	2c75      	cmp	r4, #117	; 0x75
    e4e6:	d0bc      	beq.n	e462 <z_prf+0x19a>
    e4e8:	2c78      	cmp	r4, #120	; 0x78
    e4ea:	d0ba      	beq.n	e462 <z_prf+0x19a>
    e4ec:	2c73      	cmp	r4, #115	; 0x73
    e4ee:	f47f af5e 	bne.w	e3ae <z_prf+0xe6>
				cptr = va_arg(vargs, char *);
    e4f2:	46b1      	mov	r9, r6
					precision = INT_MAX;
    e4f4:	2d00      	cmp	r5, #0
    e4f6:	bfb8      	it	lt
    e4f8:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
    e4fc:	2600      	movs	r6, #0
				cptr = va_arg(vargs, char *);
    e4fe:	f859 3b04 	ldr.w	r3, [r9], #4
				for (clen = 0; clen < precision; clen++) {
    e502:	42b5      	cmp	r5, r6
    e504:	f040 82c9 	bne.w	ea9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3a>
    e508:	462e      	mov	r6, r5
    e50a:	2500      	movs	r5, #0
    e50c:	462f      	mov	r7, r5
    e50e:	e008      	b.n	e522 <z_prf+0x25a>
				break;
    e510:	2700      	movs	r7, #0
				buf[0] = va_arg(vargs, int);
    e512:	46b1      	mov	r9, r6
				break;
    e514:	463d      	mov	r5, r7
				clen = 1;
    e516:	2601      	movs	r6, #1
				buf[0] = va_arg(vargs, int);
    e518:	f859 3b04 	ldr.w	r3, [r9], #4
    e51c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
				break;
    e520:	ab1b      	add	r3, sp, #108	; 0x6c
				zero_head = precision - clen + prefix;
    e522:	19ea      	adds	r2, r5, r7
			zero.predot = zero.postdot = zero.trail = 0;
    e524:	2500      	movs	r5, #0
    e526:	46ab      	mov	fp, r5
    e528:	46a8      	mov	r8, r5
				zero_head = precision - clen + prefix;
    e52a:	1b92      	subs	r2, r2, r6
			if (zero_head < 0) {
    e52c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			width -= clen + zero_head;
    e530:	1991      	adds	r1, r2, r6
    e532:	9106      	str	r1, [sp, #24]
    e534:	9909      	ldr	r1, [sp, #36]	; 0x24
    e536:	1990      	adds	r0, r2, r6
    e538:	1a0c      	subs	r4, r1, r0
			if (!fminus && width > 0) {
    e53a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e53c:	b911      	cbnz	r1, e544 <z_prf+0x27c>
    e53e:	2c00      	cmp	r4, #0
    e540:	f300 8314 	bgt.w	eb6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10c>
			while (prefix-- > 0) {
    e544:	eb03 0a07 	add.w	sl, r3, r7
    e548:	4553      	cmp	r3, sl
    e54a:	f040 8313 	bne.w	eb74 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x114>
			while (zero_head-- > 0) {
    e54e:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    e552:	f080 831d 	bcs.w	eb90 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x130>
			clen -= prefix;
    e556:	1bf6      	subs	r6, r6, r7
			if (zero.predot) {
    e558:	f1b8 0f00 	cmp.w	r8, #0
    e55c:	d011      	beq.n	e582 <z_prf+0x2ba>
				c = *cptr;
    e55e:	f89a 0000 	ldrb.w	r0, [sl]
				while (isdigit(c)) {
    e562:	eb0a 0706 	add.w	r7, sl, r6
    e566:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    e56a:	2b09      	cmp	r3, #9
    e56c:	eba7 060a 	sub.w	r6, r7, sl
    e570:	f240 8319 	bls.w	eba6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x146>
    e574:	4647      	mov	r7, r8
				while (zero.predot-- > 0) {
    e576:	f117 37ff 	adds.w	r7, r7, #4294967295	; 0xffffffff
    e57a:	f080 831d 	bcs.w	ebb8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x158>
				clen -= zero.predot;
    e57e:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.postdot) {
    e582:	f1bb 0f00 	cmp.w	fp, #0
    e586:	d015      	beq.n	e5b4 <z_prf+0x2ec>
    e588:	eb0a 0706 	add.w	r7, sl, r6
					c = *cptr++;
    e58c:	f81a 8b01 	ldrb.w	r8, [sl], #1
					PUTC(c);
    e590:	9903      	ldr	r1, [sp, #12]
    e592:	4640      	mov	r0, r8
    e594:	9b02      	ldr	r3, [sp, #8]
    e596:	4798      	blx	r3
    e598:	3001      	adds	r0, #1
    e59a:	f43f aeab 	beq.w	e2f4 <z_prf+0x2c>
				} while (c != '.');
    e59e:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
    e5a2:	eba7 060a 	sub.w	r6, r7, sl
    e5a6:	d1f1      	bne.n	e58c <z_prf+0x2c4>
				while (zero.postdot-- > 0) {
    e5a8:	465f      	mov	r7, fp
    e5aa:	2f00      	cmp	r7, #0
    e5ac:	f300 830d 	bgt.w	ebca <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x16a>
				clen -= zero.postdot;
    e5b0:	eba6 060b 	sub.w	r6, r6, fp
			if (zero.trail) {
    e5b4:	b195      	cbz	r5, e5dc <z_prf+0x314>
				c = *cptr;
    e5b6:	f89a 0000 	ldrb.w	r0, [sl]
				while (isdigit(c) || c == '.') {
    e5ba:	eb0a 0706 	add.w	r7, sl, r6
    e5be:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    e5c2:	2b09      	cmp	r3, #9
    e5c4:	eba7 060a 	sub.w	r6, r7, sl
    e5c8:	f240 830a 	bls.w	ebe0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x180>
    e5cc:	282e      	cmp	r0, #46	; 0x2e
    e5ce:	f000 8307 	beq.w	ebe0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x180>
				while (zero.trail-- > 0) {
    e5d2:	462f      	mov	r7, r5
    e5d4:	2f00      	cmp	r7, #0
    e5d6:	f300 830c 	bgt.w	ebf2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x192>
				clen -= zero.trail;
    e5da:	1b76      	subs	r6, r6, r5
    e5dc:	4456      	add	r6, sl
    e5de:	e31b      	b.n	ec18 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1b8>
	} else if (fplus) {
    e5e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e5e2:	b123      	cbz	r3, e5ee <z_prf+0x326>
		*buf++ = '+';
    e5e4:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    e5e6:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    e5ea:	4639      	mov	r1, r7
    e5ec:	e762      	b.n	e4b4 <z_prf+0x1ec>
	} else if (fspace) {
    e5ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e5f0:	b10b      	cbz	r3, e5f6 <z_prf+0x32e>
		*buf++ = ' ';
    e5f2:	2320      	movs	r3, #32
    e5f4:	e7f7      	b.n	e5e6 <z_prf+0x31e>
	} else if (fspace) {
    e5f6:	4639      	mov	r1, r7
    e5f8:	ae1b      	add	r6, sp, #108	; 0x6c
    e5fa:	e75d      	b.n	e4b8 <z_prf+0x1f0>
    e5fc:	0001fd8c 	.word	0x0001fd8c
    e600:	0001fd92 	.word	0x0001fd92
				u.d = va_arg(vargs, double);
    e604:	f106 0907 	add.w	r9, r6, #7
    e608:	f029 0907 	bic.w	r9, r9, #7
    e60c:	e8f9 2302 	ldrd	r2, r3, [r9], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
    e610:	02d8      	lsls	r0, r3, #11
    e612:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
    e616:	02d6      	lsls	r6, r2, #11
    e618:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
	if (sign) {
    e61c:	2a00      	cmp	r2, #0
	exp = double_temp >> 52 & 0x7ff;
    e61e:	f3c3 510a 	ubfx	r1, r3, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
    e622:	9604      	str	r6, [sp, #16]
    e624:	9005      	str	r0, [sp, #20]
	if (sign) {
    e626:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
    e62a:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    e62e:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
	if (sign) {
    e632:	da41      	bge.n	e6b8 <z_prf+0x3f0>
		*buf++ = '-';
    e634:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    e636:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    e63a:	f10d 076d 	add.w	r7, sp, #109	; 0x6d
	if (exp == 0x7ff) {
    e63e:	f240 73ff 	movw	r3, #2047	; 0x7ff
    e642:	4299      	cmp	r1, r3
    e644:	d153      	bne.n	e6ee <z_prf+0x426>
		if (!fract) {
    e646:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    e64a:	430a      	orrs	r2, r1
    e64c:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
    e650:	f107 0303 	add.w	r3, r7, #3
    e654:	d140      	bne.n	e6d8 <z_prf+0x410>
			if (isupper(c)) {
    e656:	2c19      	cmp	r4, #25
    e658:	d838      	bhi.n	e6cc <z_prf+0x404>
				*buf++ = 'I';
    e65a:	2249      	movs	r2, #73	; 0x49
    e65c:	703a      	strb	r2, [r7, #0]
				*buf++ = 'N';
    e65e:	224e      	movs	r2, #78	; 0x4e
    e660:	707a      	strb	r2, [r7, #1]
				*buf++ = 'F';
    e662:	2246      	movs	r2, #70	; 0x46
		*buf = 0;
    e664:	2500      	movs	r5, #0
			zero.predot = zero.postdot = zero.trail = 0;
    e666:	46ab      	mov	fp, r5
    e668:	46a8      	mov	r8, r5
		return buf - start;
    e66a:	ae1b      	add	r6, sp, #108	; 0x6c
				*buf++ = 'n';
    e66c:	70ba      	strb	r2, [r7, #2]
		*buf = 0;
    e66e:	70fd      	strb	r5, [r7, #3]
		return buf - start;
    e670:	1b9b      	subs	r3, r3, r6
				if (fplus || fspace || (buf[0] == '-')) {
    e672:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e674:	2a00      	cmp	r2, #0
    e676:	f040 81ec 	bne.w	ea52 <z_prf+0x78a>
    e67a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e67c:	2a00      	cmp	r2, #0
    e67e:	f040 81e8 	bne.w	ea52 <z_prf+0x78a>
    e682:	f89d 706c 	ldrb.w	r7, [sp, #108]	; 0x6c
    e686:	f1a7 022d 	sub.w	r2, r7, #45	; 0x2d
    e68a:	4257      	negs	r7, r2
    e68c:	4157      	adcs	r7, r2
				clen += zero.predot + zero.postdot + zero.trail;
    e68e:	eb05 0608 	add.w	r6, r5, r8
    e692:	4433      	add	r3, r6
    e694:	eb03 060b 	add.w	r6, r3, fp
				if (!isdigit(buf[prefix])) {
    e698:	ab22      	add	r3, sp, #136	; 0x88
    e69a:	443b      	add	r3, r7
    e69c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    e6a0:	3b30      	subs	r3, #48	; 0x30
    e6a2:	2b09      	cmp	r3, #9
    e6a4:	f200 8249 	bhi.w	eb3a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xda>
			} else if (fzero) {
    e6a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e6aa:	2b00      	cmp	r3, #0
    e6ac:	f000 8248 	beq.w	eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
    e6b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e6b2:	1b9a      	subs	r2, r3, r6
    e6b4:	ab1b      	add	r3, sp, #108	; 0x6c
    e6b6:	e739      	b.n	e52c <z_prf+0x264>
	} else if (fplus) {
    e6b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e6ba:	b10b      	cbz	r3, e6c0 <z_prf+0x3f8>
		*buf++ = '+';
    e6bc:	232b      	movs	r3, #43	; 0x2b
    e6be:	e7ba      	b.n	e636 <z_prf+0x36e>
	} else if (fspace) {
    e6c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e6c2:	b10b      	cbz	r3, e6c8 <z_prf+0x400>
		*buf++ = ' ';
    e6c4:	2320      	movs	r3, #32
    e6c6:	e7b6      	b.n	e636 <z_prf+0x36e>
	} else if (fspace) {
    e6c8:	af1b      	add	r7, sp, #108	; 0x6c
    e6ca:	e7b8      	b.n	e63e <z_prf+0x376>
				*buf++ = 'i';
    e6cc:	2269      	movs	r2, #105	; 0x69
    e6ce:	703a      	strb	r2, [r7, #0]
				*buf++ = 'n';
    e6d0:	226e      	movs	r2, #110	; 0x6e
    e6d2:	707a      	strb	r2, [r7, #1]
				*buf++ = 'f';
    e6d4:	2266      	movs	r2, #102	; 0x66
    e6d6:	e7c5      	b.n	e664 <z_prf+0x39c>
			if (isupper(c)) {
    e6d8:	2c19      	cmp	r4, #25
				*buf++ = 'N';
    e6da:	bf99      	ittee	ls
    e6dc:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
    e6de:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
    e6e0:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
    e6e2:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
    e6e4:	bf94      	ite	ls
    e6e6:	703a      	strbls	r2, [r7, #0]
				*buf++ = 'n';
    e6e8:	703a      	strbhi	r2, [r7, #0]
				*buf++ = 'a';
    e6ea:	7079      	strb	r1, [r7, #1]
    e6ec:	e7ba      	b.n	e664 <z_prf+0x39c>
	if ((exp | fract) != 0) {
    e6ee:	9b04      	ldr	r3, [sp, #16]
    e6f0:	9805      	ldr	r0, [sp, #20]
    e6f2:	430b      	orrs	r3, r1
    e6f4:	9310      	str	r3, [sp, #64]	; 0x40
    e6f6:	17cb      	asrs	r3, r1, #31
    e6f8:	4303      	orrs	r3, r0
		c = 'f';
    e6fa:	2c46      	cmp	r4, #70	; 0x46
	if ((exp | fract) != 0) {
    e6fc:	9311      	str	r3, [sp, #68]	; 0x44
		c = 'f';
    e6fe:	bf08      	it	eq
    e700:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
    e702:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    e706:	4313      	orrs	r3, r2
    e708:	f000 8111 	beq.w	e92e <z_prf+0x666>
		if (exp == 0) {
    e70c:	2900      	cmp	r1, #0
    e70e:	f000 809b 	beq.w	e848 <z_prf+0x580>
		fract |= HIGHBIT64;
    e712:	2600      	movs	r6, #0
    e714:	9b17      	ldr	r3, [sp, #92]	; 0x5c
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    e716:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
    e71a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    e71e:	9317      	str	r3, [sp, #92]	; 0x5c
	while (exp <= -3) {
    e720:	f118 0f02 	cmn.w	r8, #2
    e724:	f2c0 80a4 	blt.w	e870 <z_prf+0x5a8>
	while (exp > 0) {
    e728:	f1b8 0f00 	cmp.w	r8, #0
    e72c:	f300 80dd 	bgt.w	e8ea <z_prf+0x622>
		_rlrshift(&fract);
    e730:	a816      	add	r0, sp, #88	; 0x58
		exp++;
    e732:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    e736:	f00f f8ff 	bl	1d938 <_rlrshift>
	while (exp < (0 + 4)) {
    e73a:	f1b8 0f04 	cmp.w	r8, #4
    e73e:	d1f7      	bne.n	e730 <z_prf+0x468>
		precision = 6;		/* Default precision if none given */
    e740:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
    e742:	f004 03df 	and.w	r3, r4, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
    e746:	bfb8      	it	lt
    e748:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
    e74a:	2b47      	cmp	r3, #71	; 0x47
    e74c:	f040 80f8 	bne.w	e940 <z_prf+0x678>
		if (decexp < (-4 + 1) || decexp > precision) {
    e750:	1cf1      	adds	r1, r6, #3
    e752:	db02      	blt.n	e75a <z_prf+0x492>
    e754:	42ae      	cmp	r6, r5
    e756:	f340 80ed 	ble.w	e934 <z_prf+0x66c>
			c += 'e' - 'g';
    e75a:	3c02      	subs	r4, #2
    e75c:	b2e4      	uxtb	r4, r4
			if (precision > 0) {
    e75e:	2d00      	cmp	r5, #0
    e760:	f000 80f4 	beq.w	e94c <z_prf+0x684>
				precision--;
    e764:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
    e766:	f1bb 0f00 	cmp.w	fp, #0
    e76a:	f040 80ef 	bne.w	e94c <z_prf+0x684>
    e76e:	2d00      	cmp	r5, #0
    e770:	bfd4      	ite	le
    e772:	f04f 0a00 	movle.w	sl, #0
    e776:	f04f 0a01 	movgt.w	sl, #1
	if (c == 'f') {
    e77a:	2c66      	cmp	r4, #102	; 0x66
    e77c:	f040 80e8 	bne.w	e950 <z_prf+0x688>
		if (exp < 0) {
    e780:	eb16 0805 	adds.w	r8, r6, r5
    e784:	f140 80ec 	bpl.w	e960 <z_prf+0x698>
	digit_count = 16;
    e788:	2310      	movs	r3, #16
    e78a:	2466      	movs	r4, #102	; 0x66
			exp = 0;
    e78c:	f04f 0800 	mov.w	r8, #0
	digit_count = 16;
    e790:	9315      	str	r3, [sp, #84]	; 0x54
	ltemp = 0x0800000000000000;
    e792:	2200      	movs	r2, #0
    e794:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    e798:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	while (exp--) {
    e79c:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
    e7a0:	f080 80e0 	bcs.w	e964 <z_prf+0x69c>
	fract += ltemp;
    e7a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    e7a6:	9a18      	ldr	r2, [sp, #96]	; 0x60
    e7a8:	9919      	ldr	r1, [sp, #100]	; 0x64
    e7aa:	189b      	adds	r3, r3, r2
    e7ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    e7ae:	eb41 0202 	adc.w	r2, r1, r2
    e7b2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
	if ((fract >> 32) & 0xF0000000) {
    e7b6:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    e7ba:	9312      	str	r3, [sp, #72]	; 0x48
    e7bc:	2300      	movs	r3, #0
    e7be:	9313      	str	r3, [sp, #76]	; 0x4c
    e7c0:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    e7c4:	4313      	orrs	r3, r2
    e7c6:	d006      	beq.n	e7d6 <z_prf+0x50e>
		_ldiv5(&fract);
    e7c8:	a816      	add	r0, sp, #88	; 0x58
    e7ca:	f00f f8c6 	bl	1d95a <_ldiv5>
		_rlrshift(&fract);
    e7ce:	a816      	add	r0, sp, #88	; 0x58
    e7d0:	f00f f8b2 	bl	1d938 <_rlrshift>
		decexp++;
    e7d4:	3601      	adds	r6, #1
	if (c == 'f') {
    e7d6:	2c66      	cmp	r4, #102	; 0x66
    e7d8:	f040 80e1 	bne.w	e99e <z_prf+0x6d6>
		if (decexp > 0) {
    e7dc:	2e00      	cmp	r6, #0
    e7de:	f340 80c8 	ble.w	e972 <z_prf+0x6aa>
			while (decexp > 0 && digit_count > 0) {
    e7e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e7e4:	2b00      	cmp	r3, #0
    e7e6:	dd07      	ble.n	e7f8 <z_prf+0x530>
				*buf++ = _get_digit(&fract, &digit_count);
    e7e8:	a915      	add	r1, sp, #84	; 0x54
    e7ea:	a816      	add	r0, sp, #88	; 0x58
    e7ec:	f00f f8e0 	bl	1d9b0 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    e7f0:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    e7f2:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
    e7f6:	d1f4      	bne.n	e7e2 <z_prf+0x51a>
			zp->predot = decexp;
    e7f8:	46b0      	mov	r8, r6
    e7fa:	463b      	mov	r3, r7
			decexp = 0;
    e7fc:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
    e7fe:	f1bb 0f00 	cmp.w	fp, #0
    e802:	d101      	bne.n	e808 <z_prf+0x540>
    e804:	2d00      	cmp	r5, #0
    e806:	dd15      	ble.n	e834 <z_prf+0x56c>
			*buf++ = '.';
    e808:	222e      	movs	r2, #46	; 0x2e
    e80a:	f803 2b01 	strb.w	r2, [r3], #1
		if (decexp < 0 && precision > 0) {
    e80e:	2e00      	cmp	r6, #0
    e810:	f000 80c0 	beq.w	e994 <z_prf+0x6cc>
    e814:	2d00      	cmp	r5, #0
    e816:	f340 80bf 	ble.w	e998 <z_prf+0x6d0>
			zp->postdot = -decexp;
    e81a:	f1c6 0b00 	rsb	fp, r6, #0
    e81e:	45ab      	cmp	fp, r5
    e820:	bfa8      	it	ge
    e822:	46ab      	movge	fp, r5
			precision -= zp->postdot;
    e824:	eba5 050b 	sub.w	r5, r5, fp
		while (precision > 0 && digit_count > 0) {
    e828:	2d00      	cmp	r5, #0
    e82a:	dd03      	ble.n	e834 <z_prf+0x56c>
    e82c:	9a15      	ldr	r2, [sp, #84]	; 0x54
    e82e:	2a00      	cmp	r2, #0
    e830:	f300 80a6 	bgt.w	e980 <z_prf+0x6b8>
	if (prune_zero) {
    e834:	f1ba 0f00 	cmp.w	sl, #0
    e838:	f040 80c6 	bne.w	e9c8 <z_prf+0x700>
	*buf = 0;
    e83c:	2200      	movs	r2, #0
	return buf - start;
    e83e:	ae1b      	add	r6, sp, #108	; 0x6c
	*buf = 0;
    e840:	701a      	strb	r2, [r3, #0]
	return buf - start;
    e842:	1b9b      	subs	r3, r3, r6
    e844:	e715      	b.n	e672 <z_prf+0x3aa>
				exp--;
    e846:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
    e848:	9b04      	ldr	r3, [sp, #16]
    e84a:	18db      	adds	r3, r3, r3
    e84c:	9304      	str	r3, [sp, #16]
    e84e:	9b05      	ldr	r3, [sp, #20]
    e850:	415b      	adcs	r3, r3
    e852:	9305      	str	r3, [sp, #20]
    e854:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    e858:	2a00      	cmp	r2, #0
    e85a:	f173 0300 	sbcs.w	r3, r3, #0
    e85e:	daf2      	bge.n	e846 <z_prf+0x57e>
    e860:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    e864:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    e868:	e753      	b.n	e712 <z_prf+0x44a>
			_rlrshift(&fract);
    e86a:	a816      	add	r0, sp, #88	; 0x58
    e86c:	f00f f864 	bl	1d938 <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    e870:	e9dd ec16 	ldrd	lr, ip, [sp, #88]	; 0x58
    e874:	2300      	movs	r3, #0
    e876:	2100      	movs	r1, #0
    e878:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    e87c:	930d      	str	r3, [sp, #52]	; 0x34
    e87e:	48bc      	ldr	r0, [pc, #752]	; (eb70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x110>)
    e880:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    e884:	4299      	cmp	r1, r3
    e886:	bf08      	it	eq
    e888:	4290      	cmpeq	r0, r2
    e88a:	f108 0801 	add.w	r8, r8, #1
    e88e:	d3ec      	bcc.n	e86a <z_prf+0x5a2>
		fract *= 5U;
    e890:	2005      	movs	r0, #5
    e892:	fbae 2300 	umull	r2, r3, lr, r0
    e896:	e9cd 2306 	strd	r2, r3, [sp, #24]
    e89a:	9b07      	ldr	r3, [sp, #28]
		decexp--;
    e89c:	3e01      	subs	r6, #1
		fract *= 5U;
    e89e:	fb00 330c 	mla	r3, r0, ip, r3
		decexp--;
    e8a2:	f04f 0c00 	mov.w	ip, #0
		fract *= 5U;
    e8a6:	9307      	str	r3, [sp, #28]
    e8a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    e8ac:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    e8b0:	2100      	movs	r1, #0
    e8b2:	2300      	movs	r3, #0
    e8b4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    e8b8:	9807      	ldr	r0, [sp, #28]
    e8ba:	428b      	cmp	r3, r1
    e8bc:	bf08      	it	eq
    e8be:	4282      	cmpeq	r2, r0
    e8c0:	d208      	bcs.n	e8d4 <z_prf+0x60c>
    e8c2:	f1bc 0f00 	cmp.w	ip, #0
    e8c6:	f43f af2b 	beq.w	e720 <z_prf+0x458>
    e8ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    e8ce:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    e8d2:	e725      	b.n	e720 <z_prf+0x458>
			fract <<= 1;
    e8d4:	9b06      	ldr	r3, [sp, #24]
			exp--;
    e8d6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			fract <<= 1;
    e8da:	18db      	adds	r3, r3, r3
    e8dc:	9306      	str	r3, [sp, #24]
    e8de:	9b07      	ldr	r3, [sp, #28]
    e8e0:	f04f 0c01 	mov.w	ip, #1
    e8e4:	415b      	adcs	r3, r3
    e8e6:	9307      	str	r3, [sp, #28]
			exp--;
    e8e8:	e7e2      	b.n	e8b0 <z_prf+0x5e8>
		_ldiv5(&fract);
    e8ea:	a816      	add	r0, sp, #88	; 0x58
    e8ec:	f00f f835 	bl	1d95a <_ldiv5>
		exp--;
    e8f0:	e9dd ae16 	ldrd	sl, lr, [sp, #88]	; 0x58
		decexp++;
    e8f4:	f04f 0c00 	mov.w	ip, #0
		exp--;
    e8f8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    e8fc:	3601      	adds	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    e8fe:	2300      	movs	r3, #0
    e900:	2100      	movs	r1, #0
    e902:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    e906:	4299      	cmp	r1, r3
    e908:	bf08      	it	eq
    e90a:	4570      	cmpeq	r0, lr
    e90c:	d206      	bcs.n	e91c <z_prf+0x654>
    e90e:	f1bc 0f00 	cmp.w	ip, #0
    e912:	f43f af09 	beq.w	e728 <z_prf+0x460>
    e916:	e9cd ae16 	strd	sl, lr, [sp, #88]	; 0x58
    e91a:	e705      	b.n	e728 <z_prf+0x460>
			fract <<= 1;
    e91c:	eb1a 0a0a 	adds.w	sl, sl, sl
    e920:	eb4e 0e0e 	adc.w	lr, lr, lr
			exp--;
    e924:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    e928:	f04f 0c01 	mov.w	ip, #1
    e92c:	e7e7      	b.n	e8fe <z_prf+0x636>
	if ((exp | fract) != 0) {
    e92e:	2600      	movs	r6, #0
    e930:	46b0      	mov	r8, r6
    e932:	e6fd      	b.n	e730 <z_prf+0x468>
			precision -= decexp;
    e934:	1bad      	subs	r5, r5, r6
		if (!falt && (precision > 0)) {
    e936:	f1bb 0f00 	cmp.w	fp, #0
    e93a:	d104      	bne.n	e946 <z_prf+0x67e>
			c = 'f';
    e93c:	2466      	movs	r4, #102	; 0x66
    e93e:	e716      	b.n	e76e <z_prf+0x4a6>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    e940:	f04f 0a00 	mov.w	sl, #0
    e944:	e719      	b.n	e77a <z_prf+0x4b2>
    e946:	f04f 0a00 	mov.w	sl, #0
    e94a:	e719      	b.n	e780 <z_prf+0x4b8>
    e94c:	f04f 0a00 	mov.w	sl, #0
		exp = precision + 1;
    e950:	f105 0801 	add.w	r8, r5, #1
	digit_count = 16;
    e954:	2310      	movs	r3, #16
    e956:	4598      	cmp	r8, r3
    e958:	9315      	str	r3, [sp, #84]	; 0x54
	if (exp > 16) {
    e95a:	bfa8      	it	ge
    e95c:	4698      	movge	r8, r3
    e95e:	e718      	b.n	e792 <z_prf+0x4ca>
		if (exp < 0) {
    e960:	2466      	movs	r4, #102	; 0x66
    e962:	e7f7      	b.n	e954 <z_prf+0x68c>
		_ldiv5(&ltemp);
    e964:	a818      	add	r0, sp, #96	; 0x60
    e966:	f00e fff8 	bl	1d95a <_ldiv5>
		_rlrshift(&ltemp);
    e96a:	a818      	add	r0, sp, #96	; 0x60
    e96c:	f00e ffe4 	bl	1d938 <_rlrshift>
    e970:	e714      	b.n	e79c <z_prf+0x4d4>
			*buf++ = '0';
    e972:	463b      	mov	r3, r7
    e974:	2230      	movs	r2, #48	; 0x30
			zero.predot = zero.postdot = zero.trail = 0;
    e976:	f04f 0800 	mov.w	r8, #0
			*buf++ = '0';
    e97a:	f803 2b01 	strb.w	r2, [r3], #1
    e97e:	e73e      	b.n	e7fe <z_prf+0x536>
			*buf++ = _get_digit(&fract, &digit_count);
    e980:	a915      	add	r1, sp, #84	; 0x54
    e982:	a816      	add	r0, sp, #88	; 0x58
    e984:	9306      	str	r3, [sp, #24]
    e986:	f00f f813 	bl	1d9b0 <_get_digit>
    e98a:	9b06      	ldr	r3, [sp, #24]
			precision--;
    e98c:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    e98e:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    e992:	e749      	b.n	e828 <z_prf+0x560>
			zero.predot = zero.postdot = zero.trail = 0;
    e994:	46b3      	mov	fp, r6
    e996:	e747      	b.n	e828 <z_prf+0x560>
    e998:	f04f 0b00 	mov.w	fp, #0
    e99c:	e74a      	b.n	e834 <z_prf+0x56c>
		*buf = _get_digit(&fract, &digit_count);
    e99e:	a915      	add	r1, sp, #84	; 0x54
    e9a0:	a816      	add	r0, sp, #88	; 0x58
    e9a2:	f00f f805 	bl	1d9b0 <_get_digit>
		if (*buf++ != '0') {
    e9a6:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
    e9a8:	7038      	strb	r0, [r7, #0]
			decexp--;
    e9aa:	bf18      	it	ne
    e9ac:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
    e9b0:	f1bb 0f00 	cmp.w	fp, #0
    e9b4:	d138      	bne.n	ea28 <z_prf+0x760>
    e9b6:	2d00      	cmp	r5, #0
    e9b8:	dc36      	bgt.n	ea28 <z_prf+0x760>
		if (*buf++ != '0') {
    e9ba:	1c7b      	adds	r3, r7, #1
	if (prune_zero) {
    e9bc:	f1ba 0f00 	cmp.w	sl, #0
    e9c0:	d044      	beq.n	ea4c <z_prf+0x784>
			zero.predot = zero.postdot = zero.trail = 0;
    e9c2:	f04f 0b00 	mov.w	fp, #0
    e9c6:	46d8      	mov	r8, fp
		while (*--buf == '0')
    e9c8:	461a      	mov	r2, r3
    e9ca:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    e9ce:	2930      	cmp	r1, #48	; 0x30
    e9d0:	d0fa      	beq.n	e9c8 <z_prf+0x700>
		if (*buf != '.') {
    e9d2:	292e      	cmp	r1, #46	; 0x2e
    e9d4:	bf18      	it	ne
    e9d6:	4613      	movne	r3, r2
    e9d8:	2500      	movs	r5, #0
	if ((c == 'e') || (c == 'E')) {
    e9da:	f004 02df 	and.w	r2, r4, #223	; 0xdf
    e9de:	2a45      	cmp	r2, #69	; 0x45
    e9e0:	f47f af2c 	bne.w	e83c <z_prf+0x574>
		if (decexp < 0) {
    e9e4:	2e00      	cmp	r6, #0
			*buf++ = '-';
    e9e6:	bfb4      	ite	lt
    e9e8:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    e9ea:	222b      	movge	r2, #43	; 0x2b
		*buf++ = c;
    e9ec:	4619      	mov	r1, r3
			decexp = -decexp;
    e9ee:	bfb8      	it	lt
    e9f0:	4276      	neglt	r6, r6
		if (decexp >= 100) {
    e9f2:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
    e9f4:	f801 4b02 	strb.w	r4, [r1], #2
			*buf++ = '-';
    e9f8:	705a      	strb	r2, [r3, #1]
		if (decexp >= 100) {
    e9fa:	dd08      	ble.n	ea0e <z_prf+0x746>
			*buf++ = (decexp / 100) + '0';
    e9fc:	2064      	movs	r0, #100	; 0x64
    e9fe:	fb96 f2f0 	sdiv	r2, r6, r0
			decexp %= 100;
    ea02:	fb00 6612 	mls	r6, r0, r2, r6
			*buf++ = (decexp / 100) + '0';
    ea06:	f102 0430 	add.w	r4, r2, #48	; 0x30
    ea0a:	1cd9      	adds	r1, r3, #3
    ea0c:	709c      	strb	r4, [r3, #2]
		*buf++ = (decexp / 10) + '0';
    ea0e:	200a      	movs	r0, #10
    ea10:	fb96 f2f0 	sdiv	r2, r6, r0
    ea14:	460b      	mov	r3, r1
		decexp %= 10;
    ea16:	fb00 6612 	mls	r6, r0, r2, r6
		*buf++ = (decexp / 10) + '0';
    ea1a:	f102 0430 	add.w	r4, r2, #48	; 0x30
		*buf++ = decexp + '0';
    ea1e:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    ea20:	f803 4b02 	strb.w	r4, [r3], #2
		*buf++ = decexp + '0';
    ea24:	704e      	strb	r6, [r1, #1]
    ea26:	e709      	b.n	e83c <z_prf+0x574>
			*buf++ = '.';
    ea28:	222e      	movs	r2, #46	; 0x2e
    ea2a:	1cbb      	adds	r3, r7, #2
    ea2c:	707a      	strb	r2, [r7, #1]
		while (precision > 0 && digit_count > 0) {
    ea2e:	2d00      	cmp	r5, #0
    ea30:	ddc4      	ble.n	e9bc <z_prf+0x6f4>
    ea32:	9a15      	ldr	r2, [sp, #84]	; 0x54
    ea34:	2a00      	cmp	r2, #0
    ea36:	ddc1      	ble.n	e9bc <z_prf+0x6f4>
			*buf++ = _get_digit(&fract, &digit_count);
    ea38:	a915      	add	r1, sp, #84	; 0x54
    ea3a:	a816      	add	r0, sp, #88	; 0x58
    ea3c:	9306      	str	r3, [sp, #24]
    ea3e:	f00e ffb7 	bl	1d9b0 <_get_digit>
    ea42:	9b06      	ldr	r3, [sp, #24]
			precision--;
    ea44:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    ea46:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    ea4a:	e7f0      	b.n	ea2e <z_prf+0x766>
			zero.predot = zero.postdot = zero.trail = 0;
    ea4c:	46d3      	mov	fp, sl
    ea4e:	46d0      	mov	r8, sl
    ea50:	e7c3      	b.n	e9da <z_prf+0x712>
					prefix = 1;
    ea52:	2701      	movs	r7, #1
    ea54:	e61b      	b.n	e68e <z_prf+0x3c6>
				switch (i) {
    ea56:	46b1      	mov	r9, r6
    ea58:	2f68      	cmp	r7, #104	; 0x68
    ea5a:	f859 3b04 	ldr.w	r3, [r9], #4
    ea5e:	d005      	beq.n	ea6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc>
    ea60:	dc01      	bgt.n	ea66 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6>
    ea62:	2f48      	cmp	r7, #72	; 0x48
    ea64:	d007      	beq.n	ea76 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x16>
					*va_arg(vargs, int *) = count;
    ea66:	9a01      	ldr	r2, [sp, #4]
    ea68:	601a      	str	r2, [r3, #0]
					break;
    ea6a:	e001      	b.n	ea70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10>
					*va_arg(vargs, short *) = count;
    ea6c:	9a01      	ldr	r2, [sp, #4]
    ea6e:	801a      	strh	r2, [r3, #0]
				continue;
    ea70:	464e      	mov	r6, r9
    ea72:	9a08      	ldr	r2, [sp, #32]
    ea74:	e430      	b.n	e2d8 <z_prf+0x10>
					*va_arg(vargs, char *) = count;
    ea76:	9a01      	ldr	r2, [sp, #4]
    ea78:	701a      	strb	r2, [r3, #0]
					break;
    ea7a:	e7f9      	b.n	ea70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10>
				val = (uintptr_t) va_arg(vargs, void *);
    ea7c:	46b1      	mov	r9, r6
		*buf++ = '0';
    ea7e:	f647 0330 	movw	r3, #30768	; 0x7830
	len = _to_x(buf, value, 16);
    ea82:	2210      	movs	r2, #16
    ea84:	f859 1b04 	ldr.w	r1, [r9], #4
    ea88:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
		*buf++ = '0';
    ea8c:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
	len = _to_x(buf, value, 16);
    ea90:	f00e ff30 	bl	1d8f4 <_to_x>
				prefix = 2;
    ea94:	2702      	movs	r7, #2
	return len + (buf - buf0);
    ea96:	1c86      	adds	r6, r0, #2
				break;
    ea98:	e51e      	b.n	e4d8 <z_prf+0x210>
					if (cptr[clen] == '\0') {
    ea9a:	5d9a      	ldrb	r2, [r3, r6]
    ea9c:	2a00      	cmp	r2, #0
    ea9e:	d04a      	beq.n	eb36 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd6>
				for (clen = 0; clen < precision; clen++) {
    eaa0:	3601      	adds	r6, #1
    eaa2:	e52e      	b.n	e502 <z_prf+0x23a>
	if (alt_form) {
    eaa4:	ac1b      	add	r4, sp, #108	; 0x6c
	return (buf - buf0) + _to_x(buf, value, 8);
    eaa6:	2208      	movs	r2, #8
    eaa8:	4620      	mov	r0, r4
    eaaa:	f00e ff23 	bl	1d8f4 <_to_x>
    eaae:	ae1b      	add	r6, sp, #108	; 0x6c
    eab0:	1ba6      	subs	r6, r4, r6
    eab2:	4406      	add	r6, r0
			prefix = 0;
    eab4:	2700      	movs	r7, #0
    eab6:	e50f      	b.n	e4d8 <z_prf+0x210>
		*buf++ = '0';
    eab8:	f10d 046d 	add.w	r4, sp, #109	; 0x6d
    eabc:	e7f3      	b.n	eaa6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x46>
				} else if (c == 'u') {
    eabe:	2c75      	cmp	r4, #117	; 0x75
    eac0:	d105      	bne.n	eace <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6e>
	return _to_x(buf, value, 10);
    eac2:	220a      	movs	r2, #10
    eac4:	a81b      	add	r0, sp, #108	; 0x6c
    eac6:	f00e ff15 	bl	1d8f4 <_to_x>
    eaca:	4606      	mov	r6, r0
    eacc:	e7f2      	b.n	eab4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x54>
	if (alt_form) {
    eace:	f1bb 0f00 	cmp.w	fp, #0
    ead2:	d012      	beq.n	eafa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9a>
		*buf++ = '0';
    ead4:	f647 0330 	movw	r3, #30768	; 0x7830
		*buf++ = 'x';
    ead8:	f10d 086e 	add.w	r8, sp, #110	; 0x6e
		*buf++ = '0';
    eadc:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
	len = _to_x(buf, value, 16);
    eae0:	2210      	movs	r2, #16
    eae2:	4640      	mov	r0, r8
    eae4:	f00e ff06 	bl	1d8f4 <_to_x>
	if (prefix == 'X') {
    eae8:	2c58      	cmp	r4, #88	; 0x58
    eaea:	d009      	beq.n	eb00 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa0>
	return len + (buf - buf0);
    eaec:	ae1b      	add	r6, sp, #108	; 0x6c
    eaee:	eba8 0606 	sub.w	r6, r8, r6
    eaf2:	4406      	add	r6, r0
						prefix = 2;
    eaf4:	ea4f 074b 	mov.w	r7, fp, lsl #1
    eaf8:	e4ee      	b.n	e4d8 <z_prf+0x210>
	if (alt_form) {
    eafa:	f10d 086c 	add.w	r8, sp, #108	; 0x6c
    eafe:	e7ef      	b.n	eae0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x80>
    eb00:	aa1b      	add	r2, sp, #108	; 0x6c
		if (*buf >= 'a' && *buf <= 'z') {
    eb02:	f812 3b01 	ldrb.w	r3, [r2], #1
    eb06:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    eb0a:	2919      	cmp	r1, #25
    eb0c:	d803      	bhi.n	eb16 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb6>
			*buf += 'A' - 'a';
    eb0e:	3b20      	subs	r3, #32
    eb10:	f802 3c01 	strb.w	r3, [r2, #-1]
    eb14:	e7f5      	b.n	eb02 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa2>
	} while (*buf++);
    eb16:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    eb1a:	2b00      	cmp	r3, #0
    eb1c:	d1f1      	bne.n	eb02 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa2>
    eb1e:	e7e5      	b.n	eaec <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8c>
				PUTC('%');
    eb20:	9903      	ldr	r1, [sp, #12]
    eb22:	4620      	mov	r0, r4
    eb24:	f7ff bbe1 	b.w	e2ea <z_prf+0x22>
				count++;
    eb28:	9b01      	ldr	r3, [sp, #4]
    eb2a:	3301      	adds	r3, #1
				count += 2;
    eb2c:	9301      	str	r3, [sp, #4]
				continue;
    eb2e:	46b1      	mov	r9, r6
    eb30:	e79e      	b.n	ea70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10>
					prefix = 1;
    eb32:	2701      	movs	r7, #1
    eb34:	e4d0      	b.n	e4d8 <z_prf+0x210>
    eb36:	4615      	mov	r5, r2
    eb38:	e4e8      	b.n	e50c <z_prf+0x244>
			cptr = buf;
    eb3a:	ab1b      	add	r3, sp, #108	; 0x6c
				zero_head = 0;
    eb3c:	2200      	movs	r2, #0
    eb3e:	e4f7      	b.n	e530 <z_prf+0x268>
    eb40:	ab1b      	add	r3, sp, #108	; 0x6c
    eb42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    eb44:	e4f4      	b.n	e530 <z_prf+0x268>
    eb46:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
					PUTC(' ');
    eb4a:	9903      	ldr	r1, [sp, #12]
    eb4c:	9b02      	ldr	r3, [sp, #8]
    eb4e:	2020      	movs	r0, #32
    eb50:	4798      	blx	r3
    eb52:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
    eb56:	3001      	adds	r0, #1
    eb58:	f43f abcc 	beq.w	e2f4 <z_prf+0x2c>
				while (width-- > 0) {
    eb5c:	f11a 3aff 	adds.w	sl, sl, #4294967295	; 0xffffffff
    eb60:	d2f1      	bcs.n	eb46 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe6>
				count += width;
    eb62:	9901      	ldr	r1, [sp, #4]
    eb64:	4421      	add	r1, r4
    eb66:	9101      	str	r1, [sp, #4]
				while (width-- > 0) {
    eb68:	4654      	mov	r4, sl
    eb6a:	e4eb      	b.n	e544 <z_prf+0x27c>
    eb6c:	46a2      	mov	sl, r4
    eb6e:	e7f5      	b.n	eb5c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfc>
    eb70:	33333332 	.word	0x33333332
				PUTC(*cptr++);
    eb74:	f813 0b01 	ldrb.w	r0, [r3], #1
    eb78:	9903      	ldr	r1, [sp, #12]
    eb7a:	9309      	str	r3, [sp, #36]	; 0x24
    eb7c:	9b02      	ldr	r3, [sp, #8]
    eb7e:	920a      	str	r2, [sp, #40]	; 0x28
    eb80:	4798      	blx	r3
    eb82:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
    eb86:	3001      	adds	r0, #1
    eb88:	f47f acde 	bne.w	e548 <z_prf+0x280>
    eb8c:	f7ff bbb2 	b.w	e2f4 <z_prf+0x2c>
				PUTC('0');
    eb90:	9903      	ldr	r1, [sp, #12]
    eb92:	2030      	movs	r0, #48	; 0x30
    eb94:	9b02      	ldr	r3, [sp, #8]
    eb96:	9209      	str	r2, [sp, #36]	; 0x24
    eb98:	4798      	blx	r3
    eb9a:	3001      	adds	r0, #1
    eb9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    eb9e:	f47f acd6 	bne.w	e54e <z_prf+0x286>
    eba2:	f7ff bba7 	b.w	e2f4 <z_prf+0x2c>
					PUTC(c);
    eba6:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
    ebaa:	4798      	blx	r3
    ebac:	3001      	adds	r0, #1
    ebae:	f43f aba1 	beq.w	e2f4 <z_prf+0x2c>
					c = *++cptr;
    ebb2:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
    ebb6:	e4d6      	b.n	e566 <z_prf+0x29e>
					PUTC('0');
    ebb8:	9903      	ldr	r1, [sp, #12]
    ebba:	2030      	movs	r0, #48	; 0x30
    ebbc:	9b02      	ldr	r3, [sp, #8]
    ebbe:	4798      	blx	r3
    ebc0:	3001      	adds	r0, #1
    ebc2:	f47f acd8 	bne.w	e576 <z_prf+0x2ae>
    ebc6:	f7ff bb95 	b.w	e2f4 <z_prf+0x2c>
					PUTC('0');
    ebca:	9903      	ldr	r1, [sp, #12]
    ebcc:	2030      	movs	r0, #48	; 0x30
    ebce:	9b02      	ldr	r3, [sp, #8]
    ebd0:	4798      	blx	r3
    ebd2:	3001      	adds	r0, #1
    ebd4:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    ebd8:	f47f ace7 	bne.w	e5aa <z_prf+0x2e2>
    ebdc:	f7ff bb8a 	b.w	e2f4 <z_prf+0x2c>
					PUTC(c);
    ebe0:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
    ebe4:	4798      	blx	r3
    ebe6:	3001      	adds	r0, #1
    ebe8:	f43f ab84 	beq.w	e2f4 <z_prf+0x2c>
					c = *++cptr;
    ebec:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
    ebf0:	e4e5      	b.n	e5be <z_prf+0x2f6>
					PUTC('0');
    ebf2:	9903      	ldr	r1, [sp, #12]
    ebf4:	2030      	movs	r0, #48	; 0x30
    ebf6:	9b02      	ldr	r3, [sp, #8]
    ebf8:	4798      	blx	r3
    ebfa:	3001      	adds	r0, #1
    ebfc:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    ec00:	f47f ace8 	bne.w	e5d4 <z_prf+0x30c>
    ec04:	f7ff bb76 	b.w	e2f4 <z_prf+0x2c>
				PUTC(*cptr++);
    ec08:	9903      	ldr	r1, [sp, #12]
    ec0a:	f81a 0b01 	ldrb.w	r0, [sl], #1
    ec0e:	9b02      	ldr	r3, [sp, #8]
    ec10:	4798      	blx	r3
    ec12:	3001      	adds	r0, #1
    ec14:	f43f ab6e 	beq.w	e2f4 <z_prf+0x2c>
    ec18:	eba6 030a 	sub.w	r3, r6, sl
			while (clen-- > 0) {
    ec1c:	2b00      	cmp	r3, #0
    ec1e:	dcf3      	bgt.n	ec08 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1a8>
			count += clen;
    ec20:	9b01      	ldr	r3, [sp, #4]
    ec22:	9a06      	ldr	r2, [sp, #24]
			if (width > 0) {
    ec24:	2c00      	cmp	r4, #0
			count += clen;
    ec26:	4413      	add	r3, r2
    ec28:	9301      	str	r3, [sp, #4]
			if (width > 0) {
    ec2a:	f77f af21 	ble.w	ea70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10>
    ec2e:	4625      	mov	r5, r4
    ec30:	e006      	b.n	ec40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1e0>
					PUTC(' ');
    ec32:	9903      	ldr	r1, [sp, #12]
    ec34:	2020      	movs	r0, #32
    ec36:	9b02      	ldr	r3, [sp, #8]
    ec38:	4798      	blx	r3
    ec3a:	3001      	adds	r0, #1
    ec3c:	f43f ab5a 	beq.w	e2f4 <z_prf+0x2c>
				while (width-- > 0) {
    ec40:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
    ec44:	d2f5      	bcs.n	ec32 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1d2>
				count += width;
    ec46:	9b01      	ldr	r3, [sp, #4]
    ec48:	4423      	add	r3, r4
    ec4a:	9301      	str	r3, [sp, #4]
    ec4c:	e710      	b.n	ea70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10>
    ec4e:	bf00      	nop

0000ec50 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
    ec50:	b40c      	push	{r2, r3}
    ec52:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    ec54:	b909      	cbnz	r1, ec5a <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
    ec56:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
    ec5a:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
    ec5e:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    ec60:	9a06      	ldr	r2, [sp, #24]
    ec62:	a902      	add	r1, sp, #8
    ec64:	4805      	ldr	r0, [pc, #20]	; (ec7c <snprintf+0x2c>)
	va_start(vargs, format);
    ec66:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    ec68:	f7ff fb2e 	bl	e2c8 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    ec6c:	2200      	movs	r2, #0
    ec6e:	9b02      	ldr	r3, [sp, #8]
    ec70:	701a      	strb	r2, [r3, #0]
	return r;
}
    ec72:	b005      	add	sp, #20
    ec74:	f85d eb04 	ldr.w	lr, [sp], #4
    ec78:	b002      	add	sp, #8
    ec7a:	4770      	bx	lr
    ec7c:	0001d9df 	.word	0x0001d9df

0000ec80 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
    ec80:	2124      	movs	r1, #36	; 0x24
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    ec82:	7983      	ldrb	r3, [r0, #6]
	return buf - pool->__bufs;
    ec84:	4a04      	ldr	r2, [pc, #16]	; (ec98 <net_buf_id+0x18>)
    ec86:	fb01 2303 	mla	r3, r1, r3, r2
    ec8a:	6a1b      	ldr	r3, [r3, #32]
    ec8c:	1ac0      	subs	r0, r0, r3
}
    ec8e:	4b03      	ldr	r3, [pc, #12]	; (ec9c <net_buf_id+0x1c>)
	return buf - pool->__bufs;
    ec90:	10c0      	asrs	r0, r0, #3
}
    ec92:	4358      	muls	r0, r3
    ec94:	4770      	bx	lr
    ec96:	bf00      	nop
    ec98:	2002c670 	.word	0x2002c670
    ec9c:	aaaaaaab 	.word	0xaaaaaaab

0000eca0 <fixed_data_alloc>:
	.ref   = generic_data_ref,
	.unref = mem_pool_data_unref,
};

static u8_t *fixed_data_alloc(struct net_buf *buf, size_t *size, s32_t timeout)
{
    eca0:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    eca2:	2424      	movs	r4, #36	; 0x24
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    eca4:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    eca6:	4a09      	ldr	r2, [pc, #36]	; (eccc <fixed_data_alloc+0x2c>)
    eca8:	fb04 2303 	mla	r3, r4, r3, r2
    ecac:	69db      	ldr	r3, [r3, #28]

	*size = MIN(fixed->data_size, *size);
    ecae:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    ecb0:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
    ecb2:	6823      	ldr	r3, [r4, #0]
    ecb4:	429a      	cmp	r2, r3
    ecb6:	bf94      	ite	ls
    ecb8:	600a      	strls	r2, [r1, #0]
    ecba:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    ecbc:	f7ff ffe0 	bl	ec80 <net_buf_id>
    ecc0:	e9d4 2300 	ldrd	r2, r3, [r4]
}
    ecc4:	fb02 3000 	mla	r0, r2, r0, r3
    ecc8:	bd10      	pop	{r4, pc}
    ecca:	bf00      	nop
    eccc:	2002c670 	.word	0x2002c670

0000ecd0 <net_if_flag_is_set>:
 *
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
    ecd0:	b538      	push	{r3, r4, r5, lr}
    ecd2:	460d      	mov	r5, r1
	NET_ASSERT(iface);
    ecd4:	4604      	mov	r4, r0
    ecd6:	b970      	cbnz	r0, ecf6 <net_if_flag_is_set+0x26>
    ecd8:	490b      	ldr	r1, [pc, #44]	; (ed08 <net_if_flag_is_set+0x38>)
    ecda:	f240 2311 	movw	r3, #529	; 0x211
    ecde:	4a0b      	ldr	r2, [pc, #44]	; (ed0c <net_if_flag_is_set+0x3c>)
    ece0:	480b      	ldr	r0, [pc, #44]	; (ed10 <net_if_flag_is_set+0x40>)
    ece2:	f00e f869 	bl	1cdb8 <printk>
    ece6:	480b      	ldr	r0, [pc, #44]	; (ed14 <net_if_flag_is_set+0x44>)
    ece8:	f00e f866 	bl	1cdb8 <printk>
    ecec:	f240 2111 	movw	r1, #529	; 0x211
    ecf0:	4806      	ldr	r0, [pc, #24]	; (ed0c <net_if_flag_is_set+0x3c>)
    ecf2:	f00e f893 	bl	1ce1c <assert_post_action>
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ecf6:	6823      	ldr	r3, [r4, #0]
    ecf8:	330c      	adds	r3, #12
    ecfa:	e8d3 0faf 	lda	r0, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    ecfe:	4128      	asrs	r0, r5

	return atomic_test_bit(iface->if_dev->flags, value);
}
    ed00:	f000 0001 	and.w	r0, r0, #1
    ed04:	bd38      	pop	{r3, r4, r5, pc}
    ed06:	bf00      	nop
    ed08:	0001fdc6 	.word	0x0001fdc6
    ed0c:	0001fda5 	.word	0x0001fda5
    ed10:	0001f722 	.word	0x0001f722
    ed14:	0001fdcc 	.word	0x0001fdcc

0000ed18 <net_if_flag_set.constprop.21>:
static inline void net_if_flag_set(struct net_if *iface,
    ed18:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
    ed1a:	4604      	mov	r4, r0
    ed1c:	b970      	cbnz	r0, ed3c <net_if_flag_set.constprop.21+0x24>
    ed1e:	490d      	ldr	r1, [pc, #52]	; (ed54 <net_if_flag_set.constprop.21+0x3c>)
    ed20:	f240 13e3 	movw	r3, #483	; 0x1e3
    ed24:	4a0c      	ldr	r2, [pc, #48]	; (ed58 <net_if_flag_set.constprop.21+0x40>)
    ed26:	480d      	ldr	r0, [pc, #52]	; (ed5c <net_if_flag_set.constprop.21+0x44>)
    ed28:	f00e f846 	bl	1cdb8 <printk>
    ed2c:	480c      	ldr	r0, [pc, #48]	; (ed60 <net_if_flag_set.constprop.21+0x48>)
    ed2e:	f00e f843 	bl	1cdb8 <printk>
    ed32:	f240 11e3 	movw	r1, #483	; 0x1e3
    ed36:	4808      	ldr	r0, [pc, #32]	; (ed58 <net_if_flag_set.constprop.21+0x40>)
    ed38:	f00e f870 	bl	1ce1c <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ed3c:	6823      	ldr	r3, [r4, #0]
    ed3e:	330c      	adds	r3, #12
    ed40:	e8d3 2fef 	ldaex	r2, [r3]
    ed44:	f042 0201 	orr.w	r2, r2, #1
    ed48:	e8c3 2fe1 	stlex	r1, r2, [r3]
    ed4c:	2900      	cmp	r1, #0
    ed4e:	d1f7      	bne.n	ed40 <net_if_flag_set.constprop.21+0x28>
}
    ed50:	bd10      	pop	{r4, pc}
    ed52:	bf00      	nop
    ed54:	0001fdc6 	.word	0x0001fdc6
    ed58:	0001fda5 	.word	0x0001fda5
    ed5c:	0001f722 	.word	0x0001f722
    ed60:	0001fdcc 	.word	0x0001fdcc

0000ed64 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
    ed64:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
    ed66:	2100      	movs	r1, #0
{
    ed68:	4605      	mov	r5, r0
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
    ed6a:	f7ff ffb1 	bl	ecd0 <net_if_flag_is_set>
    ed6e:	b928      	cbnz	r0, ed7c <net_if_up+0x18>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
    ed70:	682b      	ldr	r3, [r5, #0]

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
    ed72:	4628      	mov	r0, r5
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
    ed74:	7e9b      	ldrb	r3, [r3, #26]
    ed76:	b11b      	cbz	r3, ed80 <net_if_up+0x1c>
		net_if_flag_set(iface, NET_IF_UP);
    ed78:	f7ff ffce 	bl	ed18 <net_if_flag_set.constprop.21>
		return 0;
    ed7c:	2000      	movs	r0, #0
    ed7e:	e023      	b.n	edc8 <net_if_up+0x64>
		goto exit;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
    ed80:	f00e fe4a 	bl	1da18 <net_if_l2>
    ed84:	b9c0      	cbnz	r0, edb8 <net_if_up+0x54>

done:
	/* In many places it's assumed that link address was set with
	 * net_if_set_link_addr(). Better check that now.
	 */
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
    ed86:	682b      	ldr	r3, [r5, #0]
    ed88:	691b      	ldr	r3, [r3, #16]
    ed8a:	b973      	cbnz	r3, edaa <net_if_up+0x46>
    ed8c:	490f      	ldr	r1, [pc, #60]	; (edcc <net_if_up+0x68>)
    ed8e:	f640 538f 	movw	r3, #3471	; 0xd8f
    ed92:	4a0f      	ldr	r2, [pc, #60]	; (edd0 <net_if_up+0x6c>)
    ed94:	480f      	ldr	r0, [pc, #60]	; (edd4 <net_if_up+0x70>)
    ed96:	f00e f80f 	bl	1cdb8 <printk>
    ed9a:	480f      	ldr	r0, [pc, #60]	; (edd8 <net_if_up+0x74>)
    ed9c:	f00e f80c 	bl	1cdb8 <printk>
    eda0:	f640 518f 	movw	r1, #3471	; 0xd8f
    eda4:	480a      	ldr	r0, [pc, #40]	; (edd0 <net_if_up+0x6c>)
    eda6:	f00e f839 	bl	1ce1c <assert_post_action>

	net_if_flag_set(iface, NET_IF_UP);
    edaa:	4628      	mov	r0, r5
    edac:	f7ff ffb4 	bl	ed18 <net_if_flag_set.constprop.21>

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
    edb0:	4628      	mov	r0, r5
    edb2:	f00e fe36 	bl	1da22 <l2_flags_get>
    edb6:	e7e1      	b.n	ed7c <net_if_up+0x18>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
    edb8:	6883      	ldr	r3, [r0, #8]
    edba:	2b00      	cmp	r3, #0
    edbc:	d0e3      	beq.n	ed86 <net_if_up+0x22>
	status = net_if_l2(iface)->enable(iface, true);
    edbe:	2101      	movs	r1, #1
    edc0:	4628      	mov	r0, r5
    edc2:	4798      	blx	r3
	if (status < 0) {
    edc4:	2800      	cmp	r0, #0
    edc6:	dade      	bge.n	ed86 <net_if_up+0x22>

exit:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
    edc8:	bd38      	pop	{r3, r4, r5, pc}
    edca:	bf00      	nop
    edcc:	0001fdcf 	.word	0x0001fdcf
    edd0:	0001fe00 	.word	0x0001fe00
    edd4:	0001f722 	.word	0x0001f722
    edd8:	0001fdcc 	.word	0x0001fdcc

0000eddc <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
    eddc:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;
	int if_count;

	NET_DBG("");

	net_tc_tx_init();
    edde:	f000 f82f 	bl	ee40 <net_tc_tx_init>

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
    ede2:	4c07      	ldr	r4, [pc, #28]	; (ee00 <net_if_init+0x24>)
    ede4:	4d07      	ldr	r5, [pc, #28]	; (ee04 <net_if_init+0x28>)
    ede6:	42ac      	cmp	r4, r5
    ede8:	d100      	bne.n	edec <net_if_init+0x10>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
    edea:	bd38      	pop	{r3, r4, r5, pc}
	return iface->if_dev->dev;
    edec:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
    edee:	681b      	ldr	r3, [r3, #0]
    edf0:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
    edf2:	b11b      	cbz	r3, edfc <net_if_init+0x20>
    edf4:	681b      	ldr	r3, [r3, #0]
    edf6:	b10b      	cbz	r3, edfc <net_if_init+0x20>
	api->init(iface);
    edf8:	4620      	mov	r0, r4
    edfa:	4798      	blx	r3
	     iface++, if_count++) {
    edfc:	3420      	adds	r4, #32
    edfe:	e7f2      	b.n	ede6 <net_if_init+0xa>
    ee00:	2002c6c0 	.word	0x2002c6c0
    ee04:	2002c6e0 	.word	0x2002c6e0

0000ee08 <net_if_post_init>:

void net_if_post_init(void)
{
    ee08:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
    ee0a:	4c07      	ldr	r4, [pc, #28]	; (ee28 <net_if_post_init+0x20>)
    ee0c:	4d07      	ldr	r5, [pc, #28]	; (ee2c <net_if_post_init+0x24>)
    ee0e:	42ac      	cmp	r4, r5
    ee10:	d100      	bne.n	ee14 <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
    ee12:	bd38      	pop	{r3, r4, r5, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
    ee14:	2103      	movs	r1, #3
    ee16:	4620      	mov	r0, r4
    ee18:	f7ff ff5a 	bl	ecd0 <net_if_flag_is_set>
    ee1c:	b910      	cbnz	r0, ee24 <net_if_post_init+0x1c>
			net_if_up(iface);
    ee1e:	4620      	mov	r0, r4
    ee20:	f7ff ffa0 	bl	ed64 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
    ee24:	3420      	adds	r4, #32
    ee26:	e7f2      	b.n	ee0e <net_if_post_init+0x6>
    ee28:	2002c6c0 	.word	0x2002c6c0
    ee2c:	2002c6e0 	.word	0x2002c6e0

0000ee30 <net_context_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
    ee30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ee34:	2101      	movs	r1, #1
    ee36:	4801      	ldr	r0, [pc, #4]	; (ee3c <net_context_init+0xc>)
    ee38:	f00f bd31 	b.w	1e89e <z_impl_k_sem_init>
    ee3c:	200201bc 	.word	0x200201bc

0000ee40 <net_tc_tx_init>:

	for (i = 0; i < NET_TC_TX_COUNT; i++) {
		u8_t thread_priority;

		thread_priority = tx_tc2thread(i);
		tx_classes[i].tc = thread_priority;
    ee40:	2307      	movs	r3, #7
{
    ee42:	b510      	push	{r4, lr}
		tx_classes[i].tc = thread_priority;
    ee44:	4c08      	ldr	r4, [pc, #32]	; (ee68 <net_tc_tx_init+0x28>)
			"prio %d (%d)", i,
			&tx_classes[i].work_q.queue, TX_STACK(i),
			K_THREAD_STACK_SIZEOF(tx_stack[i]),
			thread_priority, K_PRIO_COOP(thread_priority));

		k_work_q_start(&tx_classes[i].work_q,
    ee46:	f44f 6280 	mov.w	r2, #1024	; 0x400
		tx_classes[i].tc = thread_priority;
    ee4a:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
		k_work_q_start(&tx_classes[i].work_q,
    ee4e:	4907      	ldr	r1, [pc, #28]	; (ee6c <net_tc_tx_init+0x2c>)
    ee50:	f06f 0308 	mvn.w	r3, #8
    ee54:	4620      	mov	r0, r4
    ee56:	f00c fcc5 	bl	1b7e4 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
    ee5a:	4905      	ldr	r1, [pc, #20]	; (ee70 <net_tc_tx_init+0x30>)
    ee5c:	f104 0014 	add.w	r0, r4, #20
			       tx_stack[i],
			       K_THREAD_STACK_SIZEOF(tx_stack[i]),
			       K_PRIO_COOP(thread_priority));
		k_thread_name_set(&tx_classes[i].work_q.thread, "tx_workq");
	}
}
    ee60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee64:	f00f bd31 	b.w	1e8ca <z_impl_k_thread_name_set>
    ee68:	200202a0 	.word	0x200202a0
    ee6c:	20025c88 	.word	0x20025c88
    ee70:	0001fe2c 	.word	0x0001fe2c

0000ee74 <net_tc_rx_init>:

	for (i = 0; i < NET_TC_RX_COUNT; i++) {
		u8_t thread_priority;

		thread_priority = rx_tc2thread(i);
		rx_classes[i].tc = thread_priority;
    ee74:	2307      	movs	r3, #7
{
    ee76:	b510      	push	{r4, lr}
		rx_classes[i].tc = thread_priority;
    ee78:	4c08      	ldr	r4, [pc, #32]	; (ee9c <net_tc_rx_init+0x28>)
			"prio %d (%d)", i,
			&rx_classes[i].work_q.queue, RX_STACK(i),
			K_THREAD_STACK_SIZEOF(rx_stack[i]),
			thread_priority, K_PRIO_COOP(thread_priority));

		k_work_q_start(&rx_classes[i].work_q,
    ee7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
		rx_classes[i].tc = thread_priority;
    ee7e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
		k_work_q_start(&rx_classes[i].work_q,
    ee82:	4907      	ldr	r1, [pc, #28]	; (eea0 <net_tc_rx_init+0x2c>)
    ee84:	f06f 0308 	mvn.w	r3, #8
    ee88:	4620      	mov	r0, r4
    ee8a:	f00c fcab 	bl	1b7e4 <k_work_q_start>
    ee8e:	4905      	ldr	r1, [pc, #20]	; (eea4 <net_tc_rx_init+0x30>)
    ee90:	f104 0014 	add.w	r0, r4, #20
			       rx_stack[i],
			       K_THREAD_STACK_SIZEOF(rx_stack[i]),
			       K_PRIO_COOP(thread_priority));
		k_thread_name_set(&rx_classes[i].work_q.thread, "rx_workq");
	}
}
    ee94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee98:	f00f bd17 	b.w	1e8ca <z_impl_k_thread_name_set>
    ee9c:	200201d4 	.word	0x200201d4
    eea0:	20026088 	.word	0x20026088
    eea4:	0001fe23 	.word	0x0001fe23

0000eea8 <z_impl_entropy_get_entropy>:
				  u16_t length);

static inline int z_impl_entropy_get_entropy(struct device *dev,
					    u8_t *buffer,
					    u16_t length)
{
    eea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct entropy_driver_api *api =
    eeac:	6845      	ldr	r5, [r0, #4]
{
    eeae:	4604      	mov	r4, r0
		(const struct entropy_driver_api *)dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
    eeb0:	682b      	ldr	r3, [r5, #0]
{
    eeb2:	460e      	mov	r6, r1
    eeb4:	4617      	mov	r7, r2
	__ASSERT(api->get_entropy != NULL,
    eeb6:	b963      	cbnz	r3, eed2 <z_impl_entropy_get_entropy+0x2a>
    eeb8:	4909      	ldr	r1, [pc, #36]	; (eee0 <z_impl_entropy_get_entropy+0x38>)
    eeba:	234c      	movs	r3, #76	; 0x4c
    eebc:	4a09      	ldr	r2, [pc, #36]	; (eee4 <z_impl_entropy_get_entropy+0x3c>)
    eebe:	480a      	ldr	r0, [pc, #40]	; (eee8 <z_impl_entropy_get_entropy+0x40>)
    eec0:	f00d ff7a 	bl	1cdb8 <printk>
    eec4:	4809      	ldr	r0, [pc, #36]	; (eeec <z_impl_entropy_get_entropy+0x44>)
    eec6:	f00d ff77 	bl	1cdb8 <printk>
    eeca:	214c      	movs	r1, #76	; 0x4c
    eecc:	4805      	ldr	r0, [pc, #20]	; (eee4 <z_impl_entropy_get_entropy+0x3c>)
    eece:	f00d ffa5 	bl	1ce1c <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    eed2:	682b      	ldr	r3, [r5, #0]
    eed4:	463a      	mov	r2, r7
    eed6:	4631      	mov	r1, r6
    eed8:	4620      	mov	r0, r4
}
    eeda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->get_entropy(dev, buffer, length);
    eede:	4718      	bx	r3
    eee0:	0001ff04 	.word	0x0001ff04
    eee4:	0001fede 	.word	0x0001fede
    eee8:	0001f722 	.word	0x0001f722
    eeec:	0001ff24 	.word	0x0001ff24

0000eef0 <sys_rand32_get>:

static struct device *entropy_driver;

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
u32_t sys_rand32_get(void)
{
    eef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *dev = entropy_driver;
    eef2:	4d12      	ldr	r5, [pc, #72]	; (ef3c <sys_rand32_get+0x4c>)
    eef4:	682c      	ldr	r4, [r5, #0]
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    eef6:	b99c      	cbnz	r4, ef20 <sys_rand32_get+0x30>
    eef8:	4811      	ldr	r0, [pc, #68]	; (ef40 <sys_rand32_get+0x50>)
    eefa:	f00a f8d5 	bl	190a8 <z_impl_device_get_binding>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
		__ASSERT((dev != NULL),
    eefe:	4604      	mov	r4, r0
    ef00:	b968      	cbnz	r0, ef1e <sys_rand32_get+0x2e>
    ef02:	231d      	movs	r3, #29
    ef04:	4a0f      	ldr	r2, [pc, #60]	; (ef44 <sys_rand32_get+0x54>)
    ef06:	4910      	ldr	r1, [pc, #64]	; (ef48 <sys_rand32_get+0x58>)
    ef08:	4810      	ldr	r0, [pc, #64]	; (ef4c <sys_rand32_get+0x5c>)
    ef0a:	f00d ff55 	bl	1cdb8 <printk>
    ef0e:	490c      	ldr	r1, [pc, #48]	; (ef40 <sys_rand32_get+0x50>)
    ef10:	480f      	ldr	r0, [pc, #60]	; (ef50 <sys_rand32_get+0x60>)
    ef12:	f00d ff51 	bl	1cdb8 <printk>
    ef16:	211d      	movs	r1, #29
    ef18:	480a      	ldr	r0, [pc, #40]	; (ef44 <sys_rand32_get+0x54>)
    ef1a:	f00d ff7f 	bl	1ce1c <assert_post_action>
			"Device driver for %s (CONFIG_ENTROPY_NAME) not found. "
			"Check your build configuration!",
			CONFIG_ENTROPY_NAME);
		entropy_driver = dev;
    ef1e:	602c      	str	r4, [r5, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_ENTROPY_GET_ENTROPY);
	}
#endif
	compiler_barrier();
	return z_impl_entropy_get_entropy(dev, buffer, length);
    ef20:	2204      	movs	r2, #4
    ef22:	4620      	mov	r0, r4
    ef24:	eb0d 0102 	add.w	r1, sp, r2
    ef28:	f7ff ffbe 	bl	eea8 <z_impl_entropy_get_entropy>
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    ef2c:	2800      	cmp	r0, #0
    ef2e:	da02      	bge.n	ef36 <sys_rand32_get+0x46>
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
    ef30:	f7fe fc1c 	bl	d76c <z_timer_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    ef34:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    ef36:	9801      	ldr	r0, [sp, #4]
    ef38:	b003      	add	sp, #12
    ef3a:	bd30      	pop	{r4, r5, pc}
    ef3c:	2002036c 	.word	0x2002036c
    ef40:	0001fe35 	.word	0x0001fe35
    ef44:	0001fe3f 	.word	0x0001fe3f
    ef48:	0001fe71 	.word	0x0001fe71
    ef4c:	0001f722 	.word	0x0001f722
    ef50:	0001fe86 	.word	0x0001fe86

0000ef54 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    ef54:	b570      	push	{r4, r5, r6, lr}
    ef56:	4616      	mov	r6, r2
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    ef58:	6884      	ldr	r4, [r0, #8]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    ef5a:	460d      	mov	r5, r1
    ef5c:	b961      	cbnz	r1, ef78 <gpio_nrfx_manage_callback+0x24>
    ef5e:	4922      	ldr	r1, [pc, #136]	; (efe8 <gpio_nrfx_manage_callback+0x94>)
    ef60:	231c      	movs	r3, #28
    ef62:	4a22      	ldr	r2, [pc, #136]	; (efec <gpio_nrfx_manage_callback+0x98>)
    ef64:	4822      	ldr	r0, [pc, #136]	; (eff0 <gpio_nrfx_manage_callback+0x9c>)
    ef66:	f00d ff27 	bl	1cdb8 <printk>
    ef6a:	4822      	ldr	r0, [pc, #136]	; (eff4 <gpio_nrfx_manage_callback+0xa0>)
    ef6c:	f00d ff24 	bl	1cdb8 <printk>
    ef70:	211c      	movs	r1, #28
    ef72:	481e      	ldr	r0, [pc, #120]	; (efec <gpio_nrfx_manage_callback+0x98>)
    ef74:	f00d ff52 	bl	1ce1c <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    ef78:	686b      	ldr	r3, [r5, #4]
    ef7a:	b963      	cbnz	r3, ef96 <gpio_nrfx_manage_callback+0x42>
    ef7c:	491e      	ldr	r1, [pc, #120]	; (eff8 <gpio_nrfx_manage_callback+0xa4>)
    ef7e:	231d      	movs	r3, #29
    ef80:	4a1a      	ldr	r2, [pc, #104]	; (efec <gpio_nrfx_manage_callback+0x98>)
    ef82:	481b      	ldr	r0, [pc, #108]	; (eff0 <gpio_nrfx_manage_callback+0x9c>)
    ef84:	f00d ff18 	bl	1cdb8 <printk>
    ef88:	481c      	ldr	r0, [pc, #112]	; (effc <gpio_nrfx_manage_callback+0xa8>)
    ef8a:	f00d ff15 	bl	1cdb8 <printk>
    ef8e:	211d      	movs	r1, #29
    ef90:	4816      	ldr	r0, [pc, #88]	; (efec <gpio_nrfx_manage_callback+0x98>)
    ef92:	f00d ff43 	bl	1ce1c <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    ef96:	6823      	ldr	r3, [r4, #0]

	if (!sys_slist_is_empty(callbacks)) {
    ef98:	b15b      	cbz	r3, efb2 <gpio_nrfx_manage_callback+0x5e>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ef9a:	2200      	movs	r2, #0
    ef9c:	429d      	cmp	r5, r3
    ef9e:	d113      	bne.n	efc8 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
    efa0:	682b      	ldr	r3, [r5, #0]
    efa2:	b95a      	cbnz	r2, efbc <gpio_nrfx_manage_callback+0x68>
    efa4:	6862      	ldr	r2, [r4, #4]
	list->head = node;
    efa6:	6023      	str	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    efa8:	4295      	cmp	r5, r2
    efaa:	d100      	bne.n	efae <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    efac:	6063      	str	r3, [r4, #4]
	parent->next = child;
    efae:	2300      	movs	r3, #0
    efb0:	602b      	str	r3, [r5, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    efb2:	b976      	cbnz	r6, efd2 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    efb4:	2000      	movs	r0, #0
				     callback, set);
}
    efb6:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    efb8:	460b      	mov	r3, r1
    efba:	e7ef      	b.n	ef9c <gpio_nrfx_manage_callback+0x48>
	parent->next = child;
    efbc:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    efbe:	6863      	ldr	r3, [r4, #4]
    efc0:	429d      	cmp	r5, r3
	list->tail = node;
    efc2:	bf08      	it	eq
    efc4:	6062      	streq	r2, [r4, #4]
    efc6:	e7f2      	b.n	efae <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    efc8:	6819      	ldr	r1, [r3, #0]
	return node->next;
    efca:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    efcc:	2900      	cmp	r1, #0
    efce:	d1f3      	bne.n	efb8 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    efd0:	b13e      	cbz	r6, efe2 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
    efd2:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    efd4:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
    efd6:	6860      	ldr	r0, [r4, #4]
	list->head = node;
    efd8:	6025      	str	r5, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    efda:	2800      	cmp	r0, #0
    efdc:	d1ea      	bne.n	efb4 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    efde:	6065      	str	r5, [r4, #4]
    efe0:	e7e9      	b.n	efb6 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    efe2:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    efe6:	e7e6      	b.n	efb6 <gpio_nrfx_manage_callback+0x62>
    efe8:	0001ff70 	.word	0x0001ff70
    efec:	0001ff4a 	.word	0x0001ff4a
    eff0:	0001f722 	.word	0x0001f722
    eff4:	0001ff79 	.word	0x0001ff79
    eff8:	0001ff88 	.word	0x0001ff88
    effc:	0001ff9a 	.word	0x0001ff9a

0000f000 <nrf_gpio_pin_port_decode.isra.8.part.9>:
 *
 * @param[in,out] p_pin Pointer to the absolute pin number overriden by the pin number that is relative to the port.
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
    f000:	b510      	push	{r4, lr}
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    f002:	4c07      	ldr	r4, [pc, #28]	; (f020 <nrf_gpio_pin_port_decode.isra.8.part.9+0x20>)
    f004:	4907      	ldr	r1, [pc, #28]	; (f024 <nrf_gpio_pin_port_decode.isra.8.part.9+0x24>)
    f006:	4622      	mov	r2, r4
    f008:	4807      	ldr	r0, [pc, #28]	; (f028 <nrf_gpio_pin_port_decode.isra.8.part.9+0x28>)
    f00a:	f240 13ff 	movw	r3, #511	; 0x1ff
    f00e:	f00d fed3 	bl	1cdb8 <printk>
    f012:	4620      	mov	r0, r4
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
    f014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    f018:	f240 11ff 	movw	r1, #511	; 0x1ff
    f01c:	f00d befe 	b.w	1ce1c <assert_post_action>
    f020:	0001ffe2 	.word	0x0001ffe2
    f024:	00020023 	.word	0x00020023
    f028:	0001f722 	.word	0x0001f722

0000f02c <nrf_gpio_cfg_sense_set>:
    f02c:	281f      	cmp	r0, #31
}


NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    f02e:	b538      	push	{r3, r4, r5, lr}
    f030:	4604      	mov	r4, r0
    f032:	460d      	mov	r5, r1
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    f034:	d901      	bls.n	f03a <nrf_gpio_cfg_sense_set+0xe>
    f036:	f7ff ffe3 	bl	f000 <nrf_gpio_pin_port_decode.isra.8.part.9>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    f03a:	4806      	ldr	r0, [pc, #24]	; (f054 <nrf_gpio_cfg_sense_set+0x28>)
    f03c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    f040:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    f044:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    f048:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    f04c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
    f050:	bd38      	pop	{r3, r4, r5, pc}
    f052:	bf00      	nop
    f054:	40842500 	.word	0x40842500

0000f058 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
    f058:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    f05a:	4b09      	ldr	r3, [pc, #36]	; (f080 <gpio_nrfx_init+0x28>)
    f05c:	781a      	ldrb	r2, [r3, #0]
    f05e:	b96a      	cbnz	r2, f07c <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    f060:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    f062:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
    f064:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    f066:	2105      	movs	r1, #5
    f068:	f7fe fc7c 	bl	d964 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
    f06c:	2031      	movs	r0, #49	; 0x31
    f06e:	f7fe fc69 	bl	d944 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    f072:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    f076:	4b03      	ldr	r3, [pc, #12]	; (f084 <gpio_nrfx_init+0x2c>)
    f078:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    f07c:	2000      	movs	r0, #0
    f07e:	bd08      	pop	{r3, pc}
    f080:	20024f32 	.word	0x20024f32
    f084:	40031000 	.word	0x40031000

0000f088 <gpiote_pin_int_cfg>:
{
    f088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->config->config_info;
    f08c:	6803      	ldr	r3, [r0, #0]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f08e:	f001 041f 	and.w	r4, r1, #31
    f092:	689b      	ldr	r3, [r3, #8]
{
    f094:	460d      	mov	r5, r1
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f096:	791b      	ldrb	r3, [r3, #4]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    f098:	4e4b      	ldr	r6, [pc, #300]	; (f1c8 <gpiote_pin_int_cfg+0x140>)
    f09a:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    f09e:	2300      	movs	r3, #0
    f0a0:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
	struct gpio_nrfx_data *data = get_port_data(port);
    f0a4:	6887      	ldr	r7, [r0, #8]
    f0a6:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    f0a8:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    f0ac:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
    f0b0:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    f0b4:	428c      	cmp	r4, r1
    f0b6:	d16c      	bne.n	f192 <gpiote_pin_int_cfg+0x10a>
		    && (intenset & BIT(i))) {
    f0b8:	fa22 f103 	lsr.w	r1, r2, r3
    f0bc:	07c9      	lsls	r1, r1, #31
    f0be:	d568      	bpl.n	f192 <gpiote_pin_int_cfg+0x10a>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    f0c0:	009a      	lsls	r2, r3, #2
    f0c2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    f0c6:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
    f0ca:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    f0ce:	f021 0101 	bic.w	r1, r1, #1
    f0d2:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    f0d6:	2201      	movs	r2, #1
    f0d8:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENCLR = mask;
    f0dc:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    f0e0:	4620      	mov	r0, r4
    f0e2:	2100      	movs	r1, #0
    f0e4:	f7ff ffa2 	bl	f02c <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    f0e8:	68b8      	ldr	r0, [r7, #8]
    f0ea:	40e8      	lsrs	r0, r5
    f0ec:	f010 0001 	ands.w	r0, r0, #1
    f0f0:	d04d      	beq.n	f18e <gpiote_pin_int_cfg+0x106>
    f0f2:	68f8      	ldr	r0, [r7, #12]
    f0f4:	40e8      	lsrs	r0, r5
    f0f6:	f010 0001 	ands.w	r0, r0, #1
    f0fa:	d048      	beq.n	f18e <gpiote_pin_int_cfg+0x106>
		if (data->trig_edge & BIT(pin)) {
    f0fc:	6978      	ldr	r0, [r7, #20]
    f0fe:	40e8      	lsrs	r0, r5
    f100:	f010 0801 	ands.w	r8, r0, #1
    f104:	d051      	beq.n	f1aa <gpiote_pin_int_cfg+0x122>
			if (data->double_edge & BIT(pin)) {
    f106:	69bb      	ldr	r3, [r7, #24]
    f108:	40eb      	lsrs	r3, r5
    f10a:	07db      	lsls	r3, r3, #31
    f10c:	d445      	bmi.n	f19a <gpiote_pin_int_cfg+0x112>
			} else if (((data->active_level & BIT(pin)) != 0U)
    f10e:	693b      	ldr	r3, [r7, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    f110:	69fa      	ldr	r2, [r7, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
    f112:	40eb      	lsrs	r3, r5
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    f114:	fa22 f505 	lsr.w	r5, r2, r5
			} else if (((data->active_level & BIT(pin)) != 0U)
    f118:	f003 0301 	and.w	r3, r3, #1
    f11c:	f005 0501 	and.w	r5, r5, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    f120:	42ab      	cmp	r3, r5
    f122:	bf14      	ite	ne
    f124:	2501      	movne	r5, #1
    f126:	2502      	moveq	r5, #2
    f128:	2100      	movs	r1, #0
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    f12a:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    f12e:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
    f132:	f010 0003 	ands.w	r0, r0, #3
    f136:	d132      	bne.n	f19e <gpiote_pin_int_cfg+0x116>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    f138:	008b      	lsls	r3, r1, #2
    f13a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    f13e:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    f142:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f146:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    f148:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
    f14c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    f150:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f154:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    f158:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    f15c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    f160:	4315      	orrs	r5, r2
			nrf_gpiote_event_t evt =
    f162:	f101 0240 	add.w	r2, r1, #64	; 0x40
    f166:	0092      	lsls	r2, r2, #2
    return ((uint32_t)p_reg + event);
    f168:	b292      	uxth	r2, r2
    f16a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    f16e:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f172:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    f176:	6010      	str	r0, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    f178:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    f17c:	f042 0201 	orr.w	r2, r2, #1
    f180:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    f184:	2301      	movs	r3, #1
    f186:	fa03 f101 	lsl.w	r1, r3, r1
    p_reg->INTENSET = mask;
    f18a:	f8c6 1304 	str.w	r1, [r6, #772]	; 0x304
}
    f18e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    f192:	3301      	adds	r3, #1
    f194:	2b08      	cmp	r3, #8
    f196:	d187      	bne.n	f0a8 <gpiote_pin_int_cfg+0x20>
    f198:	e7a2      	b.n	f0e0 <gpiote_pin_int_cfg+0x58>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    f19a:	2503      	movs	r5, #3
    f19c:	e7c4      	b.n	f128 <gpiote_pin_int_cfg+0xa0>
    f19e:	3101      	adds	r1, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    f1a0:	2908      	cmp	r1, #8
    f1a2:	d1c2      	bne.n	f12a <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
    f1a4:	f06f 0012 	mvn.w	r0, #18
    f1a8:	e7f1      	b.n	f18e <gpiote_pin_int_cfg+0x106>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    f1aa:	693b      	ldr	r3, [r7, #16]
    f1ac:	69fa      	ldr	r2, [r7, #28]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    f1ae:	4620      	mov	r0, r4
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    f1b0:	4053      	eors	r3, r2
    f1b2:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
    f1b6:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    f1ba:	bf0c      	ite	eq
    f1bc:	2103      	moveq	r1, #3
    f1be:	2102      	movne	r1, #2
    f1c0:	f7ff ff34 	bl	f02c <nrf_gpio_cfg_sense_set>
	int res = 0;
    f1c4:	4640      	mov	r0, r8
    f1c6:	e7e2      	b.n	f18e <gpiote_pin_int_cfg+0x106>
    f1c8:	40031000 	.word	0x40031000

0000f1cc <gpio_nrfx_config>:
{
    f1cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f1d0:	4607      	mov	r7, r0
	struct gpio_nrfx_data *data = get_port_data(port);
    f1d2:	6884      	ldr	r4, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    f1d4:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
    f1d8:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
    f1dc:	461d      	mov	r5, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    f1de:	d041      	beq.n	f264 <gpio_nrfx_config+0x98>
    f1e0:	dc09      	bgt.n	f1f6 <gpio_nrfx_config+0x2a>
    f1e2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    f1e6:	d03f      	beq.n	f268 <gpio_nrfx_config+0x9c>
    f1e8:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    f1ec:	d03e      	beq.n	f26c <gpio_nrfx_config+0xa0>
    f1ee:	b190      	cbz	r0, f216 <gpio_nrfx_config+0x4a>
		return -EINVAL;
    f1f0:	f06f 0015 	mvn.w	r0, #21
    f1f4:	e033      	b.n	f25e <gpio_nrfx_config+0x92>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    f1f6:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
    f1fa:	d039      	beq.n	f270 <gpio_nrfx_config+0xa4>
    f1fc:	dc04      	bgt.n	f208 <gpio_nrfx_config+0x3c>
    f1fe:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
    f202:	d1f5      	bne.n	f1f0 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
    f204:	2003      	movs	r0, #3
    f206:	e006      	b.n	f216 <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    f208:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    f20c:	d032      	beq.n	f274 <gpio_nrfx_config+0xa8>
    f20e:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
    f212:	d1ed      	bne.n	f1f0 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
    f214:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    f216:	f405 7640 	and.w	r6, r5, #768	; 0x300
    f21a:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    f21e:	d02b      	beq.n	f278 <gpio_nrfx_config+0xac>
		pull = NRF_GPIO_PIN_NOPULL;
    f220:	f5a6 7600 	sub.w	r6, r6, #512	; 0x200
    f224:	4273      	negs	r3, r6
    f226:	4173      	adcs	r3, r6
	if (access_op == GPIO_ACCESS_BY_PORT) {
    f228:	2901      	cmp	r1, #1
		from_pin = pin;
    f22a:	bf19      	ittee	ne
    f22c:	fa5f f982 	uxtbne.w	r9, r2
		to_pin   = pin;
    f230:	46c8      	movne	r8, r9
		to_pin   = 31U;
    f232:	f04f 081f 	moveq.w	r8, #31
		from_pin = 0U;
    f236:	f04f 0900 	moveq.w	r9, #0
    f23a:	f04f 0a01 	mov.w	sl, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
    f23e:	f005 0c01 	and.w	ip, r5, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    f242:	ea4f 064c 	mov.w	r6, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    f246:	ea46 060c 	orr.w	r6, r6, ip
    f24a:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
    f24e:	ea40 0683 	orr.w	r6, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    f252:	f005 0302 	and.w	r3, r5, #2
    f256:	9301      	str	r3, [sp, #4]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    f258:	45c8      	cmp	r8, r9
    f25a:	d20f      	bcs.n	f27c <gpio_nrfx_config+0xb0>
	return 0;
    f25c:	2000      	movs	r0, #0
}
    f25e:	b003      	add	sp, #12
    f260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
    f264:	2002      	movs	r0, #2
    f266:	e7d6      	b.n	f216 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
    f268:	2001      	movs	r0, #1
    f26a:	e7d4      	b.n	f216 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
    f26c:	2004      	movs	r0, #4
    f26e:	e7d2      	b.n	f216 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
    f270:	2005      	movs	r0, #5
    f272:	e7d0      	b.n	f216 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
    f274:	2006      	movs	r0, #6
    f276:	e7ce      	b.n	f216 <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
    f278:	2303      	movs	r3, #3
    f27a:	e7d5      	b.n	f228 <gpio_nrfx_config+0x5c>
	return port->config->config_info;
    f27c:	683b      	ldr	r3, [r7, #0]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    f27e:	689b      	ldr	r3, [r3, #8]
    f280:	7919      	ldrb	r1, [r3, #4]
    f282:	f009 031f 	and.w	r3, r9, #31
    f286:	ea43 1b41 	orr.w	fp, r3, r1, lsl #5
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    f28a:	f1bb 0f1f 	cmp.w	fp, #31
    f28e:	dd01      	ble.n	f294 <gpio_nrfx_config+0xc8>
    f290:	f7ff feb6 	bl	f000 <nrf_gpio_pin_port_decode.isra.8.part.9>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f294:	4a19      	ldr	r2, [pc, #100]	; (f2fc <gpio_nrfx_config+0x130>)
    f296:	f10b 0380 	add.w	r3, fp, #128	; 0x80
    f29a:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    f29e:	9a01      	ldr	r2, [sp, #4]
    f2a0:	fa0a f309 	lsl.w	r3, sl, r9
    f2a4:	68a1      	ldr	r1, [r4, #8]
    f2a6:	b32a      	cbz	r2, f2f4 <gpio_nrfx_config+0x128>
    f2a8:	4319      	orrs	r1, r3
    f2aa:	60a1      	str	r1, [r4, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    f2ac:	6961      	ldr	r1, [r4, #20]
    f2ae:	06a8      	lsls	r0, r5, #26
    f2b0:	bf4c      	ite	mi
    f2b2:	4319      	orrmi	r1, r3
    f2b4:	4399      	bicpl	r1, r3
    f2b6:	6161      	str	r1, [r4, #20]
		WRITE_BIT(data->double_edge, curr_pin,
    f2b8:	69a1      	ldr	r1, [r4, #24]
    f2ba:	066a      	lsls	r2, r5, #25
    f2bc:	bf4c      	ite	mi
    f2be:	4319      	orrmi	r1, r3
    f2c0:	4399      	bicpl	r1, r3
    f2c2:	61a1      	str	r1, [r4, #24]
		WRITE_BIT(data->active_level, curr_pin,
    f2c4:	6921      	ldr	r1, [r4, #16]
    f2c6:	0768      	lsls	r0, r5, #29
    f2c8:	bf4c      	ite	mi
    f2ca:	4319      	orrmi	r1, r3
    f2cc:	4399      	bicpl	r1, r3
    f2ce:	6121      	str	r1, [r4, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    f2d0:	69e1      	ldr	r1, [r4, #28]
    f2d2:	062a      	lsls	r2, r5, #24
    f2d4:	bf4c      	ite	mi
    f2d6:	430b      	orrmi	r3, r1
    f2d8:	ea21 0303 	bicpl.w	r3, r1, r3
    f2dc:	61e3      	str	r3, [r4, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    f2de:	4649      	mov	r1, r9
    f2e0:	4638      	mov	r0, r7
    f2e2:	f7ff fed1 	bl	f088 <gpiote_pin_int_cfg>
		if (res != 0) {
    f2e6:	2800      	cmp	r0, #0
    f2e8:	d1b9      	bne.n	f25e <gpio_nrfx_config+0x92>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    f2ea:	f109 0201 	add.w	r2, r9, #1
    f2ee:	fa5f f982 	uxtb.w	r9, r2
    f2f2:	e7b1      	b.n	f258 <gpio_nrfx_config+0x8c>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    f2f4:	ea21 0103 	bic.w	r1, r1, r3
    f2f8:	e7d7      	b.n	f2aa <gpio_nrfx_config+0xde>
    f2fa:	bf00      	nop
    f2fc:	40842500 	.word	0x40842500

0000f300 <gpiote_event_handler>:
{
    f300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f304:	4b56      	ldr	r3, [pc, #344]	; (f460 <gpiote_event_handler+0x160>)
    f306:	681e      	ldr	r6, [r3, #0]
	if (port_event) {
    f308:	4698      	mov	r8, r3
    f30a:	2e00      	cmp	r6, #0
    f30c:	d05e      	beq.n	f3cc <gpiote_event_handler+0xcc>
	u32_t bit = 1U << pin;
    f30e:	2701      	movs	r7, #1
	u32_t pin = 0U;
    f310:	f04f 0a00 	mov.w	sl, #0
	struct gpio_nrfx_data *data = get_port_data(port);
    f314:	4a53      	ldr	r2, [pc, #332]	; (f464 <gpiote_event_handler+0x164>)
    f316:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
    f318:	6812      	ldr	r2, [r2, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    f31a:	69dc      	ldr	r4, [r3, #28]
	return port->config->config_info;
    f31c:	f8d2 9008 	ldr.w	r9, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
    f320:	e9d3 2502 	ldrd	r2, r5, [r3, #8]
    f324:	4015      	ands	r5, r2
	out &= ~data->trig_edge & ~data->double_edge;
    f326:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    f32a:	430a      	orrs	r2, r1
    f32c:	ea25 0502 	bic.w	r5, r5, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    f330:	f8d9 2000 	ldr.w	r2, [r9]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    f334:	691b      	ldr	r3, [r3, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
    f336:	6912      	ldr	r2, [r2, #16]
    f338:	405c      	eors	r4, r3
    f33a:	4054      	eors	r4, r2
	u32_t out = pin_states & level_pins;
    f33c:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
    f340:	bb9d      	cbnz	r5, f3aa <gpiote_event_handler+0xaa>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    f342:	f8c8 5000 	str.w	r5, [r8]
	u32_t fired_triggers[GPIO_COUNT] = {0};
    f346:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    f348:	2001      	movs	r0, #1
    f34a:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    f34c:	4946      	ldr	r1, [pc, #280]	; (f468 <gpiote_event_handler+0x168>)
    f34e:	4d47      	ldr	r5, [pc, #284]	; (f46c <gpiote_event_handler+0x16c>)
    f350:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
    f354:	fa00 fc03 	lsl.w	ip, r0, r3
    f358:	ea1c 0f02 	tst.w	ip, r2
    f35c:	d00d      	beq.n	f37a <gpiote_event_handler+0x7a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f35e:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
    f362:	b152      	cbz	r2, f37a <gpiote_event_handler+0x7a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    f364:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    f368:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    f36c:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    f370:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    f374:	fa00 f202 	lsl.w	r2, r0, r2
    f378:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    f37a:	3301      	adds	r3, #1
    f37c:	2b08      	cmp	r3, #8
    f37e:	d1e7      	bne.n	f350 <gpiote_event_handler+0x50>
	if (fired_triggers[0]) {
    f380:	bb34      	cbnz	r4, f3d0 <gpiote_event_handler+0xd0>
	if (port_event) {
    f382:	b186      	cbz	r6, f3a6 <gpiote_event_handler+0xa6>
	u32_t bit = 1U << pin;
    f384:	2701      	movs	r7, #1
	u32_t pin = 0U;
    f386:	f04f 0800 	mov.w	r8, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
    f38a:	4b36      	ldr	r3, [pc, #216]	; (f464 <gpiote_event_handler+0x164>)
    f38c:	689d      	ldr	r5, [r3, #8]
	return port->config->config_info;
    f38e:	681b      	ldr	r3, [r3, #0]
    f390:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    f392:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
    f396:	401c      	ands	r4, r3
	out &= ~data->trig_edge & ~data->double_edge;
    f398:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
    f39c:	4313      	orrs	r3, r2
    f39e:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
    f3a2:	2c00      	cmp	r4, #0
    f3a4:	d142      	bne.n	f42c <gpiote_event_handler+0x12c>
}
    f3a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (level_pins & bit) {
    f3aa:	423d      	tst	r5, r7
    f3ac:	d00a      	beq.n	f3c4 <gpiote_event_handler+0xc4>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f3ae:	f899 3004 	ldrb.w	r3, [r9, #4]
    f3b2:	f00a 001f 	and.w	r0, sl, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    f3b6:	2100      	movs	r1, #0
    f3b8:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    f3bc:	f7ff fe36 	bl	f02c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    f3c0:	ea25 0507 	bic.w	r5, r5, r7
		++pin;
    f3c4:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
    f3c8:	007f      	lsls	r7, r7, #1
    f3ca:	e7b9      	b.n	f340 <gpiote_event_handler+0x40>
	u32_t fired_triggers[GPIO_COUNT] = {0};
    f3cc:	4634      	mov	r4, r6
    f3ce:	e7ba      	b.n	f346 <gpiote_event_handler+0x46>
	struct gpio_nrfx_data *data = get_port_data(port);
    f3d0:	4b24      	ldr	r3, [pc, #144]	; (f464 <gpiote_event_handler+0x164>)
    f3d2:	f8d3 9008 	ldr.w	r9, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    f3d6:	f8d9 5000 	ldr.w	r5, [r9]
    f3da:	2d00      	cmp	r5, #0
    f3dc:	d0d1      	beq.n	f382 <gpiote_event_handler+0x82>
			cb->handler(port, cb, pins);
    f3de:	4698      	mov	r8, r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    f3e0:	682f      	ldr	r7, [r5, #0]
			__ASSERT(cb->handler, "No callback handler!");
    f3e2:	f8df a094 	ldr.w	sl, [pc, #148]	; f478 <gpiote_event_handler+0x178>
    f3e6:	f8df b094 	ldr.w	fp, [pc, #148]	; f47c <gpiote_event_handler+0x17c>
		if ((cb->pin_mask & pins) & data->int_en) {
    f3ea:	f8d9 300c 	ldr.w	r3, [r9, #12]
    f3ee:	68aa      	ldr	r2, [r5, #8]
    f3f0:	4023      	ands	r3, r4
    f3f2:	4213      	tst	r3, r2
    f3f4:	d015      	beq.n	f422 <gpiote_event_handler+0x122>
			__ASSERT(cb->handler, "No callback handler!");
    f3f6:	686b      	ldr	r3, [r5, #4]
    f3f8:	b973      	cbnz	r3, f418 <gpiote_event_handler+0x118>
    f3fa:	4659      	mov	r1, fp
    f3fc:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    f400:	4652      	mov	r2, sl
    f402:	481b      	ldr	r0, [pc, #108]	; (f470 <gpiote_event_handler+0x170>)
    f404:	f00d fcd8 	bl	1cdb8 <printk>
    f408:	481a      	ldr	r0, [pc, #104]	; (f474 <gpiote_event_handler+0x174>)
    f40a:	f00d fcd5 	bl	1cdb8 <printk>
    f40e:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    f412:	4650      	mov	r0, sl
    f414:	f00d fd02 	bl	1ce1c <assert_post_action>
			cb->handler(port, cb, pins);
    f418:	686b      	ldr	r3, [r5, #4]
    f41a:	4622      	mov	r2, r4
    f41c:	4629      	mov	r1, r5
    f41e:	4640      	mov	r0, r8
    f420:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    f422:	2f00      	cmp	r7, #0
    f424:	d0ad      	beq.n	f382 <gpiote_event_handler+0x82>
    f426:	463d      	mov	r5, r7
    f428:	683f      	ldr	r7, [r7, #0]
    f42a:	e7de      	b.n	f3ea <gpiote_event_handler+0xea>
		if (level_pins & bit) {
    f42c:	4227      	tst	r7, r4
    f42e:	d013      	beq.n	f458 <gpiote_event_handler+0x158>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    f430:	692b      	ldr	r3, [r5, #16]
    f432:	69ea      	ldr	r2, [r5, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f434:	f896 c004 	ldrb.w	ip, [r6, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    f438:	4053      	eors	r3, r2
    f43a:	fa23 f308 	lsr.w	r3, r3, r8
		return NRF_GPIO_PIN_SENSE_HIGH;
    f43e:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f442:	f008 001f 	and.w	r0, r8, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    f446:	bf0c      	ite	eq
    f448:	2103      	moveq	r1, #3
    f44a:	2102      	movne	r1, #2
    f44c:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
    f450:	f7ff fdec 	bl	f02c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    f454:	ea24 0407 	bic.w	r4, r4, r7
		++pin;
    f458:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
    f45c:	007f      	lsls	r7, r7, #1
    f45e:	e7a0      	b.n	f3a2 <gpiote_event_handler+0xa2>
    f460:	4003117c 	.word	0x4003117c
    f464:	2002c4e0 	.word	0x2002c4e0
    f468:	40031000 	.word	0x40031000
    f46c:	40031100 	.word	0x40031100
    f470:	0001f722 	.word	0x0001f722
    f474:	0001ff9a 	.word	0x0001ff9a
    f478:	0001ffb1 	.word	0x0001ffb1
    f47c:	0001ffd6 	.word	0x0001ffd6

0000f480 <entropy_cc310_rng_get_entropy>:
#include "nrf_cc310_platform_entropy.h"
#endif

static int entropy_cc310_rng_get_entropy(struct device *dev, u8_t *buffer,
					 u16_t length)
{
    f480:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f482:	460d      	mov	r5, r1
    f484:	4614      	mov	r4, r2
	int res = -EINVAL;
	size_t olen;

	__ASSERT_NO_MSG(dev != NULL);
    f486:	b948      	cbnz	r0, f49c <entropy_cc310_rng_get_entropy+0x1c>
    f488:	4910      	ldr	r1, [pc, #64]	; (f4cc <entropy_cc310_rng_get_entropy+0x4c>)
    f48a:	4811      	ldr	r0, [pc, #68]	; (f4d0 <entropy_cc310_rng_get_entropy+0x50>)
    f48c:	231e      	movs	r3, #30
    f48e:	4a11      	ldr	r2, [pc, #68]	; (f4d4 <entropy_cc310_rng_get_entropy+0x54>)
    f490:	f00d fc92 	bl	1cdb8 <printk>
    f494:	211e      	movs	r1, #30
    f496:	480f      	ldr	r0, [pc, #60]	; (f4d4 <entropy_cc310_rng_get_entropy+0x54>)
    f498:	f00d fcc0 	bl	1ce1c <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
    f49c:	b94d      	cbnz	r5, f4b2 <entropy_cc310_rng_get_entropy+0x32>
    f49e:	490e      	ldr	r1, [pc, #56]	; (f4d8 <entropy_cc310_rng_get_entropy+0x58>)
    f4a0:	480b      	ldr	r0, [pc, #44]	; (f4d0 <entropy_cc310_rng_get_entropy+0x50>)
    f4a2:	231f      	movs	r3, #31
    f4a4:	4a0b      	ldr	r2, [pc, #44]	; (f4d4 <entropy_cc310_rng_get_entropy+0x54>)
    f4a6:	f00d fc87 	bl	1cdb8 <printk>
    f4aa:	211f      	movs	r1, #31
    f4ac:	4809      	ldr	r0, [pc, #36]	; (f4d4 <entropy_cc310_rng_get_entropy+0x54>)
    f4ae:	f00d fcb5 	bl	1ce1c <assert_post_action>

#if defined(CONFIG_SPM)
	/** This is a call from a non-secure app that enables secure services,
	 *  in which case entropy is gathered by calling through SPM
	 */
	res = spm_request_random_number(buffer, length, &olen);
    f4b2:	aa01      	add	r2, sp, #4
    f4b4:	4621      	mov	r1, r4
    f4b6:	4628      	mov	r0, r5
    f4b8:	f7f8 fd9a 	bl	7ff0 <spm_request_random_number>
	if (olen != length) {
    f4bc:	9b01      	ldr	r3, [sp, #4]
		return -EINVAL;
    f4be:	429c      	cmp	r4, r3
		return -EINVAL;
	}
#endif

	return res;
}
    f4c0:	bf18      	it	ne
    f4c2:	f06f 0015 	mvnne.w	r0, #21
    f4c6:	b003      	add	sp, #12
    f4c8:	bd30      	pop	{r4, r5, pc}
    f4ca:	bf00      	nop
    f4cc:	00020076 	.word	0x00020076
    f4d0:	0001f722 	.word	0x0001f722
    f4d4:	00020038 	.word	0x00020038
    f4d8:	00020089 	.word	0x00020089

0000f4dc <_bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
    f4dc:	2200      	movs	r2, #0
{
    f4de:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
    f4e0:	4611      	mov	r1, r2
    f4e2:	202a      	movs	r0, #42	; 0x2a
    f4e4:	f7fe fa3e 	bl	d964 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	init_ret = bsd_init();
    f4e8:	f003 fd26 	bl	12f38 <bsd_init>
    f4ec:	4b01      	ldr	r3, [pc, #4]	; (f4f4 <_bsdlib_init+0x18>)
    f4ee:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
    f4f0:	2000      	movs	r0, #0
    f4f2:	bd08      	pop	{r3, pc}
    f4f4:	20020390 	.word	0x20020390

0000f4f8 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
    f4f8:	b570      	push	{r4, r5, r6, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
    f4fa:	4b0d      	ldr	r3, [pc, #52]	; (f530 <thread_monitor_entry_get+0x38>)
	struct thread_monitor_entry *new_entry = thread_event_monitor;
    f4fc:	4c0d      	ldr	r4, [pc, #52]	; (f534 <thread_monitor_entry_get+0x3c>)
		entry_age = rpc_event_cnt - entry->cnt;
    f4fe:	681a      	ldr	r2, [r3, #0]
    f500:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
    f502:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
    f504:	4623      	mov	r3, r4
		if (entry->id == id) {
    f506:	6819      	ldr	r1, [r3, #0]
    f508:	4281      	cmp	r1, r0
    f50a:	d00e      	beq.n	f52a <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
    f50c:	b151      	cbz	r1, f524 <thread_monitor_entry_get+0x2c>
		entry_age = rpc_event_cnt - entry->cnt;
    f50e:	6859      	ldr	r1, [r3, #4]
    f510:	1a51      	subs	r1, r2, r1
		if (entry_age > oldest_entry_age) {
    f512:	42b1      	cmp	r1, r6
    f514:	bfc4      	itt	gt
    f516:	461c      	movgt	r4, r3
    f518:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    f51a:	3d01      	subs	r5, #1
    f51c:	f103 0308 	add.w	r3, r3, #8
    f520:	d1f1      	bne.n	f506 <thread_monitor_entry_get+0xe>
    f522:	4623      	mov	r3, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
    f524:	3a01      	subs	r2, #1
	new_entry->id = id;
    f526:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
    f528:	605a      	str	r2, [r3, #4]

	return new_entry;
}
    f52a:	4618      	mov	r0, r3
    f52c:	bd70      	pop	{r4, r5, r6, pc}
    f52e:	bf00      	nop
    f530:	20020394 	.word	0x20020394
    f534:	200203a0 	.word	0x200203a0

0000f538 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
    f538:	4668      	mov	r0, sp
    f53a:	f020 0107 	bic.w	r1, r0, #7
    f53e:	468d      	mov	sp, r1
    f540:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    f542:	4b0d      	ldr	r3, [pc, #52]	; (f578 <rpc_proxy_irq_handler+0x40>)
    f544:	e8d3 2fef 	ldaex	r2, [r3]
    f548:	3201      	adds	r2, #1
    f54a:	e8c3 2fe1 	stlex	r1, r2, [r3]
    f54e:	2900      	cmp	r1, #0
    f550:	d1f8      	bne.n	f544 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
    f552:	f007 fe23 	bl	1719c <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
    f556:	4b09      	ldr	r3, [pc, #36]	; (f57c <rpc_proxy_irq_handler+0x44>)
    f558:	681c      	ldr	r4, [r3, #0]
    f55a:	b93c      	cbnz	r4, f56c <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
    f55c:	f7fe fa34 	bl	d9c8 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
    f560:	f7fe f956 	bl	d810 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
    f564:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
    f568:	4685      	mov	sp, r0
    f56a:	4770      	bx	lr
	z_impl_k_sem_give(sem);
    f56c:	1d20      	adds	r0, r4, #4
    f56e:	f00b fe8b 	bl	1b288 <z_impl_k_sem_give>
    f572:	6824      	ldr	r4, [r4, #0]
	return node->next;
    f574:	e7f1      	b.n	f55a <rpc_proxy_irq_handler+0x22>
    f576:	bf00      	nop
    f578:	20020394 	.word	0x20020394
    f57c:	20020398 	.word	0x20020398

0000f580 <bsd_os_timedwait>:
{
    f580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f584:	4688      	mov	r8, r1
    f586:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_get();
    f588:	f00f fa18 	bl	1e9bc <z_impl_k_uptime_get>
	if (*timeout == 0) {
    f58c:	f8d8 3000 	ldr.w	r3, [r8]
    f590:	4606      	mov	r6, r0
    f592:	2b00      	cmp	r3, #0
    f594:	460f      	mov	r7, r1
    f596:	d103      	bne.n	f5a0 <bsd_os_timedwait+0x20>
	z_impl_k_yield();
    f598:	f00b fcf2 	bl	1af80 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
    f59c:	203c      	movs	r0, #60	; 0x3c
    f59e:	e06e      	b.n	f67e <bsd_os_timedwait+0xfe>
		*timeout = K_FOREVER;
    f5a0:	bfbc      	itt	lt
    f5a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    f5a6:	f8c8 3000 	strlt.w	r3, [r8]
	return z_impl_k_sem_init(sem, initial_count, limit);
    f5aa:	2201      	movs	r2, #1
    f5ac:	2100      	movs	r1, #0
    f5ae:	a802      	add	r0, sp, #8
    f5b0:	f00f f975 	bl	1e89e <z_impl_k_sem_init>
    f5b4:	f10d 0a04 	add.w	sl, sp, #4
    f5b8:	f04f 0320 	mov.w	r3, #32
    f5bc:	f3ef 8b11 	mrs	fp, BASEPRI
    f5c0:	f383 8811 	msr	BASEPRI, r3
    f5c4:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    f5c8:	f00b fe58 	bl	1b27c <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
    f5cc:	f7ff ff94 	bl	f4f8 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
    f5d0:	4933      	ldr	r1, [pc, #204]	; (f6a0 <bsd_os_timedwait+0x120>)
    f5d2:	6843      	ldr	r3, [r0, #4]
    f5d4:	680a      	ldr	r2, [r1, #0]
    f5d6:	4689      	mov	r9, r1
    f5d8:	4293      	cmp	r3, r2
    f5da:	f04f 0300 	mov.w	r3, #0
    f5de:	d108      	bne.n	f5f2 <bsd_os_timedwait+0x72>
	parent->next = child;
    f5e0:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
    f5e2:	4b30      	ldr	r3, [pc, #192]	; (f6a4 <bsd_os_timedwait+0x124>)
    f5e4:	685a      	ldr	r2, [r3, #4]
    f5e6:	2a00      	cmp	r2, #0
    f5e8:	d14c      	bne.n	f684 <bsd_os_timedwait+0x104>
	list->head = node;
    f5ea:	e9c3 aa00 	strd	sl, sl, [r3]
		allow_to_sleep = true;
    f5ee:	2301      	movs	r3, #1
    f5f0:	e000      	b.n	f5f4 <bsd_os_timedwait+0x74>
	entry->cnt = rpc_event_cnt;
    f5f2:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
    f5f4:	f38b 8811 	msr	BASEPRI, fp
    f5f8:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
    f5fc:	2b00      	cmp	r3, #0
    f5fe:	d03d      	beq.n	f67c <bsd_os_timedwait+0xfc>
	(void)k_sem_take(&thread.sem, *timeout);
    f600:	f8d8 1000 	ldr.w	r1, [r8]
	return z_impl_k_sem_take(sem, timeout);
    f604:	a802      	add	r0, sp, #8
    f606:	f00b fe89 	bl	1b31c <z_impl_k_sem_take>
	__asm__ volatile(
    f60a:	f04f 0320 	mov.w	r3, #32
    f60e:	f3ef 8b11 	mrs	fp, BASEPRI
    f612:	f383 8811 	msr	BASEPRI, r3
    f616:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f61a:	2000      	movs	r0, #0
    f61c:	4b21      	ldr	r3, [pc, #132]	; (f6a4 <bsd_os_timedwait+0x124>)
    f61e:	681a      	ldr	r2, [r3, #0]
    f620:	b152      	cbz	r2, f638 <bsd_os_timedwait+0xb8>
    f622:	4552      	cmp	r2, sl
    f624:	d139      	bne.n	f69a <bsd_os_timedwait+0x11a>
Z_GENLIST_REMOVE(slist, snode)
    f626:	9901      	ldr	r1, [sp, #4]
    f628:	bb88      	cbnz	r0, f68e <bsd_os_timedwait+0x10e>
    f62a:	6858      	ldr	r0, [r3, #4]
	list->head = node;
    f62c:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    f62e:	4290      	cmp	r0, r2
    f630:	d100      	bne.n	f634 <bsd_os_timedwait+0xb4>
	list->tail = node;
    f632:	6059      	str	r1, [r3, #4]
	parent->next = child;
    f634:	2300      	movs	r3, #0
    f636:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
    f638:	f00b fe20 	bl	1b27c <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
    f63c:	f7ff ff5c 	bl	f4f8 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
    f640:	f8d9 3000 	ldr.w	r3, [r9]
    f644:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
    f646:	f38b 8811 	msr	BASEPRI, fp
    f64a:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
    f64e:	f8d8 9000 	ldr.w	r9, [r8]
    f652:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    f656:	d011      	beq.n	f67c <bsd_os_timedwait+0xfc>
	return z_impl_k_uptime_get();
    f658:	f00f f9b0 	bl	1e9bc <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
    f65c:	eb16 0209 	adds.w	r2, r6, r9
    f660:	eb47 73e9 	adc.w	r3, r7, r9, asr #31
    f664:	1a14      	subs	r4, r2, r0
    f666:	eb63 0501 	sbc.w	r5, r3, r1
	*timeout = remaining > 0 ? remaining : 0;
    f66a:	2c00      	cmp	r4, #0
    f66c:	f175 0300 	sbcs.w	r3, r5, #0
    f670:	bfb8      	it	lt
    f672:	2400      	movlt	r4, #0
    f674:	f8c8 4000 	str.w	r4, [r8]
	if (*timeout == 0) {
    f678:	2c00      	cmp	r4, #0
    f67a:	d08f      	beq.n	f59c <bsd_os_timedwait+0x1c>
	return 0;
    f67c:	2000      	movs	r0, #0
}
    f67e:	b009      	add	sp, #36	; 0x24
    f680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f684:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    f688:	f8c3 a004 	str.w	sl, [r3, #4]
    f68c:	e7af      	b.n	f5ee <bsd_os_timedwait+0x6e>
	parent->next = child;
    f68e:	6001      	str	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    f690:	6859      	ldr	r1, [r3, #4]
    f692:	4291      	cmp	r1, r2
	list->tail = node;
    f694:	bf08      	it	eq
    f696:	6058      	streq	r0, [r3, #4]
    f698:	e7cc      	b.n	f634 <bsd_os_timedwait+0xb4>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f69a:	4610      	mov	r0, r2
    f69c:	6812      	ldr	r2, [r2, #0]
    f69e:	e7bf      	b.n	f620 <bsd_os_timedwait+0xa0>
    f6a0:	20020394 	.word	0x20020394
    f6a4:	20020398 	.word	0x20020398

0000f6a8 <bsd_os_errno_set>:
	switch (err_code) {
    f6a8:	282d      	cmp	r0, #45	; 0x2d
{
    f6aa:	b510      	push	{r4, lr}
    f6ac:	4604      	mov	r4, r0
	switch (err_code) {
    f6ae:	d00c      	beq.n	f6ca <bsd_os_errno_set+0x22>
    f6b0:	dc39      	bgt.n	f726 <bsd_os_errno_set+0x7e>
    f6b2:	280e      	cmp	r0, #14
    f6b4:	d009      	beq.n	f6ca <bsd_os_errno_set+0x22>
    f6b6:	dc11      	bgt.n	f6dc <bsd_os_errno_set+0x34>
    f6b8:	2808      	cmp	r0, #8
    f6ba:	d006      	beq.n	f6ca <bsd_os_errno_set+0x22>
    f6bc:	dc09      	bgt.n	f6d2 <bsd_os_errno_set+0x2a>
    f6be:	2802      	cmp	r0, #2
    f6c0:	d003      	beq.n	f6ca <bsd_os_errno_set+0x22>
    f6c2:	2805      	cmp	r0, #5
    f6c4:	d001      	beq.n	f6ca <bsd_os_errno_set+0x22>
    f6c6:	2801      	cmp	r0, #1
    f6c8:	d119      	bne.n	f6fe <bsd_os_errno_set+0x56>
		errno = ETIMEDOUT;
    f6ca:	f00e faee 	bl	1dcaa <z_errno>
    f6ce:	6004      	str	r4, [r0, #0]
}
    f6d0:	bd10      	pop	{r4, pc}
	switch (err_code) {
    f6d2:	280c      	cmp	r0, #12
    f6d4:	d0f9      	beq.n	f6ca <bsd_os_errno_set+0x22>
    f6d6:	dc58      	bgt.n	f78a <bsd_os_errno_set+0xe2>
    f6d8:	2809      	cmp	r0, #9
    f6da:	e7f5      	b.n	f6c8 <bsd_os_errno_set+0x20>
    f6dc:	2828      	cmp	r0, #40	; 0x28
    f6de:	f000 8084 	beq.w	f7ea <bsd_os_errno_set+0x142>
    f6e2:	dc05      	bgt.n	f6f0 <bsd_os_errno_set+0x48>
    f6e4:	2818      	cmp	r0, #24
    f6e6:	d0f0      	beq.n	f6ca <bsd_os_errno_set+0x22>
    f6e8:	2823      	cmp	r0, #35	; 0x23
    f6ea:	d053      	beq.n	f794 <bsd_os_errno_set+0xec>
    f6ec:	2816      	cmp	r0, #22
    f6ee:	e7eb      	b.n	f6c8 <bsd_os_errno_set+0x20>
    f6f0:	282a      	cmp	r0, #42	; 0x2a
    f6f2:	d0ea      	beq.n	f6ca <bsd_os_errno_set+0x22>
    f6f4:	db52      	blt.n	f79c <bsd_os_errno_set+0xf4>
    f6f6:	282b      	cmp	r0, #43	; 0x2b
    f6f8:	d0e7      	beq.n	f6ca <bsd_os_errno_set+0x22>
    f6fa:	282c      	cmp	r0, #44	; 0x2c
    f6fc:	d052      	beq.n	f7a4 <bsd_os_errno_set+0xfc>
		__ASSERT(false, "Untranslated errno %d set by bsdlib!", err_code);
    f6fe:	f44f 73a2 	mov.w	r3, #324	; 0x144
    f702:	4a3c      	ldr	r2, [pc, #240]	; (f7f4 <bsd_os_errno_set+0x14c>)
    f704:	493c      	ldr	r1, [pc, #240]	; (f7f8 <bsd_os_errno_set+0x150>)
    f706:	483d      	ldr	r0, [pc, #244]	; (f7fc <bsd_os_errno_set+0x154>)
    f708:	f00d fb56 	bl	1cdb8 <printk>
    f70c:	4621      	mov	r1, r4
    f70e:	483c      	ldr	r0, [pc, #240]	; (f800 <bsd_os_errno_set+0x158>)
    f710:	f00d fb52 	bl	1cdb8 <printk>
    f714:	f44f 71a2 	mov.w	r1, #324	; 0x144
    f718:	4836      	ldr	r0, [pc, #216]	; (f7f4 <bsd_os_errno_set+0x14c>)
    f71a:	f00d fb7f 	bl	1ce1c <assert_post_action>
		errno = 0xBAADBAAD;
    f71e:	f00e fac4 	bl	1dcaa <z_errno>
    f722:	4b38      	ldr	r3, [pc, #224]	; (f804 <bsd_os_errno_set+0x15c>)
    f724:	e034      	b.n	f790 <bsd_os_errno_set+0xe8>
	switch (err_code) {
    f726:	283c      	cmp	r0, #60	; 0x3c
    f728:	d0cf      	beq.n	f6ca <bsd_os_errno_set+0x22>
    f72a:	dc15      	bgt.n	f758 <bsd_os_errno_set+0xb0>
    f72c:	2833      	cmp	r0, #51	; 0x33
    f72e:	d0cc      	beq.n	f6ca <bsd_os_errno_set+0x22>
    f730:	dc05      	bgt.n	f73e <bsd_os_errno_set+0x96>
    f732:	2830      	cmp	r0, #48	; 0x30
    f734:	d0c9      	beq.n	f6ca <bsd_os_errno_set+0x22>
    f736:	2832      	cmp	r0, #50	; 0x32
    f738:	d038      	beq.n	f7ac <bsd_os_errno_set+0x104>
    f73a:	282f      	cmp	r0, #47	; 0x2f
    f73c:	e7c4      	b.n	f6c8 <bsd_os_errno_set+0x20>
    f73e:	2836      	cmp	r0, #54	; 0x36
    f740:	d0c3      	beq.n	f6ca <bsd_os_errno_set+0x22>
    f742:	dc01      	bgt.n	f748 <bsd_os_errno_set+0xa0>
    f744:	2834      	cmp	r0, #52	; 0x34
    f746:	e7bf      	b.n	f6c8 <bsd_os_errno_set+0x20>
    f748:	2838      	cmp	r0, #56	; 0x38
    f74a:	d0be      	beq.n	f6ca <bsd_os_errno_set+0x22>
    f74c:	2839      	cmp	r0, #57	; 0x39
    f74e:	d1d6      	bne.n	f6fe <bsd_os_errno_set+0x56>
		errno = ENOTCONN;
    f750:	f00e faab 	bl	1dcaa <z_errno>
    f754:	2339      	movs	r3, #57	; 0x39
    f756:	e01b      	b.n	f790 <bsd_os_errno_set+0xe8>
	switch (err_code) {
    f758:	287d      	cmp	r0, #125	; 0x7d
    f75a:	d033      	beq.n	f7c4 <bsd_os_errno_set+0x11c>
    f75c:	dc09      	bgt.n	f772 <bsd_os_errno_set+0xca>
    f75e:	2870      	cmp	r0, #112	; 0x70
    f760:	d028      	beq.n	f7b4 <bsd_os_errno_set+0x10c>
    f762:	2873      	cmp	r0, #115	; 0x73
    f764:	d02a      	beq.n	f7bc <bsd_os_errno_set+0x114>
    f766:	2869      	cmp	r0, #105	; 0x69
    f768:	d1c9      	bne.n	f6fe <bsd_os_errno_set+0x56>
		errno = ENOBUFS;
    f76a:	f00e fa9e 	bl	1dcaa <z_errno>
    f76e:	2337      	movs	r3, #55	; 0x37
    f770:	e00e      	b.n	f790 <bsd_os_errno_set+0xe8>
	switch (err_code) {
    f772:	287f      	cmp	r0, #127	; 0x7f
    f774:	d02f      	beq.n	f7d6 <bsd_os_errno_set+0x12e>
    f776:	db29      	blt.n	f7cc <bsd_os_errno_set+0x124>
    f778:	2880      	cmp	r0, #128	; 0x80
    f77a:	d031      	beq.n	f7e0 <bsd_os_errno_set+0x138>
    f77c:	2881      	cmp	r0, #129	; 0x81
    f77e:	d1be      	bne.n	f6fe <bsd_os_errno_set+0x56>
		errno = EKEYREJECTED;
    f780:	f00e fa93 	bl	1dcaa <z_errno>
    f784:	f240 73d4 	movw	r3, #2004	; 0x7d4
    f788:	e002      	b.n	f790 <bsd_os_errno_set+0xe8>
		errno = EACCES;
    f78a:	f00e fa8e 	bl	1dcaa <z_errno>
    f78e:	230d      	movs	r3, #13
		errno = 0xBAADBAAD;
    f790:	6003      	str	r3, [r0, #0]
}
    f792:	e79d      	b.n	f6d0 <bsd_os_errno_set+0x28>
		errno = EAGAIN;
    f794:	f00e fa89 	bl	1dcaa <z_errno>
    f798:	230b      	movs	r3, #11
    f79a:	e7f9      	b.n	f790 <bsd_os_errno_set+0xe8>
		errno = EPROTOTYPE;
    f79c:	f00e fa85 	bl	1dcaa <z_errno>
    f7a0:	2329      	movs	r3, #41	; 0x29
    f7a2:	e7f5      	b.n	f790 <bsd_os_errno_set+0xe8>
		errno = ESOCKTNOSUPPORT;
    f7a4:	f00e fa81 	bl	1dcaa <z_errno>
    f7a8:	232c      	movs	r3, #44	; 0x2c
    f7aa:	e7f1      	b.n	f790 <bsd_os_errno_set+0xe8>
		errno = ENETDOWN;
    f7ac:	f00e fa7d 	bl	1dcaa <z_errno>
    f7b0:	233e      	movs	r3, #62	; 0x3e
    f7b2:	e7ed      	b.n	f790 <bsd_os_errno_set+0xe8>
		errno = EHOSTDOWN;
    f7b4:	f00e fa79 	bl	1dcaa <z_errno>
    f7b8:	2343      	movs	r3, #67	; 0x43
    f7ba:	e7e9      	b.n	f790 <bsd_os_errno_set+0xe8>
		errno = EINPROGRESS;
    f7bc:	f00e fa75 	bl	1dcaa <z_errno>
    f7c0:	2344      	movs	r3, #68	; 0x44
    f7c2:	e7e5      	b.n	f790 <bsd_os_errno_set+0xe8>
		errno = ECANCELED;
    f7c4:	f00e fa71 	bl	1dcaa <z_errno>
    f7c8:	2348      	movs	r3, #72	; 0x48
    f7ca:	e7e1      	b.n	f790 <bsd_os_errno_set+0xe8>
		errno = ENOKEY;
    f7cc:	f00e fa6d 	bl	1dcaa <z_errno>
    f7d0:	f240 73d1 	movw	r3, #2001	; 0x7d1
    f7d4:	e7dc      	b.n	f790 <bsd_os_errno_set+0xe8>
		errno = EKEYEXPIRED;
    f7d6:	f00e fa68 	bl	1dcaa <z_errno>
    f7da:	f240 73d2 	movw	r3, #2002	; 0x7d2
    f7de:	e7d7      	b.n	f790 <bsd_os_errno_set+0xe8>
		errno = EKEYREVOKED;
    f7e0:	f00e fa63 	bl	1dcaa <z_errno>
    f7e4:	f240 73d3 	movw	r3, #2003	; 0x7d3
    f7e8:	e7d2      	b.n	f790 <bsd_os_errno_set+0xe8>
		errno = EMSGSIZE;
    f7ea:	f00e fa5e 	bl	1dcaa <z_errno>
    f7ee:	2324      	movs	r3, #36	; 0x24
    f7f0:	e7ce      	b.n	f790 <bsd_os_errno_set+0xe8>
    f7f2:	bf00      	nop
    f7f4:	0002009f 	.word	0x0002009f
    f7f8:	00020517 	.word	0x00020517
    f7fc:	0001f722 	.word	0x0001f722
    f800:	000200d1 	.word	0x000200d1
    f804:	baadbaad 	.word	0xbaadbaad

0000f808 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    f80c:	4b01      	ldr	r3, [pc, #4]	; (f814 <bsd_os_application_irq_set+0xc>)
    f80e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    f812:	4770      	bx	lr
    f814:	e000e100 	.word	0xe000e100

0000f818 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    f81c:	4b01      	ldr	r3, [pc, #4]	; (f824 <bsd_os_application_irq_clear+0xc>)
    f81e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    f822:	4770      	bx	lr
    f824:	e000e100 	.word	0xe000e100

0000f828 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f828:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    f82c:	4b01      	ldr	r3, [pc, #4]	; (f834 <bsd_os_trace_irq_set+0xc>)
    f82e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    f832:	4770      	bx	lr
    f834:	e000e100 	.word	0xe000e100

0000f838 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f838:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    f83c:	4b01      	ldr	r3, [pc, #4]	; (f844 <bsd_os_trace_irq_clear+0xc>)
    f83e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    f842:	4770      	bx	lr
    f844:	e000e100 	.word	0xe000e100

0000f848 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
    f848:	b508      	push	{r3, lr}
	list->head = NULL;
    f84a:	2300      	movs	r3, #0
    f84c:	4a07      	ldr	r2, [pc, #28]	; (f86c <bsd_os_init+0x24>)
	list->tail = NULL;
    f84e:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f852:	4a07      	ldr	r2, [pc, #28]	; (f870 <bsd_os_init+0x28>)
    f854:	e8d2 1fef 	ldaex	r1, [r2]
    f858:	e8c2 3fe0 	stlex	r0, r3, [r2]
    f85c:	2800      	cmp	r0, #0
    f85e:	d1f9      	bne.n	f854 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
    f860:	f00e fa4e 	bl	1dd00 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
    f864:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
    f868:	f00e ba3f 	b.w	1dcea <trace_task_create>
    f86c:	20020398 	.word	0x20020398
    f870:	20020394 	.word	0x20020394

0000f874 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
    f874:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
    f878:	d03c      	beq.n	f8f4 <z_to_nrf_optname+0x80>
    f87a:	dc04      	bgt.n	f886 <z_to_nrf_optname+0x12>
    f87c:	2801      	cmp	r0, #1
    f87e:	d044      	beq.n	f90a <z_to_nrf_optname+0x96>
			break;
		}
		break;

	default:
		retval = -1;
    f880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		break;
	}

	return retval;
}
    f884:	4770      	bx	lr
	switch (z_in_level) {
    f886:	f240 2302 	movw	r3, #514	; 0x202
    f88a:	4298      	cmp	r0, r3
    f88c:	d052      	beq.n	f934 <z_to_nrf_optname+0xc0>
    f88e:	f240 2303 	movw	r3, #515	; 0x203
    f892:	4298      	cmp	r0, r3
    f894:	d1f4      	bne.n	f880 <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
    f896:	3901      	subs	r1, #1
    f898:	2913      	cmp	r1, #19
    f89a:	d8f1      	bhi.n	f880 <z_to_nrf_optname+0xc>
    f89c:	a301      	add	r3, pc, #4	; (adr r3, f8a4 <z_to_nrf_optname+0x30>)
    f89e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    f8a2:	bf00      	nop
    f8a4:	0000f941 	.word	0x0000f941
    f8a8:	0000f905 	.word	0x0000f905
    f8ac:	0000f925 	.word	0x0000f925
    f8b0:	0000f917 	.word	0x0000f917
    f8b4:	0000f929 	.word	0x0000f929
    f8b8:	0000f92d 	.word	0x0000f92d
    f8bc:	0000f931 	.word	0x0000f931
    f8c0:	0000f881 	.word	0x0000f881
    f8c4:	0000f881 	.word	0x0000f881
    f8c8:	0000f881 	.word	0x0000f881
    f8cc:	0000f881 	.word	0x0000f881
    f8d0:	0000f881 	.word	0x0000f881
    f8d4:	0000f881 	.word	0x0000f881
    f8d8:	0000f881 	.word	0x0000f881
    f8dc:	0000f881 	.word	0x0000f881
    f8e0:	0000f881 	.word	0x0000f881
    f8e4:	0000f881 	.word	0x0000f881
    f8e8:	0000f881 	.word	0x0000f881
    f8ec:	0000f881 	.word	0x0000f881
    f8f0:	0000f91b 	.word	0x0000f91b
		switch (z_in_optname) {
    f8f4:	3901      	subs	r1, #1
    f8f6:	2905      	cmp	r1, #5
    f8f8:	d8c2      	bhi.n	f880 <z_to_nrf_optname+0xc>
    f8fa:	e8df f001 	tbb	[pc, r1]
    f8fe:	1503      	.short	0x1503
    f900:	210c1917 	.word	0x210c1917
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
    f904:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
    f906:	6013      	str	r3, [r2, #0]
    f908:	e00a      	b.n	f920 <z_to_nrf_optname+0xac>
		switch (z_in_optname) {
    f90a:	2914      	cmp	r1, #20
    f90c:	d005      	beq.n	f91a <z_to_nrf_optname+0xa6>
    f90e:	2919      	cmp	r1, #25
    f910:	d005      	beq.n	f91e <z_to_nrf_optname+0xaa>
    f912:	2904      	cmp	r1, #4
    f914:	d1b4      	bne.n	f880 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
    f916:	2304      	movs	r3, #4
    f918:	e7f5      	b.n	f906 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
    f91a:	2314      	movs	r3, #20
    f91c:	e7f3      	b.n	f906 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
    f91e:	6011      	str	r1, [r2, #0]
	int retval = 0;
    f920:	2000      	movs	r0, #0
			break;
    f922:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
    f924:	2303      	movs	r3, #3
    f926:	e7ee      	b.n	f906 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
    f928:	2305      	movs	r3, #5
    f92a:	e7ec      	b.n	f906 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
    f92c:	2306      	movs	r3, #6
    f92e:	e7ea      	b.n	f906 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
    f930:	2307      	movs	r3, #7
    f932:	e7e8      	b.n	f906 <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
    f934:	2902      	cmp	r1, #2
    f936:	d0e5      	beq.n	f904 <z_to_nrf_optname+0x90>
    f938:	2903      	cmp	r1, #3
    f93a:	d0f3      	beq.n	f924 <z_to_nrf_optname+0xb0>
    f93c:	2901      	cmp	r1, #1
    f93e:	d19f      	bne.n	f880 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
    f940:	2301      	movs	r3, #1
    f942:	e7e0      	b.n	f906 <z_to_nrf_optname+0x92>

0000f944 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
    f944:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
    f946:	4b03      	ldr	r3, [pc, #12]	; (f954 <nrf91_socket_iface_init+0x10>)
    f948:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
    f94a:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
    f94c:	4802      	ldr	r0, [pc, #8]	; (f958 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
    f94e:	769a      	strb	r2, [r3, #26]
	socket_offload_register(&nrf91_socket_offload_ops);
    f950:	f7fd bbfe 	b.w	d150 <socket_offload_register>
    f954:	200203f0 	.word	0x200203f0
    f958:	0001ee34 	.word	0x0001ee34

0000f95c <dk_set_leds_state.part.7>:
int dk_set_leds(u32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(u32_t leds_on_mask, u32_t leds_off_mask)
    f95c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f960:	4607      	mov	r7, r0
    f962:	4688      	mov	r8, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
    f964:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_write(led_devs[i],
    f966:	4e0f      	ldr	r6, [pc, #60]	; (f9a4 <dk_set_leds_state.part.7+0x48>)
						 led_pins[i].number, val);
    f968:	4d0f      	ldr	r5, [pc, #60]	; (f9a8 <dk_set_leds_state.part.7+0x4c>)
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
    f96a:	fa27 f304 	lsr.w	r3, r7, r4
    f96e:	fa28 f204 	lsr.w	r2, r8, r4
    f972:	431a      	orrs	r2, r3
    f974:	07d2      	lsls	r2, r2, #31
    f976:	d405      	bmi.n	f984 <dk_set_leds_state.part.7+0x28>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
    f978:	3401      	adds	r4, #1
    f97a:	2c04      	cmp	r4, #4
    f97c:	d1f5      	bne.n	f96a <dk_set_leds_state.part.7+0xe>
				return err;
			}
		}
	}

	return 0;
    f97e:	2000      	movs	r0, #0
}
    f980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						 led_pins[i].number, val);
    f984:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
			int err = gpio_pin_write(led_devs[i],
    f988:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    f98c:	7912      	ldrb	r2, [r2, #4]
				   u32_t pin, u32_t value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->write(port, access_op, pin, value);
    f98e:	43db      	mvns	r3, r3
    f990:	6841      	ldr	r1, [r0, #4]
    f992:	f003 0301 	and.w	r3, r3, #1
    f996:	f8d1 9004 	ldr.w	r9, [r1, #4]
    f99a:	2100      	movs	r1, #0
    f99c:	47c8      	blx	r9
			if (err) {
    f99e:	2800      	cmp	r0, #0
    f9a0:	d0ea      	beq.n	f978 <dk_set_leds_state.part.7+0x1c>
    f9a2:	e7ed      	b.n	f980 <dk_set_leds_state.part.7+0x24>
    f9a4:	20020458 	.word	0x20020458
    f9a8:	0001ee94 	.word	0x0001ee94

0000f9ac <button_pressed>:
{
    f9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    f9ae:	f04f 0320 	mov.w	r3, #32
    f9b2:	f3ef 8611 	mrs	r6, BASEPRI
    f9b6:	f383 8811 	msr	BASEPRI, r3
    f9ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f9be:	482a      	ldr	r0, [pc, #168]	; (fa68 <button_pressed+0xbc>)
    f9c0:	f00b fd60 	bl	1b484 <z_spin_lock_valid>
    f9c4:	b968      	cbnz	r0, f9e2 <button_pressed+0x36>
    f9c6:	234a      	movs	r3, #74	; 0x4a
    f9c8:	4a28      	ldr	r2, [pc, #160]	; (fa6c <button_pressed+0xc0>)
    f9ca:	4929      	ldr	r1, [pc, #164]	; (fa70 <button_pressed+0xc4>)
    f9cc:	4829      	ldr	r0, [pc, #164]	; (fa74 <button_pressed+0xc8>)
    f9ce:	f00d f9f3 	bl	1cdb8 <printk>
    f9d2:	4925      	ldr	r1, [pc, #148]	; (fa68 <button_pressed+0xbc>)
    f9d4:	4828      	ldr	r0, [pc, #160]	; (fa78 <button_pressed+0xcc>)
    f9d6:	f00d f9ef 	bl	1cdb8 <printk>
    f9da:	214a      	movs	r1, #74	; 0x4a
    f9dc:	4823      	ldr	r0, [pc, #140]	; (fa6c <button_pressed+0xc0>)
    f9de:	f00d fa1d 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
    f9e2:	4821      	ldr	r0, [pc, #132]	; (fa68 <button_pressed+0xbc>)
    f9e4:	f00b fd6c 	bl	1b4c0 <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
    f9e8:	2400      	movs	r4, #0
    f9ea:	4d24      	ldr	r5, [pc, #144]	; (fa7c <button_pressed+0xd0>)
			  button_pins[i].number);
    f9ec:	4f24      	ldr	r7, [pc, #144]	; (fa80 <button_pressed+0xd4>)
    f9ee:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
			err = gpio_pin_disable_callback(button_devs[i],
    f9f2:	f855 0b04 	ldr.w	r0, [r5], #4
    f9f6:	791a      	ldrb	r2, [r3, #4]
					      int access_op, u32_t pin)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->disable_callback == NULL) {
    f9f8:	6843      	ldr	r3, [r0, #4]
    f9fa:	695b      	ldr	r3, [r3, #20]
    f9fc:	b333      	cbz	r3, fa4c <button_pressed+0xa0>
		return -ENOTSUP;
	}

	return api->disable_callback(port, access_op, pin);
    f9fe:	2100      	movs	r1, #0
    fa00:	4798      	blx	r3
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
    fa02:	3401      	adds	r4, #1
    fa04:	2c04      	cmp	r4, #4
    fa06:	d001      	beq.n	fa0c <button_pressed+0x60>
    fa08:	2800      	cmp	r0, #0
    fa0a:	d0f0      	beq.n	f9ee <button_pressed+0x42>
	switch (state) {
    fa0c:	4b1d      	ldr	r3, [pc, #116]	; (fa84 <button_pressed+0xd8>)
    fa0e:	781a      	ldrb	r2, [r3, #0]
    fa10:	b9fa      	cbnz	r2, fa52 <button_pressed+0xa6>
		state = STATE_SCANNING;
    fa12:	2201      	movs	r2, #1
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    fa14:	491c      	ldr	r1, [pc, #112]	; (fa88 <button_pressed+0xdc>)
    fa16:	481d      	ldr	r0, [pc, #116]	; (fa8c <button_pressed+0xe0>)
    fa18:	701a      	strb	r2, [r3, #0]
    fa1a:	f00b ff07 	bl	1b82c <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fa1e:	4812      	ldr	r0, [pc, #72]	; (fa68 <button_pressed+0xbc>)
    fa20:	f00b fd3e 	bl	1b4a0 <z_spin_unlock_valid>
    fa24:	b968      	cbnz	r0, fa42 <button_pressed+0x96>
    fa26:	235d      	movs	r3, #93	; 0x5d
    fa28:	4a10      	ldr	r2, [pc, #64]	; (fa6c <button_pressed+0xc0>)
    fa2a:	4919      	ldr	r1, [pc, #100]	; (fa90 <button_pressed+0xe4>)
    fa2c:	4811      	ldr	r0, [pc, #68]	; (fa74 <button_pressed+0xc8>)
    fa2e:	f00d f9c3 	bl	1cdb8 <printk>
    fa32:	490d      	ldr	r1, [pc, #52]	; (fa68 <button_pressed+0xbc>)
    fa34:	4817      	ldr	r0, [pc, #92]	; (fa94 <button_pressed+0xe8>)
    fa36:	f00d f9bf 	bl	1cdb8 <printk>
    fa3a:	215d      	movs	r1, #93	; 0x5d
    fa3c:	480b      	ldr	r0, [pc, #44]	; (fa6c <button_pressed+0xc0>)
    fa3e:	f00d f9ed 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
    fa42:	f386 8811 	msr	BASEPRI, r6
    fa46:	f3bf 8f6f 	isb	sy
}
    fa4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    fa4c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    fa50:	e7d7      	b.n	fa02 <button_pressed+0x56>
		__ASSERT_NO_MSG(false);
    fa52:	23f2      	movs	r3, #242	; 0xf2
    fa54:	4a10      	ldr	r2, [pc, #64]	; (fa98 <button_pressed+0xec>)
    fa56:	4911      	ldr	r1, [pc, #68]	; (fa9c <button_pressed+0xf0>)
    fa58:	4806      	ldr	r0, [pc, #24]	; (fa74 <button_pressed+0xc8>)
    fa5a:	f00d f9ad 	bl	1cdb8 <printk>
    fa5e:	21f2      	movs	r1, #242	; 0xf2
    fa60:	480d      	ldr	r0, [pc, #52]	; (fa98 <button_pressed+0xec>)
    fa62:	f00d f9db 	bl	1ce1c <assert_post_action>
		break;
    fa66:	e7da      	b.n	fa1e <button_pressed+0x72>
    fa68:	20020468 	.word	0x20020468
    fa6c:	0001f904 	.word	0x0001f904
    fa70:	0001f923 	.word	0x0001f923
    fa74:	0001f722 	.word	0x0001f722
    fa78:	0001f938 	.word	0x0001f938
    fa7c:	200203f4 	.word	0x200203f4
    fa80:	0001ee74 	.word	0x0001ee74
    fa84:	20024f33 	.word	0x20024f33
    fa88:	20020424 	.word	0x20020424
    fa8c:	20024e4c 	.word	0x20024e4c
    fa90:	0001f950 	.word	0x0001f950
    fa94:	0001f967 	.word	0x0001f967
    fa98:	00020105 	.word	0x00020105
    fa9c:	00020517 	.word	0x00020517

0000faa0 <buttons_scan_fn>:
{
    faa0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	u32_t ret = 0;
    faa4:	2400      	movs	r4, #0
    faa6:	4f56      	ldr	r7, [pc, #344]	; (fc00 <buttons_scan_fn+0x160>)
			button_devs[i], button_pins[i].number, &val)) {
    faa8:	f8df 919c 	ldr.w	r9, [pc, #412]	; fc48 <buttons_scan_fn+0x1a8>
{
    faac:	463e      	mov	r6, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    faae:	4625      	mov	r5, r4
    fab0:	46c8      	mov	r8, r9
			button_devs[i], button_pins[i].number, &val)) {
    fab2:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
		if (gpio_pin_read(
    fab6:	f856 0b04 	ldr.w	r0, [r6], #4
    faba:	791a      	ldrb	r2, [r3, #4]
	return api->read(port, access_op, pin, value);
    fabc:	6843      	ldr	r3, [r0, #4]
    fabe:	2100      	movs	r1, #0
    fac0:	f8d3 a008 	ldr.w	sl, [r3, #8]
    fac4:	ab01      	add	r3, sp, #4
    fac6:	47d0      	blx	sl
    fac8:	b370      	cbz	r0, fb28 <buttons_scan_fn+0x88>
			return 0;
    faca:	2400      	movs	r4, #0
    facc:	4b4d      	ldr	r3, [pc, #308]	; (fc04 <buttons_scan_fn+0x164>)
    face:	e8d3 2fef 	ldaex	r2, [r3]
    fad2:	e8c3 4fe1 	stlex	r1, r4, [r3]
    fad6:	2900      	cmp	r1, #0
    fad8:	d1f9      	bne.n	face <buttons_scan_fn+0x2e>
	if (!initial_run) {
    fada:	4b4b      	ldr	r3, [pc, #300]	; (fc08 <buttons_scan_fn+0x168>)
    fadc:	f8df 916c 	ldr.w	r9, [pc, #364]	; fc4c <buttons_scan_fn+0x1ac>
    fae0:	781a      	ldrb	r2, [r3, #0]
    fae2:	2a00      	cmp	r2, #0
    fae4:	d132      	bne.n	fb4c <buttons_scan_fn+0xac>
		if (button_scan != last_button_scan) {
    fae6:	f8d9 6000 	ldr.w	r6, [r9]
    faea:	42a6      	cmp	r6, r4
    faec:	d011      	beq.n	fb12 <buttons_scan_fn+0x72>
	if (button_handler_cb != NULL) {
    faee:	4b47      	ldr	r3, [pc, #284]	; (fc0c <buttons_scan_fn+0x16c>)
			u32_t has_changed = (button_scan ^ last_button_scan);
    faf0:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
    faf2:	681b      	ldr	r3, [r3, #0]
    faf4:	b113      	cbz	r3, fafc <buttons_scan_fn+0x5c>
		button_handler_cb(button_state, has_changed);
    faf6:	4631      	mov	r1, r6
    faf8:	4620      	mov	r0, r4
    fafa:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
    fafc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fb00:	4843      	ldr	r0, [pc, #268]	; (fc10 <buttons_scan_fn+0x170>)
    fb02:	f009 ff5d 	bl	199c0 <z_impl_k_mutex_lock>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
    fb06:	4b43      	ldr	r3, [pc, #268]	; (fc14 <buttons_scan_fn+0x174>)
    fb08:	681d      	ldr	r5, [r3, #0]
    fb0a:	b9b5      	cbnz	r5, fb3a <buttons_scan_fn+0x9a>
	return z_impl_k_mutex_unlock(mutex);
    fb0c:	4840      	ldr	r0, [pc, #256]	; (fc10 <buttons_scan_fn+0x170>)
    fb0e:	f00a f835 	bl	19b7c <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
    fb12:	f8c9 4000 	str.w	r4, [r9]
	if (button_scan != 0) {
    fb16:	b1e4      	cbz	r4, fb52 <buttons_scan_fn+0xb2>
    fb18:	220a      	movs	r2, #10
    fb1a:	493f      	ldr	r1, [pc, #252]	; (fc18 <buttons_scan_fn+0x178>)
    fb1c:	483f      	ldr	r0, [pc, #252]	; (fc1c <buttons_scan_fn+0x17c>)
    fb1e:	f00b fe85 	bl	1b82c <k_delayed_work_submit_to_queue>
}
    fb22:	b002      	add	sp, #8
    fb24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
    fb28:	9b01      	ldr	r3, [sp, #4]
    fb2a:	b913      	cbnz	r3, fb32 <buttons_scan_fn+0x92>
			ret |= 1U << i;
    fb2c:	2301      	movs	r3, #1
    fb2e:	40ab      	lsls	r3, r5
    fb30:	431c      	orrs	r4, r3
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    fb32:	3501      	adds	r5, #1
    fb34:	2d04      	cmp	r5, #4
    fb36:	d1bc      	bne.n	fab2 <buttons_scan_fn+0x12>
    fb38:	e7c8      	b.n	facc <buttons_scan_fn+0x2c>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
    fb3a:	3d04      	subs	r5, #4
    fb3c:	2d00      	cmp	r5, #0
    fb3e:	d0e5      	beq.n	fb0c <buttons_scan_fn+0x6c>
			handler->cb(button_state, has_changed);
    fb40:	682b      	ldr	r3, [r5, #0]
    fb42:	4631      	mov	r1, r6
    fb44:	4620      	mov	r0, r4
    fb46:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    fb48:	686d      	ldr	r5, [r5, #4]
	return node->next;
    fb4a:	e7de      	b.n	fb0a <buttons_scan_fn+0x6a>
		initial_run = false;
    fb4c:	2200      	movs	r2, #0
    fb4e:	701a      	strb	r2, [r3, #0]
    fb50:	e7df      	b.n	fb12 <buttons_scan_fn+0x72>
	__asm__ volatile(
    fb52:	f04f 0320 	mov.w	r3, #32
    fb56:	f3ef 8511 	mrs	r5, BASEPRI
    fb5a:	f383 8811 	msr	BASEPRI, r3
    fb5e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fb62:	482f      	ldr	r0, [pc, #188]	; (fc20 <buttons_scan_fn+0x180>)
    fb64:	f00b fc8e 	bl	1b484 <z_spin_lock_valid>
    fb68:	b968      	cbnz	r0, fb86 <buttons_scan_fn+0xe6>
    fb6a:	234a      	movs	r3, #74	; 0x4a
    fb6c:	4a2d      	ldr	r2, [pc, #180]	; (fc24 <buttons_scan_fn+0x184>)
    fb6e:	492e      	ldr	r1, [pc, #184]	; (fc28 <buttons_scan_fn+0x188>)
    fb70:	482e      	ldr	r0, [pc, #184]	; (fc2c <buttons_scan_fn+0x18c>)
    fb72:	f00d f921 	bl	1cdb8 <printk>
    fb76:	492a      	ldr	r1, [pc, #168]	; (fc20 <buttons_scan_fn+0x180>)
    fb78:	482d      	ldr	r0, [pc, #180]	; (fc30 <buttons_scan_fn+0x190>)
    fb7a:	f00d f91d 	bl	1cdb8 <printk>
    fb7e:	214a      	movs	r1, #74	; 0x4a
    fb80:	4828      	ldr	r0, [pc, #160]	; (fc24 <buttons_scan_fn+0x184>)
    fb82:	f00d f94b 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
    fb86:	4826      	ldr	r0, [pc, #152]	; (fc20 <buttons_scan_fn+0x180>)
    fb88:	f00b fc9a 	bl	1b4c0 <z_spin_lock_set_owner>
		switch (state) {
    fb8c:	4b29      	ldr	r3, [pc, #164]	; (fc34 <buttons_scan_fn+0x194>)
    fb8e:	781a      	ldrb	r2, [r3, #0]
    fb90:	2a01      	cmp	r2, #1
    fb92:	d12a      	bne.n	fbea <buttons_scan_fn+0x14a>
			state = STATE_WAITING;
    fb94:	2200      	movs	r2, #0
    fb96:	701a      	strb	r2, [r3, #0]
			  button_pins[i].number);
    fb98:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
			err = gpio_pin_enable_callback(button_devs[i],
    fb9c:	f857 0b04 	ldr.w	r0, [r7], #4
    fba0:	791a      	ldrb	r2, [r3, #4]
	if (api->enable_callback == NULL) {
    fba2:	6843      	ldr	r3, [r0, #4]
    fba4:	691b      	ldr	r3, [r3, #16]
    fba6:	b1eb      	cbz	r3, fbe4 <buttons_scan_fn+0x144>
	return api->enable_callback(port, access_op, pin);
    fba8:	2100      	movs	r1, #0
    fbaa:	4798      	blx	r3
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
    fbac:	3401      	adds	r4, #1
    fbae:	2c04      	cmp	r4, #4
    fbb0:	d001      	beq.n	fbb6 <buttons_scan_fn+0x116>
    fbb2:	2800      	cmp	r0, #0
    fbb4:	d0f0      	beq.n	fb98 <buttons_scan_fn+0xf8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fbb6:	481a      	ldr	r0, [pc, #104]	; (fc20 <buttons_scan_fn+0x180>)
    fbb8:	f00b fc72 	bl	1b4a0 <z_spin_unlock_valid>
    fbbc:	b968      	cbnz	r0, fbda <buttons_scan_fn+0x13a>
    fbbe:	235d      	movs	r3, #93	; 0x5d
    fbc0:	4a18      	ldr	r2, [pc, #96]	; (fc24 <buttons_scan_fn+0x184>)
    fbc2:	491d      	ldr	r1, [pc, #116]	; (fc38 <buttons_scan_fn+0x198>)
    fbc4:	4819      	ldr	r0, [pc, #100]	; (fc2c <buttons_scan_fn+0x18c>)
    fbc6:	f00d f8f7 	bl	1cdb8 <printk>
    fbca:	4915      	ldr	r1, [pc, #84]	; (fc20 <buttons_scan_fn+0x180>)
    fbcc:	481b      	ldr	r0, [pc, #108]	; (fc3c <buttons_scan_fn+0x19c>)
    fbce:	f00d f8f3 	bl	1cdb8 <printk>
    fbd2:	215d      	movs	r1, #93	; 0x5d
    fbd4:	4813      	ldr	r0, [pc, #76]	; (fc24 <buttons_scan_fn+0x184>)
    fbd6:	f00d f921 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
    fbda:	f385 8811 	msr	BASEPRI, r5
    fbde:	f3bf 8f6f 	isb	sy
}
    fbe2:	e79e      	b.n	fb22 <buttons_scan_fn+0x82>
		return -ENOTSUP;
    fbe4:	f06f 0022 	mvn.w	r0, #34	; 0x22
    fbe8:	e7e0      	b.n	fbac <buttons_scan_fn+0x10c>
			__ASSERT_NO_MSG(false);
    fbea:	23a8      	movs	r3, #168	; 0xa8
    fbec:	4a14      	ldr	r2, [pc, #80]	; (fc40 <buttons_scan_fn+0x1a0>)
    fbee:	4915      	ldr	r1, [pc, #84]	; (fc44 <buttons_scan_fn+0x1a4>)
    fbf0:	480e      	ldr	r0, [pc, #56]	; (fc2c <buttons_scan_fn+0x18c>)
    fbf2:	f00d f8e1 	bl	1cdb8 <printk>
    fbf6:	21a8      	movs	r1, #168	; 0xa8
    fbf8:	4811      	ldr	r0, [pc, #68]	; (fc40 <buttons_scan_fn+0x1a0>)
    fbfa:	f00d f90f 	bl	1ce1c <assert_post_action>
			break;
    fbfe:	e7da      	b.n	fbb6 <buttons_scan_fn+0x116>
    fc00:	200203f4 	.word	0x200203f4
    fc04:	2002046c 	.word	0x2002046c
    fc08:	2002c47c 	.word	0x2002c47c
    fc0c:	20020404 	.word	0x20020404
    fc10:	20020408 	.word	0x20020408
    fc14:	2002041c 	.word	0x2002041c
    fc18:	20020424 	.word	0x20020424
    fc1c:	20024e4c 	.word	0x20024e4c
    fc20:	20020468 	.word	0x20020468
    fc24:	0001f904 	.word	0x0001f904
    fc28:	0001f923 	.word	0x0001f923
    fc2c:	0001f722 	.word	0x0001f722
    fc30:	0001f938 	.word	0x0001f938
    fc34:	20024f33 	.word	0x20024f33
    fc38:	0001f950 	.word	0x0001f950
    fc3c:	0001f967 	.word	0x0001f967
    fc40:	00020105 	.word	0x00020105
    fc44:	00020517 	.word	0x00020517
    fc48:	0001ee74 	.word	0x0001ee74
    fc4c:	20020450 	.word	0x20020450

0000fc50 <dk_leds_init>:
{
    fc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
    fc52:	2500      	movs	r5, #0
    fc54:	4c0e      	ldr	r4, [pc, #56]	; (fc90 <dk_leds_init+0x40>)
    fc56:	4e0f      	ldr	r6, [pc, #60]	; (fc94 <dk_leds_init+0x44>)
		led_devs[i] = device_get_binding(led_pins[i].port);
    fc58:	6820      	ldr	r0, [r4, #0]
    fc5a:	f009 fa25 	bl	190a8 <z_impl_device_get_binding>
    fc5e:	f846 0b04 	str.w	r0, [r6], #4
		if (!led_devs[i]) {
    fc62:	b188      	cbz	r0, fc88 <dk_leds_init+0x38>
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
    fc64:	7922      	ldrb	r2, [r4, #4]
	return api->config(port, access_op, pin, flags);
    fc66:	6843      	ldr	r3, [r0, #4]
    fc68:	2100      	movs	r1, #0
    fc6a:	681f      	ldr	r7, [r3, #0]
    fc6c:	2301      	movs	r3, #1
    fc6e:	47b8      	blx	r7
		if (err) {
    fc70:	4603      	mov	r3, r0
    fc72:	b958      	cbnz	r0, fc8c <dk_leds_init+0x3c>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
    fc74:	3501      	adds	r5, #1
    fc76:	2d04      	cmp	r5, #4
    fc78:	f104 0408 	add.w	r4, r4, #8
    fc7c:	d1ec      	bne.n	fc58 <dk_leds_init+0x8>
}
    fc7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    fc82:	210f      	movs	r1, #15
    fc84:	f7ff be6a 	b.w	f95c <dk_set_leds_state.part.7>
			return -ENODEV;
    fc88:	f06f 0312 	mvn.w	r3, #18
}
    fc8c:	4618      	mov	r0, r3
    fc8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fc90:	0001ee94 	.word	0x0001ee94
    fc94:	20020458 	.word	0x20020458

0000fc98 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    fc98:	4b05      	ldr	r3, [pc, #20]	; (fcb0 <dk_read_buttons+0x18>)
    fc9a:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
    fc9e:	b100      	cbz	r0, fca2 <dk_read_buttons+0xa>
		*button_state = current_state;
    fca0:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
    fca2:	4804      	ldr	r0, [pc, #16]	; (fcb4 <dk_read_buttons+0x1c>)
    fca4:	b111      	cbz	r1, fcac <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
    fca6:	6802      	ldr	r2, [r0, #0]
    fca8:	405a      	eors	r2, r3
    fcaa:	600a      	str	r2, [r1, #0]
	last_state = current_state;
    fcac:	6003      	str	r3, [r0, #0]
}
    fcae:	4770      	bx	lr
    fcb0:	2002046c 	.word	0x2002046c
    fcb4:	20020454 	.word	0x20020454

0000fcb8 <dk_buttons_init>:
{
    fcb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
    fcbc:	4b3f      	ldr	r3, [pc, #252]	; (fdbc <dk_buttons_init+0x104>)
    fcbe:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
    fcc0:	4d3f      	ldr	r5, [pc, #252]	; (fdc0 <dk_buttons_init+0x108>)
    fcc2:	4f40      	ldr	r7, [pc, #256]	; (fdc4 <dk_buttons_init+0x10c>)
    fcc4:	4840      	ldr	r0, [pc, #256]	; (fdc8 <dk_buttons_init+0x110>)
    fcc6:	f00e fd85 	bl	1e7d4 <z_impl_k_mutex_init>
    fcca:	46b9      	mov	r9, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    fccc:	2600      	movs	r6, #0
    fcce:	46a8      	mov	r8, r5
		button_devs[i] = device_get_binding(button_pins[i].port);
    fcd0:	6828      	ldr	r0, [r5, #0]
    fcd2:	f009 f9e9 	bl	190a8 <z_impl_device_get_binding>
    fcd6:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
    fcda:	2800      	cmp	r0, #0
    fcdc:	d06a      	beq.n	fdb4 <dk_buttons_init+0xfc>
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
    fcde:	792a      	ldrb	r2, [r5, #4]
    fce0:	6843      	ldr	r3, [r0, #4]
    fce2:	2100      	movs	r1, #0
    fce4:	681c      	ldr	r4, [r3, #0]
    fce6:	f44f 7380 	mov.w	r3, #256	; 0x100
    fcea:	47a0      	blx	r4
		if (err) {
    fcec:	4604      	mov	r4, r0
    fcee:	b9b8      	cbnz	r0, fd20 <dk_buttons_init+0x68>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    fcf0:	3601      	adds	r6, #1
    fcf2:	2e04      	cmp	r6, #4
    fcf4:	f105 0508 	add.w	r5, r5, #8
    fcf8:	d1ea      	bne.n	fcd0 <dk_buttons_init+0x18>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
    fcfa:	4605      	mov	r5, r0
    fcfc:	4e31      	ldr	r6, [pc, #196]	; (fdc4 <dk_buttons_init+0x10c>)
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
    fcfe:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
    fd02:	f856 0b04 	ldr.w	r0, [r6], #4
    fd06:	791a      	ldrb	r2, [r3, #4]
    fd08:	6843      	ldr	r3, [r0, #4]
    fd0a:	2100      	movs	r1, #0
    fd0c:	681c      	ldr	r4, [r3, #0]
    fd0e:	f44f 7381 	mov.w	r3, #258	; 0x102
    fd12:	47a0      	blx	r4
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
    fd14:	3501      	adds	r5, #1
    fd16:	2d04      	cmp	r5, #4
    fd18:	4604      	mov	r4, r0
    fd1a:	d004      	beq.n	fd26 <dk_buttons_init+0x6e>
    fd1c:	2800      	cmp	r0, #0
    fd1e:	d0ee      	beq.n	fcfe <dk_buttons_init+0x46>
}
    fd20:	4620      	mov	r0, r4
    fd22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (err) {
    fd26:	2800      	cmp	r0, #0
    fd28:	d1fa      	bne.n	fd20 <dk_buttons_init+0x68>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    fd2a:	4605      	mov	r5, r0
	u32_t pin_mask = 0;
    fd2c:	4681      	mov	r9, r0
		pin_mask |= BIT(button_pins[i].number);
    fd2e:	f04f 0b01 	mov.w	fp, #1
    fd32:	f8df a090 	ldr.w	sl, [pc, #144]	; fdc4 <dk_buttons_init+0x10c>
			button_pins[i].number);
    fd36:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
		err = gpio_pin_disable_callback(button_devs[i],
    fd3a:	f85a 0b04 	ldr.w	r0, [sl], #4
			button_pins[i].number);
    fd3e:	791e      	ldrb	r6, [r3, #4]
	if (api->disable_callback == NULL) {
    fd40:	6843      	ldr	r3, [r0, #4]
    fd42:	695b      	ldr	r3, [r3, #20]
    fd44:	b913      	cbnz	r3, fd4c <dk_buttons_init+0x94>
		return -ENOTSUP;
    fd46:	f06f 0422 	mvn.w	r4, #34	; 0x22
    fd4a:	e7e9      	b.n	fd20 <dk_buttons_init+0x68>
	return api->disable_callback(port, access_op, pin);
    fd4c:	4632      	mov	r2, r6
    fd4e:	2100      	movs	r1, #0
    fd50:	4798      	blx	r3
		if (err) {
    fd52:	4604      	mov	r4, r0
    fd54:	2800      	cmp	r0, #0
    fd56:	d1e3      	bne.n	fd20 <dk_buttons_init+0x68>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    fd58:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
    fd5a:	fa0b f606 	lsl.w	r6, fp, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    fd5e:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
    fd60:	ea49 0906 	orr.w	r9, r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    fd64:	d1e7      	bne.n	fd36 <dk_buttons_init+0x7e>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    fd66:	4606      	mov	r6, r0
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    fd68:	4d18      	ldr	r5, [pc, #96]	; (fdcc <dk_buttons_init+0x114>)
    fd6a:	4b19      	ldr	r3, [pc, #100]	; (fdd0 <dk_buttons_init+0x118>)
	callback->pin_mask = pin_mask;
    fd6c:	e9c5 3901 	strd	r3, r9, [r5, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
    fd70:	f857 0b04 	ldr.w	r0, [r7], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->manage_callback == NULL) {
    fd74:	6843      	ldr	r3, [r0, #4]
    fd76:	68db      	ldr	r3, [r3, #12]
    fd78:	2b00      	cmp	r3, #0
    fd7a:	d0e4      	beq.n	fd46 <dk_buttons_init+0x8e>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    fd7c:	2201      	movs	r2, #1
    fd7e:	4629      	mov	r1, r5
    fd80:	4798      	blx	r3
		if (err) {
    fd82:	4604      	mov	r4, r0
    fd84:	2800      	cmp	r0, #0
    fd86:	d1cb      	bne.n	fd20 <dk_buttons_init+0x68>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    fd88:	3601      	adds	r6, #1
    fd8a:	2e04      	cmp	r6, #4
    fd8c:	d1f0      	bne.n	fd70 <dk_buttons_init+0xb8>
	k_delayed_work_init(&buttons_scan, buttons_scan_fn);
    fd8e:	4911      	ldr	r1, [pc, #68]	; (fdd4 <dk_buttons_init+0x11c>)
    fd90:	4811      	ldr	r0, [pc, #68]	; (fdd8 <dk_buttons_init+0x120>)
    fd92:	f00e fe07 	bl	1e9a4 <k_delayed_work_init>
	state = STATE_SCANNING;
    fd96:	2201      	movs	r2, #1
    fd98:	4b10      	ldr	r3, [pc, #64]	; (fddc <dk_buttons_init+0x124>)
    fd9a:	490f      	ldr	r1, [pc, #60]	; (fdd8 <dk_buttons_init+0x120>)
    fd9c:	701a      	strb	r2, [r3, #0]
    fd9e:	4810      	ldr	r0, [pc, #64]	; (fde0 <dk_buttons_init+0x128>)
    fda0:	4622      	mov	r2, r4
    fda2:	f00b fd43 	bl	1b82c <k_delayed_work_submit_to_queue>
	if (err) {
    fda6:	4604      	mov	r4, r0
    fda8:	2800      	cmp	r0, #0
    fdaa:	d1b9      	bne.n	fd20 <dk_buttons_init+0x68>
	dk_read_buttons(NULL, NULL);
    fdac:	4601      	mov	r1, r0
    fdae:	f7ff ff73 	bl	fc98 <dk_read_buttons>
	return 0;
    fdb2:	e7b5      	b.n	fd20 <dk_buttons_init+0x68>
			return -ENODEV;
    fdb4:	f06f 0412 	mvn.w	r4, #18
    fdb8:	e7b2      	b.n	fd20 <dk_buttons_init+0x68>
    fdba:	bf00      	nop
    fdbc:	20020404 	.word	0x20020404
    fdc0:	0001ee74 	.word	0x0001ee74
    fdc4:	200203f4 	.word	0x200203f4
    fdc8:	20020408 	.word	0x20020408
    fdcc:	20020444 	.word	0x20020444
    fdd0:	0000f9ad 	.word	0x0000f9ad
    fdd4:	0000faa1 	.word	0x0000faa1
    fdd8:	20020424 	.word	0x20020424
    fddc:	20024f33 	.word	0x20024f33
    fde0:	20024e4c 	.word	0x20024e4c

0000fde4 <dk_set_led>:

int dk_set_led(u8_t led_idx, u32_t val)
{
	int err;

	if (led_idx > ARRAY_SIZE(led_pins)) {
    fde4:	2804      	cmp	r0, #4
{
    fde6:	b430      	push	{r4, r5}
	if (led_idx > ARRAY_SIZE(led_pins)) {
    fde8:	d810      	bhi.n	fe0c <dk_set_led+0x28>
		LOG_ERR("LED index out of the range");
		return -EINVAL;
	}
	err = gpio_pin_write(led_devs[led_idx], led_pins[led_idx].number,
    fdea:	4a0a      	ldr	r2, [pc, #40]	; (fe14 <dk_set_led+0x30>)
    fdec:	4b0a      	ldr	r3, [pc, #40]	; (fe18 <dk_set_led+0x34>)
    fdee:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
    fdf2:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    fdf6:	7912      	ldrb	r2, [r2, #4]
	return api->write(port, access_op, pin, value);
    fdf8:	6863      	ldr	r3, [r4, #4]
    fdfa:	4620      	mov	r0, r4
    fdfc:	685d      	ldr	r5, [r3, #4]
    fdfe:	fab1 f381 	clz	r3, r1
    fe02:	46ac      	mov	ip, r5
			IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS) ? !val : val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
    fe04:	bc30      	pop	{r4, r5}
    fe06:	095b      	lsrs	r3, r3, #5
    fe08:	2100      	movs	r1, #0
    fe0a:	4760      	bx	ip
    fe0c:	f06f 0015 	mvn.w	r0, #21
    fe10:	bc30      	pop	{r4, r5}
    fe12:	4770      	bx	lr
    fe14:	0001ee94 	.word	0x0001ee94
    fe18:	20020458 	.word	0x20020458

0000fe1c <close>:
{
    fe1c:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
    fe1e:	4c10      	ldr	r4, [pc, #64]	; (fe60 <close+0x44>)
{
    fe20:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
    fe22:	6823      	ldr	r3, [r4, #0]
    fe24:	b94b      	cbnz	r3, fe3a <close+0x1e>
    fe26:	490f      	ldr	r1, [pc, #60]	; (fe64 <close+0x48>)
    fe28:	480f      	ldr	r0, [pc, #60]	; (fe68 <close+0x4c>)
    fe2a:	2321      	movs	r3, #33	; 0x21
    fe2c:	4a0f      	ldr	r2, [pc, #60]	; (fe6c <close+0x50>)
    fe2e:	f00c ffc3 	bl	1cdb8 <printk>
    fe32:	2121      	movs	r1, #33	; 0x21
    fe34:	480d      	ldr	r0, [pc, #52]	; (fe6c <close+0x50>)
    fe36:	f00c fff1 	bl	1ce1c <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
    fe3a:	6823      	ldr	r3, [r4, #0]
    fe3c:	685b      	ldr	r3, [r3, #4]
    fe3e:	b94b      	cbnz	r3, fe54 <close+0x38>
    fe40:	490b      	ldr	r1, [pc, #44]	; (fe70 <close+0x54>)
    fe42:	4809      	ldr	r0, [pc, #36]	; (fe68 <close+0x4c>)
    fe44:	2322      	movs	r3, #34	; 0x22
    fe46:	4a09      	ldr	r2, [pc, #36]	; (fe6c <close+0x50>)
    fe48:	f00c ffb6 	bl	1cdb8 <printk>
    fe4c:	2122      	movs	r1, #34	; 0x22
    fe4e:	4807      	ldr	r0, [pc, #28]	; (fe6c <close+0x50>)
    fe50:	f00c ffe4 	bl	1ce1c <assert_post_action>
	return socket_ops->close(sock);
    fe54:	6823      	ldr	r3, [r4, #0]
    fe56:	4628      	mov	r0, r5
}
    fe58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
    fe5c:	685b      	ldr	r3, [r3, #4]
    fe5e:	4718      	bx	r3
    fe60:	20020184 	.word	0x20020184
    fe64:	0001f717 	.word	0x0001f717
    fe68:	0001f722 	.word	0x0001f722
    fe6c:	0001f6ee 	.word	0x0001f6ee
    fe70:	0001f6c7 	.word	0x0001f6c7

0000fe74 <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
    fe74:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
    fe76:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
    fe78:	b118      	cbz	r0, fe82 <callback_worker+0xe>
		data->callback(data->data);
    fe7a:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
    fe7e:	300c      	adds	r0, #12
    fe80:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
    fe82:	a901      	add	r1, sp, #4
    fe84:	4802      	ldr	r0, [pc, #8]	; (fe90 <callback_worker+0x1c>)
    fe86:	f009 fadd 	bl	19444 <k_mem_slab_free>
}
    fe8a:	b003      	add	sp, #12
    fe8c:	f85d fb04 	ldr.w	pc, [sp], #4
    fe90:	2002c5a4 	.word	0x2002c5a4

0000fe94 <at_write>:
		}
	}
}

static inline int at_write(const char *const cmd, enum at_cmd_state *state)
{
    fe94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    fe98:	4607      	mov	r7, r0
    fe9a:	460d      	mov	r5, r1
	int bytes_sent;
	int bytes_to_send = strlen(cmd);
    fe9c:	f00d fcac 	bl	1d7f8 <strlen>
	__ASSERT_NO_MSG(socket_ops);
    fea0:	4c1e      	ldr	r4, [pc, #120]	; (ff1c <at_write+0x88>)
	struct return_state_object ret;

	LOG_DBG("Sending command %s", log_strdup(cmd));

	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
    fea2:	4b1f      	ldr	r3, [pc, #124]	; (ff20 <at_write+0x8c>)
	int bytes_to_send = strlen(cmd);
    fea4:	4680      	mov	r8, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
    fea6:	681e      	ldr	r6, [r3, #0]
    fea8:	6823      	ldr	r3, [r4, #0]
    feaa:	b94b      	cbnz	r3, fec0 <at_write+0x2c>
    feac:	491d      	ldr	r1, [pc, #116]	; (ff24 <at_write+0x90>)
    feae:	481e      	ldr	r0, [pc, #120]	; (ff28 <at_write+0x94>)
    feb0:	237e      	movs	r3, #126	; 0x7e
    feb2:	4a1e      	ldr	r2, [pc, #120]	; (ff2c <at_write+0x98>)
    feb4:	f00c ff80 	bl	1cdb8 <printk>
    feb8:	217e      	movs	r1, #126	; 0x7e
    feba:	481c      	ldr	r0, [pc, #112]	; (ff2c <at_write+0x98>)
    febc:	f00c ffae 	bl	1ce1c <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
    fec0:	6823      	ldr	r3, [r4, #0]
    fec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    fec4:	b94b      	cbnz	r3, feda <at_write+0x46>
    fec6:	491a      	ldr	r1, [pc, #104]	; (ff30 <at_write+0x9c>)
    fec8:	4817      	ldr	r0, [pc, #92]	; (ff28 <at_write+0x94>)
    feca:	237f      	movs	r3, #127	; 0x7f
    fecc:	4a17      	ldr	r2, [pc, #92]	; (ff2c <at_write+0x98>)
    fece:	f00c ff73 	bl	1cdb8 <printk>
    fed2:	217f      	movs	r1, #127	; 0x7f
    fed4:	4815      	ldr	r0, [pc, #84]	; (ff2c <at_write+0x98>)
    fed6:	f00c ffa1 	bl	1ce1c <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
    feda:	6823      	ldr	r3, [r4, #0]
    fedc:	4642      	mov	r2, r8
    fede:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    fee0:	4639      	mov	r1, r7
    fee2:	2300      	movs	r3, #0
    fee4:	4630      	mov	r0, r6
    fee6:	47a0      	blx	r4

	if (bytes_sent == -1) {
    fee8:	3001      	adds	r0, #1
    feea:	d10f      	bne.n	ff0c <at_write+0x78>
    feec:	f009 f902 	bl	190f4 <z_impl_z_errno>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
		ret.code  = -errno;
    fef0:	6803      	ldr	r3, [r0, #0]
    fef2:	425b      	negs	r3, r3
    fef4:	9300      	str	r3, [sp, #0]
		ret.state = AT_CMD_ERROR;
    fef6:	2301      	movs	r3, #1
    fef8:	f88d 3004 	strb.w	r3, [sp, #4]
				"same as expected (%d)",
				bytes_sent, bytes_to_send);
		}
	}

	if (state) {
    fefc:	b115      	cbz	r5, ff04 <at_write+0x70>
		*state = ret.state;
    fefe:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ff02:	702b      	strb	r3, [r5, #0]
	}

	return ret.code;
}
    ff04:	9800      	ldr	r0, [sp, #0]
    ff06:	b002      	add	sp, #8
    ff08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_msgq_get(msgq, data, timeout);
    ff0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ff10:	4669      	mov	r1, sp
    ff12:	4808      	ldr	r0, [pc, #32]	; (ff34 <at_write+0xa0>)
    ff14:	f009 fca8 	bl	19868 <z_impl_k_msgq_get>
    ff18:	e7f0      	b.n	fefc <at_write+0x68>
    ff1a:	bf00      	nop
    ff1c:	20020184 	.word	0x20020184
    ff20:	20020470 	.word	0x20020470
    ff24:	0001f717 	.word	0x0001f717
    ff28:	0001f722 	.word	0x0001f722
    ff2c:	0001f6ee 	.word	0x0001f6ee
    ff30:	00020151 	.word	0x00020151
    ff34:	2002c644 	.word	0x2002c644

0000ff38 <open_socket>:
{
    ff38:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(socket_ops);
    ff3a:	4c16      	ldr	r4, [pc, #88]	; (ff94 <open_socket+0x5c>)
    ff3c:	6823      	ldr	r3, [r4, #0]
    ff3e:	b94b      	cbnz	r3, ff54 <open_socket+0x1c>
    ff40:	4915      	ldr	r1, [pc, #84]	; (ff98 <open_socket+0x60>)
    ff42:	4816      	ldr	r0, [pc, #88]	; (ff9c <open_socket+0x64>)
    ff44:	2319      	movs	r3, #25
    ff46:	4a16      	ldr	r2, [pc, #88]	; (ffa0 <open_socket+0x68>)
    ff48:	f00c ff36 	bl	1cdb8 <printk>
    ff4c:	2119      	movs	r1, #25
    ff4e:	4814      	ldr	r0, [pc, #80]	; (ffa0 <open_socket+0x68>)
    ff50:	f00c ff64 	bl	1ce1c <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
    ff54:	6823      	ldr	r3, [r4, #0]
    ff56:	681b      	ldr	r3, [r3, #0]
    ff58:	b94b      	cbnz	r3, ff6e <open_socket+0x36>
    ff5a:	4912      	ldr	r1, [pc, #72]	; (ffa4 <open_socket+0x6c>)
    ff5c:	480f      	ldr	r0, [pc, #60]	; (ff9c <open_socket+0x64>)
    ff5e:	231a      	movs	r3, #26
    ff60:	4a0f      	ldr	r2, [pc, #60]	; (ffa0 <open_socket+0x68>)
    ff62:	f00c ff29 	bl	1cdb8 <printk>
    ff66:	211a      	movs	r1, #26
    ff68:	480d      	ldr	r0, [pc, #52]	; (ffa0 <open_socket+0x68>)
    ff6a:	f00c ff57 	bl	1ce1c <assert_post_action>
	return socket_ops->socket(family, type, proto);
    ff6e:	6823      	ldr	r3, [r4, #0]
    ff70:	f240 2201 	movw	r2, #513	; 0x201
    ff74:	681b      	ldr	r3, [r3, #0]
    ff76:	2100      	movs	r1, #0
    ff78:	2066      	movs	r0, #102	; 0x66
    ff7a:	4798      	blx	r3
	common_socket_fd = socket(AF_LTE, 0, NPROTO_AT);
    ff7c:	4b0a      	ldr	r3, [pc, #40]	; (ffa8 <open_socket+0x70>)
    ff7e:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
    ff80:	3001      	adds	r0, #1
    ff82:	d104      	bne.n	ff8e <open_socket+0x56>
    ff84:	f009 f8b6 	bl	190f4 <z_impl_z_errno>
		return -errno;
    ff88:	6800      	ldr	r0, [r0, #0]
    ff8a:	4240      	negs	r0, r0
}
    ff8c:	bd10      	pop	{r4, pc}
	return 0;
    ff8e:	2000      	movs	r0, #0
    ff90:	e7fc      	b.n	ff8c <open_socket+0x54>
    ff92:	bf00      	nop
    ff94:	20020184 	.word	0x20020184
    ff98:	0001f717 	.word	0x0001f717
    ff9c:	0001f722 	.word	0x0001f722
    ffa0:	0001f6ee 	.word	0x0001f6ee
    ffa4:	0001f6a3 	.word	0x0001f6a3
    ffa8:	20020470 	.word	0x20020470

0000ffac <at_cmd_driver_init>:

	k_sem_give(&cmd_pending);
}

static int at_cmd_driver_init(struct device *dev)
{
    ffac:	b510      	push	{r4, lr}
    ffae:	b086      	sub	sp, #24
	int err;

	ARG_UNUSED(dev);

	err = open_socket();
    ffb0:	f7ff ffc2 	bl	ff38 <open_socket>
	if (err) {
    ffb4:	4604      	mov	r4, r0
    ffb6:	b968      	cbnz	r0, ffd4 <at_cmd_driver_init+0x28>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    ffb8:	230a      	movs	r3, #10
    ffba:	e9cd 0004 	strd	r0, r0, [sp, #16]
    ffbe:	e9cd 0302 	strd	r0, r3, [sp, #8]
    ffc2:	e9cd 0000 	strd	r0, r0, [sp]
    ffc6:	4b05      	ldr	r3, [pc, #20]	; (ffdc <at_cmd_driver_init+0x30>)
    ffc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ffcc:	4904      	ldr	r1, [pc, #16]	; (ffe0 <at_cmd_driver_init+0x34>)
    ffce:	4805      	ldr	r0, [pc, #20]	; (ffe4 <at_cmd_driver_init+0x38>)
    ffd0:	f00b fad6 	bl	1b580 <z_impl_k_thread_create>
			THREAD_PRIORITY, 0, K_NO_WAIT);

	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
    ffd4:	4620      	mov	r0, r4
    ffd6:	b006      	add	sp, #24
    ffd8:	bd10      	pop	{r4, pc}
    ffda:	bf00      	nop
    ffdc:	0000ffe9 	.word	0x0000ffe9
    ffe0:	20026488 	.word	0x20026488
    ffe4:	20020484 	.word	0x20020484

0000ffe8 <socket_thread_fn>:
{
    ffe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
		bytes_read = recv(common_socket_fd, item->data,
    ffec:	4e77      	ldr	r6, [pc, #476]	; (101cc <socket_thread_fn+0x1e4>)
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
    ffee:	f8df 8224 	ldr.w	r8, [pc, #548]	; 10214 <socket_thread_fn+0x22c>
    fff2:	4637      	mov	r7, r6
    fff4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fff8:	a901      	add	r1, sp, #4
    fffa:	4640      	mov	r0, r8
    fffc:	f009 f9be 	bl	1937c <k_mem_slab_alloc>
		ret.code  = 0;
   10000:	2300      	movs	r3, #0
		item->callback = NULL;
   10002:	9d01      	ldr	r5, [sp, #4]
	__ASSERT_NO_MSG(socket_ops);
   10004:	4c72      	ldr	r4, [pc, #456]	; (101d0 <socket_thread_fn+0x1e8>)
   10006:	f8c5 3a98 	str.w	r3, [r5, #2712]	; 0xa98
		ret.code  = 0;
   1000a:	9302      	str	r3, [sp, #8]
		ret.state = AT_CMD_OK;
   1000c:	f88d 300c 	strb.w	r3, [sp, #12]
   10010:	6823      	ldr	r3, [r4, #0]
		bytes_read = recv(common_socket_fd, item->data,
   10012:	f8d6 9000 	ldr.w	r9, [r6]
   10016:	350c      	adds	r5, #12
   10018:	b94b      	cbnz	r3, 1002e <socket_thread_fn+0x46>
   1001a:	496e      	ldr	r1, [pc, #440]	; (101d4 <socket_thread_fn+0x1ec>)
   1001c:	486e      	ldr	r0, [pc, #440]	; (101d8 <socket_thread_fn+0x1f0>)
   1001e:	2369      	movs	r3, #105	; 0x69
   10020:	4a6e      	ldr	r2, [pc, #440]	; (101dc <socket_thread_fn+0x1f4>)
   10022:	f00c fec9 	bl	1cdb8 <printk>
   10026:	2169      	movs	r1, #105	; 0x69
   10028:	486c      	ldr	r0, [pc, #432]	; (101dc <socket_thread_fn+0x1f4>)
   1002a:	f00c fef7 	bl	1ce1c <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   1002e:	6823      	ldr	r3, [r4, #0]
   10030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10032:	b94b      	cbnz	r3, 10048 <socket_thread_fn+0x60>
   10034:	496a      	ldr	r1, [pc, #424]	; (101e0 <socket_thread_fn+0x1f8>)
   10036:	4868      	ldr	r0, [pc, #416]	; (101d8 <socket_thread_fn+0x1f0>)
   10038:	236a      	movs	r3, #106	; 0x6a
   1003a:	4a68      	ldr	r2, [pc, #416]	; (101dc <socket_thread_fn+0x1f4>)
   1003c:	f00c febc 	bl	1cdb8 <printk>
   10040:	216a      	movs	r1, #106	; 0x6a
   10042:	4866      	ldr	r0, [pc, #408]	; (101dc <socket_thread_fn+0x1f4>)
   10044:	f00c feea 	bl	1ce1c <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   10048:	6823      	ldr	r3, [r4, #0]
   1004a:	f640 228c 	movw	r2, #2700	; 0xa8c
   1004e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   10050:	4629      	mov	r1, r5
   10052:	2300      	movs	r3, #0
   10054:	4648      	mov	r0, r9
   10056:	47a0      	blx	r4
		if (bytes_read < 0) {
   10058:	2800      	cmp	r0, #0
   1005a:	da2e      	bge.n	100ba <socket_thread_fn+0xd2>
			if ((close(common_socket_fd) == 0) &&
   1005c:	6838      	ldr	r0, [r7, #0]
   1005e:	f7ff fedd 	bl	fe1c <close>
   10062:	bb20      	cbnz	r0, 100ae <socket_thread_fn+0xc6>
			    (open_socket() == 0)) {
   10064:	f7ff ff68 	bl	ff38 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   10068:	bb08      	cbnz	r0, 100ae <socket_thread_fn+0xc6>
				ret.state = AT_CMD_ERROR;
   1006a:	2301      	movs	r3, #1
   1006c:	f88d 300c 	strb.w	r3, [sp, #12]
   10070:	f009 f840 	bl	190f4 <z_impl_z_errno>
				ret.code  = -errno;
   10074:	6803      	ldr	r3, [r0, #0]
   10076:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
   10078:	9302      	str	r3, [sp, #8]
		if (item->callback == NULL) {
   1007a:	9901      	ldr	r1, [sp, #4]
   1007c:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
   10080:	2b00      	cmp	r3, #0
   10082:	d17a      	bne.n	1017a <socket_thread_fn+0x192>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
   10084:	a901      	add	r1, sp, #4
   10086:	4640      	mov	r0, r8
   10088:	f009 f9dc 	bl	19444 <k_mem_slab_free>
	return z_impl_k_sem_count_get(sem);
   1008c:	4b55      	ldr	r3, [pc, #340]	; (101e4 <socket_thread_fn+0x1fc>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
   1008e:	689b      	ldr	r3, [r3, #8]
   10090:	2b00      	cmp	r3, #0
   10092:	d1af      	bne.n	fff4 <socket_thread_fn+0xc>
   10094:	f89d 200c 	ldrb.w	r2, [sp, #12]
   10098:	2a04      	cmp	r2, #4
   1009a:	d0ab      	beq.n	fff4 <socket_thread_fn+0xc>
			current_cmd_handler = NULL;
   1009c:	4a52      	ldr	r2, [pc, #328]	; (101e8 <socket_thread_fn+0x200>)
   1009e:	6013      	str	r3, [r2, #0]
	return z_impl_k_msgq_put(msgq, data, timeout);
   100a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   100a4:	a902      	add	r1, sp, #8
   100a6:	4851      	ldr	r0, [pc, #324]	; (101ec <socket_thread_fn+0x204>)
   100a8:	f009 fb3e 	bl	19728 <z_impl_k_msgq_put>
   100ac:	e7a2      	b.n	fff4 <socket_thread_fn+0xc>
			close(common_socket_fd);
   100ae:	6838      	ldr	r0, [r7, #0]
   100b0:	f7ff feb4 	bl	fe1c <close>
}
   100b4:	b004      	add	sp, #16
   100b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (bytes_read == sizeof(item->data) ||
   100ba:	f640 238c 	movw	r3, #2700	; 0xa8c
   100be:	4298      	cmp	r0, r3
   100c0:	d007      	beq.n	100d2 <socket_thread_fn+0xea>
   100c2:	f8dd 9004 	ldr.w	r9, [sp, #4]
			   item->data[bytes_read - 1] != '\0') {
   100c6:	4448      	add	r0, r9
		} else if (bytes_read == sizeof(item->data) ||
   100c8:	f890 a00b 	ldrb.w	sl, [r0, #11]
   100cc:	f1ba 0f00 	cmp.w	sl, #0
   100d0:	d002      	beq.n	100d8 <socket_thread_fn+0xf0>
			ret.code  = -ENOBUFS;
   100d2:	f06f 0336 	mvn.w	r3, #54	; 0x36
   100d6:	e7cf      	b.n	10078 <socket_thread_fn+0x90>
	ret->state = AT_CMD_NOTIFICATION;
   100d8:	2304      	movs	r3, #4
		payload_len = get_return_code(item->data, &ret);
   100da:	f109 040c 	add.w	r4, r9, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   100de:	4944      	ldr	r1, [pc, #272]	; (101f0 <socket_thread_fn+0x208>)
   100e0:	4620      	mov	r0, r4
	ret->state = AT_CMD_NOTIFICATION;
   100e2:	f88d 300c 	strb.w	r3, [sp, #12]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   100e6:	f00d fb4f 	bl	1d788 <strstr>
		if (tmpstr) {
   100ea:	4605      	mov	r5, r0
   100ec:	b1e8      	cbz	r0, 1012a <socket_thread_fn+0x142>
			ret->state = AT_CMD_OK;
   100ee:	f88d a00c 	strb.w	sl, [sp, #12]
			ret->code  = 0;
   100f2:	f8cd a008 	str.w	sl, [sp, #8]
		buf[new_len++] = '\0';
   100f6:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   100f8:	1b2a      	subs	r2, r5, r4
		buf[new_len++] = '\0';
   100fa:	3201      	adds	r2, #1
   100fc:	702b      	strb	r3, [r5, #0]
		if (ret.state != AT_CMD_NOTIFICATION) {
   100fe:	f89d 300c 	ldrb.w	r3, [sp, #12]
   10102:	9901      	ldr	r1, [sp, #4]
   10104:	2b04      	cmp	r3, #4
   10106:	d04e      	beq.n	101a6 <socket_thread_fn+0x1be>
			if ((response_buf_len > 0) &&
   10108:	4d3a      	ldr	r5, [pc, #232]	; (101f4 <socket_thread_fn+0x20c>)
   1010a:	682b      	ldr	r3, [r5, #0]
   1010c:	2b00      	cmp	r3, #0
   1010e:	d052      	beq.n	101b6 <socket_thread_fn+0x1ce>
			    (response_buf != NULL)) {
   10110:	4c39      	ldr	r4, [pc, #228]	; (101f8 <socket_thread_fn+0x210>)
   10112:	6820      	ldr	r0, [r4, #0]
			if ((response_buf_len > 0) &&
   10114:	2800      	cmp	r0, #0
   10116:	d04e      	beq.n	101b6 <socket_thread_fn+0x1ce>
				if (response_buf_len > payload_len) {
   10118:	4293      	cmp	r3, r2
   1011a:	d92a      	bls.n	10172 <socket_thread_fn+0x18a>
					memcpy(response_buf, item->data,
   1011c:	310c      	adds	r1, #12
   1011e:	f00d fb9d 	bl	1d85c <memcpy>
				response_buf_len = 0;
   10122:	2300      	movs	r3, #0
   10124:	602b      	str	r3, [r5, #0]
				response_buf     = NULL;
   10126:	6023      	str	r3, [r4, #0]
				goto next;
   10128:	e7a7      	b.n	1007a <socket_thread_fn+0x92>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   1012a:	4934      	ldr	r1, [pc, #208]	; (101fc <socket_thread_fn+0x214>)
   1012c:	4620      	mov	r0, r4
   1012e:	f00d fb2b 	bl	1d788 <strstr>
		if (tmpstr) {
   10132:	4605      	mov	r5, r0
   10134:	b140      	cbz	r0, 10148 <socket_thread_fn+0x160>
			ret->state = AT_CMD_ERROR_CMS;
   10136:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   10138:	f109 0017 	add.w	r0, r9, #23
			ret->state = AT_CMD_ERROR_CME;
   1013c:	f88d 300c 	strb.w	r3, [sp, #12]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   10140:	f00d fa0d 	bl	1d55e <atoi>
   10144:	9002      	str	r0, [sp, #8]
			break;
   10146:	e7d6      	b.n	100f6 <socket_thread_fn+0x10e>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   10148:	492d      	ldr	r1, [pc, #180]	; (10200 <socket_thread_fn+0x218>)
   1014a:	4620      	mov	r0, r4
   1014c:	f00d fb1c 	bl	1d788 <strstr>
		if (tmpstr) {
   10150:	4605      	mov	r5, r0
   10152:	b108      	cbz	r0, 10158 <socket_thread_fn+0x170>
			ret->state = AT_CMD_ERROR_CME;
   10154:	2303      	movs	r3, #3
   10156:	e7ef      	b.n	10138 <socket_thread_fn+0x150>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   10158:	492a      	ldr	r1, [pc, #168]	; (10204 <socket_thread_fn+0x21c>)
   1015a:	4620      	mov	r0, r4
   1015c:	f00d fb14 	bl	1d788 <strstr>
		if (tmpstr) {
   10160:	4605      	mov	r5, r0
   10162:	b368      	cbz	r0, 101c0 <socket_thread_fn+0x1d8>
			ret->state = AT_CMD_ERROR;
   10164:	2301      	movs	r3, #1
   10166:	f88d 300c 	strb.w	r3, [sp, #12]
			ret->code  = -ENOEXEC;
   1016a:	f06f 0307 	mvn.w	r3, #7
   1016e:	9302      	str	r3, [sp, #8]
			break;
   10170:	e7c1      	b.n	100f6 <socket_thread_fn+0x10e>
					ret.code  = -EMSGSIZE;
   10172:	f06f 0323 	mvn.w	r3, #35	; 0x23
   10176:	9302      	str	r3, [sp, #8]
   10178:	e7d3      	b.n	10122 <socket_thread_fn+0x13a>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1017a:	4b23      	ldr	r3, [pc, #140]	; (10208 <socket_thread_fn+0x220>)
   1017c:	2200      	movs	r2, #0
   1017e:	604b      	str	r3, [r1, #4]
   10180:	460b      	mov	r3, r1
   10182:	600a      	str	r2, [r1, #0]
   10184:	f843 2f08 	str.w	r2, [r3, #8]!
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10188:	e8d3 2fef 	ldaex	r2, [r3]
   1018c:	f042 0001 	orr.w	r0, r2, #1
   10190:	e8c3 0fe4 	stlex	r4, r0, [r3]
   10194:	2c00      	cmp	r4, #0
   10196:	d1f7      	bne.n	10188 <socket_thread_fn+0x1a0>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   10198:	07d3      	lsls	r3, r2, #31
   1019a:	f53f af77 	bmi.w	1008c <socket_thread_fn+0xa4>
		k_queue_append(&work_q->queue, work);
   1019e:	481b      	ldr	r0, [pc, #108]	; (1020c <socket_thread_fn+0x224>)
   101a0:	f00e fb34 	bl	1e80c <k_queue_append>
   101a4:	e772      	b.n	1008c <socket_thread_fn+0xa4>
		if (payload_len == 0) {
   101a6:	2a00      	cmp	r2, #0
   101a8:	f43f af67 	beq.w	1007a <socket_thread_fn+0x92>
			item->callback = notification_handler;
   101ac:	4b18      	ldr	r3, [pc, #96]	; (10210 <socket_thread_fn+0x228>)
			item->callback = current_cmd_handler;
   101ae:	681b      	ldr	r3, [r3, #0]
   101b0:	f8c1 3a98 	str.w	r3, [r1, #2712]	; 0xa98
   101b4:	e761      	b.n	1007a <socket_thread_fn+0x92>
		if (payload_len == 0) {
   101b6:	2a00      	cmp	r2, #0
   101b8:	f43f af5f 	beq.w	1007a <socket_thread_fn+0x92>
			item->callback = current_cmd_handler;
   101bc:	4b0a      	ldr	r3, [pc, #40]	; (101e8 <socket_thread_fn+0x200>)
   101be:	e7f6      	b.n	101ae <socket_thread_fn+0x1c6>
		new_len = strlen(buf) + 1;
   101c0:	4620      	mov	r0, r4
   101c2:	f00d fb19 	bl	1d7f8 <strlen>
   101c6:	1c42      	adds	r2, r0, #1
   101c8:	e799      	b.n	100fe <socket_thread_fn+0x116>
   101ca:	bf00      	nop
   101cc:	20020470 	.word	0x20020470
   101d0:	20020184 	.word	0x20020184
   101d4:	0001f717 	.word	0x0001f717
   101d8:	0001f722 	.word	0x0001f722
   101dc:	0001f6ee 	.word	0x0001f6ee
   101e0:	00020162 	.word	0x00020162
   101e4:	2002c5dc 	.word	0x2002c5dc
   101e8:	20020474 	.word	0x20020474
   101ec:	2002c644 	.word	0x2002c644
   101f0:	00020173 	.word	0x00020173
   101f4:	20020480 	.word	0x20020480
   101f8:	2002047c 	.word	0x2002047c
   101fc:	00020176 	.word	0x00020176
   10200:	00020182 	.word	0x00020182
   10204:	0002018e 	.word	0x0002018e
   10208:	0000fe75 	.word	0x0000fe75
   1020c:	20024e4c 	.word	0x20024e4c
   10210:	20020478 	.word	0x20020478
   10214:	2002c5a4 	.word	0x2002c5a4

00010218 <at_cmd_write>:
{
   10218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1021c:	4605      	mov	r5, r0
   1021e:	4688      	mov	r8, r1
   10220:	4617      	mov	r7, r2
   10222:	461e      	mov	r6, r3
	return z_impl_k_sem_take(sem, timeout);
   10224:	4c0a      	ldr	r4, [pc, #40]	; (10250 <at_cmd_write+0x38>)
   10226:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1022a:	4620      	mov	r0, r4
   1022c:	f00b f876 	bl	1b31c <z_impl_k_sem_take>
	response_buf     = buf;
   10230:	4b08      	ldr	r3, [pc, #32]	; (10254 <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
   10232:	4631      	mov	r1, r6
	response_buf     = buf;
   10234:	f8c3 8000 	str.w	r8, [r3]
	response_buf_len = buf_len;
   10238:	4b07      	ldr	r3, [pc, #28]	; (10258 <at_cmd_write+0x40>)
	int return_code = at_write(cmd, state);
   1023a:	4628      	mov	r0, r5
	response_buf_len = buf_len;
   1023c:	601f      	str	r7, [r3, #0]
	int return_code = at_write(cmd, state);
   1023e:	f7ff fe29 	bl	fe94 <at_write>
   10242:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   10244:	4620      	mov	r0, r4
   10246:	f00b f81f 	bl	1b288 <z_impl_k_sem_give>
}
   1024a:	4628      	mov	r0, r5
   1024c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10250:	2002c5dc 	.word	0x2002c5dc
   10254:	2002047c 	.word	0x2002047c
   10258:	20020480 	.word	0x20020480

0001025c <at_cmd_set_notification_handler>:
{
   1025c:	b538      	push	{r3, r4, r5, lr}
   1025e:	4605      	mov	r5, r0
	return z_impl_k_sem_take(sem, timeout);
   10260:	4c06      	ldr	r4, [pc, #24]	; (1027c <at_cmd_set_notification_handler+0x20>)
   10262:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10266:	4620      	mov	r0, r4
   10268:	f00b f858 	bl	1b31c <z_impl_k_sem_take>
	notification_handler = handler;
   1026c:	4b04      	ldr	r3, [pc, #16]	; (10280 <at_cmd_set_notification_handler+0x24>)
   1026e:	601d      	str	r5, [r3, #0]
	z_impl_k_sem_give(sem);
   10270:	4620      	mov	r0, r4
}
   10272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10276:	f00b b807 	b.w	1b288 <z_impl_k_sem_give>
   1027a:	bf00      	nop
   1027c:	2002c5dc 	.word	0x2002c5dc
   10280:	20020478 	.word	0x20020478

00010284 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   10284:	4b0b      	ldr	r3, [pc, #44]	; (102b4 <find_node+0x30>)
{
   10286:	b570      	push	{r4, r5, r6, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   10288:	681b      	ldr	r3, [r3, #0]
   1028a:	b153      	cbz	r3, 102a2 <find_node+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1028c:	2500      	movs	r5, #0
   1028e:	461c      	mov	r4, r3
   10290:	681b      	ldr	r3, [r3, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   10292:	6866      	ldr	r6, [r4, #4]
   10294:	428e      	cmp	r6, r1
   10296:	d106      	bne.n	102a6 <find_node+0x22>
   10298:	68a6      	ldr	r6, [r4, #8]
   1029a:	4296      	cmp	r6, r2
   1029c:	d103      	bne.n	102a6 <find_node+0x22>
			*prev_out = prev;
			return curr;
   1029e:	4623      	mov	r3, r4
			*prev_out = prev;
   102a0:	6005      	str	r5, [r0, #0]
		}
		prev = curr;
	}
	return NULL;
}
   102a2:	4618      	mov	r0, r3
   102a4:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   102a6:	2b00      	cmp	r3, #0
   102a8:	d0fb      	beq.n	102a2 <find_node+0x1e>
   102aa:	4625      	mov	r5, r4
   102ac:	461c      	mov	r4, r3
   102ae:	681b      	ldr	r3, [r3, #0]
   102b0:	e7ef      	b.n	10292 <find_node+0xe>
   102b2:	bf00      	nop
   102b4:	20020534 	.word	0x20020534

000102b8 <module_init>:

	k_mutex_unlock(&list_mtx);
}

static int module_init(struct device *dev)
{
   102b8:	b510      	push	{r4, lr}
	list->head = NULL;
   102ba:	2400      	movs	r4, #0
   102bc:	4b03      	ldr	r3, [pc, #12]	; (102cc <module_init+0x14>)
	ARG_UNUSED(dev);

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
   102be:	4804      	ldr	r0, [pc, #16]	; (102d0 <module_init+0x18>)
	list->tail = NULL;
   102c0:	e9c3 4400 	strd	r4, r4, [r3]
   102c4:	f7ff ffca 	bl	1025c <at_cmd_set_notification_handler>
	return 0;
}
   102c8:	4620      	mov	r0, r4
   102ca:	bd10      	pop	{r4, pc}
   102cc:	20020534 	.word	0x20020534
   102d0:	000102e1 	.word	0x000102e1

000102d4 <k_mutex_unlock.constprop.6>:
	return z_impl_k_mutex_unlock(mutex);
   102d4:	4801      	ldr	r0, [pc, #4]	; (102dc <k_mutex_unlock.constprop.6+0x8>)
   102d6:	f009 bc51 	b.w	19b7c <z_impl_k_mutex_unlock>
   102da:	bf00      	nop
   102dc:	2002c608 	.word	0x2002c608

000102e0 <notif_dispatch>:
{
   102e0:	b538      	push	{r3, r4, r5, lr}
   102e2:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   102e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   102e8:	4809      	ldr	r0, [pc, #36]	; (10310 <notif_dispatch+0x30>)
   102ea:	f009 fb69 	bl	199c0 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   102ee:	4b09      	ldr	r3, [pc, #36]	; (10314 <notif_dispatch+0x34>)
   102f0:	681b      	ldr	r3, [r3, #0]
   102f2:	b91b      	cbnz	r3, 102fc <notif_dispatch+0x1c>
}
   102f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   102f8:	f7ff bfec 	b.w	102d4 <k_mutex_unlock.constprop.6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   102fc:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   102fe:	689a      	ldr	r2, [r3, #8]
   10300:	4629      	mov	r1, r5
   10302:	6858      	ldr	r0, [r3, #4]
   10304:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   10306:	2c00      	cmp	r4, #0
   10308:	d0f4      	beq.n	102f4 <notif_dispatch+0x14>
   1030a:	4623      	mov	r3, r4
   1030c:	6824      	ldr	r4, [r4, #0]
   1030e:	e7f6      	b.n	102fe <notif_dispatch+0x1e>
   10310:	2002c608 	.word	0x2002c608
   10314:	20020534 	.word	0x20020534

00010318 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   10318:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1031a:	4606      	mov	r6, r0
	if (handler == NULL) {
   1031c:	460d      	mov	r5, r1
   1031e:	b359      	cbz	r1, 10378 <at_notif_register_handler+0x60>
   10320:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10324:	4816      	ldr	r0, [pc, #88]	; (10380 <at_notif_register_handler+0x68>)
   10326:	f009 fb4b 	bl	199c0 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   1032a:	462a      	mov	r2, r5
   1032c:	4631      	mov	r1, r6
   1032e:	a801      	add	r0, sp, #4
   10330:	f7ff ffa8 	bl	10284 <find_node>
   10334:	4604      	mov	r4, r0
   10336:	b120      	cbz	r0, 10342 <at_notif_register_handler+0x2a>
		k_mutex_unlock(&list_mtx);
   10338:	f7ff ffcc 	bl	102d4 <k_mutex_unlock.constprop.6>
		return 0;
   1033c:	2000      	movs	r0, #0
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
	}
	return append_notif_handler(context, handler);
}
   1033e:	b002      	add	sp, #8
   10340:	bd70      	pop	{r4, r5, r6, pc}
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   10342:	200c      	movs	r0, #12
   10344:	f009 f9d4 	bl	196f0 <k_malloc>
   10348:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   1034a:	b920      	cbnz	r0, 10356 <at_notif_register_handler+0x3e>
		k_mutex_unlock(&list_mtx);
   1034c:	f7ff ffc2 	bl	102d4 <k_mutex_unlock.constprop.6>
		return -ENOBUFS;
   10350:	f06f 0036 	mvn.w	r0, #54	; 0x36
   10354:	e7f3      	b.n	1033e <at_notif_register_handler+0x26>
	memset(to_ins, 0, sizeof(struct notif_handler));
   10356:	220c      	movs	r2, #12
   10358:	4621      	mov	r1, r4
   1035a:	f00d faa9 	bl	1d8b0 <memset>
	to_ins->ctx     = ctx;
   1035e:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   10360:	4a08      	ldr	r2, [pc, #32]	; (10384 <at_notif_register_handler+0x6c>)
	parent->next = child;
   10362:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   10364:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   10366:	e9c3 6501 	strd	r6, r5, [r3, #4]
   1036a:	b911      	cbnz	r1, 10372 <at_notif_register_handler+0x5a>
	list->head = node;
   1036c:	e9c2 3300 	strd	r3, r3, [r2]
   10370:	e7e2      	b.n	10338 <at_notif_register_handler+0x20>
	parent->next = child;
   10372:	600b      	str	r3, [r1, #0]
	list->tail = node;
   10374:	6053      	str	r3, [r2, #4]
   10376:	e7df      	b.n	10338 <at_notif_register_handler+0x20>
		return -EINVAL;
   10378:	f06f 0015 	mvn.w	r0, #21
   1037c:	e7df      	b.n	1033e <at_notif_register_handler+0x26>
   1037e:	bf00      	nop
   10380:	2002c608 	.word	0x2002c608
   10384:	20020534 	.word	0x20020534

00010388 <at_notif_deregister_handler>:

int at_notif_deregister_handler(void *context, at_notif_handler_t handler)
{
   10388:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1038a:	4605      	mov	r5, r0
	if (handler == NULL) {
   1038c:	460c      	mov	r4, r1
   1038e:	b329      	cbz	r1, 103dc <at_notif_deregister_handler+0x54>
	struct notif_handler *curr, *prev = NULL;
   10390:	2300      	movs	r3, #0
   10392:	9301      	str	r3, [sp, #4]
   10394:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10398:	4812      	ldr	r0, [pc, #72]	; (103e4 <at_notif_deregister_handler+0x5c>)
   1039a:	f009 fb11 	bl	199c0 <z_impl_k_mutex_lock>
	curr = find_node(&prev, ctx, handler);
   1039e:	4622      	mov	r2, r4
   103a0:	4629      	mov	r1, r5
   103a2:	a801      	add	r0, sp, #4
   103a4:	f7ff ff6e 	bl	10284 <find_node>
	if (curr == NULL) {
   103a8:	b920      	cbnz	r0, 103b4 <at_notif_deregister_handler+0x2c>
	k_mutex_unlock(&list_mtx);
   103aa:	f7ff ff93 	bl	102d4 <k_mutex_unlock.constprop.6>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
	}
	return remove_notif_handler(context, handler);
   103ae:	2000      	movs	r0, #0
}
   103b0:	b003      	add	sp, #12
   103b2:	bd30      	pop	{r4, r5, pc}
	sys_slist_remove(&handler_list, &prev->node, &curr->node);
   103b4:	9a01      	ldr	r2, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   103b6:	6801      	ldr	r1, [r0, #0]
   103b8:	4b0b      	ldr	r3, [pc, #44]	; (103e8 <at_notif_deregister_handler+0x60>)
   103ba:	b94a      	cbnz	r2, 103d0 <at_notif_deregister_handler+0x48>
   103bc:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   103be:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   103c0:	4290      	cmp	r0, r2
   103c2:	d100      	bne.n	103c6 <at_notif_deregister_handler+0x3e>
	list->tail = node;
   103c4:	6059      	str	r1, [r3, #4]
	parent->next = child;
   103c6:	2300      	movs	r3, #0
   103c8:	6003      	str	r3, [r0, #0]
	k_free(curr);
   103ca:	f00e f9ec 	bl	1e7a6 <k_free>
   103ce:	e7ec      	b.n	103aa <at_notif_deregister_handler+0x22>
   103d0:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   103d2:	6859      	ldr	r1, [r3, #4]
   103d4:	4288      	cmp	r0, r1
	list->tail = node;
   103d6:	bf08      	it	eq
   103d8:	605a      	streq	r2, [r3, #4]
   103da:	e7f4      	b.n	103c6 <at_notif_deregister_handler+0x3e>
		return -EINVAL;
   103dc:	f06f 0015 	mvn.w	r0, #21
   103e0:	e7e6      	b.n	103b0 <at_notif_deregister_handler+0x28>
   103e2:	bf00      	nop
   103e4:	2002c608 	.word	0x2002c608
   103e8:	20020534 	.word	0x20020534

000103ec <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   103ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   103f0:	6805      	ldr	r5, [r0, #0]
{
   103f2:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   103f4:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   103f6:	782b      	ldrb	r3, [r5, #0]
{
   103f8:	4680      	mov	r8, r0
   103fa:	460f      	mov	r7, r1
   103fc:	4616      	mov	r6, r2
   103fe:	2b00      	cmp	r3, #0
   10400:	f000 80c1 	beq.w	10586 <at_parse_process_element+0x19a>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   10404:	4b61      	ldr	r3, [pc, #388]	; (1058c <at_parse_process_element+0x1a0>)
   10406:	781c      	ldrb	r4, [r3, #0]
   10408:	2c05      	cmp	r4, #5
   1040a:	d110      	bne.n	1042e <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   1040c:	1c6b      	adds	r3, r5, #1
   1040e:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   10410:	9a00      	ldr	r2, [sp, #0]
   10412:	7810      	ldrb	r0, [r2, #0]
   10414:	f00e f872 	bl	1e4fc <is_valid_notification_char>
   10418:	b930      	cbnz	r0, 10428 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1041a:	1b53      	subs	r3, r2, r5

		while (isxdigit(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1041c:	462a      	mov	r2, r5
   1041e:	4639      	mov	r1, r7
   10420:	4630      	mov	r0, r6
   10422:	f00e f8ff 	bl	1e624 <at_params_string_put>
   10426:	e01b      	b.n	10460 <at_parse_process_element+0x74>
			tmpstr++;
   10428:	3201      	adds	r2, #1
   1042a:	9200      	str	r2, [sp, #0]
   1042c:	e7f0      	b.n	10410 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   1042e:	2c06      	cmp	r4, #6
   10430:	d124      	bne.n	1047c <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   10432:	4668      	mov	r0, sp
   10434:	f00e f854 	bl	1e4e0 <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   10438:	9a00      	ldr	r2, [sp, #0]
   1043a:	7810      	ldrb	r0, [r2, #0]
   1043c:	f00e f85e 	bl	1e4fc <is_valid_notification_char>
   10440:	b9a8      	cbnz	r0, 1046e <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   10442:	1b53      	subs	r3, r2, r5
   10444:	4639      	mov	r1, r7
   10446:	462a      	mov	r2, r5
   10448:	4630      	mov	r0, r6
   1044a:	f00e f8eb 	bl	1e624 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   1044e:	9b00      	ldr	r3, [sp, #0]
   10450:	781a      	ldrb	r2, [r3, #0]
   10452:	2a3d      	cmp	r2, #61	; 0x3d
   10454:	d10e      	bne.n	10474 <at_parse_process_element+0x88>
   10456:	785a      	ldrb	r2, [r3, #1]
   10458:	2a3f      	cmp	r2, #63	; 0x3f
   1045a:	d101      	bne.n	10460 <at_parse_process_element+0x74>
			tmpstr += 2;
   1045c:	3302      	adds	r3, #2
			tmpstr++;
   1045e:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   10460:	2000      	movs	r0, #0
	*str = tmpstr;
   10462:	9b00      	ldr	r3, [sp, #0]
   10464:	f8c8 3000 	str.w	r3, [r8]
}
   10468:	b023      	add	sp, #140	; 0x8c
   1046a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   1046e:	3201      	adds	r2, #1
   10470:	9200      	str	r2, [sp, #0]
   10472:	e7e1      	b.n	10438 <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   10474:	2a3f      	cmp	r2, #63	; 0x3f
   10476:	d1f3      	bne.n	10460 <at_parse_process_element+0x74>
			tmpstr++;
   10478:	3301      	adds	r3, #1
   1047a:	e7f0      	b.n	1045e <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   1047c:	2c07      	cmp	r4, #7
   1047e:	d103      	bne.n	10488 <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   10480:	4610      	mov	r0, r2
   10482:	f00e f8a6 	bl	1e5d2 <at_params_empty_put>
   10486:	e7eb      	b.n	10460 <at_parse_process_element+0x74>
	} else if (state == STRING) {
   10488:	2c02      	cmp	r4, #2
   1048a:	d112      	bne.n	104b2 <at_parse_process_element+0xc6>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr) &&
   1048c:	9a00      	ldr	r2, [sp, #0]
   1048e:	7810      	ldrb	r0, [r2, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   10490:	2822      	cmp	r0, #34	; 0x22
   10492:	d003      	beq.n	1049c <at_parse_process_element+0xb0>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   10494:	b110      	cbz	r0, 1049c <at_parse_process_element+0xb0>
		       !is_lfcr(*tmpstr)) {
   10496:	f00e f81a 	bl	1e4ce <is_lfcr>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr) &&
   1049a:	b138      	cbz	r0, 104ac <at_parse_process_element+0xc0>
		at_params_string_put(list, index, start_ptr,
   1049c:	1b53      	subs	r3, r2, r5
   1049e:	4639      	mov	r1, r7
   104a0:	462a      	mov	r2, r5
   104a2:	4630      	mov	r0, r6
   104a4:	f00e f8be 	bl	1e624 <at_params_string_put>
		tmpstr++;
   104a8:	9b00      	ldr	r3, [sp, #0]
   104aa:	e7e5      	b.n	10478 <at_parse_process_element+0x8c>
			tmpstr++;
   104ac:	3201      	adds	r2, #1
   104ae:	9200      	str	r2, [sp, #0]
   104b0:	e7ec      	b.n	1048c <at_parse_process_element+0xa0>
	} else if (state == ARRAY) {
   104b2:	2c01      	cmp	r4, #1
   104b4:	d13c      	bne.n	10530 <at_parse_process_element+0x144>
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   104b6:	4628      	mov	r0, r5
   104b8:	220a      	movs	r2, #10
   104ba:	a901      	add	r1, sp, #4
   104bc:	f00d f8eb 	bl	1d696 <strtoul>
		tmpstr = next;
   104c0:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   104c2:	4d33      	ldr	r5, [pc, #204]	; (10590 <at_parse_process_element+0x1a4>)
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   104c4:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   104c6:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   104c8:	9800      	ldr	r0, [sp, #0]
   104ca:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   104cc:	2b29      	cmp	r3, #41	; 0x29
   104ce:	d028      	beq.n	10522 <at_parse_process_element+0x136>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   104d0:	b33b      	cbz	r3, 10522 <at_parse_process_element+0x136>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   104d2:	3b2c      	subs	r3, #44	; 0x2c
   104d4:	b2db      	uxtb	r3, r3
   104d6:	3001      	adds	r0, #1
   104d8:	2b11      	cmp	r3, #17
				tmparray[i++] =
   104da:	9000      	str	r0, [sp, #0]
   104dc:	d803      	bhi.n	104e6 <at_parse_process_element+0xfa>
   104de:	fa25 f303 	lsr.w	r3, r5, r3
   104e2:	07db      	lsls	r3, r3, #31
   104e4:	d408      	bmi.n	104f8 <at_parse_process_element+0x10c>
				tmpstr++;
   104e6:	46a1      	mov	r9, r4
   104e8:	e004      	b.n	104f4 <at_parse_process_element+0x108>
					tmpstr = next;
   104ea:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   104ec:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   104f0:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   104f2:	d015      	beq.n	10520 <at_parse_process_element+0x134>
				tmpstr++;
   104f4:	464c      	mov	r4, r9
   104f6:	e7e7      	b.n	104c8 <at_parse_process_element+0xdc>
					(u32_t)strtoul(++tmpstr, &next, 10);
   104f8:	220a      	movs	r2, #10
   104fa:	a901      	add	r1, sp, #4
   104fc:	f00d f8cb 	bl	1d696 <strtoul>
				tmparray[i++] =
   10500:	ab22      	add	r3, sp, #136	; 0x88
   10502:	f104 0901 	add.w	r9, r4, #1
   10506:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1050a:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   1050e:	9800      	ldr	r0, [sp, #0]
   10510:	f00d f972 	bl	1d7f8 <strlen>
   10514:	4604      	mov	r4, r0
   10516:	9801      	ldr	r0, [sp, #4]
   10518:	f00d f96e 	bl	1d7f8 <strlen>
   1051c:	4284      	cmp	r4, r0
   1051e:	d1e4      	bne.n	104ea <at_parse_process_element+0xfe>
   10520:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(u32_t));
   10522:	00a3      	lsls	r3, r4, #2
   10524:	aa02      	add	r2, sp, #8
   10526:	4639      	mov	r1, r7
   10528:	4630      	mov	r0, r6
   1052a:	f00e f8a1 	bl	1e670 <at_params_array_put>
   1052e:	e7bb      	b.n	104a8 <at_parse_process_element+0xbc>
	} else if (state == NUMBER) {
   10530:	2c03      	cmp	r4, #3
   10532:	d115      	bne.n	10560 <at_parse_process_element+0x174>
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   10534:	220a      	movs	r2, #10
   10536:	a902      	add	r1, sp, #8
   10538:	4628      	mov	r0, r5
   1053a:	f00d f8ac 	bl	1d696 <strtoul>
		tmpstr = next;
   1053e:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   10540:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   10544:	4602      	mov	r2, r0
		tmpstr = next;
   10546:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   10548:	d205      	bcs.n	10556 <at_parse_process_element+0x16a>
			at_params_short_put(list, index, (u16_t)value);
   1054a:	b282      	uxth	r2, r0
   1054c:	4639      	mov	r1, r7
   1054e:	4630      	mov	r0, r6
   10550:	f00e f82a 	bl	1e5a8 <at_params_short_put>
   10554:	e784      	b.n	10460 <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   10556:	4639      	mov	r1, r7
   10558:	4630      	mov	r0, r6
   1055a:	f00e f84e 	bl	1e5fa <at_params_int_put>
   1055e:	e77f      	b.n	10460 <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   10560:	2c04      	cmp	r4, #4
   10562:	f47f af7d 	bne.w	10460 <at_parse_process_element+0x74>
		while (isxdigit(*tmpstr)) {
   10566:	9b00      	ldr	r3, [sp, #0]
   10568:	781a      	ldrb	r2, [r3, #0]

static inline int isxdigit(int a)
{
	unsigned int ua = (unsigned int)a;

	return (int)(((ua - (unsigned)'0') < 10U) ||
   1056a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1056e:	2909      	cmp	r1, #9
   10570:	d906      	bls.n	10580 <at_parse_process_element+0x194>
			((ua | 32U) - (unsigned)'a' < 6U));
   10572:	f042 0220 	orr.w	r2, r2, #32
   10576:	3a61      	subs	r2, #97	; 0x61
	return (int)(((ua - (unsigned)'0') < 10U) ||
   10578:	2a05      	cmp	r2, #5
   1057a:	d901      	bls.n	10580 <at_parse_process_element+0x194>
		at_params_string_put(list, index, start_ptr,
   1057c:	1b5b      	subs	r3, r3, r5
   1057e:	e74d      	b.n	1041c <at_parse_process_element+0x30>
			tmpstr++;
   10580:	3301      	adds	r3, #1
   10582:	9300      	str	r3, [sp, #0]
   10584:	e7ef      	b.n	10566 <at_parse_process_element+0x17a>
		return -1;
   10586:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1058a:	e76d      	b.n	10468 <at_parse_process_element+0x7c>
   1058c:	20024f34 	.word	0x20024f34
   10590:	00024001 	.word	0x00024001

00010594 <at_parse_detect_type>:
{
   10594:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   10596:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   10598:	2900      	cmp	r1, #0
{
   1059a:	4605      	mov	r5, r0
   1059c:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   1059e:	d144      	bne.n	1062a <at_parse_detect_type+0x96>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   105a0:	2a2b      	cmp	r2, #43	; 0x2b
   105a2:	4e2a      	ldr	r6, [pc, #168]	; (1064c <at_parse_detect_type+0xb8>)
   105a4:	d001      	beq.n	105aa <at_parse_detect_type+0x16>
   105a6:	2a25      	cmp	r2, #37	; 0x25
   105a8:	d104      	bne.n	105b4 <at_parse_detect_type+0x20>
	state = new_state;
   105aa:	2305      	movs	r3, #5
   105ac:	7033      	strb	r3, [r6, #0]
	return 0;
   105ae:	2000      	movs	r0, #0
	*str = tmpstr;
   105b0:	602c      	str	r4, [r5, #0]
}
   105b2:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   105b4:	4620      	mov	r0, r4
   105b6:	f00d ffad 	bl	1e514 <is_command>
   105ba:	b3a0      	cbz	r0, 10626 <at_parse_detect_type+0x92>
	state = new_state;
   105bc:	2306      	movs	r3, #6
   105be:	e7f5      	b.n	105ac <at_parse_detect_type+0x18>
 * @retval true  If character is number character
 * @retval false If character is something else
 */
static inline bool is_number(char chr)
{
	if (isdigit(chr) || (chr == '-') || (chr == '+')) {
   105c0:	f647 71e5 	movw	r1, #32741	; 0x7fe5
   105c4:	fa21 f303 	lsr.w	r3, r1, r3
   105c8:	07d9      	lsls	r1, r3, #31
   105ca:	d50a      	bpl.n	105e2 <at_parse_detect_type+0x4e>
   105cc:	2203      	movs	r2, #3
   105ce:	4b1f      	ldr	r3, [pc, #124]	; (1064c <at_parse_detect_type+0xb8>)
   105d0:	701a      	strb	r2, [r3, #0]
   105d2:	e7ec      	b.n	105ae <at_parse_detect_type+0x1a>
	if (chr == '(') {
   105d4:	2a28      	cmp	r2, #40	; 0x28
   105d6:	d104      	bne.n	105e2 <at_parse_detect_type+0x4e>
   105d8:	2201      	movs	r2, #1
   105da:	4b1c      	ldr	r3, [pc, #112]	; (1064c <at_parse_detect_type+0xb8>)
		tmpstr++;
   105dc:	4414      	add	r4, r2
	state = new_state;
   105de:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   105e0:	e7e5      	b.n	105ae <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   105e2:	4610      	mov	r0, r2
   105e4:	f00d ff73 	bl	1e4ce <is_lfcr>
   105e8:	b170      	cbz	r0, 10608 <at_parse_detect_type+0x74>
   105ea:	4918      	ldr	r1, [pc, #96]	; (1064c <at_parse_detect_type+0xb8>)
   105ec:	7808      	ldrb	r0, [r1, #0]
   105ee:	2803      	cmp	r0, #3
   105f0:	d108      	bne.n	10604 <at_parse_detect_type+0x70>
		while (is_lfcr(*tmpstr)) {
   105f2:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   105f6:	f00d ff6a 	bl	1e4ce <is_lfcr>
   105fa:	2800      	cmp	r0, #0
   105fc:	d1f9      	bne.n	105f2 <at_parse_detect_type+0x5e>
	state = new_state;
   105fe:	2304      	movs	r3, #4
   10600:	700b      	strb	r3, [r1, #0]
   10602:	e7d4      	b.n	105ae <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   10604:	2807      	cmp	r0, #7
   10606:	d0d2      	beq.n	105ae <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   10608:	3a2c      	subs	r2, #44	; 0x2c
   1060a:	b2d2      	uxtb	r2, r2
   1060c:	2a11      	cmp	r2, #17
   1060e:	d807      	bhi.n	10620 <at_parse_detect_type+0x8c>
   10610:	4b0f      	ldr	r3, [pc, #60]	; (10650 <at_parse_detect_type+0xbc>)
   10612:	fa23 f202 	lsr.w	r2, r3, r2
   10616:	07d3      	lsls	r3, r2, #31
   10618:	d502      	bpl.n	10620 <at_parse_detect_type+0x8c>
	state = new_state;
   1061a:	4b0c      	ldr	r3, [pc, #48]	; (1064c <at_parse_detect_type+0xb8>)
   1061c:	2207      	movs	r2, #7
   1061e:	e7d7      	b.n	105d0 <at_parse_detect_type+0x3c>
		return -1;
   10620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10624:	e7c5      	b.n	105b2 <at_parse_detect_type+0x1e>
	state = new_state;
   10626:	2302      	movs	r3, #2
   10628:	e7c0      	b.n	105ac <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   1062a:	dd03      	ble.n	10634 <at_parse_detect_type+0xa0>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1062c:	2a2b      	cmp	r2, #43	; 0x2b
   1062e:	d0f7      	beq.n	10620 <at_parse_detect_type+0x8c>
   10630:	2a25      	cmp	r2, #37	; 0x25
   10632:	d0f5      	beq.n	10620 <at_parse_detect_type+0x8c>
	if (isdigit(chr) || (chr == '-') || (chr == '+')) {
   10634:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
   10638:	b2db      	uxtb	r3, r3
   1063a:	2b0e      	cmp	r3, #14
   1063c:	d9c0      	bls.n	105c0 <at_parse_detect_type+0x2c>
	if (chr == '"') {
   1063e:	2a22      	cmp	r2, #34	; 0x22
   10640:	d1c8      	bne.n	105d4 <at_parse_detect_type+0x40>
	state = new_state;
   10642:	2202      	movs	r2, #2
   10644:	4b01      	ldr	r3, [pc, #4]	; (1064c <at_parse_detect_type+0xb8>)
		tmpstr++;
   10646:	3401      	adds	r4, #1
	state = new_state;
   10648:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1064a:	e7b0      	b.n	105ae <at_parse_detect_type+0x1a>
   1064c:	20024f34 	.word	0x20024f34
   10650:	00024001 	.word	0x00024001

00010654 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   10654:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   10658:	4688      	mov	r8, r1
   1065a:	4616      	mov	r6, r2
   1065c:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   1065e:	4604      	mov	r4, r0
   10660:	2800      	cmp	r0, #0
   10662:	d07c      	beq.n	1075e <at_parser_max_params_from_str+0x10a>
   10664:	2a00      	cmp	r2, #0
   10666:	d07a      	beq.n	1075e <at_parser_max_params_from_str+0x10a>
   10668:	6853      	ldr	r3, [r2, #4]
   1066a:	2b00      	cmp	r3, #0
   1066c:	d077      	beq.n	1075e <at_parser_max_params_from_str+0x10a>
	state = IDLE;
   1066e:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   10670:	4610      	mov	r0, r2
   10672:	f000 f8e7 	bl	10844 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   10676:	6832      	ldr	r2, [r6, #0]
	const char *str = *at_params_str;
   10678:	9401      	str	r4, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
   1067a:	4297      	cmp	r7, r2
   1067c:	bf28      	it	cs
   1067e:	4617      	movcs	r7, r2
	int index = 0;
   10680:	462c      	mov	r4, r5
	state = IDLE;
   10682:	4b38      	ldr	r3, [pc, #224]	; (10764 <at_parser_max_params_from_str+0x110>)
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   10684:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 10768 <at_parser_max_params_from_str+0x114>
   10688:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   1068a:	9a01      	ldr	r2, [sp, #4]
   1068c:	7813      	ldrb	r3, [r2, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1068e:	2b00      	cmp	r3, #0
   10690:	d04b      	beq.n	1072a <at_parser_max_params_from_str+0xd6>
   10692:	42a7      	cmp	r7, r4
   10694:	d949      	bls.n	1072a <at_parser_max_params_from_str+0xd6>
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   10696:	2b20      	cmp	r3, #32
   10698:	d002      	beq.n	106a0 <at_parser_max_params_from_str+0x4c>
   1069a:	3b09      	subs	r3, #9
   1069c:	2b04      	cmp	r3, #4
   1069e:	d801      	bhi.n	106a4 <at_parser_max_params_from_str+0x50>
			str++;
   106a0:	3201      	adds	r2, #1
   106a2:	9201      	str	r2, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   106a4:	4621      	mov	r1, r4
   106a6:	a801      	add	r0, sp, #4
   106a8:	f7ff ff74 	bl	10594 <at_parse_detect_type>
   106ac:	1c42      	adds	r2, r0, #1
   106ae:	d03c      	beq.n	1072a <at_parser_max_params_from_str+0xd6>
		if (at_parse_process_element(&str, index, list) == -1) {
   106b0:	4632      	mov	r2, r6
   106b2:	4621      	mov	r1, r4
   106b4:	a801      	add	r0, sp, #4
   106b6:	f7ff fe99 	bl	103ec <at_parse_process_element>
   106ba:	1c43      	adds	r3, r0, #1
   106bc:	d035      	beq.n	1072a <at_parser_max_params_from_str+0xd6>
		if (is_separator(*str)) {
   106be:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   106c0:	781a      	ldrb	r2, [r3, #0]
   106c2:	3a2c      	subs	r2, #44	; 0x2c
   106c4:	b2d2      	uxtb	r2, r2
   106c6:	2a11      	cmp	r2, #17
   106c8:	d81a      	bhi.n	10700 <at_parser_max_params_from_str+0xac>
   106ca:	fa29 f202 	lsr.w	r2, r9, r2
   106ce:	07d1      	lsls	r1, r2, #31
   106d0:	d516      	bpl.n	10700 <at_parser_max_params_from_str+0xac>
			if (is_lfcr(*(str + 1))) {
   106d2:	7858      	ldrb	r0, [r3, #1]
   106d4:	f00d fefb 	bl	1e4ce <is_lfcr>
   106d8:	b178      	cbz	r0, 106fa <at_parser_max_params_from_str+0xa6>
				index++;
   106da:	3401      	adds	r4, #1
				if (index == max_params) {
   106dc:	42bc      	cmp	r4, r7
   106de:	d039      	beq.n	10754 <at_parser_max_params_from_str+0x100>
				if (at_parse_detect_type(&str, index) == -1) {
   106e0:	4621      	mov	r1, r4
   106e2:	a801      	add	r0, sp, #4
   106e4:	f7ff ff56 	bl	10594 <at_parse_detect_type>
   106e8:	1c42      	adds	r2, r0, #1
   106ea:	d01e      	beq.n	1072a <at_parser_max_params_from_str+0xd6>
				if (at_parse_process_element(&str, index,
   106ec:	4632      	mov	r2, r6
   106ee:	4621      	mov	r1, r4
   106f0:	a801      	add	r0, sp, #4
   106f2:	f7ff fe7b 	bl	103ec <at_parse_process_element>
   106f6:	1c43      	adds	r3, r0, #1
   106f8:	d017      	beq.n	1072a <at_parser_max_params_from_str+0xd6>
			str++;
   106fa:	9b01      	ldr	r3, [sp, #4]
   106fc:	3301      	adds	r3, #1
   106fe:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   10700:	9a01      	ldr	r2, [sp, #4]
   10702:	7810      	ldrb	r0, [r2, #0]
   10704:	f00d fee3 	bl	1e4ce <is_lfcr>
   10708:	b1f8      	cbz	r0, 1074a <at_parser_max_params_from_str+0xf6>
   1070a:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   1070c:	7811      	ldrb	r1, [r2, #0]
   1070e:	4692      	mov	sl, r2
   10710:	4608      	mov	r0, r1
   10712:	3201      	adds	r2, #1
   10714:	f00d fedb 	bl	1e4ce <is_lfcr>
   10718:	2800      	cmp	r0, #0
   1071a:	d1f7      	bne.n	1070c <at_parser_max_params_from_str+0xb8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1071c:	b119      	cbz	r1, 10726 <at_parser_max_params_from_str+0xd2>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1071e:	292b      	cmp	r1, #43	; 0x2b
   10720:	d001      	beq.n	10726 <at_parser_max_params_from_str+0xd2>
   10722:	2925      	cmp	r1, #37	; 0x25
   10724:	d111      	bne.n	1074a <at_parser_max_params_from_str+0xf6>
				str += i;
   10726:	f8cd a004 	str.w	sl, [sp, #4]
	*at_params_str = str;
   1072a:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   1072c:	b9a5      	cbnz	r5, 10758 <at_parser_max_params_from_str+0x104>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1072e:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   10730:	2a00      	cmp	r2, #0
   10732:	bf0c      	ite	eq
   10734:	2000      	moveq	r0, #0
   10736:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   1073a:	f1b8 0f00 	cmp.w	r8, #0
   1073e:	d001      	beq.n	10744 <at_parser_max_params_from_str+0xf0>
		*next_param_str = (char *)at_params_str;
   10740:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   10744:	b002      	add	sp, #8
   10746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		index++;
   1074a:	3401      	adds	r4, #1
			oversized = true;
   1074c:	42bc      	cmp	r4, r7
   1074e:	bf08      	it	eq
   10750:	2501      	moveq	r5, #1
   10752:	e79a      	b.n	1068a <at_parser_max_params_from_str+0x36>
					oversized = true;
   10754:	4605      	mov	r5, r0
   10756:	e7e8      	b.n	1072a <at_parser_max_params_from_str+0xd6>
		return -E2BIG;
   10758:	f06f 0006 	mvn.w	r0, #6
   1075c:	e7ed      	b.n	1073a <at_parser_max_params_from_str+0xe6>
		return -EINVAL;
   1075e:	f06f 0015 	mvn.w	r0, #21
   10762:	e7ef      	b.n	10744 <at_parser_max_params_from_str+0xf0>
   10764:	20024f34 	.word	0x20024f34
   10768:	00024001 	.word	0x00024001

0001076c <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   1076c:	b538      	push	{r3, r4, r5, lr}
   1076e:	460c      	mov	r4, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   10770:	4605      	mov	r5, r0
   10772:	b960      	cbnz	r0, 1078e <at_params_get+0x22>
   10774:	490a      	ldr	r1, [pc, #40]	; (107a0 <at_params_get+0x34>)
   10776:	232b      	movs	r3, #43	; 0x2b
   10778:	4a0a      	ldr	r2, [pc, #40]	; (107a4 <at_params_get+0x38>)
   1077a:	480b      	ldr	r0, [pc, #44]	; (107a8 <at_params_get+0x3c>)
   1077c:	f00c fb1c 	bl	1cdb8 <printk>
   10780:	480a      	ldr	r0, [pc, #40]	; (107ac <at_params_get+0x40>)
   10782:	f00c fb19 	bl	1cdb8 <printk>
   10786:	212b      	movs	r1, #43	; 0x2b
   10788:	4806      	ldr	r0, [pc, #24]	; (107a4 <at_params_get+0x38>)
   1078a:	f00c fb47 	bl	1ce1c <assert_post_action>

	if (index >= list->param_count) {
   1078e:	682b      	ldr	r3, [r5, #0]
   10790:	42a3      	cmp	r3, r4
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   10792:	bf85      	ittet	hi
   10794:	230c      	movhi	r3, #12
   10796:	6868      	ldrhi	r0, [r5, #4]
		return NULL;
   10798:	2000      	movls	r0, #0
	return &param[index];
   1079a:	fb03 0004 	mlahi	r0, r3, r4, r0
}
   1079e:	bd38      	pop	{r3, r4, r5, pc}
   107a0:	00020201 	.word	0x00020201
   107a4:	000201c5 	.word	0x000201c5
   107a8:	0001f722 	.word	0x0001f722
   107ac:	00020215 	.word	0x00020215

000107b0 <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   107b0:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   107b2:	4604      	mov	r4, r0
   107b4:	b960      	cbnz	r0, 107d0 <at_param_size+0x20>
   107b6:	490e      	ldr	r1, [pc, #56]	; (107f0 <at_param_size+0x40>)
   107b8:	2339      	movs	r3, #57	; 0x39
   107ba:	4a0e      	ldr	r2, [pc, #56]	; (107f4 <at_param_size+0x44>)
   107bc:	480e      	ldr	r0, [pc, #56]	; (107f8 <at_param_size+0x48>)
   107be:	f00c fafb 	bl	1cdb8 <printk>
   107c2:	480e      	ldr	r0, [pc, #56]	; (107fc <at_param_size+0x4c>)
   107c4:	f00c faf8 	bl	1cdb8 <printk>
   107c8:	2139      	movs	r1, #57	; 0x39
   107ca:	480a      	ldr	r0, [pc, #40]	; (107f4 <at_param_size+0x44>)
   107cc:	f00c fb26 	bl	1ce1c <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   107d0:	7823      	ldrb	r3, [r4, #0]
   107d2:	2b01      	cmp	r3, #1
   107d4:	d006      	beq.n	107e4 <at_param_size+0x34>
		return sizeof(u16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   107d6:	2b02      	cmp	r3, #2
   107d8:	d006      	beq.n	107e8 <at_param_size+0x38>
		return sizeof(u32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   107da:	3b03      	subs	r3, #3
   107dc:	2b01      	cmp	r3, #1
   107de:	d805      	bhi.n	107ec <at_param_size+0x3c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   107e0:	6860      	ldr	r0, [r4, #4]
	}

	return 0;
}
   107e2:	bd10      	pop	{r4, pc}
		return sizeof(u16_t);
   107e4:	2002      	movs	r0, #2
   107e6:	e7fc      	b.n	107e2 <at_param_size+0x32>
		return sizeof(u32_t);
   107e8:	2004      	movs	r0, #4
   107ea:	e7fa      	b.n	107e2 <at_param_size+0x32>
	return 0;
   107ec:	2000      	movs	r0, #0
   107ee:	e7f8      	b.n	107e2 <at_param_size+0x32>
   107f0:	00020194 	.word	0x00020194
   107f4:	000201c5 	.word	0x000201c5
   107f8:	0001f722 	.word	0x0001f722
   107fc:	000201a9 	.word	0x000201a9

00010800 <at_param_clear>:
{
   10800:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   10802:	4604      	mov	r4, r0
   10804:	b960      	cbnz	r0, 10820 <at_param_clear+0x20>
   10806:	490b      	ldr	r1, [pc, #44]	; (10834 <at_param_clear+0x34>)
   10808:	231d      	movs	r3, #29
   1080a:	4a0b      	ldr	r2, [pc, #44]	; (10838 <at_param_clear+0x38>)
   1080c:	480b      	ldr	r0, [pc, #44]	; (1083c <at_param_clear+0x3c>)
   1080e:	f00c fad3 	bl	1cdb8 <printk>
   10812:	480b      	ldr	r0, [pc, #44]	; (10840 <at_param_clear+0x40>)
   10814:	f00c fad0 	bl	1cdb8 <printk>
   10818:	211d      	movs	r1, #29
   1081a:	4807      	ldr	r0, [pc, #28]	; (10838 <at_param_clear+0x38>)
   1081c:	f00c fafe 	bl	1ce1c <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   10820:	7823      	ldrb	r3, [r4, #0]
   10822:	3b03      	subs	r3, #3
   10824:	2b01      	cmp	r3, #1
   10826:	d802      	bhi.n	1082e <at_param_clear+0x2e>
		k_free(param->value.str_val);
   10828:	68a0      	ldr	r0, [r4, #8]
   1082a:	f00d ffbc 	bl	1e7a6 <k_free>
	param->value.int_val = 0;
   1082e:	2300      	movs	r3, #0
   10830:	60a3      	str	r3, [r4, #8]
}
   10832:	bd10      	pop	{r4, pc}
   10834:	00020194 	.word	0x00020194
   10838:	000201c5 	.word	0x000201c5
   1083c:	0001f722 	.word	0x0001f722
   10840:	000201a9 	.word	0x000201a9

00010844 <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   10844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (list == NULL || list->params == NULL) {
   10848:	4606      	mov	r6, r0
   1084a:	b150      	cbz	r0, 10862 <at_params_list_clear+0x1e>
   1084c:	6843      	ldr	r3, [r0, #4]
   1084e:	b143      	cbz	r3, 10862 <at_params_list_clear+0x1e>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   10850:	2500      	movs	r5, #0
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   10852:	4f13      	ldr	r7, [pc, #76]	; (108a0 <at_params_list_clear+0x5c>)
   10854:	f8df 8050 	ldr.w	r8, [pc, #80]	; 108a8 <at_params_list_clear+0x64>
   10858:	f8df 9050 	ldr.w	r9, [pc, #80]	; 108ac <at_params_list_clear+0x68>
	for (size_t i = 0; i < list->param_count; ++i) {
   1085c:	6833      	ldr	r3, [r6, #0]
   1085e:	429d      	cmp	r5, r3
   10860:	d301      	bcc.n	10866 <at_params_list_clear+0x22>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   10862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		at_param_clear(&params[i]);
   10866:	240c      	movs	r4, #12
   10868:	6873      	ldr	r3, [r6, #4]
   1086a:	fb04 3405 	mla	r4, r4, r5, r3
   1086e:	4620      	mov	r0, r4
   10870:	f7ff ffc6 	bl	10800 <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   10874:	b964      	cbnz	r4, 10890 <at_params_list_clear+0x4c>
   10876:	4641      	mov	r1, r8
   10878:	2314      	movs	r3, #20
   1087a:	463a      	mov	r2, r7
   1087c:	4648      	mov	r0, r9
   1087e:	f00c fa9b 	bl	1cdb8 <printk>
   10882:	4808      	ldr	r0, [pc, #32]	; (108a4 <at_params_list_clear+0x60>)
   10884:	f00c fa98 	bl	1cdb8 <printk>
   10888:	2114      	movs	r1, #20
   1088a:	4638      	mov	r0, r7
   1088c:	f00c fac6 	bl	1ce1c <assert_post_action>
	memset(param, 0, sizeof(struct at_param));
   10890:	220c      	movs	r2, #12
   10892:	2100      	movs	r1, #0
   10894:	4620      	mov	r0, r4
   10896:	f00d f80b 	bl	1d8b0 <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   1089a:	3501      	adds	r5, #1
   1089c:	e7de      	b.n	1085c <at_params_list_clear+0x18>
   1089e:	bf00      	nop
   108a0:	000201c5 	.word	0x000201c5
   108a4:	000201a9 	.word	0x000201a9
   108a8:	00020194 	.word	0x00020194
   108ac:	0001f722 	.word	0x0001f722

000108b0 <w_lte_lc_init>:
		k_sem_give(&link);
	}
}

static int w_lte_lc_init(void)
{
   108b0:	b508      	push	{r3, lr}
	if (at_cmd_write(nw_mode_preferred, NULL, 0, NULL) != 0) {
   108b2:	2300      	movs	r3, #0
   108b4:	480b      	ldr	r0, [pc, #44]	; (108e4 <w_lte_lc_init+0x34>)
   108b6:	461a      	mov	r2, r3
   108b8:	4619      	mov	r1, r3
   108ba:	f7ff fcad 	bl	10218 <at_cmd_write>
   108be:	4603      	mov	r3, r0
   108c0:	b960      	cbnz	r0, 108dc <w_lte_lc_init+0x2c>
#if defined(CONFIG_BSD_LIBRARY_TRACE_ENABLED)
	if (at_cmd_write(mdm_trace, NULL, 0, NULL) != 0) {
		return -EIO;
	}
#endif
	if (at_cmd_write(cereg_5_subscribe, NULL, 0, NULL) != 0) {
   108c2:	4602      	mov	r2, r0
   108c4:	4601      	mov	r1, r0
   108c6:	4808      	ldr	r0, [pc, #32]	; (108e8 <w_lte_lc_init+0x38>)
   108c8:	f7ff fca6 	bl	10218 <at_cmd_write>
   108cc:	4603      	mov	r3, r0
   108ce:	b928      	cbnz	r0, 108dc <w_lte_lc_init+0x2c>
		return -EIO;
	}
	LOG_INF("Using legacy LTE PCO mode...");
#endif
#if defined(CONFIG_LTE_PDP_CMD)
	if (at_cmd_write(cgdcont, NULL, 0, NULL) != 0) {
   108d0:	4602      	mov	r2, r0
   108d2:	4601      	mov	r1, r0
   108d4:	4805      	ldr	r0, [pc, #20]	; (108ec <w_lte_lc_init+0x3c>)
   108d6:	f7ff fc9f 	bl	10218 <at_cmd_write>
   108da:	b108      	cbz	r0, 108e0 <w_lte_lc_init+0x30>
		return -EIO;
   108dc:	f06f 0004 	mvn.w	r0, #4
	}
	LOG_INF("PDN Auth: %s", log_strdup(cgauth));
#endif

	return 0;
}
   108e0:	bd08      	pop	{r3, pc}
   108e2:	bf00      	nop
   108e4:	00020292 	.word	0x00020292
   108e8:	00020236 	.word	0x00020236
   108ec:	00020241 	.word	0x00020241

000108f0 <parse_nw_reg_status>:
static int parse_nw_reg_status(const char *at_response,
			       enum lte_lc_nw_reg_status *status,
			       size_t reg_status_index)
{
	int err, reg_status;
	struct at_param_list resp_list = {0};
   108f0:	2300      	movs	r3, #0
{
   108f2:	b5f0      	push	{r4, r5, r6, r7, lr}
   108f4:	b087      	sub	sp, #28
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   108f6:	9302      	str	r3, [sp, #8]
	struct at_param_list resp_list = {0};
   108f8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   108fc:	f8cd 300b 	str.w	r3, [sp, #11]
	size_t response_prefix_len = sizeof(response_prefix);
   10900:	2307      	movs	r3, #7
{
   10902:	460d      	mov	r5, r1
   10904:	4617      	mov	r7, r2
	size_t response_prefix_len = sizeof(response_prefix);
   10906:	9301      	str	r3, [sp, #4]

	if ((at_response == NULL) || (status == NULL)) {
   10908:	4606      	mov	r6, r0
   1090a:	2800      	cmp	r0, #0
   1090c:	d036      	beq.n	1097c <parse_nw_reg_status+0x8c>
   1090e:	2900      	cmp	r1, #0
   10910:	d034      	beq.n	1097c <parse_nw_reg_status+0x8c>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   10912:	210a      	movs	r1, #10
   10914:	a804      	add	r0, sp, #16
   10916:	f00d fe26 	bl	1e566 <at_params_list_init>
	if (err) {
   1091a:	4604      	mov	r4, r0
   1091c:	bb30      	cbnz	r0, 1096c <parse_nw_reg_status+0x7c>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	/* Parse CEREG response and populate AT parameter list */
	err = at_parser_max_params_from_str(at_response,
   1091e:	4601      	mov	r1, r0
   10920:	230a      	movs	r3, #10
   10922:	aa04      	add	r2, sp, #16
   10924:	4630      	mov	r0, r6
   10926:	f7ff fe95 	bl	10654 <at_parser_max_params_from_str>
					    NULL,
					    &resp_list,
					    AT_CEREG_PARAMS_COUNT_MAX);
	if (err) {
   1092a:	4604      	mov	r4, r0
   1092c:	b9d8      	cbnz	r0, 10966 <parse_nw_reg_status+0x76>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
		goto clean_exit;
	}

	/* Check if AT command response starts with +CEREG */
	err = at_params_string_get(&resp_list,
   1092e:	4601      	mov	r1, r0
   10930:	ab01      	add	r3, sp, #4
   10932:	aa02      	add	r2, sp, #8
   10934:	a804      	add	r0, sp, #16
   10936:	f00d fed8 	bl	1e6ea <at_params_string_get>
				   AT_RESPONSE_PREFIX_INDEX,
				   response_prefix,
				   &response_prefix_len);
	if (err) {
   1093a:	4604      	mov	r4, r0
   1093c:	b998      	cbnz	r0, 10966 <parse_nw_reg_status+0x76>
	if ((response == NULL) || (check == NULL)) {
   1093e:	4a11      	ldr	r2, [pc, #68]	; (10984 <parse_nw_reg_status+0x94>)
   10940:	9901      	ldr	r1, [sp, #4]
   10942:	a802      	add	r0, sp, #8
   10944:	f00d fef8 	bl	1e738 <response_is_valid.part.0>
		LOG_ERR("Could not get response prefix, error: %d", err);
		goto clean_exit;
	}

	if (!response_is_valid(response_prefix, response_prefix_len,
   10948:	b168      	cbz	r0, 10966 <parse_nw_reg_status+0x76>
		 */
		goto clean_exit;
	}

	/* Get the network registration status parameter from the response */
	err = at_params_int_get(&resp_list, reg_status_index,
   1094a:	466a      	mov	r2, sp
   1094c:	4639      	mov	r1, r7
   1094e:	a804      	add	r0, sp, #16
   10950:	f00d feb4 	bl	1e6bc <at_params_int_get>
				&reg_status);
	if (err) {
   10954:	4604      	mov	r4, r0
   10956:	b930      	cbnz	r0, 10966 <parse_nw_reg_status+0x76>
		LOG_ERR("Could not get registration status, error: %d", err);
		goto clean_exit;
	}

	/* Check if the parsed value maps to a valid registration status */
	switch (reg_status) {
   10958:	9b00      	ldr	r3, [sp, #0]
   1095a:	2b08      	cmp	r3, #8
   1095c:	d002      	beq.n	10964 <parse_nw_reg_status+0x74>
   1095e:	dc08      	bgt.n	10972 <parse_nw_reg_status+0x82>
   10960:	2b05      	cmp	r3, #5
   10962:	d808      	bhi.n	10976 <parse_nw_reg_status+0x86>
	case LTE_LC_NW_REG_REGISTRATION_DENIED:
	case LTE_LC_NW_REG_UNKNOWN:
	case LTE_LC_NW_REG_REGISTERED_ROAMING:
	case LTE_LC_NW_REG_REGISTERED_EMERGENCY:
	case LTE_LC_NW_REG_UICC_FAIL:
		*status = reg_status;
   10964:	702b      	strb	r3, [r5, #0]
		LOG_ERR("Invalid network registration status: %d", reg_status);
		err = -EIO;
	}

clean_exit:
	at_params_list_free(&resp_list);
   10966:	a804      	add	r0, sp, #16
   10968:	f00d fe10 	bl	1e58c <at_params_list_free>

	return err;
}
   1096c:	4620      	mov	r0, r4
   1096e:	b007      	add	sp, #28
   10970:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (reg_status) {
   10972:	2b5a      	cmp	r3, #90	; 0x5a
   10974:	d0f6      	beq.n	10964 <parse_nw_reg_status+0x74>
		err = -EIO;
   10976:	f06f 0404 	mvn.w	r4, #4
   1097a:	e7f4      	b.n	10966 <parse_nw_reg_status+0x76>
		return -EINVAL;
   1097c:	f06f 0415 	mvn.w	r4, #21
   10980:	e7f4      	b.n	1096c <parse_nw_reg_status+0x7c>
   10982:	bf00      	nop
   10984:	000202b3 	.word	0x000202b3

00010988 <at_handler>:
{
   10988:	b507      	push	{r0, r1, r2, lr}
	if (response == NULL) {
   1098a:	4608      	mov	r0, r1
   1098c:	b171      	cbz	r1, 109ac <at_handler+0x24>
	err = parse_nw_reg_status(response, &status, AT_CEREG_REG_STATUS_INDEX);
   1098e:	2201      	movs	r2, #1
   10990:	f10d 0107 	add.w	r1, sp, #7
   10994:	f7ff ffac 	bl	108f0 <parse_nw_reg_status>
	if (err) {
   10998:	b940      	cbnz	r0, 109ac <at_handler+0x24>
	if ((status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   1099a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1099e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   109a2:	2b01      	cmp	r3, #1
   109a4:	d102      	bne.n	109ac <at_handler+0x24>
	z_impl_k_sem_give(sem);
   109a6:	4803      	ldr	r0, [pc, #12]	; (109b4 <at_handler+0x2c>)
   109a8:	f00a fc6e 	bl	1b288 <z_impl_k_sem_give>
}
   109ac:	b003      	add	sp, #12
   109ae:	f85d fb04 	ldr.w	pc, [sp], #4
   109b2:	bf00      	nop
   109b4:	2002053c 	.word	0x2002053c

000109b8 <w_lte_lc_connect>:
{
   109b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   109bc:	2201      	movs	r2, #1
   109be:	2100      	movs	r1, #0
   109c0:	481f      	ldr	r0, [pc, #124]	; (10a40 <w_lte_lc_connect+0x88>)
   109c2:	f00d ff6c 	bl	1e89e <z_impl_k_sem_init>
	rc = at_notif_register_handler(NULL, at_handler);
   109c6:	491f      	ldr	r1, [pc, #124]	; (10a44 <w_lte_lc_connect+0x8c>)
   109c8:	2000      	movs	r0, #0
   109ca:	f7ff fca5 	bl	10318 <at_notif_register_handler>
	if (rc != 0) {
   109ce:	4604      	mov	r4, r0
   109d0:	bb78      	cbnz	r0, 10a32 <w_lte_lc_connect+0x7a>
   109d2:	2502      	movs	r5, #2
	const char *current_network_mode = nw_mode_preferred;
   109d4:	4c1c      	ldr	r4, [pc, #112]	; (10a48 <w_lte_lc_connect+0x90>)
		if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   109d6:	4f1d      	ldr	r7, [pc, #116]	; (10a4c <w_lte_lc_connect+0x94>)
	return z_impl_k_sem_take(sem, timeout);
   109d8:	f8df 807c 	ldr.w	r8, [pc, #124]	; 10a58 <w_lte_lc_connect+0xa0>
   109dc:	f8df 9060 	ldr.w	r9, [pc, #96]	; 10a40 <w_lte_lc_connect+0x88>
		if (at_cmd_write(current_network_mode, NULL, 0, NULL) != 0) {
   109e0:	2300      	movs	r3, #0
   109e2:	4620      	mov	r0, r4
   109e4:	461a      	mov	r2, r3
   109e6:	4619      	mov	r1, r3
   109e8:	f7ff fc16 	bl	10218 <at_cmd_write>
   109ec:	4603      	mov	r3, r0
   109ee:	b9d0      	cbnz	r0, 10a26 <w_lte_lc_connect+0x6e>
		if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   109f0:	4602      	mov	r2, r0
   109f2:	4601      	mov	r1, r0
   109f4:	4638      	mov	r0, r7
   109f6:	f7ff fc0f 	bl	10218 <at_cmd_write>
   109fa:	4606      	mov	r6, r0
   109fc:	b998      	cbnz	r0, 10a26 <w_lte_lc_connect+0x6e>
   109fe:	4641      	mov	r1, r8
   10a00:	4648      	mov	r0, r9
   10a02:	f00a fc8b 	bl	1b31c <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   10a06:	f110 0f0b 	cmn.w	r0, #11
   10a0a:	4604      	mov	r4, r0
   10a0c:	d10d      	bne.n	10a2a <w_lte_lc_connect+0x72>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   10a0e:	2d01      	cmp	r5, #1
   10a10:	d012      	beq.n	10a38 <w_lte_lc_connect+0x80>
				if (at_cmd_write(offline, NULL, 0, NULL) != 0) {
   10a12:	4633      	mov	r3, r6
   10a14:	4632      	mov	r2, r6
   10a16:	4631      	mov	r1, r6
   10a18:	480d      	ldr	r0, [pc, #52]	; (10a50 <w_lte_lc_connect+0x98>)
   10a1a:	f7ff fbfd 	bl	10218 <at_cmd_write>
				current_network_mode = nw_mode_fallback;
   10a1e:	4c0d      	ldr	r4, [pc, #52]	; (10a54 <w_lte_lc_connect+0x9c>)
   10a20:	2501      	movs	r5, #1
				if (at_cmd_write(offline, NULL, 0, NULL) != 0) {
   10a22:	2800      	cmp	r0, #0
   10a24:	d0dc      	beq.n	109e0 <w_lte_lc_connect+0x28>
			err = -EIO;
   10a26:	f06f 0404 	mvn.w	r4, #4
	rc = at_notif_deregister_handler(NULL, at_handler);
   10a2a:	4906      	ldr	r1, [pc, #24]	; (10a44 <w_lte_lc_connect+0x8c>)
   10a2c:	2000      	movs	r0, #0
   10a2e:	f7ff fcab 	bl	10388 <at_notif_deregister_handler>
}
   10a32:	4620      	mov	r0, r4
   10a34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				err = -ETIMEDOUT;
   10a38:	f06f 043b 	mvn.w	r4, #59	; 0x3b
   10a3c:	e7f5      	b.n	10a2a <w_lte_lc_connect+0x72>
   10a3e:	bf00      	nop
   10a40:	2002053c 	.word	0x2002053c
   10a44:	00010989 	.word	0x00010989
   10a48:	00020292 	.word	0x00020292
   10a4c:	00020271 	.word	0x00020271
   10a50:	000202a9 	.word	0x000202a9
   10a54:	0002027b 	.word	0x0002027b
   10a58:	000927c0 	.word	0x000927c0

00010a5c <lte_lc_psm_req>:
{
   10a5c:	b538      	push	{r3, r4, r5, lr}
	if (at_cmd_write(enable ? psm_req : psm_disable,
   10a5e:	2300      	movs	r3, #0
   10a60:	4d07      	ldr	r5, [pc, #28]	; (10a80 <lte_lc_psm_req+0x24>)
   10a62:	4c08      	ldr	r4, [pc, #32]	; (10a84 <lte_lc_psm_req+0x28>)
   10a64:	461a      	mov	r2, r3
   10a66:	4298      	cmp	r0, r3
   10a68:	bf14      	ite	ne
   10a6a:	4628      	movne	r0, r5
   10a6c:	4620      	moveq	r0, r4
   10a6e:	4619      	mov	r1, r3
   10a70:	f7ff fbd2 	bl	10218 <at_cmd_write>
   10a74:	2800      	cmp	r0, #0
}
   10a76:	bf18      	it	ne
   10a78:	f06f 0004 	mvnne.w	r0, #4
   10a7c:	bd38      	pop	{r3, r4, r5, pc}
   10a7e:	bf00      	nop
   10a80:	000202c4 	.word	0x000202c4
   10a84:	000202ba 	.word	0x000202ba

00010a88 <lte_lc_psm_get>:
{
   10a88:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct at_param_list at_resp_list = {0};
   10a8a:	2400      	movs	r4, #0
{
   10a8c:	b09d      	sub	sp, #116	; 0x74
   10a8e:	4606      	mov	r6, r0
   10a90:	460d      	mov	r5, r1
	char buf[AT_CEREG_RESPONSE_MAX_LEN] = {0};
   10a92:	2250      	movs	r2, #80	; 0x50
   10a94:	4621      	mov	r1, r4
   10a96:	a808      	add	r0, sp, #32
	struct at_param_list at_resp_list = {0};
   10a98:	e9cd 4403 	strd	r4, r4, [sp, #12]
	char buf[AT_CEREG_RESPONSE_MAX_LEN] = {0};
   10a9c:	f00c ff08 	bl	1d8b0 <memset>
	size_t timer_str_len = sizeof(timer_str) - 1;
   10aa0:	2308      	movs	r3, #8
	char timer_str[9] = {0};
   10aa2:	e9cd 4405 	strd	r4, r4, [sp, #20]
   10aa6:	f88d 401c 	strb.w	r4, [sp, #28]
	char unit_str[4] = {0};
   10aaa:	9401      	str	r4, [sp, #4]
	size_t timer_str_len = sizeof(timer_str) - 1;
   10aac:	9302      	str	r3, [sp, #8]
	if ((tau == NULL) || (active_time == NULL)) {
   10aae:	2e00      	cmp	r6, #0
   10ab0:	d06f      	beq.n	10b92 <lte_lc_psm_get+0x10a>
   10ab2:	2d00      	cmp	r5, #0
   10ab4:	d06d      	beq.n	10b92 <lte_lc_psm_get+0x10a>
	err = at_cmd_write(AT_CEREG_5, NULL, 0, NULL);
   10ab6:	4623      	mov	r3, r4
   10ab8:	4622      	mov	r2, r4
   10aba:	4621      	mov	r1, r4
   10abc:	4836      	ldr	r0, [pc, #216]	; (10b98 <lte_lc_psm_get+0x110>)
   10abe:	f7ff fbab 	bl	10218 <at_cmd_write>
	if (err) {
   10ac2:	4604      	mov	r4, r0
   10ac4:	bb70      	cbnz	r0, 10b24 <lte_lc_psm_get+0x9c>
	err = at_cmd_write(AT_CEREG_READ, buf, sizeof(buf), NULL);
   10ac6:	4603      	mov	r3, r0
   10ac8:	2250      	movs	r2, #80	; 0x50
   10aca:	a908      	add	r1, sp, #32
   10acc:	4833      	ldr	r0, [pc, #204]	; (10b9c <lte_lc_psm_get+0x114>)
   10ace:	f7ff fba3 	bl	10218 <at_cmd_write>
	if (err) {
   10ad2:	4604      	mov	r4, r0
   10ad4:	bb30      	cbnz	r0, 10b24 <lte_lc_psm_get+0x9c>
	err = at_params_list_init(&at_resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   10ad6:	210a      	movs	r1, #10
   10ad8:	a803      	add	r0, sp, #12
   10ada:	f00d fd44 	bl	1e566 <at_params_list_init>
	if (err) {
   10ade:	4604      	mov	r4, r0
   10ae0:	bb00      	cbnz	r0, 10b24 <lte_lc_psm_get+0x9c>
	err = at_parser_max_params_from_str(buf,
   10ae2:	4601      	mov	r1, r0
   10ae4:	230a      	movs	r3, #10
   10ae6:	aa03      	add	r2, sp, #12
   10ae8:	a808      	add	r0, sp, #32
   10aea:	f7ff fdb3 	bl	10654 <at_parser_max_params_from_str>
	if (err) {
   10aee:	4604      	mov	r4, r0
   10af0:	b9a8      	cbnz	r0, 10b1e <lte_lc_psm_get+0x96>
	err = at_params_string_get(&at_resp_list,
   10af2:	ab02      	add	r3, sp, #8
   10af4:	aa05      	add	r2, sp, #20
   10af6:	2109      	movs	r1, #9
   10af8:	a803      	add	r0, sp, #12
   10afa:	f00d fdf6 	bl	1e6ea <at_params_string_get>
	if (err) {
   10afe:	4604      	mov	r4, r0
   10b00:	b968      	cbnz	r0, 10b1e <lte_lc_psm_get+0x96>
	memcpy(unit_str, timer_str, unit_str_len);
   10b02:	2203      	movs	r2, #3
   10b04:	a905      	add	r1, sp, #20
   10b06:	a801      	add	r0, sp, #4
   10b08:	f00c fea8 	bl	1d85c <memcpy>
	index = strtoul(unit_str, NULL, 2);
   10b0c:	2202      	movs	r2, #2
   10b0e:	4621      	mov	r1, r4
   10b10:	a801      	add	r0, sp, #4
   10b12:	f00c fdc0 	bl	1d696 <strtoul>
	if (index > (ARRAY_SIZE(t3412_lookup) - 1)) {
   10b16:	2807      	cmp	r0, #7
   10b18:	d907      	bls.n	10b2a <lte_lc_psm_get+0xa2>
		err = -EINVAL;
   10b1a:	f06f 0415 	mvn.w	r4, #21
	at_params_list_free(&at_resp_list);
   10b1e:	a803      	add	r0, sp, #12
   10b20:	f00d fd34 	bl	1e58c <at_params_list_free>
}
   10b24:	4620      	mov	r0, r4
   10b26:	b01d      	add	sp, #116	; 0x74
   10b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	timer_unit = t3412_lookup[index];
   10b2a:	4b1d      	ldr	r3, [pc, #116]	; (10ba0 <lte_lc_psm_get+0x118>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   10b2c:	2202      	movs	r2, #2
	timer_unit = t3412_lookup[index];
   10b2e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   10b32:	4621      	mov	r1, r4
   10b34:	f10d 0017 	add.w	r0, sp, #23
   10b38:	f00c fdad 	bl	1d696 <strtoul>
	*tau = timer_unit ? timer_unit * timer_value : -1;
   10b3c:	b31f      	cbz	r7, 10b86 <lte_lc_psm_get+0xfe>
   10b3e:	4378      	muls	r0, r7
   10b40:	6030      	str	r0, [r6, #0]
	err = at_params_string_get(&at_resp_list,
   10b42:	ab02      	add	r3, sp, #8
   10b44:	aa05      	add	r2, sp, #20
   10b46:	2108      	movs	r1, #8
   10b48:	a803      	add	r0, sp, #12
   10b4a:	f00d fdce 	bl	1e6ea <at_params_string_get>
	if (err) {
   10b4e:	4604      	mov	r4, r0
   10b50:	2800      	cmp	r0, #0
   10b52:	d1e4      	bne.n	10b1e <lte_lc_psm_get+0x96>
	memcpy(unit_str, timer_str, unit_str_len);
   10b54:	2203      	movs	r2, #3
   10b56:	a905      	add	r1, sp, #20
   10b58:	a801      	add	r0, sp, #4
   10b5a:	f00c fe7f 	bl	1d85c <memcpy>
	index = strtoul(unit_str, NULL, 2);
   10b5e:	2202      	movs	r2, #2
   10b60:	4621      	mov	r1, r4
   10b62:	a801      	add	r0, sp, #4
   10b64:	f00c fd97 	bl	1d696 <strtoul>
	if (index > (ARRAY_SIZE(t3324_lookup) - 1)) {
   10b68:	2807      	cmp	r0, #7
   10b6a:	d8d6      	bhi.n	10b1a <lte_lc_psm_get+0x92>
	timer_unit = t3324_lookup[index];
   10b6c:	4b0d      	ldr	r3, [pc, #52]	; (10ba4 <lte_lc_psm_get+0x11c>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   10b6e:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[index];
   10b70:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   10b74:	4621      	mov	r1, r4
   10b76:	f10d 0017 	add.w	r0, sp, #23
   10b7a:	f00c fd8c 	bl	1d696 <strtoul>
	*active_time = timer_unit ? timer_unit * timer_value : -1;
   10b7e:	b12e      	cbz	r6, 10b8c <lte_lc_psm_get+0x104>
   10b80:	4370      	muls	r0, r6
   10b82:	6028      	str	r0, [r5, #0]
parse_psm_clean_exit:
   10b84:	e7cb      	b.n	10b1e <lte_lc_psm_get+0x96>
	*tau = timer_unit ? timer_unit * timer_value : -1;
   10b86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10b8a:	e7d9      	b.n	10b40 <lte_lc_psm_get+0xb8>
	*active_time = timer_unit ? timer_unit * timer_value : -1;
   10b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10b90:	e7f7      	b.n	10b82 <lte_lc_psm_get+0xfa>
		return -EINVAL;
   10b92:	f06f 0415 	mvn.w	r4, #21
   10b96:	e7c5      	b.n	10b24 <lte_lc_psm_get+0x9c>
   10b98:	0002025c 	.word	0x0002025c
   10b9c:	00020267 	.word	0x00020267
   10ba0:	0001eed4 	.word	0x0001eed4
   10ba4:	0001eeb4 	.word	0x0001eeb4

00010ba8 <check_ext_api_requests>:
	return true;
}


static int check_ext_api_requests(struct device *dev)
{
   10ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   10bac:	2600      	movs	r6, #0
			skip_ext_apis(&m_firmware_info);
   10bae:	4c1e      	ldr	r4, [pc, #120]	; (10c28 <check_ext_api_requests+0x80>)
{
   10bb0:	b085      	sub	sp, #20
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   10bb2:	f854 9c04 	ldr.w	r9, [r4, #-4]
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							u32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const u32_t ext_api_magic[] = {EXT_API_MAGIC};
   10bb6:	4f1d      	ldr	r7, [pc, #116]	; (10c2c <check_ext_api_requests+0x84>)
   10bb8:	ad01      	add	r5, sp, #4
   10bba:	45b1      	cmp	r9, r6
   10bbc:	d803      	bhi.n	10bc6 <check_ext_api_requests+0x1e>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   10bbe:	2000      	movs	r0, #0
   10bc0:	b005      	add	sp, #20
   10bc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((u32_t)*(ext_api_req->ext_api))
   10bc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10bc8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   10bcc:	f8d3 8000 	ldr.w	r8, [r3]
   10bd0:	e885 0007 	stmia.w	r5, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   10bd4:	220c      	movs	r2, #12
   10bd6:	4629      	mov	r1, r5
   10bd8:	4640      	mov	r0, r8
   10bda:	f00c fe2f 	bl	1d83c <memcmp>
   10bde:	b9a0      	cbnz	r0, 10c0a <check_ext_api_requests+0x62>
   10be0:	f1b8 0f00 	cmp.w	r8, #0
   10be4:	d011      	beq.n	10c0a <check_ext_api_requests+0x62>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   10be6:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const u32_t req_id = ext_api_req->request.ext_api_id;
   10be8:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   10bea:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   10bec:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   10bee:	4291      	cmp	r1, r2
   10bf0:	d10b      	bne.n	10c0a <check_ext_api_requests+0x62>
		&&  (ext_api->ext_api_version >= req_min_version)
   10bf2:	699a      	ldr	r2, [r3, #24]
	const u32_t req_min_version = ext_api_req->request.ext_api_version;
   10bf4:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   10bf6:	4291      	cmp	r1, r2
   10bf8:	d807      	bhi.n	10c0a <check_ext_api_requests+0x62>
	const u32_t req_max_version = ext_api_req->ext_api_max_version;
   10bfa:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   10bfc:	4291      	cmp	r1, r2
   10bfe:	d904      	bls.n	10c0a <check_ext_api_requests+0x62>
	const u32_t req_flags = ext_api_req->request.ext_api_flags;
   10c00:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   10c02:	695b      	ldr	r3, [r3, #20]
   10c04:	ea32 0303 	bics.w	r3, r2, r3
   10c08:	d007      	beq.n	10c1a <check_ext_api_requests+0x72>
		} else if (ext_api_req->required) {
   10c0a:	6a23      	ldr	r3, [r4, #32]
   10c0c:	b14b      	cbz	r3, 10c22 <check_ext_api_requests+0x7a>
			k_panic();
   10c0e:	4040      	eors	r0, r0
   10c10:	f380 8811 	msr	BASEPRI, r0
   10c14:	f04f 0004 	mov.w	r0, #4
   10c18:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   10c1a:	68e3      	ldr	r3, [r4, #12]
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   10c1c:	3601      	adds	r6, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   10c1e:	441c      	add	r4, r3
   10c20:	e7cb      	b.n	10bba <check_ext_api_requests+0x12>
			*ext_api_req->ext_api = NULL;
   10c22:	6a62      	ldr	r2, [r4, #36]	; 0x24
   10c24:	6013      	str	r3, [r2, #0]
   10c26:	e7f8      	b.n	10c1a <check_ext_api_requests+0x72>
   10c28:	0000c23c 	.word	0x0000c23c
   10c2c:	0001ed58 	.word	0x0001ed58

00010c30 <rpc_logobj_client_evt_handler>:
   10c30:	b120      	cbz	r0, 10c3c <rpc_logobj_client_evt_handler+0xc>
   10c32:	f850 1b08 	ldr.w	r1, [r0], #8
   10c36:	0c09      	lsrs	r1, r1, #16
   10c38:	f000 b852 	b.w	10ce0 <logobj_event_handler>
   10c3c:	4770      	bx	lr
   10c3e:	bf00      	nop

00010c40 <rpc_logobj_client_init>:
   10c40:	4801      	ldr	r0, [pc, #4]	; (10c48 <rpc_logobj_client_init+0x8>)
   10c42:	f006 bb25 	b.w	17290 <rpc_client_register>
   10c46:	bf00      	nop
   10c48:	0001eef4 	.word	0x0001eef4

00010c4c <rpc_logobj_client_request_alloc>:
   10c4c:	2300      	movs	r3, #0
   10c4e:	b510      	push	{r4, lr}
   10c50:	b082      	sub	sp, #8
   10c52:	9301      	str	r3, [sp, #4]
   10c54:	b961      	cbnz	r1, 10c70 <rpc_logobj_client_request_alloc+0x24>
   10c56:	b170      	cbz	r0, 10c76 <rpc_logobj_client_request_alloc+0x2a>
   10c58:	4604      	mov	r4, r0
   10c5a:	aa01      	add	r2, sp, #4
   10c5c:	2009      	movs	r0, #9
   10c5e:	f006 fd4f 	bl	17700 <rpc_message_alloc>
   10c62:	b918      	cbnz	r0, 10c6c <rpc_logobj_client_request_alloc+0x20>
   10c64:	9b01      	ldr	r3, [sp, #4]
   10c66:	b10b      	cbz	r3, 10c6c <rpc_logobj_client_request_alloc+0x20>
   10c68:	3308      	adds	r3, #8
   10c6a:	6023      	str	r3, [r4, #0]
   10c6c:	b002      	add	sp, #8
   10c6e:	bd10      	pop	{r4, pc}
   10c70:	200f      	movs	r0, #15
   10c72:	b002      	add	sp, #8
   10c74:	bd10      	pop	{r4, pc}
   10c76:	200e      	movs	r0, #14
   10c78:	b002      	add	sp, #8
   10c7a:	bd10      	pop	{r4, pc}

00010c7c <rpc_logobj_client_request_send>:
   10c7c:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   10c80:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   10c84:	d10b      	bne.n	10c9e <rpc_logobj_client_request_send+0x22>
   10c86:	b160      	cbz	r0, 10ca2 <rpc_logobj_client_request_send+0x26>
   10c88:	4603      	mov	r3, r0
   10c8a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   10c8e:	2009      	movs	r0, #9
   10c90:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   10c94:	f843 1d08 	str.w	r1, [r3, #-8]!
   10c98:	4619      	mov	r1, r3
   10c9a:	f006 bd19 	b.w	176d0 <rpc_message_send>
   10c9e:	200f      	movs	r0, #15
   10ca0:	4770      	bx	lr
   10ca2:	200e      	movs	r0, #14
   10ca4:	4770      	bx	lr
   10ca6:	bf00      	nop

00010ca8 <rpc_logobj_client_message_free>:
   10ca8:	b120      	cbz	r0, 10cb4 <rpc_logobj_client_message_free+0xc>
   10caa:	f1a0 0108 	sub.w	r1, r0, #8
   10cae:	2009      	movs	r0, #9
   10cb0:	f006 bd58 	b.w	17764 <rpc_message_free>
   10cb4:	200e      	movs	r0, #14
   10cb6:	4770      	bx	lr

00010cb8 <rpc_logobj_client_data_free>:
   10cb8:	b118      	cbz	r0, 10cc2 <rpc_logobj_client_data_free+0xa>
   10cba:	4601      	mov	r1, r0
   10cbc:	2009      	movs	r0, #9
   10cbe:	f006 be63 	b.w	17988 <rpc_message_data_free>
   10cc2:	200e      	movs	r0, #14
   10cc4:	4770      	bx	lr
   10cc6:	bf00      	nop

00010cc8 <packet_free_cb>:
   10cc8:	b510      	push	{r4, lr}
   10cca:	4604      	mov	r4, r0
   10ccc:	6800      	ldr	r0, [r0, #0]
   10cce:	f7ff fff3 	bl	10cb8 <rpc_logobj_client_data_free>
   10cd2:	68a0      	ldr	r0, [r4, #8]
   10cd4:	b118      	cbz	r0, 10cde <packet_free_cb+0x16>
   10cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10cda:	f001 b90f 	b.w	11efc <nrf_free>
   10cde:	bd10      	pop	{r4, pc}

00010ce0 <logobj_event_handler>:
   10ce0:	b530      	push	{r4, r5, lr}
   10ce2:	4b3b      	ldr	r3, [pc, #236]	; (10dd0 <logobj_event_handler+0xf0>)
   10ce4:	b085      	sub	sp, #20
   10ce6:	681d      	ldr	r5, [r3, #0]
   10ce8:	2d00      	cmp	r5, #0
   10cea:	d04c      	beq.n	10d86 <logobj_event_handler+0xa6>
   10cec:	f248 0302 	movw	r3, #32770	; 0x8002
   10cf0:	4299      	cmp	r1, r3
   10cf2:	d053      	beq.n	10d9c <logobj_event_handler+0xbc>
   10cf4:	d91c      	bls.n	10d30 <logobj_event_handler+0x50>
   10cf6:	f248 0303 	movw	r3, #32771	; 0x8003
   10cfa:	4299      	cmp	r1, r3
   10cfc:	d05a      	beq.n	10db4 <logobj_event_handler+0xd4>
   10cfe:	f249 0301 	movw	r3, #36865	; 0x9001
   10d02:	4299      	cmp	r1, r3
   10d04:	d147      	bne.n	10d96 <logobj_event_handler+0xb6>
   10d06:	2400      	movs	r4, #0
   10d08:	6843      	ldr	r3, [r0, #4]
   10d0a:	6802      	ldr	r2, [r0, #0]
   10d0c:	e9cd 4402 	strd	r4, r4, [sp, #8]
   10d10:	e9cd 2300 	strd	r2, r3, [sp]
   10d14:	69e8      	ldr	r0, [r5, #28]
   10d16:	4669      	mov	r1, sp
   10d18:	6803      	ldr	r3, [r0, #0]
   10d1a:	685b      	ldr	r3, [r3, #4]
   10d1c:	4798      	blx	r3
   10d1e:	3001      	adds	r0, #1
   10d20:	d04e      	beq.n	10dc0 <logobj_event_handler+0xe0>
   10d22:	4620      	mov	r0, r4
   10d24:	682b      	ldr	r3, [r5, #0]
   10d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   10d2a:	602b      	str	r3, [r5, #0]
   10d2c:	b005      	add	sp, #20
   10d2e:	bd30      	pop	{r4, r5, pc}
   10d30:	f248 0301 	movw	r3, #32769	; 0x8001
   10d34:	4299      	cmp	r1, r3
   10d36:	d12e      	bne.n	10d96 <logobj_event_handler+0xb6>
   10d38:	68c3      	ldr	r3, [r0, #12]
   10d3a:	2b00      	cmp	r3, #0
   10d3c:	d135      	bne.n	10daa <logobj_event_handler+0xca>
   10d3e:	6828      	ldr	r0, [r5, #0]
   10d40:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   10d44:	d03e      	beq.n	10dc4 <logobj_event_handler+0xe4>
   10d46:	682b      	ldr	r3, [r5, #0]
   10d48:	b29b      	uxth	r3, r3
   10d4a:	2b01      	cmp	r3, #1
   10d4c:	d105      	bne.n	10d5a <logobj_event_handler+0x7a>
   10d4e:	682b      	ldr	r3, [r5, #0]
   10d50:	0c1b      	lsrs	r3, r3, #16
   10d52:	041b      	lsls	r3, r3, #16
   10d54:	f043 0302 	orr.w	r3, r3, #2
   10d58:	602b      	str	r3, [r5, #0]
   10d5a:	4b1e      	ldr	r3, [pc, #120]	; (10dd4 <logobj_event_handler+0xf4>)
   10d5c:	781a      	ldrb	r2, [r3, #0]
   10d5e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   10d62:	2a00      	cmp	r2, #0
   10d64:	d031      	beq.n	10dca <logobj_event_handler+0xea>
   10d66:	4a1c      	ldr	r2, [pc, #112]	; (10dd8 <logobj_event_handler+0xf8>)
   10d68:	7811      	ldrb	r1, [r2, #0]
   10d6a:	b909      	cbnz	r1, 10d70 <logobj_event_handler+0x90>
   10d6c:	2101      	movs	r1, #1
   10d6e:	7011      	strb	r1, [r2, #0]
   10d70:	2000      	movs	r0, #0
   10d72:	7018      	strb	r0, [r3, #0]
   10d74:	682b      	ldr	r3, [r5, #0]
   10d76:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   10d7a:	602b      	str	r3, [r5, #0]
   10d7c:	682b      	ldr	r3, [r5, #0]
   10d7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   10d82:	602b      	str	r3, [r5, #0]
   10d84:	e7d2      	b.n	10d2c <logobj_event_handler+0x4c>
   10d86:	6800      	ldr	r0, [r0, #0]
   10d88:	2800      	cmp	r0, #0
   10d8a:	d0cf      	beq.n	10d2c <logobj_event_handler+0x4c>
   10d8c:	f7ff ff94 	bl	10cb8 <rpc_logobj_client_data_free>
   10d90:	4628      	mov	r0, r5
   10d92:	b005      	add	sp, #20
   10d94:	bd30      	pop	{r4, r5, pc}
   10d96:	2000      	movs	r0, #0
   10d98:	b005      	add	sp, #20
   10d9a:	bd30      	pop	{r4, r5, pc}
   10d9c:	682b      	ldr	r3, [r5, #0]
   10d9e:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   10da2:	d00b      	beq.n	10dbc <logobj_event_handler+0xdc>
   10da4:	68c0      	ldr	r0, [r0, #12]
   10da6:	2800      	cmp	r0, #0
   10da8:	d0e4      	beq.n	10d74 <logobj_event_handler+0x94>
   10daa:	230e      	movs	r3, #14
   10dac:	2000      	movs	r0, #0
   10dae:	606b      	str	r3, [r5, #4]
   10db0:	b005      	add	sp, #20
   10db2:	bd30      	pop	{r4, r5, pc}
   10db4:	68c3      	ldr	r3, [r0, #12]
   10db6:	2b01      	cmp	r3, #1
   10db8:	d1a5      	bne.n	10d06 <logobj_event_handler+0x26>
   10dba:	e7f6      	b.n	10daa <logobj_event_handler+0xca>
   10dbc:	4618      	mov	r0, r3
   10dbe:	e7b5      	b.n	10d2c <logobj_event_handler+0x4c>
   10dc0:	2002      	movs	r0, #2
   10dc2:	e7b3      	b.n	10d2c <logobj_event_handler+0x4c>
   10dc4:	230e      	movs	r3, #14
   10dc6:	606b      	str	r3, [r5, #4]
   10dc8:	e7b0      	b.n	10d2c <logobj_event_handler+0x4c>
   10dca:	4a03      	ldr	r2, [pc, #12]	; (10dd8 <logobj_event_handler+0xf8>)
   10dcc:	7011      	strb	r1, [r2, #0]
   10dce:	e7cf      	b.n	10d70 <logobj_event_handler+0x90>
   10dd0:	20020558 	.word	0x20020558
   10dd4:	20024f35 	.word	0x20024f35
   10dd8:	20024f36 	.word	0x20024f36

00010ddc <logobj_interface_init>:
   10ddc:	2300      	movs	r3, #0
   10dde:	b510      	push	{r4, lr}
   10de0:	4907      	ldr	r1, [pc, #28]	; (10e00 <logobj_interface_init+0x24>)
   10de2:	4a08      	ldr	r2, [pc, #32]	; (10e04 <logobj_interface_init+0x28>)
   10de4:	4c08      	ldr	r4, [pc, #32]	; (10e08 <logobj_interface_init+0x2c>)
   10de6:	4809      	ldr	r0, [pc, #36]	; (10e0c <logobj_interface_init+0x30>)
   10de8:	7023      	strb	r3, [r4, #0]
   10dea:	6003      	str	r3, [r0, #0]
   10dec:	700b      	strb	r3, [r1, #0]
   10dee:	6013      	str	r3, [r2, #0]
   10df0:	f7ff ff26 	bl	10c40 <rpc_logobj_client_init>
   10df4:	3000      	adds	r0, #0
   10df6:	bf18      	it	ne
   10df8:	2001      	movne	r0, #1
   10dfa:	4240      	negs	r0, r0
   10dfc:	bd10      	pop	{r4, pc}
   10dfe:	bf00      	nop
   10e00:	20024f35 	.word	0x20024f35
   10e04:	20020554 	.word	0x20020554
   10e08:	20024f36 	.word	0x20024f36
   10e0c:	20020558 	.word	0x20020558

00010e10 <logobj_interface_open>:
   10e10:	2300      	movs	r3, #0
   10e12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10e16:	2866      	cmp	r0, #102	; 0x66
   10e18:	b082      	sub	sp, #8
   10e1a:	9300      	str	r3, [sp, #0]
   10e1c:	d172      	bne.n	10f04 <logobj_interface_open+0xf4>
   10e1e:	2902      	cmp	r1, #2
   10e20:	4689      	mov	r9, r1
   10e22:	d16f      	bne.n	10f04 <logobj_interface_open+0xf4>
   10e24:	f240 2305 	movw	r3, #517	; 0x205
   10e28:	429a      	cmp	r2, r3
   10e2a:	4692      	mov	sl, r2
   10e2c:	d16a      	bne.n	10f04 <logobj_interface_open+0xf4>
   10e2e:	4f48      	ldr	r7, [pc, #288]	; (10f50 <logobj_interface_open+0x140>)
   10e30:	683d      	ldr	r5, [r7, #0]
   10e32:	2d00      	cmp	r5, #0
   10e34:	d17c      	bne.n	10f30 <logobj_interface_open+0x120>
   10e36:	4680      	mov	r8, r0
   10e38:	4a46      	ldr	r2, [pc, #280]	; (10f54 <logobj_interface_open+0x144>)
   10e3a:	4668      	mov	r0, sp
   10e3c:	f005 ffd8 	bl	16df0 <interface_socket_allocate>
   10e40:	9b00      	ldr	r3, [sp, #0]
   10e42:	4606      	mov	r6, r0
   10e44:	2b00      	cmp	r3, #0
   10e46:	d07d      	beq.n	10f44 <logobj_interface_open+0x134>
   10e48:	4629      	mov	r1, r5
   10e4a:	2204      	movs	r2, #4
   10e4c:	4842      	ldr	r0, [pc, #264]	; (10f58 <logobj_interface_open+0x148>)
   10e4e:	603b      	str	r3, [r7, #0]
   10e50:	f00c fd2e 	bl	1d8b0 <memset>
   10e54:	9c00      	ldr	r4, [sp, #0]
   10e56:	4629      	mov	r1, r5
   10e58:	e9c4 8903 	strd	r8, r9, [r4, #12]
   10e5c:	f8c4 a014 	str.w	sl, [r4, #20]
   10e60:	a801      	add	r0, sp, #4
   10e62:	f7ff fef3 	bl	10c4c <rpc_logobj_client_request_alloc>
   10e66:	2800      	cmp	r0, #0
   10e68:	d13c      	bne.n	10ee4 <logobj_interface_open+0xd4>
   10e6a:	2201      	movs	r2, #1
   10e6c:	2104      	movs	r1, #4
   10e6e:	9b01      	ldr	r3, [sp, #4]
   10e70:	4d3a      	ldr	r5, [pc, #232]	; (10f5c <logobj_interface_open+0x14c>)
   10e72:	7358      	strb	r0, [r3, #13]
   10e74:	7398      	strb	r0, [r3, #14]
   10e76:	73d8      	strb	r0, [r3, #15]
   10e78:	7258      	strb	r0, [r3, #9]
   10e7a:	7298      	strb	r0, [r3, #10]
   10e7c:	72d8      	strb	r0, [r3, #11]
   10e7e:	7219      	strb	r1, [r3, #8]
   10e80:	702a      	strb	r2, [r5, #0]
   10e82:	731a      	strb	r2, [r3, #12]
   10e84:	6822      	ldr	r2, [r4, #0]
   10e86:	4618      	mov	r0, r3
   10e88:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   10e8c:	6022      	str	r2, [r4, #0]
   10e8e:	f247 0101 	movw	r1, #28673	; 0x7001
   10e92:	f7ff fef3 	bl	10c7c <rpc_logobj_client_request_send>
   10e96:	bb38      	cbnz	r0, 10ee8 <logobj_interface_open+0xd8>
   10e98:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   10e9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10ea0:	4611      	mov	r1, r2
   10ea2:	4630      	mov	r0, r6
   10ea4:	f006 f850 	bl	16f48 <interface_socket_wait>
   10ea8:	4604      	mov	r4, r0
   10eaa:	b310      	cbz	r0, 10ef2 <logobj_interface_open+0xe2>
   10eac:	9a00      	ldr	r2, [sp, #0]
   10eae:	2e00      	cmp	r6, #0
   10eb0:	6813      	ldr	r3, [r2, #0]
   10eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   10eb6:	6013      	str	r3, [r2, #0]
   10eb8:	9a00      	ldr	r2, [sp, #0]
   10eba:	6813      	ldr	r3, [r2, #0]
   10ebc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   10ec0:	6013      	str	r3, [r2, #0]
   10ec2:	9a00      	ldr	r2, [sp, #0]
   10ec4:	6813      	ldr	r3, [r2, #0]
   10ec6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   10eca:	6013      	str	r3, [r2, #0]
   10ecc:	da36      	bge.n	10f3c <logobj_interface_open+0x12c>
   10ece:	2300      	movs	r3, #0
   10ed0:	4620      	mov	r0, r4
   10ed2:	603b      	str	r3, [r7, #0]
   10ed4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   10ed8:	f7fe fbe6 	bl	f6a8 <bsd_os_errno_set>
   10edc:	4630      	mov	r0, r6
   10ede:	b002      	add	sp, #8
   10ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10ee4:	240c      	movs	r4, #12
   10ee6:	e7e1      	b.n	10eac <logobj_interface_open+0x9c>
   10ee8:	9801      	ldr	r0, [sp, #4]
   10eea:	f7ff fedd 	bl	10ca8 <rpc_logobj_client_message_free>
   10eee:	2405      	movs	r4, #5
   10ef0:	e7dc      	b.n	10eac <logobj_interface_open+0x9c>
   10ef2:	4630      	mov	r0, r6
   10ef4:	f006 f89c 	bl	17030 <interface_socket_from_handle_get>
   10ef8:	b150      	cbz	r0, 10f10 <logobj_interface_open+0x100>
   10efa:	6844      	ldr	r4, [r0, #4]
   10efc:	b144      	cbz	r4, 10f10 <logobj_interface_open+0x100>
   10efe:	2300      	movs	r3, #0
   10f00:	6043      	str	r3, [r0, #4]
   10f02:	e7d3      	b.n	10eac <logobj_interface_open+0x9c>
   10f04:	2016      	movs	r0, #22
   10f06:	f7fe fbcf 	bl	f6a8 <bsd_os_errno_set>
   10f0a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   10f0e:	e7e5      	b.n	10edc <logobj_interface_open+0xcc>
   10f10:	9a00      	ldr	r2, [sp, #0]
   10f12:	6813      	ldr	r3, [r2, #0]
   10f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   10f18:	6013      	str	r3, [r2, #0]
   10f1a:	9a00      	ldr	r2, [sp, #0]
   10f1c:	6813      	ldr	r3, [r2, #0]
   10f1e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   10f22:	6013      	str	r3, [r2, #0]
   10f24:	9a00      	ldr	r2, [sp, #0]
   10f26:	6813      	ldr	r3, [r2, #0]
   10f28:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   10f2c:	6013      	str	r3, [r2, #0]
   10f2e:	e7d5      	b.n	10edc <logobj_interface_open+0xcc>
   10f30:	2001      	movs	r0, #1
   10f32:	f7fe fbb9 	bl	f6a8 <bsd_os_errno_set>
   10f36:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   10f3a:	e7cf      	b.n	10edc <logobj_interface_open+0xcc>
   10f3c:	4630      	mov	r0, r6
   10f3e:	f005 ffb5 	bl	16eac <interface_socket_free>
   10f42:	e7c4      	b.n	10ece <logobj_interface_open+0xbe>
   10f44:	2018      	movs	r0, #24
   10f46:	f7fe fbaf 	bl	f6a8 <bsd_os_errno_set>
   10f4a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   10f4e:	e7c5      	b.n	10edc <logobj_interface_open+0xcc>
   10f50:	20020558 	.word	0x20020558
   10f54:	00010cc9 	.word	0x00010cc9
   10f58:	20020554 	.word	0x20020554
   10f5c:	20024f35 	.word	0x20024f35

00010f60 <logobj_interface_read>:
   10f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10f64:	b085      	sub	sp, #20
   10f66:	2900      	cmp	r1, #0
   10f68:	d05e      	beq.n	11028 <logobj_interface_read+0xc8>
   10f6a:	2a00      	cmp	r2, #0
   10f6c:	4616      	mov	r6, r2
   10f6e:	dd5b      	ble.n	11028 <logobj_interface_read+0xc8>
   10f70:	461f      	mov	r7, r3
   10f72:	4680      	mov	r8, r0
   10f74:	460d      	mov	r5, r1
   10f76:	f006 f85b 	bl	17030 <interface_socket_from_handle_get>
   10f7a:	4604      	mov	r4, r0
   10f7c:	2800      	cmp	r0, #0
   10f7e:	d059      	beq.n	11034 <logobj_interface_read+0xd4>
   10f80:	69c0      	ldr	r0, [r0, #28]
   10f82:	07ba      	lsls	r2, r7, #30
   10f84:	6803      	ldr	r3, [r0, #0]
   10f86:	68db      	ldr	r3, [r3, #12]
   10f88:	d524      	bpl.n	10fd4 <logobj_interface_read+0x74>
   10f8a:	4798      	blx	r3
   10f8c:	3001      	adds	r0, #1
   10f8e:	d03b      	beq.n	11008 <logobj_interface_read+0xa8>
   10f90:	6823      	ldr	r3, [r4, #0]
   10f92:	69e0      	ldr	r0, [r4, #28]
   10f94:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   10f98:	d038      	beq.n	1100c <logobj_interface_read+0xac>
   10f9a:	2100      	movs	r1, #0
   10f9c:	6823      	ldr	r3, [r4, #0]
   10f9e:	463a      	mov	r2, r7
   10fa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   10fa4:	6023      	str	r3, [r4, #0]
   10fa6:	e9cd 1102 	strd	r1, r1, [sp, #8]
   10faa:	e9cd 5600 	strd	r5, r6, [sp]
   10fae:	6803      	ldr	r3, [r0, #0]
   10fb0:	4669      	mov	r1, sp
   10fb2:	689b      	ldr	r3, [r3, #8]
   10fb4:	4798      	blx	r3
   10fb6:	4605      	mov	r5, r0
   10fb8:	69e0      	ldr	r0, [r4, #28]
   10fba:	6803      	ldr	r3, [r0, #0]
   10fbc:	68db      	ldr	r3, [r3, #12]
   10fbe:	4798      	blx	r3
   10fc0:	3001      	adds	r0, #1
   10fc2:	d003      	beq.n	10fcc <logobj_interface_read+0x6c>
   10fc4:	6823      	ldr	r3, [r4, #0]
   10fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   10fca:	6023      	str	r3, [r4, #0]
   10fcc:	4628      	mov	r0, r5
   10fce:	b005      	add	sp, #20
   10fd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10fd4:	6822      	ldr	r2, [r4, #0]
   10fd6:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   10fda:	d1d6      	bne.n	10f8a <logobj_interface_read+0x2a>
   10fdc:	4798      	blx	r3
   10fde:	1c43      	adds	r3, r0, #1
   10fe0:	d1d6      	bne.n	10f90 <logobj_interface_read+0x30>
   10fe2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   10fe6:	6a23      	ldr	r3, [r4, #32]
   10fe8:	4611      	mov	r1, r2
   10fea:	2b00      	cmp	r3, #0
   10fec:	bf08      	it	eq
   10fee:	4603      	moveq	r3, r0
   10ff0:	4640      	mov	r0, r8
   10ff2:	f005 ffa9 	bl	16f48 <interface_socket_wait>
   10ff6:	b158      	cbz	r0, 11010 <logobj_interface_read+0xb0>
   10ff8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   10ffc:	f7fe fb54 	bl	f6a8 <bsd_os_errno_set>
   11000:	4628      	mov	r0, r5
   11002:	b005      	add	sp, #20
   11004:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11008:	2023      	movs	r0, #35	; 0x23
   1100a:	e7f5      	b.n	10ff8 <logobj_interface_read+0x98>
   1100c:	461d      	mov	r5, r3
   1100e:	e7d4      	b.n	10fba <logobj_interface_read+0x5a>
   11010:	4640      	mov	r0, r8
   11012:	f006 f80d 	bl	17030 <interface_socket_from_handle_get>
   11016:	4603      	mov	r3, r0
   11018:	2800      	cmp	r0, #0
   1101a:	d0b9      	beq.n	10f90 <logobj_interface_read+0x30>
   1101c:	6840      	ldr	r0, [r0, #4]
   1101e:	2800      	cmp	r0, #0
   11020:	d0b6      	beq.n	10f90 <logobj_interface_read+0x30>
   11022:	f8c3 9004 	str.w	r9, [r3, #4]
   11026:	e7e7      	b.n	10ff8 <logobj_interface_read+0x98>
   11028:	2016      	movs	r0, #22
   1102a:	f7fe fb3d 	bl	f6a8 <bsd_os_errno_set>
   1102e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   11032:	e7cb      	b.n	10fcc <logobj_interface_read+0x6c>
   11034:	2009      	movs	r0, #9
   11036:	f7fe fb37 	bl	f6a8 <bsd_os_errno_set>
   1103a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1103e:	e7c5      	b.n	10fcc <logobj_interface_read+0x6c>

00011040 <logobj_interface_write>:
   11040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11044:	b082      	sub	sp, #8
   11046:	2900      	cmp	r1, #0
   11048:	d05b      	beq.n	11102 <logobj_interface_write+0xc2>
   1104a:	2a04      	cmp	r2, #4
   1104c:	d159      	bne.n	11102 <logobj_interface_write+0xc2>
   1104e:	461e      	mov	r6, r3
   11050:	4607      	mov	r7, r0
   11052:	460d      	mov	r5, r1
   11054:	f005 ffec 	bl	17030 <interface_socket_from_handle_get>
   11058:	4604      	mov	r4, r0
   1105a:	2800      	cmp	r0, #0
   1105c:	d067      	beq.n	1112e <logobj_interface_write+0xee>
   1105e:	07b0      	lsls	r0, r6, #30
   11060:	d526      	bpl.n	110b0 <logobj_interface_write+0x70>
   11062:	6823      	ldr	r3, [r4, #0]
   11064:	039b      	lsls	r3, r3, #14
   11066:	d55e      	bpl.n	11126 <logobj_interface_write+0xe6>
   11068:	2600      	movs	r6, #0
   1106a:	6823      	ldr	r3, [r4, #0]
   1106c:	2100      	movs	r1, #0
   1106e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   11072:	6023      	str	r3, [r4, #0]
   11074:	a801      	add	r0, sp, #4
   11076:	f8d5 8000 	ldr.w	r8, [r5]
   1107a:	f7ff fde7 	bl	10c4c <rpc_logobj_client_request_alloc>
   1107e:	b9f8      	cbnz	r0, 110c0 <logobj_interface_write+0x80>
   11080:	2504      	movs	r5, #4
   11082:	9b01      	ldr	r3, [sp, #4]
   11084:	f247 0103 	movw	r1, #28675	; 0x7003
   11088:	f8c3 800c 	str.w	r8, [r3, #12]
   1108c:	7258      	strb	r0, [r3, #9]
   1108e:	7298      	strb	r0, [r3, #10]
   11090:	72d8      	strb	r0, [r3, #11]
   11092:	721d      	strb	r5, [r3, #8]
   11094:	4618      	mov	r0, r3
   11096:	f7ff fdf1 	bl	10c7c <rpc_logobj_client_request_send>
   1109a:	4680      	mov	r8, r0
   1109c:	bb40      	cbnz	r0, 110f0 <logobj_interface_write+0xb0>
   1109e:	b9ce      	cbnz	r6, 110d4 <logobj_interface_write+0x94>
   110a0:	4628      	mov	r0, r5
   110a2:	6823      	ldr	r3, [r4, #0]
   110a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   110a8:	6023      	str	r3, [r4, #0]
   110aa:	b002      	add	sp, #8
   110ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   110b0:	6823      	ldr	r3, [r4, #0]
   110b2:	00d9      	lsls	r1, r3, #3
   110b4:	d4d5      	bmi.n	11062 <logobj_interface_write+0x22>
   110b6:	6823      	ldr	r3, [r4, #0]
   110b8:	039a      	lsls	r2, r3, #14
   110ba:	d536      	bpl.n	1112a <logobj_interface_write+0xea>
   110bc:	2601      	movs	r6, #1
   110be:	e7d4      	b.n	1106a <logobj_interface_write+0x2a>
   110c0:	200c      	movs	r0, #12
   110c2:	6823      	ldr	r3, [r4, #0]
   110c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   110c8:	6023      	str	r3, [r4, #0]
   110ca:	f7fe faed 	bl	f6a8 <bsd_os_errno_set>
   110ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   110d2:	e7ea      	b.n	110aa <logobj_interface_write+0x6a>
   110d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   110d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   110dc:	4611      	mov	r1, r2
   110de:	4638      	mov	r0, r7
   110e0:	f005 ff32 	bl	16f48 <interface_socket_wait>
   110e4:	b198      	cbz	r0, 1110e <logobj_interface_write+0xce>
   110e6:	6823      	ldr	r3, [r4, #0]
   110e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   110ec:	6023      	str	r3, [r4, #0]
   110ee:	e7ec      	b.n	110ca <logobj_interface_write+0x8a>
   110f0:	9801      	ldr	r0, [sp, #4]
   110f2:	f7ff fdd9 	bl	10ca8 <rpc_logobj_client_message_free>
   110f6:	6823      	ldr	r3, [r4, #0]
   110f8:	2005      	movs	r0, #5
   110fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   110fe:	6023      	str	r3, [r4, #0]
   11100:	e7e3      	b.n	110ca <logobj_interface_write+0x8a>
   11102:	2016      	movs	r0, #22
   11104:	f7fe fad0 	bl	f6a8 <bsd_os_errno_set>
   11108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1110c:	e7cd      	b.n	110aa <logobj_interface_write+0x6a>
   1110e:	4638      	mov	r0, r7
   11110:	f005 ff8e 	bl	17030 <interface_socket_from_handle_get>
   11114:	4603      	mov	r3, r0
   11116:	2800      	cmp	r0, #0
   11118:	d0c2      	beq.n	110a0 <logobj_interface_write+0x60>
   1111a:	6840      	ldr	r0, [r0, #4]
   1111c:	2800      	cmp	r0, #0
   1111e:	d0bf      	beq.n	110a0 <logobj_interface_write+0x60>
   11120:	f8c3 8004 	str.w	r8, [r3, #4]
   11124:	e7df      	b.n	110e6 <logobj_interface_write+0xa6>
   11126:	2073      	movs	r0, #115	; 0x73
   11128:	e7cf      	b.n	110ca <logobj_interface_write+0x8a>
   1112a:	2009      	movs	r0, #9
   1112c:	e7cd      	b.n	110ca <logobj_interface_write+0x8a>
   1112e:	2009      	movs	r0, #9
   11130:	f7fe faba 	bl	f6a8 <bsd_os_errno_set>
   11134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11138:	e7b7      	b.n	110aa <logobj_interface_write+0x6a>
   1113a:	bf00      	nop

0001113c <logobj_interface_setopt>:
   1113c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1113e:	2901      	cmp	r1, #1
   11140:	b085      	sub	sp, #20
   11142:	d068      	beq.n	11216 <logobj_interface_setopt+0xda>
   11144:	461e      	mov	r6, r3
   11146:	f240 2305 	movw	r3, #517	; 0x205
   1114a:	4299      	cmp	r1, r3
   1114c:	f040 8095 	bne.w	1127a <logobj_interface_setopt+0x13e>
   11150:	4607      	mov	r7, r0
   11152:	4615      	mov	r5, r2
   11154:	f005 ff6c 	bl	17030 <interface_socket_from_handle_get>
   11158:	4604      	mov	r4, r0
   1115a:	2800      	cmp	r0, #0
   1115c:	f000 80b2 	beq.w	112c4 <logobj_interface_setopt+0x188>
   11160:	2d01      	cmp	r5, #1
   11162:	d019      	beq.n	11198 <logobj_interface_setopt+0x5c>
   11164:	2d02      	cmp	r5, #2
   11166:	d010      	beq.n	1118a <logobj_interface_setopt+0x4e>
   11168:	252a      	movs	r5, #42	; 0x2a
   1116a:	6803      	ldr	r3, [r0, #0]
   1116c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   11170:	6023      	str	r3, [r4, #0]
   11172:	6823      	ldr	r3, [r4, #0]
   11174:	4628      	mov	r0, r5
   11176:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1117a:	6023      	str	r3, [r4, #0]
   1117c:	f7fe fa94 	bl	f6a8 <bsd_os_errno_set>
   11180:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   11184:	4628      	mov	r0, r5
   11186:	b005      	add	sp, #20
   11188:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1118a:	b116      	cbz	r6, 11192 <logobj_interface_setopt+0x56>
   1118c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1118e:	2b01      	cmp	r3, #1
   11190:	d049      	beq.n	11226 <logobj_interface_setopt+0xea>
   11192:	6823      	ldr	r3, [r4, #0]
   11194:	2516      	movs	r5, #22
   11196:	e7e9      	b.n	1116c <logobj_interface_setopt+0x30>
   11198:	2e00      	cmp	r6, #0
   1119a:	d0fa      	beq.n	11192 <logobj_interface_setopt+0x56>
   1119c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1119e:	2b04      	cmp	r3, #4
   111a0:	d1f7      	bne.n	11192 <logobj_interface_setopt+0x56>
   111a2:	2100      	movs	r1, #0
   111a4:	a803      	add	r0, sp, #12
   111a6:	f7ff fd51 	bl	10c4c <rpc_logobj_client_request_alloc>
   111aa:	4605      	mov	r5, r0
   111ac:	2800      	cmp	r0, #0
   111ae:	d16a      	bne.n	11286 <logobj_interface_setopt+0x14a>
   111b0:	9803      	ldr	r0, [sp, #12]
   111b2:	2208      	movs	r2, #8
   111b4:	4629      	mov	r1, r5
   111b6:	300c      	adds	r0, #12
   111b8:	f00c fb7a 	bl	1d8b0 <memset>
   111bc:	9803      	ldr	r0, [sp, #12]
   111be:	4631      	mov	r1, r6
   111c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   111c2:	300c      	adds	r0, #12
   111c4:	f00c fb4a 	bl	1d85c <memcpy>
   111c8:	2308      	movs	r3, #8
   111ca:	9803      	ldr	r0, [sp, #12]
   111cc:	f247 0102 	movw	r1, #28674	; 0x7002
   111d0:	7203      	strb	r3, [r0, #8]
   111d2:	7245      	strb	r5, [r0, #9]
   111d4:	7285      	strb	r5, [r0, #10]
   111d6:	72c5      	strb	r5, [r0, #11]
   111d8:	6823      	ldr	r3, [r4, #0]
   111da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   111de:	6023      	str	r3, [r4, #0]
   111e0:	f7ff fd4c 	bl	10c7c <rpc_logobj_client_request_send>
   111e4:	2800      	cmp	r0, #0
   111e6:	d151      	bne.n	1128c <logobj_interface_setopt+0x150>
   111e8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   111ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   111f0:	4611      	mov	r1, r2
   111f2:	4638      	mov	r0, r7
   111f4:	f005 fea8 	bl	16f48 <interface_socket_wait>
   111f8:	4605      	mov	r5, r0
   111fa:	2800      	cmp	r0, #0
   111fc:	d13b      	bne.n	11276 <logobj_interface_setopt+0x13a>
   111fe:	4638      	mov	r0, r7
   11200:	f005 ff16 	bl	17030 <interface_socket_from_handle_get>
   11204:	2800      	cmp	r0, #0
   11206:	d04f      	beq.n	112a8 <logobj_interface_setopt+0x16c>
   11208:	6843      	ldr	r3, [r0, #4]
   1120a:	2b00      	cmp	r3, #0
   1120c:	d04c      	beq.n	112a8 <logobj_interface_setopt+0x16c>
   1120e:	2200      	movs	r2, #0
   11210:	461d      	mov	r5, r3
   11212:	6042      	str	r2, [r0, #4]
   11214:	e02f      	b.n	11276 <logobj_interface_setopt+0x13a>
   11216:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   11218:	9400      	str	r4, [sp, #0]
   1121a:	f005 ff31 	bl	17080 <interface_socket_setopt>
   1121e:	4605      	mov	r5, r0
   11220:	4628      	mov	r0, r5
   11222:	b005      	add	sp, #20
   11224:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11226:	2100      	movs	r1, #0
   11228:	a803      	add	r0, sp, #12
   1122a:	7835      	ldrb	r5, [r6, #0]
   1122c:	f7ff fd0e 	bl	10c4c <rpc_logobj_client_request_alloc>
   11230:	bb48      	cbnz	r0, 11286 <logobj_interface_setopt+0x14a>
   11232:	2d01      	cmp	r5, #1
   11234:	bf08      	it	eq
   11236:	4b26      	ldreq	r3, [pc, #152]	; (112d0 <logobj_interface_setopt+0x194>)
   11238:	f04f 0204 	mov.w	r2, #4
   1123c:	bf08      	it	eq
   1123e:	701d      	strbeq	r5, [r3, #0]
   11240:	2300      	movs	r3, #0
   11242:	9803      	ldr	r0, [sp, #12]
   11244:	f247 0101 	movw	r1, #28673	; 0x7001
   11248:	7243      	strb	r3, [r0, #9]
   1124a:	60c5      	str	r5, [r0, #12]
   1124c:	7283      	strb	r3, [r0, #10]
   1124e:	72c3      	strb	r3, [r0, #11]
   11250:	7202      	strb	r2, [r0, #8]
   11252:	6823      	ldr	r3, [r4, #0]
   11254:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   11258:	6023      	str	r3, [r4, #0]
   1125a:	f7ff fd0f 	bl	10c7c <rpc_logobj_client_request_send>
   1125e:	4606      	mov	r6, r0
   11260:	b9a0      	cbnz	r0, 1128c <logobj_interface_setopt+0x150>
   11262:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   11266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1126a:	4611      	mov	r1, r2
   1126c:	4638      	mov	r0, r7
   1126e:	f005 fe6b 	bl	16f48 <interface_socket_wait>
   11272:	4605      	mov	r5, r0
   11274:	b180      	cbz	r0, 11298 <logobj_interface_setopt+0x15c>
   11276:	6823      	ldr	r3, [r4, #0]
   11278:	e778      	b.n	1116c <logobj_interface_setopt+0x30>
   1127a:	202a      	movs	r0, #42	; 0x2a
   1127c:	f7fe fa14 	bl	f6a8 <bsd_os_errno_set>
   11280:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   11284:	e77e      	b.n	11184 <logobj_interface_setopt+0x48>
   11286:	6823      	ldr	r3, [r4, #0]
   11288:	250c      	movs	r5, #12
   1128a:	e76f      	b.n	1116c <logobj_interface_setopt+0x30>
   1128c:	9803      	ldr	r0, [sp, #12]
   1128e:	f7ff fd0b 	bl	10ca8 <rpc_logobj_client_message_free>
   11292:	2505      	movs	r5, #5
   11294:	6823      	ldr	r3, [r4, #0]
   11296:	e769      	b.n	1116c <logobj_interface_setopt+0x30>
   11298:	4638      	mov	r0, r7
   1129a:	f005 fec9 	bl	17030 <interface_socket_from_handle_get>
   1129e:	b140      	cbz	r0, 112b2 <logobj_interface_setopt+0x176>
   112a0:	6845      	ldr	r5, [r0, #4]
   112a2:	b135      	cbz	r5, 112b2 <logobj_interface_setopt+0x176>
   112a4:	6046      	str	r6, [r0, #4]
   112a6:	e7e6      	b.n	11276 <logobj_interface_setopt+0x13a>
   112a8:	4631      	mov	r1, r6
   112aa:	2204      	movs	r2, #4
   112ac:	4809      	ldr	r0, [pc, #36]	; (112d4 <logobj_interface_setopt+0x198>)
   112ae:	f00c fad5 	bl	1d85c <memcpy>
   112b2:	6823      	ldr	r3, [r4, #0]
   112b4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   112b8:	6023      	str	r3, [r4, #0]
   112ba:	6823      	ldr	r3, [r4, #0]
   112bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   112c0:	6023      	str	r3, [r4, #0]
   112c2:	e75f      	b.n	11184 <logobj_interface_setopt+0x48>
   112c4:	2009      	movs	r0, #9
   112c6:	f7fe f9ef 	bl	f6a8 <bsd_os_errno_set>
   112ca:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   112ce:	e759      	b.n	11184 <logobj_interface_setopt+0x48>
   112d0:	20024f35 	.word	0x20024f35
   112d4:	20020554 	.word	0x20020554

000112d8 <logobj_interface_getopt>:
   112d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   112da:	2901      	cmp	r1, #1
   112dc:	b083      	sub	sp, #12
   112de:	9e08      	ldr	r6, [sp, #32]
   112e0:	d030      	beq.n	11344 <logobj_interface_getopt+0x6c>
   112e2:	461f      	mov	r7, r3
   112e4:	f240 2305 	movw	r3, #517	; 0x205
   112e8:	4299      	cmp	r1, r3
   112ea:	d134      	bne.n	11356 <logobj_interface_getopt+0x7e>
   112ec:	4615      	mov	r5, r2
   112ee:	f005 fe9f 	bl	17030 <interface_socket_from_handle_get>
   112f2:	2800      	cmp	r0, #0
   112f4:	d037      	beq.n	11366 <logobj_interface_getopt+0x8e>
   112f6:	2d01      	cmp	r5, #1
   112f8:	d015      	beq.n	11326 <logobj_interface_getopt+0x4e>
   112fa:	2d02      	cmp	r5, #2
   112fc:	d10b      	bne.n	11316 <logobj_interface_getopt+0x3e>
   112fe:	b387      	cbz	r7, 11362 <logobj_interface_getopt+0x8a>
   11300:	6833      	ldr	r3, [r6, #0]
   11302:	b373      	cbz	r3, 11362 <logobj_interface_getopt+0x8a>
   11304:	2300      	movs	r3, #0
   11306:	2201      	movs	r2, #1
   11308:	4618      	mov	r0, r3
   1130a:	491a      	ldr	r1, [pc, #104]	; (11374 <logobj_interface_getopt+0x9c>)
   1130c:	7809      	ldrb	r1, [r1, #0]
   1130e:	7039      	strb	r1, [r7, #0]
   11310:	6032      	str	r2, [r6, #0]
   11312:	b003      	add	sp, #12
   11314:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11316:	2009      	movs	r0, #9
   11318:	f7fe f9c6 	bl	f6a8 <bsd_os_errno_set>
   1131c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11320:	4618      	mov	r0, r3
   11322:	b003      	add	sp, #12
   11324:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11326:	b1e7      	cbz	r7, 11362 <logobj_interface_getopt+0x8a>
   11328:	6833      	ldr	r3, [r6, #0]
   1132a:	2b03      	cmp	r3, #3
   1132c:	d919      	bls.n	11362 <logobj_interface_getopt+0x8a>
   1132e:	4638      	mov	r0, r7
   11330:	2204      	movs	r2, #4
   11332:	4911      	ldr	r1, [pc, #68]	; (11378 <logobj_interface_getopt+0xa0>)
   11334:	f00c fa92 	bl	1d85c <memcpy>
   11338:	2300      	movs	r3, #0
   1133a:	2204      	movs	r2, #4
   1133c:	4618      	mov	r0, r3
   1133e:	6032      	str	r2, [r6, #0]
   11340:	b003      	add	sp, #12
   11342:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11344:	9600      	str	r6, [sp, #0]
   11346:	f005 fed1 	bl	170ec <interface_socket_getopt>
   1134a:	4603      	mov	r3, r0
   1134c:	2800      	cmp	r0, #0
   1134e:	d1e3      	bne.n	11318 <logobj_interface_getopt+0x40>
   11350:	4618      	mov	r0, r3
   11352:	b003      	add	sp, #12
   11354:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11356:	202a      	movs	r0, #42	; 0x2a
   11358:	f7fe f9a6 	bl	f6a8 <bsd_os_errno_set>
   1135c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11360:	e7de      	b.n	11320 <logobj_interface_getopt+0x48>
   11362:	2016      	movs	r0, #22
   11364:	e7d8      	b.n	11318 <logobj_interface_getopt+0x40>
   11366:	2009      	movs	r0, #9
   11368:	f7fe f99e 	bl	f6a8 <bsd_os_errno_set>
   1136c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11370:	e7d6      	b.n	11320 <logobj_interface_getopt+0x48>
   11372:	bf00      	nop
   11374:	20024f36 	.word	0x20024f36
   11378:	20020554 	.word	0x20020554

0001137c <logobj_interface_close>:
   1137c:	b510      	push	{r4, lr}
   1137e:	4604      	mov	r4, r0
   11380:	f005 fe56 	bl	17030 <interface_socket_from_handle_get>
   11384:	b138      	cbz	r0, 11396 <logobj_interface_close+0x1a>
   11386:	4620      	mov	r0, r4
   11388:	f005 fd90 	bl	16eac <interface_socket_free>
   1138c:	2300      	movs	r3, #0
   1138e:	4a05      	ldr	r2, [pc, #20]	; (113a4 <logobj_interface_close+0x28>)
   11390:	4618      	mov	r0, r3
   11392:	6013      	str	r3, [r2, #0]
   11394:	bd10      	pop	{r4, pc}
   11396:	2009      	movs	r0, #9
   11398:	f7fe f986 	bl	f6a8 <bsd_os_errno_set>
   1139c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   113a0:	bd10      	pop	{r4, pc}
   113a2:	bf00      	nop
   113a4:	20020558 	.word	0x20020558

000113a8 <packet_free_cb>:
   113a8:	6800      	ldr	r0, [r0, #0]
   113aa:	f004 b9df 	b.w	1576c <rpc_at_client_data_free>
   113ae:	bf00      	nop

000113b0 <at_interface_write>:
   113b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   113b2:	b083      	sub	sp, #12
   113b4:	460f      	mov	r7, r1
   113b6:	4615      	mov	r5, r2
   113b8:	4606      	mov	r6, r0
   113ba:	f005 fe39 	bl	17030 <interface_socket_from_handle_get>
   113be:	2800      	cmp	r0, #0
   113c0:	d047      	beq.n	11452 <at_interface_write+0xa2>
   113c2:	6803      	ldr	r3, [r0, #0]
   113c4:	4604      	mov	r4, r0
   113c6:	039b      	lsls	r3, r3, #14
   113c8:	d543      	bpl.n	11452 <at_interface_write+0xa2>
   113ca:	6803      	ldr	r3, [r0, #0]
   113cc:	4629      	mov	r1, r5
   113ce:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   113d2:	6003      	str	r3, [r0, #0]
   113d4:	6803      	ldr	r3, [r0, #0]
   113d6:	a801      	add	r0, sp, #4
   113d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   113dc:	6023      	str	r3, [r4, #0]
   113de:	f004 f99b 	bl	15718 <rpc_at_client_request_alloc>
   113e2:	bba0      	cbnz	r0, 1144e <at_interface_write+0x9e>
   113e4:	2204      	movs	r2, #4
   113e6:	9b01      	ldr	r3, [sp, #4]
   113e8:	721a      	strb	r2, [r3, #8]
   113ea:	7258      	strb	r0, [r3, #9]
   113ec:	7298      	strb	r0, [r3, #10]
   113ee:	72d8      	strb	r0, [r3, #11]
   113f0:	60de      	str	r6, [r3, #12]
   113f2:	b985      	cbnz	r5, 11416 <at_interface_write+0x66>
   113f4:	4618      	mov	r0, r3
   113f6:	2101      	movs	r1, #1
   113f8:	f004 f9a2 	bl	15740 <rpc_at_client_request_send>
   113fc:	b9d0      	cbnz	r0, 11434 <at_interface_write+0x84>
   113fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   11402:	4630      	mov	r0, r6
   11404:	4611      	mov	r1, r2
   11406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1140a:	f005 fd9d 	bl	16f48 <interface_socket_wait>
   1140e:	b9a8      	cbnz	r0, 1143c <at_interface_write+0x8c>
   11410:	4628      	mov	r0, r5
   11412:	b003      	add	sp, #12
   11414:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11416:	4639      	mov	r1, r7
   11418:	6818      	ldr	r0, [r3, #0]
   1141a:	462a      	mov	r2, r5
   1141c:	f00c fa1e 	bl	1d85c <memcpy>
   11420:	2101      	movs	r1, #1
   11422:	9801      	ldr	r0, [sp, #4]
   11424:	f004 f98c 	bl	15740 <rpc_at_client_request_send>
   11428:	2800      	cmp	r0, #0
   1142a:	d0e8      	beq.n	113fe <at_interface_write+0x4e>
   1142c:	9b01      	ldr	r3, [sp, #4]
   1142e:	6818      	ldr	r0, [r3, #0]
   11430:	f004 f99c 	bl	1576c <rpc_at_client_data_free>
   11434:	9801      	ldr	r0, [sp, #4]
   11436:	f004 f991 	bl	1575c <rpc_at_client_message_free>
   1143a:	2023      	movs	r0, #35	; 0x23
   1143c:	6823      	ldr	r3, [r4, #0]
   1143e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   11442:	6023      	str	r3, [r4, #0]
   11444:	f7fe f930 	bl	f6a8 <bsd_os_errno_set>
   11448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1144c:	e7e1      	b.n	11412 <at_interface_write+0x62>
   1144e:	200c      	movs	r0, #12
   11450:	e7f4      	b.n	1143c <at_interface_write+0x8c>
   11452:	2016      	movs	r0, #22
   11454:	e7f6      	b.n	11444 <at_interface_write+0x94>
   11456:	bf00      	nop

00011458 <at_interface_init>:
   11458:	f004 b958 	b.w	1570c <rpc_at_client_init>

0001145c <at_interface_open>:
   1145c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11460:	2500      	movs	r5, #0
   11462:	b082      	sub	sp, #8
   11464:	ab02      	add	r3, sp, #8
   11466:	f843 5d08 	str.w	r5, [r3, #-8]!
   1146a:	4680      	mov	r8, r0
   1146c:	460f      	mov	r7, r1
   1146e:	4618      	mov	r0, r3
   11470:	4616      	mov	r6, r2
   11472:	2102      	movs	r1, #2
   11474:	4a1d      	ldr	r2, [pc, #116]	; (114ec <at_interface_open+0x90>)
   11476:	f005 fcbb 	bl	16df0 <interface_socket_allocate>
   1147a:	9b00      	ldr	r3, [sp, #0]
   1147c:	4604      	mov	r4, r0
   1147e:	b30b      	cbz	r3, 114c4 <at_interface_open+0x68>
   11480:	e9c3 8703 	strd	r8, r7, [r3, #12]
   11484:	615e      	str	r6, [r3, #20]
   11486:	4629      	mov	r1, r5
   11488:	a801      	add	r0, sp, #4
   1148a:	f004 f945 	bl	15718 <rpc_at_client_request_alloc>
   1148e:	b9e8      	cbnz	r0, 114cc <at_interface_open+0x70>
   11490:	2204      	movs	r2, #4
   11492:	9b01      	ldr	r3, [sp, #4]
   11494:	2105      	movs	r1, #5
   11496:	7258      	strb	r0, [r3, #9]
   11498:	7298      	strb	r0, [r3, #10]
   1149a:	72d8      	strb	r0, [r3, #11]
   1149c:	721a      	strb	r2, [r3, #8]
   1149e:	60dc      	str	r4, [r3, #12]
   114a0:	4618      	mov	r0, r3
   114a2:	f004 f94d 	bl	15740 <rpc_at_client_request_send>
   114a6:	b9d8      	cbnz	r0, 114e0 <at_interface_open+0x84>
   114a8:	2202      	movs	r2, #2
   114aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   114ae:	4611      	mov	r1, r2
   114b0:	4620      	mov	r0, r4
   114b2:	f005 fd49 	bl	16f48 <interface_socket_wait>
   114b6:	4605      	mov	r5, r0
   114b8:	b948      	cbnz	r0, 114ce <at_interface_open+0x72>
   114ba:	9a00      	ldr	r2, [sp, #0]
   114bc:	6813      	ldr	r3, [r2, #0]
   114be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   114c2:	6013      	str	r3, [r2, #0]
   114c4:	4620      	mov	r0, r4
   114c6:	b002      	add	sp, #8
   114c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   114cc:	250c      	movs	r5, #12
   114ce:	4620      	mov	r0, r4
   114d0:	f005 fcec 	bl	16eac <interface_socket_free>
   114d4:	4628      	mov	r0, r5
   114d6:	f7fe f8e7 	bl	f6a8 <bsd_os_errno_set>
   114da:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   114de:	e7f1      	b.n	114c4 <at_interface_open+0x68>
   114e0:	9801      	ldr	r0, [sp, #4]
   114e2:	f004 f93b 	bl	1575c <rpc_at_client_message_free>
   114e6:	2523      	movs	r5, #35	; 0x23
   114e8:	e7f1      	b.n	114ce <at_interface_open+0x72>
   114ea:	bf00      	nop
   114ec:	000113a9 	.word	0x000113a9

000114f0 <at_interface_close>:
   114f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   114f2:	b083      	sub	sp, #12
   114f4:	4606      	mov	r6, r0
   114f6:	f005 fd9b 	bl	17030 <interface_socket_from_handle_get>
   114fa:	2800      	cmp	r0, #0
   114fc:	d03d      	beq.n	1157a <at_interface_close+0x8a>
   114fe:	230d      	movs	r3, #13
   11500:	6807      	ldr	r7, [r0, #0]
   11502:	6003      	str	r3, [r0, #0]
   11504:	6803      	ldr	r3, [r0, #0]
   11506:	4604      	mov	r4, r0
   11508:	039b      	lsls	r3, r3, #14
   1150a:	d41f      	bmi.n	1154c <at_interface_close+0x5c>
   1150c:	2100      	movs	r1, #0
   1150e:	a801      	add	r0, sp, #4
   11510:	f004 f902 	bl	15718 <rpc_at_client_request_alloc>
   11514:	bb20      	cbnz	r0, 11560 <at_interface_close+0x70>
   11516:	2204      	movs	r2, #4
   11518:	9b01      	ldr	r3, [sp, #4]
   1151a:	2106      	movs	r1, #6
   1151c:	7258      	strb	r0, [r3, #9]
   1151e:	7298      	strb	r0, [r3, #10]
   11520:	72d8      	strb	r0, [r3, #11]
   11522:	721a      	strb	r2, [r3, #8]
   11524:	60de      	str	r6, [r3, #12]
   11526:	4618      	mov	r0, r3
   11528:	f004 f90a 	bl	15740 <rpc_at_client_request_send>
   1152c:	b9d0      	cbnz	r0, 11564 <at_interface_close+0x74>
   1152e:	220e      	movs	r2, #14
   11530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11534:	4611      	mov	r1, r2
   11536:	4630      	mov	r0, r6
   11538:	f005 fd06 	bl	16f48 <interface_socket_wait>
   1153c:	4605      	mov	r5, r0
   1153e:	b9a8      	cbnz	r0, 1156c <at_interface_close+0x7c>
   11540:	4630      	mov	r0, r6
   11542:	f005 fcb3 	bl	16eac <interface_socket_free>
   11546:	4628      	mov	r0, r5
   11548:	b003      	add	sp, #12
   1154a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1154c:	6803      	ldr	r3, [r0, #0]
   1154e:	2100      	movs	r1, #0
   11550:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   11554:	6003      	str	r3, [r0, #0]
   11556:	a801      	add	r0, sp, #4
   11558:	f004 f8de 	bl	15718 <rpc_at_client_request_alloc>
   1155c:	2800      	cmp	r0, #0
   1155e:	d0da      	beq.n	11516 <at_interface_close+0x26>
   11560:	250c      	movs	r5, #12
   11562:	e003      	b.n	1156c <at_interface_close+0x7c>
   11564:	9801      	ldr	r0, [sp, #4]
   11566:	f004 f8f9 	bl	1575c <rpc_at_client_message_free>
   1156a:	2523      	movs	r5, #35	; 0x23
   1156c:	6027      	str	r7, [r4, #0]
   1156e:	4628      	mov	r0, r5
   11570:	f7fe f89a 	bl	f6a8 <bsd_os_errno_set>
   11574:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   11578:	e7e5      	b.n	11546 <at_interface_close+0x56>
   1157a:	2516      	movs	r5, #22
   1157c:	e7f7      	b.n	1156e <at_interface_close+0x7e>
   1157e:	bf00      	nop

00011580 <at_interface_read>:
   11580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11584:	b084      	sub	sp, #16
   11586:	4688      	mov	r8, r1
   11588:	4615      	mov	r5, r2
   1158a:	461e      	mov	r6, r3
   1158c:	4607      	mov	r7, r0
   1158e:	f005 fd4f 	bl	17030 <interface_socket_from_handle_get>
   11592:	2800      	cmp	r0, #0
   11594:	d049      	beq.n	1162a <at_interface_read+0xaa>
   11596:	2300      	movs	r3, #0
   11598:	e9cd 8500 	strd	r8, r5, [sp]
   1159c:	f016 0502 	ands.w	r5, r6, #2
   115a0:	4604      	mov	r4, r0
   115a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
   115a6:	d00e      	beq.n	115c6 <at_interface_read+0x46>
   115a8:	e01e      	b.n	115e8 <at_interface_read+0x68>
   115aa:	2d00      	cmp	r5, #0
   115ac:	d133      	bne.n	11616 <at_interface_read+0x96>
   115ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   115b2:	6a23      	ldr	r3, [r4, #32]
   115b4:	4611      	mov	r1, r2
   115b6:	2b00      	cmp	r3, #0
   115b8:	bf08      	it	eq
   115ba:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   115be:	4638      	mov	r0, r7
   115c0:	f005 fcc2 	bl	16f48 <interface_socket_wait>
   115c4:	4605      	mov	r5, r0
   115c6:	6823      	ldr	r3, [r4, #0]
   115c8:	69e0      	ldr	r0, [r4, #28]
   115ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   115ce:	6023      	str	r3, [r4, #0]
   115d0:	6803      	ldr	r3, [r0, #0]
   115d2:	4632      	mov	r2, r6
   115d4:	689b      	ldr	r3, [r3, #8]
   115d6:	4669      	mov	r1, sp
   115d8:	4798      	blx	r3
   115da:	f1b0 0800 	subs.w	r8, r0, #0
   115de:	dbe4      	blt.n	115aa <at_interface_read+0x2a>
   115e0:	4640      	mov	r0, r8
   115e2:	b004      	add	sp, #16
   115e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   115e8:	6803      	ldr	r3, [r0, #0]
   115ea:	69c0      	ldr	r0, [r0, #28]
   115ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   115f0:	6023      	str	r3, [r4, #0]
   115f2:	6803      	ldr	r3, [r0, #0]
   115f4:	4632      	mov	r2, r6
   115f6:	689b      	ldr	r3, [r3, #8]
   115f8:	4669      	mov	r1, sp
   115fa:	4798      	blx	r3
   115fc:	f1b0 0800 	subs.w	r8, r0, #0
   11600:	daee      	bge.n	115e0 <at_interface_read+0x60>
   11602:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   11606:	d1eb      	bne.n	115e0 <at_interface_read+0x60>
   11608:	2023      	movs	r0, #35	; 0x23
   1160a:	f7fe f84d 	bl	f6a8 <bsd_os_errno_set>
   1160e:	4640      	mov	r0, r8
   11610:	b004      	add	sp, #16
   11612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11616:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1161a:	d1e1      	bne.n	115e0 <at_interface_read+0x60>
   1161c:	4628      	mov	r0, r5
   1161e:	f7fe f843 	bl	f6a8 <bsd_os_errno_set>
   11622:	4640      	mov	r0, r8
   11624:	b004      	add	sp, #16
   11626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1162a:	2016      	movs	r0, #22
   1162c:	f7fe f83c 	bl	f6a8 <bsd_os_errno_set>
   11630:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   11634:	e7d4      	b.n	115e0 <at_interface_read+0x60>
   11636:	bf00      	nop

00011638 <at_interface_getopt>:
   11638:	f005 bd58 	b.w	170ec <interface_socket_getopt>

0001163c <at_interface_setopt>:
   1163c:	f005 bd20 	b.w	17080 <interface_socket_setopt>

00011640 <rpc_at_event_handler>:
   11640:	b570      	push	{r4, r5, r6, lr}
   11642:	4606      	mov	r6, r0
   11644:	b084      	sub	sp, #16
   11646:	68c0      	ldr	r0, [r0, #12]
   11648:	460d      	mov	r5, r1
   1164a:	f005 fcf1 	bl	17030 <interface_socket_from_handle_get>
   1164e:	4604      	mov	r4, r0
   11650:	b348      	cbz	r0, 116a6 <rpc_at_event_handler+0x66>
   11652:	6803      	ldr	r3, [r0, #0]
   11654:	b29b      	uxth	r3, r3
   11656:	2b01      	cmp	r3, #1
   11658:	d01f      	beq.n	1169a <rpc_at_event_handler+0x5a>
   1165a:	6803      	ldr	r3, [r0, #0]
   1165c:	b29b      	uxth	r3, r3
   1165e:	2b0d      	cmp	r3, #13
   11660:	d029      	beq.n	116b6 <rpc_at_event_handler+0x76>
   11662:	6803      	ldr	r3, [r0, #0]
   11664:	b29b      	uxth	r3, r3
   11666:	2b02      	cmp	r3, #2
   11668:	d02d      	beq.n	116c6 <rpc_at_event_handler+0x86>
   1166a:	3d03      	subs	r5, #3
   1166c:	2d01      	cmp	r5, #1
   1166e:	d817      	bhi.n	116a0 <rpc_at_event_handler+0x60>
   11670:	2500      	movs	r5, #0
   11672:	6873      	ldr	r3, [r6, #4]
   11674:	6832      	ldr	r2, [r6, #0]
   11676:	e9cd 5502 	strd	r5, r5, [sp, #8]
   1167a:	e9cd 2300 	strd	r2, r3, [sp]
   1167e:	69e0      	ldr	r0, [r4, #28]
   11680:	4669      	mov	r1, sp
   11682:	6803      	ldr	r3, [r0, #0]
   11684:	685b      	ldr	r3, [r3, #4]
   11686:	4798      	blx	r3
   11688:	3001      	adds	r0, #1
   1168a:	d019      	beq.n	116c0 <rpc_at_event_handler+0x80>
   1168c:	4628      	mov	r0, r5
   1168e:	6823      	ldr	r3, [r4, #0]
   11690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   11694:	6023      	str	r3, [r4, #0]
   11696:	b004      	add	sp, #16
   11698:	bd70      	pop	{r4, r5, r6, pc}
   1169a:	2d02      	cmp	r5, #2
   1169c:	d1e5      	bne.n	1166a <rpc_at_event_handler+0x2a>
   1169e:	6005      	str	r5, [r0, #0]
   116a0:	2000      	movs	r0, #0
   116a2:	b004      	add	sp, #16
   116a4:	bd70      	pop	{r4, r5, r6, pc}
   116a6:	6830      	ldr	r0, [r6, #0]
   116a8:	2800      	cmp	r0, #0
   116aa:	d0f9      	beq.n	116a0 <rpc_at_event_handler+0x60>
   116ac:	f004 f85e 	bl	1576c <rpc_at_client_data_free>
   116b0:	4620      	mov	r0, r4
   116b2:	b004      	add	sp, #16
   116b4:	bd70      	pop	{r4, r5, r6, pc}
   116b6:	2d02      	cmp	r5, #2
   116b8:	d1d7      	bne.n	1166a <rpc_at_event_handler+0x2a>
   116ba:	230e      	movs	r3, #14
   116bc:	6003      	str	r3, [r0, #0]
   116be:	e7ef      	b.n	116a0 <rpc_at_event_handler+0x60>
   116c0:	2002      	movs	r0, #2
   116c2:	b004      	add	sp, #16
   116c4:	bd70      	pop	{r4, r5, r6, pc}
   116c6:	6803      	ldr	r3, [r0, #0]
   116c8:	029b      	lsls	r3, r3, #10
   116ca:	d5ce      	bpl.n	1166a <rpc_at_event_handler+0x2a>
   116cc:	2d02      	cmp	r5, #2
   116ce:	d1cc      	bne.n	1166a <rpc_at_event_handler+0x2a>
   116d0:	6803      	ldr	r3, [r0, #0]
   116d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   116d6:	6003      	str	r3, [r0, #0]
   116d8:	6803      	ldr	r3, [r0, #0]
   116da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   116de:	6003      	str	r3, [r0, #0]
   116e0:	e7de      	b.n	116a0 <rpc_at_event_handler+0x60>
   116e2:	bf00      	nop

000116e4 <dfu_client_event_handler>:
   116e4:	f850 1b08 	ldr.w	r1, [r0], #8
   116e8:	0c09      	lsrs	r1, r1, #16
   116ea:	f001 b92f 	b.w	1294c <rpc_dfu_event_handler>
   116ee:	bf00      	nop

000116f0 <rpc_dfu_client_init>:
   116f0:	4801      	ldr	r0, [pc, #4]	; (116f8 <rpc_dfu_client_init+0x8>)
   116f2:	f005 bdcd 	b.w	17290 <rpc_client_register>
   116f6:	bf00      	nop
   116f8:	0001ef04 	.word	0x0001ef04

000116fc <rpc_dfu_client_request_alloc>:
   116fc:	2300      	movs	r3, #0
   116fe:	b510      	push	{r4, lr}
   11700:	b082      	sub	sp, #8
   11702:	9301      	str	r3, [sp, #4]
   11704:	b158      	cbz	r0, 1171e <rpc_dfu_client_request_alloc+0x22>
   11706:	4604      	mov	r4, r0
   11708:	aa01      	add	r2, sp, #4
   1170a:	2006      	movs	r0, #6
   1170c:	f005 fff8 	bl	17700 <rpc_message_alloc>
   11710:	b918      	cbnz	r0, 1171a <rpc_dfu_client_request_alloc+0x1e>
   11712:	9b01      	ldr	r3, [sp, #4]
   11714:	b10b      	cbz	r3, 1171a <rpc_dfu_client_request_alloc+0x1e>
   11716:	3308      	adds	r3, #8
   11718:	6023      	str	r3, [r4, #0]
   1171a:	b002      	add	sp, #8
   1171c:	bd10      	pop	{r4, pc}
   1171e:	2007      	movs	r0, #7
   11720:	b002      	add	sp, #8
   11722:	bd10      	pop	{r4, pc}

00011724 <rpc_dfu_client_request_send>:
   11724:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   11728:	d10b      	bne.n	11742 <rpc_dfu_client_request_send+0x1e>
   1172a:	b160      	cbz	r0, 11746 <rpc_dfu_client_request_send+0x22>
   1172c:	4603      	mov	r3, r0
   1172e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   11732:	2006      	movs	r0, #6
   11734:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   11738:	f843 1d08 	str.w	r1, [r3, #-8]!
   1173c:	4619      	mov	r1, r3
   1173e:	f005 bfc7 	b.w	176d0 <rpc_message_send>
   11742:	200f      	movs	r0, #15
   11744:	4770      	bx	lr
   11746:	2007      	movs	r0, #7
   11748:	4770      	bx	lr
   1174a:	bf00      	nop

0001174c <rpc_dfu_client_message_free>:
   1174c:	b120      	cbz	r0, 11758 <rpc_dfu_client_message_free+0xc>
   1174e:	f1a0 0108 	sub.w	r1, r0, #8
   11752:	2006      	movs	r0, #6
   11754:	f006 b806 	b.w	17764 <rpc_message_free>
   11758:	2007      	movs	r0, #7
   1175a:	4770      	bx	lr

0001175c <rpc_dfu_client_data_free>:
   1175c:	b118      	cbz	r0, 11766 <rpc_dfu_client_data_free+0xa>
   1175e:	4601      	mov	r1, r0
   11760:	2006      	movs	r0, #6
   11762:	f006 b911 	b.w	17988 <rpc_message_data_free>
   11766:	2007      	movs	r0, #7
   11768:	4770      	bx	lr
   1176a:	bf00      	nop

0001176c <mem_free>:
   1176c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11770:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 11840 <mem_free+0xd4>
   11774:	b083      	sub	sp, #12
   11776:	9000      	str	r0, [sp, #0]
   11778:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   1177c:	f8dc 3008 	ldr.w	r3, [ip, #8]
   11780:	b12b      	cbz	r3, 1178e <mem_free+0x22>
   11782:	f8dc 2000 	ldr.w	r2, [ip]
   11786:	9c00      	ldr	r4, [sp, #0]
   11788:	7810      	ldrb	r0, [r2, #0]
   1178a:	42a0      	cmp	r0, r4
   1178c:	d006      	beq.n	1179c <mem_free+0x30>
   1178e:	f10c 0c0c 	add.w	ip, ip, #12
   11792:	45e3      	cmp	fp, ip
   11794:	d1f2      	bne.n	1177c <mem_free+0x10>
   11796:	b003      	add	sp, #12
   11798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1179c:	f8dc a004 	ldr.w	sl, [ip, #4]
   117a0:	eb03 080a 	add.w	r8, r3, sl
   117a4:	45c2      	cmp	sl, r8
   117a6:	d2f2      	bcs.n	1178e <mem_free+0x22>
   117a8:	6853      	ldr	r3, [r2, #4]
   117aa:	f8cd c004 	str.w	ip, [sp, #4]
   117ae:	46d6      	mov	lr, sl
   117b0:	469c      	mov	ip, r3
   117b2:	f8d2 9010 	ldr.w	r9, [r2, #16]
   117b6:	8997      	ldrh	r7, [r2, #12]
   117b8:	ebae 000a 	sub.w	r0, lr, sl
   117bc:	b3df      	cbz	r7, 11836 <mem_free+0xca>
   117be:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   117c2:	4290      	cmp	r0, r2
   117c4:	d31c      	bcc.n	11800 <mem_free+0x94>
   117c6:	4665      	mov	r5, ip
   117c8:	2400      	movs	r4, #0
   117ca:	f109 0304 	add.w	r3, r9, #4
   117ce:	e003      	b.n	117d8 <mem_free+0x6c>
   117d0:	885a      	ldrh	r2, [r3, #2]
   117d2:	3304      	adds	r3, #4
   117d4:	4282      	cmp	r2, r0
   117d6:	d815      	bhi.n	11804 <mem_free+0x98>
   117d8:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   117dc:	3401      	adds	r4, #1
   117de:	42a7      	cmp	r7, r4
   117e0:	fb02 5506 	mla	r5, r2, r6, r5
   117e4:	eba0 0002 	sub.w	r0, r0, r2
   117e8:	461e      	mov	r6, r3
   117ea:	d1f1      	bne.n	117d0 <mem_free+0x64>
   117ec:	2000      	movs	r0, #0
   117ee:	4281      	cmp	r1, r0
   117f0:	d00d      	beq.n	1180e <mem_free+0xa2>
   117f2:	f10e 0e01 	add.w	lr, lr, #1
   117f6:	45f0      	cmp	r8, lr
   117f8:	d1de      	bne.n	117b8 <mem_free+0x4c>
   117fa:	f8dd c004 	ldr.w	ip, [sp, #4]
   117fe:	e7c6      	b.n	1178e <mem_free+0x22>
   11800:	4665      	mov	r5, ip
   11802:	464e      	mov	r6, r9
   11804:	8833      	ldrh	r3, [r6, #0]
   11806:	fb00 5003 	mla	r0, r0, r3, r5
   1180a:	4281      	cmp	r1, r0
   1180c:	d1f1      	bne.n	117f2 <mem_free+0x86>
   1180e:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   11812:	f8dd c004 	ldr.w	ip, [sp, #4]
   11816:	d0ba      	beq.n	1178e <mem_free+0x22>
   11818:	2301      	movs	r3, #1
   1181a:	4a08      	ldr	r2, [pc, #32]	; (1183c <mem_free+0xd0>)
   1181c:	ea4f 115e 	mov.w	r1, lr, lsr #5
   11820:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   11824:	f00e 0e1f 	and.w	lr, lr, #31
   11828:	fa03 fe0e 	lsl.w	lr, r3, lr
   1182c:	ea4e 0000 	orr.w	r0, lr, r0
   11830:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   11834:	e7af      	b.n	11796 <mem_free+0x2a>
   11836:	4638      	mov	r0, r7
   11838:	e7d9      	b.n	117ee <mem_free+0x82>
   1183a:	bf00      	nop
   1183c:	2002055c 	.word	0x2002055c
   11840:	200205a0 	.word	0x200205a0

00011844 <mem_alloc.constprop.5>:
   11844:	2800      	cmp	r0, #0
   11846:	d050      	beq.n	118ea <mem_alloc.constprop.5+0xa6>
   11848:	4b6d      	ldr	r3, [pc, #436]	; (11a00 <mem_alloc.constprop.5+0x1bc>)
   1184a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1184e:	4290      	cmp	r0, r2
   11850:	d84b      	bhi.n	118ea <mem_alloc.constprop.5+0xa6>
   11852:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11856:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   1185a:	b083      	sub	sp, #12
   1185c:	f1bb 0f00 	cmp.w	fp, #0
   11860:	d054      	beq.n	1190c <mem_alloc.constprop.5+0xc8>
   11862:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   11866:	4691      	mov	r9, r2
   11868:	2600      	movs	r6, #0
   1186a:	f04f 0812 	mov.w	r8, #18
   1186e:	4f65      	ldr	r7, [pc, #404]	; (11a04 <mem_alloc.constprop.5+0x1c0>)
   11870:	9201      	str	r2, [sp, #4]
   11872:	f10b 0e11 	add.w	lr, fp, #17
   11876:	eb06 0209 	add.w	r2, r6, r9
   1187a:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   1187e:	3201      	adds	r2, #1
   11880:	0852      	lsrs	r2, r2, #1
   11882:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   11886:	f102 0112 	add.w	r1, r2, #18
   1188a:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   1188e:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   11892:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   11896:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   1189a:	f8dc c004 	ldr.w	ip, [ip, #4]
   1189e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   118a2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   118a6:	f8da a010 	ldr.w	sl, [sl, #16]
   118aa:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   118ae:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   118b2:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   118b6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   118ba:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   118be:	6849      	ldr	r1, [r1, #4]
   118c0:	692d      	ldr	r5, [r5, #16]
   118c2:	6924      	ldr	r4, [r4, #16]
   118c4:	f8dc c004 	ldr.w	ip, [ip, #4]
   118c8:	4550      	cmp	r0, sl
   118ca:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   118ce:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   118d2:	d915      	bls.n	11900 <mem_alloc.constprop.5+0xbc>
   118d4:	4288      	cmp	r0, r1
   118d6:	d211      	bcs.n	118fc <mem_alloc.constprop.5+0xb8>
   118d8:	42a8      	cmp	r0, r5
   118da:	d908      	bls.n	118ee <mem_alloc.constprop.5+0xaa>
   118dc:	1c56      	adds	r6, r2, #1
   118de:	45b1      	cmp	r9, r6
   118e0:	f0c0 8087 	bcc.w	119f2 <mem_alloc.constprop.5+0x1ae>
   118e4:	f102 0813 	add.w	r8, r2, #19
   118e8:	e7c5      	b.n	11876 <mem_alloc.constprop.5+0x32>
   118ea:	2000      	movs	r0, #0
   118ec:	4770      	bx	lr
   118ee:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   118f2:	454e      	cmp	r6, r9
   118f4:	d87d      	bhi.n	119f2 <mem_alloc.constprop.5+0x1ae>
   118f6:	f102 0e11 	add.w	lr, r2, #17
   118fa:	e7bc      	b.n	11876 <mem_alloc.constprop.5+0x32>
   118fc:	f109 0601 	add.w	r6, r9, #1
   11900:	45b3      	cmp	fp, r6
   11902:	d007      	beq.n	11914 <mem_alloc.constprop.5+0xd0>
   11904:	2e10      	cmp	r6, #16
   11906:	d001      	beq.n	1190c <mem_alloc.constprop.5+0xc8>
   11908:	45b3      	cmp	fp, r6
   1190a:	d808      	bhi.n	1191e <mem_alloc.constprop.5+0xda>
   1190c:	2000      	movs	r0, #0
   1190e:	b003      	add	sp, #12
   11910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11914:	9a01      	ldr	r2, [sp, #4]
   11916:	2a10      	cmp	r2, #16
   11918:	bf18      	it	ne
   1191a:	4616      	movne	r6, r2
   1191c:	d0f6      	beq.n	1190c <mem_alloc.constprop.5+0xc8>
   1191e:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 11a08 <mem_alloc.constprop.5+0x1c4>
   11922:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   11926:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   1192a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1192e:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   11932:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   11936:	f8d2 e004 	ldr.w	lr, [r2, #4]
   1193a:	691d      	ldr	r5, [r3, #16]
   1193c:	2c00      	cmp	r4, #0
   1193e:	d056      	beq.n	119ee <mem_alloc.constprop.5+0x1aa>
   11940:	462a      	mov	r2, r5
   11942:	4670      	mov	r0, lr
   11944:	00a4      	lsls	r4, r4, #2
   11946:	eb05 0904 	add.w	r9, r5, r4
   1194a:	8851      	ldrh	r1, [r2, #2]
   1194c:	3204      	adds	r2, #4
   1194e:	4591      	cmp	r9, r2
   11950:	4408      	add	r0, r1
   11952:	d1fa      	bne.n	1194a <mem_alloc.constprop.5+0x106>
   11954:	1929      	adds	r1, r5, r4
   11956:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   1195a:	4482      	add	sl, r0
   1195c:	4582      	cmp	sl, r0
   1195e:	d918      	bls.n	11992 <mem_alloc.constprop.5+0x14e>
   11960:	0941      	lsrs	r1, r0, #5
   11962:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   11966:	f000 041f 	and.w	r4, r0, #31
   1196a:	fa22 f904 	lsr.w	r9, r2, r4
   1196e:	f019 0f01 	tst.w	r9, #1
   11972:	d007      	beq.n	11984 <mem_alloc.constprop.5+0x140>
   11974:	e013      	b.n	1199e <mem_alloc.constprop.5+0x15a>
   11976:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   1197a:	fa22 f904 	lsr.w	r9, r2, r4
   1197e:	f019 0f01 	tst.w	r9, #1
   11982:	d10c      	bne.n	1199e <mem_alloc.constprop.5+0x15a>
   11984:	3001      	adds	r0, #1
   11986:	4582      	cmp	sl, r0
   11988:	ea4f 1150 	mov.w	r1, r0, lsr #5
   1198c:	f000 041f 	and.w	r4, r0, #31
   11990:	d1f1      	bne.n	11976 <mem_alloc.constprop.5+0x132>
   11992:	3601      	adds	r6, #1
   11994:	455e      	cmp	r6, fp
   11996:	f108 0808 	add.w	r8, r8, #8
   1199a:	d3c4      	bcc.n	11926 <mem_alloc.constprop.5+0xe2>
   1199c:	e7b6      	b.n	1190c <mem_alloc.constprop.5+0xc8>
   1199e:	2601      	movs	r6, #1
   119a0:	fa06 f404 	lsl.w	r4, r6, r4
   119a4:	899e      	ldrh	r6, [r3, #12]
   119a6:	ea22 0204 	bic.w	r2, r2, r4
   119aa:	eba0 000e 	sub.w	r0, r0, lr
   119ae:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   119b2:	685c      	ldr	r4, [r3, #4]
   119b4:	2e00      	cmp	r6, #0
   119b6:	d0a9      	beq.n	1190c <mem_alloc.constprop.5+0xc8>
   119b8:	886a      	ldrh	r2, [r5, #2]
   119ba:	4282      	cmp	r2, r0
   119bc:	d811      	bhi.n	119e2 <mem_alloc.constprop.5+0x19e>
   119be:	2100      	movs	r1, #0
   119c0:	1d2b      	adds	r3, r5, #4
   119c2:	e003      	b.n	119cc <mem_alloc.constprop.5+0x188>
   119c4:	885a      	ldrh	r2, [r3, #2]
   119c6:	3304      	adds	r3, #4
   119c8:	4282      	cmp	r2, r0
   119ca:	d80a      	bhi.n	119e2 <mem_alloc.constprop.5+0x19e>
   119cc:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   119d0:	3101      	adds	r1, #1
   119d2:	428e      	cmp	r6, r1
   119d4:	fb02 4405 	mla	r4, r2, r5, r4
   119d8:	eba0 0002 	sub.w	r0, r0, r2
   119dc:	461d      	mov	r5, r3
   119de:	d1f1      	bne.n	119c4 <mem_alloc.constprop.5+0x180>
   119e0:	e794      	b.n	1190c <mem_alloc.constprop.5+0xc8>
   119e2:	882b      	ldrh	r3, [r5, #0]
   119e4:	fb00 4003 	mla	r0, r0, r3, r4
   119e8:	b003      	add	sp, #12
   119ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119ee:	4670      	mov	r0, lr
   119f0:	e7b0      	b.n	11954 <mem_alloc.constprop.5+0x110>
   119f2:	f1bb 0f10 	cmp.w	fp, #16
   119f6:	bf08      	it	eq
   119f8:	260f      	moveq	r6, #15
   119fa:	d090      	beq.n	1191e <mem_alloc.constprop.5+0xda>
   119fc:	e786      	b.n	1190c <mem_alloc.constprop.5+0xc8>
   119fe:	bf00      	nop
   11a00:	200205dc 	.word	0x200205dc
   11a04:	200205a0 	.word	0x200205a0
   11a08:	2002055c 	.word	0x2002055c

00011a0c <mem_alloc.constprop.4>:
   11a0c:	2800      	cmp	r0, #0
   11a0e:	d04c      	beq.n	11aaa <mem_alloc.constprop.4+0x9e>
   11a10:	4b6b      	ldr	r3, [pc, #428]	; (11bc0 <mem_alloc.constprop.4+0x1b4>)
   11a12:	681a      	ldr	r2, [r3, #0]
   11a14:	4290      	cmp	r0, r2
   11a16:	d848      	bhi.n	11aaa <mem_alloc.constprop.4+0x9e>
   11a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a1c:	685f      	ldr	r7, [r3, #4]
   11a1e:	b083      	sub	sp, #12
   11a20:	9700      	str	r7, [sp, #0]
   11a22:	2f00      	cmp	r7, #0
   11a24:	d051      	beq.n	11aca <mem_alloc.constprop.4+0xbe>
   11a26:	1e7a      	subs	r2, r7, #1
   11a28:	4696      	mov	lr, r2
   11a2a:	2100      	movs	r1, #0
   11a2c:	f04f 0c01 	mov.w	ip, #1
   11a30:	4c64      	ldr	r4, [pc, #400]	; (11bc4 <mem_alloc.constprop.4+0x1b8>)
   11a32:	9201      	str	r2, [sp, #4]
   11a34:	eb01 020e 	add.w	r2, r1, lr
   11a38:	3201      	adds	r2, #1
   11a3a:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   11a3e:	0852      	lsrs	r2, r2, #1
   11a40:	f102 0801 	add.w	r8, r2, #1
   11a44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   11a48:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   11a4c:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   11a50:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   11a54:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   11a58:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   11a5c:	f8d9 9004 	ldr.w	r9, [r9, #4]
   11a60:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   11a64:	f8da a010 	ldr.w	sl, [sl, #16]
   11a68:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   11a6c:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   11a70:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   11a74:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   11a78:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   11a7c:	6936      	ldr	r6, [r6, #16]
   11a7e:	f8db b004 	ldr.w	fp, [fp, #4]
   11a82:	692d      	ldr	r5, [r5, #16]
   11a84:	f8d9 9004 	ldr.w	r9, [r9, #4]
   11a88:	4550      	cmp	r0, sl
   11a8a:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   11a8e:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   11a92:	d913      	bls.n	11abc <mem_alloc.constprop.4+0xb0>
   11a94:	42a8      	cmp	r0, r5
   11a96:	d210      	bcs.n	11aba <mem_alloc.constprop.4+0xae>
   11a98:	42b0      	cmp	r0, r6
   11a9a:	d908      	bls.n	11aae <mem_alloc.constprop.4+0xa2>
   11a9c:	45c6      	cmp	lr, r8
   11a9e:	4641      	mov	r1, r8
   11aa0:	f0c0 8087 	bcc.w	11bb2 <mem_alloc.constprop.4+0x1a6>
   11aa4:	f108 0c01 	add.w	ip, r8, #1
   11aa8:	e7c4      	b.n	11a34 <mem_alloc.constprop.4+0x28>
   11aaa:	2000      	movs	r0, #0
   11aac:	4770      	bx	lr
   11aae:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
   11ab2:	4571      	cmp	r1, lr
   11ab4:	d87d      	bhi.n	11bb2 <mem_alloc.constprop.4+0x1a6>
   11ab6:	4617      	mov	r7, r2
   11ab8:	e7bc      	b.n	11a34 <mem_alloc.constprop.4+0x28>
   11aba:	4639      	mov	r1, r7
   11abc:	9a00      	ldr	r2, [sp, #0]
   11abe:	428a      	cmp	r2, r1
   11ac0:	d007      	beq.n	11ad2 <mem_alloc.constprop.4+0xc6>
   11ac2:	2910      	cmp	r1, #16
   11ac4:	d001      	beq.n	11aca <mem_alloc.constprop.4+0xbe>
   11ac6:	428a      	cmp	r2, r1
   11ac8:	d808      	bhi.n	11adc <mem_alloc.constprop.4+0xd0>
   11aca:	2000      	movs	r0, #0
   11acc:	b003      	add	sp, #12
   11ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ad2:	9a01      	ldr	r2, [sp, #4]
   11ad4:	2a10      	cmp	r2, #16
   11ad6:	bf18      	it	ne
   11ad8:	4611      	movne	r1, r2
   11ada:	d0f6      	beq.n	11aca <mem_alloc.constprop.4+0xbe>
   11adc:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 11bc8 <mem_alloc.constprop.4+0x1bc>
   11ae0:	f8dd 9000 	ldr.w	r9, [sp]
   11ae4:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   11ae8:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   11aec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   11af0:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   11af4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   11af8:	f8d2 e004 	ldr.w	lr, [r2, #4]
   11afc:	691f      	ldr	r7, [r3, #16]
   11afe:	2e00      	cmp	r6, #0
   11b00:	d055      	beq.n	11bae <mem_alloc.constprop.4+0x1a2>
   11b02:	463a      	mov	r2, r7
   11b04:	4670      	mov	r0, lr
   11b06:	00b6      	lsls	r6, r6, #2
   11b08:	eb07 0a06 	add.w	sl, r7, r6
   11b0c:	8855      	ldrh	r5, [r2, #2]
   11b0e:	3204      	adds	r2, #4
   11b10:	4592      	cmp	sl, r2
   11b12:	4428      	add	r0, r5
   11b14:	d1fa      	bne.n	11b0c <mem_alloc.constprop.4+0x100>
   11b16:	19bd      	adds	r5, r7, r6
   11b18:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   11b1c:	4483      	add	fp, r0
   11b1e:	4583      	cmp	fp, r0
   11b20:	d918      	bls.n	11b54 <mem_alloc.constprop.4+0x148>
   11b22:	0945      	lsrs	r5, r0, #5
   11b24:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   11b28:	f000 061f 	and.w	r6, r0, #31
   11b2c:	fa22 fa06 	lsr.w	sl, r2, r6
   11b30:	f01a 0f01 	tst.w	sl, #1
   11b34:	d007      	beq.n	11b46 <mem_alloc.constprop.4+0x13a>
   11b36:	e013      	b.n	11b60 <mem_alloc.constprop.4+0x154>
   11b38:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   11b3c:	fa22 fa06 	lsr.w	sl, r2, r6
   11b40:	f01a 0f01 	tst.w	sl, #1
   11b44:	d10c      	bne.n	11b60 <mem_alloc.constprop.4+0x154>
   11b46:	3001      	adds	r0, #1
   11b48:	4583      	cmp	fp, r0
   11b4a:	ea4f 1550 	mov.w	r5, r0, lsr #5
   11b4e:	f000 061f 	and.w	r6, r0, #31
   11b52:	d1f1      	bne.n	11b38 <mem_alloc.constprop.4+0x12c>
   11b54:	3101      	adds	r1, #1
   11b56:	4549      	cmp	r1, r9
   11b58:	f108 0808 	add.w	r8, r8, #8
   11b5c:	d3c4      	bcc.n	11ae8 <mem_alloc.constprop.4+0xdc>
   11b5e:	e7b4      	b.n	11aca <mem_alloc.constprop.4+0xbe>
   11b60:	2101      	movs	r1, #1
   11b62:	40b1      	lsls	r1, r6
   11b64:	899e      	ldrh	r6, [r3, #12]
   11b66:	ea22 0201 	bic.w	r2, r2, r1
   11b6a:	eba0 000e 	sub.w	r0, r0, lr
   11b6e:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   11b72:	685c      	ldr	r4, [r3, #4]
   11b74:	2e00      	cmp	r6, #0
   11b76:	d0a8      	beq.n	11aca <mem_alloc.constprop.4+0xbe>
   11b78:	887a      	ldrh	r2, [r7, #2]
   11b7a:	4282      	cmp	r2, r0
   11b7c:	d811      	bhi.n	11ba2 <mem_alloc.constprop.4+0x196>
   11b7e:	2100      	movs	r1, #0
   11b80:	1d3b      	adds	r3, r7, #4
   11b82:	e003      	b.n	11b8c <mem_alloc.constprop.4+0x180>
   11b84:	885a      	ldrh	r2, [r3, #2]
   11b86:	3304      	adds	r3, #4
   11b88:	4282      	cmp	r2, r0
   11b8a:	d80a      	bhi.n	11ba2 <mem_alloc.constprop.4+0x196>
   11b8c:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   11b90:	3101      	adds	r1, #1
   11b92:	428e      	cmp	r6, r1
   11b94:	eba0 0002 	sub.w	r0, r0, r2
   11b98:	fb02 4405 	mla	r4, r2, r5, r4
   11b9c:	461f      	mov	r7, r3
   11b9e:	d1f1      	bne.n	11b84 <mem_alloc.constprop.4+0x178>
   11ba0:	e793      	b.n	11aca <mem_alloc.constprop.4+0xbe>
   11ba2:	883b      	ldrh	r3, [r7, #0]
   11ba4:	fb00 4003 	mla	r0, r0, r3, r4
   11ba8:	b003      	add	sp, #12
   11baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11bae:	4670      	mov	r0, lr
   11bb0:	e7b1      	b.n	11b16 <mem_alloc.constprop.4+0x10a>
   11bb2:	9a00      	ldr	r2, [sp, #0]
   11bb4:	2a10      	cmp	r2, #16
   11bb6:	bf08      	it	eq
   11bb8:	210f      	moveq	r1, #15
   11bba:	d08f      	beq.n	11adc <mem_alloc.constprop.4+0xd0>
   11bbc:	e785      	b.n	11aca <mem_alloc.constprop.4+0xbe>
   11bbe:	bf00      	nop
   11bc0:	200205dc 	.word	0x200205dc
   11bc4:	200205a0 	.word	0x200205a0
   11bc8:	2002055c 	.word	0x2002055c

00011bcc <nrf_mem_init>:
   11bcc:	b570      	push	{r4, r5, r6, lr}
   11bce:	2200      	movs	r2, #0
   11bd0:	2501      	movs	r5, #1
   11bd2:	4833      	ldr	r0, [pc, #204]	; (11ca0 <nrf_mem_init+0xd4>)
   11bd4:	0951      	lsrs	r1, r2, #5
   11bd6:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   11bda:	f002 031f 	and.w	r3, r2, #31
   11bde:	fa05 f303 	lsl.w	r3, r5, r3
   11be2:	3201      	adds	r2, #1
   11be4:	4323      	orrs	r3, r4
   11be6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   11bea:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   11bee:	d1f1      	bne.n	11bd4 <nrf_mem_init+0x8>
   11bf0:	2400      	movs	r4, #0
   11bf2:	4b2c      	ldr	r3, [pc, #176]	; (11ca4 <nrf_mem_init+0xd8>)
   11bf4:	4621      	mov	r1, r4
   11bf6:	223c      	movs	r2, #60	; 0x3c
   11bf8:	482b      	ldr	r0, [pc, #172]	; (11ca8 <nrf_mem_init+0xdc>)
   11bfa:	601c      	str	r4, [r3, #0]
   11bfc:	f00b fe58 	bl	1d8b0 <memset>
   11c00:	2110      	movs	r1, #16
   11c02:	2205      	movs	r2, #5
   11c04:	4b29      	ldr	r3, [pc, #164]	; (11cac <nrf_mem_init+0xe0>)
   11c06:	4e2a      	ldr	r6, [pc, #168]	; (11cb0 <nrf_mem_init+0xe4>)
   11c08:	e9c3 4400 	strd	r4, r4, [r3]
   11c0c:	60d9      	str	r1, [r3, #12]
   11c0e:	6159      	str	r1, [r3, #20]
   11c10:	61d9      	str	r1, [r3, #28]
   11c12:	6259      	str	r1, [r3, #36]	; 0x24
   11c14:	62d9      	str	r1, [r3, #44]	; 0x2c
   11c16:	6359      	str	r1, [r3, #52]	; 0x34
   11c18:	63d9      	str	r1, [r3, #60]	; 0x3c
   11c1a:	6459      	str	r1, [r3, #68]	; 0x44
   11c1c:	64d9      	str	r1, [r3, #76]	; 0x4c
   11c1e:	6559      	str	r1, [r3, #84]	; 0x54
   11c20:	65d9      	str	r1, [r3, #92]	; 0x5c
   11c22:	6659      	str	r1, [r3, #100]	; 0x64
   11c24:	66d9      	str	r1, [r3, #108]	; 0x6c
   11c26:	6759      	str	r1, [r3, #116]	; 0x74
   11c28:	67d9      	str	r1, [r3, #124]	; 0x7c
   11c2a:	609a      	str	r2, [r3, #8]
   11c2c:	611a      	str	r2, [r3, #16]
   11c2e:	619a      	str	r2, [r3, #24]
   11c30:	621a      	str	r2, [r3, #32]
   11c32:	629a      	str	r2, [r3, #40]	; 0x28
   11c34:	631a      	str	r2, [r3, #48]	; 0x30
   11c36:	639a      	str	r2, [r3, #56]	; 0x38
   11c38:	641a      	str	r2, [r3, #64]	; 0x40
   11c3a:	649a      	str	r2, [r3, #72]	; 0x48
   11c3c:	651a      	str	r2, [r3, #80]	; 0x50
   11c3e:	659a      	str	r2, [r3, #88]	; 0x58
   11c40:	661a      	str	r2, [r3, #96]	; 0x60
   11c42:	669a      	str	r2, [r3, #104]	; 0x68
   11c44:	671a      	str	r2, [r3, #112]	; 0x70
   11c46:	679a      	str	r2, [r3, #120]	; 0x78
   11c48:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   11c4c:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   11c50:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   11c54:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   11c58:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   11c5c:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   11c60:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   11c64:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   11c68:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   11c6c:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   11c70:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   11c74:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   11c78:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   11c7c:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   11c80:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   11c84:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   11c88:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   11c8c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   11c90:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   11c94:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   11c98:	4620      	mov	r0, r4
   11c9a:	7035      	strb	r5, [r6, #0]
   11c9c:	bd70      	pop	{r4, r5, r6, pc}
   11c9e:	bf00      	nop
   11ca0:	2002055c 	.word	0x2002055c
   11ca4:	2002059c 	.word	0x2002059c
   11ca8:	200205a0 	.word	0x200205a0
   11cac:	200205dc 	.word	0x200205dc
   11cb0:	20024f37 	.word	0x20024f37

00011cb4 <nrf_mem_register>:
   11cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cb8:	4b87      	ldr	r3, [pc, #540]	; (11ed8 <nrf_mem_register+0x224>)
   11cba:	b087      	sub	sp, #28
   11cbc:	781b      	ldrb	r3, [r3, #0]
   11cbe:	2b00      	cmp	r3, #0
   11cc0:	f000 808c 	beq.w	11ddc <nrf_mem_register+0x128>
   11cc4:	b328      	cbz	r0, 11d12 <nrf_mem_register+0x5e>
   11cc6:	b321      	cbz	r1, 11d12 <nrf_mem_register+0x5e>
   11cc8:	780b      	ldrb	r3, [r1, #0]
   11cca:	f8df 8218 	ldr.w	r8, [pc, #536]	; 11ee4 <nrf_mem_register+0x230>
   11cce:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   11cd2:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   11cd6:	685b      	ldr	r3, [r3, #4]
   11cd8:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   11cdc:	4463      	add	r3, ip
   11cde:	2b10      	cmp	r3, #16
   11ce0:	d811      	bhi.n	11d06 <nrf_mem_register+0x52>
   11ce2:	f04f 0a00 	mov.w	sl, #0
   11ce6:	4689      	mov	r9, r1
   11ce8:	4b7c      	ldr	r3, [pc, #496]	; (11edc <nrf_mem_register+0x228>)
   11cea:	4f7d      	ldr	r7, [pc, #500]	; (11ee0 <nrf_mem_register+0x22c>)
   11cec:	681b      	ldr	r3, [r3, #0]
   11cee:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   11cf2:	9300      	str	r3, [sp, #0]
   11cf4:	68b9      	ldr	r1, [r7, #8]
   11cf6:	b191      	cbz	r1, 11d1e <nrf_mem_register+0x6a>
   11cf8:	f10a 0a01 	add.w	sl, sl, #1
   11cfc:	f1ba 0f05 	cmp.w	sl, #5
   11d00:	f107 070c 	add.w	r7, r7, #12
   11d04:	d1f6      	bne.n	11cf4 <nrf_mem_register+0x40>
   11d06:	f248 1b07 	movw	fp, #33031	; 0x8107
   11d0a:	4658      	mov	r0, fp
   11d0c:	b007      	add	sp, #28
   11d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d12:	f248 1b0e 	movw	fp, #33038	; 0x810e
   11d16:	4658      	mov	r0, fp
   11d18:	b007      	add	sp, #28
   11d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d1e:	f1bc 0f00 	cmp.w	ip, #0
   11d22:	d061      	beq.n	11de8 <nrf_mem_register+0x134>
   11d24:	460d      	mov	r5, r1
   11d26:	460c      	mov	r4, r1
   11d28:	f8d9 3010 	ldr.w	r3, [r9, #16]
   11d2c:	eb0e 0b03 	add.w	fp, lr, r3
   11d30:	885a      	ldrh	r2, [r3, #2]
   11d32:	f833 6b04 	ldrh.w	r6, [r3], #4
   11d36:	4415      	add	r5, r2
   11d38:	459b      	cmp	fp, r3
   11d3a:	fb02 4406 	mla	r4, r2, r6, r4
   11d3e:	d1f7      	bne.n	11d30 <nrf_mem_register+0x7c>
   11d40:	f8d9 3008 	ldr.w	r3, [r9, #8]
   11d44:	42a3      	cmp	r3, r4
   11d46:	d3d7      	bcc.n	11cf8 <nrf_mem_register+0x44>
   11d48:	9b00      	ldr	r3, [sp, #0]
   11d4a:	442b      	add	r3, r5
   11d4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   11d50:	d2d2      	bcs.n	11cf8 <nrf_mem_register+0x44>
   11d52:	4c63      	ldr	r4, [pc, #396]	; (11ee0 <nrf_mem_register+0x22c>)
   11d54:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   11d58:	0092      	lsls	r2, r2, #2
   11d5a:	f8c0 a000 	str.w	sl, [r0]
   11d5e:	18a0      	adds	r0, r4, r2
   11d60:	f844 9002 	str.w	r9, [r4, r2]
   11d64:	9a00      	ldr	r2, [sp, #0]
   11d66:	468b      	mov	fp, r1
   11d68:	e9c0 2501 	strd	r2, r5, [r0, #4]
   11d6c:	f899 2001 	ldrb.w	r2, [r9, #1]
   11d70:	485a      	ldr	r0, [pc, #360]	; (11edc <nrf_mem_register+0x228>)
   11d72:	2a01      	cmp	r2, #1
   11d74:	6003      	str	r3, [r0, #0]
   11d76:	d0c8      	beq.n	11d0a <nrf_mem_register+0x56>
   11d78:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   11d7c:	2b00      	cmp	r3, #0
   11d7e:	d0c4      	beq.n	11d0a <nrf_mem_register+0x56>
   11d80:	2500      	movs	r5, #0
   11d82:	f8cd 9004 	str.w	r9, [sp, #4]
   11d86:	f8cd a00c 	str.w	sl, [sp, #12]
   11d8a:	f8cd b014 	str.w	fp, [sp, #20]
   11d8e:	9b01      	ldr	r3, [sp, #4]
   11d90:	781f      	ldrb	r7, [r3, #0]
   11d92:	691a      	ldr	r2, [r3, #16]
   11d94:	013b      	lsls	r3, r7, #4
   11d96:	eb03 0907 	add.w	r9, r3, r7
   11d9a:	9300      	str	r3, [sp, #0]
   11d9c:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   11da0:	6859      	ldr	r1, [r3, #4]
   11da2:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   11da6:	9102      	str	r1, [sp, #8]
   11da8:	bb39      	cbnz	r1, 11dfa <nrf_mem_register+0x146>
   11daa:	9a03      	ldr	r2, [sp, #12]
   11dac:	60dd      	str	r5, [r3, #12]
   11dae:	609a      	str	r2, [r3, #8]
   11db0:	9b00      	ldr	r3, [sp, #0]
   11db2:	443b      	add	r3, r7
   11db4:	461f      	mov	r7, r3
   11db6:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   11dba:	684b      	ldr	r3, [r1, #4]
   11dbc:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   11dc0:	3301      	adds	r3, #1
   11dc2:	4294      	cmp	r4, r2
   11dc4:	604b      	str	r3, [r1, #4]
   11dc6:	d912      	bls.n	11dee <nrf_mem_register+0x13a>
   11dc8:	9b01      	ldr	r3, [sp, #4]
   11dca:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   11dce:	899b      	ldrh	r3, [r3, #12]
   11dd0:	3501      	adds	r5, #1
   11dd2:	429d      	cmp	r5, r3
   11dd4:	d3db      	bcc.n	11d8e <nrf_mem_register+0xda>
   11dd6:	f8dd b014 	ldr.w	fp, [sp, #20]
   11dda:	e796      	b.n	11d0a <nrf_mem_register+0x56>
   11ddc:	f248 1b08 	movw	fp, #33032	; 0x8108
   11de0:	4658      	mov	r0, fp
   11de2:	b007      	add	sp, #28
   11de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11de8:	9b00      	ldr	r3, [sp, #0]
   11dea:	4665      	mov	r5, ip
   11dec:	e7ae      	b.n	11d4c <nrf_mem_register+0x98>
   11dee:	9b01      	ldr	r3, [sp, #4]
   11df0:	3501      	adds	r5, #1
   11df2:	899b      	ldrh	r3, [r3, #12]
   11df4:	42ab      	cmp	r3, r5
   11df6:	d8ca      	bhi.n	11d8e <nrf_mem_register+0xda>
   11df8:	e7ed      	b.n	11dd6 <nrf_mem_register+0x122>
   11dfa:	2600      	movs	r6, #0
   11dfc:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
   11e00:	9504      	str	r5, [sp, #16]
   11e02:	eb06 000a 	add.w	r0, r6, sl
   11e06:	eb09 0206 	add.w	r2, r9, r6
   11e0a:	3201      	adds	r2, #1
   11e0c:	3001      	adds	r0, #1
   11e0e:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   11e12:	0840      	lsrs	r0, r0, #1
   11e14:	4d32      	ldr	r5, [pc, #200]	; (11ee0 <nrf_mem_register+0x22c>)
   11e16:	eb09 0100 	add.w	r1, r9, r0
   11e1a:	eb09 030a 	add.w	r3, r9, sl
   11e1e:	3101      	adds	r1, #1
   11e20:	3301      	adds	r3, #1
   11e22:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   11e26:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   11e2a:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   11e2e:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   11e32:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   11e36:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   11e3a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   11e3e:	f8db b010 	ldr.w	fp, [fp, #16]
   11e42:	6852      	ldr	r2, [r2, #4]
   11e44:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   11e48:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   11e4c:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   11e50:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   11e54:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   11e58:	f8de e010 	ldr.w	lr, [lr, #16]
   11e5c:	6849      	ldr	r1, [r1, #4]
   11e5e:	f8dc c010 	ldr.w	ip, [ip, #16]
   11e62:	685b      	ldr	r3, [r3, #4]
   11e64:	4294      	cmp	r4, r2
   11e66:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   11e6a:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   11e6e:	d92d      	bls.n	11ecc <nrf_mem_register+0x218>
   11e70:	429c      	cmp	r4, r3
   11e72:	d22d      	bcs.n	11ed0 <nrf_mem_register+0x21c>
   11e74:	428c      	cmp	r4, r1
   11e76:	d924      	bls.n	11ec2 <nrf_mem_register+0x20e>
   11e78:	1c46      	adds	r6, r0, #1
   11e7a:	45b2      	cmp	sl, r6
   11e7c:	d2c1      	bcs.n	11e02 <nrf_mem_register+0x14e>
   11e7e:	2610      	movs	r6, #16
   11e80:	9d04      	ldr	r5, [sp, #16]
   11e82:	9a02      	ldr	r2, [sp, #8]
   11e84:	42b2      	cmp	r2, r6
   11e86:	d911      	bls.n	11eac <nrf_mem_register+0x1f8>
   11e88:	9b00      	ldr	r3, [sp, #0]
   11e8a:	443b      	add	r3, r7
   11e8c:	441a      	add	r2, r3
   11e8e:	4433      	add	r3, r6
   11e90:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   11e94:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   11e98:	2208      	movs	r2, #8
   11e9a:	4651      	mov	r1, sl
   11e9c:	eb0a 0002 	add.w	r0, sl, r2
   11ea0:	f1aa 0a08 	sub.w	sl, sl, #8
   11ea4:	f00b fcda 	bl	1d85c <memcpy>
   11ea8:	45d1      	cmp	r9, sl
   11eaa:	d1f5      	bne.n	11e98 <nrf_mem_register+0x1e4>
   11eac:	9b00      	ldr	r3, [sp, #0]
   11eae:	9903      	ldr	r1, [sp, #12]
   11eb0:	443b      	add	r3, r7
   11eb2:	4433      	add	r3, r6
   11eb4:	3301      	adds	r3, #1
   11eb6:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   11eba:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   11ebe:	6055      	str	r5, [r2, #4]
   11ec0:	e776      	b.n	11db0 <nrf_mem_register+0xfc>
   11ec2:	f100 3aff 	add.w	sl, r0, #4294967295	; 0xffffffff
   11ec6:	4556      	cmp	r6, sl
   11ec8:	d99b      	bls.n	11e02 <nrf_mem_register+0x14e>
   11eca:	e7d8      	b.n	11e7e <nrf_mem_register+0x1ca>
   11ecc:	9d04      	ldr	r5, [sp, #16]
   11ece:	e7d8      	b.n	11e82 <nrf_mem_register+0x1ce>
   11ed0:	9d04      	ldr	r5, [sp, #16]
   11ed2:	f10a 0601 	add.w	r6, sl, #1
   11ed6:	e7d4      	b.n	11e82 <nrf_mem_register+0x1ce>
   11ed8:	20024f37 	.word	0x20024f37
   11edc:	2002059c 	.word	0x2002059c
   11ee0:	200205a0 	.word	0x200205a0
   11ee4:	200205dc 	.word	0x200205dc

00011ee8 <nrf_malloc>:
   11ee8:	4b03      	ldr	r3, [pc, #12]	; (11ef8 <nrf_malloc+0x10>)
   11eea:	781b      	ldrb	r3, [r3, #0]
   11eec:	b10b      	cbz	r3, 11ef2 <nrf_malloc+0xa>
   11eee:	f7ff bd8d 	b.w	11a0c <mem_alloc.constprop.4>
   11ef2:	4618      	mov	r0, r3
   11ef4:	4770      	bx	lr
   11ef6:	bf00      	nop
   11ef8:	20024f37 	.word	0x20024f37

00011efc <nrf_free>:
   11efc:	4b04      	ldr	r3, [pc, #16]	; (11f10 <nrf_free+0x14>)
   11efe:	781b      	ldrb	r3, [r3, #0]
   11f00:	b123      	cbz	r3, 11f0c <nrf_free+0x10>
   11f02:	b118      	cbz	r0, 11f0c <nrf_free+0x10>
   11f04:	4601      	mov	r1, r0
   11f06:	2000      	movs	r0, #0
   11f08:	f7ff bc30 	b.w	1176c <mem_free>
   11f0c:	4770      	bx	lr
   11f0e:	bf00      	nop
   11f10:	20024f37 	.word	0x20024f37

00011f14 <nrf_shared_malloc>:
   11f14:	4b03      	ldr	r3, [pc, #12]	; (11f24 <nrf_shared_malloc+0x10>)
   11f16:	781b      	ldrb	r3, [r3, #0]
   11f18:	b10b      	cbz	r3, 11f1e <nrf_shared_malloc+0xa>
   11f1a:	f7ff bc93 	b.w	11844 <mem_alloc.constprop.5>
   11f1e:	4618      	mov	r0, r3
   11f20:	4770      	bx	lr
   11f22:	bf00      	nop
   11f24:	20024f37 	.word	0x20024f37

00011f28 <nrf_shared_free>:
   11f28:	4b04      	ldr	r3, [pc, #16]	; (11f3c <nrf_shared_free+0x14>)
   11f2a:	781b      	ldrb	r3, [r3, #0]
   11f2c:	b123      	cbz	r3, 11f38 <nrf_shared_free+0x10>
   11f2e:	b118      	cbz	r0, 11f38 <nrf_shared_free+0x10>
   11f30:	4601      	mov	r1, r0
   11f32:	2001      	movs	r0, #1
   11f34:	f7ff bc1a 	b.w	1176c <mem_free>
   11f38:	4770      	bx	lr
   11f3a:	bf00      	nop
   11f3c:	20024f37 	.word	0x20024f37

00011f40 <ip_client_event_handler>:
   11f40:	f850 1b08 	ldr.w	r1, [r0], #8
   11f44:	0c09      	lsrs	r1, r1, #16
   11f46:	f004 bcd1 	b.w	168ec <rpc_ip_event_handler>
   11f4a:	bf00      	nop

00011f4c <rpc_ip_client_init>:
   11f4c:	4801      	ldr	r0, [pc, #4]	; (11f54 <rpc_ip_client_init+0x8>)
   11f4e:	f005 b99f 	b.w	17290 <rpc_client_register>
   11f52:	bf00      	nop
   11f54:	0001ef14 	.word	0x0001ef14

00011f58 <rpc_ip_client_request_alloc>:
   11f58:	2300      	movs	r3, #0
   11f5a:	b510      	push	{r4, lr}
   11f5c:	b082      	sub	sp, #8
   11f5e:	9301      	str	r3, [sp, #4]
   11f60:	b158      	cbz	r0, 11f7a <rpc_ip_client_request_alloc+0x22>
   11f62:	4604      	mov	r4, r0
   11f64:	aa01      	add	r2, sp, #4
   11f66:	2004      	movs	r0, #4
   11f68:	f005 fbca 	bl	17700 <rpc_message_alloc>
   11f6c:	b918      	cbnz	r0, 11f76 <rpc_ip_client_request_alloc+0x1e>
   11f6e:	9b01      	ldr	r3, [sp, #4]
   11f70:	b10b      	cbz	r3, 11f76 <rpc_ip_client_request_alloc+0x1e>
   11f72:	3308      	adds	r3, #8
   11f74:	6023      	str	r3, [r4, #0]
   11f76:	b002      	add	sp, #8
   11f78:	bd10      	pop	{r4, pc}
   11f7a:	2007      	movs	r0, #7
   11f7c:	b002      	add	sp, #8
   11f7e:	bd10      	pop	{r4, pc}

00011f80 <rpc_ip_client_request_send>:
   11f80:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   11f84:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   11f88:	d10b      	bne.n	11fa2 <rpc_ip_client_request_send+0x22>
   11f8a:	b160      	cbz	r0, 11fa6 <rpc_ip_client_request_send+0x26>
   11f8c:	4603      	mov	r3, r0
   11f8e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   11f92:	2004      	movs	r0, #4
   11f94:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   11f98:	f843 1d08 	str.w	r1, [r3, #-8]!
   11f9c:	4619      	mov	r1, r3
   11f9e:	f005 bb97 	b.w	176d0 <rpc_message_send>
   11fa2:	200f      	movs	r0, #15
   11fa4:	4770      	bx	lr
   11fa6:	2007      	movs	r0, #7
   11fa8:	4770      	bx	lr
   11faa:	bf00      	nop

00011fac <rpc_ip_client_message_free>:
   11fac:	b120      	cbz	r0, 11fb8 <rpc_ip_client_message_free+0xc>
   11fae:	f1a0 0108 	sub.w	r1, r0, #8
   11fb2:	2004      	movs	r0, #4
   11fb4:	f005 bbd6 	b.w	17764 <rpc_message_free>
   11fb8:	2007      	movs	r0, #7
   11fba:	4770      	bx	lr

00011fbc <rpc_ip_client_data_free>:
   11fbc:	b118      	cbz	r0, 11fc6 <rpc_ip_client_data_free+0xa>
   11fbe:	4601      	mov	r1, r0
   11fc0:	2004      	movs	r0, #4
   11fc2:	f005 bce1 	b.w	17988 <rpc_message_data_free>
   11fc6:	2007      	movs	r0, #7
   11fc8:	4770      	bx	lr
   11fca:	bf00      	nop

00011fcc <secure_client_socket>:
   11fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11fd0:	460c      	mov	r4, r1
   11fd2:	680b      	ldr	r3, [r1, #0]
   11fd4:	4f46      	ldr	r7, [pc, #280]	; (120f0 <secure_client_socket+0x124>)
   11fd6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   11fda:	600b      	str	r3, [r1, #0]
   11fdc:	680b      	ldr	r3, [r1, #0]
   11fde:	00c6      	lsls	r6, r0, #3
   11fe0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   11fe4:	600b      	str	r3, [r1, #0]
   11fe6:	eb07 0a06 	add.w	sl, r7, r6
   11fea:	b082      	sub	sp, #8
   11fec:	f8da 3004 	ldr.w	r3, [sl, #4]
   11ff0:	6989      	ldr	r1, [r1, #24]
   11ff2:	f247 0281 	movw	r2, #28801	; 0x7081
   11ff6:	4605      	mov	r5, r0
   11ff8:	f8d4 8000 	ldr.w	r8, [r4]
   11ffc:	f003 fbd4 	bl	157a8 <ip_interface_request_create>
   12000:	2800      	cmp	r0, #0
   12002:	d06f      	beq.n	120e4 <secure_client_socket+0x118>
   12004:	f8da 2004 	ldr.w	r2, [sl, #4]
   12008:	4681      	mov	r9, r0
   1200a:	2a00      	cmp	r2, #0
   1200c:	d15f      	bne.n	120ce <secure_client_socket+0x102>
   1200e:	4b39      	ldr	r3, [pc, #228]	; (120f4 <secure_client_socket+0x128>)
   12010:	1971      	adds	r1, r6, r5
   12012:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   12016:	2224      	movs	r2, #36	; 0x24
   12018:	f109 0014 	add.w	r0, r9, #20
   1201c:	f00b fc1e 	bl	1d85c <memcpy>
   12020:	f8d9 3008 	ldr.w	r3, [r9, #8]
   12024:	4649      	mov	r1, r9
   12026:	3324      	adds	r3, #36	; 0x24
   12028:	f8c9 3008 	str.w	r3, [r9, #8]
   1202c:	6822      	ldr	r2, [r4, #0]
   1202e:	4643      	mov	r3, r8
   12030:	0c12      	lsrs	r2, r2, #16
   12032:	0412      	lsls	r2, r2, #16
   12034:	f042 020a 	orr.w	r2, r2, #10
   12038:	6022      	str	r2, [r4, #0]
   1203a:	4620      	mov	r0, r4
   1203c:	f247 0281 	movw	r2, #28801	; 0x7081
   12040:	f003 fbd2 	bl	157e8 <ip_interface_request_send>
   12044:	4603      	mov	r3, r0
   12046:	b970      	cbnz	r0, 12066 <secure_client_socket+0x9a>
   12048:	6823      	ldr	r3, [r4, #0]
   1204a:	00db      	lsls	r3, r3, #3
   1204c:	d40f      	bmi.n	1206e <secure_client_socket+0xa2>
   1204e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12052:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12056:	210b      	movs	r1, #11
   12058:	4628      	mov	r0, r5
   1205a:	f003 fbd9 	bl	15810 <ip_interface_wait>
   1205e:	4603      	mov	r3, r0
   12060:	b150      	cbz	r0, 12078 <secure_client_socket+0xac>
   12062:	f8c4 8000 	str.w	r8, [r4]
   12066:	4618      	mov	r0, r3
   12068:	b002      	add	sp, #8
   1206a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1206e:	2373      	movs	r3, #115	; 0x73
   12070:	4618      	mov	r0, r3
   12072:	b002      	add	sp, #8
   12074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12078:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1207c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12080:	4611      	mov	r1, r2
   12082:	4628      	mov	r0, r5
   12084:	f003 fbc4 	bl	15810 <ip_interface_wait>
   12088:	4603      	mov	r3, r0
   1208a:	bb30      	cbnz	r0, 120da <secure_client_socket+0x10e>
   1208c:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   12090:	b138      	cbz	r0, 120a2 <secure_client_socket+0xd6>
   12092:	9301      	str	r3, [sp, #4]
   12094:	f7ff ff32 	bl	11efc <nrf_free>
   12098:	9b01      	ldr	r3, [sp, #4]
   1209a:	443e      	add	r6, r7
   1209c:	6073      	str	r3, [r6, #4]
   1209e:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   120a2:	4618      	mov	r0, r3
   120a4:	6822      	ldr	r2, [r4, #0]
   120a6:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   120aa:	6022      	str	r2, [r4, #0]
   120ac:	6822      	ldr	r2, [r4, #0]
   120ae:	0c12      	lsrs	r2, r2, #16
   120b0:	0412      	lsls	r2, r2, #16
   120b2:	f042 020c 	orr.w	r2, r2, #12
   120b6:	6022      	str	r2, [r4, #0]
   120b8:	6822      	ldr	r2, [r4, #0]
   120ba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   120be:	6022      	str	r2, [r4, #0]
   120c0:	6822      	ldr	r2, [r4, #0]
   120c2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   120c6:	6022      	str	r2, [r4, #0]
   120c8:	b002      	add	sp, #8
   120ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   120ce:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   120d2:	6800      	ldr	r0, [r0, #0]
   120d4:	f00b fbc2 	bl	1d85c <memcpy>
   120d8:	e799      	b.n	1200e <secure_client_socket+0x42>
   120da:	2b73      	cmp	r3, #115	; 0x73
   120dc:	d0c3      	beq.n	12066 <secure_client_socket+0x9a>
   120de:	f8c4 8000 	str.w	r8, [r4]
   120e2:	e7c0      	b.n	12066 <secure_client_socket+0x9a>
   120e4:	230c      	movs	r3, #12
   120e6:	4618      	mov	r0, r3
   120e8:	b002      	add	sp, #8
   120ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   120ee:	bf00      	nop
   120f0:	20020830 	.word	0x20020830
   120f4:	200206ec 	.word	0x200206ec

000120f8 <tls_interface_init>:
   120f8:	2000      	movs	r0, #0
   120fa:	4770      	bx	lr

000120fc <tls_interface_open>:
   120fc:	b538      	push	{r3, r4, r5, lr}
   120fe:	f020 0308 	bic.w	r3, r0, #8
   12102:	2b02      	cmp	r3, #2
   12104:	d006      	beq.n	12114 <tls_interface_open+0x18>
   12106:	202f      	movs	r0, #47	; 0x2f
   12108:	f7fd face 	bl	f6a8 <bsd_os_errno_set>
   1210c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12110:	4628      	mov	r0, r5
   12112:	bd38      	pop	{r3, r4, r5, pc}
   12114:	4614      	mov	r4, r2
   12116:	1e4a      	subs	r2, r1, #1
   12118:	2a01      	cmp	r2, #1
   1211a:	d828      	bhi.n	1216e <tls_interface_open+0x72>
   1211c:	bb14      	cbnz	r4, 12164 <tls_interface_open+0x68>
   1211e:	2901      	cmp	r1, #1
   12120:	bf06      	itte	eq
   12122:	2301      	moveq	r3, #1
   12124:	f44f 7482 	moveq.w	r4, #260	; 0x104
   12128:	f44f 7487 	movne.w	r4, #270	; 0x10e
   1212c:	461a      	mov	r2, r3
   1212e:	f003 fb9b 	bl	15868 <ip_interface_open>
   12132:	1e05      	subs	r5, r0, #0
   12134:	db26      	blt.n	12184 <tls_interface_open+0x88>
   12136:	4b15      	ldr	r3, [pc, #84]	; (1218c <tls_interface_open+0x90>)
   12138:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   1213c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   12140:	2224      	movs	r2, #36	; 0x24
   12142:	4913      	ldr	r1, [pc, #76]	; (12190 <tls_interface_open+0x94>)
   12144:	f00b fb8a 	bl	1d85c <memcpy>
   12148:	4628      	mov	r0, r5
   1214a:	f004 ff71 	bl	17030 <interface_socket_from_handle_get>
   1214e:	6803      	ldr	r3, [r0, #0]
   12150:	6144      	str	r4, [r0, #20]
   12152:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   12156:	6003      	str	r3, [r0, #0]
   12158:	6803      	ldr	r3, [r0, #0]
   1215a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1215e:	6003      	str	r3, [r0, #0]
   12160:	4628      	mov	r0, r5
   12162:	bd38      	pop	{r3, r4, r5, pc}
   12164:	2901      	cmp	r1, #1
   12166:	d008      	beq.n	1217a <tls_interface_open+0x7e>
   12168:	f5b4 7f87 	cmp.w	r4, #270	; 0x10e
   1216c:	d0de      	beq.n	1212c <tls_interface_open+0x30>
   1216e:	2016      	movs	r0, #22
   12170:	f7fd fa9a 	bl	f6a8 <bsd_os_errno_set>
   12174:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12178:	e7ca      	b.n	12110 <tls_interface_open+0x14>
   1217a:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
   1217e:	d1f6      	bne.n	1216e <tls_interface_open+0x72>
   12180:	460b      	mov	r3, r1
   12182:	e7d3      	b.n	1212c <tls_interface_open+0x30>
   12184:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12188:	e7c2      	b.n	12110 <tls_interface_open+0x14>
   1218a:	bf00      	nop
   1218c:	200206ec 	.word	0x200206ec
   12190:	0001ef24 	.word	0x0001ef24

00012194 <tls_interface_close>:
   12194:	b538      	push	{r3, r4, r5, lr}
   12196:	4604      	mov	r4, r0
   12198:	f004 ff4a 	bl	17030 <interface_socket_from_handle_get>
   1219c:	b180      	cbz	r0, 121c0 <tls_interface_close+0x2c>
   1219e:	4d0b      	ldr	r5, [pc, #44]	; (121cc <tls_interface_close+0x38>)
   121a0:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   121a4:	b138      	cbz	r0, 121b6 <tls_interface_close+0x22>
   121a6:	f7ff fea9 	bl	11efc <nrf_free>
   121aa:	2300      	movs	r3, #0
   121ac:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   121b0:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   121b4:	6053      	str	r3, [r2, #4]
   121b6:	4620      	mov	r0, r4
   121b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   121bc:	f003 bc00 	b.w	159c0 <ip_interface_close>
   121c0:	2009      	movs	r0, #9
   121c2:	f7fd fa71 	bl	f6a8 <bsd_os_errno_set>
   121c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   121ca:	bd38      	pop	{r3, r4, r5, pc}
   121cc:	20020830 	.word	0x20020830

000121d0 <tls_interface_sendto>:
   121d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   121d4:	460d      	mov	r5, r1
   121d6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   121da:	4616      	mov	r6, r2
   121dc:	461f      	mov	r7, r3
   121de:	4604      	mov	r4, r0
   121e0:	f004 ff26 	bl	17030 <interface_socket_from_handle_get>
   121e4:	2800      	cmp	r0, #0
   121e6:	d03b      	beq.n	12260 <tls_interface_sendto+0x90>
   121e8:	6803      	ldr	r3, [r0, #0]
   121ea:	b29b      	uxth	r3, r3
   121ec:	2b0c      	cmp	r3, #12
   121ee:	d039      	beq.n	12264 <tls_interface_sendto+0x94>
   121f0:	6803      	ldr	r3, [r0, #0]
   121f2:	b29b      	uxth	r3, r3
   121f4:	2b0b      	cmp	r3, #11
   121f6:	d111      	bne.n	1221c <tls_interface_sendto+0x4c>
   121f8:	4b20      	ldr	r3, [pc, #128]	; (1227c <tls_interface_sendto+0xac>)
   121fa:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   121fe:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
   12202:	2b02      	cmp	r3, #2
   12204:	d038      	beq.n	12278 <tls_interface_sendto+0xa8>
   12206:	6903      	ldr	r3, [r0, #16]
   12208:	2b01      	cmp	r3, #1
   1220a:	bf14      	ite	ne
   1220c:	2039      	movne	r0, #57	; 0x39
   1220e:	202a      	moveq	r0, #42	; 0x2a
   12210:	f7fd fa4a 	bl	f6a8 <bsd_os_errno_set>
   12214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1221c:	6903      	ldr	r3, [r0, #16]
   1221e:	2b01      	cmp	r3, #1
   12220:	d00b      	beq.n	1223a <tls_interface_sendto+0x6a>
   12222:	2b02      	cmp	r3, #2
   12224:	d001      	beq.n	1222a <tls_interface_sendto+0x5a>
   12226:	2039      	movs	r0, #57	; 0x39
   12228:	e7f2      	b.n	12210 <tls_interface_sendto+0x40>
   1222a:	6803      	ldr	r3, [r0, #0]
   1222c:	b29b      	uxth	r3, r3
   1222e:	2b02      	cmp	r3, #2
   12230:	d007      	beq.n	12242 <tls_interface_sendto+0x72>
   12232:	6803      	ldr	r3, [r0, #0]
   12234:	b29b      	uxth	r3, r3
   12236:	2b04      	cmp	r3, #4
   12238:	d003      	beq.n	12242 <tls_interface_sendto+0x72>
   1223a:	6803      	ldr	r3, [r0, #0]
   1223c:	b29b      	uxth	r3, r3
   1223e:	2b05      	cmp	r3, #5
   12240:	d1f1      	bne.n	12226 <tls_interface_sendto+0x56>
   12242:	4b0e      	ldr	r3, [pc, #56]	; (1227c <tls_interface_sendto+0xac>)
   12244:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   12248:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1224c:	2b02      	cmp	r3, #2
   1224e:	d1ea      	bne.n	12226 <tls_interface_sendto+0x56>
   12250:	4601      	mov	r1, r0
   12252:	4620      	mov	r0, r4
   12254:	f7ff feba 	bl	11fcc <secure_client_socket>
   12258:	2800      	cmp	r0, #0
   1225a:	d003      	beq.n	12264 <tls_interface_sendto+0x94>
   1225c:	dcd8      	bgt.n	12210 <tls_interface_sendto+0x40>
   1225e:	e7d9      	b.n	12214 <tls_interface_sendto+0x44>
   12260:	2009      	movs	r0, #9
   12262:	e7d5      	b.n	12210 <tls_interface_sendto+0x40>
   12264:	e9cd 8908 	strd	r8, r9, [sp, #32]
   12268:	463b      	mov	r3, r7
   1226a:	4632      	mov	r2, r6
   1226c:	4629      	mov	r1, r5
   1226e:	4620      	mov	r0, r4
   12270:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12274:	f003 bc14 	b.w	15aa0 <ip_interface_sendto>
   12278:	2023      	movs	r0, #35	; 0x23
   1227a:	e7c9      	b.n	12210 <tls_interface_sendto+0x40>
   1227c:	200206ec 	.word	0x200206ec

00012280 <tls_interface_recvfrom>:
   12280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12284:	460d      	mov	r5, r1
   12286:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1228a:	4616      	mov	r6, r2
   1228c:	461f      	mov	r7, r3
   1228e:	4604      	mov	r4, r0
   12290:	f004 fece 	bl	17030 <interface_socket_from_handle_get>
   12294:	2800      	cmp	r0, #0
   12296:	d038      	beq.n	1230a <tls_interface_recvfrom+0x8a>
   12298:	6803      	ldr	r3, [r0, #0]
   1229a:	b29b      	uxth	r3, r3
   1229c:	2b0c      	cmp	r3, #12
   1229e:	d00f      	beq.n	122c0 <tls_interface_recvfrom+0x40>
   122a0:	6803      	ldr	r3, [r0, #0]
   122a2:	b29b      	uxth	r3, r3
   122a4:	2b0d      	cmp	r3, #13
   122a6:	d00b      	beq.n	122c0 <tls_interface_recvfrom+0x40>
   122a8:	6903      	ldr	r3, [r0, #16]
   122aa:	2b01      	cmp	r3, #1
   122ac:	d01a      	beq.n	122e4 <tls_interface_recvfrom+0x64>
   122ae:	2b02      	cmp	r3, #2
   122b0:	d010      	beq.n	122d4 <tls_interface_recvfrom+0x54>
   122b2:	2023      	movs	r0, #35	; 0x23
   122b4:	f7fd f9f8 	bl	f6a8 <bsd_os_errno_set>
   122b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   122bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   122c0:	e9cd 8908 	strd	r8, r9, [sp, #32]
   122c4:	463b      	mov	r3, r7
   122c6:	4632      	mov	r2, r6
   122c8:	4629      	mov	r1, r5
   122ca:	4620      	mov	r0, r4
   122cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   122d0:	f003 bd20 	b.w	15d14 <ip_interface_recvfrom>
   122d4:	6803      	ldr	r3, [r0, #0]
   122d6:	b29b      	uxth	r3, r3
   122d8:	2b02      	cmp	r3, #2
   122da:	d007      	beq.n	122ec <tls_interface_recvfrom+0x6c>
   122dc:	6803      	ldr	r3, [r0, #0]
   122de:	b29b      	uxth	r3, r3
   122e0:	2b04      	cmp	r3, #4
   122e2:	d003      	beq.n	122ec <tls_interface_recvfrom+0x6c>
   122e4:	6803      	ldr	r3, [r0, #0]
   122e6:	b29b      	uxth	r3, r3
   122e8:	2b05      	cmp	r3, #5
   122ea:	d1e2      	bne.n	122b2 <tls_interface_recvfrom+0x32>
   122ec:	4b08      	ldr	r3, [pc, #32]	; (12310 <tls_interface_recvfrom+0x90>)
   122ee:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   122f2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   122f6:	2b02      	cmp	r3, #2
   122f8:	d1db      	bne.n	122b2 <tls_interface_recvfrom+0x32>
   122fa:	4601      	mov	r1, r0
   122fc:	4620      	mov	r0, r4
   122fe:	f7ff fe65 	bl	11fcc <secure_client_socket>
   12302:	2800      	cmp	r0, #0
   12304:	d0dc      	beq.n	122c0 <tls_interface_recvfrom+0x40>
   12306:	dcd5      	bgt.n	122b4 <tls_interface_recvfrom+0x34>
   12308:	e7d6      	b.n	122b8 <tls_interface_recvfrom+0x38>
   1230a:	2009      	movs	r0, #9
   1230c:	e7d2      	b.n	122b4 <tls_interface_recvfrom+0x34>
   1230e:	bf00      	nop
   12310:	200206ec 	.word	0x200206ec

00012314 <tls_interface_bind>:
   12314:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12318:	460c      	mov	r4, r1
   1231a:	4617      	mov	r7, r2
   1231c:	4606      	mov	r6, r0
   1231e:	f004 fe87 	bl	17030 <interface_socket_from_handle_get>
   12322:	2800      	cmp	r0, #0
   12324:	d06d      	beq.n	12402 <tls_interface_bind+0xee>
   12326:	6803      	ldr	r3, [r0, #0]
   12328:	4605      	mov	r5, r0
   1232a:	b29b      	uxth	r3, r3
   1232c:	2b02      	cmp	r3, #2
   1232e:	d15a      	bne.n	123e6 <tls_interface_bind+0xd2>
   12330:	4621      	mov	r1, r4
   12332:	463a      	mov	r2, r7
   12334:	4630      	mov	r0, r6
   12336:	f003 fec3 	bl	160c0 <ip_interface_bind>
   1233a:	4604      	mov	r4, r0
   1233c:	2800      	cmp	r0, #0
   1233e:	d148      	bne.n	123d2 <tls_interface_bind+0xbe>
   12340:	00f7      	lsls	r7, r6, #3
   12342:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 12408 <tls_interface_bind+0xf4>
   12346:	19bb      	adds	r3, r7, r6
   12348:	f818 3023 	ldrb.w	r3, [r8, r3, lsl #2]
   1234c:	2b01      	cmp	r3, #1
   1234e:	d002      	beq.n	12356 <tls_interface_bind+0x42>
   12350:	4620      	mov	r0, r4
   12352:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12356:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 1240c <tls_interface_bind+0xf8>
   1235a:	f247 0281 	movw	r2, #28801	; 0x7081
   1235e:	eb0b 0a07 	add.w	sl, fp, r7
   12362:	f8da 3004 	ldr.w	r3, [sl, #4]
   12366:	69a9      	ldr	r1, [r5, #24]
   12368:	4630      	mov	r0, r6
   1236a:	f003 fa1d 	bl	157a8 <ip_interface_request_create>
   1236e:	4681      	mov	r9, r0
   12370:	2800      	cmp	r0, #0
   12372:	d044      	beq.n	123fe <tls_interface_bind+0xea>
   12374:	f8da 2004 	ldr.w	r2, [sl, #4]
   12378:	2a00      	cmp	r2, #0
   1237a:	d13a      	bne.n	123f2 <tls_interface_bind+0xde>
   1237c:	19b9      	adds	r1, r7, r6
   1237e:	eb08 0181 	add.w	r1, r8, r1, lsl #2
   12382:	2224      	movs	r2, #36	; 0x24
   12384:	f109 0014 	add.w	r0, r9, #20
   12388:	f00b fa68 	bl	1d85c <memcpy>
   1238c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   12390:	4649      	mov	r1, r9
   12392:	3324      	adds	r3, #36	; 0x24
   12394:	f8c9 3008 	str.w	r3, [r9, #8]
   12398:	682a      	ldr	r2, [r5, #0]
   1239a:	2304      	movs	r3, #4
   1239c:	0c12      	lsrs	r2, r2, #16
   1239e:	0412      	lsls	r2, r2, #16
   123a0:	f042 020a 	orr.w	r2, r2, #10
   123a4:	602a      	str	r2, [r5, #0]
   123a6:	4628      	mov	r0, r5
   123a8:	f247 0281 	movw	r2, #28801	; 0x7081
   123ac:	f003 fa1c 	bl	157e8 <ip_interface_request_send>
   123b0:	b9e8      	cbnz	r0, 123ee <tls_interface_bind+0xda>
   123b2:	682b      	ldr	r3, [r5, #0]
   123b4:	00db      	lsls	r3, r3, #3
   123b6:	d418      	bmi.n	123ea <tls_interface_bind+0xd6>
   123b8:	4630      	mov	r0, r6
   123ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   123be:	f64f 72ff 	movw	r2, #65535	; 0xffff
   123c2:	210b      	movs	r1, #11
   123c4:	f003 fa24 	bl	15810 <ip_interface_wait>
   123c8:	2800      	cmp	r0, #0
   123ca:	d0c1      	beq.n	12350 <tls_interface_bind+0x3c>
   123cc:	2304      	movs	r3, #4
   123ce:	4604      	mov	r4, r0
   123d0:	602b      	str	r3, [r5, #0]
   123d2:	2c00      	cmp	r4, #0
   123d4:	ddbc      	ble.n	12350 <tls_interface_bind+0x3c>
   123d6:	4620      	mov	r0, r4
   123d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   123dc:	f7fd f964 	bl	f6a8 <bsd_os_errno_set>
   123e0:	4620      	mov	r0, r4
   123e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123e6:	242d      	movs	r4, #45	; 0x2d
   123e8:	e7f5      	b.n	123d6 <tls_interface_bind+0xc2>
   123ea:	2473      	movs	r4, #115	; 0x73
   123ec:	e7f3      	b.n	123d6 <tls_interface_bind+0xc2>
   123ee:	4604      	mov	r4, r0
   123f0:	e7ef      	b.n	123d2 <tls_interface_bind+0xbe>
   123f2:	f85b 1036 	ldr.w	r1, [fp, r6, lsl #3]
   123f6:	6800      	ldr	r0, [r0, #0]
   123f8:	f00b fa30 	bl	1d85c <memcpy>
   123fc:	e7be      	b.n	1237c <tls_interface_bind+0x68>
   123fe:	240c      	movs	r4, #12
   12400:	e7e9      	b.n	123d6 <tls_interface_bind+0xc2>
   12402:	2409      	movs	r4, #9
   12404:	e7e7      	b.n	123d6 <tls_interface_bind+0xc2>
   12406:	bf00      	nop
   12408:	200206ec 	.word	0x200206ec
   1240c:	20020830 	.word	0x20020830

00012410 <tls_interface_connect>:
   12410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12412:	460e      	mov	r6, r1
   12414:	4617      	mov	r7, r2
   12416:	4604      	mov	r4, r0
   12418:	f004 fe0a 	bl	17030 <interface_socket_from_handle_get>
   1241c:	b1e8      	cbz	r0, 1245a <tls_interface_connect+0x4a>
   1241e:	4b13      	ldr	r3, [pc, #76]	; (1246c <tls_interface_connect+0x5c>)
   12420:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   12424:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   12428:	2b02      	cmp	r3, #2
   1242a:	d11c      	bne.n	12466 <tls_interface_connect+0x56>
   1242c:	6803      	ldr	r3, [r0, #0]
   1242e:	4605      	mov	r5, r0
   12430:	b29b      	uxth	r3, r3
   12432:	2b02      	cmp	r3, #2
   12434:	d003      	beq.n	1243e <tls_interface_connect+0x2e>
   12436:	6803      	ldr	r3, [r0, #0]
   12438:	b29b      	uxth	r3, r3
   1243a:	2b04      	cmp	r3, #4
   1243c:	d113      	bne.n	12466 <tls_interface_connect+0x56>
   1243e:	463a      	mov	r2, r7
   12440:	4631      	mov	r1, r6
   12442:	4620      	mov	r0, r4
   12444:	f003 fd92 	bl	15f6c <ip_interface_connect>
   12448:	b110      	cbz	r0, 12450 <tls_interface_connect+0x40>
   1244a:	2800      	cmp	r0, #0
   1244c:	dc06      	bgt.n	1245c <tls_interface_connect+0x4c>
   1244e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12450:	4629      	mov	r1, r5
   12452:	4620      	mov	r0, r4
   12454:	f7ff fdba 	bl	11fcc <secure_client_socket>
   12458:	e7f7      	b.n	1244a <tls_interface_connect+0x3a>
   1245a:	2009      	movs	r0, #9
   1245c:	f7fd f924 	bl	f6a8 <bsd_os_errno_set>
   12460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12466:	202d      	movs	r0, #45	; 0x2d
   12468:	e7f8      	b.n	1245c <tls_interface_connect+0x4c>
   1246a:	bf00      	nop
   1246c:	200206ec 	.word	0x200206ec

00012470 <tls_interface_listen>:
   12470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12474:	b083      	sub	sp, #12
   12476:	9101      	str	r1, [sp, #4]
   12478:	4605      	mov	r5, r0
   1247a:	f004 fdd9 	bl	17030 <interface_socket_from_handle_get>
   1247e:	2800      	cmp	r0, #0
   12480:	d079      	beq.n	12576 <tls_interface_listen+0x106>
   12482:	6903      	ldr	r3, [r0, #16]
   12484:	4604      	mov	r4, r0
   12486:	2b01      	cmp	r3, #1
   12488:	d173      	bne.n	12572 <tls_interface_listen+0x102>
   1248a:	6803      	ldr	r3, [r0, #0]
   1248c:	b29b      	uxth	r3, r3
   1248e:	2b04      	cmp	r3, #4
   12490:	d05f      	beq.n	12552 <tls_interface_listen+0xe2>
   12492:	6823      	ldr	r3, [r4, #0]
   12494:	b29b      	uxth	r3, r3
   12496:	2b0b      	cmp	r3, #11
   12498:	d16b      	bne.n	12572 <tls_interface_listen+0x102>
   1249a:	00ee      	lsls	r6, r5, #3
   1249c:	4f37      	ldr	r7, [pc, #220]	; (1257c <tls_interface_listen+0x10c>)
   1249e:	1973      	adds	r3, r6, r5
   124a0:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   124a4:	2b01      	cmp	r3, #1
   124a6:	d164      	bne.n	12572 <tls_interface_listen+0x102>
   124a8:	2201      	movs	r2, #1
   124aa:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 12580 <tls_interface_listen+0x110>
   124ae:	1973      	adds	r3, r6, r5
   124b0:	00ee      	lsls	r6, r5, #3
   124b2:	f807 2023 	strb.w	r2, [r7, r3, lsl #2]
   124b6:	eb09 0806 	add.w	r8, r9, r6
   124ba:	69a1      	ldr	r1, [r4, #24]
   124bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   124c0:	f247 0281 	movw	r2, #28801	; 0x7081
   124c4:	4628      	mov	r0, r5
   124c6:	f8d4 a000 	ldr.w	sl, [r4]
   124ca:	f003 f96d 	bl	157a8 <ip_interface_request_create>
   124ce:	4683      	mov	fp, r0
   124d0:	2800      	cmp	r0, #0
   124d2:	d04c      	beq.n	1256e <tls_interface_listen+0xfe>
   124d4:	f8d8 2004 	ldr.w	r2, [r8, #4]
   124d8:	2a00      	cmp	r2, #0
   124da:	d142      	bne.n	12562 <tls_interface_listen+0xf2>
   124dc:	1971      	adds	r1, r6, r5
   124de:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   124e2:	2224      	movs	r2, #36	; 0x24
   124e4:	f10b 0014 	add.w	r0, fp, #20
   124e8:	f00b f9b8 	bl	1d85c <memcpy>
   124ec:	f8db 2008 	ldr.w	r2, [fp, #8]
   124f0:	4659      	mov	r1, fp
   124f2:	3224      	adds	r2, #36	; 0x24
   124f4:	f8cb 2008 	str.w	r2, [fp, #8]
   124f8:	6822      	ldr	r2, [r4, #0]
   124fa:	4653      	mov	r3, sl
   124fc:	0c12      	lsrs	r2, r2, #16
   124fe:	0412      	lsls	r2, r2, #16
   12500:	f042 020a 	orr.w	r2, r2, #10
   12504:	6022      	str	r2, [r4, #0]
   12506:	4620      	mov	r0, r4
   12508:	f247 0281 	movw	r2, #28801	; 0x7081
   1250c:	f003 f96c 	bl	157e8 <ip_interface_request_send>
   12510:	b968      	cbnz	r0, 1252e <tls_interface_listen+0xbe>
   12512:	6823      	ldr	r3, [r4, #0]
   12514:	00db      	lsls	r3, r3, #3
   12516:	d40f      	bmi.n	12538 <tls_interface_listen+0xc8>
   12518:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1251c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12520:	210b      	movs	r1, #11
   12522:	4628      	mov	r0, r5
   12524:	f003 f974 	bl	15810 <ip_interface_wait>
   12528:	b170      	cbz	r0, 12548 <tls_interface_listen+0xd8>
   1252a:	f8c4 a000 	str.w	sl, [r4]
   1252e:	2800      	cmp	r0, #0
   12530:	dc03      	bgt.n	1253a <tls_interface_listen+0xca>
   12532:	b003      	add	sp, #12
   12534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12538:	2073      	movs	r0, #115	; 0x73
   1253a:	f7fd f8b5 	bl	f6a8 <bsd_os_errno_set>
   1253e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12542:	b003      	add	sp, #12
   12544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12548:	9901      	ldr	r1, [sp, #4]
   1254a:	4628      	mov	r0, r5
   1254c:	f003 fe4e 	bl	161ec <ip_interface_listen>
   12550:	e7ed      	b.n	1252e <tls_interface_listen+0xbe>
   12552:	00ee      	lsls	r6, r5, #3
   12554:	4f09      	ldr	r7, [pc, #36]	; (1257c <tls_interface_listen+0x10c>)
   12556:	1973      	adds	r3, r6, r5
   12558:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   1255c:	2b02      	cmp	r3, #2
   1255e:	d198      	bne.n	12492 <tls_interface_listen+0x22>
   12560:	e7a2      	b.n	124a8 <tls_interface_listen+0x38>
   12562:	f859 1035 	ldr.w	r1, [r9, r5, lsl #3]
   12566:	6800      	ldr	r0, [r0, #0]
   12568:	f00b f978 	bl	1d85c <memcpy>
   1256c:	e7b6      	b.n	124dc <tls_interface_listen+0x6c>
   1256e:	200c      	movs	r0, #12
   12570:	e7e3      	b.n	1253a <tls_interface_listen+0xca>
   12572:	202d      	movs	r0, #45	; 0x2d
   12574:	e7e1      	b.n	1253a <tls_interface_listen+0xca>
   12576:	2009      	movs	r0, #9
   12578:	e7df      	b.n	1253a <tls_interface_listen+0xca>
   1257a:	bf00      	nop
   1257c:	200206ec 	.word	0x200206ec
   12580:	20020830 	.word	0x20020830

00012584 <tls_interface_accept>:
   12584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12586:	460c      	mov	r4, r1
   12588:	4616      	mov	r6, r2
   1258a:	461f      	mov	r7, r3
   1258c:	4605      	mov	r5, r0
   1258e:	f004 fd4f 	bl	17030 <interface_socket_from_handle_get>
   12592:	2800      	cmp	r0, #0
   12594:	d03b      	beq.n	1260e <tls_interface_accept+0x8a>
   12596:	6800      	ldr	r0, [r0, #0]
   12598:	b280      	uxth	r0, r0
   1259a:	2806      	cmp	r0, #6
   1259c:	d137      	bne.n	1260e <tls_interface_accept+0x8a>
   1259e:	4621      	mov	r1, r4
   125a0:	463b      	mov	r3, r7
   125a2:	4632      	mov	r2, r6
   125a4:	4628      	mov	r0, r5
   125a6:	f003 fe97 	bl	162d8 <ip_interface_accept>
   125aa:	4604      	mov	r4, r0
   125ac:	b118      	cbz	r0, 125b6 <tls_interface_accept+0x32>
   125ae:	2c00      	cmp	r4, #0
   125b0:	dc2e      	bgt.n	12610 <tls_interface_accept+0x8c>
   125b2:	4620      	mov	r0, r4
   125b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   125b6:	4628      	mov	r0, r5
   125b8:	f004 fd3a 	bl	17030 <interface_socket_from_handle_get>
   125bc:	6803      	ldr	r3, [r0, #0]
   125be:	4f18      	ldr	r7, [pc, #96]	; (12620 <tls_interface_accept+0x9c>)
   125c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   125c4:	6003      	str	r3, [r0, #0]
   125c6:	6803      	ldr	r3, [r0, #0]
   125c8:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   125cc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   125d0:	4606      	mov	r6, r0
   125d2:	6003      	str	r3, [r0, #0]
   125d4:	eb07 0185 	add.w	r1, r7, r5, lsl #2
   125d8:	2224      	movs	r2, #36	; 0x24
   125da:	4638      	mov	r0, r7
   125dc:	f00b f93e 	bl	1d85c <memcpy>
   125e0:	2302      	movs	r3, #2
   125e2:	703b      	strb	r3, [r7, #0]
   125e4:	6833      	ldr	r3, [r6, #0]
   125e6:	4620      	mov	r0, r4
   125e8:	0c1b      	lsrs	r3, r3, #16
   125ea:	041b      	lsls	r3, r3, #16
   125ec:	f043 030b 	orr.w	r3, r3, #11
   125f0:	6033      	str	r3, [r6, #0]
   125f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   125f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   125fa:	210c      	movs	r1, #12
   125fc:	f003 f908 	bl	15810 <ip_interface_wait>
   12600:	4604      	mov	r4, r0
   12602:	2800      	cmp	r0, #0
   12604:	d0d5      	beq.n	125b2 <tls_interface_accept+0x2e>
   12606:	2000      	movs	r0, #0
   12608:	f003 f9da 	bl	159c0 <ip_interface_close>
   1260c:	e7cf      	b.n	125ae <tls_interface_accept+0x2a>
   1260e:	2409      	movs	r4, #9
   12610:	4620      	mov	r0, r4
   12612:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12616:	f7fd f847 	bl	f6a8 <bsd_os_errno_set>
   1261a:	4620      	mov	r0, r4
   1261c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1261e:	bf00      	nop
   12620:	200206ec 	.word	0x200206ec

00012624 <tls_interface_setopt>:
   12624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12628:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   1262c:	9e06      	ldr	r6, [sp, #24]
   1262e:	d11e      	bne.n	1266e <tls_interface_setopt+0x4a>
   12630:	461f      	mov	r7, r3
   12632:	4605      	mov	r5, r0
   12634:	2b00      	cmp	r3, #0
   12636:	f000 808c 	beq.w	12752 <tls_interface_setopt+0x12e>
   1263a:	4690      	mov	r8, r2
   1263c:	f004 fcf8 	bl	17030 <interface_socket_from_handle_get>
   12640:	2800      	cmp	r0, #0
   12642:	d07b      	beq.n	1273c <tls_interface_setopt+0x118>
   12644:	6804      	ldr	r4, [r0, #0]
   12646:	b2a4      	uxth	r4, r4
   12648:	2c02      	cmp	r4, #2
   1264a:	d007      	beq.n	1265c <tls_interface_setopt+0x38>
   1264c:	6803      	ldr	r3, [r0, #0]
   1264e:	b29b      	uxth	r3, r3
   12650:	2b04      	cmp	r3, #4
   12652:	d003      	beq.n	1265c <tls_interface_setopt+0x38>
   12654:	6803      	ldr	r3, [r0, #0]
   12656:	b29b      	uxth	r3, r3
   12658:	2b05      	cmp	r3, #5
   1265a:	d16f      	bne.n	1273c <tls_interface_setopt+0x118>
   1265c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
   12660:	2a04      	cmp	r2, #4
   12662:	d87c      	bhi.n	1275e <tls_interface_setopt+0x13a>
   12664:	e8df f002 	tbb	[pc, r2]
   12668:	41324e24 	.word	0x41324e24
   1266c:	07          	.byte	0x07
   1266d:	00          	.byte	0x00
   1266e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12672:	f003 bf69 	b.w	16548 <ip_interface_setopt>
   12676:	4c3b      	ldr	r4, [pc, #236]	; (12764 <tls_interface_setopt+0x140>)
   12678:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   1267c:	b138      	cbz	r0, 1268e <tls_interface_setopt+0x6a>
   1267e:	f7ff fc3d 	bl	11efc <nrf_free>
   12682:	2200      	movs	r2, #0
   12684:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   12688:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   1268c:	605a      	str	r2, [r3, #4]
   1268e:	4630      	mov	r0, r6
   12690:	b34e      	cbz	r6, 126e6 <tls_interface_setopt+0xc2>
   12692:	f7ff fc29 	bl	11ee8 <nrf_malloc>
   12696:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   1269a:	2800      	cmp	r0, #0
   1269c:	d057      	beq.n	1274e <tls_interface_setopt+0x12a>
   1269e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   126a2:	4632      	mov	r2, r6
   126a4:	4639      	mov	r1, r7
   126a6:	6066      	str	r6, [r4, #4]
   126a8:	f00b f8d8 	bl	1d85c <memcpy>
   126ac:	2000      	movs	r0, #0
   126ae:	e01a      	b.n	126e6 <tls_interface_setopt+0xc2>
   126b0:	2e04      	cmp	r6, #4
   126b2:	d14a      	bne.n	1274a <tls_interface_setopt+0x126>
   126b4:	6838      	ldr	r0, [r7, #0]
   126b6:	2800      	cmp	r0, #0
   126b8:	d039      	beq.n	1272e <tls_interface_setopt+0x10a>
   126ba:	2801      	cmp	r0, #1
   126bc:	d145      	bne.n	1274a <tls_interface_setopt+0x126>
   126be:	4a2a      	ldr	r2, [pc, #168]	; (12768 <tls_interface_setopt+0x144>)
   126c0:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   126c4:	f802 0024 	strb.w	r0, [r2, r4, lsl #2]
   126c8:	2000      	movs	r0, #0
   126ca:	e00c      	b.n	126e6 <tls_interface_setopt+0xc2>
   126cc:	2e01      	cmp	r6, #1
   126ce:	d13c      	bne.n	1274a <tls_interface_setopt+0x126>
   126d0:	783a      	ldrb	r2, [r7, #0]
   126d2:	2000      	movs	r0, #0
   126d4:	3200      	adds	r2, #0
   126d6:	bf18      	it	ne
   126d8:	2201      	movne	r2, #1
   126da:	4b23      	ldr	r3, [pc, #140]	; (12768 <tls_interface_setopt+0x144>)
   126dc:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   126e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   126e4:	7062      	strb	r2, [r4, #1]
   126e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   126ea:	2e04      	cmp	r6, #4
   126ec:	d12d      	bne.n	1274a <tls_interface_setopt+0x126>
   126ee:	683a      	ldr	r2, [r7, #0]
   126f0:	2a02      	cmp	r2, #2
   126f2:	d82a      	bhi.n	1274a <tls_interface_setopt+0x126>
   126f4:	4b1c      	ldr	r3, [pc, #112]	; (12768 <tls_interface_setopt+0x144>)
   126f6:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   126fa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   126fe:	70a2      	strb	r2, [r4, #2]
   12700:	2000      	movs	r0, #0
   12702:	e7f0      	b.n	126e6 <tls_interface_setopt+0xc2>
   12704:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   12708:	d01f      	beq.n	1274a <tls_interface_setopt+0x126>
   1270a:	f016 0403 	ands.w	r4, r6, #3
   1270e:	d11c      	bne.n	1274a <tls_interface_setopt+0x126>
   12710:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   12714:	00ad      	lsls	r5, r5, #2
   12716:	4b14      	ldr	r3, [pc, #80]	; (12768 <tls_interface_setopt+0x144>)
   12718:	1d28      	adds	r0, r5, #4
   1271a:	4418      	add	r0, r3
   1271c:	442b      	add	r3, r5
   1271e:	4632      	mov	r2, r6
   12720:	4639      	mov	r1, r7
   12722:	f883 c003 	strb.w	ip, [r3, #3]
   12726:	f00b f899 	bl	1d85c <memcpy>
   1272a:	4620      	mov	r0, r4
   1272c:	e7db      	b.n	126e6 <tls_interface_setopt+0xc2>
   1272e:	2102      	movs	r1, #2
   12730:	4a0d      	ldr	r2, [pc, #52]	; (12768 <tls_interface_setopt+0x144>)
   12732:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   12736:	f802 1024 	strb.w	r1, [r2, r4, lsl #2]
   1273a:	e7d4      	b.n	126e6 <tls_interface_setopt+0xc2>
   1273c:	2009      	movs	r0, #9
   1273e:	f7fc ffb3 	bl	f6a8 <bsd_os_errno_set>
   12742:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1274a:	2016      	movs	r0, #22
   1274c:	e7f7      	b.n	1273e <tls_interface_setopt+0x11a>
   1274e:	200c      	movs	r0, #12
   12750:	e7f5      	b.n	1273e <tls_interface_setopt+0x11a>
   12752:	200e      	movs	r0, #14
   12754:	f7fc ffa8 	bl	f6a8 <bsd_os_errno_set>
   12758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1275c:	e7c3      	b.n	126e6 <tls_interface_setopt+0xc2>
   1275e:	202a      	movs	r0, #42	; 0x2a
   12760:	e7ed      	b.n	1273e <tls_interface_setopt+0x11a>
   12762:	bf00      	nop
   12764:	20020830 	.word	0x20020830
   12768:	200206ec 	.word	0x200206ec

0001276c <tls_interface_getopt>:
   1276c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12770:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   12774:	9f06      	ldr	r7, [sp, #24]
   12776:	d112      	bne.n	1279e <tls_interface_getopt+0x32>
   12778:	461d      	mov	r5, r3
   1277a:	b16b      	cbz	r3, 12798 <tls_interface_getopt+0x2c>
   1277c:	b167      	cbz	r7, 12798 <tls_interface_getopt+0x2c>
   1277e:	4606      	mov	r6, r0
   12780:	4614      	mov	r4, r2
   12782:	f004 fc55 	bl	17030 <interface_socket_from_handle_get>
   12786:	2800      	cmp	r0, #0
   12788:	d04f      	beq.n	1282a <tls_interface_getopt+0xbe>
   1278a:	3c01      	subs	r4, #1
   1278c:	2c03      	cmp	r4, #3
   1278e:	d852      	bhi.n	12836 <tls_interface_getopt+0xca>
   12790:	e8df f004 	tbb	[pc, r4]
   12794:	09152139 	.word	0x09152139
   12798:	200e      	movs	r0, #14
   1279a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1279e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   127a2:	f003 bf8d 	b.w	166c0 <ip_interface_getopt>
   127a6:	683b      	ldr	r3, [r7, #0]
   127a8:	2b04      	cmp	r3, #4
   127aa:	d13c      	bne.n	12826 <tls_interface_getopt+0xba>
   127ac:	4b23      	ldr	r3, [pc, #140]	; (1283c <tls_interface_getopt+0xd0>)
   127ae:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   127b2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   127b6:	78b3      	ldrb	r3, [r6, #2]
   127b8:	2000      	movs	r0, #0
   127ba:	602b      	str	r3, [r5, #0]
   127bc:	e7ed      	b.n	1279a <tls_interface_getopt+0x2e>
   127be:	683b      	ldr	r3, [r7, #0]
   127c0:	2b01      	cmp	r3, #1
   127c2:	d130      	bne.n	12826 <tls_interface_getopt+0xba>
   127c4:	4b1d      	ldr	r3, [pc, #116]	; (1283c <tls_interface_getopt+0xd0>)
   127c6:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   127ca:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   127ce:	7873      	ldrb	r3, [r6, #1]
   127d0:	2000      	movs	r0, #0
   127d2:	702b      	strb	r3, [r5, #0]
   127d4:	e7e1      	b.n	1279a <tls_interface_getopt+0x2e>
   127d6:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   127da:	4918      	ldr	r1, [pc, #96]	; (1283c <tls_interface_getopt+0xd0>)
   127dc:	683b      	ldr	r3, [r7, #0]
   127de:	00b6      	lsls	r6, r6, #2
   127e0:	198a      	adds	r2, r1, r6
   127e2:	f013 0403 	ands.w	r4, r3, #3
   127e6:	78d0      	ldrb	r0, [r2, #3]
   127e8:	d121      	bne.n	1282e <tls_interface_getopt+0xc2>
   127ea:	089b      	lsrs	r3, r3, #2
   127ec:	4283      	cmp	r3, r0
   127ee:	bf28      	it	cs
   127f0:	4603      	movcs	r3, r0
   127f2:	009a      	lsls	r2, r3, #2
   127f4:	b1db      	cbz	r3, 1282e <tls_interface_getopt+0xc2>
   127f6:	3604      	adds	r6, #4
   127f8:	4431      	add	r1, r6
   127fa:	603a      	str	r2, [r7, #0]
   127fc:	4628      	mov	r0, r5
   127fe:	f00b f82d 	bl	1d85c <memcpy>
   12802:	4620      	mov	r0, r4
   12804:	e7c9      	b.n	1279a <tls_interface_getopt+0x2e>
   12806:	683b      	ldr	r3, [r7, #0]
   12808:	2b04      	cmp	r3, #4
   1280a:	d10c      	bne.n	12826 <tls_interface_getopt+0xba>
   1280c:	4b0b      	ldr	r3, [pc, #44]	; (1283c <tls_interface_getopt+0xd0>)
   1280e:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   12812:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   12816:	2000      	movs	r0, #0
   12818:	f1a3 0301 	sub.w	r3, r3, #1
   1281c:	fab3 f383 	clz	r3, r3
   12820:	095b      	lsrs	r3, r3, #5
   12822:	602b      	str	r3, [r5, #0]
   12824:	e7b9      	b.n	1279a <tls_interface_getopt+0x2e>
   12826:	2016      	movs	r0, #22
   12828:	e7b7      	b.n	1279a <tls_interface_getopt+0x2e>
   1282a:	2009      	movs	r0, #9
   1282c:	e7b5      	b.n	1279a <tls_interface_getopt+0x2e>
   1282e:	2800      	cmp	r0, #0
   12830:	d1f9      	bne.n	12826 <tls_interface_getopt+0xba>
   12832:	6038      	str	r0, [r7, #0]
   12834:	e7b1      	b.n	1279a <tls_interface_getopt+0x2e>
   12836:	202a      	movs	r0, #42	; 0x2a
   12838:	e7af      	b.n	1279a <tls_interface_getopt+0x2e>
   1283a:	bf00      	nop
   1283c:	200206ec 	.word	0x200206ec

00012840 <tls_rpc_ip_event_handler>:
   12840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12842:	f248 0581 	movw	r5, #32897	; 0x8081
   12846:	42ab      	cmp	r3, r5
   12848:	460c      	mov	r4, r1
   1284a:	d062      	beq.n	12912 <tls_rpc_ip_event_handler+0xd2>
   1284c:	f249 0182 	movw	r1, #36994	; 0x9082
   12850:	428b      	cmp	r3, r1
   12852:	4606      	mov	r6, r0
   12854:	d02e      	beq.n	128b4 <tls_rpc_ip_event_handler+0x74>
   12856:	f248 0102 	movw	r1, #32770	; 0x8002
   1285a:	428b      	cmp	r3, r1
   1285c:	d001      	beq.n	12862 <tls_rpc_ip_event_handler+0x22>
   1285e:	2001      	movs	r0, #1
   12860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12862:	2c00      	cmp	r4, #0
   12864:	d0fb      	beq.n	1285e <tls_rpc_ip_event_handler+0x1e>
   12866:	6963      	ldr	r3, [r4, #20]
   12868:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1286c:	d002      	beq.n	12874 <tls_rpc_ip_event_handler+0x34>
   1286e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   12872:	d1f4      	bne.n	1285e <tls_rpc_ip_event_handler+0x1e>
   12874:	6823      	ldr	r3, [r4, #0]
   12876:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   1287a:	6023      	str	r3, [r4, #0]
   1287c:	6955      	ldr	r5, [r2, #20]
   1287e:	2d00      	cmp	r5, #0
   12880:	d156      	bne.n	12930 <tls_rpc_ip_event_handler+0xf0>
   12882:	6823      	ldr	r3, [r4, #0]
   12884:	0c1b      	lsrs	r3, r3, #16
   12886:	041b      	lsls	r3, r3, #16
   12888:	f043 0305 	orr.w	r3, r3, #5
   1288c:	6023      	str	r3, [r4, #0]
   1288e:	6823      	ldr	r3, [r4, #0]
   12890:	00da      	lsls	r2, r3, #3
   12892:	d50d      	bpl.n	128b0 <tls_rpc_ip_event_handler+0x70>
   12894:	4b2b      	ldr	r3, [pc, #172]	; (12944 <tls_rpc_ip_event_handler+0x104>)
   12896:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   1289a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1289e:	2b02      	cmp	r3, #2
   128a0:	d106      	bne.n	128b0 <tls_rpc_ip_event_handler+0x70>
   128a2:	4630      	mov	r0, r6
   128a4:	4621      	mov	r1, r4
   128a6:	f7ff fb91 	bl	11fcc <secure_client_socket>
   128aa:	b108      	cbz	r0, 128b0 <tls_rpc_ip_event_handler+0x70>
   128ac:	2873      	cmp	r0, #115	; 0x73
   128ae:	d142      	bne.n	12936 <tls_rpc_ip_event_handler+0xf6>
   128b0:	2000      	movs	r0, #0
   128b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   128b4:	2c00      	cmp	r4, #0
   128b6:	d0fb      	beq.n	128b0 <tls_rpc_ip_event_handler+0x70>
   128b8:	6823      	ldr	r3, [r4, #0]
   128ba:	b29b      	uxth	r3, r3
   128bc:	2b0b      	cmp	r3, #11
   128be:	d1f7      	bne.n	128b0 <tls_rpc_ip_event_handler+0x70>
   128c0:	6915      	ldr	r5, [r2, #16]
   128c2:	2d00      	cmp	r5, #0
   128c4:	d134      	bne.n	12930 <tls_rpc_ip_event_handler+0xf0>
   128c6:	6823      	ldr	r3, [r4, #0]
   128c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   128cc:	6023      	str	r3, [r4, #0]
   128ce:	6823      	ldr	r3, [r4, #0]
   128d0:	00db      	lsls	r3, r3, #3
   128d2:	d5ed      	bpl.n	128b0 <tls_rpc_ip_event_handler+0x70>
   128d4:	4f1c      	ldr	r7, [pc, #112]	; (12948 <tls_rpc_ip_event_handler+0x108>)
   128d6:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   128da:	b130      	cbz	r0, 128ea <tls_rpc_ip_event_handler+0xaa>
   128dc:	f7ff fb0e 	bl	11efc <nrf_free>
   128e0:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   128e4:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   128e8:	605d      	str	r5, [r3, #4]
   128ea:	6823      	ldr	r3, [r4, #0]
   128ec:	2000      	movs	r0, #0
   128ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   128f2:	6023      	str	r3, [r4, #0]
   128f4:	6823      	ldr	r3, [r4, #0]
   128f6:	0c1b      	lsrs	r3, r3, #16
   128f8:	041b      	lsls	r3, r3, #16
   128fa:	f043 030c 	orr.w	r3, r3, #12
   128fe:	6023      	str	r3, [r4, #0]
   12900:	6823      	ldr	r3, [r4, #0]
   12902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12906:	6023      	str	r3, [r4, #0]
   12908:	6823      	ldr	r3, [r4, #0]
   1290a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1290e:	6023      	str	r3, [r4, #0]
   12910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12912:	2900      	cmp	r1, #0
   12914:	d0cc      	beq.n	128b0 <tls_rpc_ip_event_handler+0x70>
   12916:	680b      	ldr	r3, [r1, #0]
   12918:	b29b      	uxth	r3, r3
   1291a:	2b0a      	cmp	r3, #10
   1291c:	d1c8      	bne.n	128b0 <tls_rpc_ip_event_handler+0x70>
   1291e:	6950      	ldr	r0, [r2, #20]
   12920:	b938      	cbnz	r0, 12932 <tls_rpc_ip_event_handler+0xf2>
   12922:	680b      	ldr	r3, [r1, #0]
   12924:	0c1b      	lsrs	r3, r3, #16
   12926:	041b      	lsls	r3, r3, #16
   12928:	f043 030b 	orr.w	r3, r3, #11
   1292c:	600b      	str	r3, [r1, #0]
   1292e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12930:	4628      	mov	r0, r5
   12932:	f002 ff2f 	bl	15794 <rpc_error_to_nrf_bsd_error>
   12936:	6060      	str	r0, [r4, #4]
   12938:	6823      	ldr	r3, [r4, #0]
   1293a:	2000      	movs	r0, #0
   1293c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   12940:	6023      	str	r3, [r4, #0]
   12942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12944:	200206ec 	.word	0x200206ec
   12948:	20020830 	.word	0x20020830

0001294c <rpc_dfu_event_handler>:
   1294c:	b508      	push	{r3, lr}
   1294e:	4a08      	ldr	r2, [pc, #32]	; (12970 <rpc_dfu_event_handler+0x24>)
   12950:	68c1      	ldr	r1, [r0, #12]
   12952:	8812      	ldrh	r2, [r2, #0]
   12954:	4603      	mov	r3, r0
   12956:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   1295a:	d005      	beq.n	12968 <rpc_dfu_event_handler+0x1c>
   1295c:	6800      	ldr	r0, [r0, #0]
   1295e:	b110      	cbz	r0, 12966 <rpc_dfu_event_handler+0x1a>
   12960:	f7fe fefc 	bl	1175c <rpc_dfu_client_data_free>
   12964:	2000      	movs	r0, #0
   12966:	bd08      	pop	{r3, pc}
   12968:	4a02      	ldr	r2, [pc, #8]	; (12974 <rpc_dfu_event_handler+0x28>)
   1296a:	2001      	movs	r0, #1
   1296c:	6013      	str	r3, [r2, #0]
   1296e:	bd08      	pop	{r3, pc}
   12970:	20024f26 	.word	0x20024f26
   12974:	2002087c 	.word	0x2002087c

00012978 <mfu_interface_init>:
   12978:	2300      	movs	r3, #0
   1297a:	b510      	push	{r4, lr}
   1297c:	4808      	ldr	r0, [pc, #32]	; (129a0 <mfu_interface_init+0x28>)
   1297e:	4909      	ldr	r1, [pc, #36]	; (129a4 <mfu_interface_init+0x2c>)
   12980:	4a09      	ldr	r2, [pc, #36]	; (129a8 <mfu_interface_init+0x30>)
   12982:	4c0a      	ldr	r4, [pc, #40]	; (129ac <mfu_interface_init+0x34>)
   12984:	8003      	strh	r3, [r0, #0]
   12986:	600b      	str	r3, [r1, #0]
   12988:	6013      	str	r3, [r2, #0]
   1298a:	6023      	str	r3, [r4, #0]
   1298c:	f7fe feb0 	bl	116f0 <rpc_dfu_client_init>
   12990:	b910      	cbnz	r0, 12998 <mfu_interface_init+0x20>
   12992:	2301      	movs	r3, #1
   12994:	6023      	str	r3, [r4, #0]
   12996:	bd10      	pop	{r4, pc}
   12998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1299c:	bd10      	pop	{r4, pc}
   1299e:	bf00      	nop
   129a0:	20024f26 	.word	0x20024f26
   129a4:	2002087c 	.word	0x2002087c
   129a8:	20020878 	.word	0x20020878
   129ac:	20020870 	.word	0x20020870

000129b0 <mfu_interface_open>:
   129b0:	2801      	cmp	r0, #1
   129b2:	b508      	push	{r3, lr}
   129b4:	d10b      	bne.n	129ce <mfu_interface_open+0x1e>
   129b6:	f240 2303 	movw	r3, #515	; 0x203
   129ba:	429a      	cmp	r2, r3
   129bc:	d107      	bne.n	129ce <mfu_interface_open+0x1e>
   129be:	4b09      	ldr	r3, [pc, #36]	; (129e4 <mfu_interface_open+0x34>)
   129c0:	681a      	ldr	r2, [r3, #0]
   129c2:	2a01      	cmp	r2, #1
   129c4:	d109      	bne.n	129da <mfu_interface_open+0x2a>
   129c6:	2202      	movs	r2, #2
   129c8:	601a      	str	r2, [r3, #0]
   129ca:	4807      	ldr	r0, [pc, #28]	; (129e8 <mfu_interface_open+0x38>)
   129cc:	bd08      	pop	{r3, pc}
   129ce:	2016      	movs	r0, #22
   129d0:	f7fc fe6a 	bl	f6a8 <bsd_os_errno_set>
   129d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   129d8:	bd08      	pop	{r3, pc}
   129da:	f7fc fe65 	bl	f6a8 <bsd_os_errno_set>
   129de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   129e2:	bd08      	pop	{r3, pc}
   129e4:	20020870 	.word	0x20020870
   129e8:	49765432 	.word	0x49765432

000129ec <mfu_interface_close>:
   129ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   129ee:	4c32      	ldr	r4, [pc, #200]	; (12ab8 <mfu_interface_close+0xcc>)
   129f0:	b083      	sub	sp, #12
   129f2:	6823      	ldr	r3, [r4, #0]
   129f4:	1e9a      	subs	r2, r3, #2
   129f6:	2a01      	cmp	r2, #1
   129f8:	d857      	bhi.n	12aaa <mfu_interface_close+0xbe>
   129fa:	2b03      	cmp	r3, #3
   129fc:	d004      	beq.n	12a08 <mfu_interface_close+0x1c>
   129fe:	2301      	movs	r3, #1
   12a00:	2000      	movs	r0, #0
   12a02:	6023      	str	r3, [r4, #0]
   12a04:	b003      	add	sp, #12
   12a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12a08:	2100      	movs	r1, #0
   12a0a:	4668      	mov	r0, sp
   12a0c:	f7fe fe76 	bl	116fc <rpc_dfu_client_request_alloc>
   12a10:	4603      	mov	r3, r0
   12a12:	2800      	cmp	r0, #0
   12a14:	d13d      	bne.n	12a92 <mfu_interface_close+0xa6>
   12a16:	2104      	movs	r1, #4
   12a18:	4e28      	ldr	r6, [pc, #160]	; (12abc <mfu_interface_close+0xd0>)
   12a1a:	9800      	ldr	r0, [sp, #0]
   12a1c:	8832      	ldrh	r2, [r6, #0]
   12a1e:	7201      	strb	r1, [r0, #8]
   12a20:	3201      	adds	r2, #1
   12a22:	b292      	uxth	r2, r2
   12a24:	0411      	lsls	r1, r2, #16
   12a26:	f041 0106 	orr.w	r1, r1, #6
   12a2a:	4d25      	ldr	r5, [pc, #148]	; (12ac0 <mfu_interface_close+0xd4>)
   12a2c:	60c1      	str	r1, [r0, #12]
   12a2e:	7103      	strb	r3, [r0, #4]
   12a30:	7143      	strb	r3, [r0, #5]
   12a32:	7183      	strb	r3, [r0, #6]
   12a34:	71c3      	strb	r3, [r0, #7]
   12a36:	7243      	strb	r3, [r0, #9]
   12a38:	7283      	strb	r3, [r0, #10]
   12a3a:	72c3      	strb	r3, [r0, #11]
   12a3c:	2106      	movs	r1, #6
   12a3e:	8032      	strh	r2, [r6, #0]
   12a40:	602b      	str	r3, [r5, #0]
   12a42:	f7fe fe6f 	bl	11724 <rpc_dfu_client_request_send>
   12a46:	b9d8      	cbnz	r0, 12a80 <mfu_interface_close+0x94>
   12a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12a4c:	ae02      	add	r6, sp, #8
   12a4e:	4627      	mov	r7, r4
   12a50:	f846 3d04 	str.w	r3, [r6, #-4]!
   12a54:	e004      	b.n	12a60 <mfu_interface_close+0x74>
   12a56:	4631      	mov	r1, r6
   12a58:	4638      	mov	r0, r7
   12a5a:	f7fc fd91 	bl	f580 <bsd_os_timedwait>
   12a5e:	b9f0      	cbnz	r0, 12a9e <mfu_interface_close+0xb2>
   12a60:	6828      	ldr	r0, [r5, #0]
   12a62:	2800      	cmp	r0, #0
   12a64:	d0f7      	beq.n	12a56 <mfu_interface_close+0x6a>
   12a66:	6905      	ldr	r5, [r0, #16]
   12a68:	f7fe fe70 	bl	1174c <rpc_dfu_client_message_free>
   12a6c:	2d00      	cmp	r5, #0
   12a6e:	d0c6      	beq.n	129fe <mfu_interface_close+0x12>
   12a70:	4b14      	ldr	r3, [pc, #80]	; (12ac4 <mfu_interface_close+0xd8>)
   12a72:	2008      	movs	r0, #8
   12a74:	601d      	str	r5, [r3, #0]
   12a76:	f7fc fe17 	bl	f6a8 <bsd_os_errno_set>
   12a7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12a7e:	e7c1      	b.n	12a04 <mfu_interface_close+0x18>
   12a80:	9800      	ldr	r0, [sp, #0]
   12a82:	6803      	ldr	r3, [r0, #0]
   12a84:	b11b      	cbz	r3, 12a8e <mfu_interface_close+0xa2>
   12a86:	4618      	mov	r0, r3
   12a88:	f7fe fe68 	bl	1175c <rpc_dfu_client_data_free>
   12a8c:	9800      	ldr	r0, [sp, #0]
   12a8e:	f7fe fe5d 	bl	1174c <rpc_dfu_client_message_free>
   12a92:	200c      	movs	r0, #12
   12a94:	f7fc fe08 	bl	f6a8 <bsd_os_errno_set>
   12a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12a9c:	e7b2      	b.n	12a04 <mfu_interface_close+0x18>
   12a9e:	203c      	movs	r0, #60	; 0x3c
   12aa0:	f7fc fe02 	bl	f6a8 <bsd_os_errno_set>
   12aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12aa8:	e7ac      	b.n	12a04 <mfu_interface_close+0x18>
   12aaa:	2001      	movs	r0, #1
   12aac:	f7fc fdfc 	bl	f6a8 <bsd_os_errno_set>
   12ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12ab4:	e7a6      	b.n	12a04 <mfu_interface_close+0x18>
   12ab6:	bf00      	nop
   12ab8:	20020870 	.word	0x20020870
   12abc:	20024f26 	.word	0x20024f26
   12ac0:	2002087c 	.word	0x2002087c
   12ac4:	20020874 	.word	0x20020874

00012ac8 <mfu_interface_sendto>:
   12ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12acc:	4e5a      	ldr	r6, [pc, #360]	; (12c38 <mfu_interface_sendto+0x170>)
   12ace:	4615      	mov	r5, r2
   12ad0:	6833      	ldr	r3, [r6, #0]
   12ad2:	b082      	sub	sp, #8
   12ad4:	1e9a      	subs	r2, r3, #2
   12ad6:	2a01      	cmp	r2, #1
   12ad8:	f200 80a7 	bhi.w	12c2a <mfu_interface_sendto+0x162>
   12adc:	460f      	mov	r7, r1
   12ade:	2900      	cmp	r1, #0
   12ae0:	f000 809d 	beq.w	12c1e <mfu_interface_sendto+0x156>
   12ae4:	2d00      	cmp	r5, #0
   12ae6:	f000 809a 	beq.w	12c1e <mfu_interface_sendto+0x156>
   12aea:	2b02      	cmp	r3, #2
   12aec:	46e8      	mov	r8, sp
   12aee:	d04e      	beq.n	12b8e <mfu_interface_sendto+0xc6>
   12af0:	4640      	mov	r0, r8
   12af2:	4629      	mov	r1, r5
   12af4:	f7fe fe02 	bl	116fc <rpc_dfu_client_request_alloc>
   12af8:	4606      	mov	r6, r0
   12afa:	b140      	cbz	r0, 12b0e <mfu_interface_sendto+0x46>
   12afc:	200c      	movs	r0, #12
   12afe:	f7fc fdd3 	bl	f6a8 <bsd_os_errno_set>
   12b02:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12b06:	4628      	mov	r0, r5
   12b08:	b002      	add	sp, #8
   12b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12b0e:	9b00      	ldr	r3, [sp, #0]
   12b10:	4639      	mov	r1, r7
   12b12:	6818      	ldr	r0, [r3, #0]
   12b14:	462a      	mov	r2, r5
   12b16:	f00a fea1 	bl	1d85c <memcpy>
   12b1a:	2104      	movs	r1, #4
   12b1c:	4c47      	ldr	r4, [pc, #284]	; (12c3c <mfu_interface_sendto+0x174>)
   12b1e:	9800      	ldr	r0, [sp, #0]
   12b20:	8823      	ldrh	r3, [r4, #0]
   12b22:	6045      	str	r5, [r0, #4]
   12b24:	3301      	adds	r3, #1
   12b26:	b29b      	uxth	r3, r3
   12b28:	041a      	lsls	r2, r3, #16
   12b2a:	8023      	strh	r3, [r4, #0]
   12b2c:	430a      	orrs	r2, r1
   12b2e:	4c44      	ldr	r4, [pc, #272]	; (12c40 <mfu_interface_sendto+0x178>)
   12b30:	60c2      	str	r2, [r0, #12]
   12b32:	7246      	strb	r6, [r0, #9]
   12b34:	7286      	strb	r6, [r0, #10]
   12b36:	72c6      	strb	r6, [r0, #11]
   12b38:	7201      	strb	r1, [r0, #8]
   12b3a:	6026      	str	r6, [r4, #0]
   12b3c:	f7fe fdf2 	bl	11724 <rpc_dfu_client_request_send>
   12b40:	2800      	cmp	r0, #0
   12b42:	d162      	bne.n	12c0a <mfu_interface_sendto+0x142>
   12b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12b48:	ae02      	add	r6, sp, #8
   12b4a:	4f3b      	ldr	r7, [pc, #236]	; (12c38 <mfu_interface_sendto+0x170>)
   12b4c:	f846 3d04 	str.w	r3, [r6, #-4]!
   12b50:	e004      	b.n	12b5c <mfu_interface_sendto+0x94>
   12b52:	4631      	mov	r1, r6
   12b54:	4638      	mov	r0, r7
   12b56:	f7fc fd13 	bl	f580 <bsd_os_timedwait>
   12b5a:	b978      	cbnz	r0, 12b7c <mfu_interface_sendto+0xb4>
   12b5c:	6820      	ldr	r0, [r4, #0]
   12b5e:	2800      	cmp	r0, #0
   12b60:	d0f7      	beq.n	12b52 <mfu_interface_sendto+0x8a>
   12b62:	6904      	ldr	r4, [r0, #16]
   12b64:	f7fe fdf2 	bl	1174c <rpc_dfu_client_message_free>
   12b68:	2c00      	cmp	r4, #0
   12b6a:	d0cc      	beq.n	12b06 <mfu_interface_sendto+0x3e>
   12b6c:	4b35      	ldr	r3, [pc, #212]	; (12c44 <mfu_interface_sendto+0x17c>)
   12b6e:	2008      	movs	r0, #8
   12b70:	601c      	str	r4, [r3, #0]
   12b72:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12b76:	f7fc fd97 	bl	f6a8 <bsd_os_errno_set>
   12b7a:	e7c4      	b.n	12b06 <mfu_interface_sendto+0x3e>
   12b7c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12b80:	203c      	movs	r0, #60	; 0x3c
   12b82:	f7fc fd91 	bl	f6a8 <bsd_os_errno_set>
   12b86:	4628      	mov	r0, r5
   12b88:	b002      	add	sp, #8
   12b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12b8e:	4640      	mov	r0, r8
   12b90:	2100      	movs	r1, #0
   12b92:	f7fe fdb3 	bl	116fc <rpc_dfu_client_request_alloc>
   12b96:	4602      	mov	r2, r0
   12b98:	2800      	cmp	r0, #0
   12b9a:	d1af      	bne.n	12afc <mfu_interface_sendto+0x34>
   12b9c:	f04f 0c08 	mov.w	ip, #8
   12ba0:	4926      	ldr	r1, [pc, #152]	; (12c3c <mfu_interface_sendto+0x174>)
   12ba2:	4829      	ldr	r0, [pc, #164]	; (12c48 <mfu_interface_sendto+0x180>)
   12ba4:	880b      	ldrh	r3, [r1, #0]
   12ba6:	6804      	ldr	r4, [r0, #0]
   12ba8:	3301      	adds	r3, #1
   12baa:	9800      	ldr	r0, [sp, #0]
   12bac:	b29b      	uxth	r3, r3
   12bae:	800b      	strh	r3, [r1, #0]
   12bb0:	041b      	lsls	r3, r3, #16
   12bb2:	f043 0303 	orr.w	r3, r3, #3
   12bb6:	6104      	str	r4, [r0, #16]
   12bb8:	4c21      	ldr	r4, [pc, #132]	; (12c40 <mfu_interface_sendto+0x178>)
   12bba:	60c3      	str	r3, [r0, #12]
   12bbc:	7102      	strb	r2, [r0, #4]
   12bbe:	7142      	strb	r2, [r0, #5]
   12bc0:	7182      	strb	r2, [r0, #6]
   12bc2:	71c2      	strb	r2, [r0, #7]
   12bc4:	7242      	strb	r2, [r0, #9]
   12bc6:	7282      	strb	r2, [r0, #10]
   12bc8:	72c2      	strb	r2, [r0, #11]
   12bca:	f880 c008 	strb.w	ip, [r0, #8]
   12bce:	2103      	movs	r1, #3
   12bd0:	6022      	str	r2, [r4, #0]
   12bd2:	f7fe fda7 	bl	11724 <rpc_dfu_client_request_send>
   12bd6:	b9c0      	cbnz	r0, 12c0a <mfu_interface_sendto+0x142>
   12bd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12bdc:	f10d 0908 	add.w	r9, sp, #8
   12be0:	f849 3d04 	str.w	r3, [r9, #-4]!
   12be4:	46b2      	mov	sl, r6
   12be6:	e005      	b.n	12bf4 <mfu_interface_sendto+0x12c>
   12be8:	4649      	mov	r1, r9
   12bea:	4650      	mov	r0, sl
   12bec:	f7fc fcc8 	bl	f580 <bsd_os_timedwait>
   12bf0:	2800      	cmp	r0, #0
   12bf2:	d1c3      	bne.n	12b7c <mfu_interface_sendto+0xb4>
   12bf4:	6820      	ldr	r0, [r4, #0]
   12bf6:	2800      	cmp	r0, #0
   12bf8:	d0f6      	beq.n	12be8 <mfu_interface_sendto+0x120>
   12bfa:	6904      	ldr	r4, [r0, #16]
   12bfc:	f7fe fda6 	bl	1174c <rpc_dfu_client_message_free>
   12c00:	2c00      	cmp	r4, #0
   12c02:	d1b3      	bne.n	12b6c <mfu_interface_sendto+0xa4>
   12c04:	2303      	movs	r3, #3
   12c06:	6033      	str	r3, [r6, #0]
   12c08:	e772      	b.n	12af0 <mfu_interface_sendto+0x28>
   12c0a:	9800      	ldr	r0, [sp, #0]
   12c0c:	6803      	ldr	r3, [r0, #0]
   12c0e:	b11b      	cbz	r3, 12c18 <mfu_interface_sendto+0x150>
   12c10:	4618      	mov	r0, r3
   12c12:	f7fe fda3 	bl	1175c <rpc_dfu_client_data_free>
   12c16:	9800      	ldr	r0, [sp, #0]
   12c18:	f7fe fd98 	bl	1174c <rpc_dfu_client_message_free>
   12c1c:	e76e      	b.n	12afc <mfu_interface_sendto+0x34>
   12c1e:	2016      	movs	r0, #22
   12c20:	f7fc fd42 	bl	f6a8 <bsd_os_errno_set>
   12c24:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12c28:	e76d      	b.n	12b06 <mfu_interface_sendto+0x3e>
   12c2a:	2001      	movs	r0, #1
   12c2c:	f7fc fd3c 	bl	f6a8 <bsd_os_errno_set>
   12c30:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12c34:	e767      	b.n	12b06 <mfu_interface_sendto+0x3e>
   12c36:	bf00      	nop
   12c38:	20020870 	.word	0x20020870
   12c3c:	20024f26 	.word	0x20024f26
   12c40:	2002087c 	.word	0x2002087c
   12c44:	20020874 	.word	0x20020874
   12c48:	20020878 	.word	0x20020878

00012c4c <mfu_interface_setopt>:
   12c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12c4e:	4846      	ldr	r0, [pc, #280]	; (12d68 <mfu_interface_setopt+0x11c>)
   12c50:	b083      	sub	sp, #12
   12c52:	6800      	ldr	r0, [r0, #0]
   12c54:	3802      	subs	r0, #2
   12c56:	2801      	cmp	r0, #1
   12c58:	d877      	bhi.n	12d4a <mfu_interface_setopt+0xfe>
   12c5a:	f240 2003 	movw	r0, #515	; 0x203
   12c5e:	4281      	cmp	r1, r0
   12c60:	d16d      	bne.n	12d3e <mfu_interface_setopt+0xf2>
   12c62:	3a04      	subs	r2, #4
   12c64:	2a03      	cmp	r2, #3
   12c66:	d85c      	bhi.n	12d22 <mfu_interface_setopt+0xd6>
   12c68:	e8df f002 	tbb	[pc, r2]
   12c6c:	514e024b 	.word	0x514e024b
   12c70:	2407      	movs	r4, #7
   12c72:	4625      	mov	r5, r4
   12c74:	2100      	movs	r1, #0
   12c76:	4668      	mov	r0, sp
   12c78:	f7fe fd40 	bl	116fc <rpc_dfu_client_request_alloc>
   12c7c:	4603      	mov	r3, r0
   12c7e:	2800      	cmp	r0, #0
   12c80:	d138      	bne.n	12cf4 <mfu_interface_setopt+0xa8>
   12c82:	2704      	movs	r7, #4
   12c84:	4e39      	ldr	r6, [pc, #228]	; (12d6c <mfu_interface_setopt+0x120>)
   12c86:	9800      	ldr	r0, [sp, #0]
   12c88:	8832      	ldrh	r2, [r6, #0]
   12c8a:	4629      	mov	r1, r5
   12c8c:	3201      	adds	r2, #1
   12c8e:	b292      	uxth	r2, r2
   12c90:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   12c94:	4c36      	ldr	r4, [pc, #216]	; (12d70 <mfu_interface_setopt+0x124>)
   12c96:	60c5      	str	r5, [r0, #12]
   12c98:	7103      	strb	r3, [r0, #4]
   12c9a:	7143      	strb	r3, [r0, #5]
   12c9c:	7183      	strb	r3, [r0, #6]
   12c9e:	71c3      	strb	r3, [r0, #7]
   12ca0:	7243      	strb	r3, [r0, #9]
   12ca2:	7283      	strb	r3, [r0, #10]
   12ca4:	72c3      	strb	r3, [r0, #11]
   12ca6:	7207      	strb	r7, [r0, #8]
   12ca8:	8032      	strh	r2, [r6, #0]
   12caa:	6023      	str	r3, [r4, #0]
   12cac:	f7fe fd3a 	bl	11724 <rpc_dfu_client_request_send>
   12cb0:	b9b8      	cbnz	r0, 12ce2 <mfu_interface_setopt+0x96>
   12cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12cb6:	ad02      	add	r5, sp, #8
   12cb8:	4e2b      	ldr	r6, [pc, #172]	; (12d68 <mfu_interface_setopt+0x11c>)
   12cba:	f845 3d04 	str.w	r3, [r5, #-4]!
   12cbe:	e005      	b.n	12ccc <mfu_interface_setopt+0x80>
   12cc0:	4629      	mov	r1, r5
   12cc2:	4630      	mov	r0, r6
   12cc4:	f7fc fc5c 	bl	f580 <bsd_os_timedwait>
   12cc8:	2800      	cmp	r0, #0
   12cca:	d131      	bne.n	12d30 <mfu_interface_setopt+0xe4>
   12ccc:	6820      	ldr	r0, [r4, #0]
   12cce:	2800      	cmp	r0, #0
   12cd0:	d0f6      	beq.n	12cc0 <mfu_interface_setopt+0x74>
   12cd2:	6904      	ldr	r4, [r0, #16]
   12cd4:	f7fe fd3a 	bl	1174c <rpc_dfu_client_message_free>
   12cd8:	2c00      	cmp	r4, #0
   12cda:	d13c      	bne.n	12d56 <mfu_interface_setopt+0x10a>
   12cdc:	4620      	mov	r0, r4
   12cde:	b003      	add	sp, #12
   12ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12ce2:	9800      	ldr	r0, [sp, #0]
   12ce4:	6803      	ldr	r3, [r0, #0]
   12ce6:	b11b      	cbz	r3, 12cf0 <mfu_interface_setopt+0xa4>
   12ce8:	4618      	mov	r0, r3
   12cea:	f7fe fd37 	bl	1175c <rpc_dfu_client_data_free>
   12cee:	9800      	ldr	r0, [sp, #0]
   12cf0:	f7fe fd2c 	bl	1174c <rpc_dfu_client_message_free>
   12cf4:	200c      	movs	r0, #12
   12cf6:	f7fc fcd7 	bl	f6a8 <bsd_os_errno_set>
   12cfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12cfe:	b003      	add	sp, #12
   12d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12d02:	2405      	movs	r4, #5
   12d04:	4625      	mov	r5, r4
   12d06:	e7b5      	b.n	12c74 <mfu_interface_setopt+0x28>
   12d08:	2408      	movs	r4, #8
   12d0a:	4625      	mov	r5, r4
   12d0c:	e7b2      	b.n	12c74 <mfu_interface_setopt+0x28>
   12d0e:	b1b3      	cbz	r3, 12d3e <mfu_interface_setopt+0xf2>
   12d10:	9a08      	ldr	r2, [sp, #32]
   12d12:	2a04      	cmp	r2, #4
   12d14:	d113      	bne.n	12d3e <mfu_interface_setopt+0xf2>
   12d16:	2000      	movs	r0, #0
   12d18:	681a      	ldr	r2, [r3, #0]
   12d1a:	4b16      	ldr	r3, [pc, #88]	; (12d74 <mfu_interface_setopt+0x128>)
   12d1c:	601a      	str	r2, [r3, #0]
   12d1e:	b003      	add	sp, #12
   12d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12d22:	202a      	movs	r0, #42	; 0x2a
   12d24:	f7fc fcc0 	bl	f6a8 <bsd_os_errno_set>
   12d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12d2c:	b003      	add	sp, #12
   12d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12d30:	203c      	movs	r0, #60	; 0x3c
   12d32:	f7fc fcb9 	bl	f6a8 <bsd_os_errno_set>
   12d36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12d3a:	b003      	add	sp, #12
   12d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12d3e:	2016      	movs	r0, #22
   12d40:	f7fc fcb2 	bl	f6a8 <bsd_os_errno_set>
   12d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12d48:	e7c9      	b.n	12cde <mfu_interface_setopt+0x92>
   12d4a:	2001      	movs	r0, #1
   12d4c:	f7fc fcac 	bl	f6a8 <bsd_os_errno_set>
   12d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12d54:	e7c3      	b.n	12cde <mfu_interface_setopt+0x92>
   12d56:	4b08      	ldr	r3, [pc, #32]	; (12d78 <mfu_interface_setopt+0x12c>)
   12d58:	2008      	movs	r0, #8
   12d5a:	601c      	str	r4, [r3, #0]
   12d5c:	f7fc fca4 	bl	f6a8 <bsd_os_errno_set>
   12d60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12d64:	e7bb      	b.n	12cde <mfu_interface_setopt+0x92>
   12d66:	bf00      	nop
   12d68:	20020870 	.word	0x20020870
   12d6c:	20024f26 	.word	0x20024f26
   12d70:	2002087c 	.word	0x2002087c
   12d74:	20020878 	.word	0x20020878
   12d78:	20020874 	.word	0x20020874

00012d7c <mfu_interface_getopt>:
   12d7c:	f240 2003 	movw	r0, #515	; 0x203
   12d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12d84:	4281      	cmp	r1, r0
   12d86:	b082      	sub	sp, #8
   12d88:	9e08      	ldr	r6, [sp, #32]
   12d8a:	f040 80ae 	bne.w	12eea <mfu_interface_getopt+0x16e>
   12d8e:	461d      	mov	r5, r3
   12d90:	2b00      	cmp	r3, #0
   12d92:	f000 80aa 	beq.w	12eea <mfu_interface_getopt+0x16e>
   12d96:	2e00      	cmp	r6, #0
   12d98:	f000 80a7 	beq.w	12eea <mfu_interface_getopt+0x16e>
   12d9c:	4b5e      	ldr	r3, [pc, #376]	; (12f18 <mfu_interface_getopt+0x19c>)
   12d9e:	681b      	ldr	r3, [r3, #0]
   12da0:	3b02      	subs	r3, #2
   12da2:	2b01      	cmp	r3, #1
   12da4:	f200 80a7 	bhi.w	12ef6 <mfu_interface_getopt+0x17a>
   12da8:	3a01      	subs	r2, #1
   12daa:	2a13      	cmp	r2, #19
   12dac:	d879      	bhi.n	12ea2 <mfu_interface_getopt+0x126>
   12dae:	e8df f002 	tbb	[pc, r2]
   12db2:	5f17      	.short	0x5f17
   12db4:	78787878 	.word	0x78787878
   12db8:	78787872 	.word	0x78787872
   12dbc:	78787878 	.word	0x78787878
   12dc0:	78787878 	.word	0x78787878
   12dc4:	0a78      	.short	0x0a78
   12dc6:	6833      	ldr	r3, [r6, #0]
   12dc8:	2b04      	cmp	r3, #4
   12dca:	f040 808e 	bne.w	12eea <mfu_interface_getopt+0x16e>
   12dce:	2200      	movs	r2, #0
   12dd0:	4610      	mov	r0, r2
   12dd2:	4b52      	ldr	r3, [pc, #328]	; (12f1c <mfu_interface_getopt+0x1a0>)
   12dd4:	6819      	ldr	r1, [r3, #0]
   12dd6:	601a      	str	r2, [r3, #0]
   12dd8:	6029      	str	r1, [r5, #0]
   12dda:	b002      	add	sp, #8
   12ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12de0:	6833      	ldr	r3, [r6, #0]
   12de2:	2b24      	cmp	r3, #36	; 0x24
   12de4:	f040 8081 	bne.w	12eea <mfu_interface_getopt+0x16e>
   12de8:	2401      	movs	r4, #1
   12dea:	46a0      	mov	r8, r4
   12dec:	2100      	movs	r1, #0
   12dee:	4668      	mov	r0, sp
   12df0:	f7fe fc84 	bl	116fc <rpc_dfu_client_request_alloc>
   12df4:	2800      	cmp	r0, #0
   12df6:	d146      	bne.n	12e86 <mfu_interface_getopt+0x10a>
   12df8:	4949      	ldr	r1, [pc, #292]	; (12f20 <mfu_interface_getopt+0x1a4>)
   12dfa:	9b00      	ldr	r3, [sp, #0]
   12dfc:	880a      	ldrh	r2, [r1, #0]
   12dfe:	f1b8 0f03 	cmp.w	r8, #3
   12e02:	f102 0201 	add.w	r2, r2, #1
   12e06:	b292      	uxth	r2, r2
   12e08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   12e0c:	7118      	strb	r0, [r3, #4]
   12e0e:	800a      	strh	r2, [r1, #0]
   12e10:	60dc      	str	r4, [r3, #12]
   12e12:	7158      	strb	r0, [r3, #5]
   12e14:	7198      	strb	r0, [r3, #6]
   12e16:	71d8      	strb	r0, [r3, #7]
   12e18:	d04b      	beq.n	12eb2 <mfu_interface_getopt+0x136>
   12e1a:	2104      	movs	r1, #4
   12e1c:	2200      	movs	r2, #0
   12e1e:	4f41      	ldr	r7, [pc, #260]	; (12f24 <mfu_interface_getopt+0x1a8>)
   12e20:	6099      	str	r1, [r3, #8]
   12e22:	4618      	mov	r0, r3
   12e24:	4641      	mov	r1, r8
   12e26:	603a      	str	r2, [r7, #0]
   12e28:	f7fe fc7c 	bl	11724 <rpc_dfu_client_request_send>
   12e2c:	2800      	cmp	r0, #0
   12e2e:	d14d      	bne.n	12ecc <mfu_interface_getopt+0x150>
   12e30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12e34:	ac02      	add	r4, sp, #8
   12e36:	f844 3d04 	str.w	r3, [r4, #-4]!
   12e3a:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 12f18 <mfu_interface_getopt+0x19c>
   12e3e:	e005      	b.n	12e4c <mfu_interface_getopt+0xd0>
   12e40:	4621      	mov	r1, r4
   12e42:	4640      	mov	r0, r8
   12e44:	f7fc fb9c 	bl	f580 <bsd_os_timedwait>
   12e48:	2800      	cmp	r0, #0
   12e4a:	d137      	bne.n	12ebc <mfu_interface_getopt+0x140>
   12e4c:	6839      	ldr	r1, [r7, #0]
   12e4e:	2900      	cmp	r1, #0
   12e50:	d0f6      	beq.n	12e40 <mfu_interface_getopt+0xc4>
   12e52:	690c      	ldr	r4, [r1, #16]
   12e54:	2c00      	cmp	r4, #0
   12e56:	d154      	bne.n	12f02 <mfu_interface_getopt+0x186>
   12e58:	6832      	ldr	r2, [r6, #0]
   12e5a:	3114      	adds	r1, #20
   12e5c:	4628      	mov	r0, r5
   12e5e:	f00a fcfd 	bl	1d85c <memcpy>
   12e62:	6838      	ldr	r0, [r7, #0]
   12e64:	f7fe fc72 	bl	1174c <rpc_dfu_client_message_free>
   12e68:	4620      	mov	r0, r4
   12e6a:	b002      	add	sp, #8
   12e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12e70:	6833      	ldr	r3, [r6, #0]
   12e72:	2b04      	cmp	r3, #4
   12e74:	d139      	bne.n	12eea <mfu_interface_getopt+0x16e>
   12e76:	2402      	movs	r4, #2
   12e78:	2100      	movs	r1, #0
   12e7a:	4668      	mov	r0, sp
   12e7c:	46a0      	mov	r8, r4
   12e7e:	f7fe fc3d 	bl	116fc <rpc_dfu_client_request_alloc>
   12e82:	2800      	cmp	r0, #0
   12e84:	d0b8      	beq.n	12df8 <mfu_interface_getopt+0x7c>
   12e86:	200c      	movs	r0, #12
   12e88:	f7fc fc0e 	bl	f6a8 <bsd_os_errno_set>
   12e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12e90:	b002      	add	sp, #8
   12e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12e96:	6833      	ldr	r3, [r6, #0]
   12e98:	2b04      	cmp	r3, #4
   12e9a:	d126      	bne.n	12eea <mfu_interface_getopt+0x16e>
   12e9c:	2409      	movs	r4, #9
   12e9e:	46a0      	mov	r8, r4
   12ea0:	e7a4      	b.n	12dec <mfu_interface_getopt+0x70>
   12ea2:	202a      	movs	r0, #42	; 0x2a
   12ea4:	f7fc fc00 	bl	f6a8 <bsd_os_errno_set>
   12ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12eac:	b002      	add	sp, #8
   12eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12eb2:	4a1d      	ldr	r2, [pc, #116]	; (12f28 <mfu_interface_getopt+0x1ac>)
   12eb4:	2108      	movs	r1, #8
   12eb6:	6812      	ldr	r2, [r2, #0]
   12eb8:	611a      	str	r2, [r3, #16]
   12eba:	e7af      	b.n	12e1c <mfu_interface_getopt+0xa0>
   12ebc:	203c      	movs	r0, #60	; 0x3c
   12ebe:	f7fc fbf3 	bl	f6a8 <bsd_os_errno_set>
   12ec2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12ec6:	b002      	add	sp, #8
   12ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12ecc:	9800      	ldr	r0, [sp, #0]
   12ece:	6803      	ldr	r3, [r0, #0]
   12ed0:	b11b      	cbz	r3, 12eda <mfu_interface_getopt+0x15e>
   12ed2:	4618      	mov	r0, r3
   12ed4:	f7fe fc42 	bl	1175c <rpc_dfu_client_data_free>
   12ed8:	9800      	ldr	r0, [sp, #0]
   12eda:	f7fe fc37 	bl	1174c <rpc_dfu_client_message_free>
   12ede:	200c      	movs	r0, #12
   12ee0:	f7fc fbe2 	bl	f6a8 <bsd_os_errno_set>
   12ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12ee8:	e7d2      	b.n	12e90 <mfu_interface_getopt+0x114>
   12eea:	2016      	movs	r0, #22
   12eec:	f7fc fbdc 	bl	f6a8 <bsd_os_errno_set>
   12ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12ef4:	e771      	b.n	12dda <mfu_interface_getopt+0x5e>
   12ef6:	2001      	movs	r0, #1
   12ef8:	f7fc fbd6 	bl	f6a8 <bsd_os_errno_set>
   12efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12f00:	e76b      	b.n	12dda <mfu_interface_getopt+0x5e>
   12f02:	4b06      	ldr	r3, [pc, #24]	; (12f1c <mfu_interface_getopt+0x1a0>)
   12f04:	2008      	movs	r0, #8
   12f06:	601c      	str	r4, [r3, #0]
   12f08:	f7fc fbce 	bl	f6a8 <bsd_os_errno_set>
   12f0c:	6838      	ldr	r0, [r7, #0]
   12f0e:	f7fe fc1d 	bl	1174c <rpc_dfu_client_message_free>
   12f12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12f16:	e760      	b.n	12dda <mfu_interface_getopt+0x5e>
   12f18:	20020870 	.word	0x20020870
   12f1c:	20020874 	.word	0x20020874
   12f20:	20024f26 	.word	0x20024f26
   12f24:	2002087c 	.word	0x2002087c
   12f28:	20020878 	.word	0x20020878

00012f2c <bsd_recoverable_error_handler>:
   12f2c:	4770      	bx	lr
   12f2e:	bf00      	nop

00012f30 <bsd_platform_error_handler>:
   12f30:	b508      	push	{r3, lr}
   12f32:	f7ff fffb 	bl	12f2c <bsd_recoverable_error_handler>
   12f36:	bd08      	pop	{r3, pc}

00012f38 <bsd_init>:
   12f38:	b510      	push	{r4, lr}
   12f3a:	4c06      	ldr	r4, [pc, #24]	; (12f54 <bsd_init+0x1c>)
   12f3c:	7823      	ldrb	r3, [r4, #0]
   12f3e:	b92b      	cbnz	r3, 12f4c <bsd_init+0x14>
   12f40:	f000 f818 	bl	12f74 <bsd_platform_init>
   12f44:	b908      	cbnz	r0, 12f4a <bsd_init+0x12>
   12f46:	2301      	movs	r3, #1
   12f48:	7023      	strb	r3, [r4, #0]
   12f4a:	bd10      	pop	{r4, pc}
   12f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12f50:	bd10      	pop	{r4, pc}
   12f52:	bf00      	nop
   12f54:	20024f38 	.word	0x20024f38

00012f58 <unimplemented_method>:
   12f58:	b40f      	push	{r0, r1, r2, r3}
   12f5a:	b508      	push	{r3, lr}
   12f5c:	202d      	movs	r0, #45	; 0x2d
   12f5e:	f7fc fba3 	bl	f6a8 <bsd_os_errno_set>
   12f62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   12f66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12f6a:	b004      	add	sp, #16
   12f6c:	4770      	bx	lr
   12f6e:	bf00      	nop

00012f70 <rpc_transport_ipc_fault_handler>:
   12f70:	f7ff bfde 	b.w	12f30 <bsd_platform_error_handler>

00012f74 <bsd_platform_init>:
   12f74:	b5f0      	push	{r4, r5, r6, r7, lr}
   12f76:	b093      	sub	sp, #76	; 0x4c
   12f78:	f7fe fe28 	bl	11bcc <nrf_mem_init>
   12f7c:	2800      	cmp	r0, #0
   12f7e:	d14c      	bne.n	1301a <bsd_platform_init+0xa6>
   12f80:	4928      	ldr	r1, [pc, #160]	; (13024 <bsd_platform_init+0xb0>)
   12f82:	a801      	add	r0, sp, #4
   12f84:	f7fe fe96 	bl	11cb4 <nrf_mem_register>
   12f88:	2800      	cmp	r0, #0
   12f8a:	d146      	bne.n	1301a <bsd_platform_init+0xa6>
   12f8c:	f7fc fc5c 	bl	f848 <bsd_os_init>
   12f90:	f004 f974 	bl	1727c <rpc_framework_init>
   12f94:	2800      	cmp	r0, #0
   12f96:	d140      	bne.n	1301a <bsd_platform_init+0xa6>
   12f98:	2320      	movs	r3, #32
   12f9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   12f9e:	2208      	movs	r2, #8
   12fa0:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   12fa4:	4f20      	ldr	r7, [pc, #128]	; (13028 <bsd_platform_init+0xb4>)
   12fa6:	4e21      	ldr	r6, [pc, #132]	; (1302c <bsd_platform_init+0xb8>)
   12fa8:	9303      	str	r3, [sp, #12]
   12faa:	9305      	str	r3, [sp, #20]
   12fac:	9307      	str	r3, [sp, #28]
   12fae:	4d20      	ldr	r5, [pc, #128]	; (13030 <bsd_platform_init+0xbc>)
   12fb0:	9109      	str	r1, [sp, #36]	; 0x24
   12fb2:	910d      	str	r1, [sp, #52]	; 0x34
   12fb4:	4c1f      	ldr	r4, [pc, #124]	; (13034 <bsd_platform_init+0xc0>)
   12fb6:	4920      	ldr	r1, [pc, #128]	; (13038 <bsd_platform_init+0xc4>)
   12fb8:	4b20      	ldr	r3, [pc, #128]	; (1303c <bsd_platform_init+0xc8>)
   12fba:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
   12fbe:	eb0d 0002 	add.w	r0, sp, r2
   12fc2:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   12fc6:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
   12fca:	9702      	str	r7, [sp, #8]
   12fcc:	9604      	str	r6, [sp, #16]
   12fce:	9506      	str	r5, [sp, #24]
   12fd0:	9408      	str	r4, [sp, #32]
   12fd2:	910a      	str	r1, [sp, #40]	; 0x28
   12fd4:	930c      	str	r3, [sp, #48]	; 0x30
   12fd6:	f000 fbdf 	bl	13798 <rpc_transport_ipc_init>
   12fda:	b108      	cbz	r0, 12fe0 <bsd_platform_init+0x6c>
   12fdc:	b013      	add	sp, #76	; 0x4c
   12fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12fe0:	f003 fefa 	bl	16dd8 <interface_init>
   12fe4:	b9c8      	cbnz	r0, 1301a <bsd_platform_init+0xa6>
   12fe6:	f7fe fa37 	bl	11458 <at_interface_init>
   12fea:	b9b0      	cbnz	r0, 1301a <bsd_platform_init+0xa6>
   12fec:	f002 fc24 	bl	15838 <ip_interface_init>
   12ff0:	b998      	cbnz	r0, 1301a <bsd_platform_init+0xa6>
   12ff2:	f7ff f881 	bl	120f8 <tls_interface_init>
   12ff6:	b980      	cbnz	r0, 1301a <bsd_platform_init+0xa6>
   12ff8:	f7ff fcbe 	bl	12978 <mfu_interface_init>
   12ffc:	b968      	cbnz	r0, 1301a <bsd_platform_init+0xa6>
   12ffe:	f001 f9df 	bl	143c0 <pdn_interface_init>
   13002:	b950      	cbnz	r0, 1301a <bsd_platform_init+0xa6>
   13004:	f005 fc04 	bl	18810 <gnss_interface_init>
   13008:	b938      	cbnz	r0, 1301a <bsd_platform_init+0xa6>
   1300a:	f7fd fee7 	bl	10ddc <logobj_interface_init>
   1300e:	3000      	adds	r0, #0
   13010:	bf18      	it	ne
   13012:	2001      	movne	r0, #1
   13014:	4240      	negs	r0, r0
   13016:	b013      	add	sp, #76	; 0x4c
   13018:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1301a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1301e:	b013      	add	sp, #76	; 0x4c
   13020:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13022:	bf00      	nop
   13024:	0001f0a0 	.word	0x0001f0a0
   13028:	20010000 	.word	0x20010000
   1302c:	20010040 	.word	0x20010040
   13030:	20010020 	.word	0x20010020
   13034:	20017060 	.word	0x20017060
   13038:	20010060 	.word	0x20010060
   1303c:	20013060 	.word	0x20013060

00013040 <bsd_platform_af_method_table_get>:
   13040:	2805      	cmp	r0, #5
   13042:	d02a      	beq.n	1309a <bsd_platform_af_method_table_get+0x5a>
   13044:	b508      	push	{r3, lr}
   13046:	d914      	bls.n	13072 <bsd_platform_af_method_table_get+0x32>
   13048:	280a      	cmp	r0, #10
   1304a:	d016      	beq.n	1307a <bsd_platform_af_method_table_get+0x3a>
   1304c:	2866      	cmp	r0, #102	; 0x66
   1304e:	d10b      	bne.n	13068 <bsd_platform_af_method_table_get+0x28>
   13050:	f240 2302 	movw	r3, #514	; 0x202
   13054:	429a      	cmp	r2, r3
   13056:	d032      	beq.n	130be <bsd_platform_af_method_table_get+0x7e>
   13058:	f240 2305 	movw	r3, #517	; 0x205
   1305c:	429a      	cmp	r2, r3
   1305e:	d032      	beq.n	130c6 <bsd_platform_af_method_table_get+0x86>
   13060:	f240 2301 	movw	r3, #513	; 0x201
   13064:	429a      	cmp	r2, r3
   13066:	d02c      	beq.n	130c2 <bsd_platform_af_method_table_get+0x82>
   13068:	2016      	movs	r0, #22
   1306a:	f7fc fb1d 	bl	f6a8 <bsd_os_errno_set>
   1306e:	2000      	movs	r0, #0
   13070:	bd08      	pop	{r3, pc}
   13072:	2801      	cmp	r0, #1
   13074:	d016      	beq.n	130a4 <bsd_platform_af_method_table_get+0x64>
   13076:	2802      	cmp	r0, #2
   13078:	d1f6      	bne.n	13068 <bsd_platform_af_method_table_get+0x28>
   1307a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   1307e:	2a0a      	cmp	r2, #10
   13080:	d819      	bhi.n	130b6 <bsd_platform_af_method_table_get+0x76>
   13082:	2301      	movs	r3, #1
   13084:	f240 4103 	movw	r1, #1027	; 0x403
   13088:	4810      	ldr	r0, [pc, #64]	; (130cc <bsd_platform_af_method_table_get+0x8c>)
   1308a:	fa03 f202 	lsl.w	r2, r3, r2
   1308e:	420a      	tst	r2, r1
   13090:	f100 0328 	add.w	r3, r0, #40	; 0x28
   13094:	bf18      	it	ne
   13096:	4618      	movne	r0, r3
   13098:	bd08      	pop	{r3, pc}
   1309a:	2903      	cmp	r1, #3
   1309c:	480c      	ldr	r0, [pc, #48]	; (130d0 <bsd_platform_af_method_table_get+0x90>)
   1309e:	bf18      	it	ne
   130a0:	2000      	movne	r0, #0
   130a2:	4770      	bx	lr
   130a4:	f240 2303 	movw	r3, #515	; 0x203
   130a8:	429a      	cmp	r2, r3
   130aa:	d006      	beq.n	130ba <bsd_platform_af_method_table_get+0x7a>
   130ac:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   130b0:	d1da      	bne.n	13068 <bsd_platform_af_method_table_get+0x28>
   130b2:	4808      	ldr	r0, [pc, #32]	; (130d4 <bsd_platform_af_method_table_get+0x94>)
   130b4:	bd08      	pop	{r3, pc}
   130b6:	4805      	ldr	r0, [pc, #20]	; (130cc <bsd_platform_af_method_table_get+0x8c>)
   130b8:	bd08      	pop	{r3, pc}
   130ba:	4807      	ldr	r0, [pc, #28]	; (130d8 <bsd_platform_af_method_table_get+0x98>)
   130bc:	bd08      	pop	{r3, pc}
   130be:	4807      	ldr	r0, [pc, #28]	; (130dc <bsd_platform_af_method_table_get+0x9c>)
   130c0:	bd08      	pop	{r3, pc}
   130c2:	4807      	ldr	r0, [pc, #28]	; (130e0 <bsd_platform_af_method_table_get+0xa0>)
   130c4:	bd08      	pop	{r3, pc}
   130c6:	4807      	ldr	r0, [pc, #28]	; (130e4 <bsd_platform_af_method_table_get+0xa4>)
   130c8:	bd08      	pop	{r3, pc}
   130ca:	bf00      	nop
   130cc:	0001ef70 	.word	0x0001ef70
   130d0:	0001f060 	.word	0x0001f060
   130d4:	0001f010 	.word	0x0001f010
   130d8:	0001efc0 	.word	0x0001efc0
   130dc:	0001efe8 	.word	0x0001efe8
   130e0:	0001ef48 	.word	0x0001ef48
   130e4:	0001f038 	.word	0x0001f038

000130e8 <bsd_platform_fd_method_table_get>:
   130e8:	b538      	push	{r3, r4, r5, lr}
   130ea:	4605      	mov	r5, r0
   130ec:	f003 ffa0 	bl	17030 <interface_socket_from_handle_get>
   130f0:	4604      	mov	r4, r0
   130f2:	b950      	cbnz	r0, 1310a <bsd_platform_fd_method_table_get+0x22>
   130f4:	4b2a      	ldr	r3, [pc, #168]	; (131a0 <bsd_platform_fd_method_table_get+0xb8>)
   130f6:	43ab      	bics	r3, r5
   130f8:	d032      	beq.n	13160 <bsd_platform_fd_method_table_get+0x78>
   130fa:	4b2a      	ldr	r3, [pc, #168]	; (131a4 <bsd_platform_fd_method_table_get+0xbc>)
   130fc:	43ab      	bics	r3, r5
   130fe:	d043      	beq.n	13188 <bsd_platform_fd_method_table_get+0xa0>
   13100:	4b29      	ldr	r3, [pc, #164]	; (131a8 <bsd_platform_fd_method_table_get+0xc0>)
   13102:	43ab      	bics	r3, r5
   13104:	d146      	bne.n	13194 <bsd_platform_fd_method_table_get+0xac>
   13106:	4829      	ldr	r0, [pc, #164]	; (131ac <bsd_platform_fd_method_table_get+0xc4>)
   13108:	bd38      	pop	{r3, r4, r5, pc}
   1310a:	68c3      	ldr	r3, [r0, #12]
   1310c:	6942      	ldr	r2, [r0, #20]
   1310e:	2b05      	cmp	r3, #5
   13110:	d034      	beq.n	1317c <bsd_platform_fd_method_table_get+0x94>
   13112:	d911      	bls.n	13138 <bsd_platform_fd_method_table_get+0x50>
   13114:	2b0a      	cmp	r3, #10
   13116:	d013      	beq.n	13140 <bsd_platform_fd_method_table_get+0x58>
   13118:	2b66      	cmp	r3, #102	; 0x66
   1311a:	d12a      	bne.n	13172 <bsd_platform_fd_method_table_get+0x8a>
   1311c:	f240 2302 	movw	r3, #514	; 0x202
   13120:	429a      	cmp	r2, r3
   13122:	d031      	beq.n	13188 <bsd_platform_fd_method_table_get+0xa0>
   13124:	f240 2305 	movw	r3, #517	; 0x205
   13128:	429a      	cmp	r2, r3
   1312a:	d031      	beq.n	13190 <bsd_platform_fd_method_table_get+0xa8>
   1312c:	f240 2301 	movw	r3, #513	; 0x201
   13130:	429a      	cmp	r2, r3
   13132:	d11e      	bne.n	13172 <bsd_platform_fd_method_table_get+0x8a>
   13134:	481e      	ldr	r0, [pc, #120]	; (131b0 <bsd_platform_fd_method_table_get+0xc8>)
   13136:	bd38      	pop	{r3, r4, r5, pc}
   13138:	2b01      	cmp	r3, #1
   1313a:	d013      	beq.n	13164 <bsd_platform_fd_method_table_get+0x7c>
   1313c:	2b02      	cmp	r3, #2
   1313e:	d118      	bne.n	13172 <bsd_platform_fd_method_table_get+0x8a>
   13140:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   13144:	2a0a      	cmp	r2, #10
   13146:	d821      	bhi.n	1318c <bsd_platform_fd_method_table_get+0xa4>
   13148:	2301      	movs	r3, #1
   1314a:	f240 4103 	movw	r1, #1027	; 0x403
   1314e:	4819      	ldr	r0, [pc, #100]	; (131b4 <bsd_platform_fd_method_table_get+0xcc>)
   13150:	fa03 f202 	lsl.w	r2, r3, r2
   13154:	420a      	tst	r2, r1
   13156:	f100 0428 	add.w	r4, r0, #40	; 0x28
   1315a:	bf18      	it	ne
   1315c:	4620      	movne	r0, r4
   1315e:	bd38      	pop	{r3, r4, r5, pc}
   13160:	4815      	ldr	r0, [pc, #84]	; (131b8 <bsd_platform_fd_method_table_get+0xd0>)
   13162:	bd38      	pop	{r3, r4, r5, pc}
   13164:	f240 2303 	movw	r3, #515	; 0x203
   13168:	429a      	cmp	r2, r3
   1316a:	d0f9      	beq.n	13160 <bsd_platform_fd_method_table_get+0x78>
   1316c:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   13170:	d0c9      	beq.n	13106 <bsd_platform_fd_method_table_get+0x1e>
   13172:	2016      	movs	r0, #22
   13174:	f7fc fa98 	bl	f6a8 <bsd_os_errno_set>
   13178:	2000      	movs	r0, #0
   1317a:	bd38      	pop	{r3, r4, r5, pc}
   1317c:	6903      	ldr	r3, [r0, #16]
   1317e:	480f      	ldr	r0, [pc, #60]	; (131bc <bsd_platform_fd_method_table_get+0xd4>)
   13180:	2b03      	cmp	r3, #3
   13182:	bf18      	it	ne
   13184:	2000      	movne	r0, #0
   13186:	bd38      	pop	{r3, r4, r5, pc}
   13188:	480d      	ldr	r0, [pc, #52]	; (131c0 <bsd_platform_fd_method_table_get+0xd8>)
   1318a:	bd38      	pop	{r3, r4, r5, pc}
   1318c:	4809      	ldr	r0, [pc, #36]	; (131b4 <bsd_platform_fd_method_table_get+0xcc>)
   1318e:	bd38      	pop	{r3, r4, r5, pc}
   13190:	480c      	ldr	r0, [pc, #48]	; (131c4 <bsd_platform_fd_method_table_get+0xdc>)
   13192:	bd38      	pop	{r3, r4, r5, pc}
   13194:	2009      	movs	r0, #9
   13196:	f7fc fa87 	bl	f6a8 <bsd_os_errno_set>
   1319a:	4620      	mov	r0, r4
   1319c:	bd38      	pop	{r3, r4, r5, pc}
   1319e:	bf00      	nop
   131a0:	49765432 	.word	0x49765432
   131a4:	789a0000 	.word	0x789a0000
   131a8:	49765443 	.word	0x49765443
   131ac:	0001f010 	.word	0x0001f010
   131b0:	0001ef48 	.word	0x0001ef48
   131b4:	0001ef70 	.word	0x0001ef70
   131b8:	0001efc0 	.word	0x0001efc0
   131bc:	0001f060 	.word	0x0001f060
   131c0:	0001efe8 	.word	0x0001efe8
   131c4:	0001f038 	.word	0x0001f038

000131c8 <bsd_platform_getaddrinfo>:
   131c8:	f003 ba7c 	b.w	166c4 <ip_interface_getaddrinfo>

000131cc <bsd_platform_freeaddrinfo>:
   131cc:	f003 bb70 	b.w	168b0 <ip_interface_freeaddrinfo>

000131d0 <bsd_platform_poll>:
   131d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   131d4:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   131d8:	b083      	sub	sp, #12
   131da:	9200      	str	r2, [sp, #0]
   131dc:	2800      	cmp	r0, #0
   131de:	d048      	beq.n	13272 <bsd_platform_poll+0xa2>
   131e0:	1e4b      	subs	r3, r1, #1
   131e2:	2b08      	cmp	r3, #8
   131e4:	d845      	bhi.n	13272 <bsd_platform_poll+0xa2>
   131e6:	4680      	mov	r8, r0
   131e8:	4605      	mov	r5, r0
   131ea:	2400      	movs	r4, #0
   131ec:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   131f0:	88ab      	ldrh	r3, [r5, #4]
   131f2:	6828      	ldr	r0, [r5, #0]
   131f4:	f003 0303 	and.w	r3, r3, #3
   131f8:	a901      	add	r1, sp, #4
   131fa:	f043 061c 	orr.w	r6, r3, #28
   131fe:	f003 ff25 	bl	1704c <interface_socket_event_get>
   13202:	9b01      	ldr	r3, [sp, #4]
   13204:	3508      	adds	r5, #8
   13206:	4033      	ands	r3, r6
   13208:	f825 3c02 	strh.w	r3, [r5, #-2]
   1320c:	b103      	cbz	r3, 13210 <bsd_platform_poll+0x40>
   1320e:	3401      	adds	r4, #1
   13210:	42af      	cmp	r7, r5
   13212:	d1ed      	bne.n	131f0 <bsd_platform_poll+0x20>
   13214:	bb9c      	cbnz	r4, 1327e <bsd_platform_poll+0xae>
   13216:	4669      	mov	r1, sp
   13218:	4640      	mov	r0, r8
   1321a:	f7fc f9b1 	bl	f580 <bsd_os_timedwait>
   1321e:	4607      	mov	r7, r0
   13220:	b108      	cbz	r0, 13226 <bsd_platform_poll+0x56>
   13222:	283c      	cmp	r0, #60	; 0x3c
   13224:	d11d      	bne.n	13262 <bsd_platform_poll+0x92>
   13226:	46c1      	mov	r9, r8
   13228:	2600      	movs	r6, #0
   1322a:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   1322e:	f8d9 0000 	ldr.w	r0, [r9]
   13232:	f003 0303 	and.w	r3, r3, #3
   13236:	a901      	add	r1, sp, #4
   13238:	f043 041c 	orr.w	r4, r3, #28
   1323c:	f003 ff06 	bl	1704c <interface_socket_event_get>
   13240:	9b01      	ldr	r3, [sp, #4]
   13242:	f109 0908 	add.w	r9, r9, #8
   13246:	4023      	ands	r3, r4
   13248:	f829 3c02 	strh.w	r3, [r9, #-2]
   1324c:	b103      	cbz	r3, 13250 <bsd_platform_poll+0x80>
   1324e:	3601      	adds	r6, #1
   13250:	454d      	cmp	r5, r9
   13252:	d1ea      	bne.n	1322a <bsd_platform_poll+0x5a>
   13254:	b90e      	cbnz	r6, 1325a <bsd_platform_poll+0x8a>
   13256:	2f00      	cmp	r7, #0
   13258:	d0dd      	beq.n	13216 <bsd_platform_poll+0x46>
   1325a:	4630      	mov	r0, r6
   1325c:	b003      	add	sp, #12
   1325e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13262:	2023      	movs	r0, #35	; 0x23
   13264:	f7fc fa20 	bl	f6a8 <bsd_os_errno_set>
   13268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1326c:	b003      	add	sp, #12
   1326e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13272:	2016      	movs	r0, #22
   13274:	f7fc fa18 	bl	f6a8 <bsd_os_errno_set>
   13278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1327c:	e7ee      	b.n	1325c <bsd_platform_poll+0x8c>
   1327e:	4620      	mov	r0, r4
   13280:	e7ec      	b.n	1325c <bsd_platform_poll+0x8c>
   13282:	bf00      	nop

00013284 <bsd_platform_fcntl>:
   13284:	b508      	push	{r3, lr}
   13286:	4b06      	ldr	r3, [pc, #24]	; (132a0 <bsd_platform_fcntl+0x1c>)
   13288:	4383      	bics	r3, r0
   1328a:	d003      	beq.n	13294 <bsd_platform_fcntl+0x10>
   1328c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13290:	f003 bf5a 	b.w	17148 <interface_socket_fcntl>
   13294:	202d      	movs	r0, #45	; 0x2d
   13296:	f7fc fa07 	bl	f6a8 <bsd_os_errno_set>
   1329a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1329e:	bd08      	pop	{r3, pc}
   132a0:	49765432 	.word	0x49765432

000132a4 <ipc_trace_init>:
   132a4:	4b01      	ldr	r3, [pc, #4]	; (132ac <ipc_trace_init+0x8>)
   132a6:	6018      	str	r0, [r3, #0]
   132a8:	4770      	bx	lr
   132aa:	bf00      	nop
   132ac:	2002088c 	.word	0x2002088c

000132b0 <bsd_os_trace_irq_handler>:
   132b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   132b2:	4b6c      	ldr	r3, [pc, #432]	; (13464 <bsd_os_trace_irq_handler+0x1b4>)
   132b4:	b083      	sub	sp, #12
   132b6:	781b      	ldrb	r3, [r3, #0]
   132b8:	2b00      	cmp	r3, #0
   132ba:	f000 80ad 	beq.w	13418 <bsd_os_trace_irq_handler+0x168>
   132be:	4b6a      	ldr	r3, [pc, #424]	; (13468 <bsd_os_trace_irq_handler+0x1b8>)
   132c0:	681c      	ldr	r4, [r3, #0]
   132c2:	68a2      	ldr	r2, [r4, #8]
   132c4:	6863      	ldr	r3, [r4, #4]
   132c6:	429a      	cmp	r2, r3
   132c8:	d02d      	beq.n	13326 <bsd_os_trace_irq_handler+0x76>
   132ca:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   132ce:	f8ad 3000 	strh.w	r3, [sp]
   132d2:	7823      	ldrb	r3, [r4, #0]
   132d4:	466e      	mov	r6, sp
   132d6:	f88d 3004 	strb.w	r3, [sp, #4]
   132da:	6863      	ldr	r3, [r4, #4]
   132dc:	2105      	movs	r1, #5
   132de:	429a      	cmp	r2, r3
   132e0:	bf2a      	itet	cs
   132e2:	6927      	ldrcs	r7, [r4, #16]
   132e4:	1a9f      	subcc	r7, r3, r2
   132e6:	1abf      	subcs	r7, r7, r2
   132e8:	429a      	cmp	r2, r3
   132ea:	bf94      	ite	ls
   132ec:	2500      	movls	r5, #0
   132ee:	68e5      	ldrhi	r5, [r4, #12]
   132f0:	b2bf      	uxth	r7, r7
   132f2:	bf88      	it	hi
   132f4:	1b5b      	subhi	r3, r3, r5
   132f6:	4630      	mov	r0, r6
   132f8:	bf88      	it	hi
   132fa:	b29d      	uxthhi	r5, r3
   132fc:	f8ad 7002 	strh.w	r7, [sp, #2]
   13300:	f00a fd09 	bl	1dd16 <bsd_os_trace_put>
   13304:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13308:	68a0      	ldr	r0, [r4, #8]
   1330a:	f00a fd04 	bl	1dd16 <bsd_os_trace_put>
   1330e:	68a3      	ldr	r3, [r4, #8]
   13310:	6922      	ldr	r2, [r4, #16]
   13312:	441f      	add	r7, r3
   13314:	4297      	cmp	r7, r2
   13316:	bf08      	it	eq
   13318:	68e3      	ldreq	r3, [r4, #12]
   1331a:	60a7      	str	r7, [r4, #8]
   1331c:	bf08      	it	eq
   1331e:	60a3      	streq	r3, [r4, #8]
   13320:	2d00      	cmp	r5, #0
   13322:	f040 808d 	bne.w	13440 <bsd_os_trace_irq_handler+0x190>
   13326:	4b51      	ldr	r3, [pc, #324]	; (1346c <bsd_os_trace_irq_handler+0x1bc>)
   13328:	681c      	ldr	r4, [r3, #0]
   1332a:	68a2      	ldr	r2, [r4, #8]
   1332c:	6863      	ldr	r3, [r4, #4]
   1332e:	429a      	cmp	r2, r3
   13330:	d02c      	beq.n	1338c <bsd_os_trace_irq_handler+0xdc>
   13332:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   13336:	f8ad 3000 	strh.w	r3, [sp]
   1333a:	7823      	ldrb	r3, [r4, #0]
   1333c:	466e      	mov	r6, sp
   1333e:	f88d 3004 	strb.w	r3, [sp, #4]
   13342:	6863      	ldr	r3, [r4, #4]
   13344:	2105      	movs	r1, #5
   13346:	429a      	cmp	r2, r3
   13348:	bf2a      	itet	cs
   1334a:	6927      	ldrcs	r7, [r4, #16]
   1334c:	1a9f      	subcc	r7, r3, r2
   1334e:	1abf      	subcs	r7, r7, r2
   13350:	429a      	cmp	r2, r3
   13352:	bf94      	ite	ls
   13354:	2500      	movls	r5, #0
   13356:	68e5      	ldrhi	r5, [r4, #12]
   13358:	b2bf      	uxth	r7, r7
   1335a:	bf88      	it	hi
   1335c:	1b5b      	subhi	r3, r3, r5
   1335e:	4630      	mov	r0, r6
   13360:	bf88      	it	hi
   13362:	b29d      	uxthhi	r5, r3
   13364:	f8ad 7002 	strh.w	r7, [sp, #2]
   13368:	f00a fcd5 	bl	1dd16 <bsd_os_trace_put>
   1336c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13370:	68a0      	ldr	r0, [r4, #8]
   13372:	f00a fcd0 	bl	1dd16 <bsd_os_trace_put>
   13376:	68a3      	ldr	r3, [r4, #8]
   13378:	6922      	ldr	r2, [r4, #16]
   1337a:	441f      	add	r7, r3
   1337c:	4297      	cmp	r7, r2
   1337e:	bf08      	it	eq
   13380:	68e3      	ldreq	r3, [r4, #12]
   13382:	60a7      	str	r7, [r4, #8]
   13384:	bf08      	it	eq
   13386:	60a3      	streq	r3, [r4, #8]
   13388:	2d00      	cmp	r5, #0
   1338a:	d148      	bne.n	1341e <bsd_os_trace_irq_handler+0x16e>
   1338c:	4b38      	ldr	r3, [pc, #224]	; (13470 <bsd_os_trace_irq_handler+0x1c0>)
   1338e:	681c      	ldr	r4, [r3, #0]
   13390:	68a2      	ldr	r2, [r4, #8]
   13392:	6863      	ldr	r3, [r4, #4]
   13394:	429a      	cmp	r2, r3
   13396:	d02b      	beq.n	133f0 <bsd_os_trace_irq_handler+0x140>
   13398:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   1339c:	f8ad 3000 	strh.w	r3, [sp]
   133a0:	7823      	ldrb	r3, [r4, #0]
   133a2:	466e      	mov	r6, sp
   133a4:	f88d 3004 	strb.w	r3, [sp, #4]
   133a8:	6863      	ldr	r3, [r4, #4]
   133aa:	2105      	movs	r1, #5
   133ac:	429a      	cmp	r2, r3
   133ae:	bf2a      	itet	cs
   133b0:	6927      	ldrcs	r7, [r4, #16]
   133b2:	1a9f      	subcc	r7, r3, r2
   133b4:	1abf      	subcs	r7, r7, r2
   133b6:	429a      	cmp	r2, r3
   133b8:	bf94      	ite	ls
   133ba:	2500      	movls	r5, #0
   133bc:	68e5      	ldrhi	r5, [r4, #12]
   133be:	b2bf      	uxth	r7, r7
   133c0:	bf88      	it	hi
   133c2:	1b5b      	subhi	r3, r3, r5
   133c4:	4630      	mov	r0, r6
   133c6:	bf88      	it	hi
   133c8:	b29d      	uxthhi	r5, r3
   133ca:	f8ad 7002 	strh.w	r7, [sp, #2]
   133ce:	f00a fca2 	bl	1dd16 <bsd_os_trace_put>
   133d2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   133d6:	68a0      	ldr	r0, [r4, #8]
   133d8:	f00a fc9d 	bl	1dd16 <bsd_os_trace_put>
   133dc:	68a3      	ldr	r3, [r4, #8]
   133de:	6922      	ldr	r2, [r4, #16]
   133e0:	441f      	add	r7, r3
   133e2:	4297      	cmp	r7, r2
   133e4:	bf08      	it	eq
   133e6:	68e3      	ldreq	r3, [r4, #12]
   133e8:	60a7      	str	r7, [r4, #8]
   133ea:	bf08      	it	eq
   133ec:	60a3      	streq	r3, [r4, #8]
   133ee:	b90d      	cbnz	r5, 133f4 <bsd_os_trace_irq_handler+0x144>
   133f0:	b003      	add	sp, #12
   133f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   133f4:	4630      	mov	r0, r6
   133f6:	2105      	movs	r1, #5
   133f8:	f8ad 5002 	strh.w	r5, [sp, #2]
   133fc:	f00a fc8b 	bl	1dd16 <bsd_os_trace_put>
   13400:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13404:	68e0      	ldr	r0, [r4, #12]
   13406:	f00a fc86 	bl	1dd16 <bsd_os_trace_put>
   1340a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1340e:	68e3      	ldr	r3, [r4, #12]
   13410:	4413      	add	r3, r2
   13412:	60a3      	str	r3, [r4, #8]
   13414:	b003      	add	sp, #12
   13416:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13418:	f7fc fa0e 	bl	f838 <bsd_os_trace_irq_clear>
   1341c:	e74f      	b.n	132be <bsd_os_trace_irq_handler+0xe>
   1341e:	2105      	movs	r1, #5
   13420:	4630      	mov	r0, r6
   13422:	f8ad 5002 	strh.w	r5, [sp, #2]
   13426:	f00a fc76 	bl	1dd16 <bsd_os_trace_put>
   1342a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1342e:	68e0      	ldr	r0, [r4, #12]
   13430:	f00a fc71 	bl	1dd16 <bsd_os_trace_put>
   13434:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   13438:	68e3      	ldr	r3, [r4, #12]
   1343a:	4413      	add	r3, r2
   1343c:	60a3      	str	r3, [r4, #8]
   1343e:	e7a5      	b.n	1338c <bsd_os_trace_irq_handler+0xdc>
   13440:	2105      	movs	r1, #5
   13442:	4630      	mov	r0, r6
   13444:	f8ad 5002 	strh.w	r5, [sp, #2]
   13448:	f00a fc65 	bl	1dd16 <bsd_os_trace_put>
   1344c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13450:	68e0      	ldr	r0, [r4, #12]
   13452:	f00a fc60 	bl	1dd16 <bsd_os_trace_put>
   13456:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1345a:	68e3      	ldr	r3, [r4, #12]
   1345c:	4413      	add	r3, r2
   1345e:	60a3      	str	r3, [r4, #8]
   13460:	e761      	b.n	13326 <bsd_os_trace_irq_handler+0x76>
   13462:	bf00      	nop
   13464:	20024f39 	.word	0x20024f39
   13468:	20020888 	.word	0x20020888
   1346c:	20020880 	.word	0x20020880
   13470:	20020884 	.word	0x20020884

00013474 <ipc_trace_handle>:
   13474:	2200      	movs	r2, #0
   13476:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1347a:	4bb0      	ldr	r3, [pc, #704]	; (1373c <ipc_trace_handle+0x2c8>)
   1347c:	b083      	sub	sp, #12
   1347e:	681b      	ldr	r3, [r3, #0]
   13480:	6919      	ldr	r1, [r3, #16]
   13482:	695c      	ldr	r4, [r3, #20]
   13484:	7c18      	ldrb	r0, [r3, #16]
   13486:	741a      	strb	r2, [r3, #16]
   13488:	7c58      	ldrb	r0, [r3, #17]
   1348a:	745a      	strb	r2, [r3, #17]
   1348c:	7c98      	ldrb	r0, [r3, #18]
   1348e:	749a      	strb	r2, [r3, #18]
   13490:	7cd8      	ldrb	r0, [r3, #19]
   13492:	74da      	strb	r2, [r3, #19]
   13494:	7d18      	ldrb	r0, [r3, #20]
   13496:	751a      	strb	r2, [r3, #20]
   13498:	7d58      	ldrb	r0, [r3, #21]
   1349a:	755a      	strb	r2, [r3, #21]
   1349c:	7d98      	ldrb	r0, [r3, #22]
   1349e:	759a      	strb	r2, [r3, #22]
   134a0:	7dd8      	ldrb	r0, [r3, #23]
   134a2:	75da      	strb	r2, [r3, #23]
   134a4:	b1b9      	cbz	r1, 134d6 <ipc_trace_handle+0x62>
   134a6:	3901      	subs	r1, #1
   134a8:	2903      	cmp	r1, #3
   134aa:	d814      	bhi.n	134d6 <ipc_trace_handle+0x62>
   134ac:	e8df f011 	tbh	[pc, r1, lsl #1]
   134b0:	010300d6 	.word	0x010300d6
   134b4:	00160004 	.word	0x00160004
   134b8:	2501      	movs	r5, #1
   134ba:	2003      	movs	r0, #3
   134bc:	2200      	movs	r2, #0
   134be:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   134c2:	4c9f      	ldr	r4, [pc, #636]	; (13740 <ipc_trace_handle+0x2cc>)
   134c4:	7025      	strb	r5, [r4, #0]
   134c6:	7a1c      	ldrb	r4, [r3, #8]
   134c8:	7218      	strb	r0, [r3, #8]
   134ca:	7a58      	ldrb	r0, [r3, #9]
   134cc:	725a      	strb	r2, [r3, #9]
   134ce:	7a98      	ldrb	r0, [r3, #10]
   134d0:	729a      	strb	r2, [r3, #10]
   134d2:	7ada      	ldrb	r2, [r3, #11]
   134d4:	72d9      	strb	r1, [r3, #11]
   134d6:	b003      	add	sp, #12
   134d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134dc:	2104      	movs	r1, #4
   134de:	2200      	movs	r2, #0
   134e0:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   134e4:	7a1c      	ldrb	r4, [r3, #8]
   134e6:	7219      	strb	r1, [r3, #8]
   134e8:	7a59      	ldrb	r1, [r3, #9]
   134ea:	725a      	strb	r2, [r3, #9]
   134ec:	4994      	ldr	r1, [pc, #592]	; (13740 <ipc_trace_handle+0x2cc>)
   134ee:	7a9c      	ldrb	r4, [r3, #10]
   134f0:	729a      	strb	r2, [r3, #10]
   134f2:	7adc      	ldrb	r4, [r3, #11]
   134f4:	72d8      	strb	r0, [r3, #11]
   134f6:	700a      	strb	r2, [r1, #0]
   134f8:	780b      	ldrb	r3, [r1, #0]
   134fa:	2b00      	cmp	r3, #0
   134fc:	f000 8117 	beq.w	1372e <ipc_trace_handle+0x2ba>
   13500:	4b90      	ldr	r3, [pc, #576]	; (13744 <ipc_trace_handle+0x2d0>)
   13502:	681c      	ldr	r4, [r3, #0]
   13504:	68a2      	ldr	r2, [r4, #8]
   13506:	6863      	ldr	r3, [r4, #4]
   13508:	429a      	cmp	r2, r3
   1350a:	d02d      	beq.n	13568 <ipc_trace_handle+0xf4>
   1350c:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   13510:	f8ad 3000 	strh.w	r3, [sp]
   13514:	7823      	ldrb	r3, [r4, #0]
   13516:	466e      	mov	r6, sp
   13518:	f88d 3004 	strb.w	r3, [sp, #4]
   1351c:	6863      	ldr	r3, [r4, #4]
   1351e:	2105      	movs	r1, #5
   13520:	429a      	cmp	r2, r3
   13522:	bf2a      	itet	cs
   13524:	6927      	ldrcs	r7, [r4, #16]
   13526:	1a9f      	subcc	r7, r3, r2
   13528:	1abf      	subcs	r7, r7, r2
   1352a:	429a      	cmp	r2, r3
   1352c:	bf94      	ite	ls
   1352e:	2500      	movls	r5, #0
   13530:	68e5      	ldrhi	r5, [r4, #12]
   13532:	b2bf      	uxth	r7, r7
   13534:	bf88      	it	hi
   13536:	1b5b      	subhi	r3, r3, r5
   13538:	4630      	mov	r0, r6
   1353a:	bf88      	it	hi
   1353c:	b29d      	uxthhi	r5, r3
   1353e:	f8ad 7002 	strh.w	r7, [sp, #2]
   13542:	f00a fbe8 	bl	1dd16 <bsd_os_trace_put>
   13546:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1354a:	68a0      	ldr	r0, [r4, #8]
   1354c:	f00a fbe3 	bl	1dd16 <bsd_os_trace_put>
   13550:	68a3      	ldr	r3, [r4, #8]
   13552:	6922      	ldr	r2, [r4, #16]
   13554:	441f      	add	r7, r3
   13556:	4297      	cmp	r7, r2
   13558:	bf08      	it	eq
   1355a:	68e3      	ldreq	r3, [r4, #12]
   1355c:	60a7      	str	r7, [r4, #8]
   1355e:	bf08      	it	eq
   13560:	60a3      	streq	r3, [r4, #8]
   13562:	2d00      	cmp	r5, #0
   13564:	f040 80d2 	bne.w	1370c <ipc_trace_handle+0x298>
   13568:	4b77      	ldr	r3, [pc, #476]	; (13748 <ipc_trace_handle+0x2d4>)
   1356a:	681c      	ldr	r4, [r3, #0]
   1356c:	68a2      	ldr	r2, [r4, #8]
   1356e:	6863      	ldr	r3, [r4, #4]
   13570:	429a      	cmp	r2, r3
   13572:	d02d      	beq.n	135d0 <ipc_trace_handle+0x15c>
   13574:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   13578:	f8ad 3000 	strh.w	r3, [sp]
   1357c:	7823      	ldrb	r3, [r4, #0]
   1357e:	466e      	mov	r6, sp
   13580:	f88d 3004 	strb.w	r3, [sp, #4]
   13584:	6863      	ldr	r3, [r4, #4]
   13586:	2105      	movs	r1, #5
   13588:	429a      	cmp	r2, r3
   1358a:	bf2a      	itet	cs
   1358c:	6927      	ldrcs	r7, [r4, #16]
   1358e:	1a9f      	subcc	r7, r3, r2
   13590:	1abf      	subcs	r7, r7, r2
   13592:	429a      	cmp	r2, r3
   13594:	bf94      	ite	ls
   13596:	2500      	movls	r5, #0
   13598:	68e5      	ldrhi	r5, [r4, #12]
   1359a:	b2bf      	uxth	r7, r7
   1359c:	bf88      	it	hi
   1359e:	1b5b      	subhi	r3, r3, r5
   135a0:	4630      	mov	r0, r6
   135a2:	bf88      	it	hi
   135a4:	b29d      	uxthhi	r5, r3
   135a6:	f8ad 7002 	strh.w	r7, [sp, #2]
   135aa:	f00a fbb4 	bl	1dd16 <bsd_os_trace_put>
   135ae:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   135b2:	68a0      	ldr	r0, [r4, #8]
   135b4:	f00a fbaf 	bl	1dd16 <bsd_os_trace_put>
   135b8:	68a3      	ldr	r3, [r4, #8]
   135ba:	6922      	ldr	r2, [r4, #16]
   135bc:	441f      	add	r7, r3
   135be:	4297      	cmp	r7, r2
   135c0:	bf08      	it	eq
   135c2:	68e3      	ldreq	r3, [r4, #12]
   135c4:	60a7      	str	r7, [r4, #8]
   135c6:	bf08      	it	eq
   135c8:	60a3      	streq	r3, [r4, #8]
   135ca:	2d00      	cmp	r5, #0
   135cc:	f040 808d 	bne.w	136ea <ipc_trace_handle+0x276>
   135d0:	4b5e      	ldr	r3, [pc, #376]	; (1374c <ipc_trace_handle+0x2d8>)
   135d2:	681c      	ldr	r4, [r3, #0]
   135d4:	68a2      	ldr	r2, [r4, #8]
   135d6:	6863      	ldr	r3, [r4, #4]
   135d8:	429a      	cmp	r2, r3
   135da:	f43f af7c 	beq.w	134d6 <ipc_trace_handle+0x62>
   135de:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   135e2:	f8ad 3000 	strh.w	r3, [sp]
   135e6:	7823      	ldrb	r3, [r4, #0]
   135e8:	466e      	mov	r6, sp
   135ea:	f88d 3004 	strb.w	r3, [sp, #4]
   135ee:	6863      	ldr	r3, [r4, #4]
   135f0:	2105      	movs	r1, #5
   135f2:	429a      	cmp	r2, r3
   135f4:	bf2a      	itet	cs
   135f6:	6927      	ldrcs	r7, [r4, #16]
   135f8:	1a9f      	subcc	r7, r3, r2
   135fa:	1abf      	subcs	r7, r7, r2
   135fc:	429a      	cmp	r2, r3
   135fe:	bf94      	ite	ls
   13600:	2500      	movls	r5, #0
   13602:	68e5      	ldrhi	r5, [r4, #12]
   13604:	b2bf      	uxth	r7, r7
   13606:	bf88      	it	hi
   13608:	1b5b      	subhi	r3, r3, r5
   1360a:	4630      	mov	r0, r6
   1360c:	bf88      	it	hi
   1360e:	b29d      	uxthhi	r5, r3
   13610:	f8ad 7002 	strh.w	r7, [sp, #2]
   13614:	f00a fb7f 	bl	1dd16 <bsd_os_trace_put>
   13618:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1361c:	68a0      	ldr	r0, [r4, #8]
   1361e:	f00a fb7a 	bl	1dd16 <bsd_os_trace_put>
   13622:	68a3      	ldr	r3, [r4, #8]
   13624:	6922      	ldr	r2, [r4, #16]
   13626:	441f      	add	r7, r3
   13628:	4297      	cmp	r7, r2
   1362a:	bf08      	it	eq
   1362c:	68e3      	ldreq	r3, [r4, #12]
   1362e:	60a7      	str	r7, [r4, #8]
   13630:	bf08      	it	eq
   13632:	60a3      	streq	r3, [r4, #8]
   13634:	2d00      	cmp	r5, #0
   13636:	f43f af4e 	beq.w	134d6 <ipc_trace_handle+0x62>
   1363a:	2105      	movs	r1, #5
   1363c:	4630      	mov	r0, r6
   1363e:	f8ad 5002 	strh.w	r5, [sp, #2]
   13642:	f00a fb68 	bl	1dd16 <bsd_os_trace_put>
   13646:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1364a:	68e0      	ldr	r0, [r4, #12]
   1364c:	f00a fb63 	bl	1dd16 <bsd_os_trace_put>
   13650:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   13654:	68e3      	ldr	r3, [r4, #12]
   13656:	4413      	add	r3, r2
   13658:	60a3      	str	r3, [r4, #8]
   1365a:	e73c      	b.n	134d6 <ipc_trace_handle+0x62>
   1365c:	4a38      	ldr	r2, [pc, #224]	; (13740 <ipc_trace_handle+0x2cc>)
   1365e:	7811      	ldrb	r1, [r2, #0]
   13660:	b109      	cbz	r1, 13666 <ipc_trace_handle+0x1f2>
   13662:	2100      	movs	r1, #0
   13664:	7011      	strb	r1, [r2, #0]
   13666:	68a5      	ldr	r5, [r4, #8]
   13668:	2d00      	cmp	r5, #0
   1366a:	d039      	beq.n	136e0 <ipc_trace_handle+0x26c>
   1366c:	f04f 0c00 	mov.w	ip, #0
   13670:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 13748 <ipc_trace_handle+0x2d4>
   13674:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 13744 <ipc_trace_handle+0x2d0>
   13678:	4934      	ldr	r1, [pc, #208]	; (1374c <ipc_trace_handle+0x2d8>)
   1367a:	46e1      	mov	r9, ip
   1367c:	4666      	mov	r6, ip
   1367e:	4662      	mov	r2, ip
   13680:	f8d1 e000 	ldr.w	lr, [r1]
   13684:	f8da 8000 	ldr.w	r8, [sl]
   13688:	f8db 7000 	ldr.w	r7, [fp]
   1368c:	e008      	b.n	136a0 <ipc_trace_handle+0x22c>
   1368e:	2963      	cmp	r1, #99	; 0x63
   13690:	d016      	beq.n	136c0 <ipc_trace_handle+0x24c>
   13692:	2961      	cmp	r1, #97	; 0x61
   13694:	bf04      	itt	eq
   13696:	4607      	moveq	r7, r0
   13698:	2601      	moveq	r6, #1
   1369a:	3201      	adds	r2, #1
   1369c:	42aa      	cmp	r2, r5
   1369e:	d013      	beq.n	136c8 <ipc_trace_handle+0x254>
   136a0:	1c91      	adds	r1, r2, #2
   136a2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   136a6:	6848      	ldr	r0, [r1, #4]
   136a8:	7801      	ldrb	r1, [r0, #0]
   136aa:	2962      	cmp	r1, #98	; 0x62
   136ac:	d1ef      	bne.n	1368e <ipc_trace_handle+0x21a>
   136ae:	4680      	mov	r8, r0
   136b0:	f04f 0901 	mov.w	r9, #1
   136b4:	e7f1      	b.n	1369a <ipc_trace_handle+0x226>
   136b6:	f7fc f8b7 	bl	f828 <bsd_os_trace_irq_set>
   136ba:	b003      	add	sp, #12
   136bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136c0:	4686      	mov	lr, r0
   136c2:	f04f 0c01 	mov.w	ip, #1
   136c6:	e7e8      	b.n	1369a <ipc_trace_handle+0x226>
   136c8:	bba6      	cbnz	r6, 13734 <ipc_trace_handle+0x2c0>
   136ca:	f1b9 0f00 	cmp.w	r9, #0
   136ce:	d001      	beq.n	136d4 <ipc_trace_handle+0x260>
   136d0:	f8ca 8000 	str.w	r8, [sl]
   136d4:	f1bc 0f00 	cmp.w	ip, #0
   136d8:	d002      	beq.n	136e0 <ipc_trace_handle+0x26c>
   136da:	4a1c      	ldr	r2, [pc, #112]	; (1374c <ipc_trace_handle+0x2d8>)
   136dc:	f8c2 e000 	str.w	lr, [r2]
   136e0:	2001      	movs	r0, #1
   136e2:	2200      	movs	r2, #0
   136e4:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   136e8:	e6ed      	b.n	134c6 <ipc_trace_handle+0x52>
   136ea:	2105      	movs	r1, #5
   136ec:	4630      	mov	r0, r6
   136ee:	f8ad 5002 	strh.w	r5, [sp, #2]
   136f2:	f00a fb10 	bl	1dd16 <bsd_os_trace_put>
   136f6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   136fa:	68e0      	ldr	r0, [r4, #12]
   136fc:	f00a fb0b 	bl	1dd16 <bsd_os_trace_put>
   13700:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   13704:	68e3      	ldr	r3, [r4, #12]
   13706:	4413      	add	r3, r2
   13708:	60a3      	str	r3, [r4, #8]
   1370a:	e761      	b.n	135d0 <ipc_trace_handle+0x15c>
   1370c:	2105      	movs	r1, #5
   1370e:	4630      	mov	r0, r6
   13710:	f8ad 5002 	strh.w	r5, [sp, #2]
   13714:	f00a faff 	bl	1dd16 <bsd_os_trace_put>
   13718:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1371c:	68e0      	ldr	r0, [r4, #12]
   1371e:	f00a fafa 	bl	1dd16 <bsd_os_trace_put>
   13722:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   13726:	68e3      	ldr	r3, [r4, #12]
   13728:	4413      	add	r3, r2
   1372a:	60a3      	str	r3, [r4, #8]
   1372c:	e71c      	b.n	13568 <ipc_trace_handle+0xf4>
   1372e:	f7fc f883 	bl	f838 <bsd_os_trace_irq_clear>
   13732:	e6e5      	b.n	13500 <ipc_trace_handle+0x8c>
   13734:	f8cb 7000 	str.w	r7, [fp]
   13738:	e7c7      	b.n	136ca <ipc_trace_handle+0x256>
   1373a:	bf00      	nop
   1373c:	2002088c 	.word	0x2002088c
   13740:	20024f39 	.word	0x20024f39
   13744:	20020888 	.word	0x20020888
   13748:	20020880 	.word	0x20020880
   1374c:	20020884 	.word	0x20020884

00013750 <rpc_trace_coredump_in_progress>:
   13750:	4b01      	ldr	r3, [pc, #4]	; (13758 <rpc_trace_coredump_in_progress+0x8>)
   13752:	7818      	ldrb	r0, [r3, #0]
   13754:	4770      	bx	lr
   13756:	bf00      	nop
   13758:	20024f39 	.word	0x20024f39

0001375c <transport_reset>:
   1375c:	2000      	movs	r0, #0
   1375e:	4770      	bx	lr

00013760 <transport_data_free>:
   13760:	4b0b      	ldr	r3, [pc, #44]	; (13790 <transport_data_free+0x30>)
   13762:	e9d3 2300 	ldrd	r2, r3, [r3]
   13766:	4413      	add	r3, r2
   13768:	4298      	cmp	r0, r3
   1376a:	d20d      	bcs.n	13788 <transport_data_free+0x28>
   1376c:	4282      	cmp	r2, r0
   1376e:	d80b      	bhi.n	13788 <transport_data_free+0x28>
   13770:	b510      	push	{r4, lr}
   13772:	4604      	mov	r4, r0
   13774:	f000 fd5a 	bl	1422c <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   13778:	b140      	cbz	r0, 1378c <transport_data_free+0x2c>
   1377a:	4a06      	ldr	r2, [pc, #24]	; (13794 <transport_data_free+0x34>)
   1377c:	6084      	str	r4, [r0, #8]
   1377e:	6002      	str	r2, [r0, #0]
   13780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13784:	f000 bc9a 	b.w	140bc <rpc_transport_ipc_tx_send>
   13788:	f7fe bbce 	b.w	11f28 <nrf_shared_free>
   1378c:	bd10      	pop	{r4, pc}
   1378e:	bf00      	nop
   13790:	20020890 	.word	0x20020890
   13794:	00020001 	.word	0x00020001

00013798 <rpc_transport_ipc_init>:
   13798:	2800      	cmp	r0, #0
   1379a:	d02b      	beq.n	137f4 <rpc_transport_ipc_init+0x5c>
   1379c:	b530      	push	{r4, r5, lr}
   1379e:	b089      	sub	sp, #36	; 0x24
   137a0:	aa01      	add	r2, sp, #4
   137a2:	4669      	mov	r1, sp
   137a4:	4604      	mov	r4, r0
   137a6:	f000 fb9f 	bl	13ee8 <rpc_transport_ipc_tx_init>
   137aa:	4603      	mov	r3, r0
   137ac:	b140      	cbz	r0, 137c0 <rpc_transport_ipc_init+0x28>
   137ae:	4a13      	ldr	r2, [pc, #76]	; (137fc <rpc_transport_ipc_init+0x64>)
   137b0:	f104 0028 	add.w	r0, r4, #40	; 0x28
   137b4:	c803      	ldmia	r0, {r0, r1}
   137b6:	e882 0003 	stmia.w	r2, {r0, r1}
   137ba:	4618      	mov	r0, r3
   137bc:	b009      	add	sp, #36	; 0x24
   137be:	bd30      	pop	{r4, r5, pc}
   137c0:	e9dd 1200 	ldrd	r1, r2, [sp]
   137c4:	4620      	mov	r0, r4
   137c6:	f000 f84b 	bl	13860 <rpc_transport_ipc_rx_init>
   137ca:	4603      	mov	r3, r0
   137cc:	2800      	cmp	r0, #0
   137ce:	d1ee      	bne.n	137ae <rpc_transport_ipc_init+0x16>
   137d0:	4b0b      	ldr	r3, [pc, #44]	; (13800 <rpc_transport_ipc_init+0x68>)
   137d2:	490c      	ldr	r1, [pc, #48]	; (13804 <rpc_transport_ipc_init+0x6c>)
   137d4:	480c      	ldr	r0, [pc, #48]	; (13808 <rpc_transport_ipc_init+0x70>)
   137d6:	4a0d      	ldr	r2, [pc, #52]	; (1380c <rpc_transport_ipc_init+0x74>)
   137d8:	9303      	str	r3, [sp, #12]
   137da:	4d0d      	ldr	r5, [pc, #52]	; (13810 <rpc_transport_ipc_init+0x78>)
   137dc:	4b0d      	ldr	r3, [pc, #52]	; (13814 <rpc_transport_ipc_init+0x7c>)
   137de:	9104      	str	r1, [sp, #16]
   137e0:	9005      	str	r0, [sp, #20]
   137e2:	490d      	ldr	r1, [pc, #52]	; (13818 <rpc_transport_ipc_init+0x80>)
   137e4:	a802      	add	r0, sp, #8
   137e6:	9307      	str	r3, [sp, #28]
   137e8:	9506      	str	r5, [sp, #24]
   137ea:	9202      	str	r2, [sp, #8]
   137ec:	f003 fec8 	bl	17580 <rpc_transport_register>
   137f0:	4603      	mov	r3, r0
   137f2:	e7dc      	b.n	137ae <rpc_transport_ipc_init+0x16>
   137f4:	230e      	movs	r3, #14
   137f6:	4618      	mov	r0, r3
   137f8:	4770      	bx	lr
   137fa:	bf00      	nop
   137fc:	20020890 	.word	0x20020890
   13800:	000141bd 	.word	0x000141bd
   13804:	0001428d 	.word	0x0001428d
   13808:	00013e7d 	.word	0x00013e7d
   1380c:	000140bd 	.word	0x000140bd
   13810:	00013761 	.word	0x00013761
   13814:	0001375d 	.word	0x0001375d
   13818:	20020898 	.word	0x20020898

0001381c <rpc_transport_rx_handle>:
   1381c:	b160      	cbz	r0, 13838 <rpc_transport_rx_handle+0x1c>
   1381e:	b508      	push	{r3, lr}
   13820:	6843      	ldr	r3, [r0, #4]
   13822:	b2db      	uxtb	r3, r3
   13824:	2b02      	cmp	r3, #2
   13826:	d00e      	beq.n	13846 <rpc_transport_rx_handle+0x2a>
   13828:	6803      	ldr	r3, [r0, #0]
   1382a:	0c1b      	lsrs	r3, r3, #16
   1382c:	2b02      	cmp	r3, #2
   1382e:	d005      	beq.n	1383c <rpc_transport_rx_handle+0x20>
   13830:	2b04      	cmp	r3, #4
   13832:	d00e      	beq.n	13852 <rpc_transport_rx_handle+0x36>
   13834:	2000      	movs	r0, #0
   13836:	bd08      	pop	{r3, pc}
   13838:	2000      	movs	r0, #0
   1383a:	4770      	bx	lr
   1383c:	6880      	ldr	r0, [r0, #8]
   1383e:	f7fe fb73 	bl	11f28 <nrf_shared_free>
   13842:	2000      	movs	r0, #0
   13844:	bd08      	pop	{r3, pc}
   13846:	4601      	mov	r1, r0
   13848:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1384c:	4803      	ldr	r0, [pc, #12]	; (1385c <rpc_transport_rx_handle+0x40>)
   1384e:	f003 bd89 	b.w	17364 <rpc_transport_input>
   13852:	4802      	ldr	r0, [pc, #8]	; (1385c <rpc_transport_rx_handle+0x40>)
   13854:	f003 fef4 	bl	17640 <rpc_transport_unregister>
   13858:	2000      	movs	r0, #0
   1385a:	bd08      	pop	{r3, pc}
   1385c:	20020898 	.word	0x20020898

00013860 <rpc_transport_ipc_rx_init>:
   13860:	2800      	cmp	r0, #0
   13862:	f000 80ff 	beq.w	13a64 <rpc_transport_ipc_rx_init+0x204>
   13866:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1386a:	6805      	ldr	r5, [r0, #0]
   1386c:	b095      	sub	sp, #84	; 0x54
   1386e:	2d00      	cmp	r5, #0
   13870:	f000 80ee 	beq.w	13a50 <rpc_transport_ipc_rx_init+0x1f0>
   13874:	6883      	ldr	r3, [r0, #8]
   13876:	2b00      	cmp	r3, #0
   13878:	f000 80ea 	beq.w	13a50 <rpc_transport_ipc_rx_init+0x1f0>
   1387c:	6907      	ldr	r7, [r0, #16]
   1387e:	2f00      	cmp	r7, #0
   13880:	f000 80e6 	beq.w	13a50 <rpc_transport_ipc_rx_init+0x1f0>
   13884:	6a84      	ldr	r4, [r0, #40]	; 0x28
   13886:	2c00      	cmp	r4, #0
   13888:	f000 80e2 	beq.w	13a50 <rpc_transport_ipc_rx_init+0x1f0>
   1388c:	6844      	ldr	r4, [r0, #4]
   1388e:	2c1b      	cmp	r4, #27
   13890:	f240 80e3 	bls.w	13a5a <rpc_transport_ipc_rx_init+0x1fa>
   13894:	68c4      	ldr	r4, [r0, #12]
   13896:	2c0b      	cmp	r4, #11
   13898:	f240 80df 	bls.w	13a5a <rpc_transport_ipc_rx_init+0x1fa>
   1389c:	f8d0 e014 	ldr.w	lr, [r0, #20]
   138a0:	f1be 0f17 	cmp.w	lr, #23
   138a4:	f240 80d9 	bls.w	13a5a <rpc_transport_ipc_rx_init+0x1fa>
   138a8:	2600      	movs	r6, #0
   138aa:	4604      	mov	r4, r0
   138ac:	486f      	ldr	r0, [pc, #444]	; (13a6c <rpc_transport_ipc_rx_init+0x20c>)
   138ae:	e9cd 1200 	strd	r1, r2, [sp]
   138b2:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 13a8c <rpc_transport_ipc_rx_init+0x22c>
   138b6:	496e      	ldr	r1, [pc, #440]	; (13a70 <rpc_transport_ipc_rx_init+0x210>)
   138b8:	8006      	strh	r6, [r0, #0]
   138ba:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   138bc:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 13a90 <rpc_transport_ipc_rx_init+0x230>
   138c0:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 13a94 <rpc_transport_ipc_rx_init+0x234>
   138c4:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 13a98 <rpc_transport_ipc_rx_init+0x238>
   138c8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 13a9c <rpc_transport_ipc_rx_init+0x23c>
   138cc:	4672      	mov	r2, lr
   138ce:	600e      	str	r6, [r1, #0]
   138d0:	f8ca 0000 	str.w	r0, [sl]
   138d4:	4631      	mov	r1, r6
   138d6:	4638      	mov	r0, r7
   138d8:	f8cc 6000 	str.w	r6, [ip]
   138dc:	f8cb 3000 	str.w	r3, [fp]
   138e0:	f8c8 6000 	str.w	r6, [r8]
   138e4:	f8c9 6000 	str.w	r6, [r9]
   138e8:	f009 ffe2 	bl	1d8b0 <memset>
   138ec:	69e3      	ldr	r3, [r4, #28]
   138ee:	4638      	mov	r0, r7
   138f0:	603b      	str	r3, [r7, #0]
   138f2:	69a3      	ldr	r3, [r4, #24]
   138f4:	607b      	str	r3, [r7, #4]
   138f6:	f7ff fcd5 	bl	132a4 <ipc_trace_init>
   138fa:	2201      	movs	r2, #1
   138fc:	f04f 0c04 	mov.w	ip, #4
   13900:	4b5c      	ldr	r3, [pc, #368]	; (13a74 <rpc_transport_ipc_rx_init+0x214>)
   13902:	495d      	ldr	r1, [pc, #372]	; (13a78 <rpc_transport_ipc_rx_init+0x218>)
   13904:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   13908:	6809      	ldr	r1, [r1, #0]
   1390a:	2080      	movs	r0, #128	; 0x80
   1390c:	9104      	str	r1, [sp, #16]
   1390e:	495b      	ldr	r1, [pc, #364]	; (13a7c <rpc_transport_ipc_rx_init+0x21c>)
   13910:	f8dd e010 	ldr.w	lr, [sp, #16]
   13914:	f8c3 6614 	str.w	r6, [r3, #1556]	; 0x614
   13918:	6809      	ldr	r1, [r1, #0]
   1391a:	702e      	strb	r6, [r5, #0]
   1391c:	9103      	str	r1, [sp, #12]
   1391e:	706e      	strb	r6, [r5, #1]
   13920:	70ee      	strb	r6, [r5, #3]
   13922:	70aa      	strb	r2, [r5, #2]
   13924:	9903      	ldr	r1, [sp, #12]
   13926:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   13928:	f8db e000 	ldr.w	lr, [fp]
   1392c:	6069      	str	r1, [r5, #4]
   1392e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   13930:	9c01      	ldr	r4, [sp, #4]
   13932:	60a9      	str	r1, [r5, #8]
   13934:	60ec      	str	r4, [r5, #12]
   13936:	9c00      	ldr	r4, [sp, #0]
   13938:	4951      	ldr	r1, [pc, #324]	; (13a80 <rpc_transport_ipc_rx_init+0x220>)
   1393a:	61af      	str	r7, [r5, #24]
   1393c:	f8c5 e014 	str.w	lr, [r5, #20]
   13940:	612c      	str	r4, [r5, #16]
   13942:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   13946:	680c      	ldr	r4, [r1, #0]
   13948:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   1394c:	9405      	str	r4, [sp, #20]
   1394e:	9c05      	ldr	r4, [sp, #20]
   13950:	f8c3 c598 	str.w	ip, [r3, #1432]	; 0x598
   13954:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   13958:	f44f 6780 	mov.w	r7, #1024	; 0x400
   1395c:	9406      	str	r4, [sp, #24]
   1395e:	9c06      	ldr	r4, [sp, #24]
   13960:	2410      	movs	r4, #16
   13962:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   13966:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   1396a:	4d46      	ldr	r5, [pc, #280]	; (13a84 <rpc_transport_ipc_rx_init+0x224>)
   1396c:	9407      	str	r4, [sp, #28]
   1396e:	9c07      	ldr	r4, [sp, #28]
   13970:	2440      	movs	r4, #64	; 0x40
   13972:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   13976:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   1397a:	9408      	str	r4, [sp, #32]
   1397c:	9c08      	ldr	r4, [sp, #32]
   1397e:	f8c3 05ac 	str.w	r0, [r3, #1452]	; 0x5ac
   13982:	f8d1 04ac 	ldr.w	r0, [r1, #1196]	; 0x4ac
   13986:	9009      	str	r0, [sp, #36]	; 0x24
   13988:	9809      	ldr	r0, [sp, #36]	; 0x24
   1398a:	f8c3 6100 	str.w	r6, [r3, #256]	; 0x100
   1398e:	6808      	ldr	r0, [r1, #0]
   13990:	900a      	str	r0, [sp, #40]	; 0x28
   13992:	980a      	ldr	r0, [sp, #40]	; 0x28
   13994:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
   13998:	6888      	ldr	r0, [r1, #8]
   1399a:	900b      	str	r0, [sp, #44]	; 0x2c
   1399c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1399e:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
   139a2:	6908      	ldr	r0, [r1, #16]
   139a4:	900c      	str	r0, [sp, #48]	; 0x30
   139a6:	980c      	ldr	r0, [sp, #48]	; 0x30
   139a8:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
   139ac:	6988      	ldr	r0, [r1, #24]
   139ae:	900d      	str	r0, [sp, #52]	; 0x34
   139b0:	980d      	ldr	r0, [sp, #52]	; 0x34
   139b2:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
   139b6:	69c8      	ldr	r0, [r1, #28]
   139b8:	f501 7101 	add.w	r1, r1, #516	; 0x204
   139bc:	900e      	str	r0, [sp, #56]	; 0x38
   139be:	980e      	ldr	r0, [sp, #56]	; 0x38
   139c0:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   139c4:	4310      	orrs	r0, r2
   139c6:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
   139ca:	680c      	ldr	r4, [r1, #0]
   139cc:	482e      	ldr	r0, [pc, #184]	; (13a88 <rpc_transport_ipc_rx_init+0x228>)
   139ce:	940f      	str	r4, [sp, #60]	; 0x3c
   139d0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   139d2:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   139d6:	ea44 040c 	orr.w	r4, r4, ip
   139da:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   139de:	680c      	ldr	r4, [r1, #0]
   139e0:	9410      	str	r4, [sp, #64]	; 0x40
   139e2:	9c10      	ldr	r4, [sp, #64]	; 0x40
   139e4:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   139e8:	f044 0410 	orr.w	r4, r4, #16
   139ec:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   139f0:	680c      	ldr	r4, [r1, #0]
   139f2:	9411      	str	r4, [sp, #68]	; 0x44
   139f4:	9c11      	ldr	r4, [sp, #68]	; 0x44
   139f6:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   139fa:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   139fe:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   13a02:	680c      	ldr	r4, [r1, #0]
   13a04:	9412      	str	r4, [sp, #72]	; 0x48
   13a06:	9c12      	ldr	r4, [sp, #72]	; 0x48
   13a08:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   13a0c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   13a10:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   13a14:	f8da 3000 	ldr.w	r3, [sl]
   13a18:	6809      	ldr	r1, [r1, #0]
   13a1a:	015b      	lsls	r3, r3, #5
   13a1c:	9113      	str	r1, [sp, #76]	; 0x4c
   13a1e:	b2db      	uxtb	r3, r3
   13a20:	9913      	ldr	r1, [sp, #76]	; 0x4c
   13a22:	f8c8 2000 	str.w	r2, [r8]
   13a26:	f880 332a 	strb.w	r3, [r0, #810]	; 0x32a
   13a2a:	f8c0 7184 	str.w	r7, [r0, #388]	; 0x184
   13a2e:	6047      	str	r7, [r0, #4]
   13a30:	9602      	str	r6, [sp, #8]
   13a32:	f8c5 6610 	str.w	r6, [r5, #1552]	; 0x610
   13a36:	f8d5 3610 	ldr.w	r3, [r5, #1552]	; 0x610
   13a3a:	9302      	str	r3, [sp, #8]
   13a3c:	9b02      	ldr	r3, [sp, #8]
   13a3e:	f8d8 3000 	ldr.w	r3, [r8]
   13a42:	2b01      	cmp	r3, #1
   13a44:	d0fb      	beq.n	13a3e <rpc_transport_ipc_rx_init+0x1de>
   13a46:	f8d9 0000 	ldr.w	r0, [r9]
   13a4a:	b015      	add	sp, #84	; 0x54
   13a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a50:	f24c 000e 	movw	r0, #49166	; 0xc00e
   13a54:	b015      	add	sp, #84	; 0x54
   13a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a5a:	f24c 0009 	movw	r0, #49161	; 0xc009
   13a5e:	b015      	add	sp, #84	; 0x54
   13a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a64:	f24c 000e 	movw	r0, #49166	; 0xc00e
   13a68:	4770      	bx	lr
   13a6a:	bf00      	nop
   13a6c:	20024f28 	.word	0x20024f28
   13a70:	200208a8 	.word	0x200208a8
   13a74:	4002a000 	.word	0x4002a000
   13a78:	4002a610 	.word	0x4002a610
   13a7c:	4002a614 	.word	0x4002a614
   13a80:	4002a590 	.word	0x4002a590
   13a84:	40005000 	.word	0x40005000
   13a88:	e000e100 	.word	0xe000e100
   13a8c:	200208a0 	.word	0x200208a0
   13a90:	200208ac 	.word	0x200208ac
   13a94:	200208a4 	.word	0x200208a4
   13a98:	200208b0 	.word	0x200208b0
   13a9c:	2002089c 	.word	0x2002089c

00013aa0 <IPC_IRQHandler>:
   13aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13aa4:	f44f 6580 	mov.w	r5, #1024	; 0x400
   13aa8:	4ca7      	ldr	r4, [pc, #668]	; (13d48 <IPC_IRQHandler+0x2a8>)
   13aaa:	b087      	sub	sp, #28
   13aac:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   13ab0:	f3bf 8f4f 	dsb	sy
   13ab4:	f3bf 8f6f 	isb	sy
   13ab8:	4ea4      	ldr	r6, [pc, #656]	; (13d4c <IPC_IRQHandler+0x2ac>)
   13aba:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
   13abe:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   13ac2:	061f      	lsls	r7, r3, #24
   13ac4:	f100 80c8 	bmi.w	13c58 <IPC_IRQHandler+0x1b8>
   13ac8:	4ba0      	ldr	r3, [pc, #640]	; (13d4c <IPC_IRQHandler+0x2ac>)
   13aca:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   13ace:	07d0      	lsls	r0, r2, #31
   13ad0:	f100 80d4 	bmi.w	13c7c <IPC_IRQHandler+0x1dc>
   13ad4:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   13ad8:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   13adc:	f040 80b6 	bne.w	13c4c <IPC_IRQHandler+0x1ac>
   13ae0:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   13ae4:	0749      	lsls	r1, r1, #29
   13ae6:	f100 80e6 	bmi.w	13cb6 <IPC_IRQHandler+0x216>
   13aea:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   13aee:	06da      	lsls	r2, r3, #27
   13af0:	f140 809d 	bpl.w	13c2e <IPC_IRQHandler+0x18e>
   13af4:	2100      	movs	r1, #0
   13af6:	4a95      	ldr	r2, [pc, #596]	; (13d4c <IPC_IRQHandler+0x2ac>)
   13af8:	4b95      	ldr	r3, [pc, #596]	; (13d50 <IPC_IRQHandler+0x2b0>)
   13afa:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
   13afe:	681b      	ldr	r3, [r3, #0]
   13b00:	9304      	str	r3, [sp, #16]
   13b02:	9b04      	ldr	r3, [sp, #16]
   13b04:	f8df 8270 	ldr.w	r8, [pc, #624]	; 13d78 <IPC_IRQHandler+0x2d8>
   13b08:	4f92      	ldr	r7, [pc, #584]	; (13d54 <IPC_IRQHandler+0x2b4>)
   13b0a:	f8df 9270 	ldr.w	r9, [pc, #624]	; 13d7c <IPC_IRQHandler+0x2dc>
   13b0e:	f8d8 a000 	ldr.w	sl, [r8]
   13b12:	f8da 1000 	ldr.w	r1, [sl]
   13b16:	2900      	cmp	r1, #0
   13b18:	d03f      	beq.n	13b9a <IPC_IRQHandler+0xfa>
   13b1a:	2200      	movs	r2, #0
   13b1c:	4614      	mov	r4, r2
   13b1e:	e002      	b.n	13b26 <IPC_IRQHandler+0x86>
   13b20:	3401      	adds	r4, #1
   13b22:	428c      	cmp	r4, r1
   13b24:	d227      	bcs.n	13b76 <IPC_IRQHandler+0xd6>
   13b26:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   13b2a:	68ab      	ldr	r3, [r5, #8]
   13b2c:	2b00      	cmp	r3, #0
   13b2e:	d0f7      	beq.n	13b20 <IPC_IRQHandler+0x80>
   13b30:	686e      	ldr	r6, [r5, #4]
   13b32:	b2f6      	uxtb	r6, r6
   13b34:	2e01      	cmp	r6, #1
   13b36:	d1f3      	bne.n	13b20 <IPC_IRQHandler+0x80>
   13b38:	6868      	ldr	r0, [r5, #4]
   13b3a:	f8b9 3000 	ldrh.w	r3, [r9]
   13b3e:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   13b42:	d1ed      	bne.n	13b20 <IPC_IRQHandler+0x80>
   13b44:	686a      	ldr	r2, [r5, #4]
   13b46:	3301      	adds	r3, #1
   13b48:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   13b4c:	f042 0202 	orr.w	r2, r2, #2
   13b50:	606a      	str	r2, [r5, #4]
   13b52:	68a8      	ldr	r0, [r5, #8]
   13b54:	f8a9 3000 	strh.w	r3, [r9]
   13b58:	f7ff fe60 	bl	1381c <rpc_transport_rx_handle>
   13b5c:	4632      	mov	r2, r6
   13b5e:	b928      	cbnz	r0, 13b6c <IPC_IRQHandler+0xcc>
   13b60:	686b      	ldr	r3, [r5, #4]
   13b62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   13b66:	f043 0303 	orr.w	r3, r3, #3
   13b6a:	606b      	str	r3, [r5, #4]
   13b6c:	f8da 1000 	ldr.w	r1, [sl]
   13b70:	3401      	adds	r4, #1
   13b72:	428c      	cmp	r4, r1
   13b74:	d3d7      	bcc.n	13b26 <IPC_IRQHandler+0x86>
   13b76:	2a00      	cmp	r2, #0
   13b78:	d1cd      	bne.n	13b16 <IPC_IRQHandler+0x76>
   13b7a:	b171      	cbz	r1, 13b9a <IPC_IRQHandler+0xfa>
   13b7c:	4613      	mov	r3, r2
   13b7e:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
   13b82:	6890      	ldr	r0, [r2, #8]
   13b84:	3301      	adds	r3, #1
   13b86:	b130      	cbz	r0, 13b96 <IPC_IRQHandler+0xf6>
   13b88:	f8d2 b004 	ldr.w	fp, [r2, #4]
   13b8c:	fa5f fb8b 	uxtb.w	fp, fp
   13b90:	f1bb 0f01 	cmp.w	fp, #1
   13b94:	d003      	beq.n	13b9e <IPC_IRQHandler+0xfe>
   13b96:	428b      	cmp	r3, r1
   13b98:	d1f1      	bne.n	13b7e <IPC_IRQHandler+0xde>
   13b9a:	f04f 0b00 	mov.w	fp, #0
   13b9e:	f8d7 a000 	ldr.w	sl, [r7]
   13ba2:	f8da 2000 	ldr.w	r2, [sl]
   13ba6:	2a00      	cmp	r2, #0
   13ba8:	d03d      	beq.n	13c26 <IPC_IRQHandler+0x186>
   13baa:	2100      	movs	r1, #0
   13bac:	460c      	mov	r4, r1
   13bae:	e002      	b.n	13bb6 <IPC_IRQHandler+0x116>
   13bb0:	3401      	adds	r4, #1
   13bb2:	4294      	cmp	r4, r2
   13bb4:	d227      	bcs.n	13c06 <IPC_IRQHandler+0x166>
   13bb6:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   13bba:	68ab      	ldr	r3, [r5, #8]
   13bbc:	2b00      	cmp	r3, #0
   13bbe:	d0f7      	beq.n	13bb0 <IPC_IRQHandler+0x110>
   13bc0:	686e      	ldr	r6, [r5, #4]
   13bc2:	b2f6      	uxtb	r6, r6
   13bc4:	2e01      	cmp	r6, #1
   13bc6:	d1f3      	bne.n	13bb0 <IPC_IRQHandler+0x110>
   13bc8:	6868      	ldr	r0, [r5, #4]
   13bca:	f8b9 3000 	ldrh.w	r3, [r9]
   13bce:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   13bd2:	d1ed      	bne.n	13bb0 <IPC_IRQHandler+0x110>
   13bd4:	686a      	ldr	r2, [r5, #4]
   13bd6:	3301      	adds	r3, #1
   13bd8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   13bdc:	f042 0202 	orr.w	r2, r2, #2
   13be0:	606a      	str	r2, [r5, #4]
   13be2:	68a8      	ldr	r0, [r5, #8]
   13be4:	f8a9 3000 	strh.w	r3, [r9]
   13be8:	f7ff fe18 	bl	1381c <rpc_transport_rx_handle>
   13bec:	4631      	mov	r1, r6
   13bee:	b928      	cbnz	r0, 13bfc <IPC_IRQHandler+0x15c>
   13bf0:	686a      	ldr	r2, [r5, #4]
   13bf2:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
   13bf6:	f043 0303 	orr.w	r3, r3, #3
   13bfa:	606b      	str	r3, [r5, #4]
   13bfc:	f8da 2000 	ldr.w	r2, [sl]
   13c00:	3401      	adds	r4, #1
   13c02:	4294      	cmp	r4, r2
   13c04:	d3d7      	bcc.n	13bb6 <IPC_IRQHandler+0x116>
   13c06:	2900      	cmp	r1, #0
   13c08:	d1cd      	bne.n	13ba6 <IPC_IRQHandler+0x106>
   13c0a:	b162      	cbz	r2, 13c26 <IPC_IRQHandler+0x186>
   13c0c:	460b      	mov	r3, r1
   13c0e:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
   13c12:	6888      	ldr	r0, [r1, #8]
   13c14:	3301      	adds	r3, #1
   13c16:	b120      	cbz	r0, 13c22 <IPC_IRQHandler+0x182>
   13c18:	6849      	ldr	r1, [r1, #4]
   13c1a:	b2c9      	uxtb	r1, r1
   13c1c:	2901      	cmp	r1, #1
   13c1e:	f43f af76 	beq.w	13b0e <IPC_IRQHandler+0x6e>
   13c22:	4293      	cmp	r3, r2
   13c24:	d1f3      	bne.n	13c0e <IPC_IRQHandler+0x16e>
   13c26:	f1bb 0f00 	cmp.w	fp, #0
   13c2a:	f47f af70 	bne.w	13b0e <IPC_IRQHandler+0x6e>
   13c2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   13c32:	4b49      	ldr	r3, [pc, #292]	; (13d58 <IPC_IRQHandler+0x2b8>)
   13c34:	4a44      	ldr	r2, [pc, #272]	; (13d48 <IPC_IRQHandler+0x2a8>)
   13c36:	681b      	ldr	r3, [r3, #0]
   13c38:	015b      	lsls	r3, r3, #5
   13c3a:	b2db      	uxtb	r3, r3
   13c3c:	f882 332a 	strb.w	r3, [r2, #810]	; 0x32a
   13c40:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
   13c44:	6051      	str	r1, [r2, #4]
   13c46:	b007      	add	sp, #28
   13c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c4c:	2206      	movs	r2, #6
   13c4e:	4b43      	ldr	r3, [pc, #268]	; (13d5c <IPC_IRQHandler+0x2bc>)
   13c50:	601a      	str	r2, [r3, #0]
   13c52:	b007      	add	sp, #28
   13c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c58:	f7ff fc0c 	bl	13474 <ipc_trace_handle>
   13c5c:	f7ff fd78 	bl	13750 <rpc_trace_coredump_in_progress>
   13c60:	2800      	cmp	r0, #0
   13c62:	d149      	bne.n	13cf8 <IPC_IRQHandler+0x258>
   13c64:	4b3e      	ldr	r3, [pc, #248]	; (13d60 <IPC_IRQHandler+0x2c0>)
   13c66:	f8c6 011c 	str.w	r0, [r6, #284]	; 0x11c
   13c6a:	681b      	ldr	r3, [r3, #0]
   13c6c:	9301      	str	r3, [sp, #4]
   13c6e:	9b01      	ldr	r3, [sp, #4]
   13c70:	4b36      	ldr	r3, [pc, #216]	; (13d4c <IPC_IRQHandler+0x2ac>)
   13c72:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   13c76:	07d0      	lsls	r0, r2, #31
   13c78:	f57f af2c 	bpl.w	13ad4 <IPC_IRQHandler+0x34>
   13c7c:	2000      	movs	r0, #0
   13c7e:	f248 0202 	movw	r2, #32770	; 0x8002
   13c82:	4938      	ldr	r1, [pc, #224]	; (13d64 <IPC_IRQHandler+0x2c4>)
   13c84:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   13c88:	6809      	ldr	r1, [r1, #0]
   13c8a:	9102      	str	r1, [sp, #8]
   13c8c:	9902      	ldr	r1, [sp, #8]
   13c8e:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   13c92:	4293      	cmp	r3, r2
   13c94:	d040      	beq.n	13d18 <IPC_IRQHandler+0x278>
   13c96:	d81e      	bhi.n	13cd6 <IPC_IRQHandler+0x236>
   13c98:	2b00      	cmp	r3, #0
   13c9a:	d04f      	beq.n	13d3c <IPC_IRQHandler+0x29c>
   13c9c:	2b02      	cmp	r3, #2
   13c9e:	d942      	bls.n	13d26 <IPC_IRQHandler+0x286>
   13ca0:	f248 0201 	movw	r2, #32769	; 0x8001
   13ca4:	4293      	cmp	r3, r2
   13ca6:	d149      	bne.n	13d3c <IPC_IRQHandler+0x29c>
   13ca8:	2003      	movs	r0, #3
   13caa:	2207      	movs	r2, #7
   13cac:	492b      	ldr	r1, [pc, #172]	; (13d5c <IPC_IRQHandler+0x2bc>)
   13cae:	4b2e      	ldr	r3, [pc, #184]	; (13d68 <IPC_IRQHandler+0x2c8>)
   13cb0:	6008      	str	r0, [r1, #0]
   13cb2:	601a      	str	r2, [r3, #0]
   13cb4:	e7cd      	b.n	13c52 <IPC_IRQHandler+0x1b2>
   13cb6:	4d29      	ldr	r5, [pc, #164]	; (13d5c <IPC_IRQHandler+0x2bc>)
   13cb8:	6829      	ldr	r1, [r5, #0]
   13cba:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   13cbe:	2901      	cmp	r1, #1
   13cc0:	492a      	ldr	r1, [pc, #168]	; (13d6c <IPC_IRQHandler+0x2cc>)
   13cc2:	d05d      	beq.n	13d80 <IPC_IRQHandler+0x2e0>
   13cc4:	680a      	ldr	r2, [r1, #0]
   13cc6:	9203      	str	r2, [sp, #12]
   13cc8:	9a03      	ldr	r2, [sp, #12]
   13cca:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   13cce:	06db      	lsls	r3, r3, #27
   13cd0:	f53f af10 	bmi.w	13af4 <IPC_IRQHandler+0x54>
   13cd4:	e716      	b.n	13b04 <IPC_IRQHandler+0x64>
   13cd6:	4a26      	ldr	r2, [pc, #152]	; (13d70 <IPC_IRQHandler+0x2d0>)
   13cd8:	4293      	cmp	r3, r2
   13cda:	d814      	bhi.n	13d06 <IPC_IRQHandler+0x266>
   13cdc:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   13ce0:	d814      	bhi.n	13d0c <IPC_IRQHandler+0x26c>
   13ce2:	f248 0203 	movw	r2, #32771	; 0x8003
   13ce6:	4293      	cmp	r3, r2
   13ce8:	d128      	bne.n	13d3c <IPC_IRQHandler+0x29c>
   13cea:	2003      	movs	r0, #3
   13cec:	2204      	movs	r2, #4
   13cee:	491b      	ldr	r1, [pc, #108]	; (13d5c <IPC_IRQHandler+0x2bc>)
   13cf0:	4b1d      	ldr	r3, [pc, #116]	; (13d68 <IPC_IRQHandler+0x2c8>)
   13cf2:	6008      	str	r0, [r1, #0]
   13cf4:	601a      	str	r2, [r3, #0]
   13cf6:	e7ac      	b.n	13c52 <IPC_IRQHandler+0x1b2>
   13cf8:	23e0      	movs	r3, #224	; 0xe0
   13cfa:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
   13cfe:	6065      	str	r5, [r4, #4]
   13d00:	b007      	add	sp, #28
   13d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d06:	4a1b      	ldr	r2, [pc, #108]	; (13d74 <IPC_IRQHandler+0x2d4>)
   13d08:	4293      	cmp	r3, r2
   13d0a:	d117      	bne.n	13d3c <IPC_IRQHandler+0x29c>
   13d0c:	2003      	movs	r0, #3
   13d0e:	4913      	ldr	r1, [pc, #76]	; (13d5c <IPC_IRQHandler+0x2bc>)
   13d10:	4a15      	ldr	r2, [pc, #84]	; (13d68 <IPC_IRQHandler+0x2c8>)
   13d12:	6008      	str	r0, [r1, #0]
   13d14:	6013      	str	r3, [r2, #0]
   13d16:	e79c      	b.n	13c52 <IPC_IRQHandler+0x1b2>
   13d18:	2003      	movs	r0, #3
   13d1a:	2206      	movs	r2, #6
   13d1c:	490f      	ldr	r1, [pc, #60]	; (13d5c <IPC_IRQHandler+0x2bc>)
   13d1e:	4b12      	ldr	r3, [pc, #72]	; (13d68 <IPC_IRQHandler+0x2c8>)
   13d20:	6008      	str	r0, [r1, #0]
   13d22:	601a      	str	r2, [r3, #0]
   13d24:	e795      	b.n	13c52 <IPC_IRQHandler+0x1b2>
   13d26:	2303      	movs	r3, #3
   13d28:	4618      	mov	r0, r3
   13d2a:	490c      	ldr	r1, [pc, #48]	; (13d5c <IPC_IRQHandler+0x2bc>)
   13d2c:	4a0e      	ldr	r2, [pc, #56]	; (13d68 <IPC_IRQHandler+0x2c8>)
   13d2e:	600b      	str	r3, [r1, #0]
   13d30:	6013      	str	r3, [r2, #0]
   13d32:	b007      	add	sp, #28
   13d34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d38:	f7ff b91a 	b.w	12f70 <rpc_transport_ipc_fault_handler>
   13d3c:	2303      	movs	r3, #3
   13d3e:	4907      	ldr	r1, [pc, #28]	; (13d5c <IPC_IRQHandler+0x2bc>)
   13d40:	4a09      	ldr	r2, [pc, #36]	; (13d68 <IPC_IRQHandler+0x2c8>)
   13d42:	600b      	str	r3, [r1, #0]
   13d44:	6013      	str	r3, [r2, #0]
   13d46:	e784      	b.n	13c52 <IPC_IRQHandler+0x1b2>
   13d48:	e000e100 	.word	0xe000e100
   13d4c:	4002a000 	.word	0x4002a000
   13d50:	4002a110 	.word	0x4002a110
   13d54:	200208a8 	.word	0x200208a8
   13d58:	200208a0 	.word	0x200208a0
   13d5c:	200208a4 	.word	0x200208a4
   13d60:	4002a11c 	.word	0x4002a11c
   13d64:	4002a100 	.word	0x4002a100
   13d68:	2002089c 	.word	0x2002089c
   13d6c:	4002a108 	.word	0x4002a108
   13d70:	04400004 	.word	0x04400004
   13d74:	05500001 	.word	0x05500001
   13d78:	200208ac 	.word	0x200208ac
   13d7c:	20024f28 	.word	0x20024f28
   13d80:	4a37      	ldr	r2, [pc, #220]	; (13e60 <IPC_IRQHandler+0x3c0>)
   13d82:	680b      	ldr	r3, [r1, #0]
   13d84:	6812      	ldr	r2, [r2, #0]
   13d86:	9305      	str	r3, [sp, #20]
   13d88:	6893      	ldr	r3, [r2, #8]
   13d8a:	4836      	ldr	r0, [pc, #216]	; (13e64 <IPC_IRQHandler+0x3c4>)
   13d8c:	4936      	ldr	r1, [pc, #216]	; (13e68 <IPC_IRQHandler+0x3c8>)
   13d8e:	6003      	str	r3, [r0, #0]
   13d90:	6854      	ldr	r4, [r2, #4]
   13d92:	9a05      	ldr	r2, [sp, #20]
   13d94:	600c      	str	r4, [r1, #0]
   13d96:	b16b      	cbz	r3, 13db4 <IPC_IRQHandler+0x314>
   13d98:	b164      	cbz	r4, 13db4 <IPC_IRQHandler+0x314>
   13d9a:	681b      	ldr	r3, [r3, #0]
   13d9c:	2b10      	cmp	r3, #16
   13d9e:	d802      	bhi.n	13da6 <IPC_IRQHandler+0x306>
   13da0:	6822      	ldr	r2, [r4, #0]
   13da2:	2a10      	cmp	r2, #16
   13da4:	d90c      	bls.n	13dc0 <IPC_IRQHandler+0x320>
   13da6:	2103      	movs	r1, #3
   13da8:	f24c 0206 	movw	r2, #49158	; 0xc006
   13dac:	4b2f      	ldr	r3, [pc, #188]	; (13e6c <IPC_IRQHandler+0x3cc>)
   13dae:	6029      	str	r1, [r5, #0]
   13db0:	601a      	str	r2, [r3, #0]
   13db2:	e74e      	b.n	13c52 <IPC_IRQHandler+0x1b2>
   13db4:	2103      	movs	r1, #3
   13db6:	2210      	movs	r2, #16
   13db8:	4b2c      	ldr	r3, [pc, #176]	; (13e6c <IPC_IRQHandler+0x3cc>)
   13dba:	6029      	str	r1, [r5, #0]
   13dbc:	601a      	str	r2, [r3, #0]
   13dbe:	e748      	b.n	13c52 <IPC_IRQHandler+0x1b2>
   13dc0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 13e78 <IPC_IRQHandler+0x3d8>
   13dc4:	2a00      	cmp	r2, #0
   13dc6:	d042      	beq.n	13e4e <IPC_IRQHandler+0x3ae>
   13dc8:	2300      	movs	r3, #0
   13dca:	f104 0904 	add.w	r9, r4, #4
   13dce:	461e      	mov	r6, r3
   13dd0:	e002      	b.n	13dd8 <IPC_IRQHandler+0x338>
   13dd2:	3601      	adds	r6, #1
   13dd4:	4296      	cmp	r6, r2
   13dd6:	d22a      	bcs.n	13e2e <IPC_IRQHandler+0x38e>
   13dd8:	00f7      	lsls	r7, r6, #3
   13dda:	19e1      	adds	r1, r4, r7
   13ddc:	6888      	ldr	r0, [r1, #8]
   13dde:	2800      	cmp	r0, #0
   13de0:	d0f7      	beq.n	13dd2 <IPC_IRQHandler+0x332>
   13de2:	f8d1 a004 	ldr.w	sl, [r1, #4]
   13de6:	fa5f fa8a 	uxtb.w	sl, sl
   13dea:	f1ba 0f01 	cmp.w	sl, #1
   13dee:	d1f0      	bne.n	13dd2 <IPC_IRQHandler+0x332>
   13df0:	f8d1 c004 	ldr.w	ip, [r1, #4]
   13df4:	f8b8 0000 	ldrh.w	r0, [r8]
   13df8:	ebb0 4f1c 	cmp.w	r0, ip, lsr #16
   13dfc:	d1e9      	bne.n	13dd2 <IPC_IRQHandler+0x332>
   13dfe:	684b      	ldr	r3, [r1, #4]
   13e00:	1c42      	adds	r2, r0, #1
   13e02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   13e06:	f043 0302 	orr.w	r3, r3, #2
   13e0a:	604b      	str	r3, [r1, #4]
   13e0c:	6888      	ldr	r0, [r1, #8]
   13e0e:	f8a8 2000 	strh.w	r2, [r8]
   13e12:	f7ff fd03 	bl	1381c <rpc_transport_rx_handle>
   13e16:	4653      	mov	r3, sl
   13e18:	b938      	cbnz	r0, 13e2a <IPC_IRQHandler+0x38a>
   13e1a:	f859 2007 	ldr.w	r2, [r9, r7]
   13e1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   13e22:	f042 0203 	orr.w	r2, r2, #3
   13e26:	f849 2007 	str.w	r2, [r9, r7]
   13e2a:	6822      	ldr	r2, [r4, #0]
   13e2c:	e7d1      	b.n	13dd2 <IPC_IRQHandler+0x332>
   13e2e:	2b00      	cmp	r3, #0
   13e30:	d1c8      	bne.n	13dc4 <IPC_IRQHandler+0x324>
   13e32:	b912      	cbnz	r2, 13e3a <IPC_IRQHandler+0x39a>
   13e34:	e00b      	b.n	13e4e <IPC_IRQHandler+0x3ae>
   13e36:	4293      	cmp	r3, r2
   13e38:	d009      	beq.n	13e4e <IPC_IRQHandler+0x3ae>
   13e3a:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
   13e3e:	6888      	ldr	r0, [r1, #8]
   13e40:	3301      	adds	r3, #1
   13e42:	2800      	cmp	r0, #0
   13e44:	d0f7      	beq.n	13e36 <IPC_IRQHandler+0x396>
   13e46:	6849      	ldr	r1, [r1, #4]
   13e48:	b2c9      	uxtb	r1, r1
   13e4a:	2901      	cmp	r1, #1
   13e4c:	d1f3      	bne.n	13e36 <IPC_IRQHandler+0x396>
   13e4e:	2002      	movs	r0, #2
   13e50:	4b07      	ldr	r3, [pc, #28]	; (13e70 <IPC_IRQHandler+0x3d0>)
   13e52:	f44f 6180 	mov.w	r1, #1024	; 0x400
   13e56:	4a07      	ldr	r2, [pc, #28]	; (13e74 <IPC_IRQHandler+0x3d4>)
   13e58:	681b      	ldr	r3, [r3, #0]
   13e5a:	6028      	str	r0, [r5, #0]
   13e5c:	e6ec      	b.n	13c38 <IPC_IRQHandler+0x198>
   13e5e:	bf00      	nop
   13e60:	200208b0 	.word	0x200208b0
   13e64:	200208ac 	.word	0x200208ac
   13e68:	200208a8 	.word	0x200208a8
   13e6c:	2002089c 	.word	0x2002089c
   13e70:	200208a0 	.word	0x200208a0
   13e74:	e000e100 	.word	0xe000e100
   13e78:	20024f28 	.word	0x20024f28

00013e7c <rpc_transport_msg_free>:
   13e7c:	b430      	push	{r4, r5}
   13e7e:	4b18      	ldr	r3, [pc, #96]	; (13ee0 <rpc_transport_msg_free+0x64>)
   13e80:	681c      	ldr	r4, [r3, #0]
   13e82:	6825      	ldr	r5, [r4, #0]
   13e84:	b16d      	cbz	r5, 13ea2 <rpc_transport_msg_free+0x26>
   13e86:	68a3      	ldr	r3, [r4, #8]
   13e88:	4283      	cmp	r3, r0
   13e8a:	d027      	beq.n	13edc <rpc_transport_msg_free+0x60>
   13e8c:	2300      	movs	r3, #0
   13e8e:	e002      	b.n	13e96 <rpc_transport_msg_free+0x1a>
   13e90:	6889      	ldr	r1, [r1, #8]
   13e92:	4281      	cmp	r1, r0
   13e94:	d019      	beq.n	13eca <rpc_transport_msg_free+0x4e>
   13e96:	3301      	adds	r3, #1
   13e98:	00da      	lsls	r2, r3, #3
   13e9a:	42ab      	cmp	r3, r5
   13e9c:	eb04 0102 	add.w	r1, r4, r2
   13ea0:	d1f6      	bne.n	13e90 <rpc_transport_msg_free+0x14>
   13ea2:	4b10      	ldr	r3, [pc, #64]	; (13ee4 <rpc_transport_msg_free+0x68>)
   13ea4:	681c      	ldr	r4, [r3, #0]
   13ea6:	6825      	ldr	r5, [r4, #0]
   13ea8:	b16d      	cbz	r5, 13ec6 <rpc_transport_msg_free+0x4a>
   13eaa:	68a3      	ldr	r3, [r4, #8]
   13eac:	4283      	cmp	r3, r0
   13eae:	d015      	beq.n	13edc <rpc_transport_msg_free+0x60>
   13eb0:	2300      	movs	r3, #0
   13eb2:	e002      	b.n	13eba <rpc_transport_msg_free+0x3e>
   13eb4:	6889      	ldr	r1, [r1, #8]
   13eb6:	4281      	cmp	r1, r0
   13eb8:	d007      	beq.n	13eca <rpc_transport_msg_free+0x4e>
   13eba:	3301      	adds	r3, #1
   13ebc:	00da      	lsls	r2, r3, #3
   13ebe:	429d      	cmp	r5, r3
   13ec0:	eb04 0102 	add.w	r1, r4, r2
   13ec4:	d1f6      	bne.n	13eb4 <rpc_transport_msg_free+0x38>
   13ec6:	bc30      	pop	{r4, r5}
   13ec8:	4770      	bx	lr
   13eca:	3204      	adds	r2, #4
   13ecc:	58a3      	ldr	r3, [r4, r2]
   13ece:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   13ed2:	f043 0303 	orr.w	r3, r3, #3
   13ed6:	50a3      	str	r3, [r4, r2]
   13ed8:	bc30      	pop	{r4, r5}
   13eda:	4770      	bx	lr
   13edc:	2204      	movs	r2, #4
   13ede:	e7f5      	b.n	13ecc <rpc_transport_msg_free+0x50>
   13ee0:	200208ac 	.word	0x200208ac
   13ee4:	200208a8 	.word	0x200208a8

00013ee8 <rpc_transport_ipc_tx_init>:
   13ee8:	2800      	cmp	r0, #0
   13eea:	f000 80b8 	beq.w	1405e <rpc_transport_ipc_tx_init+0x176>
   13eee:	2900      	cmp	r1, #0
   13ef0:	f000 80b5 	beq.w	1405e <rpc_transport_ipc_tx_init+0x176>
   13ef4:	2a00      	cmp	r2, #0
   13ef6:	f000 80b2 	beq.w	1405e <rpc_transport_ipc_tx_init+0x176>
   13efa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13efe:	6a04      	ldr	r4, [r0, #32]
   13f00:	b085      	sub	sp, #20
   13f02:	2c00      	cmp	r4, #0
   13f04:	f000 80a6 	beq.w	14054 <rpc_transport_ipc_tx_init+0x16c>
   13f08:	6a40      	ldr	r0, [r0, #36]	; 0x24
   13f0a:	2800      	cmp	r0, #0
   13f0c:	f000 80a2 	beq.w	14054 <rpc_transport_ipc_tx_init+0x16c>
   13f10:	f642 4587 	movw	r5, #11399	; 0x2c87
   13f14:	f04f 0a00 	mov.w	sl, #0
   13f18:	4e55      	ldr	r6, [pc, #340]	; (14070 <rpc_transport_ipc_tx_init+0x188>)
   13f1a:	42a8      	cmp	r0, r5
   13f1c:	f886 a000 	strb.w	sl, [r6]
   13f20:	f240 80a0 	bls.w	14064 <rpc_transport_ipc_tx_init+0x17c>
   13f24:	2708      	movs	r7, #8
   13f26:	f8df 9180 	ldr.w	r9, [pc, #384]	; 140a8 <rpc_transport_ipc_tx_init+0x1c0>
   13f2a:	4620      	mov	r0, r4
   13f2c:	4616      	mov	r6, r2
   13f2e:	460d      	mov	r5, r1
   13f30:	2244      	movs	r2, #68	; 0x44
   13f32:	4651      	mov	r1, sl
   13f34:	f8c9 4000 	str.w	r4, [r9]
   13f38:	f009 fcba 	bl	1d8b0 <memset>
   13f3c:	f8d9 2000 	ldr.w	r2, [r9]
   13f40:	f104 0344 	add.w	r3, r4, #68	; 0x44
   13f44:	f8df 8164 	ldr.w	r8, [pc, #356]	; 140ac <rpc_transport_ipc_tx_init+0x1c4>
   13f48:	f882 a001 	strb.w	sl, [r2, #1]
   13f4c:	f882 a002 	strb.w	sl, [r2, #2]
   13f50:	f882 a003 	strb.w	sl, [r2, #3]
   13f54:	7017      	strb	r7, [r2, #0]
   13f56:	4618      	mov	r0, r3
   13f58:	2244      	movs	r2, #68	; 0x44
   13f5a:	4651      	mov	r1, sl
   13f5c:	f8c8 3000 	str.w	r3, [r8]
   13f60:	f009 fca6 	bl	1d8b0 <memset>
   13f64:	f8d8 2000 	ldr.w	r2, [r8]
   13f68:	f104 0388 	add.w	r3, r4, #136	; 0x88
   13f6c:	f8df b140 	ldr.w	fp, [pc, #320]	; 140b0 <rpc_transport_ipc_tx_init+0x1c8>
   13f70:	7017      	strb	r7, [r2, #0]
   13f72:	f882 a001 	strb.w	sl, [r2, #1]
   13f76:	f882 a002 	strb.w	sl, [r2, #2]
   13f7a:	f882 a003 	strb.w	sl, [r2, #3]
   13f7e:	4618      	mov	r0, r3
   13f80:	f44f 7200 	mov.w	r2, #512	; 0x200
   13f84:	4651      	mov	r1, sl
   13f86:	f8cb 3000 	str.w	r3, [fp]
   13f8a:	f009 fc91 	bl	1d8b0 <memset>
   13f8e:	4b39      	ldr	r3, [pc, #228]	; (14074 <rpc_transport_ipc_tx_init+0x18c>)
   13f90:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   13f94:	f8c3 c000 	str.w	ip, [r3]
   13f98:	4651      	mov	r1, sl
   13f9a:	4660      	mov	r0, ip
   13f9c:	f44f 7200 	mov.w	r2, #512	; 0x200
   13fa0:	f009 fc86 	bl	1d8b0 <memset>
   13fa4:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   13fa8:	2106      	movs	r1, #6
   13faa:	f04f 0e01 	mov.w	lr, #1
   13fae:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   13fb2:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   13fb6:	4b30      	ldr	r3, [pc, #192]	; (14078 <rpc_transport_ipc_tx_init+0x190>)
   13fb8:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   13fbc:	605c      	str	r4, [r3, #4]
   13fbe:	4c2f      	ldr	r4, [pc, #188]	; (1407c <rpc_transport_ipc_tx_init+0x194>)
   13fc0:	f8c3 c008 	str.w	ip, [r3, #8]
   13fc4:	8199      	strh	r1, [r3, #12]
   13fc6:	f8a3 e000 	strh.w	lr, [r3]
   13fca:	4619      	mov	r1, r3
   13fcc:	611c      	str	r4, [r3, #16]
   13fce:	4b2c      	ldr	r3, [pc, #176]	; (14080 <rpc_transport_ipc_tx_init+0x198>)
   13fd0:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 140b4 <rpc_transport_ipc_tx_init+0x1cc>
   13fd4:	6120      	str	r0, [r4, #16]
   13fd6:	482b      	ldr	r0, [pc, #172]	; (14084 <rpc_transport_ipc_tx_init+0x19c>)
   13fd8:	6063      	str	r3, [r4, #4]
   13fda:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   13fde:	60a0      	str	r0, [r4, #8]
   13fe0:	f8c4 c000 	str.w	ip, [r4]
   13fe4:	4828      	ldr	r0, [pc, #160]	; (14088 <rpc_transport_ipc_tx_init+0x1a0>)
   13fe6:	60e3      	str	r3, [r4, #12]
   13fe8:	6162      	str	r2, [r4, #20]
   13fea:	f7fd fe63 	bl	11cb4 <nrf_mem_register>
   13fee:	2800      	cmp	r0, #0
   13ff0:	d132      	bne.n	14058 <rpc_transport_ipc_tx_init+0x170>
   13ff2:	f04f 0c02 	mov.w	ip, #2
   13ff6:	2420      	movs	r4, #32
   13ff8:	f8d9 1000 	ldr.w	r1, [r9]
   13ffc:	f8db 2000 	ldr.w	r2, [fp]
   14000:	6029      	str	r1, [r5, #0]
   14002:	4b1c      	ldr	r3, [pc, #112]	; (14074 <rpc_transport_ipc_tx_init+0x18c>)
   14004:	f8d8 1000 	ldr.w	r1, [r8]
   14008:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 140b8 <rpc_transport_ipc_tx_init+0x1d0>
   1400c:	4d1f      	ldr	r5, [pc, #124]	; (1408c <rpc_transport_ipc_tx_init+0x1a4>)
   1400e:	6031      	str	r1, [r6, #0]
   14010:	f8ce 2000 	str.w	r2, [lr]
   14014:	681b      	ldr	r3, [r3, #0]
   14016:	491e      	ldr	r1, [pc, #120]	; (14090 <rpc_transport_ipc_tx_init+0x1a8>)
   14018:	f502 7200 	add.w	r2, r2, #512	; 0x200
   1401c:	602a      	str	r2, [r5, #0]
   1401e:	4e1d      	ldr	r6, [pc, #116]	; (14094 <rpc_transport_ipc_tx_init+0x1ac>)
   14020:	4a1d      	ldr	r2, [pc, #116]	; (14098 <rpc_transport_ipc_tx_init+0x1b0>)
   14022:	4d1e      	ldr	r5, [pc, #120]	; (1409c <rpc_transport_ipc_tx_init+0x1b4>)
   14024:	600b      	str	r3, [r1, #0]
   14026:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1402a:	491d      	ldr	r1, [pc, #116]	; (140a0 <rpc_transport_ipc_tx_init+0x1b8>)
   1402c:	6033      	str	r3, [r6, #0]
   1402e:	8028      	strh	r0, [r5, #0]
   14030:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   14034:	6809      	ldr	r1, [r1, #0]
   14036:	4b1b      	ldr	r3, [pc, #108]	; (140a4 <rpc_transport_ipc_tx_init+0x1bc>)
   14038:	9103      	str	r1, [sp, #12]
   1403a:	9903      	ldr	r1, [sp, #12]
   1403c:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   14040:	6819      	ldr	r1, [r3, #0]
   14042:	443b      	add	r3, r7
   14044:	9102      	str	r1, [sp, #8]
   14046:	9902      	ldr	r1, [sp, #8]
   14048:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   1404c:	681b      	ldr	r3, [r3, #0]
   1404e:	9301      	str	r3, [sp, #4]
   14050:	9b01      	ldr	r3, [sp, #4]
   14052:	e001      	b.n	14058 <rpc_transport_ipc_tx_init+0x170>
   14054:	f24c 0007 	movw	r0, #49159	; 0xc007
   14058:	b005      	add	sp, #20
   1405a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1405e:	f24c 000e 	movw	r0, #49166	; 0xc00e
   14062:	4770      	bx	lr
   14064:	f24c 0004 	movw	r0, #49156	; 0xc004
   14068:	b005      	add	sp, #20
   1406a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1406e:	bf00      	nop
   14070:	20024f3a 	.word	0x20024f3a
   14074:	200208dc 	.word	0x200208dc
   14078:	200208c8 	.word	0x200208c8
   1407c:	200208ec 	.word	0x200208ec
   14080:	00040080 	.word	0x00040080
   14084:	00040100 	.word	0x00040100
   14088:	200208b4 	.word	0x200208b4
   1408c:	200208c0 	.word	0x200208c0
   14090:	200208bc 	.word	0x200208bc
   14094:	200208b8 	.word	0x200208b8
   14098:	4002a000 	.word	0x4002a000
   1409c:	20024f2a 	.word	0x20024f2a
   140a0:	4002a514 	.word	0x4002a514
   140a4:	4002a51c 	.word	0x4002a51c
   140a8:	200208e8 	.word	0x200208e8
   140ac:	200208e0 	.word	0x200208e0
   140b0:	200208e4 	.word	0x200208e4
   140b4:	00080040 	.word	0x00080040
   140b8:	200208c4 	.word	0x200208c4

000140bc <rpc_transport_ipc_tx_send>:
   140bc:	2800      	cmp	r0, #0
   140be:	d05f      	beq.n	14180 <rpc_transport_ipc_tx_send+0xc4>
   140c0:	b470      	push	{r4, r5, r6}
   140c2:	4b33      	ldr	r3, [pc, #204]	; (14190 <rpc_transport_ipc_tx_send+0xd4>)
   140c4:	b083      	sub	sp, #12
   140c6:	681a      	ldr	r2, [r3, #0]
   140c8:	4b32      	ldr	r3, [pc, #200]	; (14194 <rpc_transport_ipc_tx_send+0xd8>)
   140ca:	4282      	cmp	r2, r0
   140cc:	d81e      	bhi.n	1410c <rpc_transport_ipc_tx_send+0x50>
   140ce:	681b      	ldr	r3, [r3, #0]
   140d0:	4931      	ldr	r1, [pc, #196]	; (14198 <rpc_transport_ipc_tx_send+0xdc>)
   140d2:	4283      	cmp	r3, r0
   140d4:	6809      	ldr	r1, [r1, #0]
   140d6:	d803      	bhi.n	140e0 <rpc_transport_ipc_tx_send+0x24>
   140d8:	4c30      	ldr	r4, [pc, #192]	; (1419c <rpc_transport_ipc_tx_send+0xe0>)
   140da:	6824      	ldr	r4, [r4, #0]
   140dc:	4284      	cmp	r4, r0
   140de:	d847      	bhi.n	14170 <rpc_transport_ipc_tx_send+0xb4>
   140e0:	4281      	cmp	r1, r0
   140e2:	d90e      	bls.n	14102 <rpc_transport_ipc_tx_send+0x46>
   140e4:	4b2e      	ldr	r3, [pc, #184]	; (141a0 <rpc_transport_ipc_tx_send+0xe4>)
   140e6:	781b      	ldrb	r3, [r3, #0]
   140e8:	2b00      	cmp	r3, #0
   140ea:	d14c      	bne.n	14186 <rpc_transport_ipc_tx_send+0xca>
   140ec:	1a83      	subs	r3, r0, r2
   140ee:	492d      	ldr	r1, [pc, #180]	; (141a4 <rpc_transport_ipc_tx_send+0xe8>)
   140f0:	099e      	lsrs	r6, r3, #6
   140f2:	069b      	lsls	r3, r3, #26
   140f4:	680a      	ldr	r2, [r1, #0]
   140f6:	4c2c      	ldr	r4, [pc, #176]	; (141a8 <rpc_transport_ipc_tx_send+0xec>)
   140f8:	f04f 0103 	mov.w	r1, #3
   140fc:	f04f 0502 	mov.w	r5, #2
   14100:	d014      	beq.n	1412c <rpc_transport_ipc_tx_send+0x70>
   14102:	f24c 0010 	movw	r0, #49168	; 0xc010
   14106:	b003      	add	sp, #12
   14108:	bc70      	pop	{r4, r5, r6}
   1410a:	4770      	bx	lr
   1410c:	681b      	ldr	r3, [r3, #0]
   1410e:	4298      	cmp	r0, r3
   14110:	d3f7      	bcc.n	14102 <rpc_transport_ipc_tx_send+0x46>
   14112:	4a22      	ldr	r2, [pc, #136]	; (1419c <rpc_transport_ipc_tx_send+0xe0>)
   14114:	6812      	ldr	r2, [r2, #0]
   14116:	4290      	cmp	r0, r2
   14118:	d2f3      	bcs.n	14102 <rpc_transport_ipc_tx_send+0x46>
   1411a:	2101      	movs	r1, #1
   1411c:	1ac3      	subs	r3, r0, r3
   1411e:	4a23      	ldr	r2, [pc, #140]	; (141ac <rpc_transport_ipc_tx_send+0xf0>)
   14120:	099e      	lsrs	r6, r3, #6
   14122:	069b      	lsls	r3, r3, #26
   14124:	460d      	mov	r5, r1
   14126:	6812      	ldr	r2, [r2, #0]
   14128:	4c21      	ldr	r4, [pc, #132]	; (141b0 <rpc_transport_ipc_tx_send+0xf4>)
   1412a:	d1ea      	bne.n	14102 <rpc_transport_ipc_tx_send+0x46>
   1412c:	6843      	ldr	r3, [r0, #4]
   1412e:	b2db      	uxtb	r3, r3
   14130:	429d      	cmp	r5, r3
   14132:	d120      	bne.n	14176 <rpc_transport_ipc_tx_send+0xba>
   14134:	2020      	movs	r0, #32
   14136:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
   1413a:	4d1e      	ldr	r5, [pc, #120]	; (141b4 <rpc_transport_ipc_tx_send+0xf8>)
   1413c:	6853      	ldr	r3, [r2, #4]
   1413e:	882e      	ldrh	r6, [r5, #0]
   14140:	b29b      	uxth	r3, r3
   14142:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   14146:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1414a:	f043 0301 	orr.w	r3, r3, #1
   1414e:	6053      	str	r3, [r2, #4]
   14150:	bf00      	nop
   14152:	3801      	subs	r0, #1
   14154:	d1fc      	bne.n	14150 <rpc_transport_ipc_tx_send+0x94>
   14156:	2201      	movs	r2, #1
   14158:	4b17      	ldr	r3, [pc, #92]	; (141b8 <rpc_transport_ipc_tx_send+0xfc>)
   1415a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
   1415e:	6822      	ldr	r2, [r4, #0]
   14160:	882b      	ldrh	r3, [r5, #0]
   14162:	9201      	str	r2, [sp, #4]
   14164:	9a01      	ldr	r2, [sp, #4]
   14166:	3301      	adds	r3, #1
   14168:	802b      	strh	r3, [r5, #0]
   1416a:	b003      	add	sp, #12
   1416c:	bc70      	pop	{r4, r5, r6}
   1416e:	4770      	bx	lr
   14170:	4281      	cmp	r1, r0
   14172:	d9d2      	bls.n	1411a <rpc_transport_ipc_tx_send+0x5e>
   14174:	e7b6      	b.n	140e4 <rpc_transport_ipc_tx_send+0x28>
   14176:	f24c 0007 	movw	r0, #49159	; 0xc007
   1417a:	b003      	add	sp, #12
   1417c:	bc70      	pop	{r4, r5, r6}
   1417e:	4770      	bx	lr
   14180:	f24c 000e 	movw	r0, #49166	; 0xc00e
   14184:	4770      	bx	lr
   14186:	f24c 000f 	movw	r0, #49167	; 0xc00f
   1418a:	b003      	add	sp, #12
   1418c:	bc70      	pop	{r4, r5, r6}
   1418e:	4770      	bx	lr
   14190:	200208c4 	.word	0x200208c4
   14194:	200208bc 	.word	0x200208bc
   14198:	200208c0 	.word	0x200208c0
   1419c:	200208b8 	.word	0x200208b8
   141a0:	20024f3a 	.word	0x20024f3a
   141a4:	200208e8 	.word	0x200208e8
   141a8:	4002a00c 	.word	0x4002a00c
   141ac:	200208e0 	.word	0x200208e0
   141b0:	4002a004 	.word	0x4002a004
   141b4:	20024f2a 	.word	0x20024f2a
   141b8:	4002a000 	.word	0x4002a000

000141bc <rpc_transport_ipc_tx_rpc_data_alloc>:
   141bc:	4b18      	ldr	r3, [pc, #96]	; (14220 <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   141be:	781b      	ldrb	r3, [r3, #0]
   141c0:	bb63      	cbnz	r3, 1421c <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   141c2:	b4f0      	push	{r4, r5, r6, r7}
   141c4:	4a17      	ldr	r2, [pc, #92]	; (14224 <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   141c6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   141ca:	6814      	ldr	r4, [r2, #0]
   141cc:	4b16      	ldr	r3, [pc, #88]	; (14228 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   141ce:	6825      	ldr	r5, [r4, #0]
   141d0:	681e      	ldr	r6, [r3, #0]
   141d2:	b1a5      	cbz	r5, 141fe <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   141d4:	4607      	mov	r7, r0
   141d6:	00c1      	lsls	r1, r0, #3
   141d8:	1863      	adds	r3, r4, r1
   141da:	685a      	ldr	r2, [r3, #4]
   141dc:	b2d2      	uxtb	r2, r2
   141de:	2a03      	cmp	r2, #3
   141e0:	d104      	bne.n	141ec <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   141e2:	609f      	str	r7, [r3, #8]
   141e4:	685a      	ldr	r2, [r3, #4]
   141e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   141ea:	605a      	str	r2, [r3, #4]
   141ec:	685a      	ldr	r2, [r3, #4]
   141ee:	f012 0fff 	tst.w	r2, #255	; 0xff
   141f2:	d101      	bne.n	141f8 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   141f4:	689b      	ldr	r3, [r3, #8]
   141f6:	b12b      	cbz	r3, 14204 <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   141f8:	3001      	adds	r0, #1
   141fa:	42a8      	cmp	r0, r5
   141fc:	d1eb      	bne.n	141d6 <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   141fe:	2000      	movs	r0, #0
   14200:	bcf0      	pop	{r4, r5, r6, r7}
   14202:	4770      	bx	lr
   14204:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   14208:	4421      	add	r1, r4
   1420a:	6088      	str	r0, [r1, #8]
   1420c:	6843      	ldr	r3, [r0, #4]
   1420e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   14212:	f043 0302 	orr.w	r3, r3, #2
   14216:	6043      	str	r3, [r0, #4]
   14218:	bcf0      	pop	{r4, r5, r6, r7}
   1421a:	4770      	bx	lr
   1421c:	2000      	movs	r0, #0
   1421e:	4770      	bx	lr
   14220:	20024f3a 	.word	0x20024f3a
   14224:	200208e8 	.word	0x200208e8
   14228:	200208e4 	.word	0x200208e4

0001422c <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   1422c:	b4f0      	push	{r4, r5, r6, r7}
   1422e:	4a15      	ldr	r2, [pc, #84]	; (14284 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   14230:	4b15      	ldr	r3, [pc, #84]	; (14288 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   14232:	6814      	ldr	r4, [r2, #0]
   14234:	681e      	ldr	r6, [r3, #0]
   14236:	6825      	ldr	r5, [r4, #0]
   14238:	b1ad      	cbz	r5, 14266 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   1423a:	2000      	movs	r0, #0
   1423c:	4607      	mov	r7, r0
   1423e:	00c1      	lsls	r1, r0, #3
   14240:	1863      	adds	r3, r4, r1
   14242:	685a      	ldr	r2, [r3, #4]
   14244:	b2d2      	uxtb	r2, r2
   14246:	2a03      	cmp	r2, #3
   14248:	d104      	bne.n	14254 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   1424a:	609f      	str	r7, [r3, #8]
   1424c:	685a      	ldr	r2, [r3, #4]
   1424e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   14252:	605a      	str	r2, [r3, #4]
   14254:	685a      	ldr	r2, [r3, #4]
   14256:	f012 0fff 	tst.w	r2, #255	; 0xff
   1425a:	d101      	bne.n	14260 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   1425c:	689b      	ldr	r3, [r3, #8]
   1425e:	b12b      	cbz	r3, 1426c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   14260:	3001      	adds	r0, #1
   14262:	4285      	cmp	r5, r0
   14264:	d1eb      	bne.n	1423e <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   14266:	2000      	movs	r0, #0
   14268:	bcf0      	pop	{r4, r5, r6, r7}
   1426a:	4770      	bx	lr
   1426c:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   14270:	4421      	add	r1, r4
   14272:	6088      	str	r0, [r1, #8]
   14274:	6843      	ldr	r3, [r0, #4]
   14276:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1427a:	f043 0301 	orr.w	r3, r3, #1
   1427e:	6043      	str	r3, [r0, #4]
   14280:	bcf0      	pop	{r4, r5, r6, r7}
   14282:	4770      	bx	lr
   14284:	200208e0 	.word	0x200208e0
   14288:	200208dc 	.word	0x200208dc

0001428c <rpc_transport_ipc_tx_data_alloc>:
   1428c:	4b03      	ldr	r3, [pc, #12]	; (1429c <rpc_transport_ipc_tx_data_alloc+0x10>)
   1428e:	781b      	ldrb	r3, [r3, #0]
   14290:	b90b      	cbnz	r3, 14296 <rpc_transport_ipc_tx_data_alloc+0xa>
   14292:	f7fd be3f 	b.w	11f14 <nrf_shared_malloc>
   14296:	2000      	movs	r0, #0
   14298:	4770      	bx	lr
   1429a:	bf00      	nop
   1429c:	20024f3a 	.word	0x20024f3a

000142a0 <ok_rsp_parser>:
   142a0:	2000      	movs	r0, #0
   142a2:	4770      	bx	lr

000142a4 <pdn_state_get_parser>:
   142a4:	2200      	movs	r2, #0
   142a6:	b570      	push	{r4, r5, r6, lr}
   142a8:	780b      	ldrb	r3, [r1, #0]
   142aa:	b084      	sub	sp, #16
   142ac:	460e      	mov	r6, r1
   142ae:	e9cd 2200 	strd	r2, r2, [sp]
   142b2:	e9cd 2202 	strd	r2, r2, [sp, #8]
   142b6:	b323      	cbz	r3, 14302 <pdn_state_get_parser+0x5e>
   142b8:	460c      	mov	r4, r1
   142ba:	2b20      	cmp	r3, #32
   142bc:	460d      	mov	r5, r1
   142be:	d01b      	beq.n	142f8 <pdn_state_get_parser+0x54>
   142c0:	700b      	strb	r3, [r1, #0]
   142c2:	3201      	adds	r2, #1
   142c4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   142c8:	18b1      	adds	r1, r6, r2
   142ca:	460d      	mov	r5, r1
   142cc:	2b00      	cmp	r3, #0
   142ce:	d1f4      	bne.n	142ba <pdn_state_get_parser+0x16>
   142d0:	2200      	movs	r2, #0
   142d2:	4b0d      	ldr	r3, [pc, #52]	; (14308 <pdn_state_get_parser+0x64>)
   142d4:	702a      	strb	r2, [r5, #0]
   142d6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   142da:	4a0c      	ldr	r2, [pc, #48]	; (1430c <pdn_state_get_parser+0x68>)
   142dc:	681b      	ldr	r3, [r3, #0]
   142de:	2110      	movs	r1, #16
   142e0:	4668      	mov	r0, sp
   142e2:	f7fa fcb5 	bl	ec50 <snprintf>
   142e6:	4669      	mov	r1, sp
   142e8:	4630      	mov	r0, r6
   142ea:	f009 fa4d 	bl	1d788 <strstr>
   142ee:	3000      	adds	r0, #0
   142f0:	bf18      	it	ne
   142f2:	2001      	movne	r0, #1
   142f4:	b004      	add	sp, #16
   142f6:	bd70      	pop	{r4, r5, r6, pc}
   142f8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   142fc:	2b00      	cmp	r3, #0
   142fe:	d1dc      	bne.n	142ba <pdn_state_get_parser+0x16>
   14300:	e7e6      	b.n	142d0 <pdn_state_get_parser+0x2c>
   14302:	460d      	mov	r5, r1
   14304:	e7e4      	b.n	142d0 <pdn_state_get_parser+0x2c>
   14306:	bf00      	nop
   14308:	20020a08 	.word	0x20020a08
   1430c:	0001f15c 	.word	0x0001f15c

00014310 <pdn_id_get_parser>:
   14310:	b570      	push	{r4, r5, r6, lr}
   14312:	780b      	ldrb	r3, [r1, #0]
   14314:	4606      	mov	r6, r0
   14316:	b313      	cbz	r3, 1435e <pdn_id_get_parser+0x4e>
   14318:	4608      	mov	r0, r1
   1431a:	2400      	movs	r4, #0
   1431c:	460a      	mov	r2, r1
   1431e:	2b20      	cmp	r3, #32
   14320:	4615      	mov	r5, r2
   14322:	d017      	beq.n	14354 <pdn_id_get_parser+0x44>
   14324:	7013      	strb	r3, [r2, #0]
   14326:	3401      	adds	r4, #1
   14328:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1432c:	190a      	adds	r2, r1, r4
   1432e:	4615      	mov	r5, r2
   14330:	2b00      	cmp	r3, #0
   14332:	d1f4      	bne.n	1431e <pdn_id_get_parser+0xe>
   14334:	2300      	movs	r3, #0
   14336:	4608      	mov	r0, r1
   14338:	702b      	strb	r3, [r5, #0]
   1433a:	213a      	movs	r1, #58	; 0x3a
   1433c:	f009 fa41 	bl	1d7c2 <strchr>
   14340:	b130      	cbz	r0, 14350 <pdn_id_get_parser+0x40>
   14342:	3001      	adds	r0, #1
   14344:	f009 f90b 	bl	1d55e <atoi>
   14348:	4b06      	ldr	r3, [pc, #24]	; (14364 <pdn_id_get_parser+0x54>)
   1434a:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   1434e:	6058      	str	r0, [r3, #4]
   14350:	2000      	movs	r0, #0
   14352:	bd70      	pop	{r4, r5, r6, pc}
   14354:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   14358:	2b00      	cmp	r3, #0
   1435a:	d1e0      	bne.n	1431e <pdn_id_get_parser+0xe>
   1435c:	e7ea      	b.n	14334 <pdn_id_get_parser+0x24>
   1435e:	460d      	mov	r5, r1
   14360:	e7e8      	b.n	14334 <pdn_id_get_parser+0x24>
   14362:	bf00      	nop
   14364:	20020a08 	.word	0x20020a08

00014368 <context_create_parser>:
   14368:	b570      	push	{r4, r5, r6, lr}
   1436a:	780b      	ldrb	r3, [r1, #0]
   1436c:	4606      	mov	r6, r0
   1436e:	b313      	cbz	r3, 143b6 <context_create_parser+0x4e>
   14370:	4608      	mov	r0, r1
   14372:	2400      	movs	r4, #0
   14374:	460a      	mov	r2, r1
   14376:	2b20      	cmp	r3, #32
   14378:	4615      	mov	r5, r2
   1437a:	d017      	beq.n	143ac <context_create_parser+0x44>
   1437c:	7013      	strb	r3, [r2, #0]
   1437e:	3401      	adds	r4, #1
   14380:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   14384:	190a      	adds	r2, r1, r4
   14386:	4615      	mov	r5, r2
   14388:	2b00      	cmp	r3, #0
   1438a:	d1f4      	bne.n	14376 <context_create_parser+0xe>
   1438c:	2300      	movs	r3, #0
   1438e:	4608      	mov	r0, r1
   14390:	702b      	strb	r3, [r5, #0]
   14392:	213a      	movs	r1, #58	; 0x3a
   14394:	f009 fa15 	bl	1d7c2 <strchr>
   14398:	b130      	cbz	r0, 143a8 <context_create_parser+0x40>
   1439a:	4b08      	ldr	r3, [pc, #32]	; (143bc <context_create_parser+0x54>)
   1439c:	3001      	adds	r0, #1
   1439e:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   143a2:	f009 f8dc 	bl	1d55e <atoi>
   143a6:	6020      	str	r0, [r4, #0]
   143a8:	2000      	movs	r0, #0
   143aa:	bd70      	pop	{r4, r5, r6, pc}
   143ac:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   143b0:	2b00      	cmp	r3, #0
   143b2:	d1e0      	bne.n	14376 <context_create_parser+0xe>
   143b4:	e7ea      	b.n	1438c <context_create_parser+0x24>
   143b6:	460d      	mov	r5, r1
   143b8:	e7e8      	b.n	1438c <context_create_parser+0x24>
   143ba:	bf00      	nop
   143bc:	20020a08 	.word	0x20020a08

000143c0 <pdn_interface_init>:
   143c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   143c4:	b510      	push	{r4, lr}
   143c6:	4c09      	ldr	r4, [pc, #36]	; (143ec <pdn_interface_init+0x2c>)
   143c8:	2228      	movs	r2, #40	; 0x28
   143ca:	2100      	movs	r1, #0
   143cc:	4808      	ldr	r0, [pc, #32]	; (143f0 <pdn_interface_init+0x30>)
   143ce:	6023      	str	r3, [r4, #0]
   143d0:	f009 fa6e 	bl	1d8b0 <memset>
   143d4:	f240 2201 	movw	r2, #513	; 0x201
   143d8:	2100      	movs	r1, #0
   143da:	2066      	movs	r0, #102	; 0x66
   143dc:	f7fd f83e 	bl	1145c <at_interface_open>
   143e0:	2800      	cmp	r0, #0
   143e2:	6020      	str	r0, [r4, #0]
   143e4:	bfb4      	ite	lt
   143e6:	2003      	movlt	r0, #3
   143e8:	2000      	movge	r0, #0
   143ea:	bd10      	pop	{r4, pc}
   143ec:	20020904 	.word	0x20020904
   143f0:	20020a08 	.word	0x20020a08

000143f4 <pdn_interface_open>:
   143f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   143f8:	2866      	cmp	r0, #102	; 0x66
   143fa:	b083      	sub	sp, #12
   143fc:	f040 80bc 	bne.w	14578 <pdn_interface_open+0x184>
   14400:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   14404:	f040 80aa 	bne.w	1455c <pdn_interface_open+0x168>
   14408:	f240 2302 	movw	r3, #514	; 0x202
   1440c:	429a      	cmp	r2, r3
   1440e:	f040 80a5 	bne.w	1455c <pdn_interface_open+0x168>
   14412:	4c62      	ldr	r4, [pc, #392]	; (1459c <pdn_interface_open+0x1a8>)
   14414:	6825      	ldr	r5, [r4, #0]
   14416:	b34d      	cbz	r5, 1446c <pdn_interface_open+0x78>
   14418:	6863      	ldr	r3, [r4, #4]
   1441a:	2b00      	cmp	r3, #0
   1441c:	f000 8098 	beq.w	14550 <pdn_interface_open+0x15c>
   14420:	68a3      	ldr	r3, [r4, #8]
   14422:	2b00      	cmp	r3, #0
   14424:	f000 8096 	beq.w	14554 <pdn_interface_open+0x160>
   14428:	68e3      	ldr	r3, [r4, #12]
   1442a:	2b00      	cmp	r3, #0
   1442c:	f000 8094 	beq.w	14558 <pdn_interface_open+0x164>
   14430:	6923      	ldr	r3, [r4, #16]
   14432:	2b00      	cmp	r3, #0
   14434:	f000 8098 	beq.w	14568 <pdn_interface_open+0x174>
   14438:	6963      	ldr	r3, [r4, #20]
   1443a:	2b00      	cmp	r3, #0
   1443c:	f000 8098 	beq.w	14570 <pdn_interface_open+0x17c>
   14440:	69a3      	ldr	r3, [r4, #24]
   14442:	2b00      	cmp	r3, #0
   14444:	f000 8096 	beq.w	14574 <pdn_interface_open+0x180>
   14448:	69e3      	ldr	r3, [r4, #28]
   1444a:	2b00      	cmp	r3, #0
   1444c:	f000 808e 	beq.w	1456c <pdn_interface_open+0x178>
   14450:	6a23      	ldr	r3, [r4, #32]
   14452:	b153      	cbz	r3, 1446a <pdn_interface_open+0x76>
   14454:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14456:	2509      	movs	r5, #9
   14458:	b143      	cbz	r3, 1446c <pdn_interface_open+0x78>
   1445a:	200c      	movs	r0, #12
   1445c:	f7fb f924 	bl	f6a8 <bsd_os_errno_set>
   14460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14464:	b003      	add	sp, #12
   14466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1446a:	2508      	movs	r5, #8
   1446c:	2074      	movs	r0, #116	; 0x74
   1446e:	f7fd fd3b 	bl	11ee8 <nrf_malloc>
   14472:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   14476:	2800      	cmp	r0, #0
   14478:	d0ef      	beq.n	1445a <pdn_interface_open+0x66>
   1447a:	2274      	movs	r2, #116	; 0x74
   1447c:	2100      	movs	r1, #0
   1447e:	f009 fa17 	bl	1d8b0 <memset>
   14482:	2101      	movs	r1, #1
   14484:	2003      	movs	r0, #3
   14486:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1448a:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1448e:	4a44      	ldr	r2, [pc, #272]	; (145a0 <pdn_interface_open+0x1ac>)
   14490:	6099      	str	r1, [r3, #8]
   14492:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   14496:	f44f 7180 	mov.w	r1, #256	; 0x100
   1449a:	6718      	str	r0, [r3, #112]	; 0x70
   1449c:	605f      	str	r7, [r3, #4]
   1449e:	4841      	ldr	r0, [pc, #260]	; (145a4 <pdn_interface_open+0x1b0>)
   144a0:	f8df 810c 	ldr.w	r8, [pc, #268]	; 145b0 <pdn_interface_open+0x1bc>
   144a4:	f7fa fbd4 	bl	ec50 <snprintf>
   144a8:	483e      	ldr	r0, [pc, #248]	; (145a4 <pdn_interface_open+0x1b0>)
   144aa:	f8d8 9000 	ldr.w	r9, [r8]
   144ae:	2600      	movs	r6, #0
   144b0:	f009 f9a2 	bl	1d7f8 <strlen>
   144b4:	4633      	mov	r3, r6
   144b6:	4602      	mov	r2, r0
   144b8:	493a      	ldr	r1, [pc, #232]	; (145a4 <pdn_interface_open+0x1b0>)
   144ba:	4648      	mov	r0, r9
   144bc:	9601      	str	r6, [sp, #4]
   144be:	9600      	str	r6, [sp, #0]
   144c0:	f7fc ff76 	bl	113b0 <at_interface_write>
   144c4:	4681      	mov	r9, r0
   144c6:	4837      	ldr	r0, [pc, #220]	; (145a4 <pdn_interface_open+0x1b0>)
   144c8:	f009 f996 	bl	1d7f8 <strlen>
   144cc:	4548      	cmp	r0, r9
   144ce:	d159      	bne.n	14584 <pdn_interface_open+0x190>
   144d0:	4633      	mov	r3, r6
   144d2:	e9cd 6600 	strd	r6, r6, [sp]
   144d6:	f44f 7280 	mov.w	r2, #256	; 0x100
   144da:	4932      	ldr	r1, [pc, #200]	; (145a4 <pdn_interface_open+0x1b0>)
   144dc:	f8d8 0000 	ldr.w	r0, [r8]
   144e0:	f7fd f84e 	bl	11580 <at_interface_read>
   144e4:	4606      	mov	r6, r0
   144e6:	4830      	ldr	r0, [pc, #192]	; (145a8 <pdn_interface_open+0x1b4>)
   144e8:	f009 f986 	bl	1d7f8 <strlen>
   144ec:	4286      	cmp	r6, r0
   144ee:	db15      	blt.n	1451c <pdn_interface_open+0x128>
   144f0:	4602      	mov	r2, r0
   144f2:	492c      	ldr	r1, [pc, #176]	; (145a4 <pdn_interface_open+0x1b0>)
   144f4:	482c      	ldr	r0, [pc, #176]	; (145a8 <pdn_interface_open+0x1b4>)
   144f6:	f009 f992 	bl	1d81e <strncmp>
   144fa:	b978      	cbnz	r0, 1451c <pdn_interface_open+0x128>
   144fc:	4929      	ldr	r1, [pc, #164]	; (145a4 <pdn_interface_open+0x1b0>)
   144fe:	4628      	mov	r0, r5
   14500:	f7ff ff32 	bl	14368 <context_create_parser>
   14504:	b9b0      	cbnz	r0, 14534 <pdn_interface_open+0x140>
   14506:	2202      	movs	r2, #2
   14508:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1450c:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   14510:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   14514:	609a      	str	r2, [r3, #8]
   14516:	b003      	add	sp, #12
   14518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1451c:	4823      	ldr	r0, [pc, #140]	; (145ac <pdn_interface_open+0x1b8>)
   1451e:	f009 f96b 	bl	1d7f8 <strlen>
   14522:	4920      	ldr	r1, [pc, #128]	; (145a4 <pdn_interface_open+0x1b0>)
   14524:	4602      	mov	r2, r0
   14526:	4821      	ldr	r0, [pc, #132]	; (145ac <pdn_interface_open+0x1b8>)
   14528:	f009 f979 	bl	1d81e <strncmp>
   1452c:	b960      	cbnz	r0, 14548 <pdn_interface_open+0x154>
   1452e:	2008      	movs	r0, #8
   14530:	f7fb f8ba 	bl	f6a8 <bsd_os_errno_set>
   14534:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   14538:	f7fd fce0 	bl	11efc <nrf_free>
   1453c:	2300      	movs	r3, #0
   1453e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14542:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   14546:	e78d      	b.n	14464 <pdn_interface_open+0x70>
   14548:	2005      	movs	r0, #5
   1454a:	f7fb f8ad 	bl	f6a8 <bsd_os_errno_set>
   1454e:	e7f1      	b.n	14534 <pdn_interface_open+0x140>
   14550:	2501      	movs	r5, #1
   14552:	e78b      	b.n	1446c <pdn_interface_open+0x78>
   14554:	2502      	movs	r5, #2
   14556:	e789      	b.n	1446c <pdn_interface_open+0x78>
   14558:	2503      	movs	r5, #3
   1455a:	e787      	b.n	1446c <pdn_interface_open+0x78>
   1455c:	2016      	movs	r0, #22
   1455e:	f7fb f8a3 	bl	f6a8 <bsd_os_errno_set>
   14562:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14566:	e77d      	b.n	14464 <pdn_interface_open+0x70>
   14568:	2504      	movs	r5, #4
   1456a:	e77f      	b.n	1446c <pdn_interface_open+0x78>
   1456c:	2507      	movs	r5, #7
   1456e:	e77d      	b.n	1446c <pdn_interface_open+0x78>
   14570:	2505      	movs	r5, #5
   14572:	e77b      	b.n	1446c <pdn_interface_open+0x78>
   14574:	2506      	movs	r5, #6
   14576:	e779      	b.n	1446c <pdn_interface_open+0x78>
   14578:	202f      	movs	r0, #47	; 0x2f
   1457a:	f7fb f895 	bl	f6a8 <bsd_os_errno_set>
   1457e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14582:	e76f      	b.n	14464 <pdn_interface_open+0x70>
   14584:	2005      	movs	r0, #5
   14586:	f7fb f88f 	bl	f6a8 <bsd_os_errno_set>
   1458a:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1458e:	f7fd fcb5 	bl	11efc <nrf_free>
   14592:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   14596:	4638      	mov	r0, r7
   14598:	e764      	b.n	14464 <pdn_interface_open+0x70>
   1459a:	bf00      	nop
   1459c:	20020a08 	.word	0x20020a08
   145a0:	0001f138 	.word	0x0001f138
   145a4:	20020908 	.word	0x20020908
   145a8:	0001f148 	.word	0x0001f148
   145ac:	0001f154 	.word	0x0001f154
   145b0:	20020904 	.word	0x20020904

000145b4 <pdn_interface_connect>:
   145b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145b8:	b083      	sub	sp, #12
   145ba:	2900      	cmp	r1, #0
   145bc:	f000 813e 	beq.w	1483c <pdn_interface_connect+0x288>
   145c0:	2a64      	cmp	r2, #100	; 0x64
   145c2:	4691      	mov	r9, r2
   145c4:	f200 813a 	bhi.w	1483c <pdn_interface_connect+0x288>
   145c8:	4605      	mov	r5, r0
   145ca:	4608      	mov	r0, r1
   145cc:	4688      	mov	r8, r1
   145ce:	f009 f913 	bl	1d7f8 <strlen>
   145d2:	2864      	cmp	r0, #100	; 0x64
   145d4:	f200 8132 	bhi.w	1483c <pdn_interface_connect+0x288>
   145d8:	4ba5      	ldr	r3, [pc, #660]	; (14870 <pdn_interface_connect+0x2bc>)
   145da:	43ab      	bics	r3, r5
   145dc:	f040 8125 	bne.w	1482a <pdn_interface_connect+0x276>
   145e0:	f025 45f1 	bic.w	r5, r5, #2021654528	; 0x78800000
   145e4:	f425 15d0 	bic.w	r5, r5, #1703936	; 0x1a0000
   145e8:	2d09      	cmp	r5, #9
   145ea:	f300 811e 	bgt.w	1482a <pdn_interface_connect+0x276>
   145ee:	4fa1      	ldr	r7, [pc, #644]	; (14874 <pdn_interface_connect+0x2c0>)
   145f0:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   145f4:	2b00      	cmp	r3, #0
   145f6:	f000 8118 	beq.w	1482a <pdn_interface_connect+0x276>
   145fa:	689a      	ldr	r2, [r3, #8]
   145fc:	2a00      	cmp	r2, #0
   145fe:	f000 8114 	beq.w	1482a <pdn_interface_connect+0x276>
   14602:	2d00      	cmp	r5, #0
   14604:	f2c0 8111 	blt.w	1482a <pdn_interface_connect+0x276>
   14608:	689b      	ldr	r3, [r3, #8]
   1460a:	2b02      	cmp	r3, #2
   1460c:	f040 810d 	bne.w	1482a <pdn_interface_connect+0x276>
   14610:	4e99      	ldr	r6, [pc, #612]	; (14878 <pdn_interface_connect+0x2c4>)
   14612:	4a9a      	ldr	r2, [pc, #616]	; (1487c <pdn_interface_connect+0x2c8>)
   14614:	f44f 7180 	mov.w	r1, #256	; 0x100
   14618:	4630      	mov	r0, r6
   1461a:	f7fa fb19 	bl	ec50 <snprintf>
   1461e:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   14622:	4604      	mov	r4, r0
   14624:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   14628:	681b      	ldr	r3, [r3, #0]
   1462a:	4a95      	ldr	r2, [pc, #596]	; (14880 <pdn_interface_connect+0x2cc>)
   1462c:	1830      	adds	r0, r6, r0
   1462e:	f7fa fb0f 	bl	ec50 <snprintf>
   14632:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   14636:	4404      	add	r4, r0
   14638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1463a:	f003 0203 	and.w	r2, r3, #3
   1463e:	2a03      	cmp	r2, #3
   14640:	f000 80ea 	beq.w	14818 <pdn_interface_connect+0x264>
   14644:	079b      	lsls	r3, r3, #30
   14646:	eb06 0004 	add.w	r0, r6, r4
   1464a:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1464e:	bf4c      	ite	mi
   14650:	4b8c      	ldrmi	r3, [pc, #560]	; (14884 <pdn_interface_connect+0x2d0>)
   14652:	4b8d      	ldrpl	r3, [pc, #564]	; (14888 <pdn_interface_connect+0x2d4>)
   14654:	4a8d      	ldr	r2, [pc, #564]	; (1488c <pdn_interface_connect+0x2d8>)
   14656:	f7fa fafb 	bl	ec50 <snprintf>
   1465a:	4404      	add	r4, r0
   1465c:	4643      	mov	r3, r8
   1465e:	4a8c      	ldr	r2, [pc, #560]	; (14890 <pdn_interface_connect+0x2dc>)
   14660:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   14664:	1930      	adds	r0, r6, r4
   14666:	f7fa faf3 	bl	ec50 <snprintf>
   1466a:	4420      	add	r0, r4
   1466c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   14670:	f300 80f7 	bgt.w	14862 <pdn_interface_connect+0x2ae>
   14674:	f8df a238 	ldr.w	sl, [pc, #568]	; 148b0 <pdn_interface_connect+0x2fc>
   14678:	487f      	ldr	r0, [pc, #508]	; (14878 <pdn_interface_connect+0x2c4>)
   1467a:	f8da b000 	ldr.w	fp, [sl]
   1467e:	2400      	movs	r4, #0
   14680:	f009 f8ba 	bl	1d7f8 <strlen>
   14684:	4623      	mov	r3, r4
   14686:	4602      	mov	r2, r0
   14688:	497b      	ldr	r1, [pc, #492]	; (14878 <pdn_interface_connect+0x2c4>)
   1468a:	4658      	mov	r0, fp
   1468c:	9401      	str	r4, [sp, #4]
   1468e:	9400      	str	r4, [sp, #0]
   14690:	f7fc fe8e 	bl	113b0 <at_interface_write>
   14694:	4683      	mov	fp, r0
   14696:	4878      	ldr	r0, [pc, #480]	; (14878 <pdn_interface_connect+0x2c4>)
   14698:	f009 f8ae 	bl	1d7f8 <strlen>
   1469c:	4558      	cmp	r0, fp
   1469e:	d008      	beq.n	146b2 <pdn_interface_connect+0xfe>
   146a0:	2005      	movs	r0, #5
   146a2:	f7fb f801 	bl	f6a8 <bsd_os_errno_set>
   146a6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   146aa:	4620      	mov	r0, r4
   146ac:	b003      	add	sp, #12
   146ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146b2:	4623      	mov	r3, r4
   146b4:	e9cd 4400 	strd	r4, r4, [sp]
   146b8:	f44f 7280 	mov.w	r2, #256	; 0x100
   146bc:	496e      	ldr	r1, [pc, #440]	; (14878 <pdn_interface_connect+0x2c4>)
   146be:	f8da 0000 	ldr.w	r0, [sl]
   146c2:	f7fc ff5d 	bl	11580 <at_interface_read>
   146c6:	4604      	mov	r4, r0
   146c8:	4872      	ldr	r0, [pc, #456]	; (14894 <pdn_interface_connect+0x2e0>)
   146ca:	f009 f895 	bl	1d7f8 <strlen>
   146ce:	4284      	cmp	r4, r0
   146d0:	f2c0 8091 	blt.w	147f6 <pdn_interface_connect+0x242>
   146d4:	4602      	mov	r2, r0
   146d6:	4968      	ldr	r1, [pc, #416]	; (14878 <pdn_interface_connect+0x2c4>)
   146d8:	486e      	ldr	r0, [pc, #440]	; (14894 <pdn_interface_connect+0x2e0>)
   146da:	f009 f8a0 	bl	1d81e <strncmp>
   146de:	2800      	cmp	r0, #0
   146e0:	f040 8089 	bne.w	147f6 <pdn_interface_connect+0x242>
   146e4:	4964      	ldr	r1, [pc, #400]	; (14878 <pdn_interface_connect+0x2c4>)
   146e6:	4628      	mov	r0, r5
   146e8:	f7ff fdda 	bl	142a0 <ok_rsp_parser>
   146ec:	4604      	mov	r4, r0
   146ee:	2800      	cmp	r0, #0
   146f0:	d1db      	bne.n	146aa <pdn_interface_connect+0xf6>
   146f2:	4a69      	ldr	r2, [pc, #420]	; (14898 <pdn_interface_connect+0x2e4>)
   146f4:	f44f 7180 	mov.w	r1, #256	; 0x100
   146f8:	485f      	ldr	r0, [pc, #380]	; (14878 <pdn_interface_connect+0x2c4>)
   146fa:	f7fa faa9 	bl	ec50 <snprintf>
   146fe:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   14702:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   14706:	681b      	ldr	r3, [r3, #0]
   14708:	4a64      	ldr	r2, [pc, #400]	; (1489c <pdn_interface_connect+0x2e8>)
   1470a:	4430      	add	r0, r6
   1470c:	f7fa faa0 	bl	ec50 <snprintf>
   14710:	4859      	ldr	r0, [pc, #356]	; (14878 <pdn_interface_connect+0x2c4>)
   14712:	f8da b000 	ldr.w	fp, [sl]
   14716:	f009 f86f 	bl	1d7f8 <strlen>
   1471a:	4623      	mov	r3, r4
   1471c:	4602      	mov	r2, r0
   1471e:	4956      	ldr	r1, [pc, #344]	; (14878 <pdn_interface_connect+0x2c4>)
   14720:	4658      	mov	r0, fp
   14722:	9401      	str	r4, [sp, #4]
   14724:	9400      	str	r4, [sp, #0]
   14726:	f7fc fe43 	bl	113b0 <at_interface_write>
   1472a:	4683      	mov	fp, r0
   1472c:	4852      	ldr	r0, [pc, #328]	; (14878 <pdn_interface_connect+0x2c4>)
   1472e:	f009 f863 	bl	1d7f8 <strlen>
   14732:	4558      	cmp	r0, fp
   14734:	d1b4      	bne.n	146a0 <pdn_interface_connect+0xec>
   14736:	4623      	mov	r3, r4
   14738:	f44f 7280 	mov.w	r2, #256	; 0x100
   1473c:	494e      	ldr	r1, [pc, #312]	; (14878 <pdn_interface_connect+0x2c4>)
   1473e:	f8da 0000 	ldr.w	r0, [sl]
   14742:	e9cd 4400 	strd	r4, r4, [sp]
   14746:	f7fc ff1b 	bl	11580 <at_interface_read>
   1474a:	4683      	mov	fp, r0
   1474c:	4851      	ldr	r0, [pc, #324]	; (14894 <pdn_interface_connect+0x2e0>)
   1474e:	f009 f853 	bl	1d7f8 <strlen>
   14752:	4583      	cmp	fp, r0
   14754:	db4f      	blt.n	147f6 <pdn_interface_connect+0x242>
   14756:	4602      	mov	r2, r0
   14758:	4947      	ldr	r1, [pc, #284]	; (14878 <pdn_interface_connect+0x2c4>)
   1475a:	484e      	ldr	r0, [pc, #312]	; (14894 <pdn_interface_connect+0x2e0>)
   1475c:	f009 f85f 	bl	1d81e <strncmp>
   14760:	2800      	cmp	r0, #0
   14762:	d148      	bne.n	147f6 <pdn_interface_connect+0x242>
   14764:	2103      	movs	r1, #3
   14766:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1476a:	464a      	mov	r2, r9
   1476c:	6099      	str	r1, [r3, #8]
   1476e:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   14772:	4641      	mov	r1, r8
   14774:	300c      	adds	r0, #12
   14776:	f009 f871 	bl	1d85c <memcpy>
   1477a:	4a49      	ldr	r2, [pc, #292]	; (148a0 <pdn_interface_connect+0x2ec>)
   1477c:	f44f 7180 	mov.w	r1, #256	; 0x100
   14780:	483d      	ldr	r0, [pc, #244]	; (14878 <pdn_interface_connect+0x2c4>)
   14782:	f7fa fa65 	bl	ec50 <snprintf>
   14786:	4601      	mov	r1, r0
   14788:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1478c:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   14790:	681b      	ldr	r3, [r3, #0]
   14792:	4a42      	ldr	r2, [pc, #264]	; (1489c <pdn_interface_connect+0x2e8>)
   14794:	1830      	adds	r0, r6, r0
   14796:	f7fa fa5b 	bl	ec50 <snprintf>
   1479a:	4837      	ldr	r0, [pc, #220]	; (14878 <pdn_interface_connect+0x2c4>)
   1479c:	f8da 6000 	ldr.w	r6, [sl]
   147a0:	f009 f82a 	bl	1d7f8 <strlen>
   147a4:	4623      	mov	r3, r4
   147a6:	4602      	mov	r2, r0
   147a8:	4933      	ldr	r1, [pc, #204]	; (14878 <pdn_interface_connect+0x2c4>)
   147aa:	4630      	mov	r0, r6
   147ac:	9401      	str	r4, [sp, #4]
   147ae:	9400      	str	r4, [sp, #0]
   147b0:	f7fc fdfe 	bl	113b0 <at_interface_write>
   147b4:	4606      	mov	r6, r0
   147b6:	4830      	ldr	r0, [pc, #192]	; (14878 <pdn_interface_connect+0x2c4>)
   147b8:	f009 f81e 	bl	1d7f8 <strlen>
   147bc:	42b0      	cmp	r0, r6
   147be:	d153      	bne.n	14868 <pdn_interface_connect+0x2b4>
   147c0:	4623      	mov	r3, r4
   147c2:	f44f 7280 	mov.w	r2, #256	; 0x100
   147c6:	492c      	ldr	r1, [pc, #176]	; (14878 <pdn_interface_connect+0x2c4>)
   147c8:	f8da 0000 	ldr.w	r0, [sl]
   147cc:	e9cd 4400 	strd	r4, r4, [sp]
   147d0:	f7fc fed6 	bl	11580 <at_interface_read>
   147d4:	4606      	mov	r6, r0
   147d6:	4833      	ldr	r0, [pc, #204]	; (148a4 <pdn_interface_connect+0x2f0>)
   147d8:	f009 f80e 	bl	1d7f8 <strlen>
   147dc:	4286      	cmp	r6, r0
   147de:	db33      	blt.n	14848 <pdn_interface_connect+0x294>
   147e0:	4602      	mov	r2, r0
   147e2:	4925      	ldr	r1, [pc, #148]	; (14878 <pdn_interface_connect+0x2c4>)
   147e4:	482f      	ldr	r0, [pc, #188]	; (148a4 <pdn_interface_connect+0x2f0>)
   147e6:	f009 f81a 	bl	1d81e <strncmp>
   147ea:	bb68      	cbnz	r0, 14848 <pdn_interface_connect+0x294>
   147ec:	4628      	mov	r0, r5
   147ee:	4922      	ldr	r1, [pc, #136]	; (14878 <pdn_interface_connect+0x2c4>)
   147f0:	f7ff fd8e 	bl	14310 <pdn_id_get_parser>
   147f4:	e759      	b.n	146aa <pdn_interface_connect+0xf6>
   147f6:	482c      	ldr	r0, [pc, #176]	; (148a8 <pdn_interface_connect+0x2f4>)
   147f8:	f008 fffe 	bl	1d7f8 <strlen>
   147fc:	491e      	ldr	r1, [pc, #120]	; (14878 <pdn_interface_connect+0x2c4>)
   147fe:	4602      	mov	r2, r0
   14800:	4829      	ldr	r0, [pc, #164]	; (148a8 <pdn_interface_connect+0x2f4>)
   14802:	f009 f80c 	bl	1d81e <strncmp>
   14806:	2800      	cmp	r0, #0
   14808:	f47f af4a 	bne.w	146a0 <pdn_interface_connect+0xec>
   1480c:	2008      	movs	r0, #8
   1480e:	f7fa ff4b 	bl	f6a8 <bsd_os_errno_set>
   14812:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   14816:	e748      	b.n	146aa <pdn_interface_connect+0xf6>
   14818:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1481c:	1930      	adds	r0, r6, r4
   1481e:	4b23      	ldr	r3, [pc, #140]	; (148ac <pdn_interface_connect+0x2f8>)
   14820:	4a1a      	ldr	r2, [pc, #104]	; (1488c <pdn_interface_connect+0x2d8>)
   14822:	f7fa fa15 	bl	ec50 <snprintf>
   14826:	4404      	add	r4, r0
   14828:	e718      	b.n	1465c <pdn_interface_connect+0xa8>
   1482a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1482e:	2009      	movs	r0, #9
   14830:	f7fa ff3a 	bl	f6a8 <bsd_os_errno_set>
   14834:	4620      	mov	r0, r4
   14836:	b003      	add	sp, #12
   14838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1483c:	2016      	movs	r0, #22
   1483e:	f7fa ff33 	bl	f6a8 <bsd_os_errno_set>
   14842:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   14846:	e730      	b.n	146aa <pdn_interface_connect+0xf6>
   14848:	4817      	ldr	r0, [pc, #92]	; (148a8 <pdn_interface_connect+0x2f4>)
   1484a:	f008 ffd5 	bl	1d7f8 <strlen>
   1484e:	490a      	ldr	r1, [pc, #40]	; (14878 <pdn_interface_connect+0x2c4>)
   14850:	4602      	mov	r2, r0
   14852:	4815      	ldr	r0, [pc, #84]	; (148a8 <pdn_interface_connect+0x2f4>)
   14854:	f008 ffe3 	bl	1d81e <strncmp>
   14858:	b930      	cbnz	r0, 14868 <pdn_interface_connect+0x2b4>
   1485a:	2008      	movs	r0, #8
   1485c:	f7fa ff24 	bl	f6a8 <bsd_os_errno_set>
   14860:	e723      	b.n	146aa <pdn_interface_connect+0xf6>
   14862:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   14866:	e720      	b.n	146aa <pdn_interface_connect+0xf6>
   14868:	2005      	movs	r0, #5
   1486a:	f7fa ff1d 	bl	f6a8 <bsd_os_errno_set>
   1486e:	e71c      	b.n	146aa <pdn_interface_connect+0xf6>
   14870:	789a0000 	.word	0x789a0000
   14874:	20020a08 	.word	0x20020a08
   14878:	20020908 	.word	0x20020908
   1487c:	0001f0c0 	.word	0x0001f0c0
   14880:	0001f0cc 	.word	0x0001f0cc
   14884:	0001f0e0 	.word	0x0001f0e0
   14888:	0001f0e8 	.word	0x0001f0e8
   1488c:	0001f0d8 	.word	0x0001f0d8
   14890:	0001f11c 	.word	0x0001f11c
   14894:	0001f0ec 	.word	0x0001f0ec
   14898:	0001f0f0 	.word	0x0001f0f0
   1489c:	0001f0fc 	.word	0x0001f0fc
   148a0:	0001f100 	.word	0x0001f100
   148a4:	0001f110 	.word	0x0001f110
   148a8:	0001f154 	.word	0x0001f154
   148ac:	0001f0d0 	.word	0x0001f0d0
   148b0:	20020904 	.word	0x20020904

000148b4 <pdn_interface_close>:
   148b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   148b8:	4b63      	ldr	r3, [pc, #396]	; (14a48 <pdn_interface_close+0x194>)
   148ba:	b083      	sub	sp, #12
   148bc:	4383      	bics	r3, r0
   148be:	f040 809d 	bne.w	149fc <pdn_interface_close+0x148>
   148c2:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   148c6:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   148ca:	2c09      	cmp	r4, #9
   148cc:	f300 8096 	bgt.w	149fc <pdn_interface_close+0x148>
   148d0:	4d5e      	ldr	r5, [pc, #376]	; (14a4c <pdn_interface_close+0x198>)
   148d2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   148d6:	2800      	cmp	r0, #0
   148d8:	f000 8090 	beq.w	149fc <pdn_interface_close+0x148>
   148dc:	6883      	ldr	r3, [r0, #8]
   148de:	2b00      	cmp	r3, #0
   148e0:	f000 808c 	beq.w	149fc <pdn_interface_close+0x148>
   148e4:	6883      	ldr	r3, [r0, #8]
   148e6:	2b03      	cmp	r3, #3
   148e8:	d008      	beq.n	148fc <pdn_interface_close+0x48>
   148ea:	f7fd fb07 	bl	11efc <nrf_free>
   148ee:	2300      	movs	r3, #0
   148f0:	4618      	mov	r0, r3
   148f2:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   148f6:	b003      	add	sp, #12
   148f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   148fc:	4e54      	ldr	r6, [pc, #336]	; (14a50 <pdn_interface_close+0x19c>)
   148fe:	4a55      	ldr	r2, [pc, #340]	; (14a54 <pdn_interface_close+0x1a0>)
   14900:	f44f 7180 	mov.w	r1, #256	; 0x100
   14904:	4630      	mov	r0, r6
   14906:	f7fa f9a3 	bl	ec50 <snprintf>
   1490a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1490e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   14912:	681b      	ldr	r3, [r3, #0]
   14914:	4a50      	ldr	r2, [pc, #320]	; (14a58 <pdn_interface_close+0x1a4>)
   14916:	4430      	add	r0, r6
   14918:	f8df 814c 	ldr.w	r8, [pc, #332]	; 14a68 <pdn_interface_close+0x1b4>
   1491c:	f7fa f998 	bl	ec50 <snprintf>
   14920:	4630      	mov	r0, r6
   14922:	f8d8 9000 	ldr.w	r9, [r8]
   14926:	2700      	movs	r7, #0
   14928:	f008 ff66 	bl	1d7f8 <strlen>
   1492c:	4631      	mov	r1, r6
   1492e:	4602      	mov	r2, r0
   14930:	463b      	mov	r3, r7
   14932:	4648      	mov	r0, r9
   14934:	9701      	str	r7, [sp, #4]
   14936:	9700      	str	r7, [sp, #0]
   14938:	f7fc fd3a 	bl	113b0 <at_interface_write>
   1493c:	4681      	mov	r9, r0
   1493e:	4630      	mov	r0, r6
   14940:	f008 ff5a 	bl	1d7f8 <strlen>
   14944:	4548      	cmp	r0, r9
   14946:	d176      	bne.n	14a36 <pdn_interface_close+0x182>
   14948:	463b      	mov	r3, r7
   1494a:	e9cd 7700 	strd	r7, r7, [sp]
   1494e:	f44f 7280 	mov.w	r2, #256	; 0x100
   14952:	4631      	mov	r1, r6
   14954:	f8d8 0000 	ldr.w	r0, [r8]
   14958:	f7fc fe12 	bl	11580 <at_interface_read>
   1495c:	4607      	mov	r7, r0
   1495e:	483f      	ldr	r0, [pc, #252]	; (14a5c <pdn_interface_close+0x1a8>)
   14960:	f008 ff4a 	bl	1d7f8 <strlen>
   14964:	4287      	cmp	r7, r0
   14966:	da4f      	bge.n	14a08 <pdn_interface_close+0x154>
   14968:	483d      	ldr	r0, [pc, #244]	; (14a60 <pdn_interface_close+0x1ac>)
   1496a:	f008 ff45 	bl	1d7f8 <strlen>
   1496e:	4938      	ldr	r1, [pc, #224]	; (14a50 <pdn_interface_close+0x19c>)
   14970:	4602      	mov	r2, r0
   14972:	483b      	ldr	r0, [pc, #236]	; (14a60 <pdn_interface_close+0x1ac>)
   14974:	f008 ff53 	bl	1d81e <strncmp>
   14978:	2800      	cmp	r0, #0
   1497a:	d15c      	bne.n	14a36 <pdn_interface_close+0x182>
   1497c:	2008      	movs	r0, #8
   1497e:	f7fa fe93 	bl	f6a8 <bsd_os_errno_set>
   14982:	4a38      	ldr	r2, [pc, #224]	; (14a64 <pdn_interface_close+0x1b0>)
   14984:	f44f 7180 	mov.w	r1, #256	; 0x100
   14988:	4831      	ldr	r0, [pc, #196]	; (14a50 <pdn_interface_close+0x19c>)
   1498a:	f7fa f961 	bl	ec50 <snprintf>
   1498e:	4601      	mov	r1, r0
   14990:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   14994:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   14998:	681b      	ldr	r3, [r3, #0]
   1499a:	4a2f      	ldr	r2, [pc, #188]	; (14a58 <pdn_interface_close+0x1a4>)
   1499c:	1830      	adds	r0, r6, r0
   1499e:	f7fa f957 	bl	ec50 <snprintf>
   149a2:	482b      	ldr	r0, [pc, #172]	; (14a50 <pdn_interface_close+0x19c>)
   149a4:	f8d8 7000 	ldr.w	r7, [r8]
   149a8:	2600      	movs	r6, #0
   149aa:	f008 ff25 	bl	1d7f8 <strlen>
   149ae:	4633      	mov	r3, r6
   149b0:	4602      	mov	r2, r0
   149b2:	4927      	ldr	r1, [pc, #156]	; (14a50 <pdn_interface_close+0x19c>)
   149b4:	4638      	mov	r0, r7
   149b6:	9601      	str	r6, [sp, #4]
   149b8:	9600      	str	r6, [sp, #0]
   149ba:	f7fc fcf9 	bl	113b0 <at_interface_write>
   149be:	4607      	mov	r7, r0
   149c0:	4823      	ldr	r0, [pc, #140]	; (14a50 <pdn_interface_close+0x19c>)
   149c2:	f008 ff19 	bl	1d7f8 <strlen>
   149c6:	42b8      	cmp	r0, r7
   149c8:	d139      	bne.n	14a3e <pdn_interface_close+0x18a>
   149ca:	4633      	mov	r3, r6
   149cc:	e9cd 6600 	strd	r6, r6, [sp]
   149d0:	f44f 7280 	mov.w	r2, #256	; 0x100
   149d4:	491e      	ldr	r1, [pc, #120]	; (14a50 <pdn_interface_close+0x19c>)
   149d6:	f8d8 0000 	ldr.w	r0, [r8]
   149da:	f7fc fdd1 	bl	11580 <at_interface_read>
   149de:	4606      	mov	r6, r0
   149e0:	481e      	ldr	r0, [pc, #120]	; (14a5c <pdn_interface_close+0x1a8>)
   149e2:	f008 ff09 	bl	1d7f8 <strlen>
   149e6:	4286      	cmp	r6, r0
   149e8:	db16      	blt.n	14a18 <pdn_interface_close+0x164>
   149ea:	4602      	mov	r2, r0
   149ec:	4918      	ldr	r1, [pc, #96]	; (14a50 <pdn_interface_close+0x19c>)
   149ee:	481b      	ldr	r0, [pc, #108]	; (14a5c <pdn_interface_close+0x1a8>)
   149f0:	f008 ff15 	bl	1d81e <strncmp>
   149f4:	b980      	cbnz	r0, 14a18 <pdn_interface_close+0x164>
   149f6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   149fa:	e776      	b.n	148ea <pdn_interface_close+0x36>
   149fc:	2009      	movs	r0, #9
   149fe:	f7fa fe53 	bl	f6a8 <bsd_os_errno_set>
   14a02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14a06:	e776      	b.n	148f6 <pdn_interface_close+0x42>
   14a08:	4602      	mov	r2, r0
   14a0a:	4631      	mov	r1, r6
   14a0c:	4813      	ldr	r0, [pc, #76]	; (14a5c <pdn_interface_close+0x1a8>)
   14a0e:	f008 ff06 	bl	1d81e <strncmp>
   14a12:	2800      	cmp	r0, #0
   14a14:	d0b5      	beq.n	14982 <pdn_interface_close+0xce>
   14a16:	e7a7      	b.n	14968 <pdn_interface_close+0xb4>
   14a18:	4811      	ldr	r0, [pc, #68]	; (14a60 <pdn_interface_close+0x1ac>)
   14a1a:	f008 feed 	bl	1d7f8 <strlen>
   14a1e:	490c      	ldr	r1, [pc, #48]	; (14a50 <pdn_interface_close+0x19c>)
   14a20:	4602      	mov	r2, r0
   14a22:	480f      	ldr	r0, [pc, #60]	; (14a60 <pdn_interface_close+0x1ac>)
   14a24:	f008 fefb 	bl	1d81e <strncmp>
   14a28:	b948      	cbnz	r0, 14a3e <pdn_interface_close+0x18a>
   14a2a:	2008      	movs	r0, #8
   14a2c:	f7fa fe3c 	bl	f6a8 <bsd_os_errno_set>
   14a30:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   14a34:	e759      	b.n	148ea <pdn_interface_close+0x36>
   14a36:	2005      	movs	r0, #5
   14a38:	f7fa fe36 	bl	f6a8 <bsd_os_errno_set>
   14a3c:	e7a1      	b.n	14982 <pdn_interface_close+0xce>
   14a3e:	2005      	movs	r0, #5
   14a40:	f7fa fe32 	bl	f6a8 <bsd_os_errno_set>
   14a44:	e7d7      	b.n	149f6 <pdn_interface_close+0x142>
   14a46:	bf00      	nop
   14a48:	789a0000 	.word	0x789a0000
   14a4c:	20020a08 	.word	0x20020a08
   14a50:	20020908 	.word	0x20020908
   14a54:	0001f0b4 	.word	0x0001f0b4
   14a58:	0001f0fc 	.word	0x0001f0fc
   14a5c:	0001f0ec 	.word	0x0001f0ec
   14a60:	0001f154 	.word	0x0001f154
   14a64:	0001f0c0 	.word	0x0001f0c0
   14a68:	20020904 	.word	0x20020904

00014a6c <pdn_interface_setopt>:
   14a6c:	b510      	push	{r4, lr}
   14a6e:	f240 2402 	movw	r4, #514	; 0x202
   14a72:	42a1      	cmp	r1, r4
   14a74:	d10b      	bne.n	14a8e <pdn_interface_setopt+0x22>
   14a76:	b153      	cbz	r3, 14a8e <pdn_interface_setopt+0x22>
   14a78:	9902      	ldr	r1, [sp, #8]
   14a7a:	b141      	cbz	r1, 14a8e <pdn_interface_setopt+0x22>
   14a7c:	4925      	ldr	r1, [pc, #148]	; (14b14 <pdn_interface_setopt+0xa8>)
   14a7e:	4381      	bics	r1, r0
   14a80:	d00b      	beq.n	14a9a <pdn_interface_setopt+0x2e>
   14a82:	2009      	movs	r0, #9
   14a84:	f7fa fe10 	bl	f6a8 <bsd_os_errno_set>
   14a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14a8c:	bd10      	pop	{r4, pc}
   14a8e:	2016      	movs	r0, #22
   14a90:	f7fa fe0a 	bl	f6a8 <bsd_os_errno_set>
   14a94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14a98:	bd10      	pop	{r4, pc}
   14a9a:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   14a9e:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   14aa2:	2809      	cmp	r0, #9
   14aa4:	dced      	bgt.n	14a82 <pdn_interface_setopt+0x16>
   14aa6:	491c      	ldr	r1, [pc, #112]	; (14b18 <pdn_interface_setopt+0xac>)
   14aa8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   14aac:	2900      	cmp	r1, #0
   14aae:	d0e8      	beq.n	14a82 <pdn_interface_setopt+0x16>
   14ab0:	688c      	ldr	r4, [r1, #8]
   14ab2:	2c00      	cmp	r4, #0
   14ab4:	d0e5      	beq.n	14a82 <pdn_interface_setopt+0x16>
   14ab6:	2800      	cmp	r0, #0
   14ab8:	dbe3      	blt.n	14a82 <pdn_interface_setopt+0x16>
   14aba:	2a01      	cmp	r2, #1
   14abc:	d001      	beq.n	14ac2 <pdn_interface_setopt+0x56>
   14abe:	202d      	movs	r0, #45	; 0x2d
   14ac0:	e7e6      	b.n	14a90 <pdn_interface_setopt+0x24>
   14ac2:	688a      	ldr	r2, [r1, #8]
   14ac4:	b1fa      	cbz	r2, 14b06 <pdn_interface_setopt+0x9a>
   14ac6:	688a      	ldr	r2, [r1, #8]
   14ac8:	2a03      	cmp	r2, #3
   14aca:	d01c      	beq.n	14b06 <pdn_interface_setopt+0x9a>
   14acc:	688a      	ldr	r2, [r1, #8]
   14ace:	2a04      	cmp	r2, #4
   14ad0:	d019      	beq.n	14b06 <pdn_interface_setopt+0x9a>
   14ad2:	9a02      	ldr	r2, [sp, #8]
   14ad4:	0890      	lsrs	r0, r2, #2
   14ad6:	1e42      	subs	r2, r0, #1
   14ad8:	2a01      	cmp	r2, #1
   14ada:	d8d8      	bhi.n	14a8e <pdn_interface_setopt+0x22>
   14adc:	9a02      	ldr	r2, [sp, #8]
   14ade:	0792      	lsls	r2, r2, #30
   14ae0:	d1d5      	bne.n	14a8e <pdn_interface_setopt+0x22>
   14ae2:	681a      	ldr	r2, [r3, #0]
   14ae4:	2a02      	cmp	r2, #2
   14ae6:	d010      	beq.n	14b0a <pdn_interface_setopt+0x9e>
   14ae8:	2a0a      	cmp	r2, #10
   14aea:	d1d0      	bne.n	14a8e <pdn_interface_setopt+0x22>
   14aec:	2202      	movs	r2, #2
   14aee:	2802      	cmp	r0, #2
   14af0:	d106      	bne.n	14b00 <pdn_interface_setopt+0x94>
   14af2:	685b      	ldr	r3, [r3, #4]
   14af4:	2b02      	cmp	r3, #2
   14af6:	d00a      	beq.n	14b0e <pdn_interface_setopt+0xa2>
   14af8:	2b0a      	cmp	r3, #10
   14afa:	d1c8      	bne.n	14a8e <pdn_interface_setopt+0x22>
   14afc:	f042 0202 	orr.w	r2, r2, #2
   14b00:	670a      	str	r2, [r1, #112]	; 0x70
   14b02:	2000      	movs	r0, #0
   14b04:	e7c4      	b.n	14a90 <pdn_interface_setopt+0x24>
   14b06:	200e      	movs	r0, #14
   14b08:	e7c2      	b.n	14a90 <pdn_interface_setopt+0x24>
   14b0a:	2201      	movs	r2, #1
   14b0c:	e7ef      	b.n	14aee <pdn_interface_setopt+0x82>
   14b0e:	f042 0201 	orr.w	r2, r2, #1
   14b12:	e7f5      	b.n	14b00 <pdn_interface_setopt+0x94>
   14b14:	789a0000 	.word	0x789a0000
   14b18:	20020a08 	.word	0x20020a08

00014b1c <pdn_interface_getopt>:
   14b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14b20:	f240 2402 	movw	r4, #514	; 0x202
   14b24:	b083      	sub	sp, #12
   14b26:	42a1      	cmp	r1, r4
   14b28:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   14b2a:	f040 80a9 	bne.w	14c80 <_flash_used+0x10>
   14b2e:	461e      	mov	r6, r3
   14b30:	2b00      	cmp	r3, #0
   14b32:	f000 80a5 	beq.w	14c80 <_flash_used+0x10>
   14b36:	2d00      	cmp	r5, #0
   14b38:	f000 80a2 	beq.w	14c80 <_flash_used+0x10>
   14b3c:	4b56      	ldr	r3, [pc, #344]	; (14c98 <_flash_used+0x28>)
   14b3e:	4383      	bics	r3, r0
   14b40:	f040 8084 	bne.w	14c4c <pdn_interface_getopt+0x130>
   14b44:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   14b48:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   14b4c:	2c09      	cmp	r4, #9
   14b4e:	dc7d      	bgt.n	14c4c <pdn_interface_getopt+0x130>
   14b50:	4b52      	ldr	r3, [pc, #328]	; (14c9c <_flash_used+0x2c>)
   14b52:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   14b56:	2b00      	cmp	r3, #0
   14b58:	d078      	beq.n	14c4c <pdn_interface_getopt+0x130>
   14b5a:	6899      	ldr	r1, [r3, #8]
   14b5c:	2900      	cmp	r1, #0
   14b5e:	d075      	beq.n	14c4c <pdn_interface_getopt+0x130>
   14b60:	2c00      	cmp	r4, #0
   14b62:	db73      	blt.n	14c4c <pdn_interface_getopt+0x130>
   14b64:	2a02      	cmp	r2, #2
   14b66:	d00e      	beq.n	14b86 <pdn_interface_getopt+0x6a>
   14b68:	2a03      	cmp	r2, #3
   14b6a:	d008      	beq.n	14b7e <pdn_interface_getopt+0x62>
   14b6c:	2a01      	cmp	r2, #1
   14b6e:	d015      	beq.n	14b9c <pdn_interface_getopt+0x80>
   14b70:	202d      	movs	r0, #45	; 0x2d
   14b72:	f7fa fd99 	bl	f6a8 <bsd_os_errno_set>
   14b76:	2000      	movs	r0, #0
   14b78:	b003      	add	sp, #12
   14b7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14b7e:	682b      	ldr	r3, [r5, #0]
   14b80:	bb23      	cbnz	r3, 14bcc <pdn_interface_getopt+0xb0>
   14b82:	2016      	movs	r0, #22
   14b84:	e7f5      	b.n	14b72 <pdn_interface_getopt+0x56>
   14b86:	682a      	ldr	r2, [r5, #0]
   14b88:	2a00      	cmp	r2, #0
   14b8a:	d0fa      	beq.n	14b82 <pdn_interface_getopt+0x66>
   14b8c:	2201      	movs	r2, #1
   14b8e:	2000      	movs	r0, #0
   14b90:	681b      	ldr	r3, [r3, #0]
   14b92:	7033      	strb	r3, [r6, #0]
   14b94:	602a      	str	r2, [r5, #0]
   14b96:	b003      	add	sp, #12
   14b98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14b9c:	689a      	ldr	r2, [r3, #8]
   14b9e:	2a00      	cmp	r2, #0
   14ba0:	d052      	beq.n	14c48 <pdn_interface_getopt+0x12c>
   14ba2:	689a      	ldr	r2, [r3, #8]
   14ba4:	2a04      	cmp	r2, #4
   14ba6:	d04f      	beq.n	14c48 <pdn_interface_getopt+0x12c>
   14ba8:	682a      	ldr	r2, [r5, #0]
   14baa:	2a07      	cmp	r2, #7
   14bac:	d9e9      	bls.n	14b82 <pdn_interface_getopt+0x66>
   14bae:	f012 0203 	ands.w	r2, r2, #3
   14bb2:	d1e6      	bne.n	14b82 <pdn_interface_getopt+0x66>
   14bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   14bb6:	0799      	lsls	r1, r3, #30
   14bb8:	d45d      	bmi.n	14c76 <_flash_used+0x6>
   14bba:	2104      	movs	r1, #4
   14bbc:	07db      	lsls	r3, r3, #31
   14bbe:	d502      	bpl.n	14bc6 <pdn_interface_getopt+0xaa>
   14bc0:	2302      	movs	r3, #2
   14bc2:	50b3      	str	r3, [r6, r2]
   14bc4:	460a      	mov	r2, r1
   14bc6:	602a      	str	r2, [r5, #0]
   14bc8:	2000      	movs	r0, #0
   14bca:	e7d5      	b.n	14b78 <pdn_interface_getopt+0x5c>
   14bcc:	4a34      	ldr	r2, [pc, #208]	; (14ca0 <_flash_used+0x30>)
   14bce:	f44f 7180 	mov.w	r1, #256	; 0x100
   14bd2:	4834      	ldr	r0, [pc, #208]	; (14ca4 <_flash_used+0x34>)
   14bd4:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 14cb0 <_flash_used+0x40>
   14bd8:	f7fa f83a 	bl	ec50 <snprintf>
   14bdc:	4831      	ldr	r0, [pc, #196]	; (14ca4 <_flash_used+0x34>)
   14bde:	f8d8 9000 	ldr.w	r9, [r8]
   14be2:	2700      	movs	r7, #0
   14be4:	f008 fe08 	bl	1d7f8 <strlen>
   14be8:	463b      	mov	r3, r7
   14bea:	4602      	mov	r2, r0
   14bec:	492d      	ldr	r1, [pc, #180]	; (14ca4 <_flash_used+0x34>)
   14bee:	4648      	mov	r0, r9
   14bf0:	9701      	str	r7, [sp, #4]
   14bf2:	9700      	str	r7, [sp, #0]
   14bf4:	f7fc fbdc 	bl	113b0 <at_interface_write>
   14bf8:	4681      	mov	r9, r0
   14bfa:	482a      	ldr	r0, [pc, #168]	; (14ca4 <_flash_used+0x34>)
   14bfc:	f008 fdfc 	bl	1d7f8 <strlen>
   14c00:	4548      	cmp	r0, r9
   14c02:	d143      	bne.n	14c8c <_flash_used+0x1c>
   14c04:	463b      	mov	r3, r7
   14c06:	e9cd 7700 	strd	r7, r7, [sp]
   14c0a:	f44f 7280 	mov.w	r2, #256	; 0x100
   14c0e:	4925      	ldr	r1, [pc, #148]	; (14ca4 <_flash_used+0x34>)
   14c10:	f8d8 0000 	ldr.w	r0, [r8]
   14c14:	f7fc fcb4 	bl	11580 <at_interface_read>
   14c18:	4607      	mov	r7, r0
   14c1a:	4823      	ldr	r0, [pc, #140]	; (14ca8 <_flash_used+0x38>)
   14c1c:	f008 fdec 	bl	1d7f8 <strlen>
   14c20:	4287      	cmp	r7, r0
   14c22:	db19      	blt.n	14c58 <pdn_interface_getopt+0x13c>
   14c24:	4602      	mov	r2, r0
   14c26:	491f      	ldr	r1, [pc, #124]	; (14ca4 <_flash_used+0x34>)
   14c28:	481f      	ldr	r0, [pc, #124]	; (14ca8 <_flash_used+0x38>)
   14c2a:	f008 fdf8 	bl	1d81e <strncmp>
   14c2e:	4607      	mov	r7, r0
   14c30:	b990      	cbnz	r0, 14c58 <pdn_interface_getopt+0x13c>
   14c32:	4620      	mov	r0, r4
   14c34:	491b      	ldr	r1, [pc, #108]	; (14ca4 <_flash_used+0x34>)
   14c36:	f7ff fb35 	bl	142a4 <pdn_state_get_parser>
   14c3a:	2800      	cmp	r0, #0
   14c3c:	db99      	blt.n	14b72 <pdn_interface_getopt+0x56>
   14c3e:	2301      	movs	r3, #1
   14c40:	7030      	strb	r0, [r6, #0]
   14c42:	4638      	mov	r0, r7
   14c44:	602b      	str	r3, [r5, #0]
   14c46:	e797      	b.n	14b78 <pdn_interface_getopt+0x5c>
   14c48:	200e      	movs	r0, #14
   14c4a:	e792      	b.n	14b72 <pdn_interface_getopt+0x56>
   14c4c:	2009      	movs	r0, #9
   14c4e:	f7fa fd2b 	bl	f6a8 <bsd_os_errno_set>
   14c52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14c56:	e78f      	b.n	14b78 <pdn_interface_getopt+0x5c>
   14c58:	4814      	ldr	r0, [pc, #80]	; (14cac <_flash_used+0x3c>)
   14c5a:	f008 fdcd 	bl	1d7f8 <strlen>
   14c5e:	4911      	ldr	r1, [pc, #68]	; (14ca4 <_flash_used+0x34>)
   14c60:	4602      	mov	r2, r0
   14c62:	4812      	ldr	r0, [pc, #72]	; (14cac <_flash_used+0x3c>)
   14c64:	f008 fddb 	bl	1d81e <strncmp>
   14c68:	b980      	cbnz	r0, 14c8c <_flash_used+0x1c>
   14c6a:	2008      	movs	r0, #8
   14c6c:	f7fa fd1c 	bl	f6a8 <bsd_os_errno_set>
   14c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14c74:	e77d      	b.n	14b72 <pdn_interface_getopt+0x56>
   14c76:	220a      	movs	r2, #10
   14c78:	2108      	movs	r1, #8
   14c7a:	6032      	str	r2, [r6, #0]
   14c7c:	2204      	movs	r2, #4
   14c7e:	e79d      	b.n	14bbc <pdn_interface_getopt+0xa0>
   14c80:	2016      	movs	r0, #22
   14c82:	f7fa fd11 	bl	f6a8 <bsd_os_errno_set>
   14c86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14c8a:	e775      	b.n	14b78 <pdn_interface_getopt+0x5c>
   14c8c:	2005      	movs	r0, #5
   14c8e:	f7fa fd0b 	bl	f6a8 <bsd_os_errno_set>
   14c92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14c96:	e76c      	b.n	14b72 <pdn_interface_getopt+0x56>
   14c98:	789a0000 	.word	0x789a0000
   14c9c:	20020a08 	.word	0x20020a08
   14ca0:	0001f124 	.word	0x0001f124
   14ca4:	20020908 	.word	0x20020908
   14ca8:	0001f130 	.word	0x0001f130
   14cac:	0001f154 	.word	0x0001f154
   14cb0:	20020904 	.word	0x20020904

00014cb4 <pdn_interface_pdn_id_get>:
   14cb4:	2900      	cmp	r1, #0
   14cb6:	f000 83b9 	beq.w	1542c <pdn_interface_pdn_id_get+0x778>
   14cba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14cbe:	4ca3      	ldr	r4, [pc, #652]	; (14f4c <pdn_interface_pdn_id_get+0x298>)
   14cc0:	2802      	cmp	r0, #2
   14cc2:	b083      	sub	sp, #12
   14cc4:	460d      	mov	r5, r1
   14cc6:	6823      	ldr	r3, [r4, #0]
   14cc8:	f000 8094 	beq.w	14df4 <pdn_interface_pdn_id_get+0x140>
   14ccc:	280a      	cmp	r0, #10
   14cce:	d03f      	beq.n	14d50 <pdn_interface_pdn_id_get+0x9c>
   14cd0:	b11b      	cbz	r3, 14cda <pdn_interface_pdn_id_get+0x26>
   14cd2:	689b      	ldr	r3, [r3, #8]
   14cd4:	2b03      	cmp	r3, #3
   14cd6:	f000 8127 	beq.w	14f28 <pdn_interface_pdn_id_get+0x274>
   14cda:	6863      	ldr	r3, [r4, #4]
   14cdc:	b11b      	cbz	r3, 14ce6 <pdn_interface_pdn_id_get+0x32>
   14cde:	689b      	ldr	r3, [r3, #8]
   14ce0:	2b03      	cmp	r3, #3
   14ce2:	f000 8110 	beq.w	14f06 <pdn_interface_pdn_id_get+0x252>
   14ce6:	68a3      	ldr	r3, [r4, #8]
   14ce8:	b11b      	cbz	r3, 14cf2 <pdn_interface_pdn_id_get+0x3e>
   14cea:	689b      	ldr	r3, [r3, #8]
   14cec:	2b03      	cmp	r3, #3
   14cee:	f000 80f9 	beq.w	14ee4 <pdn_interface_pdn_id_get+0x230>
   14cf2:	68e3      	ldr	r3, [r4, #12]
   14cf4:	b11b      	cbz	r3, 14cfe <pdn_interface_pdn_id_get+0x4a>
   14cf6:	689b      	ldr	r3, [r3, #8]
   14cf8:	2b03      	cmp	r3, #3
   14cfa:	f000 80e2 	beq.w	14ec2 <pdn_interface_pdn_id_get+0x20e>
   14cfe:	6923      	ldr	r3, [r4, #16]
   14d00:	b11b      	cbz	r3, 14d0a <pdn_interface_pdn_id_get+0x56>
   14d02:	689b      	ldr	r3, [r3, #8]
   14d04:	2b03      	cmp	r3, #3
   14d06:	f000 8123 	beq.w	14f50 <pdn_interface_pdn_id_get+0x29c>
   14d0a:	6963      	ldr	r3, [r4, #20]
   14d0c:	b11b      	cbz	r3, 14d16 <pdn_interface_pdn_id_get+0x62>
   14d0e:	689b      	ldr	r3, [r3, #8]
   14d10:	2b03      	cmp	r3, #3
   14d12:	f000 8161 	beq.w	14fd8 <pdn_interface_pdn_id_get+0x324>
   14d16:	69a3      	ldr	r3, [r4, #24]
   14d18:	b11b      	cbz	r3, 14d22 <pdn_interface_pdn_id_get+0x6e>
   14d1a:	689b      	ldr	r3, [r3, #8]
   14d1c:	2b03      	cmp	r3, #3
   14d1e:	f000 814a 	beq.w	14fb6 <pdn_interface_pdn_id_get+0x302>
   14d22:	69e3      	ldr	r3, [r4, #28]
   14d24:	b11b      	cbz	r3, 14d2e <pdn_interface_pdn_id_get+0x7a>
   14d26:	689b      	ldr	r3, [r3, #8]
   14d28:	2b03      	cmp	r3, #3
   14d2a:	f000 8133 	beq.w	14f94 <pdn_interface_pdn_id_get+0x2e0>
   14d2e:	6a23      	ldr	r3, [r4, #32]
   14d30:	b11b      	cbz	r3, 14d3a <pdn_interface_pdn_id_get+0x86>
   14d32:	689b      	ldr	r3, [r3, #8]
   14d34:	2b03      	cmp	r3, #3
   14d36:	f000 811c 	beq.w	14f72 <pdn_interface_pdn_id_get+0x2be>
   14d3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14d3c:	b11b      	cbz	r3, 14d46 <pdn_interface_pdn_id_get+0x92>
   14d3e:	689b      	ldr	r3, [r3, #8]
   14d40:	2b03      	cmp	r3, #3
   14d42:	f000 80ad 	beq.w	14ea0 <pdn_interface_pdn_id_get+0x1ec>
   14d46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14d4a:	b003      	add	sp, #12
   14d4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14d50:	b11b      	cbz	r3, 14d5a <pdn_interface_pdn_id_get+0xa6>
   14d52:	689b      	ldr	r3, [r3, #8]
   14d54:	2b03      	cmp	r3, #3
   14d56:	f000 8335 	beq.w	153c4 <pdn_interface_pdn_id_get+0x710>
   14d5a:	6863      	ldr	r3, [r4, #4]
   14d5c:	b11b      	cbz	r3, 14d66 <pdn_interface_pdn_id_get+0xb2>
   14d5e:	689b      	ldr	r3, [r3, #8]
   14d60:	2b03      	cmp	r3, #3
   14d62:	f000 82fd 	beq.w	15360 <pdn_interface_pdn_id_get+0x6ac>
   14d66:	68a3      	ldr	r3, [r4, #8]
   14d68:	b11b      	cbz	r3, 14d72 <pdn_interface_pdn_id_get+0xbe>
   14d6a:	689b      	ldr	r3, [r3, #8]
   14d6c:	2b03      	cmp	r3, #3
   14d6e:	f000 82d5 	beq.w	1531c <pdn_interface_pdn_id_get+0x668>
   14d72:	68e3      	ldr	r3, [r4, #12]
   14d74:	b11b      	cbz	r3, 14d7e <pdn_interface_pdn_id_get+0xca>
   14d76:	689e      	ldr	r6, [r3, #8]
   14d78:	2e03      	cmp	r6, #3
   14d7a:	f000 81f0 	beq.w	1515e <pdn_interface_pdn_id_get+0x4aa>
   14d7e:	6923      	ldr	r3, [r4, #16]
   14d80:	b11b      	cbz	r3, 14d8a <pdn_interface_pdn_id_get+0xd6>
   14d82:	689b      	ldr	r3, [r3, #8]
   14d84:	2b03      	cmp	r3, #3
   14d86:	f000 8203 	beq.w	15190 <pdn_interface_pdn_id_get+0x4dc>
   14d8a:	6963      	ldr	r3, [r4, #20]
   14d8c:	b11b      	cbz	r3, 14d96 <pdn_interface_pdn_id_get+0xe2>
   14d8e:	689b      	ldr	r3, [r3, #8]
   14d90:	2b03      	cmp	r3, #3
   14d92:	f000 8215 	beq.w	151c0 <pdn_interface_pdn_id_get+0x50c>
   14d96:	69a3      	ldr	r3, [r4, #24]
   14d98:	b11b      	cbz	r3, 14da2 <pdn_interface_pdn_id_get+0xee>
   14d9a:	689b      	ldr	r3, [r3, #8]
   14d9c:	2b03      	cmp	r3, #3
   14d9e:	f000 8227 	beq.w	151f0 <pdn_interface_pdn_id_get+0x53c>
   14da2:	69e3      	ldr	r3, [r4, #28]
   14da4:	b11b      	cbz	r3, 14dae <pdn_interface_pdn_id_get+0xfa>
   14da6:	689b      	ldr	r3, [r3, #8]
   14da8:	2b03      	cmp	r3, #3
   14daa:	f000 8239 	beq.w	15220 <pdn_interface_pdn_id_get+0x56c>
   14dae:	6a23      	ldr	r3, [r4, #32]
   14db0:	b11b      	cbz	r3, 14dba <pdn_interface_pdn_id_get+0x106>
   14db2:	689b      	ldr	r3, [r3, #8]
   14db4:	2b03      	cmp	r3, #3
   14db6:	f000 824d 	beq.w	15254 <pdn_interface_pdn_id_get+0x5a0>
   14dba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14dbc:	2b00      	cmp	r3, #0
   14dbe:	d0c2      	beq.n	14d46 <pdn_interface_pdn_id_get+0x92>
   14dc0:	689b      	ldr	r3, [r3, #8]
   14dc2:	2b03      	cmp	r3, #3
   14dc4:	d1bf      	bne.n	14d46 <pdn_interface_pdn_id_get+0x92>
   14dc6:	4628      	mov	r0, r5
   14dc8:	f008 fd16 	bl	1d7f8 <strlen>
   14dcc:	4606      	mov	r6, r0
   14dce:	6a60      	ldr	r0, [r4, #36]	; 0x24
   14dd0:	300c      	adds	r0, #12
   14dd2:	f008 fd11 	bl	1d7f8 <strlen>
   14dd6:	42b0      	cmp	r0, r6
   14dd8:	d1b5      	bne.n	14d46 <pdn_interface_pdn_id_get+0x92>
   14dda:	6a61      	ldr	r1, [r4, #36]	; 0x24
   14ddc:	4628      	mov	r0, r5
   14dde:	310c      	adds	r1, #12
   14de0:	f008 fd11 	bl	1d806 <strcmp>
   14de4:	2800      	cmp	r0, #0
   14de6:	d1ae      	bne.n	14d46 <pdn_interface_pdn_id_get+0x92>
   14de8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14dea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   14dec:	0792      	lsls	r2, r2, #30
   14dee:	d5aa      	bpl.n	14d46 <pdn_interface_pdn_id_get+0x92>
   14df0:	2609      	movs	r6, #9
   14df2:	e11a      	b.n	1502a <pdn_interface_pdn_id_get+0x376>
   14df4:	b11b      	cbz	r3, 14dfe <pdn_interface_pdn_id_get+0x14a>
   14df6:	689b      	ldr	r3, [r3, #8]
   14df8:	2b03      	cmp	r3, #3
   14dfa:	f000 82fd 	beq.w	153f8 <pdn_interface_pdn_id_get+0x744>
   14dfe:	6863      	ldr	r3, [r4, #4]
   14e00:	b11b      	cbz	r3, 14e0a <pdn_interface_pdn_id_get+0x156>
   14e02:	689b      	ldr	r3, [r3, #8]
   14e04:	2b03      	cmp	r3, #3
   14e06:	f000 82c5 	beq.w	15394 <pdn_interface_pdn_id_get+0x6e0>
   14e0a:	68a3      	ldr	r3, [r4, #8]
   14e0c:	b11b      	cbz	r3, 14e16 <pdn_interface_pdn_id_get+0x162>
   14e0e:	689b      	ldr	r3, [r3, #8]
   14e10:	2b03      	cmp	r3, #3
   14e12:	f000 8269 	beq.w	152e8 <pdn_interface_pdn_id_get+0x634>
   14e16:	68e3      	ldr	r3, [r4, #12]
   14e18:	b11b      	cbz	r3, 14e22 <pdn_interface_pdn_id_get+0x16e>
   14e1a:	689e      	ldr	r6, [r3, #8]
   14e1c:	2e03      	cmp	r6, #3
   14e1e:	f000 80ec 	beq.w	14ffa <pdn_interface_pdn_id_get+0x346>
   14e22:	6923      	ldr	r3, [r4, #16]
   14e24:	b11b      	cbz	r3, 14e2e <pdn_interface_pdn_id_get+0x17a>
   14e26:	689b      	ldr	r3, [r3, #8]
   14e28:	2b03      	cmp	r3, #3
   14e2a:	f000 814a 	beq.w	150c2 <pdn_interface_pdn_id_get+0x40e>
   14e2e:	6963      	ldr	r3, [r4, #20]
   14e30:	b11b      	cbz	r3, 14e3a <pdn_interface_pdn_id_get+0x186>
   14e32:	689b      	ldr	r3, [r3, #8]
   14e34:	2b03      	cmp	r3, #3
   14e36:	f000 815e 	beq.w	150f6 <pdn_interface_pdn_id_get+0x442>
   14e3a:	69a3      	ldr	r3, [r4, #24]
   14e3c:	b11b      	cbz	r3, 14e46 <pdn_interface_pdn_id_get+0x192>
   14e3e:	689b      	ldr	r3, [r3, #8]
   14e40:	2b03      	cmp	r3, #3
   14e42:	f000 8172 	beq.w	1512a <pdn_interface_pdn_id_get+0x476>
   14e46:	69e3      	ldr	r3, [r4, #28]
   14e48:	b11b      	cbz	r3, 14e52 <pdn_interface_pdn_id_get+0x19e>
   14e4a:	689b      	ldr	r3, [r3, #8]
   14e4c:	2b03      	cmp	r3, #3
   14e4e:	f000 821b 	beq.w	15288 <pdn_interface_pdn_id_get+0x5d4>
   14e52:	6a23      	ldr	r3, [r4, #32]
   14e54:	b11b      	cbz	r3, 14e5e <pdn_interface_pdn_id_get+0x1aa>
   14e56:	689b      	ldr	r3, [r3, #8]
   14e58:	2b03      	cmp	r3, #3
   14e5a:	f000 822d 	beq.w	152b8 <pdn_interface_pdn_id_get+0x604>
   14e5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14e60:	2b00      	cmp	r3, #0
   14e62:	f43f af70 	beq.w	14d46 <pdn_interface_pdn_id_get+0x92>
   14e66:	689b      	ldr	r3, [r3, #8]
   14e68:	2b03      	cmp	r3, #3
   14e6a:	f47f af6c 	bne.w	14d46 <pdn_interface_pdn_id_get+0x92>
   14e6e:	4628      	mov	r0, r5
   14e70:	f008 fcc2 	bl	1d7f8 <strlen>
   14e74:	4606      	mov	r6, r0
   14e76:	6a60      	ldr	r0, [r4, #36]	; 0x24
   14e78:	300c      	adds	r0, #12
   14e7a:	f008 fcbd 	bl	1d7f8 <strlen>
   14e7e:	4286      	cmp	r6, r0
   14e80:	f47f af61 	bne.w	14d46 <pdn_interface_pdn_id_get+0x92>
   14e84:	6a61      	ldr	r1, [r4, #36]	; 0x24
   14e86:	4628      	mov	r0, r5
   14e88:	310c      	adds	r1, #12
   14e8a:	f008 fcbc 	bl	1d806 <strcmp>
   14e8e:	2800      	cmp	r0, #0
   14e90:	f47f af59 	bne.w	14d46 <pdn_interface_pdn_id_get+0x92>
   14e94:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14e96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   14e98:	07d2      	lsls	r2, r2, #31
   14e9a:	f57f af54 	bpl.w	14d46 <pdn_interface_pdn_id_get+0x92>
   14e9e:	e7a7      	b.n	14df0 <pdn_interface_pdn_id_get+0x13c>
   14ea0:	4628      	mov	r0, r5
   14ea2:	f008 fca9 	bl	1d7f8 <strlen>
   14ea6:	4606      	mov	r6, r0
   14ea8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   14eaa:	300c      	adds	r0, #12
   14eac:	f008 fca4 	bl	1d7f8 <strlen>
   14eb0:	42b0      	cmp	r0, r6
   14eb2:	f47f af48 	bne.w	14d46 <pdn_interface_pdn_id_get+0x92>
   14eb6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   14eb8:	4628      	mov	r0, r5
   14eba:	310c      	adds	r1, #12
   14ebc:	f008 fca3 	bl	1d806 <strcmp>
   14ec0:	e741      	b.n	14d46 <pdn_interface_pdn_id_get+0x92>
   14ec2:	4628      	mov	r0, r5
   14ec4:	f008 fc98 	bl	1d7f8 <strlen>
   14ec8:	4606      	mov	r6, r0
   14eca:	68e0      	ldr	r0, [r4, #12]
   14ecc:	300c      	adds	r0, #12
   14ece:	f008 fc93 	bl	1d7f8 <strlen>
   14ed2:	4286      	cmp	r6, r0
   14ed4:	f47f af13 	bne.w	14cfe <pdn_interface_pdn_id_get+0x4a>
   14ed8:	68e1      	ldr	r1, [r4, #12]
   14eda:	4628      	mov	r0, r5
   14edc:	310c      	adds	r1, #12
   14ede:	f008 fc92 	bl	1d806 <strcmp>
   14ee2:	e70c      	b.n	14cfe <pdn_interface_pdn_id_get+0x4a>
   14ee4:	4628      	mov	r0, r5
   14ee6:	f008 fc87 	bl	1d7f8 <strlen>
   14eea:	4606      	mov	r6, r0
   14eec:	68a0      	ldr	r0, [r4, #8]
   14eee:	300c      	adds	r0, #12
   14ef0:	f008 fc82 	bl	1d7f8 <strlen>
   14ef4:	4286      	cmp	r6, r0
   14ef6:	f47f aefc 	bne.w	14cf2 <pdn_interface_pdn_id_get+0x3e>
   14efa:	68a1      	ldr	r1, [r4, #8]
   14efc:	4628      	mov	r0, r5
   14efe:	310c      	adds	r1, #12
   14f00:	f008 fc81 	bl	1d806 <strcmp>
   14f04:	e6f5      	b.n	14cf2 <pdn_interface_pdn_id_get+0x3e>
   14f06:	4628      	mov	r0, r5
   14f08:	f008 fc76 	bl	1d7f8 <strlen>
   14f0c:	4606      	mov	r6, r0
   14f0e:	6860      	ldr	r0, [r4, #4]
   14f10:	300c      	adds	r0, #12
   14f12:	f008 fc71 	bl	1d7f8 <strlen>
   14f16:	4286      	cmp	r6, r0
   14f18:	f47f aee5 	bne.w	14ce6 <pdn_interface_pdn_id_get+0x32>
   14f1c:	6861      	ldr	r1, [r4, #4]
   14f1e:	4628      	mov	r0, r5
   14f20:	310c      	adds	r1, #12
   14f22:	f008 fc70 	bl	1d806 <strcmp>
   14f26:	e6de      	b.n	14ce6 <pdn_interface_pdn_id_get+0x32>
   14f28:	4608      	mov	r0, r1
   14f2a:	f008 fc65 	bl	1d7f8 <strlen>
   14f2e:	4606      	mov	r6, r0
   14f30:	6820      	ldr	r0, [r4, #0]
   14f32:	300c      	adds	r0, #12
   14f34:	f008 fc60 	bl	1d7f8 <strlen>
   14f38:	4286      	cmp	r6, r0
   14f3a:	f47f aece 	bne.w	14cda <pdn_interface_pdn_id_get+0x26>
   14f3e:	6821      	ldr	r1, [r4, #0]
   14f40:	4628      	mov	r0, r5
   14f42:	310c      	adds	r1, #12
   14f44:	f008 fc5f 	bl	1d806 <strcmp>
   14f48:	e6c7      	b.n	14cda <pdn_interface_pdn_id_get+0x26>
   14f4a:	bf00      	nop
   14f4c:	20020a08 	.word	0x20020a08
   14f50:	4628      	mov	r0, r5
   14f52:	f008 fc51 	bl	1d7f8 <strlen>
   14f56:	4606      	mov	r6, r0
   14f58:	6920      	ldr	r0, [r4, #16]
   14f5a:	300c      	adds	r0, #12
   14f5c:	f008 fc4c 	bl	1d7f8 <strlen>
   14f60:	4286      	cmp	r6, r0
   14f62:	f47f aed2 	bne.w	14d0a <pdn_interface_pdn_id_get+0x56>
   14f66:	6921      	ldr	r1, [r4, #16]
   14f68:	4628      	mov	r0, r5
   14f6a:	310c      	adds	r1, #12
   14f6c:	f008 fc4b 	bl	1d806 <strcmp>
   14f70:	e6cb      	b.n	14d0a <pdn_interface_pdn_id_get+0x56>
   14f72:	4628      	mov	r0, r5
   14f74:	f008 fc40 	bl	1d7f8 <strlen>
   14f78:	4606      	mov	r6, r0
   14f7a:	6a20      	ldr	r0, [r4, #32]
   14f7c:	300c      	adds	r0, #12
   14f7e:	f008 fc3b 	bl	1d7f8 <strlen>
   14f82:	4286      	cmp	r6, r0
   14f84:	f47f aed9 	bne.w	14d3a <pdn_interface_pdn_id_get+0x86>
   14f88:	6a21      	ldr	r1, [r4, #32]
   14f8a:	4628      	mov	r0, r5
   14f8c:	310c      	adds	r1, #12
   14f8e:	f008 fc3a 	bl	1d806 <strcmp>
   14f92:	e6d2      	b.n	14d3a <pdn_interface_pdn_id_get+0x86>
   14f94:	4628      	mov	r0, r5
   14f96:	f008 fc2f 	bl	1d7f8 <strlen>
   14f9a:	4606      	mov	r6, r0
   14f9c:	69e0      	ldr	r0, [r4, #28]
   14f9e:	300c      	adds	r0, #12
   14fa0:	f008 fc2a 	bl	1d7f8 <strlen>
   14fa4:	4286      	cmp	r6, r0
   14fa6:	f47f aec2 	bne.w	14d2e <pdn_interface_pdn_id_get+0x7a>
   14faa:	69e1      	ldr	r1, [r4, #28]
   14fac:	4628      	mov	r0, r5
   14fae:	310c      	adds	r1, #12
   14fb0:	f008 fc29 	bl	1d806 <strcmp>
   14fb4:	e6bb      	b.n	14d2e <pdn_interface_pdn_id_get+0x7a>
   14fb6:	4628      	mov	r0, r5
   14fb8:	f008 fc1e 	bl	1d7f8 <strlen>
   14fbc:	4606      	mov	r6, r0
   14fbe:	69a0      	ldr	r0, [r4, #24]
   14fc0:	300c      	adds	r0, #12
   14fc2:	f008 fc19 	bl	1d7f8 <strlen>
   14fc6:	4286      	cmp	r6, r0
   14fc8:	f47f aeab 	bne.w	14d22 <pdn_interface_pdn_id_get+0x6e>
   14fcc:	69a1      	ldr	r1, [r4, #24]
   14fce:	4628      	mov	r0, r5
   14fd0:	310c      	adds	r1, #12
   14fd2:	f008 fc18 	bl	1d806 <strcmp>
   14fd6:	e6a4      	b.n	14d22 <pdn_interface_pdn_id_get+0x6e>
   14fd8:	4628      	mov	r0, r5
   14fda:	f008 fc0d 	bl	1d7f8 <strlen>
   14fde:	4606      	mov	r6, r0
   14fe0:	6960      	ldr	r0, [r4, #20]
   14fe2:	300c      	adds	r0, #12
   14fe4:	f008 fc08 	bl	1d7f8 <strlen>
   14fe8:	4286      	cmp	r6, r0
   14fea:	f47f ae94 	bne.w	14d16 <pdn_interface_pdn_id_get+0x62>
   14fee:	6961      	ldr	r1, [r4, #20]
   14ff0:	4628      	mov	r0, r5
   14ff2:	310c      	adds	r1, #12
   14ff4:	f008 fc07 	bl	1d806 <strcmp>
   14ff8:	e68d      	b.n	14d16 <pdn_interface_pdn_id_get+0x62>
   14ffa:	4628      	mov	r0, r5
   14ffc:	f008 fbfc 	bl	1d7f8 <strlen>
   15000:	4607      	mov	r7, r0
   15002:	68e0      	ldr	r0, [r4, #12]
   15004:	300c      	adds	r0, #12
   15006:	f008 fbf7 	bl	1d7f8 <strlen>
   1500a:	4287      	cmp	r7, r0
   1500c:	f47f af09 	bne.w	14e22 <pdn_interface_pdn_id_get+0x16e>
   15010:	68e1      	ldr	r1, [r4, #12]
   15012:	4628      	mov	r0, r5
   15014:	310c      	adds	r1, #12
   15016:	f008 fbf6 	bl	1d806 <strcmp>
   1501a:	2800      	cmp	r0, #0
   1501c:	f47f af01 	bne.w	14e22 <pdn_interface_pdn_id_get+0x16e>
   15020:	68e3      	ldr	r3, [r4, #12]
   15022:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15024:	07d1      	lsls	r1, r2, #31
   15026:	f57f aefc 	bpl.w	14e22 <pdn_interface_pdn_id_get+0x16e>
   1502a:	6858      	ldr	r0, [r3, #4]
   1502c:	1c43      	adds	r3, r0, #1
   1502e:	f47f ae8c 	bne.w	14d4a <pdn_interface_pdn_id_get+0x96>
   15032:	4dc6      	ldr	r5, [pc, #792]	; (1534c <pdn_interface_pdn_id_get+0x698>)
   15034:	4ac6      	ldr	r2, [pc, #792]	; (15350 <pdn_interface_pdn_id_get+0x69c>)
   15036:	f44f 7180 	mov.w	r1, #256	; 0x100
   1503a:	4628      	mov	r0, r5
   1503c:	f7f9 fe08 	bl	ec50 <snprintf>
   15040:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   15044:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   15048:	681b      	ldr	r3, [r3, #0]
   1504a:	4ac2      	ldr	r2, [pc, #776]	; (15354 <pdn_interface_pdn_id_get+0x6a0>)
   1504c:	4428      	add	r0, r5
   1504e:	f8df 830c 	ldr.w	r8, [pc, #780]	; 1535c <pdn_interface_pdn_id_get+0x6a8>
   15052:	f7f9 fdfd 	bl	ec50 <snprintf>
   15056:	4628      	mov	r0, r5
   15058:	f8d8 9000 	ldr.w	r9, [r8]
   1505c:	2700      	movs	r7, #0
   1505e:	f008 fbcb 	bl	1d7f8 <strlen>
   15062:	4629      	mov	r1, r5
   15064:	4602      	mov	r2, r0
   15066:	463b      	mov	r3, r7
   15068:	4648      	mov	r0, r9
   1506a:	9701      	str	r7, [sp, #4]
   1506c:	9700      	str	r7, [sp, #0]
   1506e:	f7fc f99f 	bl	113b0 <at_interface_write>
   15072:	4681      	mov	r9, r0
   15074:	4628      	mov	r0, r5
   15076:	f008 fbbf 	bl	1d7f8 <strlen>
   1507a:	4548      	cmp	r0, r9
   1507c:	f040 81e9 	bne.w	15452 <pdn_interface_pdn_id_get+0x79e>
   15080:	463b      	mov	r3, r7
   15082:	f44f 7280 	mov.w	r2, #256	; 0x100
   15086:	e9cd 7700 	strd	r7, r7, [sp]
   1508a:	4629      	mov	r1, r5
   1508c:	f8d8 0000 	ldr.w	r0, [r8]
   15090:	f7fc fa76 	bl	11580 <at_interface_read>
   15094:	4607      	mov	r7, r0
   15096:	48b0      	ldr	r0, [pc, #704]	; (15358 <pdn_interface_pdn_id_get+0x6a4>)
   15098:	f008 fbae 	bl	1d7f8 <strlen>
   1509c:	4287      	cmp	r7, r0
   1509e:	4602      	mov	r2, r0
   150a0:	f2c0 81c7 	blt.w	15432 <pdn_interface_pdn_id_get+0x77e>
   150a4:	4629      	mov	r1, r5
   150a6:	48ac      	ldr	r0, [pc, #688]	; (15358 <pdn_interface_pdn_id_get+0x6a4>)
   150a8:	f008 fbb9 	bl	1d81e <strncmp>
   150ac:	2800      	cmp	r0, #0
   150ae:	f040 81c0 	bne.w	15432 <pdn_interface_pdn_id_get+0x77e>
   150b2:	4629      	mov	r1, r5
   150b4:	4630      	mov	r0, r6
   150b6:	f7ff f92b 	bl	14310 <pdn_id_get_parser>
   150ba:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   150be:	6858      	ldr	r0, [r3, #4]
   150c0:	e643      	b.n	14d4a <pdn_interface_pdn_id_get+0x96>
   150c2:	4628      	mov	r0, r5
   150c4:	f008 fb98 	bl	1d7f8 <strlen>
   150c8:	4606      	mov	r6, r0
   150ca:	6920      	ldr	r0, [r4, #16]
   150cc:	300c      	adds	r0, #12
   150ce:	f008 fb93 	bl	1d7f8 <strlen>
   150d2:	4286      	cmp	r6, r0
   150d4:	f47f aeab 	bne.w	14e2e <pdn_interface_pdn_id_get+0x17a>
   150d8:	6921      	ldr	r1, [r4, #16]
   150da:	4628      	mov	r0, r5
   150dc:	310c      	adds	r1, #12
   150de:	f008 fb92 	bl	1d806 <strcmp>
   150e2:	2800      	cmp	r0, #0
   150e4:	f47f aea3 	bne.w	14e2e <pdn_interface_pdn_id_get+0x17a>
   150e8:	6923      	ldr	r3, [r4, #16]
   150ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   150ec:	07d2      	lsls	r2, r2, #31
   150ee:	f57f ae9e 	bpl.w	14e2e <pdn_interface_pdn_id_get+0x17a>
   150f2:	2604      	movs	r6, #4
   150f4:	e799      	b.n	1502a <pdn_interface_pdn_id_get+0x376>
   150f6:	4628      	mov	r0, r5
   150f8:	f008 fb7e 	bl	1d7f8 <strlen>
   150fc:	4606      	mov	r6, r0
   150fe:	6960      	ldr	r0, [r4, #20]
   15100:	300c      	adds	r0, #12
   15102:	f008 fb79 	bl	1d7f8 <strlen>
   15106:	4286      	cmp	r6, r0
   15108:	f47f ae97 	bne.w	14e3a <pdn_interface_pdn_id_get+0x186>
   1510c:	6961      	ldr	r1, [r4, #20]
   1510e:	4628      	mov	r0, r5
   15110:	310c      	adds	r1, #12
   15112:	f008 fb78 	bl	1d806 <strcmp>
   15116:	2800      	cmp	r0, #0
   15118:	f47f ae8f 	bne.w	14e3a <pdn_interface_pdn_id_get+0x186>
   1511c:	6963      	ldr	r3, [r4, #20]
   1511e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15120:	07d7      	lsls	r7, r2, #31
   15122:	f57f ae8a 	bpl.w	14e3a <pdn_interface_pdn_id_get+0x186>
   15126:	2605      	movs	r6, #5
   15128:	e77f      	b.n	1502a <pdn_interface_pdn_id_get+0x376>
   1512a:	4628      	mov	r0, r5
   1512c:	f008 fb64 	bl	1d7f8 <strlen>
   15130:	4606      	mov	r6, r0
   15132:	69a0      	ldr	r0, [r4, #24]
   15134:	300c      	adds	r0, #12
   15136:	f008 fb5f 	bl	1d7f8 <strlen>
   1513a:	4286      	cmp	r6, r0
   1513c:	f47f ae83 	bne.w	14e46 <pdn_interface_pdn_id_get+0x192>
   15140:	69a1      	ldr	r1, [r4, #24]
   15142:	4628      	mov	r0, r5
   15144:	310c      	adds	r1, #12
   15146:	f008 fb5e 	bl	1d806 <strcmp>
   1514a:	2800      	cmp	r0, #0
   1514c:	f47f ae7b 	bne.w	14e46 <pdn_interface_pdn_id_get+0x192>
   15150:	69a3      	ldr	r3, [r4, #24]
   15152:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15154:	07d6      	lsls	r6, r2, #31
   15156:	f57f ae76 	bpl.w	14e46 <pdn_interface_pdn_id_get+0x192>
   1515a:	2606      	movs	r6, #6
   1515c:	e765      	b.n	1502a <pdn_interface_pdn_id_get+0x376>
   1515e:	4628      	mov	r0, r5
   15160:	f008 fb4a 	bl	1d7f8 <strlen>
   15164:	4607      	mov	r7, r0
   15166:	68e0      	ldr	r0, [r4, #12]
   15168:	300c      	adds	r0, #12
   1516a:	f008 fb45 	bl	1d7f8 <strlen>
   1516e:	4287      	cmp	r7, r0
   15170:	f47f ae05 	bne.w	14d7e <pdn_interface_pdn_id_get+0xca>
   15174:	68e1      	ldr	r1, [r4, #12]
   15176:	4628      	mov	r0, r5
   15178:	310c      	adds	r1, #12
   1517a:	f008 fb44 	bl	1d806 <strcmp>
   1517e:	2800      	cmp	r0, #0
   15180:	f47f adfd 	bne.w	14d7e <pdn_interface_pdn_id_get+0xca>
   15184:	68e3      	ldr	r3, [r4, #12]
   15186:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15188:	0791      	lsls	r1, r2, #30
   1518a:	f53f af4e 	bmi.w	1502a <pdn_interface_pdn_id_get+0x376>
   1518e:	e5f6      	b.n	14d7e <pdn_interface_pdn_id_get+0xca>
   15190:	4628      	mov	r0, r5
   15192:	f008 fb31 	bl	1d7f8 <strlen>
   15196:	4606      	mov	r6, r0
   15198:	6920      	ldr	r0, [r4, #16]
   1519a:	300c      	adds	r0, #12
   1519c:	f008 fb2c 	bl	1d7f8 <strlen>
   151a0:	4286      	cmp	r6, r0
   151a2:	f47f adf2 	bne.w	14d8a <pdn_interface_pdn_id_get+0xd6>
   151a6:	6921      	ldr	r1, [r4, #16]
   151a8:	4628      	mov	r0, r5
   151aa:	310c      	adds	r1, #12
   151ac:	f008 fb2b 	bl	1d806 <strcmp>
   151b0:	2800      	cmp	r0, #0
   151b2:	f47f adea 	bne.w	14d8a <pdn_interface_pdn_id_get+0xd6>
   151b6:	6923      	ldr	r3, [r4, #16]
   151b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   151ba:	0792      	lsls	r2, r2, #30
   151bc:	d499      	bmi.n	150f2 <pdn_interface_pdn_id_get+0x43e>
   151be:	e5e4      	b.n	14d8a <pdn_interface_pdn_id_get+0xd6>
   151c0:	4628      	mov	r0, r5
   151c2:	f008 fb19 	bl	1d7f8 <strlen>
   151c6:	4606      	mov	r6, r0
   151c8:	6960      	ldr	r0, [r4, #20]
   151ca:	300c      	adds	r0, #12
   151cc:	f008 fb14 	bl	1d7f8 <strlen>
   151d0:	4286      	cmp	r6, r0
   151d2:	f47f ade0 	bne.w	14d96 <pdn_interface_pdn_id_get+0xe2>
   151d6:	6961      	ldr	r1, [r4, #20]
   151d8:	4628      	mov	r0, r5
   151da:	310c      	adds	r1, #12
   151dc:	f008 fb13 	bl	1d806 <strcmp>
   151e0:	2800      	cmp	r0, #0
   151e2:	f47f add8 	bne.w	14d96 <pdn_interface_pdn_id_get+0xe2>
   151e6:	6963      	ldr	r3, [r4, #20]
   151e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   151ea:	0797      	lsls	r7, r2, #30
   151ec:	d49b      	bmi.n	15126 <pdn_interface_pdn_id_get+0x472>
   151ee:	e5d2      	b.n	14d96 <pdn_interface_pdn_id_get+0xe2>
   151f0:	4628      	mov	r0, r5
   151f2:	f008 fb01 	bl	1d7f8 <strlen>
   151f6:	4606      	mov	r6, r0
   151f8:	69a0      	ldr	r0, [r4, #24]
   151fa:	300c      	adds	r0, #12
   151fc:	f008 fafc 	bl	1d7f8 <strlen>
   15200:	4286      	cmp	r6, r0
   15202:	f47f adce 	bne.w	14da2 <pdn_interface_pdn_id_get+0xee>
   15206:	69a1      	ldr	r1, [r4, #24]
   15208:	4628      	mov	r0, r5
   1520a:	310c      	adds	r1, #12
   1520c:	f008 fafb 	bl	1d806 <strcmp>
   15210:	2800      	cmp	r0, #0
   15212:	f47f adc6 	bne.w	14da2 <pdn_interface_pdn_id_get+0xee>
   15216:	69a3      	ldr	r3, [r4, #24]
   15218:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1521a:	0796      	lsls	r6, r2, #30
   1521c:	d49d      	bmi.n	1515a <pdn_interface_pdn_id_get+0x4a6>
   1521e:	e5c0      	b.n	14da2 <pdn_interface_pdn_id_get+0xee>
   15220:	4628      	mov	r0, r5
   15222:	f008 fae9 	bl	1d7f8 <strlen>
   15226:	4606      	mov	r6, r0
   15228:	69e0      	ldr	r0, [r4, #28]
   1522a:	300c      	adds	r0, #12
   1522c:	f008 fae4 	bl	1d7f8 <strlen>
   15230:	4286      	cmp	r6, r0
   15232:	f47f adbc 	bne.w	14dae <pdn_interface_pdn_id_get+0xfa>
   15236:	69e1      	ldr	r1, [r4, #28]
   15238:	4628      	mov	r0, r5
   1523a:	310c      	adds	r1, #12
   1523c:	f008 fae3 	bl	1d806 <strcmp>
   15240:	2800      	cmp	r0, #0
   15242:	f47f adb4 	bne.w	14dae <pdn_interface_pdn_id_get+0xfa>
   15246:	69e3      	ldr	r3, [r4, #28]
   15248:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1524a:	0790      	lsls	r0, r2, #30
   1524c:	f57f adaf 	bpl.w	14dae <pdn_interface_pdn_id_get+0xfa>
   15250:	2607      	movs	r6, #7
   15252:	e6ea      	b.n	1502a <pdn_interface_pdn_id_get+0x376>
   15254:	4628      	mov	r0, r5
   15256:	f008 facf 	bl	1d7f8 <strlen>
   1525a:	4606      	mov	r6, r0
   1525c:	6a20      	ldr	r0, [r4, #32]
   1525e:	300c      	adds	r0, #12
   15260:	f008 faca 	bl	1d7f8 <strlen>
   15264:	4286      	cmp	r6, r0
   15266:	f47f ada8 	bne.w	14dba <pdn_interface_pdn_id_get+0x106>
   1526a:	6a21      	ldr	r1, [r4, #32]
   1526c:	4628      	mov	r0, r5
   1526e:	310c      	adds	r1, #12
   15270:	f008 fac9 	bl	1d806 <strcmp>
   15274:	2800      	cmp	r0, #0
   15276:	f47f ada0 	bne.w	14dba <pdn_interface_pdn_id_get+0x106>
   1527a:	6a23      	ldr	r3, [r4, #32]
   1527c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1527e:	0791      	lsls	r1, r2, #30
   15280:	f57f ad9b 	bpl.w	14dba <pdn_interface_pdn_id_get+0x106>
   15284:	2608      	movs	r6, #8
   15286:	e6d0      	b.n	1502a <pdn_interface_pdn_id_get+0x376>
   15288:	4628      	mov	r0, r5
   1528a:	f008 fab5 	bl	1d7f8 <strlen>
   1528e:	4606      	mov	r6, r0
   15290:	69e0      	ldr	r0, [r4, #28]
   15292:	300c      	adds	r0, #12
   15294:	f008 fab0 	bl	1d7f8 <strlen>
   15298:	4286      	cmp	r6, r0
   1529a:	f47f adda 	bne.w	14e52 <pdn_interface_pdn_id_get+0x19e>
   1529e:	69e1      	ldr	r1, [r4, #28]
   152a0:	4628      	mov	r0, r5
   152a2:	310c      	adds	r1, #12
   152a4:	f008 faaf 	bl	1d806 <strcmp>
   152a8:	2800      	cmp	r0, #0
   152aa:	f47f add2 	bne.w	14e52 <pdn_interface_pdn_id_get+0x19e>
   152ae:	69e3      	ldr	r3, [r4, #28]
   152b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   152b2:	07d0      	lsls	r0, r2, #31
   152b4:	d4cc      	bmi.n	15250 <pdn_interface_pdn_id_get+0x59c>
   152b6:	e5cc      	b.n	14e52 <pdn_interface_pdn_id_get+0x19e>
   152b8:	4628      	mov	r0, r5
   152ba:	f008 fa9d 	bl	1d7f8 <strlen>
   152be:	4606      	mov	r6, r0
   152c0:	6a20      	ldr	r0, [r4, #32]
   152c2:	300c      	adds	r0, #12
   152c4:	f008 fa98 	bl	1d7f8 <strlen>
   152c8:	4286      	cmp	r6, r0
   152ca:	f47f adc8 	bne.w	14e5e <pdn_interface_pdn_id_get+0x1aa>
   152ce:	6a21      	ldr	r1, [r4, #32]
   152d0:	4628      	mov	r0, r5
   152d2:	310c      	adds	r1, #12
   152d4:	f008 fa97 	bl	1d806 <strcmp>
   152d8:	2800      	cmp	r0, #0
   152da:	f47f adc0 	bne.w	14e5e <pdn_interface_pdn_id_get+0x1aa>
   152de:	6a23      	ldr	r3, [r4, #32]
   152e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   152e2:	07d1      	lsls	r1, r2, #31
   152e4:	d4ce      	bmi.n	15284 <pdn_interface_pdn_id_get+0x5d0>
   152e6:	e5ba      	b.n	14e5e <pdn_interface_pdn_id_get+0x1aa>
   152e8:	4628      	mov	r0, r5
   152ea:	f008 fa85 	bl	1d7f8 <strlen>
   152ee:	4606      	mov	r6, r0
   152f0:	68a0      	ldr	r0, [r4, #8]
   152f2:	300c      	adds	r0, #12
   152f4:	f008 fa80 	bl	1d7f8 <strlen>
   152f8:	4286      	cmp	r6, r0
   152fa:	f47f ad8c 	bne.w	14e16 <pdn_interface_pdn_id_get+0x162>
   152fe:	68a1      	ldr	r1, [r4, #8]
   15300:	4628      	mov	r0, r5
   15302:	310c      	adds	r1, #12
   15304:	f008 fa7f 	bl	1d806 <strcmp>
   15308:	2800      	cmp	r0, #0
   1530a:	f47f ad84 	bne.w	14e16 <pdn_interface_pdn_id_get+0x162>
   1530e:	68a3      	ldr	r3, [r4, #8]
   15310:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15312:	07d0      	lsls	r0, r2, #31
   15314:	f57f ad7f 	bpl.w	14e16 <pdn_interface_pdn_id_get+0x162>
   15318:	2602      	movs	r6, #2
   1531a:	e686      	b.n	1502a <pdn_interface_pdn_id_get+0x376>
   1531c:	4628      	mov	r0, r5
   1531e:	f008 fa6b 	bl	1d7f8 <strlen>
   15322:	4606      	mov	r6, r0
   15324:	68a0      	ldr	r0, [r4, #8]
   15326:	300c      	adds	r0, #12
   15328:	f008 fa66 	bl	1d7f8 <strlen>
   1532c:	4286      	cmp	r6, r0
   1532e:	f47f ad20 	bne.w	14d72 <pdn_interface_pdn_id_get+0xbe>
   15332:	68a1      	ldr	r1, [r4, #8]
   15334:	4628      	mov	r0, r5
   15336:	310c      	adds	r1, #12
   15338:	f008 fa65 	bl	1d806 <strcmp>
   1533c:	2800      	cmp	r0, #0
   1533e:	f47f ad18 	bne.w	14d72 <pdn_interface_pdn_id_get+0xbe>
   15342:	68a3      	ldr	r3, [r4, #8]
   15344:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15346:	0790      	lsls	r0, r2, #30
   15348:	d4e6      	bmi.n	15318 <pdn_interface_pdn_id_get+0x664>
   1534a:	e512      	b.n	14d72 <pdn_interface_pdn_id_get+0xbe>
   1534c:	20020908 	.word	0x20020908
   15350:	0001f100 	.word	0x0001f100
   15354:	0001f0fc 	.word	0x0001f0fc
   15358:	0001f110 	.word	0x0001f110
   1535c:	20020904 	.word	0x20020904
   15360:	4628      	mov	r0, r5
   15362:	f008 fa49 	bl	1d7f8 <strlen>
   15366:	4606      	mov	r6, r0
   15368:	6860      	ldr	r0, [r4, #4]
   1536a:	300c      	adds	r0, #12
   1536c:	f008 fa44 	bl	1d7f8 <strlen>
   15370:	4286      	cmp	r6, r0
   15372:	f47f acf8 	bne.w	14d66 <pdn_interface_pdn_id_get+0xb2>
   15376:	6861      	ldr	r1, [r4, #4]
   15378:	4628      	mov	r0, r5
   1537a:	310c      	adds	r1, #12
   1537c:	f008 fa43 	bl	1d806 <strcmp>
   15380:	2800      	cmp	r0, #0
   15382:	f47f acf0 	bne.w	14d66 <pdn_interface_pdn_id_get+0xb2>
   15386:	6863      	ldr	r3, [r4, #4]
   15388:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1538a:	0796      	lsls	r6, r2, #30
   1538c:	f57f aceb 	bpl.w	14d66 <pdn_interface_pdn_id_get+0xb2>
   15390:	2601      	movs	r6, #1
   15392:	e64a      	b.n	1502a <pdn_interface_pdn_id_get+0x376>
   15394:	4628      	mov	r0, r5
   15396:	f008 fa2f 	bl	1d7f8 <strlen>
   1539a:	4606      	mov	r6, r0
   1539c:	6860      	ldr	r0, [r4, #4]
   1539e:	300c      	adds	r0, #12
   153a0:	f008 fa2a 	bl	1d7f8 <strlen>
   153a4:	4286      	cmp	r6, r0
   153a6:	f47f ad30 	bne.w	14e0a <pdn_interface_pdn_id_get+0x156>
   153aa:	6861      	ldr	r1, [r4, #4]
   153ac:	4628      	mov	r0, r5
   153ae:	310c      	adds	r1, #12
   153b0:	f008 fa29 	bl	1d806 <strcmp>
   153b4:	2800      	cmp	r0, #0
   153b6:	f47f ad28 	bne.w	14e0a <pdn_interface_pdn_id_get+0x156>
   153ba:	6863      	ldr	r3, [r4, #4]
   153bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   153be:	07d6      	lsls	r6, r2, #31
   153c0:	d4e6      	bmi.n	15390 <pdn_interface_pdn_id_get+0x6dc>
   153c2:	e522      	b.n	14e0a <pdn_interface_pdn_id_get+0x156>
   153c4:	4608      	mov	r0, r1
   153c6:	f008 fa17 	bl	1d7f8 <strlen>
   153ca:	4606      	mov	r6, r0
   153cc:	6820      	ldr	r0, [r4, #0]
   153ce:	300c      	adds	r0, #12
   153d0:	f008 fa12 	bl	1d7f8 <strlen>
   153d4:	4286      	cmp	r6, r0
   153d6:	f47f acc0 	bne.w	14d5a <pdn_interface_pdn_id_get+0xa6>
   153da:	6821      	ldr	r1, [r4, #0]
   153dc:	4628      	mov	r0, r5
   153de:	310c      	adds	r1, #12
   153e0:	f008 fa11 	bl	1d806 <strcmp>
   153e4:	4606      	mov	r6, r0
   153e6:	2800      	cmp	r0, #0
   153e8:	f47f acb7 	bne.w	14d5a <pdn_interface_pdn_id_get+0xa6>
   153ec:	6823      	ldr	r3, [r4, #0]
   153ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   153f0:	0797      	lsls	r7, r2, #30
   153f2:	f53f ae1a 	bmi.w	1502a <pdn_interface_pdn_id_get+0x376>
   153f6:	e4b0      	b.n	14d5a <pdn_interface_pdn_id_get+0xa6>
   153f8:	4608      	mov	r0, r1
   153fa:	f008 f9fd 	bl	1d7f8 <strlen>
   153fe:	4606      	mov	r6, r0
   15400:	6820      	ldr	r0, [r4, #0]
   15402:	300c      	adds	r0, #12
   15404:	f008 f9f8 	bl	1d7f8 <strlen>
   15408:	4286      	cmp	r6, r0
   1540a:	f47f acf8 	bne.w	14dfe <pdn_interface_pdn_id_get+0x14a>
   1540e:	6821      	ldr	r1, [r4, #0]
   15410:	4628      	mov	r0, r5
   15412:	310c      	adds	r1, #12
   15414:	f008 f9f7 	bl	1d806 <strcmp>
   15418:	4606      	mov	r6, r0
   1541a:	2800      	cmp	r0, #0
   1541c:	f47f acef 	bne.w	14dfe <pdn_interface_pdn_id_get+0x14a>
   15420:	6823      	ldr	r3, [r4, #0]
   15422:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15424:	07d7      	lsls	r7, r2, #31
   15426:	f53f ae00 	bmi.w	1502a <pdn_interface_pdn_id_get+0x376>
   1542a:	e4e8      	b.n	14dfe <pdn_interface_pdn_id_get+0x14a>
   1542c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15430:	4770      	bx	lr
   15432:	480b      	ldr	r0, [pc, #44]	; (15460 <pdn_interface_pdn_id_get+0x7ac>)
   15434:	f008 f9e0 	bl	1d7f8 <strlen>
   15438:	490a      	ldr	r1, [pc, #40]	; (15464 <pdn_interface_pdn_id_get+0x7b0>)
   1543a:	4602      	mov	r2, r0
   1543c:	4808      	ldr	r0, [pc, #32]	; (15460 <pdn_interface_pdn_id_get+0x7ac>)
   1543e:	f008 f9ee 	bl	1d81e <strncmp>
   15442:	b930      	cbnz	r0, 15452 <pdn_interface_pdn_id_get+0x79e>
   15444:	2008      	movs	r0, #8
   15446:	f7fa f92f 	bl	f6a8 <bsd_os_errno_set>
   1544a:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   1544e:	6858      	ldr	r0, [r3, #4]
   15450:	e47b      	b.n	14d4a <pdn_interface_pdn_id_get+0x96>
   15452:	2005      	movs	r0, #5
   15454:	f7fa f928 	bl	f6a8 <bsd_os_errno_set>
   15458:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   1545c:	6858      	ldr	r0, [r3, #4]
   1545e:	e474      	b.n	14d4a <pdn_interface_pdn_id_get+0x96>
   15460:	0001f154 	.word	0x0001f154
   15464:	20020908 	.word	0x20020908

00015468 <linked_list_init>:
   15468:	b128      	cbz	r0, 15476 <linked_list_init+0xe>
   1546a:	2300      	movs	r3, #0
   1546c:	6003      	str	r3, [r0, #0]
   1546e:	e9c0 3301 	strd	r3, r3, [r0, #4]
   15472:	4618      	mov	r0, r3
   15474:	4770      	bx	lr
   15476:	2007      	movs	r0, #7
   15478:	4770      	bx	lr
   1547a:	bf00      	nop

0001547c <linked_list_push>:
   1547c:	6802      	ldr	r2, [r0, #0]
   1547e:	4603      	mov	r3, r0
   15480:	3201      	adds	r2, #1
   15482:	d00e      	beq.n	154a2 <linked_list_push+0x26>
   15484:	2200      	movs	r2, #0
   15486:	600a      	str	r2, [r1, #0]
   15488:	6802      	ldr	r2, [r0, #0]
   1548a:	b13a      	cbz	r2, 1549c <linked_list_push+0x20>
   1548c:	6882      	ldr	r2, [r0, #8]
   1548e:	6011      	str	r1, [r2, #0]
   15490:	6081      	str	r1, [r0, #8]
   15492:	681a      	ldr	r2, [r3, #0]
   15494:	2000      	movs	r0, #0
   15496:	3201      	adds	r2, #1
   15498:	601a      	str	r2, [r3, #0]
   1549a:	4770      	bx	lr
   1549c:	e9c0 1101 	strd	r1, r1, [r0, #4]
   154a0:	e7f7      	b.n	15492 <linked_list_push+0x16>
   154a2:	2004      	movs	r0, #4
   154a4:	4770      	bx	lr
   154a6:	bf00      	nop

000154a8 <linked_list_pop>:
   154a8:	4603      	mov	r3, r0
   154aa:	6800      	ldr	r0, [r0, #0]
   154ac:	b128      	cbz	r0, 154ba <linked_list_pop+0x12>
   154ae:	6858      	ldr	r0, [r3, #4]
   154b0:	681a      	ldr	r2, [r3, #0]
   154b2:	6801      	ldr	r1, [r0, #0]
   154b4:	3a01      	subs	r2, #1
   154b6:	6059      	str	r1, [r3, #4]
   154b8:	601a      	str	r2, [r3, #0]
   154ba:	4770      	bx	lr

000154bc <linked_list_peek>:
   154bc:	6803      	ldr	r3, [r0, #0]
   154be:	b10b      	cbz	r3, 154c4 <linked_list_peek+0x8>
   154c0:	6840      	ldr	r0, [r0, #4]
   154c2:	4770      	bx	lr
   154c4:	4618      	mov	r0, r3
   154c6:	4770      	bx	lr

000154c8 <linked_list_size_get>:
   154c8:	6800      	ldr	r0, [r0, #0]
   154ca:	4770      	bx	lr

000154cc <linked_list_get_next>:
   154cc:	6800      	ldr	r0, [r0, #0]
   154ce:	4770      	bx	lr

000154d0 <nrf_socket>:
   154d0:	b570      	push	{r4, r5, r6, lr}
   154d2:	4604      	mov	r4, r0
   154d4:	460d      	mov	r5, r1
   154d6:	4616      	mov	r6, r2
   154d8:	f7fd fdb2 	bl	13040 <bsd_platform_af_method_table_get>
   154dc:	b130      	cbz	r0, 154ec <nrf_socket+0x1c>
   154de:	6803      	ldr	r3, [r0, #0]
   154e0:	4632      	mov	r2, r6
   154e2:	4629      	mov	r1, r5
   154e4:	4620      	mov	r0, r4
   154e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   154ea:	4718      	bx	r3
   154ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   154f0:	bd70      	pop	{r4, r5, r6, pc}
   154f2:	bf00      	nop

000154f4 <nrf_close>:
   154f4:	b510      	push	{r4, lr}
   154f6:	4604      	mov	r4, r0
   154f8:	f7fd fdf6 	bl	130e8 <bsd_platform_fd_method_table_get>
   154fc:	b120      	cbz	r0, 15508 <nrf_close+0x14>
   154fe:	6843      	ldr	r3, [r0, #4]
   15500:	4620      	mov	r0, r4
   15502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15506:	4718      	bx	r3
   15508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1550c:	bd10      	pop	{r4, pc}
   1550e:	bf00      	nop

00015510 <nrf_sendto>:
   15510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15514:	460d      	mov	r5, r1
   15516:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1551a:	4616      	mov	r6, r2
   1551c:	461f      	mov	r7, r3
   1551e:	4604      	mov	r4, r0
   15520:	f7fd fde2 	bl	130e8 <bsd_platform_fd_method_table_get>
   15524:	b158      	cbz	r0, 1553e <nrf_sendto+0x2e>
   15526:	e9cd 8908 	strd	r8, r9, [sp, #32]
   1552a:	f8d0 e008 	ldr.w	lr, [r0, #8]
   1552e:	463b      	mov	r3, r7
   15530:	4632      	mov	r2, r6
   15532:	4629      	mov	r1, r5
   15534:	4620      	mov	r0, r4
   15536:	46f4      	mov	ip, lr
   15538:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1553c:	4760      	bx	ip
   1553e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15546:	bf00      	nop

00015548 <nrf_send>:
   15548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1554c:	b082      	sub	sp, #8
   1554e:	460e      	mov	r6, r1
   15550:	4617      	mov	r7, r2
   15552:	4698      	mov	r8, r3
   15554:	4605      	mov	r5, r0
   15556:	f7fd fdc7 	bl	130e8 <bsd_platform_fd_method_table_get>
   1555a:	b160      	cbz	r0, 15576 <nrf_send+0x2e>
   1555c:	4604      	mov	r4, r0
   1555e:	2000      	movs	r0, #0
   15560:	e9cd 0000 	strd	r0, r0, [sp]
   15564:	4643      	mov	r3, r8
   15566:	463a      	mov	r2, r7
   15568:	4631      	mov	r1, r6
   1556a:	4628      	mov	r0, r5
   1556c:	68a4      	ldr	r4, [r4, #8]
   1556e:	47a0      	blx	r4
   15570:	b002      	add	sp, #8
   15572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15576:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1557a:	e7f9      	b.n	15570 <nrf_send+0x28>

0001557c <nrf_recvfrom>:
   1557c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15580:	460d      	mov	r5, r1
   15582:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   15586:	4616      	mov	r6, r2
   15588:	461f      	mov	r7, r3
   1558a:	4604      	mov	r4, r0
   1558c:	f7fd fdac 	bl	130e8 <bsd_platform_fd_method_table_get>
   15590:	b158      	cbz	r0, 155aa <nrf_recvfrom+0x2e>
   15592:	e9cd 8908 	strd	r8, r9, [sp, #32]
   15596:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   1559a:	463b      	mov	r3, r7
   1559c:	4632      	mov	r2, r6
   1559e:	4629      	mov	r1, r5
   155a0:	4620      	mov	r0, r4
   155a2:	46f4      	mov	ip, lr
   155a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   155a8:	4760      	bx	ip
   155aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   155ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   155b2:	bf00      	nop

000155b4 <nrf_recv>:
   155b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   155b8:	b082      	sub	sp, #8
   155ba:	460e      	mov	r6, r1
   155bc:	4617      	mov	r7, r2
   155be:	4698      	mov	r8, r3
   155c0:	4605      	mov	r5, r0
   155c2:	f7fd fd91 	bl	130e8 <bsd_platform_fd_method_table_get>
   155c6:	b160      	cbz	r0, 155e2 <nrf_recv+0x2e>
   155c8:	4604      	mov	r4, r0
   155ca:	2000      	movs	r0, #0
   155cc:	e9cd 0000 	strd	r0, r0, [sp]
   155d0:	4643      	mov	r3, r8
   155d2:	463a      	mov	r2, r7
   155d4:	4631      	mov	r1, r6
   155d6:	4628      	mov	r0, r5
   155d8:	68e4      	ldr	r4, [r4, #12]
   155da:	47a0      	blx	r4
   155dc:	b002      	add	sp, #8
   155de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   155e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   155e6:	e7f9      	b.n	155dc <nrf_recv+0x28>

000155e8 <nrf_connect>:
   155e8:	b570      	push	{r4, r5, r6, lr}
   155ea:	460d      	mov	r5, r1
   155ec:	4616      	mov	r6, r2
   155ee:	4604      	mov	r4, r0
   155f0:	f7fd fd7a 	bl	130e8 <bsd_platform_fd_method_table_get>
   155f4:	b130      	cbz	r0, 15604 <nrf_connect+0x1c>
   155f6:	6943      	ldr	r3, [r0, #20]
   155f8:	4632      	mov	r2, r6
   155fa:	4629      	mov	r1, r5
   155fc:	4620      	mov	r0, r4
   155fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15602:	4718      	bx	r3
   15604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15608:	bd70      	pop	{r4, r5, r6, pc}
   1560a:	bf00      	nop

0001560c <nrf_listen>:
   1560c:	b570      	push	{r4, r5, r6, lr}
   1560e:	460d      	mov	r5, r1
   15610:	4604      	mov	r4, r0
   15612:	f7fd fd69 	bl	130e8 <bsd_platform_fd_method_table_get>
   15616:	b128      	cbz	r0, 15624 <nrf_listen+0x18>
   15618:	6983      	ldr	r3, [r0, #24]
   1561a:	4629      	mov	r1, r5
   1561c:	4620      	mov	r0, r4
   1561e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15622:	4718      	bx	r3
   15624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15628:	bd70      	pop	{r4, r5, r6, pc}
   1562a:	bf00      	nop

0001562c <nrf_accept>:
   1562c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15630:	460d      	mov	r5, r1
   15632:	4616      	mov	r6, r2
   15634:	4604      	mov	r4, r0
   15636:	f7fd fd57 	bl	130e8 <bsd_platform_fd_method_table_get>
   1563a:	b140      	cbz	r0, 1564e <nrf_accept+0x22>
   1563c:	69c7      	ldr	r7, [r0, #28]
   1563e:	4632      	mov	r2, r6
   15640:	4629      	mov	r1, r5
   15642:	4620      	mov	r0, r4
   15644:	46bc      	mov	ip, r7
   15646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1564a:	2300      	movs	r3, #0
   1564c:	4760      	bx	ip
   1564e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15656:	bf00      	nop

00015658 <nrf_bind>:
   15658:	b570      	push	{r4, r5, r6, lr}
   1565a:	460d      	mov	r5, r1
   1565c:	4616      	mov	r6, r2
   1565e:	4604      	mov	r4, r0
   15660:	f7fd fd42 	bl	130e8 <bsd_platform_fd_method_table_get>
   15664:	b130      	cbz	r0, 15674 <nrf_bind+0x1c>
   15666:	6903      	ldr	r3, [r0, #16]
   15668:	4632      	mov	r2, r6
   1566a:	4629      	mov	r1, r5
   1566c:	4620      	mov	r0, r4
   1566e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15672:	4718      	bx	r3
   15674:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15678:	bd70      	pop	{r4, r5, r6, pc}
   1567a:	bf00      	nop

0001567c <nrf_setsockopt>:
   1567c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15680:	f8dd 8018 	ldr.w	r8, [sp, #24]
   15684:	460d      	mov	r5, r1
   15686:	4616      	mov	r6, r2
   15688:	461f      	mov	r7, r3
   1568a:	4604      	mov	r4, r0
   1568c:	f7fd fd2c 	bl	130e8 <bsd_platform_fd_method_table_get>
   15690:	b158      	cbz	r0, 156aa <nrf_setsockopt+0x2e>
   15692:	f8cd 8018 	str.w	r8, [sp, #24]
   15696:	f8d0 e020 	ldr.w	lr, [r0, #32]
   1569a:	463b      	mov	r3, r7
   1569c:	4632      	mov	r2, r6
   1569e:	4629      	mov	r1, r5
   156a0:	4620      	mov	r0, r4
   156a2:	46f4      	mov	ip, lr
   156a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   156a8:	4760      	bx	ip
   156aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   156ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   156b2:	bf00      	nop

000156b4 <nrf_getsockopt>:
   156b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   156b8:	f8dd 8018 	ldr.w	r8, [sp, #24]
   156bc:	460d      	mov	r5, r1
   156be:	4616      	mov	r6, r2
   156c0:	461f      	mov	r7, r3
   156c2:	4604      	mov	r4, r0
   156c4:	f7fd fd10 	bl	130e8 <bsd_platform_fd_method_table_get>
   156c8:	b158      	cbz	r0, 156e2 <nrf_getsockopt+0x2e>
   156ca:	f8cd 8018 	str.w	r8, [sp, #24]
   156ce:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   156d2:	463b      	mov	r3, r7
   156d4:	4632      	mov	r2, r6
   156d6:	4629      	mov	r1, r5
   156d8:	4620      	mov	r0, r4
   156da:	46f4      	mov	ip, lr
   156dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   156e0:	4760      	bx	ip
   156e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   156e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   156ea:	bf00      	nop

000156ec <nrf_getaddrinfo>:
   156ec:	f7fd bd6c 	b.w	131c8 <bsd_platform_getaddrinfo>

000156f0 <nrf_freeaddrinfo>:
   156f0:	f7fd bd6c 	b.w	131cc <bsd_platform_freeaddrinfo>

000156f4 <nrf_poll>:
   156f4:	f7fd bd6c 	b.w	131d0 <bsd_platform_poll>

000156f8 <nrf_fcntl>:
   156f8:	f7fd bdc4 	b.w	13284 <bsd_platform_fcntl>

000156fc <at_client_evt_handler>:
   156fc:	b120      	cbz	r0, 15708 <at_client_evt_handler+0xc>
   156fe:	f850 1b08 	ldr.w	r1, [r0], #8
   15702:	0c09      	lsrs	r1, r1, #16
   15704:	f7fb bf9c 	b.w	11640 <rpc_at_event_handler>
   15708:	4770      	bx	lr
   1570a:	bf00      	nop

0001570c <rpc_at_client_init>:
   1570c:	4801      	ldr	r0, [pc, #4]	; (15714 <rpc_at_client_init+0x8>)
   1570e:	f001 bdbf 	b.w	17290 <rpc_client_register>
   15712:	bf00      	nop
   15714:	0001f168 	.word	0x0001f168

00015718 <rpc_at_client_request_alloc>:
   15718:	b180      	cbz	r0, 1573c <rpc_at_client_request_alloc+0x24>
   1571a:	2300      	movs	r3, #0
   1571c:	b510      	push	{r4, lr}
   1571e:	b082      	sub	sp, #8
   15720:	aa02      	add	r2, sp, #8
   15722:	4604      	mov	r4, r0
   15724:	f842 3d04 	str.w	r3, [r2, #-4]!
   15728:	2003      	movs	r0, #3
   1572a:	f001 ffe9 	bl	17700 <rpc_message_alloc>
   1572e:	b918      	cbnz	r0, 15738 <rpc_at_client_request_alloc+0x20>
   15730:	9b01      	ldr	r3, [sp, #4]
   15732:	b10b      	cbz	r3, 15738 <rpc_at_client_request_alloc+0x20>
   15734:	3308      	adds	r3, #8
   15736:	6023      	str	r3, [r4, #0]
   15738:	b002      	add	sp, #8
   1573a:	bd10      	pop	{r4, pc}
   1573c:	200e      	movs	r0, #14
   1573e:	4770      	bx	lr

00015740 <rpc_at_client_request_send>:
   15740:	b150      	cbz	r0, 15758 <rpc_at_client_request_send+0x18>
   15742:	4603      	mov	r3, r0
   15744:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   15748:	2003      	movs	r0, #3
   1574a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1574e:	f843 1d08 	str.w	r1, [r3, #-8]!
   15752:	4619      	mov	r1, r3
   15754:	f001 bfbc 	b.w	176d0 <rpc_message_send>
   15758:	200e      	movs	r0, #14
   1575a:	4770      	bx	lr

0001575c <rpc_at_client_message_free>:
   1575c:	b120      	cbz	r0, 15768 <rpc_at_client_message_free+0xc>
   1575e:	f1a0 0108 	sub.w	r1, r0, #8
   15762:	2003      	movs	r0, #3
   15764:	f001 bffe 	b.w	17764 <rpc_message_free>
   15768:	200e      	movs	r0, #14
   1576a:	4770      	bx	lr

0001576c <rpc_at_client_data_free>:
   1576c:	b118      	cbz	r0, 15776 <rpc_at_client_data_free+0xa>
   1576e:	4601      	mov	r1, r0
   15770:	2003      	movs	r0, #3
   15772:	f002 b909 	b.w	17988 <rpc_message_data_free>
   15776:	200e      	movs	r0, #14
   15778:	4770      	bx	lr
   1577a:	bf00      	nop

0001577c <ip_recvd_packet_free_cb>:
   1577c:	b510      	push	{r4, lr}
   1577e:	4604      	mov	r4, r0
   15780:	6800      	ldr	r0, [r0, #0]
   15782:	f7fc fc1b 	bl	11fbc <rpc_ip_client_data_free>
   15786:	68a0      	ldr	r0, [r4, #8]
   15788:	b118      	cbz	r0, 15792 <ip_recvd_packet_free_cb+0x16>
   1578a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1578e:	f7fc bbb5 	b.w	11efc <nrf_free>
   15792:	bd10      	pop	{r4, pc}

00015794 <rpc_error_to_nrf_bsd_error>:
   15794:	2810      	cmp	r0, #16
   15796:	bf9a      	itte	ls
   15798:	4b02      	ldrls	r3, [pc, #8]	; (157a4 <rpc_error_to_nrf_bsd_error+0x10>)
   1579a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   1579e:	202d      	movhi	r0, #45	; 0x2d
   157a0:	4770      	bx	lr
   157a2:	bf00      	nop
   157a4:	0001f178 	.word	0x0001f178

000157a8 <ip_interface_request_create>:
   157a8:	b570      	push	{r4, r5, r6, lr}
   157aa:	2500      	movs	r5, #0
   157ac:	b082      	sub	sp, #8
   157ae:	ac02      	add	r4, sp, #8
   157b0:	f844 5d04 	str.w	r5, [r4, #-4]!
   157b4:	4606      	mov	r6, r0
   157b6:	460d      	mov	r5, r1
   157b8:	4620      	mov	r0, r4
   157ba:	4619      	mov	r1, r3
   157bc:	4614      	mov	r4, r2
   157be:	f7fc fbcb 	bl	11f58 <rpc_ip_client_request_alloc>
   157c2:	b960      	cbnz	r0, 157de <ip_interface_request_create+0x36>
   157c4:	9b01      	ldr	r3, [sp, #4]
   157c6:	2208      	movs	r2, #8
   157c8:	7258      	strb	r0, [r3, #9]
   157ca:	7298      	strb	r0, [r3, #10]
   157cc:	72d8      	strb	r0, [r3, #11]
   157ce:	4618      	mov	r0, r3
   157d0:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   157d4:	60dc      	str	r4, [r3, #12]
   157d6:	611d      	str	r5, [r3, #16]
   157d8:	721a      	strb	r2, [r3, #8]
   157da:	b002      	add	sp, #8
   157dc:	bd70      	pop	{r4, r5, r6, pc}
   157de:	9b01      	ldr	r3, [sp, #4]
   157e0:	4618      	mov	r0, r3
   157e2:	b002      	add	sp, #8
   157e4:	bd70      	pop	{r4, r5, r6, pc}
   157e6:	bf00      	nop

000157e8 <ip_interface_request_send>:
   157e8:	b570      	push	{r4, r5, r6, lr}
   157ea:	460c      	mov	r4, r1
   157ec:	4605      	mov	r5, r0
   157ee:	4611      	mov	r1, r2
   157f0:	4620      	mov	r0, r4
   157f2:	461e      	mov	r6, r3
   157f4:	f7fc fbc4 	bl	11f80 <rpc_ip_client_request_send>
   157f8:	b900      	cbnz	r0, 157fc <ip_interface_request_send+0x14>
   157fa:	bd70      	pop	{r4, r5, r6, pc}
   157fc:	6820      	ldr	r0, [r4, #0]
   157fe:	b108      	cbz	r0, 15804 <ip_interface_request_send+0x1c>
   15800:	f7fc fbdc 	bl	11fbc <rpc_ip_client_data_free>
   15804:	4620      	mov	r0, r4
   15806:	f7fc fbd1 	bl	11fac <rpc_ip_client_message_free>
   1580a:	602e      	str	r6, [r5, #0]
   1580c:	2023      	movs	r0, #35	; 0x23
   1580e:	bd70      	pop	{r4, r5, r6, pc}

00015810 <ip_interface_wait>:
   15810:	b538      	push	{r3, r4, r5, lr}
   15812:	4605      	mov	r5, r0
   15814:	f001 fb98 	bl	16f48 <interface_socket_wait>
   15818:	4604      	mov	r4, r0
   1581a:	b108      	cbz	r0, 15820 <ip_interface_wait+0x10>
   1581c:	4620      	mov	r0, r4
   1581e:	bd38      	pop	{r3, r4, r5, pc}
   15820:	4628      	mov	r0, r5
   15822:	f001 fc05 	bl	17030 <interface_socket_from_handle_get>
   15826:	2800      	cmp	r0, #0
   15828:	d0f8      	beq.n	1581c <ip_interface_wait+0xc>
   1582a:	6844      	ldr	r4, [r0, #4]
   1582c:	2c00      	cmp	r4, #0
   1582e:	d0f5      	beq.n	1581c <ip_interface_wait+0xc>
   15830:	2300      	movs	r3, #0
   15832:	6043      	str	r3, [r0, #4]
   15834:	4620      	mov	r0, r4
   15836:	bd38      	pop	{r3, r4, r5, pc}

00015838 <ip_interface_init>:
   15838:	b538      	push	{r3, r4, r5, lr}
   1583a:	2300      	movs	r3, #0
   1583c:	4d07      	ldr	r5, [pc, #28]	; (1585c <ip_interface_init+0x24>)
   1583e:	4c08      	ldr	r4, [pc, #32]	; (15860 <ip_interface_init+0x28>)
   15840:	4619      	mov	r1, r3
   15842:	2224      	movs	r2, #36	; 0x24
   15844:	4807      	ldr	r0, [pc, #28]	; (15864 <ip_interface_init+0x2c>)
   15846:	602b      	str	r3, [r5, #0]
   15848:	6023      	str	r3, [r4, #0]
   1584a:	f008 f831 	bl	1d8b0 <memset>
   1584e:	f7fc fb7d 	bl	11f4c <rpc_ip_client_init>
   15852:	3000      	adds	r0, #0
   15854:	bf18      	it	ne
   15856:	2001      	movne	r0, #1
   15858:	4240      	negs	r0, r0
   1585a:	bd38      	pop	{r3, r4, r5, pc}
   1585c:	20020a40 	.word	0x20020a40
   15860:	20020a3c 	.word	0x20020a3c
   15864:	20020a48 	.word	0x20020a48

00015868 <ip_interface_open>:
   15868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1586c:	4606      	mov	r6, r0
   1586e:	2000      	movs	r0, #0
   15870:	f026 0308 	bic.w	r3, r6, #8
   15874:	b082      	sub	sp, #8
   15876:	2b02      	cmp	r3, #2
   15878:	460c      	mov	r4, r1
   1587a:	4617      	mov	r7, r2
   1587c:	9000      	str	r0, [sp, #0]
   1587e:	d002      	beq.n	15886 <ip_interface_open+0x1e>
   15880:	2e05      	cmp	r6, #5
   15882:	f040 8084 	bne.w	1598e <ip_interface_open+0x126>
   15886:	1e63      	subs	r3, r4, #1
   15888:	2b02      	cmp	r3, #2
   1588a:	d85c      	bhi.n	15946 <ip_interface_open+0xde>
   1588c:	2f00      	cmp	r7, #0
   1588e:	d154      	bne.n	1593a <ip_interface_open+0xd2>
   15890:	2c01      	cmp	r4, #1
   15892:	d067      	beq.n	15964 <ip_interface_open+0xfc>
   15894:	2c03      	cmp	r4, #3
   15896:	bf18      	it	ne
   15898:	2702      	movne	r7, #2
   1589a:	4a48      	ldr	r2, [pc, #288]	; (159bc <ip_interface_open+0x154>)
   1589c:	4621      	mov	r1, r4
   1589e:	4668      	mov	r0, sp
   158a0:	f001 faa6 	bl	16df0 <interface_socket_allocate>
   158a4:	9b00      	ldr	r3, [sp, #0]
   158a6:	4680      	mov	r8, r0
   158a8:	2b00      	cmp	r3, #0
   158aa:	d059      	beq.n	15960 <ip_interface_open+0xf8>
   158ac:	2100      	movs	r1, #0
   158ae:	a802      	add	r0, sp, #8
   158b0:	f840 1d04 	str.w	r1, [r0, #-4]!
   158b4:	e9c3 6403 	strd	r6, r4, [r3, #12]
   158b8:	615f      	str	r7, [r3, #20]
   158ba:	f7fc fb4d 	bl	11f58 <rpc_ip_client_request_alloc>
   158be:	2800      	cmp	r0, #0
   158c0:	d14b      	bne.n	1595a <ip_interface_open+0xf2>
   158c2:	f247 0201 	movw	r2, #28673	; 0x7001
   158c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   158ca:	2108      	movs	r1, #8
   158cc:	9d01      	ldr	r5, [sp, #4]
   158ce:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
   158d2:	60ea      	str	r2, [r5, #12]
   158d4:	7268      	strb	r0, [r5, #9]
   158d6:	72a8      	strb	r0, [r5, #10]
   158d8:	72e8      	strb	r0, [r5, #11]
   158da:	7229      	strb	r1, [r5, #8]
   158dc:	742b      	strb	r3, [r5, #16]
   158de:	746b      	strb	r3, [r5, #17]
   158e0:	74ab      	strb	r3, [r5, #18]
   158e2:	74eb      	strb	r3, [r5, #19]
   158e4:	68ab      	ldr	r3, [r5, #8]
   158e6:	2e05      	cmp	r6, #5
   158e8:	f103 030c 	add.w	r3, r3, #12
   158ec:	60ab      	str	r3, [r5, #8]
   158ee:	d003      	beq.n	158f8 <ip_interface_open+0x90>
   158f0:	2e0a      	cmp	r6, #10
   158f2:	bf14      	ite	ne
   158f4:	2601      	movne	r6, #1
   158f6:	2602      	moveq	r6, #2
   158f8:	616e      	str	r6, [r5, #20]
   158fa:	61ef      	str	r7, [r5, #28]
   158fc:	61ac      	str	r4, [r5, #24]
   158fe:	f247 0101 	movw	r1, #28673	; 0x7001
   15902:	4628      	mov	r0, r5
   15904:	9f00      	ldr	r7, [sp, #0]
   15906:	f7fc fb3b 	bl	11f80 <rpc_ip_client_request_send>
   1590a:	4606      	mov	r6, r0
   1590c:	b360      	cbz	r0, 15968 <ip_interface_open+0x100>
   1590e:	6828      	ldr	r0, [r5, #0]
   15910:	b108      	cbz	r0, 15916 <ip_interface_open+0xae>
   15912:	f7fc fb53 	bl	11fbc <rpc_ip_client_data_free>
   15916:	4628      	mov	r0, r5
   15918:	f7fc fb48 	bl	11fac <rpc_ip_client_message_free>
   1591c:	2301      	movs	r3, #1
   1591e:	2523      	movs	r5, #35	; 0x23
   15920:	603b      	str	r3, [r7, #0]
   15922:	4640      	mov	r0, r8
   15924:	f001 fac2 	bl	16eac <interface_socket_free>
   15928:	4628      	mov	r0, r5
   1592a:	f7f9 febd 	bl	f6a8 <bsd_os_errno_set>
   1592e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   15932:	4640      	mov	r0, r8
   15934:	b002      	add	sp, #8
   15936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1593a:	2c01      	cmp	r4, #1
   1593c:	d009      	beq.n	15952 <ip_interface_open+0xea>
   1593e:	2c02      	cmp	r4, #2
   15940:	d109      	bne.n	15956 <ip_interface_open+0xee>
   15942:	2f02      	cmp	r7, #2
   15944:	d0a9      	beq.n	1589a <ip_interface_open+0x32>
   15946:	2016      	movs	r0, #22
   15948:	f7f9 feae 	bl	f6a8 <bsd_os_errno_set>
   1594c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   15950:	e7ef      	b.n	15932 <ip_interface_open+0xca>
   15952:	2f01      	cmp	r7, #1
   15954:	d1f7      	bne.n	15946 <ip_interface_open+0xde>
   15956:	2702      	movs	r7, #2
   15958:	e79f      	b.n	1589a <ip_interface_open+0x32>
   1595a:	9d01      	ldr	r5, [sp, #4]
   1595c:	2d00      	cmp	r5, #0
   1595e:	d1c1      	bne.n	158e4 <ip_interface_open+0x7c>
   15960:	250c      	movs	r5, #12
   15962:	e7de      	b.n	15922 <ip_interface_open+0xba>
   15964:	4627      	mov	r7, r4
   15966:	e798      	b.n	1589a <ip_interface_open+0x32>
   15968:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1596c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15970:	2102      	movs	r1, #2
   15972:	4640      	mov	r0, r8
   15974:	f001 fae8 	bl	16f48 <interface_socket_wait>
   15978:	4605      	mov	r5, r0
   1597a:	2800      	cmp	r0, #0
   1597c:	d1d1      	bne.n	15922 <ip_interface_open+0xba>
   1597e:	4640      	mov	r0, r8
   15980:	f001 fb56 	bl	17030 <interface_socket_from_handle_get>
   15984:	b148      	cbz	r0, 1599a <ip_interface_open+0x132>
   15986:	6845      	ldr	r5, [r0, #4]
   15988:	b13d      	cbz	r5, 1599a <ip_interface_open+0x132>
   1598a:	6046      	str	r6, [r0, #4]
   1598c:	e7c9      	b.n	15922 <ip_interface_open+0xba>
   1598e:	202f      	movs	r0, #47	; 0x2f
   15990:	f7f9 fe8a 	bl	f6a8 <bsd_os_errno_set>
   15994:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   15998:	e7cb      	b.n	15932 <ip_interface_open+0xca>
   1599a:	3c02      	subs	r4, #2
   1599c:	2c01      	cmp	r4, #1
   1599e:	d8c8      	bhi.n	15932 <ip_interface_open+0xca>
   159a0:	4640      	mov	r0, r8
   159a2:	9b00      	ldr	r3, [sp, #0]
   159a4:	681a      	ldr	r2, [r3, #0]
   159a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   159aa:	601a      	str	r2, [r3, #0]
   159ac:	681a      	ldr	r2, [r3, #0]
   159ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   159b2:	601a      	str	r2, [r3, #0]
   159b4:	b002      	add	sp, #8
   159b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   159ba:	bf00      	nop
   159bc:	0001577d 	.word	0x0001577d

000159c0 <ip_interface_close>:
   159c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   159c4:	b082      	sub	sp, #8
   159c6:	4606      	mov	r6, r0
   159c8:	f001 fb32 	bl	17030 <interface_socket_from_handle_get>
   159cc:	2800      	cmp	r0, #0
   159ce:	d063      	beq.n	15a98 <ip_interface_close+0xd8>
   159d0:	4604      	mov	r4, r0
   159d2:	2100      	movs	r1, #0
   159d4:	a802      	add	r0, sp, #8
   159d6:	6827      	ldr	r7, [r4, #0]
   159d8:	f840 1d04 	str.w	r1, [r0, #-4]!
   159dc:	f8d4 8018 	ldr.w	r8, [r4, #24]
   159e0:	f7fc faba 	bl	11f58 <rpc_ip_client_request_alloc>
   159e4:	2800      	cmp	r0, #0
   159e6:	d13a      	bne.n	15a5e <ip_interface_close+0x9e>
   159e8:	f247 0309 	movw	r3, #28681	; 0x7009
   159ec:	2208      	movs	r2, #8
   159ee:	9d01      	ldr	r5, [sp, #4]
   159f0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   159f4:	60eb      	str	r3, [r5, #12]
   159f6:	f8c5 8010 	str.w	r8, [r5, #16]
   159fa:	7268      	strb	r0, [r5, #9]
   159fc:	72a8      	strb	r0, [r5, #10]
   159fe:	72e8      	strb	r0, [r5, #11]
   15a00:	722a      	strb	r2, [r5, #8]
   15a02:	6823      	ldr	r3, [r4, #0]
   15a04:	f247 0109 	movw	r1, #28681	; 0x7009
   15a08:	0c1b      	lsrs	r3, r3, #16
   15a0a:	041b      	lsls	r3, r3, #16
   15a0c:	f043 030d 	orr.w	r3, r3, #13
   15a10:	6023      	str	r3, [r4, #0]
   15a12:	6823      	ldr	r3, [r4, #0]
   15a14:	4628      	mov	r0, r5
   15a16:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   15a1a:	6023      	str	r3, [r4, #0]
   15a1c:	6823      	ldr	r3, [r4, #0]
   15a1e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   15a22:	6023      	str	r3, [r4, #0]
   15a24:	f7fc faac 	bl	11f80 <rpc_ip_client_request_send>
   15a28:	bb40      	cbnz	r0, 15a7c <ip_interface_close+0xbc>
   15a2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15a2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15a32:	210e      	movs	r1, #14
   15a34:	4630      	mov	r0, r6
   15a36:	f001 fa87 	bl	16f48 <interface_socket_wait>
   15a3a:	4604      	mov	r4, r0
   15a3c:	b1a0      	cbz	r0, 15a68 <ip_interface_close+0xa8>
   15a3e:	4c17      	ldr	r4, [pc, #92]	; (15a9c <ip_interface_close+0xdc>)
   15a40:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   15a44:	b120      	cbz	r0, 15a50 <ip_interface_close+0x90>
   15a46:	f7fc fab1 	bl	11fac <rpc_ip_client_message_free>
   15a4a:	2300      	movs	r3, #0
   15a4c:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   15a50:	4630      	mov	r0, r6
   15a52:	f001 fa2b 	bl	16eac <interface_socket_free>
   15a56:	2000      	movs	r0, #0
   15a58:	b002      	add	sp, #8
   15a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15a5e:	9d01      	ldr	r5, [sp, #4]
   15a60:	200c      	movs	r0, #12
   15a62:	2d00      	cmp	r5, #0
   15a64:	d1cd      	bne.n	15a02 <ip_interface_close+0x42>
   15a66:	e012      	b.n	15a8e <ip_interface_close+0xce>
   15a68:	4630      	mov	r0, r6
   15a6a:	f001 fae1 	bl	17030 <interface_socket_from_handle_get>
   15a6e:	2800      	cmp	r0, #0
   15a70:	d0e5      	beq.n	15a3e <ip_interface_close+0x7e>
   15a72:	6843      	ldr	r3, [r0, #4]
   15a74:	2b00      	cmp	r3, #0
   15a76:	d0e2      	beq.n	15a3e <ip_interface_close+0x7e>
   15a78:	6044      	str	r4, [r0, #4]
   15a7a:	e7e0      	b.n	15a3e <ip_interface_close+0x7e>
   15a7c:	6828      	ldr	r0, [r5, #0]
   15a7e:	b108      	cbz	r0, 15a84 <ip_interface_close+0xc4>
   15a80:	f7fc fa9c 	bl	11fbc <rpc_ip_client_data_free>
   15a84:	4628      	mov	r0, r5
   15a86:	f7fc fa91 	bl	11fac <rpc_ip_client_message_free>
   15a8a:	2023      	movs	r0, #35	; 0x23
   15a8c:	6027      	str	r7, [r4, #0]
   15a8e:	f7f9 fe0b 	bl	f6a8 <bsd_os_errno_set>
   15a92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15a96:	e7df      	b.n	15a58 <ip_interface_close+0x98>
   15a98:	2009      	movs	r0, #9
   15a9a:	e7f8      	b.n	15a8e <ip_interface_close+0xce>
   15a9c:	20020a48 	.word	0x20020a48

00015aa0 <ip_interface_sendto>:
   15aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15aa4:	2500      	movs	r5, #0
   15aa6:	b089      	sub	sp, #36	; 0x24
   15aa8:	9103      	str	r1, [sp, #12]
   15aaa:	4614      	mov	r4, r2
   15aac:	9301      	str	r3, [sp, #4]
   15aae:	9507      	str	r5, [sp, #28]
   15ab0:	4607      	mov	r7, r0
   15ab2:	9e12      	ldr	r6, [sp, #72]	; 0x48
   15ab4:	f001 fabc 	bl	17030 <interface_socket_from_handle_get>
   15ab8:	2800      	cmp	r0, #0
   15aba:	f000 8124 	beq.w	15d06 <ip_interface_sendto+0x266>
   15abe:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   15ac2:	f300 8118 	bgt.w	15cf6 <ip_interface_sendto+0x256>
   15ac6:	6903      	ldr	r3, [r0, #16]
   15ac8:	4605      	mov	r5, r0
   15aca:	2b01      	cmp	r3, #1
   15acc:	f000 80d1 	beq.w	15c72 <ip_interface_sendto+0x1d2>
   15ad0:	682a      	ldr	r2, [r5, #0]
   15ad2:	0390      	lsls	r0, r2, #14
   15ad4:	d423      	bmi.n	15b1e <ip_interface_sendto+0x7e>
   15ad6:	682a      	ldr	r2, [r5, #0]
   15ad8:	0091      	lsls	r1, r2, #2
   15ada:	d406      	bmi.n	15aea <ip_interface_sendto+0x4a>
   15adc:	2b01      	cmp	r3, #1
   15ade:	f000 80ed 	beq.w	15cbc <ip_interface_sendto+0x21c>
   15ae2:	682b      	ldr	r3, [r5, #0]
   15ae4:	031a      	lsls	r2, r3, #12
   15ae6:	f140 8102 	bpl.w	15cee <ip_interface_sendto+0x24e>
   15aea:	682b      	ldr	r3, [r5, #0]
   15aec:	031b      	lsls	r3, r3, #12
   15aee:	f140 8106 	bpl.w	15cfe <ip_interface_sendto+0x25e>
   15af2:	68a8      	ldr	r0, [r5, #8]
   15af4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 15d10 <ip_interface_sendto+0x270>
   15af8:	2800      	cmp	r0, #0
   15afa:	f040 8096 	bne.w	15c2a <ip_interface_sendto+0x18a>
   15afe:	682b      	ldr	r3, [r5, #0]
   15b00:	0118      	lsls	r0, r3, #4
   15b02:	f140 8082 	bpl.w	15c0a <ip_interface_sendto+0x16a>
   15b06:	682b      	ldr	r3, [r5, #0]
   15b08:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   15b0c:	602b      	str	r3, [r5, #0]
   15b0e:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   15b12:	2800      	cmp	r0, #0
   15b14:	d17c      	bne.n	15c10 <ip_interface_sendto+0x170>
   15b16:	4620      	mov	r0, r4
   15b18:	b009      	add	sp, #36	; 0x24
   15b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b1e:	f247 0806 	movw	r8, #28678	; 0x7006
   15b22:	f04f 0a0c 	mov.w	sl, #12
   15b26:	043b      	lsls	r3, r7, #16
   15b28:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 15d10 <ip_interface_sendto+0x270>
   15b2c:	9304      	str	r3, [sp, #16]
   15b2e:	4621      	mov	r1, r4
   15b30:	a807      	add	r0, sp, #28
   15b32:	f7fc fa11 	bl	11f58 <rpc_ip_client_request_alloc>
   15b36:	2804      	cmp	r0, #4
   15b38:	d0f9      	beq.n	15b2e <ip_interface_sendto+0x8e>
   15b3a:	2800      	cmp	r0, #0
   15b3c:	d171      	bne.n	15c22 <ip_interface_sendto+0x182>
   15b3e:	9b07      	ldr	r3, [sp, #28]
   15b40:	f883 a008 	strb.w	sl, [r3, #8]
   15b44:	7258      	strb	r0, [r3, #9]
   15b46:	7298      	strb	r0, [r3, #10]
   15b48:	72d8      	strb	r0, [r3, #11]
   15b4a:	b33e      	cbz	r6, 15b9c <ip_interface_sendto+0xfc>
   15b4c:	68ea      	ldr	r2, [r5, #12]
   15b4e:	6871      	ldr	r1, [r6, #4]
   15b50:	428a      	cmp	r2, r1
   15b52:	d10a      	bne.n	15b6a <ip_interface_sendto+0xca>
   15b54:	2a02      	cmp	r2, #2
   15b56:	f103 001c 	add.w	r0, r3, #28
   15b5a:	7831      	ldrb	r1, [r6, #0]
   15b5c:	f000 8090 	beq.w	15c80 <ip_interface_sendto+0x1e0>
   15b60:	2a0a      	cmp	r2, #10
   15b62:	d102      	bne.n	15b6a <ip_interface_sendto+0xca>
   15b64:	2924      	cmp	r1, #36	; 0x24
   15b66:	f000 80af 	beq.w	15cc8 <ip_interface_sendto+0x228>
   15b6a:	6818      	ldr	r0, [r3, #0]
   15b6c:	b110      	cbz	r0, 15b74 <ip_interface_sendto+0xd4>
   15b6e:	f7fc fa25 	bl	11fbc <rpc_ip_client_data_free>
   15b72:	9b07      	ldr	r3, [sp, #28]
   15b74:	4618      	mov	r0, r3
   15b76:	f7fc fa19 	bl	11fac <rpc_ip_client_message_free>
   15b7a:	2016      	movs	r0, #22
   15b7c:	682b      	ldr	r3, [r5, #0]
   15b7e:	031a      	lsls	r2, r3, #12
   15b80:	d453      	bmi.n	15c2a <ip_interface_sendto+0x18a>
   15b82:	682b      	ldr	r3, [r5, #0]
   15b84:	b29b      	uxth	r3, r3
   15b86:	2b0d      	cmp	r3, #13
   15b88:	d0b6      	beq.n	15af8 <ip_interface_sendto+0x58>
   15b8a:	682b      	ldr	r3, [r5, #0]
   15b8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   15b90:	602b      	str	r3, [r5, #0]
   15b92:	682b      	ldr	r3, [r5, #0]
   15b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   15b98:	602b      	str	r3, [r5, #0]
   15b9a:	e7ad      	b.n	15af8 <ip_interface_sendto+0x58>
   15b9c:	4642      	mov	r2, r8
   15b9e:	9901      	ldr	r1, [sp, #4]
   15ba0:	6159      	str	r1, [r3, #20]
   15ba2:	69a9      	ldr	r1, [r5, #24]
   15ba4:	9804      	ldr	r0, [sp, #16]
   15ba6:	6119      	str	r1, [r3, #16]
   15ba8:	9903      	ldr	r1, [sp, #12]
   15baa:	4302      	orrs	r2, r0
   15bac:	60da      	str	r2, [r3, #12]
   15bae:	605c      	str	r4, [r3, #4]
   15bb0:	b119      	cbz	r1, 15bba <ip_interface_sendto+0x11a>
   15bb2:	6818      	ldr	r0, [r3, #0]
   15bb4:	4622      	mov	r2, r4
   15bb6:	f007 fe51 	bl	1d85c <memcpy>
   15bba:	682b      	ldr	r3, [r5, #0]
   15bbc:	4641      	mov	r1, r8
   15bbe:	9305      	str	r3, [sp, #20]
   15bc0:	682b      	ldr	r3, [r5, #0]
   15bc2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   15bc6:	602b      	str	r3, [r5, #0]
   15bc8:	682b      	ldr	r3, [r5, #0]
   15bca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   15bce:	602b      	str	r3, [r5, #0]
   15bd0:	9b07      	ldr	r3, [sp, #28]
   15bd2:	4618      	mov	r0, r3
   15bd4:	9302      	str	r3, [sp, #8]
   15bd6:	f7fc f9d3 	bl	11f80 <rpc_ip_client_request_send>
   15bda:	9b02      	ldr	r3, [sp, #8]
   15bdc:	4683      	mov	fp, r0
   15bde:	bb58      	cbnz	r0, 15c38 <ip_interface_sendto+0x198>
   15be0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   15be4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15be8:	4611      	mov	r1, r2
   15bea:	4638      	mov	r0, r7
   15bec:	f001 f9ac 	bl	16f48 <interface_socket_wait>
   15bf0:	b370      	cbz	r0, 15c50 <ip_interface_sendto+0x1b0>
   15bf2:	682b      	ldr	r3, [r5, #0]
   15bf4:	0319      	lsls	r1, r3, #12
   15bf6:	d437      	bmi.n	15c68 <ip_interface_sendto+0x1c8>
   15bf8:	280c      	cmp	r0, #12
   15bfa:	d1bf      	bne.n	15b7c <ip_interface_sendto+0xdc>
   15bfc:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   15c00:	2800      	cmp	r0, #0
   15c02:	d094      	beq.n	15b2e <ip_interface_sendto+0x8e>
   15c04:	f7fc f9d2 	bl	11fac <rpc_ip_client_message_free>
   15c08:	e791      	b.n	15b2e <ip_interface_sendto+0x8e>
   15c0a:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   15c0e:	6984      	ldr	r4, [r0, #24]
   15c10:	f7fc f9cc 	bl	11fac <rpc_ip_client_message_free>
   15c14:	2300      	movs	r3, #0
   15c16:	4620      	mov	r0, r4
   15c18:	f849 3027 	str.w	r3, [r9, r7, lsl #2]
   15c1c:	b009      	add	sp, #36	; 0x24
   15c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c22:	682b      	ldr	r3, [r5, #0]
   15c24:	200c      	movs	r0, #12
   15c26:	031a      	lsls	r2, r3, #12
   15c28:	d5ab      	bpl.n	15b82 <ip_interface_sendto+0xe2>
   15c2a:	f7f9 fd3d 	bl	f6a8 <bsd_os_errno_set>
   15c2e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15c32:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   15c36:	e76c      	b.n	15b12 <ip_interface_sendto+0x72>
   15c38:	6818      	ldr	r0, [r3, #0]
   15c3a:	469b      	mov	fp, r3
   15c3c:	b108      	cbz	r0, 15c42 <ip_interface_sendto+0x1a2>
   15c3e:	f7fc f9bd 	bl	11fbc <rpc_ip_client_data_free>
   15c42:	4658      	mov	r0, fp
   15c44:	f7fc f9b2 	bl	11fac <rpc_ip_client_message_free>
   15c48:	9b05      	ldr	r3, [sp, #20]
   15c4a:	2023      	movs	r0, #35	; 0x23
   15c4c:	602b      	str	r3, [r5, #0]
   15c4e:	e795      	b.n	15b7c <ip_interface_sendto+0xdc>
   15c50:	4638      	mov	r0, r7
   15c52:	f001 f9ed 	bl	17030 <interface_socket_from_handle_get>
   15c56:	4603      	mov	r3, r0
   15c58:	b1f0      	cbz	r0, 15c98 <ip_interface_sendto+0x1f8>
   15c5a:	6840      	ldr	r0, [r0, #4]
   15c5c:	b1e0      	cbz	r0, 15c98 <ip_interface_sendto+0x1f8>
   15c5e:	f8c3 b004 	str.w	fp, [r3, #4]
   15c62:	682b      	ldr	r3, [r5, #0]
   15c64:	0319      	lsls	r1, r3, #12
   15c66:	d5c7      	bpl.n	15bf8 <ip_interface_sendto+0x158>
   15c68:	68a8      	ldr	r0, [r5, #8]
   15c6a:	682b      	ldr	r3, [r5, #0]
   15c6c:	031e      	lsls	r6, r3, #12
   15c6e:	d588      	bpl.n	15b82 <ip_interface_sendto+0xe2>
   15c70:	e742      	b.n	15af8 <ip_interface_sendto+0x58>
   15c72:	2e00      	cmp	r6, #0
   15c74:	f43f af2c 	beq.w	15ad0 <ip_interface_sendto+0x30>
   15c78:	2016      	movs	r0, #22
   15c7a:	f8df 9094 	ldr.w	r9, [pc, #148]	; 15d10 <ip_interface_sendto+0x270>
   15c7e:	e7d4      	b.n	15c2a <ip_interface_sendto+0x18a>
   15c80:	2910      	cmp	r1, #16
   15c82:	f47f af72 	bne.w	15b6a <ip_interface_sendto+0xca>
   15c86:	2204      	movs	r2, #4
   15c88:	8931      	ldrh	r1, [r6, #8]
   15c8a:	835a      	strh	r2, [r3, #26]
   15c8c:	8319      	strh	r1, [r3, #24]
   15c8e:	f106 010c 	add.w	r1, r6, #12
   15c92:	f007 fde3 	bl	1d85c <memcpy>
   15c96:	e01e      	b.n	15cd6 <ip_interface_sendto+0x236>
   15c98:	682b      	ldr	r3, [r5, #0]
   15c9a:	031b      	lsls	r3, r3, #12
   15c9c:	f53f af2f 	bmi.w	15afe <ip_interface_sendto+0x5e>
   15ca0:	682b      	ldr	r3, [r5, #0]
   15ca2:	b29b      	uxth	r3, r3
   15ca4:	2b0d      	cmp	r3, #13
   15ca6:	f43f af2a 	beq.w	15afe <ip_interface_sendto+0x5e>
   15caa:	682b      	ldr	r3, [r5, #0]
   15cac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   15cb0:	602b      	str	r3, [r5, #0]
   15cb2:	682b      	ldr	r3, [r5, #0]
   15cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   15cb8:	602b      	str	r3, [r5, #0]
   15cba:	e720      	b.n	15afe <ip_interface_sendto+0x5e>
   15cbc:	682b      	ldr	r3, [r5, #0]
   15cbe:	b29b      	uxth	r3, r3
   15cc0:	2b05      	cmp	r3, #5
   15cc2:	f47f af12 	bne.w	15aea <ip_interface_sendto+0x4a>
   15cc6:	e70c      	b.n	15ae2 <ip_interface_sendto+0x42>
   15cc8:	2210      	movs	r2, #16
   15cca:	8931      	ldrh	r1, [r6, #8]
   15ccc:	835a      	strh	r2, [r3, #26]
   15cce:	8319      	strh	r1, [r3, #24]
   15cd0:	18b1      	adds	r1, r6, r2
   15cd2:	f007 fdc3 	bl	1d85c <memcpy>
   15cd6:	f247 0207 	movw	r2, #28679	; 0x7007
   15cda:	9b07      	ldr	r3, [sp, #28]
   15cdc:	4690      	mov	r8, r2
   15cde:	6899      	ldr	r1, [r3, #8]
   15ce0:	8b58      	ldrh	r0, [r3, #26]
   15ce2:	3104      	adds	r1, #4
   15ce4:	4401      	add	r1, r0
   15ce6:	9801      	ldr	r0, [sp, #4]
   15ce8:	6099      	str	r1, [r3, #8]
   15cea:	6158      	str	r0, [r3, #20]
   15cec:	e759      	b.n	15ba2 <ip_interface_sendto+0x102>
   15cee:	2023      	movs	r0, #35	; 0x23
   15cf0:	f8df 901c 	ldr.w	r9, [pc, #28]	; 15d10 <ip_interface_sendto+0x270>
   15cf4:	e799      	b.n	15c2a <ip_interface_sendto+0x18a>
   15cf6:	2028      	movs	r0, #40	; 0x28
   15cf8:	f8df 9014 	ldr.w	r9, [pc, #20]	; 15d10 <ip_interface_sendto+0x270>
   15cfc:	e795      	b.n	15c2a <ip_interface_sendto+0x18a>
   15cfe:	2039      	movs	r0, #57	; 0x39
   15d00:	f8df 900c 	ldr.w	r9, [pc, #12]	; 15d10 <ip_interface_sendto+0x270>
   15d04:	e791      	b.n	15c2a <ip_interface_sendto+0x18a>
   15d06:	2009      	movs	r0, #9
   15d08:	f8df 9004 	ldr.w	r9, [pc, #4]	; 15d10 <ip_interface_sendto+0x270>
   15d0c:	e78d      	b.n	15c2a <ip_interface_sendto+0x18a>
   15d0e:	bf00      	nop
   15d10:	20020a48 	.word	0x20020a48

00015d14 <ip_interface_recvfrom>:
   15d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d18:	b085      	sub	sp, #20
   15d1a:	2a00      	cmp	r2, #0
   15d1c:	f000 8110 	beq.w	15f40 <ip_interface_recvfrom+0x22c>
   15d20:	468a      	mov	sl, r1
   15d22:	4699      	mov	r9, r3
   15d24:	4607      	mov	r7, r0
   15d26:	4616      	mov	r6, r2
   15d28:	f001 f982 	bl	17030 <interface_socket_from_handle_get>
   15d2c:	4604      	mov	r4, r0
   15d2e:	2800      	cmp	r0, #0
   15d30:	f000 810d 	beq.w	15f4e <ip_interface_recvfrom+0x23a>
   15d34:	6803      	ldr	r3, [r0, #0]
   15d36:	02d9      	lsls	r1, r3, #11
   15d38:	d565      	bpl.n	15e06 <ip_interface_recvfrom+0xf2>
   15d3a:	f019 0f02 	tst.w	r9, #2
   15d3e:	bf18      	it	ne
   15d40:	f04f 0800 	movne.w	r8, #0
   15d44:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   15d48:	bf08      	it	eq
   15d4a:	6803      	ldreq	r3, [r0, #0]
   15d4c:	f009 0510 	and.w	r5, r9, #16
   15d50:	bf04      	itt	eq
   15d52:	f083 5880 	eoreq.w	r8, r3, #268435456	; 0x10000000
   15d56:	f3c8 7800 	ubfxeq	r8, r8, #28, #1
   15d5a:	6823      	ldr	r3, [r4, #0]
   15d5c:	03da      	lsls	r2, r3, #15
   15d5e:	d56d      	bpl.n	15e3c <ip_interface_recvfrom+0x128>
   15d60:	6823      	ldr	r3, [r4, #0]
   15d62:	69e0      	ldr	r0, [r4, #28]
   15d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   15d68:	6023      	str	r3, [r4, #0]
   15d6a:	6803      	ldr	r3, [r0, #0]
   15d6c:	68db      	ldr	r3, [r3, #12]
   15d6e:	4798      	blx	r3
   15d70:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   15d74:	4683      	mov	fp, r0
   15d76:	f000 8081 	beq.w	15e7c <ip_interface_recvfrom+0x168>
   15d7a:	4286      	cmp	r6, r0
   15d7c:	dd03      	ble.n	15d86 <ip_interface_recvfrom+0x72>
   15d7e:	6923      	ldr	r3, [r4, #16]
   15d80:	2b01      	cmp	r3, #1
   15d82:	f000 80a7 	beq.w	15ed4 <ip_interface_recvfrom+0x1c0>
   15d86:	2500      	movs	r5, #0
   15d88:	69e0      	ldr	r0, [r4, #28]
   15d8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15d8c:	b103      	cbz	r3, 15d90 <ip_interface_recvfrom+0x7c>
   15d8e:	681b      	ldr	r3, [r3, #0]
   15d90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   15d92:	e9cd a600 	strd	sl, r6, [sp]
   15d96:	e9cd 2302 	strd	r2, r3, [sp, #8]
   15d9a:	6803      	ldr	r3, [r0, #0]
   15d9c:	464a      	mov	r2, r9
   15d9e:	689b      	ldr	r3, [r3, #8]
   15da0:	4669      	mov	r1, sp
   15da2:	4798      	blx	r3
   15da4:	4683      	mov	fp, r0
   15da6:	69e0      	ldr	r0, [r4, #28]
   15da8:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   15dac:	6803      	ldr	r3, [r0, #0]
   15dae:	bf18      	it	ne
   15db0:	2601      	movne	r6, #1
   15db2:	68db      	ldr	r3, [r3, #12]
   15db4:	bf0a      	itet	eq
   15db6:	2600      	moveq	r6, #0
   15db8:	f04f 0800 	movne.w	r8, #0
   15dbc:	f04f 0823 	moveq.w	r8, #35	; 0x23
   15dc0:	4798      	blx	r3
   15dc2:	3001      	adds	r0, #1
   15dc4:	d135      	bne.n	15e32 <ip_interface_recvfrom+0x11e>
   15dc6:	2d00      	cmp	r5, #0
   15dc8:	f000 80b6 	beq.w	15f38 <ip_interface_recvfrom+0x224>
   15dcc:	2e00      	cmp	r6, #0
   15dce:	f000 80a6 	beq.w	15f1e <ip_interface_recvfrom+0x20a>
   15dd2:	6823      	ldr	r3, [r4, #0]
   15dd4:	0319      	lsls	r1, r3, #12
   15dd6:	d506      	bpl.n	15de6 <ip_interface_recvfrom+0xd2>
   15dd8:	6823      	ldr	r3, [r4, #0]
   15dda:	b29b      	uxth	r3, r3
   15ddc:	2b0d      	cmp	r3, #13
   15dde:	d002      	beq.n	15de6 <ip_interface_recvfrom+0xd2>
   15de0:	6923      	ldr	r3, [r4, #16]
   15de2:	2b01      	cmp	r3, #1
   15de4:	d025      	beq.n	15e32 <ip_interface_recvfrom+0x11e>
   15de6:	6823      	ldr	r3, [r4, #0]
   15de8:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   15dec:	6823      	ldr	r3, [r4, #0]
   15dee:	f040 80b1 	bne.w	15f54 <ip_interface_recvfrom+0x240>
   15df2:	031a      	lsls	r2, r3, #12
   15df4:	d475      	bmi.n	15ee2 <ip_interface_recvfrom+0x1ce>
   15df6:	f1b8 0f00 	cmp.w	r8, #0
   15dfa:	f040 808a 	bne.w	15f12 <ip_interface_recvfrom+0x1fe>
   15dfe:	4658      	mov	r0, fp
   15e00:	b005      	add	sp, #20
   15e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e06:	6803      	ldr	r3, [r0, #0]
   15e08:	b29b      	uxth	r3, r3
   15e0a:	2b06      	cmp	r3, #6
   15e0c:	d073      	beq.n	15ef6 <ip_interface_recvfrom+0x1e2>
   15e0e:	6803      	ldr	r3, [r0, #0]
   15e10:	b29b      	uxth	r3, r3
   15e12:	2b07      	cmp	r3, #7
   15e14:	bf0c      	ite	eq
   15e16:	f04f 0809 	moveq.w	r8, #9
   15e1a:	f04f 0839 	movne.w	r8, #57	; 0x39
   15e1e:	69e0      	ldr	r0, [r4, #28]
   15e20:	6803      	ldr	r3, [r0, #0]
   15e22:	68db      	ldr	r3, [r3, #12]
   15e24:	4798      	blx	r3
   15e26:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   15e2a:	4683      	mov	fp, r0
   15e2c:	d0db      	beq.n	15de6 <ip_interface_recvfrom+0xd2>
   15e2e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   15e32:	6823      	ldr	r3, [r4, #0]
   15e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   15e38:	6023      	str	r3, [r4, #0]
   15e3a:	e7dc      	b.n	15df6 <ip_interface_recvfrom+0xe2>
   15e3c:	f1b8 0f00 	cmp.w	r8, #0
   15e40:	f000 8081 	beq.w	15f46 <ip_interface_recvfrom+0x232>
   15e44:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   15e48:	6a23      	ldr	r3, [r4, #32]
   15e4a:	4611      	mov	r1, r2
   15e4c:	2b00      	cmp	r3, #0
   15e4e:	bf08      	it	eq
   15e50:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   15e54:	4638      	mov	r0, r7
   15e56:	f001 f877 	bl	16f48 <interface_socket_wait>
   15e5a:	4680      	mov	r8, r0
   15e5c:	b358      	cbz	r0, 15eb6 <ip_interface_recvfrom+0x1a2>
   15e5e:	6823      	ldr	r3, [r4, #0]
   15e60:	69e0      	ldr	r0, [r4, #28]
   15e62:	031b      	lsls	r3, r3, #12
   15e64:	d521      	bpl.n	15eaa <ip_interface_recvfrom+0x196>
   15e66:	6823      	ldr	r3, [r4, #0]
   15e68:	b29b      	uxth	r3, r3
   15e6a:	2b0d      	cmp	r3, #13
   15e6c:	d01d      	beq.n	15eaa <ip_interface_recvfrom+0x196>
   15e6e:	6925      	ldr	r5, [r4, #16]
   15e70:	f1a5 0501 	sub.w	r5, r5, #1
   15e74:	fab5 f585 	clz	r5, r5
   15e78:	096d      	lsrs	r5, r5, #5
   15e7a:	e786      	b.n	15d8a <ip_interface_recvfrom+0x76>
   15e7c:	6823      	ldr	r3, [r4, #0]
   15e7e:	0318      	lsls	r0, r3, #12
   15e80:	d5dc      	bpl.n	15e3c <ip_interface_recvfrom+0x128>
   15e82:	6823      	ldr	r3, [r4, #0]
   15e84:	b29b      	uxth	r3, r3
   15e86:	2b0d      	cmp	r3, #13
   15e88:	d0d8      	beq.n	15e3c <ip_interface_recvfrom+0x128>
   15e8a:	6923      	ldr	r3, [r4, #16]
   15e8c:	69e0      	ldr	r0, [r4, #28]
   15e8e:	2b01      	cmp	r3, #1
   15e90:	d034      	beq.n	15efc <ip_interface_recvfrom+0x1e8>
   15e92:	f04f 0839 	mov.w	r8, #57	; 0x39
   15e96:	6823      	ldr	r3, [r4, #0]
   15e98:	0c1b      	lsrs	r3, r3, #16
   15e9a:	041b      	lsls	r3, r3, #16
   15e9c:	f043 030d 	orr.w	r3, r3, #13
   15ea0:	6023      	str	r3, [r4, #0]
   15ea2:	6823      	ldr	r3, [r4, #0]
   15ea4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   15ea8:	6023      	str	r3, [r4, #0]
   15eaa:	6803      	ldr	r3, [r0, #0]
   15eac:	68db      	ldr	r3, [r3, #12]
   15eae:	4798      	blx	r3
   15eb0:	3001      	adds	r0, #1
   15eb2:	d1be      	bne.n	15e32 <ip_interface_recvfrom+0x11e>
   15eb4:	e797      	b.n	15de6 <ip_interface_recvfrom+0xd2>
   15eb6:	4638      	mov	r0, r7
   15eb8:	f001 f8ba 	bl	17030 <interface_socket_from_handle_get>
   15ebc:	b138      	cbz	r0, 15ece <ip_interface_recvfrom+0x1ba>
   15ebe:	f8d0 8004 	ldr.w	r8, [r0, #4]
   15ec2:	f1b8 0f00 	cmp.w	r8, #0
   15ec6:	d002      	beq.n	15ece <ip_interface_recvfrom+0x1ba>
   15ec8:	2300      	movs	r3, #0
   15eca:	6043      	str	r3, [r0, #4]
   15ecc:	e7c7      	b.n	15e5e <ip_interface_recvfrom+0x14a>
   15ece:	f04f 0801 	mov.w	r8, #1
   15ed2:	e742      	b.n	15d5a <ip_interface_recvfrom+0x46>
   15ed4:	b11d      	cbz	r5, 15ede <ip_interface_recvfrom+0x1ca>
   15ed6:	6823      	ldr	r3, [r4, #0]
   15ed8:	00db      	lsls	r3, r3, #3
   15eda:	d5b3      	bpl.n	15e44 <ip_interface_recvfrom+0x130>
   15edc:	e753      	b.n	15d86 <ip_interface_recvfrom+0x72>
   15ede:	69e0      	ldr	r0, [r4, #28]
   15ee0:	e753      	b.n	15d8a <ip_interface_recvfrom+0x76>
   15ee2:	6823      	ldr	r3, [r4, #0]
   15ee4:	b29b      	uxth	r3, r3
   15ee6:	2b0d      	cmp	r3, #13
   15ee8:	d185      	bne.n	15df6 <ip_interface_recvfrom+0xe2>
   15eea:	68a3      	ldr	r3, [r4, #8]
   15eec:	2b00      	cmp	r3, #0
   15eee:	d082      	beq.n	15df6 <ip_interface_recvfrom+0xe2>
   15ef0:	f8d4 8008 	ldr.w	r8, [r4, #8]
   15ef4:	e77f      	b.n	15df6 <ip_interface_recvfrom+0xe2>
   15ef6:	f04f 0809 	mov.w	r8, #9
   15efa:	e790      	b.n	15e1e <ip_interface_recvfrom+0x10a>
   15efc:	6803      	ldr	r3, [r0, #0]
   15efe:	68db      	ldr	r3, [r3, #12]
   15f00:	4798      	blx	r3
   15f02:	3001      	adds	r0, #1
   15f04:	d00b      	beq.n	15f1e <ip_interface_recvfrom+0x20a>
   15f06:	f04f 0823 	mov.w	r8, #35	; 0x23
   15f0a:	6823      	ldr	r3, [r4, #0]
   15f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   15f10:	6023      	str	r3, [r4, #0]
   15f12:	4640      	mov	r0, r8
   15f14:	f7f9 fbc8 	bl	f6a8 <bsd_os_errno_set>
   15f18:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   15f1c:	e76f      	b.n	15dfe <ip_interface_recvfrom+0xea>
   15f1e:	6823      	ldr	r3, [r4, #0]
   15f20:	f04f 0b00 	mov.w	fp, #0
   15f24:	0c1b      	lsrs	r3, r3, #16
   15f26:	041b      	lsls	r3, r3, #16
   15f28:	f043 030d 	orr.w	r3, r3, #13
   15f2c:	6023      	str	r3, [r4, #0]
   15f2e:	6823      	ldr	r3, [r4, #0]
   15f30:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   15f34:	6023      	str	r3, [r4, #0]
   15f36:	e762      	b.n	15dfe <ip_interface_recvfrom+0xea>
   15f38:	2e00      	cmp	r6, #0
   15f3a:	f47f af4a 	bne.w	15dd2 <ip_interface_recvfrom+0xbe>
   15f3e:	e752      	b.n	15de6 <ip_interface_recvfrom+0xd2>
   15f40:	f04f 0816 	mov.w	r8, #22
   15f44:	e7e5      	b.n	15f12 <ip_interface_recvfrom+0x1fe>
   15f46:	f04f 0823 	mov.w	r8, #35	; 0x23
   15f4a:	69e0      	ldr	r0, [r4, #28]
   15f4c:	e7ad      	b.n	15eaa <ip_interface_recvfrom+0x196>
   15f4e:	f04f 0809 	mov.w	r8, #9
   15f52:	e7de      	b.n	15f12 <ip_interface_recvfrom+0x1fe>
   15f54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   15f58:	6023      	str	r3, [r4, #0]
   15f5a:	6823      	ldr	r3, [r4, #0]
   15f5c:	f04f 0869 	mov.w	r8, #105	; 0x69
   15f60:	0c1b      	lsrs	r3, r3, #16
   15f62:	041b      	lsls	r3, r3, #16
   15f64:	f043 030d 	orr.w	r3, r3, #13
   15f68:	6023      	str	r3, [r4, #0]
   15f6a:	e7d2      	b.n	15f12 <ip_interface_recvfrom+0x1fe>

00015f6c <ip_interface_connect>:
   15f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15f70:	b082      	sub	sp, #8
   15f72:	2900      	cmp	r1, #0
   15f74:	d044      	beq.n	16000 <ip_interface_connect+0x94>
   15f76:	2a00      	cmp	r2, #0
   15f78:	d042      	beq.n	16000 <ip_interface_connect+0x94>
   15f7a:	4606      	mov	r6, r0
   15f7c:	460f      	mov	r7, r1
   15f7e:	f001 f857 	bl	17030 <interface_socket_from_handle_get>
   15f82:	4605      	mov	r5, r0
   15f84:	2800      	cmp	r0, #0
   15f86:	f000 8096 	beq.w	160b6 <ip_interface_connect+0x14a>
   15f8a:	6803      	ldr	r3, [r0, #0]
   15f8c:	b29b      	uxth	r3, r3
   15f8e:	2b02      	cmp	r3, #2
   15f90:	d004      	beq.n	15f9c <ip_interface_connect+0x30>
   15f92:	6803      	ldr	r3, [r0, #0]
   15f94:	b29b      	uxth	r3, r3
   15f96:	2b04      	cmp	r3, #4
   15f98:	f040 808d 	bne.w	160b6 <ip_interface_connect+0x14a>
   15f9c:	6829      	ldr	r1, [r5, #0]
   15f9e:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   15fa2:	f040 8084 	bne.w	160ae <ip_interface_connect+0x142>
   15fa6:	a802      	add	r0, sp, #8
   15fa8:	f840 1d04 	str.w	r1, [r0, #-4]!
   15fac:	f8d5 8018 	ldr.w	r8, [r5, #24]
   15fb0:	f7fb ffd2 	bl	11f58 <rpc_ip_client_request_alloc>
   15fb4:	bb70      	cbnz	r0, 16014 <ip_interface_connect+0xa8>
   15fb6:	2108      	movs	r1, #8
   15fb8:	0433      	lsls	r3, r6, #16
   15fba:	9c01      	ldr	r4, [sp, #4]
   15fbc:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
   15fc0:	f042 0202 	orr.w	r2, r2, #2
   15fc4:	60e2      	str	r2, [r4, #12]
   15fc6:	f8c4 8010 	str.w	r8, [r4, #16]
   15fca:	7260      	strb	r0, [r4, #9]
   15fcc:	72a0      	strb	r0, [r4, #10]
   15fce:	72e0      	strb	r0, [r4, #11]
   15fd0:	7221      	strb	r1, [r4, #8]
   15fd2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
   15fd6:	f043 0302 	orr.w	r3, r3, #2
   15fda:	60e3      	str	r3, [r4, #12]
   15fdc:	68a3      	ldr	r3, [r4, #8]
   15fde:	69aa      	ldr	r2, [r5, #24]
   15fe0:	3304      	adds	r3, #4
   15fe2:	6122      	str	r2, [r4, #16]
   15fe4:	60a3      	str	r3, [r4, #8]
   15fe6:	68eb      	ldr	r3, [r5, #12]
   15fe8:	687a      	ldr	r2, [r7, #4]
   15fea:	4293      	cmp	r3, r2
   15fec:	d108      	bne.n	16000 <ip_interface_connect+0x94>
   15fee:	2b02      	cmp	r3, #2
   15ff0:	f104 0018 	add.w	r0, r4, #24
   15ff4:	783a      	ldrb	r2, [r7, #0]
   15ff6:	d03a      	beq.n	1606e <ip_interface_connect+0x102>
   15ff8:	2b0a      	cmp	r3, #10
   15ffa:	d101      	bne.n	16000 <ip_interface_connect+0x94>
   15ffc:	2a24      	cmp	r2, #36	; 0x24
   15ffe:	d00e      	beq.n	1601e <ip_interface_connect+0xb2>
   16000:	2416      	movs	r4, #22
   16002:	4620      	mov	r0, r4
   16004:	f7f9 fb50 	bl	f6a8 <bsd_os_errno_set>
   16008:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1600c:	4620      	mov	r0, r4
   1600e:	b002      	add	sp, #8
   16010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16014:	9c01      	ldr	r4, [sp, #4]
   16016:	2c00      	cmp	r4, #0
   16018:	d04f      	beq.n	160ba <ip_interface_connect+0x14e>
   1601a:	0433      	lsls	r3, r6, #16
   1601c:	e7d9      	b.n	15fd2 <ip_interface_connect+0x66>
   1601e:	2210      	movs	r2, #16
   16020:	893b      	ldrh	r3, [r7, #8]
   16022:	18b9      	adds	r1, r7, r2
   16024:	82e2      	strh	r2, [r4, #22]
   16026:	82a3      	strh	r3, [r4, #20]
   16028:	f007 fc18 	bl	1d85c <memcpy>
   1602c:	68a3      	ldr	r3, [r4, #8]
   1602e:	8ae2      	ldrh	r2, [r4, #22]
   16030:	f247 0102 	movw	r1, #28674	; 0x7002
   16034:	4413      	add	r3, r2
   16036:	60a3      	str	r3, [r4, #8]
   16038:	682f      	ldr	r7, [r5, #0]
   1603a:	682b      	ldr	r3, [r5, #0]
   1603c:	4620      	mov	r0, r4
   1603e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   16042:	602b      	str	r3, [r5, #0]
   16044:	f7fb ff9c 	bl	11f80 <rpc_ip_client_request_send>
   16048:	b9e0      	cbnz	r0, 16084 <ip_interface_connect+0x118>
   1604a:	682b      	ldr	r3, [r5, #0]
   1604c:	f013 5880 	ands.w	r8, r3, #268435456	; 0x10000000
   16050:	d12f      	bne.n	160b2 <ip_interface_connect+0x146>
   16052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16056:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1605a:	2105      	movs	r1, #5
   1605c:	4630      	mov	r0, r6
   1605e:	f000 ff73 	bl	16f48 <interface_socket_wait>
   16062:	4604      	mov	r4, r0
   16064:	b1c0      	cbz	r0, 16098 <ip_interface_connect+0x12c>
   16066:	2c73      	cmp	r4, #115	; 0x73
   16068:	d0cb      	beq.n	16002 <ip_interface_connect+0x96>
   1606a:	602f      	str	r7, [r5, #0]
   1606c:	e7c9      	b.n	16002 <ip_interface_connect+0x96>
   1606e:	2a10      	cmp	r2, #16
   16070:	d1c6      	bne.n	16000 <ip_interface_connect+0x94>
   16072:	2204      	movs	r2, #4
   16074:	893b      	ldrh	r3, [r7, #8]
   16076:	f107 010c 	add.w	r1, r7, #12
   1607a:	82e2      	strh	r2, [r4, #22]
   1607c:	82a3      	strh	r3, [r4, #20]
   1607e:	f007 fbed 	bl	1d85c <memcpy>
   16082:	e7d3      	b.n	1602c <ip_interface_connect+0xc0>
   16084:	6820      	ldr	r0, [r4, #0]
   16086:	b108      	cbz	r0, 1608c <ip_interface_connect+0x120>
   16088:	f7fb ff98 	bl	11fbc <rpc_ip_client_data_free>
   1608c:	4620      	mov	r0, r4
   1608e:	f7fb ff8d 	bl	11fac <rpc_ip_client_message_free>
   16092:	2423      	movs	r4, #35	; 0x23
   16094:	602f      	str	r7, [r5, #0]
   16096:	e7b4      	b.n	16002 <ip_interface_connect+0x96>
   16098:	4630      	mov	r0, r6
   1609a:	f000 ffc9 	bl	17030 <interface_socket_from_handle_get>
   1609e:	2800      	cmp	r0, #0
   160a0:	d0b4      	beq.n	1600c <ip_interface_connect+0xa0>
   160a2:	6844      	ldr	r4, [r0, #4]
   160a4:	2c00      	cmp	r4, #0
   160a6:	d0b1      	beq.n	1600c <ip_interface_connect+0xa0>
   160a8:	f8c0 8004 	str.w	r8, [r0, #4]
   160ac:	e7db      	b.n	16066 <ip_interface_connect+0xfa>
   160ae:	2472      	movs	r4, #114	; 0x72
   160b0:	e7a7      	b.n	16002 <ip_interface_connect+0x96>
   160b2:	2473      	movs	r4, #115	; 0x73
   160b4:	e7a5      	b.n	16002 <ip_interface_connect+0x96>
   160b6:	2409      	movs	r4, #9
   160b8:	e7a3      	b.n	16002 <ip_interface_connect+0x96>
   160ba:	240c      	movs	r4, #12
   160bc:	e7a1      	b.n	16002 <ip_interface_connect+0x96>
   160be:	bf00      	nop

000160c0 <ip_interface_bind>:
   160c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   160c4:	b082      	sub	sp, #8
   160c6:	b389      	cbz	r1, 1612c <ip_interface_bind+0x6c>
   160c8:	b382      	cbz	r2, 1612c <ip_interface_bind+0x6c>
   160ca:	4607      	mov	r7, r0
   160cc:	460e      	mov	r6, r1
   160ce:	f000 ffaf 	bl	17030 <interface_socket_from_handle_get>
   160d2:	4605      	mov	r5, r0
   160d4:	2800      	cmp	r0, #0
   160d6:	d07b      	beq.n	161d0 <ip_interface_bind+0x110>
   160d8:	6803      	ldr	r3, [r0, #0]
   160da:	b29b      	uxth	r3, r3
   160dc:	2b02      	cmp	r3, #2
   160de:	d177      	bne.n	161d0 <ip_interface_bind+0x110>
   160e0:	2100      	movs	r1, #0
   160e2:	a802      	add	r0, sp, #8
   160e4:	f840 1d04 	str.w	r1, [r0, #-4]!
   160e8:	f8d5 8018 	ldr.w	r8, [r5, #24]
   160ec:	f7fb ff34 	bl	11f58 <rpc_ip_client_request_alloc>
   160f0:	bb30      	cbnz	r0, 16140 <ip_interface_bind+0x80>
   160f2:	f247 0305 	movw	r3, #28677	; 0x7005
   160f6:	2208      	movs	r2, #8
   160f8:	9c01      	ldr	r4, [sp, #4]
   160fa:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   160fe:	60e3      	str	r3, [r4, #12]
   16100:	f8c4 8010 	str.w	r8, [r4, #16]
   16104:	7260      	strb	r0, [r4, #9]
   16106:	72a0      	strb	r0, [r4, #10]
   16108:	72e0      	strb	r0, [r4, #11]
   1610a:	7222      	strb	r2, [r4, #8]
   1610c:	68a3      	ldr	r3, [r4, #8]
   1610e:	3304      	adds	r3, #4
   16110:	60a3      	str	r3, [r4, #8]
   16112:	68eb      	ldr	r3, [r5, #12]
   16114:	6872      	ldr	r2, [r6, #4]
   16116:	4293      	cmp	r3, r2
   16118:	d108      	bne.n	1612c <ip_interface_bind+0x6c>
   1611a:	2b02      	cmp	r3, #2
   1611c:	f104 0018 	add.w	r0, r4, #24
   16120:	7832      	ldrb	r2, [r6, #0]
   16122:	d03c      	beq.n	1619e <ip_interface_bind+0xde>
   16124:	2b0a      	cmp	r3, #10
   16126:	d101      	bne.n	1612c <ip_interface_bind+0x6c>
   16128:	2a24      	cmp	r2, #36	; 0x24
   1612a:	d00e      	beq.n	1614a <ip_interface_bind+0x8a>
   1612c:	2416      	movs	r4, #22
   1612e:	4620      	mov	r0, r4
   16130:	f7f9 faba 	bl	f6a8 <bsd_os_errno_set>
   16134:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16138:	4620      	mov	r0, r4
   1613a:	b002      	add	sp, #8
   1613c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16140:	9c01      	ldr	r4, [sp, #4]
   16142:	2c00      	cmp	r4, #0
   16144:	d1e2      	bne.n	1610c <ip_interface_bind+0x4c>
   16146:	240c      	movs	r4, #12
   16148:	e7f1      	b.n	1612e <ip_interface_bind+0x6e>
   1614a:	2210      	movs	r2, #16
   1614c:	8933      	ldrh	r3, [r6, #8]
   1614e:	18b1      	adds	r1, r6, r2
   16150:	82e2      	strh	r2, [r4, #22]
   16152:	82a3      	strh	r3, [r4, #20]
   16154:	f007 fb82 	bl	1d85c <memcpy>
   16158:	68a3      	ldr	r3, [r4, #8]
   1615a:	8ae2      	ldrh	r2, [r4, #22]
   1615c:	f247 0105 	movw	r1, #28677	; 0x7005
   16160:	4413      	add	r3, r2
   16162:	60a3      	str	r3, [r4, #8]
   16164:	682b      	ldr	r3, [r5, #0]
   16166:	4620      	mov	r0, r4
   16168:	0c1b      	lsrs	r3, r3, #16
   1616a:	041b      	lsls	r3, r3, #16
   1616c:	f043 0303 	orr.w	r3, r3, #3
   16170:	602b      	str	r3, [r5, #0]
   16172:	682e      	ldr	r6, [r5, #0]
   16174:	f7fb ff04 	bl	11f80 <rpc_ip_client_request_send>
   16178:	4680      	mov	r8, r0
   1617a:	b9d8      	cbnz	r0, 161b4 <ip_interface_bind+0xf4>
   1617c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16180:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16184:	2104      	movs	r1, #4
   16186:	4638      	mov	r0, r7
   16188:	f000 fede 	bl	16f48 <interface_socket_wait>
   1618c:	4604      	mov	r4, r0
   1618e:	b308      	cbz	r0, 161d4 <ip_interface_bind+0x114>
   16190:	682b      	ldr	r3, [r5, #0]
   16192:	0c1b      	lsrs	r3, r3, #16
   16194:	041b      	lsls	r3, r3, #16
   16196:	f043 0302 	orr.w	r3, r3, #2
   1619a:	602b      	str	r3, [r5, #0]
   1619c:	e7c7      	b.n	1612e <ip_interface_bind+0x6e>
   1619e:	2a10      	cmp	r2, #16
   161a0:	d1c4      	bne.n	1612c <ip_interface_bind+0x6c>
   161a2:	2204      	movs	r2, #4
   161a4:	8933      	ldrh	r3, [r6, #8]
   161a6:	f106 010c 	add.w	r1, r6, #12
   161aa:	82e2      	strh	r2, [r4, #22]
   161ac:	82a3      	strh	r3, [r4, #20]
   161ae:	f007 fb55 	bl	1d85c <memcpy>
   161b2:	e7d1      	b.n	16158 <ip_interface_bind+0x98>
   161b4:	6820      	ldr	r0, [r4, #0]
   161b6:	b108      	cbz	r0, 161bc <ip_interface_bind+0xfc>
   161b8:	f7fb ff00 	bl	11fbc <rpc_ip_client_data_free>
   161bc:	0c36      	lsrs	r6, r6, #16
   161be:	0436      	lsls	r6, r6, #16
   161c0:	4620      	mov	r0, r4
   161c2:	f046 0602 	orr.w	r6, r6, #2
   161c6:	f7fb fef1 	bl	11fac <rpc_ip_client_message_free>
   161ca:	2423      	movs	r4, #35	; 0x23
   161cc:	602e      	str	r6, [r5, #0]
   161ce:	e7ae      	b.n	1612e <ip_interface_bind+0x6e>
   161d0:	2409      	movs	r4, #9
   161d2:	e7ac      	b.n	1612e <ip_interface_bind+0x6e>
   161d4:	4638      	mov	r0, r7
   161d6:	f000 ff2b 	bl	17030 <interface_socket_from_handle_get>
   161da:	2800      	cmp	r0, #0
   161dc:	d0ac      	beq.n	16138 <ip_interface_bind+0x78>
   161de:	6844      	ldr	r4, [r0, #4]
   161e0:	2c00      	cmp	r4, #0
   161e2:	d0a9      	beq.n	16138 <ip_interface_bind+0x78>
   161e4:	f8c0 8004 	str.w	r8, [r0, #4]
   161e8:	e7d2      	b.n	16190 <ip_interface_bind+0xd0>
   161ea:	bf00      	nop

000161ec <ip_interface_listen>:
   161ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   161f0:	b082      	sub	sp, #8
   161f2:	4606      	mov	r6, r0
   161f4:	f000 ff1c 	bl	17030 <interface_socket_from_handle_get>
   161f8:	2800      	cmp	r0, #0
   161fa:	d067      	beq.n	162cc <ip_interface_listen+0xe0>
   161fc:	6803      	ldr	r3, [r0, #0]
   161fe:	4605      	mov	r5, r0
   16200:	b29b      	uxth	r3, r3
   16202:	2b04      	cmp	r3, #4
   16204:	d162      	bne.n	162cc <ip_interface_listen+0xe0>
   16206:	2100      	movs	r1, #0
   16208:	4a32      	ldr	r2, [pc, #200]	; (162d4 <ip_interface_listen+0xe8>)
   1620a:	4630      	mov	r0, r6
   1620c:	f000 fe64 	bl	16ed8 <interface_socket_packet_handler_update>
   16210:	4601      	mov	r1, r0
   16212:	2800      	cmp	r0, #0
   16214:	d15c      	bne.n	162d0 <ip_interface_listen+0xe4>
   16216:	a802      	add	r0, sp, #8
   16218:	f840 1d04 	str.w	r1, [r0, #-4]!
   1621c:	69af      	ldr	r7, [r5, #24]
   1621e:	f7fb fe9b 	bl	11f58 <rpc_ip_client_request_alloc>
   16222:	bba8      	cbnz	r0, 16290 <ip_interface_listen+0xa4>
   16224:	f247 0308 	movw	r3, #28680	; 0x7008
   16228:	2208      	movs	r2, #8
   1622a:	9c01      	ldr	r4, [sp, #4]
   1622c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   16230:	60e3      	str	r3, [r4, #12]
   16232:	6127      	str	r7, [r4, #16]
   16234:	7260      	strb	r0, [r4, #9]
   16236:	72a0      	strb	r0, [r4, #10]
   16238:	72e0      	strb	r0, [r4, #11]
   1623a:	7222      	strb	r2, [r4, #8]
   1623c:	68a3      	ldr	r3, [r4, #8]
   1623e:	f247 0108 	movw	r1, #28680	; 0x7008
   16242:	3304      	adds	r3, #4
   16244:	60a3      	str	r3, [r4, #8]
   16246:	682b      	ldr	r3, [r5, #0]
   16248:	4620      	mov	r0, r4
   1624a:	0c1b      	lsrs	r3, r3, #16
   1624c:	041b      	lsls	r3, r3, #16
   1624e:	f043 0306 	orr.w	r3, r3, #6
   16252:	602b      	str	r3, [r5, #0]
   16254:	682f      	ldr	r7, [r5, #0]
   16256:	f7fb fe93 	bl	11f80 <rpc_ip_client_request_send>
   1625a:	4680      	mov	r8, r0
   1625c:	b9e8      	cbnz	r0, 1629a <ip_interface_listen+0xae>
   1625e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16262:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16266:	2107      	movs	r1, #7
   16268:	4630      	mov	r0, r6
   1626a:	f000 fe6d 	bl	16f48 <interface_socket_wait>
   1626e:	4604      	mov	r4, r0
   16270:	b308      	cbz	r0, 162b6 <ip_interface_listen+0xca>
   16272:	682b      	ldr	r3, [r5, #0]
   16274:	0c1b      	lsrs	r3, r3, #16
   16276:	041b      	lsls	r3, r3, #16
   16278:	f043 0304 	orr.w	r3, r3, #4
   1627c:	602b      	str	r3, [r5, #0]
   1627e:	4620      	mov	r0, r4
   16280:	f7f9 fa12 	bl	f6a8 <bsd_os_errno_set>
   16284:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16288:	4620      	mov	r0, r4
   1628a:	b002      	add	sp, #8
   1628c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16290:	9c01      	ldr	r4, [sp, #4]
   16292:	2c00      	cmp	r4, #0
   16294:	d1d2      	bne.n	1623c <ip_interface_listen+0x50>
   16296:	240c      	movs	r4, #12
   16298:	e7f1      	b.n	1627e <ip_interface_listen+0x92>
   1629a:	6820      	ldr	r0, [r4, #0]
   1629c:	b108      	cbz	r0, 162a2 <ip_interface_listen+0xb6>
   1629e:	f7fb fe8d 	bl	11fbc <rpc_ip_client_data_free>
   162a2:	0c3f      	lsrs	r7, r7, #16
   162a4:	043f      	lsls	r7, r7, #16
   162a6:	4620      	mov	r0, r4
   162a8:	f047 0704 	orr.w	r7, r7, #4
   162ac:	f7fb fe7e 	bl	11fac <rpc_ip_client_message_free>
   162b0:	2423      	movs	r4, #35	; 0x23
   162b2:	602f      	str	r7, [r5, #0]
   162b4:	e7e3      	b.n	1627e <ip_interface_listen+0x92>
   162b6:	4630      	mov	r0, r6
   162b8:	f000 feba 	bl	17030 <interface_socket_from_handle_get>
   162bc:	2800      	cmp	r0, #0
   162be:	d0e3      	beq.n	16288 <ip_interface_listen+0x9c>
   162c0:	6844      	ldr	r4, [r0, #4]
   162c2:	2c00      	cmp	r4, #0
   162c4:	d0e0      	beq.n	16288 <ip_interface_listen+0x9c>
   162c6:	f8c0 8004 	str.w	r8, [r0, #4]
   162ca:	e7d2      	b.n	16272 <ip_interface_listen+0x86>
   162cc:	2409      	movs	r4, #9
   162ce:	e7d6      	b.n	1627e <ip_interface_listen+0x92>
   162d0:	2423      	movs	r4, #35	; 0x23
   162d2:	e7d4      	b.n	1627e <ip_interface_listen+0x92>
   162d4:	0001577d 	.word	0x0001577d

000162d8 <ip_interface_accept>:
   162d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162dc:	2500      	movs	r5, #0
   162de:	b085      	sub	sp, #20
   162e0:	460f      	mov	r7, r1
   162e2:	4690      	mov	r8, r2
   162e4:	9502      	str	r5, [sp, #8]
   162e6:	4606      	mov	r6, r0
   162e8:	f000 fea2 	bl	17030 <interface_socket_from_handle_get>
   162ec:	4604      	mov	r4, r0
   162ee:	2800      	cmp	r0, #0
   162f0:	f000 811c 	beq.w	1652c <ip_interface_accept+0x254>
   162f4:	6803      	ldr	r3, [r0, #0]
   162f6:	b29b      	uxth	r3, r3
   162f8:	2b07      	cmp	r3, #7
   162fa:	d10a      	bne.n	16312 <ip_interface_accept+0x3a>
   162fc:	6803      	ldr	r3, [r0, #0]
   162fe:	6805      	ldr	r5, [r0, #0]
   16300:	00db      	lsls	r3, r3, #3
   16302:	d416      	bmi.n	16332 <ip_interface_accept+0x5a>
   16304:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   16308:	d019      	beq.n	1633e <ip_interface_accept+0x66>
   1630a:	6805      	ldr	r5, [r0, #0]
   1630c:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   16310:	d124      	bne.n	1635c <ip_interface_accept+0x84>
   16312:	f04f 0909 	mov.w	r9, #9
   16316:	9b02      	ldr	r3, [sp, #8]
   16318:	b113      	cbz	r3, 16320 <ip_interface_accept+0x48>
   1631a:	4628      	mov	r0, r5
   1631c:	f000 fdc6 	bl	16eac <interface_socket_free>
   16320:	4648      	mov	r0, r9
   16322:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   16326:	f7f9 f9bf 	bl	f6a8 <bsd_os_errno_set>
   1632a:	4648      	mov	r0, r9
   1632c:	b005      	add	sp, #20
   1632e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16332:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   16336:	d16d      	bne.n	16414 <ip_interface_accept+0x13c>
   16338:	f04f 0923 	mov.w	r9, #35	; 0x23
   1633c:	e7eb      	b.n	16316 <ip_interface_accept+0x3e>
   1633e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   16342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16346:	4611      	mov	r1, r2
   16348:	4630      	mov	r0, r6
   1634a:	f000 fdfd 	bl	16f48 <interface_socket_wait>
   1634e:	4681      	mov	r9, r0
   16350:	2800      	cmp	r0, #0
   16352:	d07e      	beq.n	16452 <ip_interface_accept+0x17a>
   16354:	6825      	ldr	r5, [r4, #0]
   16356:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1635a:	d0dc      	beq.n	16316 <ip_interface_accept+0x3e>
   1635c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16360:	2300      	movs	r3, #0
   16362:	e9cd 0300 	strd	r0, r3, [sp]
   16366:	4a75      	ldr	r2, [pc, #468]	; (1653c <ip_interface_accept+0x264>)
   16368:	6921      	ldr	r1, [r4, #16]
   1636a:	a802      	add	r0, sp, #8
   1636c:	f000 fd40 	bl	16df0 <interface_socket_allocate>
   16370:	9b02      	ldr	r3, [sp, #8]
   16372:	4605      	mov	r5, r0
   16374:	2b00      	cmp	r3, #0
   16376:	f000 80dd 	beq.w	16534 <ip_interface_accept+0x25c>
   1637a:	2100      	movs	r1, #0
   1637c:	6962      	ldr	r2, [r4, #20]
   1637e:	a804      	add	r0, sp, #16
   16380:	615a      	str	r2, [r3, #20]
   16382:	68e2      	ldr	r2, [r4, #12]
   16384:	f840 1d04 	str.w	r1, [r0, #-4]!
   16388:	60da      	str	r2, [r3, #12]
   1638a:	6922      	ldr	r2, [r4, #16]
   1638c:	611a      	str	r2, [r3, #16]
   1638e:	f8d4 9018 	ldr.w	r9, [r4, #24]
   16392:	f7fb fde1 	bl	11f58 <rpc_ip_client_request_alloc>
   16396:	2800      	cmp	r0, #0
   16398:	d143      	bne.n	16422 <ip_interface_accept+0x14a>
   1639a:	f247 030c 	movw	r3, #28684	; 0x700c
   1639e:	2108      	movs	r1, #8
   163a0:	f8dd b00c 	ldr.w	fp, [sp, #12]
   163a4:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   163a8:	f8cb 300c 	str.w	r3, [fp, #12]
   163ac:	f8cb 9010 	str.w	r9, [fp, #16]
   163b0:	f88b 0009 	strb.w	r0, [fp, #9]
   163b4:	f88b 000a 	strb.w	r0, [fp, #10]
   163b8:	f88b 000b 	strb.w	r0, [fp, #11]
   163bc:	f88b 1008 	strb.w	r1, [fp, #8]
   163c0:	6823      	ldr	r3, [r4, #0]
   163c2:	f247 010c 	movw	r1, #28684	; 0x700c
   163c6:	0c1b      	lsrs	r3, r3, #16
   163c8:	041b      	lsls	r3, r3, #16
   163ca:	f043 0308 	orr.w	r3, r3, #8
   163ce:	6023      	str	r3, [r4, #0]
   163d0:	4658      	mov	r0, fp
   163d2:	f8d4 9000 	ldr.w	r9, [r4]
   163d6:	f7fb fdd3 	bl	11f80 <rpc_ip_client_request_send>
   163da:	4682      	mov	sl, r0
   163dc:	bb48      	cbnz	r0, 16432 <ip_interface_accept+0x15a>
   163de:	6822      	ldr	r2, [r4, #0]
   163e0:	9900      	ldr	r1, [sp, #0]
   163e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   163e6:	400a      	ands	r2, r1
   163e8:	6022      	str	r2, [r4, #0]
   163ea:	2109      	movs	r1, #9
   163ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
   163f0:	4630      	mov	r0, r6
   163f2:	f000 fda9 	bl	16f48 <interface_socket_wait>
   163f6:	4681      	mov	r9, r0
   163f8:	2800      	cmp	r0, #0
   163fa:	f000 8085 	beq.w	16508 <ip_interface_accept+0x230>
   163fe:	6823      	ldr	r3, [r4, #0]
   16400:	9a01      	ldr	r2, [sp, #4]
   16402:	431a      	orrs	r2, r3
   16404:	6022      	str	r2, [r4, #0]
   16406:	6823      	ldr	r3, [r4, #0]
   16408:	0c1b      	lsrs	r3, r3, #16
   1640a:	041b      	lsls	r3, r3, #16
   1640c:	f043 0307 	orr.w	r3, r3, #7
   16410:	6023      	str	r3, [r4, #0]
   16412:	e780      	b.n	16316 <ip_interface_accept+0x3e>
   16414:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   16418:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1641c:	e9cd 2300 	strd	r2, r3, [sp]
   16420:	e7a1      	b.n	16366 <ip_interface_accept+0x8e>
   16422:	f8dd b00c 	ldr.w	fp, [sp, #12]
   16426:	f04f 090c 	mov.w	r9, #12
   1642a:	f1bb 0f00 	cmp.w	fp, #0
   1642e:	d1c7      	bne.n	163c0 <ip_interface_accept+0xe8>
   16430:	e771      	b.n	16316 <ip_interface_accept+0x3e>
   16432:	f8db 0000 	ldr.w	r0, [fp]
   16436:	b108      	cbz	r0, 1643c <ip_interface_accept+0x164>
   16438:	f7fb fdc0 	bl	11fbc <rpc_ip_client_data_free>
   1643c:	ea4f 4919 	mov.w	r9, r9, lsr #16
   16440:	4658      	mov	r0, fp
   16442:	ea4f 4909 	mov.w	r9, r9, lsl #16
   16446:	f7fb fdb1 	bl	11fac <rpc_ip_client_message_free>
   1644a:	f049 0307 	orr.w	r3, r9, #7
   1644e:	6023      	str	r3, [r4, #0]
   16450:	e772      	b.n	16338 <ip_interface_accept+0x60>
   16452:	4630      	mov	r0, r6
   16454:	f000 fdec 	bl	17030 <interface_socket_from_handle_get>
   16458:	b130      	cbz	r0, 16468 <ip_interface_accept+0x190>
   1645a:	f8d0 9004 	ldr.w	r9, [r0, #4]
   1645e:	f1b9 0f00 	cmp.w	r9, #0
   16462:	d001      	beq.n	16468 <ip_interface_accept+0x190>
   16464:	6045      	str	r5, [r0, #4]
   16466:	e775      	b.n	16354 <ip_interface_accept+0x7c>
   16468:	6823      	ldr	r3, [r4, #0]
   1646a:	03d9      	lsls	r1, r3, #15
   1646c:	f53f af76 	bmi.w	1635c <ip_interface_accept+0x84>
   16470:	4d33      	ldr	r5, [pc, #204]	; (16540 <ip_interface_accept+0x268>)
   16472:	9902      	ldr	r1, [sp, #8]
   16474:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   16478:	699b      	ldr	r3, [r3, #24]
   1647a:	618b      	str	r3, [r1, #24]
   1647c:	b147      	cbz	r7, 16490 <ip_interface_accept+0x1b8>
   1647e:	68cb      	ldr	r3, [r1, #12]
   16480:	2b0a      	cmp	r3, #10
   16482:	d024      	beq.n	164ce <ip_interface_accept+0x1f6>
   16484:	2b02      	cmp	r3, #2
   16486:	d103      	bne.n	16490 <ip_interface_accept+0x1b8>
   16488:	f8d8 2000 	ldr.w	r2, [r8]
   1648c:	2a10      	cmp	r2, #16
   1648e:	d032      	beq.n	164f6 <ip_interface_accept+0x21e>
   16490:	680a      	ldr	r2, [r1, #0]
   16492:	482c      	ldr	r0, [pc, #176]	; (16544 <ip_interface_accept+0x26c>)
   16494:	4002      	ands	r2, r0
   16496:	f042 0205 	orr.w	r2, r2, #5
   1649a:	600a      	str	r2, [r1, #0]
   1649c:	9a02      	ldr	r2, [sp, #8]
   1649e:	6811      	ldr	r1, [r2, #0]
   164a0:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   164a4:	6011      	str	r1, [r2, #0]
   164a6:	6811      	ldr	r1, [r2, #0]
   164a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   164ac:	6011      	str	r1, [r2, #0]
   164ae:	6823      	ldr	r3, [r4, #0]
   164b0:	4003      	ands	r3, r0
   164b2:	f043 0307 	orr.w	r3, r3, #7
   164b6:	6023      	str	r3, [r4, #0]
   164b8:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   164bc:	f7fb fd76 	bl	11fac <rpc_ip_client_message_free>
   164c0:	2300      	movs	r3, #0
   164c2:	4648      	mov	r0, r9
   164c4:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   164c8:	b005      	add	sp, #20
   164ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164ce:	f8d8 2000 	ldr.w	r2, [r8]
   164d2:	2a24      	cmp	r2, #36	; 0x24
   164d4:	d1dc      	bne.n	16490 <ip_interface_accept+0x1b8>
   164d6:	703a      	strb	r2, [r7, #0]
   164d8:	2210      	movs	r2, #16
   164da:	607b      	str	r3, [r7, #4]
   164dc:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   164e0:	f107 0010 	add.w	r0, r7, #16
   164e4:	8b9b      	ldrh	r3, [r3, #28]
   164e6:	813b      	strh	r3, [r7, #8]
   164e8:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   164ec:	3120      	adds	r1, #32
   164ee:	f007 f9b5 	bl	1d85c <memcpy>
   164f2:	9902      	ldr	r1, [sp, #8]
   164f4:	e7cc      	b.n	16490 <ip_interface_accept+0x1b8>
   164f6:	703a      	strb	r2, [r7, #0]
   164f8:	607b      	str	r3, [r7, #4]
   164fa:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   164fe:	f107 000c 	add.w	r0, r7, #12
   16502:	8b9b      	ldrh	r3, [r3, #28]
   16504:	2204      	movs	r2, #4
   16506:	e7ee      	b.n	164e6 <ip_interface_accept+0x20e>
   16508:	4630      	mov	r0, r6
   1650a:	f000 fd91 	bl	17030 <interface_socket_from_handle_get>
   1650e:	b138      	cbz	r0, 16520 <ip_interface_accept+0x248>
   16510:	f8d0 9004 	ldr.w	r9, [r0, #4]
   16514:	f1b9 0f00 	cmp.w	r9, #0
   16518:	d002      	beq.n	16520 <ip_interface_accept+0x248>
   1651a:	f8c0 a004 	str.w	sl, [r0, #4]
   1651e:	e76e      	b.n	163fe <ip_interface_accept+0x126>
   16520:	6823      	ldr	r3, [r4, #0]
   16522:	9a01      	ldr	r2, [sp, #4]
   16524:	46a9      	mov	r9, r5
   16526:	4313      	orrs	r3, r2
   16528:	6023      	str	r3, [r4, #0]
   1652a:	e7a1      	b.n	16470 <ip_interface_accept+0x198>
   1652c:	4605      	mov	r5, r0
   1652e:	f04f 0909 	mov.w	r9, #9
   16532:	e6f0      	b.n	16316 <ip_interface_accept+0x3e>
   16534:	f04f 090c 	mov.w	r9, #12
   16538:	e6f2      	b.n	16320 <ip_interface_accept+0x48>
   1653a:	bf00      	nop
   1653c:	0001577d 	.word	0x0001577d
   16540:	20020a48 	.word	0x20020a48
   16544:	ffff0000 	.word	0xffff0000

00016548 <ip_interface_setopt>:
   16548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1654c:	2901      	cmp	r1, #1
   1654e:	b084      	sub	sp, #16
   16550:	f040 809c 	bne.w	1668c <ip_interface_setopt+0x144>
   16554:	460e      	mov	r6, r1
   16556:	4690      	mov	r8, r2
   16558:	461d      	mov	r5, r3
   1655a:	4607      	mov	r7, r0
   1655c:	f000 fd68 	bl	17030 <interface_socket_from_handle_get>
   16560:	4604      	mov	r4, r0
   16562:	2800      	cmp	r0, #0
   16564:	f000 80a5 	beq.w	166b2 <ip_interface_setopt+0x16a>
   16568:	f1b8 0f19 	cmp.w	r8, #25
   1656c:	d16e      	bne.n	1664c <ip_interface_setopt+0x104>
   1656e:	2d00      	cmp	r5, #0
   16570:	f000 8092 	beq.w	16698 <ip_interface_setopt+0x150>
   16574:	4628      	mov	r0, r5
   16576:	f007 f93f 	bl	1d7f8 <strlen>
   1657a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1657c:	4298      	cmp	r0, r3
   1657e:	f040 808b 	bne.w	16698 <ip_interface_setopt+0x150>
   16582:	6823      	ldr	r3, [r4, #0]
   16584:	b29b      	uxth	r3, r3
   16586:	2b02      	cmp	r3, #2
   16588:	d173      	bne.n	16672 <ip_interface_setopt+0x12a>
   1658a:	4629      	mov	r1, r5
   1658c:	68e0      	ldr	r0, [r4, #12]
   1658e:	f7fe fb91 	bl	14cb4 <pdn_interface_pdn_id_get>
   16592:	9002      	str	r0, [sp, #8]
   16594:	3001      	adds	r0, #1
   16596:	bf08      	it	eq
   16598:	2516      	moveq	r5, #22
   1659a:	d04e      	beq.n	1663a <ip_interface_setopt+0xf2>
   1659c:	6823      	ldr	r3, [r4, #0]
   1659e:	025b      	lsls	r3, r3, #9
   165a0:	d44a      	bmi.n	16638 <ip_interface_setopt+0xf0>
   165a2:	6823      	ldr	r3, [r4, #0]
   165a4:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
   165a8:	d146      	bne.n	16638 <ip_interface_setopt+0xf0>
   165aa:	6826      	ldr	r6, [r4, #0]
   165ac:	6822      	ldr	r2, [r4, #0]
   165ae:	a804      	add	r0, sp, #16
   165b0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   165b4:	6022      	str	r2, [r4, #0]
   165b6:	2104      	movs	r1, #4
   165b8:	f840 3d04 	str.w	r3, [r0, #-4]!
   165bc:	f8d4 8018 	ldr.w	r8, [r4, #24]
   165c0:	f7fb fcca 	bl	11f58 <rpc_ip_client_request_alloc>
   165c4:	2800      	cmp	r0, #0
   165c6:	d14e      	bne.n	16666 <ip_interface_setopt+0x11e>
   165c8:	f247 0203 	movw	r2, #28675	; 0x7003
   165cc:	2300      	movs	r3, #0
   165ce:	2108      	movs	r1, #8
   165d0:	9d03      	ldr	r5, [sp, #12]
   165d2:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   165d6:	60ea      	str	r2, [r5, #12]
   165d8:	f8c5 8010 	str.w	r8, [r5, #16]
   165dc:	7229      	strb	r1, [r5, #8]
   165de:	726b      	strb	r3, [r5, #9]
   165e0:	72ab      	strb	r3, [r5, #10]
   165e2:	72eb      	strb	r3, [r5, #11]
   165e4:	f04f 0c08 	mov.w	ip, #8
   165e8:	2300      	movs	r3, #0
   165ea:	2010      	movs	r0, #16
   165ec:	2130      	movs	r1, #48	; 0x30
   165ee:	68aa      	ldr	r2, [r5, #8]
   165f0:	756b      	strb	r3, [r5, #21]
   165f2:	4462      	add	r2, ip
   165f4:	60aa      	str	r2, [r5, #8]
   165f6:	75ab      	strb	r3, [r5, #22]
   165f8:	75eb      	strb	r3, [r5, #23]
   165fa:	76ab      	strb	r3, [r5, #26]
   165fc:	76eb      	strb	r3, [r5, #27]
   165fe:	f885 c014 	strb.w	ip, [r5, #20]
   16602:	7628      	strb	r0, [r5, #24]
   16604:	7669      	strb	r1, [r5, #25]
   16606:	2204      	movs	r2, #4
   16608:	eb0d 010c 	add.w	r1, sp, ip
   1660c:	6828      	ldr	r0, [r5, #0]
   1660e:	f007 f925 	bl	1d85c <memcpy>
   16612:	f247 0103 	movw	r1, #28675	; 0x7003
   16616:	4628      	mov	r0, r5
   16618:	f7fb fcb2 	bl	11f80 <rpc_ip_client_request_send>
   1661c:	4680      	mov	r8, r0
   1661e:	bb50      	cbnz	r0, 16676 <ip_interface_setopt+0x12e>
   16620:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   16624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16628:	4611      	mov	r1, r2
   1662a:	4638      	mov	r0, r7
   1662c:	f000 fc8c 	bl	16f48 <interface_socket_wait>
   16630:	4605      	mov	r5, r0
   16632:	b398      	cbz	r0, 1669c <ip_interface_setopt+0x154>
   16634:	6026      	str	r6, [r4, #0]
   16636:	e000      	b.n	1663a <ip_interface_setopt+0xf2>
   16638:	2523      	movs	r5, #35	; 0x23
   1663a:	4628      	mov	r0, r5
   1663c:	f7f9 f834 	bl	f6a8 <bsd_os_errno_set>
   16640:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   16644:	4628      	mov	r0, r5
   16646:	b004      	add	sp, #16
   16648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1664c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1664e:	4642      	mov	r2, r8
   16650:	9300      	str	r3, [sp, #0]
   16652:	4631      	mov	r1, r6
   16654:	462b      	mov	r3, r5
   16656:	4638      	mov	r0, r7
   16658:	f000 fd12 	bl	17080 <interface_socket_setopt>
   1665c:	4605      	mov	r5, r0
   1665e:	4628      	mov	r0, r5
   16660:	b004      	add	sp, #16
   16662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16666:	9d03      	ldr	r5, [sp, #12]
   16668:	2d00      	cmp	r5, #0
   1666a:	d1bb      	bne.n	165e4 <ip_interface_setopt+0x9c>
   1666c:	6026      	str	r6, [r4, #0]
   1666e:	250c      	movs	r5, #12
   16670:	e7e3      	b.n	1663a <ip_interface_setopt+0xf2>
   16672:	2509      	movs	r5, #9
   16674:	e7e1      	b.n	1663a <ip_interface_setopt+0xf2>
   16676:	6828      	ldr	r0, [r5, #0]
   16678:	b108      	cbz	r0, 1667e <ip_interface_setopt+0x136>
   1667a:	f7fb fc9f 	bl	11fbc <rpc_ip_client_data_free>
   1667e:	4628      	mov	r0, r5
   16680:	f7fb fc94 	bl	11fac <rpc_ip_client_message_free>
   16684:	2523      	movs	r5, #35	; 0x23
   16686:	6026      	str	r6, [r4, #0]
   16688:	6026      	str	r6, [r4, #0]
   1668a:	e7d6      	b.n	1663a <ip_interface_setopt+0xf2>
   1668c:	202a      	movs	r0, #42	; 0x2a
   1668e:	f7f9 f80b 	bl	f6a8 <bsd_os_errno_set>
   16692:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   16696:	e7d5      	b.n	16644 <ip_interface_setopt+0xfc>
   16698:	250e      	movs	r5, #14
   1669a:	e7ce      	b.n	1663a <ip_interface_setopt+0xf2>
   1669c:	4638      	mov	r0, r7
   1669e:	f000 fcc7 	bl	17030 <interface_socket_from_handle_get>
   166a2:	b120      	cbz	r0, 166ae <ip_interface_setopt+0x166>
   166a4:	6845      	ldr	r5, [r0, #4]
   166a6:	b115      	cbz	r5, 166ae <ip_interface_setopt+0x166>
   166a8:	f8c0 8004 	str.w	r8, [r0, #4]
   166ac:	e7c2      	b.n	16634 <ip_interface_setopt+0xec>
   166ae:	6026      	str	r6, [r4, #0]
   166b0:	e7c8      	b.n	16644 <ip_interface_setopt+0xfc>
   166b2:	2009      	movs	r0, #9
   166b4:	f7f8 fff8 	bl	f6a8 <bsd_os_errno_set>
   166b8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   166bc:	e7c2      	b.n	16644 <ip_interface_setopt+0xfc>
   166be:	bf00      	nop

000166c0 <ip_interface_getopt>:
   166c0:	f000 bd14 	b.w	170ec <interface_socket_getopt>

000166c4 <ip_interface_getaddrinfo>:
   166c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166c8:	f04f 0c00 	mov.w	ip, #0
   166cc:	2401      	movs	r4, #1
   166ce:	4e72      	ldr	r6, [pc, #456]	; (16898 <ip_interface_getaddrinfo+0x1d4>)
   166d0:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 168a4 <ip_interface_getaddrinfo+0x1e0>
   166d4:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 168a8 <ip_interface_getaddrinfo+0x1e4>
   166d8:	b085      	sub	sp, #20
   166da:	4607      	mov	r7, r0
   166dc:	4615      	mov	r5, r2
   166de:	9301      	str	r3, [sp, #4]
   166e0:	f8a6 c000 	strh.w	ip, [r6]
   166e4:	f8ca 4000 	str.w	r4, [sl]
   166e8:	f8c9 4000 	str.w	r4, [r9]
   166ec:	b171      	cbz	r1, 1670c <ip_interface_getaddrinfo+0x48>
   166ee:	4608      	mov	r0, r1
   166f0:	220a      	movs	r2, #10
   166f2:	4661      	mov	r1, ip
   166f4:	f006 ff59 	bl	1d5aa <strtol>
   166f8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   166fc:	1e42      	subs	r2, r0, #1
   166fe:	429a      	cmp	r2, r3
   16700:	f200 8083 	bhi.w	1680a <ip_interface_getaddrinfo+0x146>
   16704:	0203      	lsls	r3, r0, #8
   16706:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   1670a:	8030      	strh	r0, [r6, #0]
   1670c:	f8df 819c 	ldr.w	r8, [pc, #412]	; 168ac <ip_interface_getaddrinfo+0x1e8>
   16710:	f8d8 3000 	ldr.w	r3, [r8]
   16714:	2b00      	cmp	r3, #0
   16716:	d174      	bne.n	16802 <ip_interface_getaddrinfo+0x13e>
   16718:	4a60      	ldr	r2, [pc, #384]	; (1689c <ip_interface_getaddrinfo+0x1d8>)
   1671a:	6013      	str	r3, [r2, #0]
   1671c:	4a60      	ldr	r2, [pc, #384]	; (168a0 <ip_interface_getaddrinfo+0x1dc>)
   1671e:	6013      	str	r3, [r2, #0]
   16720:	2f00      	cmp	r7, #0
   16722:	d062      	beq.n	167ea <ip_interface_getaddrinfo+0x126>
   16724:	4638      	mov	r0, r7
   16726:	f007 f867 	bl	1d7f8 <strlen>
   1672a:	4683      	mov	fp, r0
   1672c:	b125      	cbz	r5, 16738 <ip_interface_getaddrinfo+0x74>
   1672e:	69ea      	ldr	r2, [r5, #28]
   16730:	b112      	cbz	r2, 16738 <ip_interface_getaddrinfo+0x74>
   16732:	6851      	ldr	r1, [r2, #4]
   16734:	2966      	cmp	r1, #102	; 0x66
   16736:	d06c      	beq.n	16812 <ip_interface_getaddrinfo+0x14e>
   16738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1673c:	2100      	movs	r1, #0
   1673e:	ae04      	add	r6, sp, #16
   16740:	f846 1d04 	str.w	r1, [r6, #-4]!
   16744:	4630      	mov	r0, r6
   16746:	4659      	mov	r1, fp
   16748:	9200      	str	r2, [sp, #0]
   1674a:	f7fb fc05 	bl	11f58 <rpc_ip_client_request_alloc>
   1674e:	9a00      	ldr	r2, [sp, #0]
   16750:	2800      	cmp	r0, #0
   16752:	d14c      	bne.n	167ee <ip_interface_getaddrinfo+0x12a>
   16754:	f247 010d 	movw	r1, #28685	; 0x700d
   16758:	f04f 0c08 	mov.w	ip, #8
   1675c:	9c03      	ldr	r4, [sp, #12]
   1675e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   16762:	60e1      	str	r1, [r4, #12]
   16764:	6122      	str	r2, [r4, #16]
   16766:	7260      	strb	r0, [r4, #9]
   16768:	72a0      	strb	r0, [r4, #10]
   1676a:	72e0      	strb	r0, [r4, #11]
   1676c:	f884 c008 	strb.w	ip, [r4, #8]
   16770:	2d00      	cmp	r5, #0
   16772:	d076      	beq.n	16862 <ip_interface_getaddrinfo+0x19e>
   16774:	686a      	ldr	r2, [r5, #4]
   16776:	f022 0108 	bic.w	r1, r2, #8
   1677a:	2902      	cmp	r1, #2
   1677c:	d05c      	beq.n	16838 <ip_interface_getaddrinfo+0x174>
   1677e:	2a05      	cmp	r2, #5
   16780:	d178      	bne.n	16874 <ip_interface_getaddrinfo+0x1b0>
   16782:	68a9      	ldr	r1, [r5, #8]
   16784:	2902      	cmp	r1, #2
   16786:	f8c9 1000 	str.w	r1, [r9]
   1678a:	d061      	beq.n	16850 <ip_interface_getaddrinfo+0x18c>
   1678c:	61a2      	str	r2, [r4, #24]
   1678e:	68ea      	ldr	r2, [r5, #12]
   16790:	6222      	str	r2, [r4, #32]
   16792:	68aa      	ldr	r2, [r5, #8]
   16794:	61e2      	str	r2, [r4, #28]
   16796:	682a      	ldr	r2, [r5, #0]
   16798:	6162      	str	r2, [r4, #20]
   1679a:	68a2      	ldr	r2, [r4, #8]
   1679c:	3210      	adds	r2, #16
   1679e:	60a2      	str	r2, [r4, #8]
   167a0:	b12f      	cbz	r7, 167ae <ip_interface_getaddrinfo+0xea>
   167a2:	6820      	ldr	r0, [r4, #0]
   167a4:	b118      	cbz	r0, 167ae <ip_interface_getaddrinfo+0xea>
   167a6:	465a      	mov	r2, fp
   167a8:	4639      	mov	r1, r7
   167aa:	f007 f857 	bl	1d85c <memcpy>
   167ae:	2301      	movs	r3, #1
   167b0:	f247 010d 	movw	r1, #28685	; 0x700d
   167b4:	4620      	mov	r0, r4
   167b6:	f8c8 3000 	str.w	r3, [r8]
   167ba:	f7fb fbe1 	bl	11f80 <rpc_ip_client_request_send>
   167be:	2800      	cmp	r0, #0
   167c0:	d156      	bne.n	16870 <ip_interface_getaddrinfo+0x1ac>
   167c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   167c6:	9303      	str	r3, [sp, #12]
   167c8:	4631      	mov	r1, r6
   167ca:	4620      	mov	r0, r4
   167cc:	f7f8 fed8 	bl	f580 <bsd_os_timedwait>
   167d0:	f8d8 3000 	ldr.w	r3, [r8]
   167d4:	2b01      	cmp	r3, #1
   167d6:	d0f7      	beq.n	167c8 <ip_interface_getaddrinfo+0x104>
   167d8:	4b31      	ldr	r3, [pc, #196]	; (168a0 <ip_interface_getaddrinfo+0x1dc>)
   167da:	6818      	ldr	r0, [r3, #0]
   167dc:	2800      	cmp	r0, #0
   167de:	d13b      	bne.n	16858 <ip_interface_getaddrinfo+0x194>
   167e0:	4b2e      	ldr	r3, [pc, #184]	; (1689c <ip_interface_getaddrinfo+0x1d8>)
   167e2:	9a01      	ldr	r2, [sp, #4]
   167e4:	681b      	ldr	r3, [r3, #0]
   167e6:	6013      	str	r3, [r2, #0]
   167e8:	e00c      	b.n	16804 <ip_interface_getaddrinfo+0x140>
   167ea:	46bb      	mov	fp, r7
   167ec:	e79e      	b.n	1672c <ip_interface_getaddrinfo+0x68>
   167ee:	9c03      	ldr	r4, [sp, #12]
   167f0:	2c00      	cmp	r4, #0
   167f2:	d1bd      	bne.n	16770 <ip_interface_getaddrinfo+0xac>
   167f4:	200c      	movs	r0, #12
   167f6:	2300      	movs	r3, #0
   167f8:	f8c8 3000 	str.w	r3, [r8]
   167fc:	b005      	add	sp, #20
   167fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16802:	2073      	movs	r0, #115	; 0x73
   16804:	b005      	add	sp, #20
   16806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1680a:	2016      	movs	r0, #22
   1680c:	b005      	add	sp, #20
   1680e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16812:	6891      	ldr	r1, [r2, #8]
   16814:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   16818:	d18e      	bne.n	16738 <ip_interface_getaddrinfo+0x74>
   1681a:	f240 2102 	movw	r1, #514	; 0x202
   1681e:	68d0      	ldr	r0, [r2, #12]
   16820:	4288      	cmp	r0, r1
   16822:	d189      	bne.n	16738 <ip_interface_getaddrinfo+0x74>
   16824:	6991      	ldr	r1, [r2, #24]
   16826:	2900      	cmp	r1, #0
   16828:	d086      	beq.n	16738 <ip_interface_getaddrinfo+0x74>
   1682a:	6868      	ldr	r0, [r5, #4]
   1682c:	f7fe fa42 	bl	14cb4 <pdn_interface_pdn_id_get>
   16830:	1c43      	adds	r3, r0, #1
   16832:	d081      	beq.n	16738 <ip_interface_getaddrinfo+0x74>
   16834:	4602      	mov	r2, r0
   16836:	e781      	b.n	1673c <ip_interface_getaddrinfo+0x78>
   16838:	68a9      	ldr	r1, [r5, #8]
   1683a:	2902      	cmp	r1, #2
   1683c:	f8c9 1000 	str.w	r1, [r9]
   16840:	d006      	beq.n	16850 <ip_interface_getaddrinfo+0x18c>
   16842:	2a05      	cmp	r2, #5
   16844:	d0a2      	beq.n	1678c <ip_interface_getaddrinfo+0xc8>
   16846:	2a0a      	cmp	r2, #10
   16848:	bf14      	ite	ne
   1684a:	2201      	movne	r2, #1
   1684c:	2202      	moveq	r2, #2
   1684e:	e79d      	b.n	1678c <ip_interface_getaddrinfo+0xc8>
   16850:	2102      	movs	r1, #2
   16852:	f8ca 1000 	str.w	r1, [sl]
   16856:	e7f4      	b.n	16842 <ip_interface_getaddrinfo+0x17e>
   16858:	4b11      	ldr	r3, [pc, #68]	; (168a0 <ip_interface_getaddrinfo+0x1dc>)
   1685a:	6818      	ldr	r0, [r3, #0]
   1685c:	2800      	cmp	r0, #0
   1685e:	d0d1      	beq.n	16804 <ip_interface_getaddrinfo+0x140>
   16860:	e7c9      	b.n	167f6 <ip_interface_getaddrinfo+0x132>
   16862:	4629      	mov	r1, r5
   16864:	2210      	movs	r2, #16
   16866:	f104 0014 	add.w	r0, r4, #20
   1686a:	f007 f821 	bl	1d8b0 <memset>
   1686e:	e794      	b.n	1679a <ip_interface_getaddrinfo+0xd6>
   16870:	2023      	movs	r0, #35	; 0x23
   16872:	e7c0      	b.n	167f6 <ip_interface_getaddrinfo+0x132>
   16874:	202f      	movs	r0, #47	; 0x2f
   16876:	f7f8 ff17 	bl	f6a8 <bsd_os_errno_set>
   1687a:	68a2      	ldr	r2, [r4, #8]
   1687c:	3210      	adds	r2, #16
   1687e:	60a2      	str	r2, [r4, #8]
   16880:	b917      	cbnz	r7, 16888 <ip_interface_getaddrinfo+0x1c4>
   16882:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16886:	e7b6      	b.n	167f6 <ip_interface_getaddrinfo+0x132>
   16888:	6820      	ldr	r0, [r4, #0]
   1688a:	2800      	cmp	r0, #0
   1688c:	d0f9      	beq.n	16882 <ip_interface_getaddrinfo+0x1be>
   1688e:	465a      	mov	r2, fp
   16890:	4639      	mov	r1, r7
   16892:	f006 ffe3 	bl	1d85c <memcpy>
   16896:	e7f4      	b.n	16882 <ip_interface_getaddrinfo+0x1be>
   16898:	20024f2c 	.word	0x20024f2c
   1689c:	20020a40 	.word	0x20020a40
   168a0:	20020a38 	.word	0x20020a38
   168a4:	20020a30 	.word	0x20020a30
   168a8:	20020a34 	.word	0x20020a34
   168ac:	20020a3c 	.word	0x20020a3c

000168b0 <ip_interface_freeaddrinfo>:
   168b0:	b538      	push	{r3, r4, r5, lr}
   168b2:	4c0b      	ldr	r4, [pc, #44]	; (168e0 <ip_interface_freeaddrinfo+0x30>)
   168b4:	6823      	ldr	r3, [r4, #0]
   168b6:	2b02      	cmp	r3, #2
   168b8:	d000      	beq.n	168bc <ip_interface_freeaddrinfo+0xc>
   168ba:	bd38      	pop	{r3, r4, r5, pc}
   168bc:	b130      	cbz	r0, 168cc <ip_interface_freeaddrinfo+0x1c>
   168be:	4605      	mov	r5, r0
   168c0:	6940      	ldr	r0, [r0, #20]
   168c2:	f7fb fb1b 	bl	11efc <nrf_free>
   168c6:	4628      	mov	r0, r5
   168c8:	f7fb fb18 	bl	11efc <nrf_free>
   168cc:	2300      	movs	r3, #0
   168ce:	4a05      	ldr	r2, [pc, #20]	; (168e4 <ip_interface_freeaddrinfo+0x34>)
   168d0:	4905      	ldr	r1, [pc, #20]	; (168e8 <ip_interface_freeaddrinfo+0x38>)
   168d2:	6023      	str	r3, [r4, #0]
   168d4:	6013      	str	r3, [r2, #0]
   168d6:	6808      	ldr	r0, [r1, #0]
   168d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   168dc:	f7fb bb6e 	b.w	11fbc <rpc_ip_client_data_free>
   168e0:	20020a3c 	.word	0x20020a3c
   168e4:	20020a38 	.word	0x20020a38
   168e8:	20020a44 	.word	0x20020a44

000168ec <rpc_ip_event_handler>:
   168ec:	f248 030d 	movw	r3, #32781	; 0x800d
   168f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168f4:	4299      	cmp	r1, r3
   168f6:	b089      	sub	sp, #36	; 0x24
   168f8:	4605      	mov	r5, r0
   168fa:	d062      	beq.n	169c2 <rpc_ip_event_handler+0xd6>
   168fc:	f248 030f 	movw	r3, #32783	; 0x800f
   16900:	4299      	cmp	r1, r3
   16902:	460c      	mov	r4, r1
   16904:	d04b      	beq.n	1699e <rpc_ip_event_handler+0xb2>
   16906:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   1690a:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   1690e:	68c0      	ldr	r0, [r0, #12]
   16910:	d07b      	beq.n	16a0a <rpc_ip_event_handler+0x11e>
   16912:	0c07      	lsrs	r7, r0, #16
   16914:	4638      	mov	r0, r7
   16916:	f000 fb8b 	bl	17030 <interface_socket_from_handle_get>
   1691a:	4606      	mov	r6, r0
   1691c:	2800      	cmp	r0, #0
   1691e:	d05f      	beq.n	169e0 <rpc_ip_event_handler+0xf4>
   16920:	4601      	mov	r1, r0
   16922:	4623      	mov	r3, r4
   16924:	462a      	mov	r2, r5
   16926:	4638      	mov	r0, r7
   16928:	f7fb ff8a 	bl	12840 <tls_rpc_ip_event_handler>
   1692c:	2800      	cmp	r0, #0
   1692e:	d053      	beq.n	169d8 <rpc_ip_event_handler+0xec>
   16930:	f248 0307 	movw	r3, #32775	; 0x8007
   16934:	429c      	cmp	r4, r3
   16936:	d97c      	bls.n	16a32 <rpc_ip_event_handler+0x146>
   16938:	f248 030c 	movw	r3, #32780	; 0x800c
   1693c:	429c      	cmp	r4, r3
   1693e:	d068      	beq.n	16a12 <rpc_ip_event_handler+0x126>
   16940:	f240 8118 	bls.w	16b74 <rpc_ip_event_handler+0x288>
   16944:	f249 0302 	movw	r3, #36866	; 0x9002
   16948:	429c      	cmp	r4, r3
   1694a:	f000 8191 	beq.w	16c70 <rpc_ip_event_handler+0x384>
   1694e:	f249 0303 	movw	r3, #36867	; 0x9003
   16952:	429c      	cmp	r4, r3
   16954:	f000 81a6 	beq.w	16ca4 <rpc_ip_event_handler+0x3b8>
   16958:	f249 0301 	movw	r3, #36865	; 0x9001
   1695c:	429c      	cmp	r4, r3
   1695e:	d13f      	bne.n	169e0 <rpc_ip_event_handler+0xf4>
   16960:	6834      	ldr	r4, [r6, #0]
   16962:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   16966:	f000 81be 	beq.w	16ce6 <rpc_ip_event_handler+0x3fa>
   1696a:	68ab      	ldr	r3, [r5, #8]
   1696c:	2b04      	cmp	r3, #4
   1696e:	f200 81f4 	bhi.w	16d5a <rpc_ip_event_handler+0x46e>
   16972:	2400      	movs	r4, #0
   16974:	4627      	mov	r7, r4
   16976:	6829      	ldr	r1, [r5, #0]
   16978:	686a      	ldr	r2, [r5, #4]
   1697a:	e9cd 7406 	strd	r7, r4, [sp, #24]
   1697e:	e9cd 1204 	strd	r1, r2, [sp, #16]
   16982:	69f0      	ldr	r0, [r6, #28]
   16984:	a904      	add	r1, sp, #16
   16986:	6803      	ldr	r3, [r0, #0]
   16988:	685b      	ldr	r3, [r3, #4]
   1698a:	4798      	blx	r3
   1698c:	3001      	adds	r0, #1
   1698e:	f000 81d0 	beq.w	16d32 <rpc_ip_event_handler+0x446>
   16992:	6833      	ldr	r3, [r6, #0]
   16994:	2000      	movs	r0, #0
   16996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1699a:	6033      	str	r3, [r6, #0]
   1699c:	e00e      	b.n	169bc <rpc_ip_event_handler+0xd0>
   1699e:	6943      	ldr	r3, [r0, #20]
   169a0:	2001      	movs	r0, #1
   169a2:	2b10      	cmp	r3, #16
   169a4:	49b5      	ldr	r1, [pc, #724]	; (16c7c <rpc_ip_event_handler+0x390>)
   169a6:	bf88      	it	hi
   169a8:	222d      	movhi	r2, #45	; 0x2d
   169aa:	7008      	strb	r0, [r1, #0]
   169ac:	f04f 0000 	mov.w	r0, #0
   169b0:	bf9c      	itt	ls
   169b2:	4ab3      	ldrls	r2, [pc, #716]	; (16c80 <rpc_ip_event_handler+0x394>)
   169b4:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   169b8:	4bb2      	ldr	r3, [pc, #712]	; (16c84 <rpc_ip_event_handler+0x398>)
   169ba:	601a      	str	r2, [r3, #0]
   169bc:	b009      	add	sp, #36	; 0x24
   169be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169c2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 16c98 <rpc_ip_event_handler+0x3ac>
   169c6:	6807      	ldr	r7, [r0, #0]
   169c8:	f8d9 3000 	ldr.w	r3, [r9]
   169cc:	2b01      	cmp	r3, #1
   169ce:	d00b      	beq.n	169e8 <rpc_ip_event_handler+0xfc>
   169d0:	b117      	cbz	r7, 169d8 <rpc_ip_event_handler+0xec>
   169d2:	4638      	mov	r0, r7
   169d4:	f7fb faf2 	bl	11fbc <rpc_ip_client_data_free>
   169d8:	2000      	movs	r0, #0
   169da:	b009      	add	sp, #36	; 0x24
   169dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169e0:	6828      	ldr	r0, [r5, #0]
   169e2:	2800      	cmp	r0, #0
   169e4:	d1f6      	bne.n	169d4 <rpc_ip_event_handler+0xe8>
   169e6:	e7f7      	b.n	169d8 <rpc_ip_event_handler+0xec>
   169e8:	6943      	ldr	r3, [r0, #20]
   169ea:	2b00      	cmp	r3, #0
   169ec:	d045      	beq.n	16a7a <rpc_ip_event_handler+0x18e>
   169ee:	2b10      	cmp	r3, #16
   169f0:	bf96      	itet	ls
   169f2:	4aa3      	ldrls	r2, [pc, #652]	; (16c80 <rpc_ip_event_handler+0x394>)
   169f4:	232d      	movhi	r3, #45	; 0x2d
   169f6:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   169fa:	2202      	movs	r2, #2
   169fc:	49a2      	ldr	r1, [pc, #648]	; (16c88 <rpc_ip_event_handler+0x39c>)
   169fe:	600b      	str	r3, [r1, #0]
   16a00:	f8c9 2000 	str.w	r2, [r9]
   16a04:	2f00      	cmp	r7, #0
   16a06:	d1e4      	bne.n	169d2 <rpc_ip_event_handler+0xe6>
   16a08:	e7e6      	b.n	169d8 <rpc_ip_event_handler+0xec>
   16a0a:	f000 fabf 	bl	16f8c <interface_from_internal_id_search>
   16a0e:	4607      	mov	r7, r0
   16a10:	e780      	b.n	16914 <rpc_ip_event_handler+0x28>
   16a12:	6833      	ldr	r3, [r6, #0]
   16a14:	b29b      	uxth	r3, r3
   16a16:	2b08      	cmp	r3, #8
   16a18:	d1de      	bne.n	169d8 <rpc_ip_event_handler+0xec>
   16a1a:	696b      	ldr	r3, [r5, #20]
   16a1c:	2b00      	cmp	r3, #0
   16a1e:	f000 818a 	beq.w	16d36 <rpc_ip_event_handler+0x44a>
   16a22:	2b10      	cmp	r3, #16
   16a24:	f200 815d 	bhi.w	16ce2 <rpc_ip_event_handler+0x3f6>
   16a28:	4a95      	ldr	r2, [pc, #596]	; (16c80 <rpc_ip_event_handler+0x394>)
   16a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a2e:	6073      	str	r3, [r6, #4]
   16a30:	e7d2      	b.n	169d8 <rpc_ip_event_handler+0xec>
   16a32:	f248 0306 	movw	r3, #32774	; 0x8006
   16a36:	429c      	cmp	r4, r3
   16a38:	f080 8109 	bcs.w	16c4e <rpc_ip_event_handler+0x362>
   16a3c:	f248 0302 	movw	r3, #32770	; 0x8002
   16a40:	429c      	cmp	r4, r3
   16a42:	f000 80ec 	beq.w	16c1e <rpc_ip_event_handler+0x332>
   16a46:	f240 80be 	bls.w	16bc6 <rpc_ip_event_handler+0x2da>
   16a4a:	f248 0303 	movw	r3, #32771	; 0x8003
   16a4e:	429c      	cmp	r4, r3
   16a50:	f000 80ca 	beq.w	16be8 <rpc_ip_event_handler+0x2fc>
   16a54:	f248 0305 	movw	r3, #32773	; 0x8005
   16a58:	429c      	cmp	r4, r3
   16a5a:	d1c1      	bne.n	169e0 <rpc_ip_event_handler+0xf4>
   16a5c:	6833      	ldr	r3, [r6, #0]
   16a5e:	b29b      	uxth	r3, r3
   16a60:	2b03      	cmp	r3, #3
   16a62:	d1b9      	bne.n	169d8 <rpc_ip_event_handler+0xec>
   16a64:	696b      	ldr	r3, [r5, #20]
   16a66:	2b00      	cmp	r3, #0
   16a68:	d1db      	bne.n	16a22 <rpc_ip_event_handler+0x136>
   16a6a:	6833      	ldr	r3, [r6, #0]
   16a6c:	2000      	movs	r0, #0
   16a6e:	0c1b      	lsrs	r3, r3, #16
   16a70:	041b      	lsls	r3, r3, #16
   16a72:	f043 0304 	orr.w	r3, r3, #4
   16a76:	6033      	str	r3, [r6, #0]
   16a78:	e7a0      	b.n	169bc <rpc_ip_event_handler+0xd0>
   16a7a:	4b84      	ldr	r3, [pc, #528]	; (16c8c <rpc_ip_event_handler+0x3a0>)
   16a7c:	601f      	str	r7, [r3, #0]
   16a7e:	6984      	ldr	r4, [r0, #24]
   16a80:	0163      	lsls	r3, r4, #5
   16a82:	4618      	mov	r0, r3
   16a84:	9303      	str	r3, [sp, #12]
   16a86:	f7fb fa2f 	bl	11ee8 <nrf_malloc>
   16a8a:	9002      	str	r0, [sp, #8]
   16a8c:	2800      	cmp	r0, #0
   16a8e:	f000 808a 	beq.w	16ba6 <rpc_ip_event_handler+0x2ba>
   16a92:	00e5      	lsls	r5, r4, #3
   16a94:	1928      	adds	r0, r5, r4
   16a96:	0080      	lsls	r0, r0, #2
   16a98:	f7fb fa26 	bl	11ee8 <nrf_malloc>
   16a9c:	2800      	cmp	r0, #0
   16a9e:	f000 811c 	beq.w	16cda <rpc_ip_event_handler+0x3ee>
   16aa2:	2c00      	cmp	r4, #0
   16aa4:	d05e      	beq.n	16b64 <rpc_ip_event_handler+0x278>
   16aa6:	3510      	adds	r5, #16
   16aa8:	1943      	adds	r3, r0, r5
   16aaa:	9301      	str	r3, [sp, #4]
   16aac:	9b02      	ldr	r3, [sp, #8]
   16aae:	2404      	movs	r4, #4
   16ab0:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 16c9c <rpc_ip_event_handler+0x3b0>
   16ab4:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 16ca0 <rpc_ip_event_handler+0x3b4>
   16ab8:	f100 0810 	add.w	r8, r0, #16
   16abc:	f103 0620 	add.w	r6, r3, #32
   16ac0:	e01d      	b.n	16afe <rpc_ip_event_handler+0x212>
   16ac2:	220a      	movs	r2, #10
   16ac4:	f848 2c0c 	str.w	r2, [r8, #-12]
   16ac8:	f04f 0224 	mov.w	r2, #36	; 0x24
   16acc:	4640      	mov	r0, r8
   16ace:	f808 2c10 	strb.w	r2, [r8, #-16]
   16ad2:	f828 3c08 	strh.w	r3, [r8, #-8]
   16ad6:	f856 2c10 	ldr.w	r2, [r6, #-16]
   16ada:	f006 febf 	bl	1d85c <memcpy>
   16ade:	f856 3c10 	ldr.w	r3, [r6, #-16]
   16ae2:	f108 0808 	add.w	r8, r8, #8
   16ae6:	441c      	add	r4, r3
   16ae8:	193b      	adds	r3, r7, r4
   16aea:	f846 3c08 	str.w	r3, [r6, #-8]
   16aee:	9b01      	ldr	r3, [sp, #4]
   16af0:	f846 6c04 	str.w	r6, [r6, #-4]
   16af4:	4598      	cmp	r8, r3
   16af6:	442c      	add	r4, r5
   16af8:	f106 0620 	add.w	r6, r6, #32
   16afc:	d02c      	beq.n	16b58 <rpc_ip_event_handler+0x26c>
   16afe:	593b      	ldr	r3, [r7, r4]
   16b00:	193a      	adds	r2, r7, r4
   16b02:	f846 3c20 	str.w	r3, [r6, #-32]
   16b06:	6853      	ldr	r3, [r2, #4]
   16b08:	f8da 1000 	ldr.w	r1, [sl]
   16b0c:	2b02      	cmp	r3, #2
   16b0e:	bf14      	ite	ne
   16b10:	2002      	movne	r0, #2
   16b12:	200a      	moveq	r0, #10
   16b14:	f8db 3000 	ldr.w	r3, [fp]
   16b18:	e946 0107 	strd	r0, r1, [r6, #-28]
   16b1c:	f846 3c14 	str.w	r3, [r6, #-20]
   16b20:	8a10      	ldrh	r0, [r2, #16]
   16b22:	f1a8 0310 	sub.w	r3, r8, #16
   16b26:	f846 0c10 	str.w	r0, [r6, #-16]
   16b2a:	8a55      	ldrh	r5, [r2, #18]
   16b2c:	f846 3c0c 	str.w	r3, [r6, #-12]
   16b30:	4b57      	ldr	r3, [pc, #348]	; (16c90 <rpc_ip_event_handler+0x3a4>)
   16b32:	3414      	adds	r4, #20
   16b34:	2804      	cmp	r0, #4
   16b36:	eb07 0104 	add.w	r1, r7, r4
   16b3a:	881b      	ldrh	r3, [r3, #0]
   16b3c:	d1c1      	bne.n	16ac2 <rpc_ip_event_handler+0x1d6>
   16b3e:	2210      	movs	r2, #16
   16b40:	2002      	movs	r0, #2
   16b42:	f828 3c08 	strh.w	r3, [r8, #-8]
   16b46:	f848 0c0c 	str.w	r0, [r8, #-12]
   16b4a:	f808 2c10 	strb.w	r2, [r8, #-16]
   16b4e:	f856 2c10 	ldr.w	r2, [r6, #-16]
   16b52:	f1a8 0004 	sub.w	r0, r8, #4
   16b56:	e7c0      	b.n	16ada <rpc_ip_event_handler+0x1ee>
   16b58:	2200      	movs	r2, #0
   16b5a:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   16b5e:	440b      	add	r3, r1
   16b60:	f843 2c04 	str.w	r2, [r3, #-4]
   16b64:	2202      	movs	r2, #2
   16b66:	4b4b      	ldr	r3, [pc, #300]	; (16c94 <rpc_ip_event_handler+0x3a8>)
   16b68:	f8c9 2000 	str.w	r2, [r9]
   16b6c:	9a02      	ldr	r2, [sp, #8]
   16b6e:	2000      	movs	r0, #0
   16b70:	601a      	str	r2, [r3, #0]
   16b72:	e723      	b.n	169bc <rpc_ip_event_handler+0xd0>
   16b74:	f248 0308 	movw	r3, #32776	; 0x8008
   16b78:	429c      	cmp	r4, r3
   16b7a:	d041      	beq.n	16c00 <rpc_ip_event_handler+0x314>
   16b7c:	f248 0309 	movw	r3, #32777	; 0x8009
   16b80:	429c      	cmp	r4, r3
   16b82:	f47f af2d 	bne.w	169e0 <rpc_ip_event_handler+0xf4>
   16b86:	6833      	ldr	r3, [r6, #0]
   16b88:	b29b      	uxth	r3, r3
   16b8a:	2b0d      	cmp	r3, #13
   16b8c:	f47f af24 	bne.w	169d8 <rpc_ip_event_handler+0xec>
   16b90:	6968      	ldr	r0, [r5, #20]
   16b92:	2800      	cmp	r0, #0
   16b94:	f000 80da 	beq.w	16d4c <rpc_ip_event_handler+0x460>
   16b98:	2810      	cmp	r0, #16
   16b9a:	f200 80a2 	bhi.w	16ce2 <rpc_ip_event_handler+0x3f6>
   16b9e:	4b38      	ldr	r3, [pc, #224]	; (16c80 <rpc_ip_event_handler+0x394>)
   16ba0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   16ba4:	e743      	b.n	16a2e <rpc_ip_event_handler+0x142>
   16ba6:	f7fb f9a9 	bl	11efc <nrf_free>
   16baa:	200c      	movs	r0, #12
   16bac:	2302      	movs	r3, #2
   16bae:	4936      	ldr	r1, [pc, #216]	; (16c88 <rpc_ip_event_handler+0x39c>)
   16bb0:	4a38      	ldr	r2, [pc, #224]	; (16c94 <rpc_ip_event_handler+0x3a8>)
   16bb2:	6008      	str	r0, [r1, #0]
   16bb4:	682f      	ldr	r7, [r5, #0]
   16bb6:	9902      	ldr	r1, [sp, #8]
   16bb8:	f8c9 3000 	str.w	r3, [r9]
   16bbc:	6011      	str	r1, [r2, #0]
   16bbe:	2f00      	cmp	r7, #0
   16bc0:	f47f af07 	bne.w	169d2 <rpc_ip_event_handler+0xe6>
   16bc4:	e708      	b.n	169d8 <rpc_ip_event_handler+0xec>
   16bc6:	f248 0301 	movw	r3, #32769	; 0x8001
   16bca:	429c      	cmp	r4, r3
   16bcc:	f47f af08 	bne.w	169e0 <rpc_ip_event_handler+0xf4>
   16bd0:	6833      	ldr	r3, [r6, #0]
   16bd2:	2b01      	cmp	r3, #1
   16bd4:	f47f af00 	bne.w	169d8 <rpc_ip_event_handler+0xec>
   16bd8:	6968      	ldr	r0, [r5, #20]
   16bda:	2800      	cmp	r0, #0
   16bdc:	d1dc      	bne.n	16b98 <rpc_ip_event_handler+0x2ac>
   16bde:	2302      	movs	r3, #2
   16be0:	6033      	str	r3, [r6, #0]
   16be2:	69ab      	ldr	r3, [r5, #24]
   16be4:	61b3      	str	r3, [r6, #24]
   16be6:	e6e9      	b.n	169bc <rpc_ip_event_handler+0xd0>
   16be8:	6833      	ldr	r3, [r6, #0]
   16bea:	025b      	lsls	r3, r3, #9
   16bec:	f57f aef4 	bpl.w	169d8 <rpc_ip_event_handler+0xec>
   16bf0:	6968      	ldr	r0, [r5, #20]
   16bf2:	2800      	cmp	r0, #0
   16bf4:	d1d0      	bne.n	16b98 <rpc_ip_event_handler+0x2ac>
   16bf6:	6833      	ldr	r3, [r6, #0]
   16bf8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   16bfc:	6033      	str	r3, [r6, #0]
   16bfe:	e6dd      	b.n	169bc <rpc_ip_event_handler+0xd0>
   16c00:	6833      	ldr	r3, [r6, #0]
   16c02:	b29b      	uxth	r3, r3
   16c04:	2b06      	cmp	r3, #6
   16c06:	f47f aee7 	bne.w	169d8 <rpc_ip_event_handler+0xec>
   16c0a:	6968      	ldr	r0, [r5, #20]
   16c0c:	2800      	cmp	r0, #0
   16c0e:	d1c3      	bne.n	16b98 <rpc_ip_event_handler+0x2ac>
   16c10:	6833      	ldr	r3, [r6, #0]
   16c12:	0c1b      	lsrs	r3, r3, #16
   16c14:	041b      	lsls	r3, r3, #16
   16c16:	f043 0307 	orr.w	r3, r3, #7
   16c1a:	6033      	str	r3, [r6, #0]
   16c1c:	e6ce      	b.n	169bc <rpc_ip_event_handler+0xd0>
   16c1e:	6833      	ldr	r3, [r6, #0]
   16c20:	0099      	lsls	r1, r3, #2
   16c22:	f57f aed9 	bpl.w	169d8 <rpc_ip_event_handler+0xec>
   16c26:	6833      	ldr	r3, [r6, #0]
   16c28:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   16c2c:	6033      	str	r3, [r6, #0]
   16c2e:	6968      	ldr	r0, [r5, #20]
   16c30:	2800      	cmp	r0, #0
   16c32:	d066      	beq.n	16d02 <rpc_ip_event_handler+0x416>
   16c34:	2810      	cmp	r0, #16
   16c36:	bf8e      	itee	hi
   16c38:	232d      	movhi	r3, #45	; 0x2d
   16c3a:	4b11      	ldrls	r3, [pc, #68]	; (16c80 <rpc_ip_event_handler+0x394>)
   16c3c:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   16c40:	2000      	movs	r0, #0
   16c42:	6073      	str	r3, [r6, #4]
   16c44:	6833      	ldr	r3, [r6, #0]
   16c46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   16c4a:	6033      	str	r3, [r6, #0]
   16c4c:	e6b6      	b.n	169bc <rpc_ip_event_handler+0xd0>
   16c4e:	6833      	ldr	r3, [r6, #0]
   16c50:	029a      	lsls	r2, r3, #10
   16c52:	f57f aec1 	bpl.w	169d8 <rpc_ip_event_handler+0xec>
   16c56:	696b      	ldr	r3, [r5, #20]
   16c58:	2b00      	cmp	r3, #0
   16c5a:	d061      	beq.n	16d20 <rpc_ip_event_handler+0x434>
   16c5c:	2b6b      	cmp	r3, #107	; 0x6b
   16c5e:	f47f aee0 	bne.w	16a22 <rpc_ip_event_handler+0x136>
   16c62:	6933      	ldr	r3, [r6, #16]
   16c64:	2b01      	cmp	r3, #1
   16c66:	d07c      	beq.n	16d62 <rpc_ip_event_handler+0x476>
   16c68:	230c      	movs	r3, #12
   16c6a:	2000      	movs	r0, #0
   16c6c:	6073      	str	r3, [r6, #4]
   16c6e:	e6a5      	b.n	169bc <rpc_ip_event_handler+0xd0>
   16c70:	6833      	ldr	r3, [r6, #0]
   16c72:	b29b      	uxth	r3, r3
   16c74:	2b07      	cmp	r3, #7
   16c76:	f47f aeaf 	bne.w	169d8 <rpc_ip_event_handler+0xec>
   16c7a:	e68a      	b.n	16992 <rpc_ip_event_handler+0xa6>
   16c7c:	20024f3b 	.word	0x20024f3b
   16c80:	0001f178 	.word	0x0001f178
   16c84:	20020a6c 	.word	0x20020a6c
   16c88:	20020a38 	.word	0x20020a38
   16c8c:	20020a44 	.word	0x20020a44
   16c90:	20024f2c 	.word	0x20024f2c
   16c94:	20020a40 	.word	0x20020a40
   16c98:	20020a3c 	.word	0x20020a3c
   16c9c:	20020a34 	.word	0x20020a34
   16ca0:	20020a30 	.word	0x20020a30
   16ca4:	6833      	ldr	r3, [r6, #0]
   16ca6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   16caa:	6033      	str	r3, [r6, #0]
   16cac:	6833      	ldr	r3, [r6, #0]
   16cae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   16cb2:	6033      	str	r3, [r6, #0]
   16cb4:	6833      	ldr	r3, [r6, #0]
   16cb6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   16cba:	6033      	str	r3, [r6, #0]
   16cbc:	692b      	ldr	r3, [r5, #16]
   16cbe:	2b6c      	cmp	r3, #108	; 0x6c
   16cc0:	d016      	beq.n	16cf0 <rpc_ip_event_handler+0x404>
   16cc2:	2b10      	cmp	r3, #16
   16cc4:	bf8c      	ite	hi
   16cc6:	232d      	movhi	r3, #45	; 0x2d
   16cc8:	4a40      	ldrls	r2, [pc, #256]	; (16dcc <rpc_ip_event_handler+0x4e0>)
   16cca:	f04f 0000 	mov.w	r0, #0
   16cce:	bf98      	it	ls
   16cd0:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   16cd4:	6073      	str	r3, [r6, #4]
   16cd6:	60b3      	str	r3, [r6, #8]
   16cd8:	e670      	b.n	169bc <rpc_ip_event_handler+0xd0>
   16cda:	220c      	movs	r2, #12
   16cdc:	4b3c      	ldr	r3, [pc, #240]	; (16dd0 <rpc_ip_event_handler+0x4e4>)
   16cde:	601a      	str	r2, [r3, #0]
   16ce0:	e740      	b.n	16b64 <rpc_ip_event_handler+0x278>
   16ce2:	232d      	movs	r3, #45	; 0x2d
   16ce4:	e6a3      	b.n	16a2e <rpc_ip_event_handler+0x142>
   16ce6:	6828      	ldr	r0, [r5, #0]
   16ce8:	f7fb f968 	bl	11fbc <rpc_ip_client_data_free>
   16cec:	4620      	mov	r0, r4
   16cee:	e665      	b.n	169bc <rpc_ip_event_handler+0xd0>
   16cf0:	2239      	movs	r2, #57	; 0x39
   16cf2:	6833      	ldr	r3, [r6, #0]
   16cf4:	2000      	movs	r0, #0
   16cf6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   16cfa:	6033      	str	r3, [r6, #0]
   16cfc:	6072      	str	r2, [r6, #4]
   16cfe:	60b2      	str	r2, [r6, #8]
   16d00:	e65c      	b.n	169bc <rpc_ip_event_handler+0xd0>
   16d02:	6833      	ldr	r3, [r6, #0]
   16d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   16d08:	6033      	str	r3, [r6, #0]
   16d0a:	6833      	ldr	r3, [r6, #0]
   16d0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   16d10:	6033      	str	r3, [r6, #0]
   16d12:	6833      	ldr	r3, [r6, #0]
   16d14:	0c1b      	lsrs	r3, r3, #16
   16d16:	041b      	lsls	r3, r3, #16
   16d18:	f043 0305 	orr.w	r3, r3, #5
   16d1c:	6033      	str	r3, [r6, #0]
   16d1e:	e64d      	b.n	169bc <rpc_ip_event_handler+0xd0>
   16d20:	6833      	ldr	r3, [r6, #0]
   16d22:	4a2c      	ldr	r2, [pc, #176]	; (16dd4 <rpc_ip_event_handler+0x4e8>)
   16d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   16d28:	6033      	str	r3, [r6, #0]
   16d2a:	2001      	movs	r0, #1
   16d2c:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
   16d30:	e644      	b.n	169bc <rpc_ip_event_handler+0xd0>
   16d32:	2002      	movs	r0, #2
   16d34:	e642      	b.n	169bc <rpc_ip_event_handler+0xd0>
   16d36:	4b27      	ldr	r3, [pc, #156]	; (16dd4 <rpc_ip_event_handler+0x4e8>)
   16d38:	2001      	movs	r0, #1
   16d3a:	f843 5027 	str.w	r5, [r3, r7, lsl #2]
   16d3e:	6833      	ldr	r3, [r6, #0]
   16d40:	0c1b      	lsrs	r3, r3, #16
   16d42:	041b      	lsls	r3, r3, #16
   16d44:	f043 0309 	orr.w	r3, r3, #9
   16d48:	6033      	str	r3, [r6, #0]
   16d4a:	e637      	b.n	169bc <rpc_ip_event_handler+0xd0>
   16d4c:	6833      	ldr	r3, [r6, #0]
   16d4e:	0c1b      	lsrs	r3, r3, #16
   16d50:	041b      	lsls	r3, r3, #16
   16d52:	f043 030e 	orr.w	r3, r3, #14
   16d56:	6033      	str	r3, [r6, #0]
   16d58:	e630      	b.n	169bc <rpc_ip_event_handler+0xd0>
   16d5a:	8a6c      	ldrh	r4, [r5, #18]
   16d5c:	b94c      	cbnz	r4, 16d72 <rpc_ip_event_handler+0x486>
   16d5e:	4627      	mov	r7, r4
   16d60:	e609      	b.n	16976 <rpc_ip_event_handler+0x8a>
   16d62:	220c      	movs	r2, #12
   16d64:	6833      	ldr	r3, [r6, #0]
   16d66:	2000      	movs	r0, #0
   16d68:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   16d6c:	6033      	str	r3, [r6, #0]
   16d6e:	6072      	str	r2, [r6, #4]
   16d70:	e624      	b.n	169bc <rpc_ip_event_handler+0xd0>
   16d72:	2024      	movs	r0, #36	; 0x24
   16d74:	f7fb f8b8 	bl	11ee8 <nrf_malloc>
   16d78:	4607      	mov	r7, r0
   16d7a:	b318      	cbz	r0, 16dc4 <rpc_ip_event_handler+0x4d8>
   16d7c:	8a6a      	ldrh	r2, [r5, #18]
   16d7e:	2a10      	cmp	r2, #16
   16d80:	d014      	beq.n	16dac <rpc_ip_event_handler+0x4c0>
   16d82:	2a04      	cmp	r2, #4
   16d84:	d006      	beq.n	16d94 <rpc_ip_event_handler+0x4a8>
   16d86:	6828      	ldr	r0, [r5, #0]
   16d88:	f7fb f918 	bl	11fbc <rpc_ip_client_data_free>
   16d8c:	4638      	mov	r0, r7
   16d8e:	f7fb f8b5 	bl	11efc <nrf_free>
   16d92:	e621      	b.n	169d8 <rpc_ip_event_handler+0xec>
   16d94:	2302      	movs	r3, #2
   16d96:	2410      	movs	r4, #16
   16d98:	6043      	str	r3, [r0, #4]
   16d9a:	7004      	strb	r4, [r0, #0]
   16d9c:	8a2b      	ldrh	r3, [r5, #16]
   16d9e:	f105 0114 	add.w	r1, r5, #20
   16da2:	8103      	strh	r3, [r0, #8]
   16da4:	300c      	adds	r0, #12
   16da6:	f006 fd59 	bl	1d85c <memcpy>
   16daa:	e5e4      	b.n	16976 <rpc_ip_event_handler+0x8a>
   16dac:	230a      	movs	r3, #10
   16dae:	2424      	movs	r4, #36	; 0x24
   16db0:	6043      	str	r3, [r0, #4]
   16db2:	7004      	strb	r4, [r0, #0]
   16db4:	8a2b      	ldrh	r3, [r5, #16]
   16db6:	f105 0114 	add.w	r1, r5, #20
   16dba:	8103      	strh	r3, [r0, #8]
   16dbc:	3010      	adds	r0, #16
   16dbe:	f006 fd4d 	bl	1d85c <memcpy>
   16dc2:	e5d8      	b.n	16976 <rpc_ip_event_handler+0x8a>
   16dc4:	6828      	ldr	r0, [r5, #0]
   16dc6:	f7fb f8f9 	bl	11fbc <rpc_ip_client_data_free>
   16dca:	e605      	b.n	169d8 <rpc_ip_event_handler+0xec>
   16dcc:	0001f178 	.word	0x0001f178
   16dd0:	20020a38 	.word	0x20020a38
   16dd4:	20020a48 	.word	0x20020a48

00016dd8 <interface_init>:
   16dd8:	b508      	push	{r3, lr}
   16dda:	f44f 72a2 	mov.w	r2, #324	; 0x144
   16dde:	2100      	movs	r1, #0
   16de0:	4802      	ldr	r0, [pc, #8]	; (16dec <interface_init+0x14>)
   16de2:	f006 fd65 	bl	1d8b0 <memset>
   16de6:	2000      	movs	r0, #0
   16de8:	bd08      	pop	{r3, pc}
   16dea:	bf00      	nop
   16dec:	20024f40 	.word	0x20024f40

00016df0 <interface_socket_allocate>:
   16df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16df2:	4b2d      	ldr	r3, [pc, #180]	; (16ea8 <interface_socket_allocate+0xb8>)
   16df4:	4606      	mov	r6, r0
   16df6:	681d      	ldr	r5, [r3, #0]
   16df8:	4608      	mov	r0, r1
   16dfa:	b315      	cbz	r5, 16e42 <interface_socket_allocate+0x52>
   16dfc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   16dfe:	2c00      	cmp	r4, #0
   16e00:	d043      	beq.n	16e8a <interface_socket_allocate+0x9a>
   16e02:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   16e04:	2c00      	cmp	r4, #0
   16e06:	d042      	beq.n	16e8e <interface_socket_allocate+0x9e>
   16e08:	6edc      	ldr	r4, [r3, #108]	; 0x6c
   16e0a:	2c00      	cmp	r4, #0
   16e0c:	d041      	beq.n	16e92 <interface_socket_allocate+0xa2>
   16e0e:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
   16e12:	2900      	cmp	r1, #0
   16e14:	d03f      	beq.n	16e96 <interface_socket_allocate+0xa6>
   16e16:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
   16e1a:	b189      	cbz	r1, 16e40 <interface_socket_allocate+0x50>
   16e1c:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
   16e20:	2900      	cmp	r1, #0
   16e22:	d03c      	beq.n	16e9e <interface_socket_allocate+0xae>
   16e24:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
   16e28:	2900      	cmp	r1, #0
   16e2a:	d03a      	beq.n	16ea2 <interface_socket_allocate+0xb2>
   16e2c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   16e30:	b399      	cbz	r1, 16e9a <interface_socket_allocate+0xaa>
   16e32:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   16e36:	200c      	movs	r0, #12
   16e38:	f7f8 fc36 	bl	f6a8 <bsd_os_errno_set>
   16e3c:	4628      	mov	r0, r5
   16e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16e40:	2505      	movs	r5, #5
   16e42:	f04f 0c01 	mov.w	ip, #1
   16e46:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   16e4a:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   16e4e:	00a4      	lsls	r4, r4, #2
   16e50:	f843 c004 	str.w	ip, [r3, r4]
   16e54:	441c      	add	r4, r3
   16e56:	4611      	mov	r1, r2
   16e58:	61a7      	str	r7, [r4, #24]
   16e5a:	4622      	mov	r2, r4
   16e5c:	f001 ffba 	bl	18dd4 <packet_handler_create>
   16e60:	4603      	mov	r3, r0
   16e62:	61e0      	str	r0, [r4, #28]
   16e64:	b158      	cbz	r0, 16e7e <interface_socket_allocate+0x8e>
   16e66:	681b      	ldr	r3, [r3, #0]
   16e68:	681b      	ldr	r3, [r3, #0]
   16e6a:	4798      	blx	r3
   16e6c:	b910      	cbnz	r0, 16e74 <interface_socket_allocate+0x84>
   16e6e:	6034      	str	r4, [r6, #0]
   16e70:	4628      	mov	r0, r5
   16e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16e74:	69e0      	ldr	r0, [r4, #28]
   16e76:	f001 ffcd 	bl	18e14 <packet_handler_delete>
   16e7a:	2300      	movs	r3, #0
   16e7c:	61e3      	str	r3, [r4, #28]
   16e7e:	4620      	mov	r0, r4
   16e80:	2224      	movs	r2, #36	; 0x24
   16e82:	2100      	movs	r1, #0
   16e84:	f006 fd14 	bl	1d8b0 <memset>
   16e88:	e7d3      	b.n	16e32 <interface_socket_allocate+0x42>
   16e8a:	2501      	movs	r5, #1
   16e8c:	e7d9      	b.n	16e42 <interface_socket_allocate+0x52>
   16e8e:	2502      	movs	r5, #2
   16e90:	e7d7      	b.n	16e42 <interface_socket_allocate+0x52>
   16e92:	2503      	movs	r5, #3
   16e94:	e7d5      	b.n	16e42 <interface_socket_allocate+0x52>
   16e96:	2504      	movs	r5, #4
   16e98:	e7d3      	b.n	16e42 <interface_socket_allocate+0x52>
   16e9a:	2508      	movs	r5, #8
   16e9c:	e7d1      	b.n	16e42 <interface_socket_allocate+0x52>
   16e9e:	2506      	movs	r5, #6
   16ea0:	e7cf      	b.n	16e42 <interface_socket_allocate+0x52>
   16ea2:	2507      	movs	r5, #7
   16ea4:	e7cd      	b.n	16e42 <interface_socket_allocate+0x52>
   16ea6:	bf00      	nop
   16ea8:	20024f40 	.word	0x20024f40

00016eac <interface_socket_free>:
   16eac:	2808      	cmp	r0, #8
   16eae:	d900      	bls.n	16eb2 <interface_socket_free+0x6>
   16eb0:	4770      	bx	lr
   16eb2:	b510      	push	{r4, lr}
   16eb4:	4c07      	ldr	r4, [pc, #28]	; (16ed4 <interface_socket_free+0x28>)
   16eb6:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   16eba:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   16ebe:	69e0      	ldr	r0, [r4, #28]
   16ec0:	b108      	cbz	r0, 16ec6 <interface_socket_free+0x1a>
   16ec2:	f001 ffa7 	bl	18e14 <packet_handler_delete>
   16ec6:	4620      	mov	r0, r4
   16ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16ecc:	2224      	movs	r2, #36	; 0x24
   16ece:	2100      	movs	r1, #0
   16ed0:	f006 bcee 	b.w	1d8b0 <memset>
   16ed4:	20024f40 	.word	0x20024f40

00016ed8 <interface_socket_packet_handler_update>:
   16ed8:	2808      	cmp	r0, #8
   16eda:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16ede:	d81e      	bhi.n	16f1e <interface_socket_packet_handler_update+0x46>
   16ee0:	ea4f 08c0 	mov.w	r8, r0, lsl #3
   16ee4:	4e17      	ldr	r6, [pc, #92]	; (16f44 <interface_socket_packet_handler_update+0x6c>)
   16ee6:	eb08 0300 	add.w	r3, r8, r0
   16eea:	009b      	lsls	r3, r3, #2
   16eec:	58f4      	ldr	r4, [r6, r3]
   16eee:	18f5      	adds	r5, r6, r3
   16ef0:	b1ac      	cbz	r4, 16f1e <interface_socket_packet_handler_update+0x46>
   16ef2:	460b      	mov	r3, r1
   16ef4:	4604      	mov	r4, r0
   16ef6:	4611      	mov	r1, r2
   16ef8:	4618      	mov	r0, r3
   16efa:	462a      	mov	r2, r5
   16efc:	f8d5 901c 	ldr.w	r9, [r5, #28]
   16f00:	f001 ff68 	bl	18dd4 <packet_handler_create>
   16f04:	61e8      	str	r0, [r5, #28]
   16f06:	b1d0      	cbz	r0, 16f3e <interface_socket_packet_handler_update+0x66>
   16f08:	6803      	ldr	r3, [r0, #0]
   16f0a:	681b      	ldr	r3, [r3, #0]
   16f0c:	4798      	blx	r3
   16f0e:	4607      	mov	r7, r0
   16f10:	b948      	cbnz	r0, 16f26 <interface_socket_packet_handler_update+0x4e>
   16f12:	4648      	mov	r0, r9
   16f14:	f001 ff7e 	bl	18e14 <packet_handler_delete>
   16f18:	4638      	mov	r0, r7
   16f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16f1e:	2705      	movs	r7, #5
   16f20:	4638      	mov	r0, r7
   16f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16f26:	69e8      	ldr	r0, [r5, #28]
   16f28:	f001 ff74 	bl	18e14 <packet_handler_delete>
   16f2c:	eb08 0004 	add.w	r0, r8, r4
   16f30:	eb06 0680 	add.w	r6, r6, r0, lsl #2
   16f34:	f8c6 901c 	str.w	r9, [r6, #28]
   16f38:	4638      	mov	r0, r7
   16f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16f3e:	2704      	movs	r7, #4
   16f40:	e7f4      	b.n	16f2c <interface_socket_packet_handler_update+0x54>
   16f42:	bf00      	nop
   16f44:	20024f40 	.word	0x20024f40

00016f48 <interface_socket_wait>:
   16f48:	b5f0      	push	{r4, r5, r6, r7, lr}
   16f4a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   16f4e:	4c0e      	ldr	r4, [pc, #56]	; (16f88 <interface_socket_wait+0x40>)
   16f50:	0080      	lsls	r0, r0, #2
   16f52:	5825      	ldr	r5, [r4, r0]
   16f54:	b083      	sub	sp, #12
   16f56:	4015      	ands	r5, r2
   16f58:	428d      	cmp	r5, r1
   16f5a:	9301      	str	r3, [sp, #4]
   16f5c:	4404      	add	r4, r0
   16f5e:	d010      	beq.n	16f82 <interface_socket_wait+0x3a>
   16f60:	6863      	ldr	r3, [r4, #4]
   16f62:	b973      	cbnz	r3, 16f82 <interface_socket_wait+0x3a>
   16f64:	460f      	mov	r7, r1
   16f66:	4616      	mov	r6, r2
   16f68:	4625      	mov	r5, r4
   16f6a:	e006      	b.n	16f7a <interface_socket_wait+0x32>
   16f6c:	686b      	ldr	r3, [r5, #4]
   16f6e:	b943      	cbnz	r3, 16f82 <interface_socket_wait+0x3a>
   16f70:	a901      	add	r1, sp, #4
   16f72:	4620      	mov	r0, r4
   16f74:	f7f8 fb04 	bl	f580 <bsd_os_timedwait>
   16f78:	b920      	cbnz	r0, 16f84 <interface_socket_wait+0x3c>
   16f7a:	682b      	ldr	r3, [r5, #0]
   16f7c:	4033      	ands	r3, r6
   16f7e:	42bb      	cmp	r3, r7
   16f80:	d1f4      	bne.n	16f6c <interface_socket_wait+0x24>
   16f82:	2000      	movs	r0, #0
   16f84:	b003      	add	sp, #12
   16f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16f88:	20024f40 	.word	0x20024f40

00016f8c <interface_from_internal_id_search>:
   16f8c:	4b27      	ldr	r3, [pc, #156]	; (1702c <interface_from_internal_id_search+0xa0>)
   16f8e:	681a      	ldr	r2, [r3, #0]
   16f90:	b112      	cbz	r2, 16f98 <interface_from_internal_id_search+0xc>
   16f92:	699a      	ldr	r2, [r3, #24]
   16f94:	4282      	cmp	r2, r0
   16f96:	d039      	beq.n	1700c <interface_from_internal_id_search+0x80>
   16f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   16f9a:	b112      	cbz	r2, 16fa2 <interface_from_internal_id_search+0x16>
   16f9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   16f9e:	4282      	cmp	r2, r0
   16fa0:	d036      	beq.n	17010 <interface_from_internal_id_search+0x84>
   16fa2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   16fa4:	b112      	cbz	r2, 16fac <interface_from_internal_id_search+0x20>
   16fa6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   16fa8:	4282      	cmp	r2, r0
   16faa:	d033      	beq.n	17014 <interface_from_internal_id_search+0x88>
   16fac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   16fae:	b11a      	cbz	r2, 16fb8 <interface_from_internal_id_search+0x2c>
   16fb0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   16fb4:	4282      	cmp	r2, r0
   16fb6:	d02f      	beq.n	17018 <interface_from_internal_id_search+0x8c>
   16fb8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   16fbc:	b11a      	cbz	r2, 16fc6 <interface_from_internal_id_search+0x3a>
   16fbe:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
   16fc2:	4282      	cmp	r2, r0
   16fc4:	d02a      	beq.n	1701c <interface_from_internal_id_search+0x90>
   16fc6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   16fca:	b11a      	cbz	r2, 16fd4 <interface_from_internal_id_search+0x48>
   16fcc:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   16fd0:	4282      	cmp	r2, r0
   16fd2:	d025      	beq.n	17020 <interface_from_internal_id_search+0x94>
   16fd4:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
   16fd8:	b11a      	cbz	r2, 16fe2 <interface_from_internal_id_search+0x56>
   16fda:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   16fde:	4282      	cmp	r2, r0
   16fe0:	d020      	beq.n	17024 <interface_from_internal_id_search+0x98>
   16fe2:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
   16fe6:	b11a      	cbz	r2, 16ff0 <interface_from_internal_id_search+0x64>
   16fe8:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
   16fec:	4282      	cmp	r2, r0
   16fee:	d01b      	beq.n	17028 <interface_from_internal_id_search+0x9c>
   16ff0:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   16ff4:	b13a      	cbz	r2, 17006 <interface_from_internal_id_search+0x7a>
   16ff6:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
   16ffa:	4283      	cmp	r3, r0
   16ffc:	bf14      	ite	ne
   16ffe:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   17002:	2008      	moveq	r0, #8
   17004:	4770      	bx	lr
   17006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1700a:	4770      	bx	lr
   1700c:	2000      	movs	r0, #0
   1700e:	4770      	bx	lr
   17010:	2001      	movs	r0, #1
   17012:	4770      	bx	lr
   17014:	2002      	movs	r0, #2
   17016:	4770      	bx	lr
   17018:	2003      	movs	r0, #3
   1701a:	4770      	bx	lr
   1701c:	2004      	movs	r0, #4
   1701e:	4770      	bx	lr
   17020:	2005      	movs	r0, #5
   17022:	4770      	bx	lr
   17024:	2006      	movs	r0, #6
   17026:	4770      	bx	lr
   17028:	2007      	movs	r0, #7
   1702a:	4770      	bx	lr
   1702c:	20024f40 	.word	0x20024f40

00017030 <interface_socket_from_handle_get>:
   17030:	2808      	cmp	r0, #8
   17032:	d807      	bhi.n	17044 <interface_socket_from_handle_get+0x14>
   17034:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   17038:	4b03      	ldr	r3, [pc, #12]	; (17048 <interface_socket_from_handle_get+0x18>)
   1703a:	0080      	lsls	r0, r0, #2
   1703c:	581a      	ldr	r2, [r3, r0]
   1703e:	b10a      	cbz	r2, 17044 <interface_socket_from_handle_get+0x14>
   17040:	4418      	add	r0, r3
   17042:	4770      	bx	lr
   17044:	2000      	movs	r0, #0
   17046:	4770      	bx	lr
   17048:	20024f40 	.word	0x20024f40

0001704c <interface_socket_event_get>:
   1704c:	b119      	cbz	r1, 17056 <interface_socket_event_get+0xa>
   1704e:	2808      	cmp	r0, #8
   17050:	d902      	bls.n	17058 <interface_socket_event_get+0xc>
   17052:	2310      	movs	r3, #16
   17054:	600b      	str	r3, [r1, #0]
   17056:	4770      	bx	lr
   17058:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   1705c:	4b07      	ldr	r3, [pc, #28]	; (1707c <interface_socket_event_get+0x30>)
   1705e:	0080      	lsls	r0, r0, #2
   17060:	581a      	ldr	r2, [r3, r0]
   17062:	2a00      	cmp	r2, #0
   17064:	d0f5      	beq.n	17052 <interface_socket_event_get+0x6>
   17066:	581b      	ldr	r3, [r3, r0]
   17068:	0c1b      	lsrs	r3, r3, #16
   1706a:	f003 020a 	and.w	r2, r3, #10
   1706e:	2a0a      	cmp	r2, #10
   17070:	bf14      	ite	ne
   17072:	f003 030f 	andne.w	r3, r3, #15
   17076:	f003 030d 	andeq.w	r3, r3, #13
   1707a:	e7eb      	b.n	17054 <interface_socket_event_get+0x8>
   1707c:	20024f40 	.word	0x20024f40

00017080 <interface_socket_setopt>:
   17080:	2808      	cmp	r0, #8
   17082:	b570      	push	{r4, r5, r6, lr}
   17084:	d827      	bhi.n	170d6 <interface_socket_setopt+0x56>
   17086:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   1708a:	4c16      	ldr	r4, [pc, #88]	; (170e4 <interface_socket_setopt+0x64>)
   1708c:	0080      	lsls	r0, r0, #2
   1708e:	5825      	ldr	r5, [r4, r0]
   17090:	b30d      	cbz	r5, 170d6 <interface_socket_setopt+0x56>
   17092:	2901      	cmp	r1, #1
   17094:	d119      	bne.n	170ca <interface_socket_setopt+0x4a>
   17096:	2a14      	cmp	r2, #20
   17098:	d117      	bne.n	170ca <interface_socket_setopt+0x4a>
   1709a:	b183      	cbz	r3, 170be <interface_socket_setopt+0x3e>
   1709c:	9a04      	ldr	r2, [sp, #16]
   1709e:	2a08      	cmp	r2, #8
   170a0:	d10d      	bne.n	170be <interface_socket_setopt+0x3e>
   170a2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   170a6:	685a      	ldr	r2, [r3, #4]
   170a8:	4e0f      	ldr	r6, [pc, #60]	; (170e8 <interface_socket_setopt+0x68>)
   170aa:	6819      	ldr	r1, [r3, #0]
   170ac:	fba6 2302 	umull	r2, r3, r6, r2
   170b0:	099b      	lsrs	r3, r3, #6
   170b2:	fb05 3301 	mla	r3, r5, r1, r3
   170b6:	4420      	add	r0, r4
   170b8:	6203      	str	r3, [r0, #32]
   170ba:	2000      	movs	r0, #0
   170bc:	bd70      	pop	{r4, r5, r6, pc}
   170be:	2016      	movs	r0, #22
   170c0:	f7f8 faf2 	bl	f6a8 <bsd_os_errno_set>
   170c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   170c8:	bd70      	pop	{r4, r5, r6, pc}
   170ca:	202a      	movs	r0, #42	; 0x2a
   170cc:	f7f8 faec 	bl	f6a8 <bsd_os_errno_set>
   170d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   170d4:	bd70      	pop	{r4, r5, r6, pc}
   170d6:	2009      	movs	r0, #9
   170d8:	f7f8 fae6 	bl	f6a8 <bsd_os_errno_set>
   170dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   170e0:	bd70      	pop	{r4, r5, r6, pc}
   170e2:	bf00      	nop
   170e4:	20024f40 	.word	0x20024f40
   170e8:	10624dd3 	.word	0x10624dd3

000170ec <interface_socket_getopt>:
   170ec:	b570      	push	{r4, r5, r6, lr}
   170ee:	2808      	cmp	r0, #8
   170f0:	9d04      	ldr	r5, [sp, #16]
   170f2:	d821      	bhi.n	17138 <interface_socket_getopt+0x4c>
   170f4:	4c13      	ldr	r4, [pc, #76]	; (17144 <interface_socket_getopt+0x58>)
   170f6:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   170fa:	0080      	lsls	r0, r0, #2
   170fc:	5826      	ldr	r6, [r4, r0]
   170fe:	4404      	add	r4, r0
   17100:	b1d6      	cbz	r6, 17138 <interface_socket_getopt+0x4c>
   17102:	2901      	cmp	r1, #1
   17104:	d112      	bne.n	1712c <interface_socket_getopt+0x40>
   17106:	2a04      	cmp	r2, #4
   17108:	d110      	bne.n	1712c <interface_socket_getopt+0x40>
   1710a:	b14b      	cbz	r3, 17120 <interface_socket_getopt+0x34>
   1710c:	b145      	cbz	r5, 17120 <interface_socket_getopt+0x34>
   1710e:	682a      	ldr	r2, [r5, #0]
   17110:	2a04      	cmp	r2, #4
   17112:	d105      	bne.n	17120 <interface_socket_getopt+0x34>
   17114:	2200      	movs	r2, #0
   17116:	6861      	ldr	r1, [r4, #4]
   17118:	4610      	mov	r0, r2
   1711a:	6019      	str	r1, [r3, #0]
   1711c:	6062      	str	r2, [r4, #4]
   1711e:	bd70      	pop	{r4, r5, r6, pc}
   17120:	2016      	movs	r0, #22
   17122:	f7f8 fac1 	bl	f6a8 <bsd_os_errno_set>
   17126:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1712a:	bd70      	pop	{r4, r5, r6, pc}
   1712c:	202a      	movs	r0, #42	; 0x2a
   1712e:	f7f8 fabb 	bl	f6a8 <bsd_os_errno_set>
   17132:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17136:	bd70      	pop	{r4, r5, r6, pc}
   17138:	2009      	movs	r0, #9
   1713a:	f7f8 fab5 	bl	f6a8 <bsd_os_errno_set>
   1713e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17142:	bd70      	pop	{r4, r5, r6, pc}
   17144:	20024f40 	.word	0x20024f40

00017148 <interface_socket_fcntl>:
   17148:	2808      	cmp	r0, #8
   1714a:	b510      	push	{r4, lr}
   1714c:	d818      	bhi.n	17180 <interface_socket_fcntl+0x38>
   1714e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   17152:	4c11      	ldr	r4, [pc, #68]	; (17198 <interface_socket_fcntl+0x50>)
   17154:	0083      	lsls	r3, r0, #2
   17156:	58e0      	ldr	r0, [r4, r3]
   17158:	b190      	cbz	r0, 17180 <interface_socket_fcntl+0x38>
   1715a:	2901      	cmp	r1, #1
   1715c:	d005      	beq.n	1716a <interface_socket_fcntl+0x22>
   1715e:	2902      	cmp	r1, #2
   17160:	d114      	bne.n	1718c <interface_socket_fcntl+0x44>
   17162:	58e0      	ldr	r0, [r4, r3]
   17164:	f3c0 7000 	ubfx	r0, r0, #28, #1
   17168:	bd10      	pop	{r4, pc}
   1716a:	f012 0001 	ands.w	r0, r2, #1
   1716e:	58e2      	ldr	r2, [r4, r3]
   17170:	bf1a      	itte	ne
   17172:	2000      	movne	r0, #0
   17174:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
   17178:	f022 5280 	biceq.w	r2, r2, #268435456	; 0x10000000
   1717c:	50e2      	str	r2, [r4, r3]
   1717e:	bd10      	pop	{r4, pc}
   17180:	2009      	movs	r0, #9
   17182:	f7f8 fa91 	bl	f6a8 <bsd_os_errno_set>
   17186:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1718a:	bd10      	pop	{r4, pc}
   1718c:	2016      	movs	r0, #22
   1718e:	f7f8 fa8b 	bl	f6a8 <bsd_os_errno_set>
   17192:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17196:	bd10      	pop	{r4, pc}
   17198:	20024f40 	.word	0x20024f40

0001719c <bsd_os_application_irq_handler>:
   1719c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   171a0:	4c33      	ldr	r4, [pc, #204]	; (17270 <bsd_os_application_irq_handler+0xd4>)
   171a2:	f7f8 fb39 	bl	f818 <bsd_os_application_irq_clear>
   171a6:	f04f 0803 	mov.w	r8, #3
   171aa:	4d32      	ldr	r5, [pc, #200]	; (17274 <bsd_os_application_irq_handler+0xd8>)
   171ac:	4f32      	ldr	r7, [pc, #200]	; (17278 <bsd_os_application_irq_handler+0xdc>)
   171ae:	f104 0680 	add.w	r6, r4, #128	; 0x80
   171b2:	e004      	b.n	171be <bsd_os_application_irq_handler+0x22>
   171b4:	2b04      	cmp	r3, #4
   171b6:	d006      	beq.n	171c6 <bsd_os_application_irq_handler+0x2a>
   171b8:	3408      	adds	r4, #8
   171ba:	42b4      	cmp	r4, r6
   171bc:	d03b      	beq.n	17236 <bsd_os_application_irq_handler+0x9a>
   171be:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   171c2:	2b02      	cmp	r3, #2
   171c4:	d1f6      	bne.n	171b4 <bsd_os_application_irq_handler+0x18>
   171c6:	6820      	ldr	r0, [r4, #0]
   171c8:	882a      	ldrh	r2, [r5, #0]
   171ca:	6803      	ldr	r3, [r0, #0]
   171cc:	b29b      	uxth	r3, r3
   171ce:	429a      	cmp	r2, r3
   171d0:	d033      	beq.n	1723a <bsd_os_application_irq_handler+0x9e>
   171d2:	8a2a      	ldrh	r2, [r5, #16]
   171d4:	429a      	cmp	r2, r3
   171d6:	d032      	beq.n	1723e <bsd_os_application_irq_handler+0xa2>
   171d8:	8c2a      	ldrh	r2, [r5, #32]
   171da:	429a      	cmp	r2, r3
   171dc:	d031      	beq.n	17242 <bsd_os_application_irq_handler+0xa6>
   171de:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
   171e0:	429a      	cmp	r2, r3
   171e2:	d030      	beq.n	17246 <bsd_os_application_irq_handler+0xaa>
   171e4:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
   171e8:	429a      	cmp	r2, r3
   171ea:	d036      	beq.n	1725a <bsd_os_application_irq_handler+0xbe>
   171ec:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
   171f0:	429a      	cmp	r2, r3
   171f2:	d034      	beq.n	1725e <bsd_os_application_irq_handler+0xc2>
   171f4:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
   171f8:	429a      	cmp	r2, r3
   171fa:	d032      	beq.n	17262 <bsd_os_application_irq_handler+0xc6>
   171fc:	f8b5 2070 	ldrh.w	r2, [r5, #112]	; 0x70
   17200:	429a      	cmp	r2, r3
   17202:	d030      	beq.n	17266 <bsd_os_application_irq_handler+0xca>
   17204:	f8b5 2080 	ldrh.w	r2, [r5, #128]	; 0x80
   17208:	429a      	cmp	r2, r3
   1720a:	d02e      	beq.n	1726a <bsd_os_application_irq_handler+0xce>
   1720c:	f8b5 2090 	ldrh.w	r2, [r5, #144]	; 0x90
   17210:	429a      	cmp	r2, r3
   17212:	bf08      	it	eq
   17214:	2309      	moveq	r3, #9
   17216:	d1cf      	bne.n	171b8 <bsd_os_application_irq_handler+0x1c>
   17218:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   1721c:	685a      	ldr	r2, [r3, #4]
   1721e:	68d9      	ldr	r1, [r3, #12]
   17220:	4790      	blx	r2
   17222:	b990      	cbnz	r0, 1724a <bsd_os_application_irq_handler+0xae>
   17224:	2201      	movs	r2, #1
   17226:	6820      	ldr	r0, [r4, #0]
   17228:	f804 2c04 	strb.w	r2, [r4, #-4]
   1722c:	68fb      	ldr	r3, [r7, #12]
   1722e:	3408      	adds	r4, #8
   17230:	4798      	blx	r3
   17232:	42b4      	cmp	r4, r6
   17234:	d1c3      	bne.n	171be <bsd_os_application_irq_handler+0x22>
   17236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1723a:	2300      	movs	r3, #0
   1723c:	e7ec      	b.n	17218 <bsd_os_application_irq_handler+0x7c>
   1723e:	2301      	movs	r3, #1
   17240:	e7ea      	b.n	17218 <bsd_os_application_irq_handler+0x7c>
   17242:	2302      	movs	r3, #2
   17244:	e7e8      	b.n	17218 <bsd_os_application_irq_handler+0x7c>
   17246:	2303      	movs	r3, #3
   17248:	e7e6      	b.n	17218 <bsd_os_application_irq_handler+0x7c>
   1724a:	2802      	cmp	r0, #2
   1724c:	bf0a      	itet	eq
   1724e:	2304      	moveq	r3, #4
   17250:	f804 8c04 	strbne.w	r8, [r4, #-4]
   17254:	f804 3c04 	strbeq.w	r3, [r4, #-4]
   17258:	e7ae      	b.n	171b8 <bsd_os_application_irq_handler+0x1c>
   1725a:	2304      	movs	r3, #4
   1725c:	e7dc      	b.n	17218 <bsd_os_application_irq_handler+0x7c>
   1725e:	2305      	movs	r3, #5
   17260:	e7da      	b.n	17218 <bsd_os_application_irq_handler+0x7c>
   17262:	2306      	movs	r3, #6
   17264:	e7d8      	b.n	17218 <bsd_os_application_irq_handler+0x7c>
   17266:	2307      	movs	r3, #7
   17268:	e7d6      	b.n	17218 <bsd_os_application_irq_handler+0x7c>
   1726a:	2308      	movs	r3, #8
   1726c:	e7d4      	b.n	17218 <bsd_os_application_irq_handler+0x7c>
   1726e:	bf00      	nop
   17270:	20020bac 	.word	0x20020bac
   17274:	20020a70 	.word	0x20020a70
   17278:	20020b10 	.word	0x20020b10

0001727c <rpc_framework_init>:
   1727c:	b508      	push	{r3, lr}
   1727e:	22a0      	movs	r2, #160	; 0xa0
   17280:	2100      	movs	r1, #0
   17282:	4802      	ldr	r0, [pc, #8]	; (1728c <rpc_framework_init+0x10>)
   17284:	f006 fb14 	bl	1d8b0 <memset>
   17288:	2000      	movs	r0, #0
   1728a:	bd08      	pop	{r3, pc}
   1728c:	20020a70 	.word	0x20020a70

00017290 <rpc_client_register>:
   17290:	8803      	ldrh	r3, [r0, #0]
   17292:	2b00      	cmp	r3, #0
   17294:	d045      	beq.n	17322 <rpc_client_register+0x92>
   17296:	6842      	ldr	r2, [r0, #4]
   17298:	4601      	mov	r1, r0
   1729a:	2a00      	cmp	r2, #0
   1729c:	d050      	beq.n	17340 <rpc_client_register+0xb0>
   1729e:	4a30      	ldr	r2, [pc, #192]	; (17360 <rpc_client_register+0xd0>)
   172a0:	8810      	ldrh	r0, [r2, #0]
   172a2:	4283      	cmp	r3, r0
   172a4:	d03d      	beq.n	17322 <rpc_client_register+0x92>
   172a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   172aa:	8a14      	ldrh	r4, [r2, #16]
   172ac:	42a3      	cmp	r3, r4
   172ae:	d035      	beq.n	1731c <rpc_client_register+0x8c>
   172b0:	8c15      	ldrh	r5, [r2, #32]
   172b2:	42ab      	cmp	r3, r5
   172b4:	d032      	beq.n	1731c <rpc_client_register+0x8c>
   172b6:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   172b8:	42b3      	cmp	r3, r6
   172ba:	d02f      	beq.n	1731c <rpc_client_register+0x8c>
   172bc:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   172c0:	42bb      	cmp	r3, r7
   172c2:	d02b      	beq.n	1731c <rpc_client_register+0x8c>
   172c4:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   172c8:	4563      	cmp	r3, ip
   172ca:	d027      	beq.n	1731c <rpc_client_register+0x8c>
   172cc:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   172d0:	4573      	cmp	r3, lr
   172d2:	d023      	beq.n	1731c <rpc_client_register+0x8c>
   172d4:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   172d8:	4543      	cmp	r3, r8
   172da:	d01f      	beq.n	1731c <rpc_client_register+0x8c>
   172dc:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   172e0:	454b      	cmp	r3, r9
   172e2:	d01b      	beq.n	1731c <rpc_client_register+0x8c>
   172e4:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   172e8:	4553      	cmp	r3, sl
   172ea:	d017      	beq.n	1731c <rpc_client_register+0x8c>
   172ec:	b1e0      	cbz	r0, 17328 <rpc_client_register+0x98>
   172ee:	b35c      	cbz	r4, 17348 <rpc_client_register+0xb8>
   172f0:	b365      	cbz	r5, 1734c <rpc_client_register+0xbc>
   172f2:	b36e      	cbz	r6, 17350 <rpc_client_register+0xc0>
   172f4:	b377      	cbz	r7, 17354 <rpc_client_register+0xc4>
   172f6:	f1bc 0f00 	cmp.w	ip, #0
   172fa:	d02d      	beq.n	17358 <rpc_client_register+0xc8>
   172fc:	f1be 0f00 	cmp.w	lr, #0
   17300:	d020      	beq.n	17344 <rpc_client_register+0xb4>
   17302:	f1b8 0f00 	cmp.w	r8, #0
   17306:	d029      	beq.n	1735c <rpc_client_register+0xcc>
   17308:	f1b9 0f00 	cmp.w	r9, #0
   1730c:	d00b      	beq.n	17326 <rpc_client_register+0x96>
   1730e:	2009      	movs	r0, #9
   17310:	f1ba 0f00 	cmp.w	sl, #0
   17314:	d008      	beq.n	17328 <rpc_client_register+0x98>
   17316:	2004      	movs	r0, #4
   17318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1731c:	2007      	movs	r0, #7
   1731e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17322:	2007      	movs	r0, #7
   17324:	4770      	bx	lr
   17326:	2008      	movs	r0, #8
   17328:	0100      	lsls	r0, r0, #4
   1732a:	5213      	strh	r3, [r2, r0]
   1732c:	684b      	ldr	r3, [r1, #4]
   1732e:	4402      	add	r2, r0
   17330:	6053      	str	r3, [r2, #4]
   17332:	688b      	ldr	r3, [r1, #8]
   17334:	2000      	movs	r0, #0
   17336:	6093      	str	r3, [r2, #8]
   17338:	68cb      	ldr	r3, [r1, #12]
   1733a:	60d3      	str	r3, [r2, #12]
   1733c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17340:	200e      	movs	r0, #14
   17342:	4770      	bx	lr
   17344:	2006      	movs	r0, #6
   17346:	e7ef      	b.n	17328 <rpc_client_register+0x98>
   17348:	2001      	movs	r0, #1
   1734a:	e7ed      	b.n	17328 <rpc_client_register+0x98>
   1734c:	2002      	movs	r0, #2
   1734e:	e7eb      	b.n	17328 <rpc_client_register+0x98>
   17350:	2003      	movs	r0, #3
   17352:	e7e9      	b.n	17328 <rpc_client_register+0x98>
   17354:	2004      	movs	r0, #4
   17356:	e7e7      	b.n	17328 <rpc_client_register+0x98>
   17358:	2005      	movs	r0, #5
   1735a:	e7e5      	b.n	17328 <rpc_client_register+0x98>
   1735c:	2007      	movs	r0, #7
   1735e:	e7e3      	b.n	17328 <rpc_client_register+0x98>
   17360:	20020a70 	.word	0x20020a70

00017364 <rpc_transport_input>:
   17364:	b538      	push	{r3, r4, r5, lr}
   17366:	4a82      	ldr	r2, [pc, #520]	; (17570 <rpc_transport_input+0x20c>)
   17368:	680b      	ldr	r3, [r1, #0]
   1736a:	8810      	ldrh	r0, [r2, #0]
   1736c:	b29b      	uxth	r3, r3
   1736e:	4298      	cmp	r0, r3
   17370:	d027      	beq.n	173c2 <rpc_transport_input+0x5e>
   17372:	8a10      	ldrh	r0, [r2, #16]
   17374:	4298      	cmp	r0, r3
   17376:	d024      	beq.n	173c2 <rpc_transport_input+0x5e>
   17378:	8c10      	ldrh	r0, [r2, #32]
   1737a:	4298      	cmp	r0, r3
   1737c:	d021      	beq.n	173c2 <rpc_transport_input+0x5e>
   1737e:	8e10      	ldrh	r0, [r2, #48]	; 0x30
   17380:	4298      	cmp	r0, r3
   17382:	d01e      	beq.n	173c2 <rpc_transport_input+0x5e>
   17384:	f8b2 0040 	ldrh.w	r0, [r2, #64]	; 0x40
   17388:	4298      	cmp	r0, r3
   1738a:	d01a      	beq.n	173c2 <rpc_transport_input+0x5e>
   1738c:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
   17390:	4298      	cmp	r0, r3
   17392:	d016      	beq.n	173c2 <rpc_transport_input+0x5e>
   17394:	f8b2 0060 	ldrh.w	r0, [r2, #96]	; 0x60
   17398:	4298      	cmp	r0, r3
   1739a:	d012      	beq.n	173c2 <rpc_transport_input+0x5e>
   1739c:	f8b2 0070 	ldrh.w	r0, [r2, #112]	; 0x70
   173a0:	4298      	cmp	r0, r3
   173a2:	d00e      	beq.n	173c2 <rpc_transport_input+0x5e>
   173a4:	f8b2 0080 	ldrh.w	r0, [r2, #128]	; 0x80
   173a8:	4298      	cmp	r0, r3
   173aa:	d00a      	beq.n	173c2 <rpc_transport_input+0x5e>
   173ac:	f8b2 2090 	ldrh.w	r2, [r2, #144]	; 0x90
   173b0:	429a      	cmp	r2, r3
   173b2:	d006      	beq.n	173c2 <rpc_transport_input+0x5e>
   173b4:	6888      	ldr	r0, [r1, #8]
   173b6:	b118      	cbz	r0, 173c0 <rpc_transport_input+0x5c>
   173b8:	4b6e      	ldr	r3, [pc, #440]	; (17574 <rpc_transport_input+0x210>)
   173ba:	691b      	ldr	r3, [r3, #16]
   173bc:	4798      	blx	r3
   173be:	2000      	movs	r0, #0
   173c0:	bd38      	pop	{r3, r4, r5, pc}
   173c2:	6888      	ldr	r0, [r1, #8]
   173c4:	2800      	cmp	r0, #0
   173c6:	f000 8098 	beq.w	174fa <rpc_transport_input+0x196>
   173ca:	4a6b      	ldr	r2, [pc, #428]	; (17578 <rpc_transport_input+0x214>)
   173cc:	6814      	ldr	r4, [r2, #0]
   173ce:	2c00      	cmp	r4, #0
   173d0:	d03c      	beq.n	1744c <rpc_transport_input+0xe8>
   173d2:	6894      	ldr	r4, [r2, #8]
   173d4:	2c00      	cmp	r4, #0
   173d6:	f000 809a 	beq.w	1750e <rpc_transport_input+0x1aa>
   173da:	6914      	ldr	r4, [r2, #16]
   173dc:	2c00      	cmp	r4, #0
   173de:	f000 809a 	beq.w	17516 <rpc_transport_input+0x1b2>
   173e2:	6994      	ldr	r4, [r2, #24]
   173e4:	2c00      	cmp	r4, #0
   173e6:	f000 809a 	beq.w	1751e <rpc_transport_input+0x1ba>
   173ea:	6a14      	ldr	r4, [r2, #32]
   173ec:	2c00      	cmp	r4, #0
   173ee:	f000 809a 	beq.w	17526 <rpc_transport_input+0x1c2>
   173f2:	6a94      	ldr	r4, [r2, #40]	; 0x28
   173f4:	2c00      	cmp	r4, #0
   173f6:	f000 8084 	beq.w	17502 <rpc_transport_input+0x19e>
   173fa:	6b14      	ldr	r4, [r2, #48]	; 0x30
   173fc:	2c00      	cmp	r4, #0
   173fe:	f000 8098 	beq.w	17532 <rpc_transport_input+0x1ce>
   17402:	6b94      	ldr	r4, [r2, #56]	; 0x38
   17404:	2c00      	cmp	r4, #0
   17406:	f000 8096 	beq.w	17536 <rpc_transport_input+0x1d2>
   1740a:	6c14      	ldr	r4, [r2, #64]	; 0x40
   1740c:	2c00      	cmp	r4, #0
   1740e:	f000 8096 	beq.w	1753e <rpc_transport_input+0x1da>
   17412:	6c94      	ldr	r4, [r2, #72]	; 0x48
   17414:	2c00      	cmp	r4, #0
   17416:	f000 8096 	beq.w	17546 <rpc_transport_input+0x1e2>
   1741a:	6d14      	ldr	r4, [r2, #80]	; 0x50
   1741c:	2c00      	cmp	r4, #0
   1741e:	f000 8096 	beq.w	1754e <rpc_transport_input+0x1ea>
   17422:	6d94      	ldr	r4, [r2, #88]	; 0x58
   17424:	2c00      	cmp	r4, #0
   17426:	f000 8098 	beq.w	1755a <rpc_transport_input+0x1f6>
   1742a:	6e14      	ldr	r4, [r2, #96]	; 0x60
   1742c:	2c00      	cmp	r4, #0
   1742e:	f000 8098 	beq.w	17562 <rpc_transport_input+0x1fe>
   17432:	6e94      	ldr	r4, [r2, #104]	; 0x68
   17434:	2c00      	cmp	r4, #0
   17436:	f000 8096 	beq.w	17566 <rpc_transport_input+0x202>
   1743a:	6f14      	ldr	r4, [r2, #112]	; 0x70
   1743c:	2c00      	cmp	r4, #0
   1743e:	f000 8094 	beq.w	1756a <rpc_transport_input+0x206>
   17442:	6f94      	ldr	r4, [r2, #120]	; 0x78
   17444:	b10c      	cbz	r4, 1744a <rpc_transport_input+0xe6>
   17446:	2001      	movs	r0, #1
   17448:	bd38      	pop	{r3, r4, r5, pc}
   1744a:	240f      	movs	r4, #15
   1744c:	eb02 05c4 	add.w	r5, r2, r4, lsl #3
   17450:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
   17454:	80ab      	strh	r3, [r5, #4]
   17456:	4b49      	ldr	r3, [pc, #292]	; (1757c <rpc_transport_input+0x218>)
   17458:	781a      	ldrb	r2, [r3, #0]
   1745a:	2a01      	cmp	r2, #1
   1745c:	d053      	beq.n	17506 <rpc_transport_input+0x1a2>
   1745e:	7a1a      	ldrb	r2, [r3, #8]
   17460:	2a01      	cmp	r2, #1
   17462:	d041      	beq.n	174e8 <rpc_transport_input+0x184>
   17464:	7c1a      	ldrb	r2, [r3, #16]
   17466:	2a01      	cmp	r2, #1
   17468:	d04f      	beq.n	1750a <rpc_transport_input+0x1a6>
   1746a:	7e1a      	ldrb	r2, [r3, #24]
   1746c:	2a01      	cmp	r2, #1
   1746e:	d050      	beq.n	17512 <rpc_transport_input+0x1ae>
   17470:	f893 2020 	ldrb.w	r2, [r3, #32]
   17474:	2a01      	cmp	r2, #1
   17476:	d050      	beq.n	1751a <rpc_transport_input+0x1b6>
   17478:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   1747c:	2a01      	cmp	r2, #1
   1747e:	d050      	beq.n	17522 <rpc_transport_input+0x1be>
   17480:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   17484:	2a01      	cmp	r2, #1
   17486:	d03a      	beq.n	174fe <rpc_transport_input+0x19a>
   17488:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   1748c:	2a01      	cmp	r2, #1
   1748e:	d04c      	beq.n	1752a <rpc_transport_input+0x1c6>
   17490:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   17494:	2a01      	cmp	r2, #1
   17496:	d04a      	beq.n	1752e <rpc_transport_input+0x1ca>
   17498:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   1749c:	2a01      	cmp	r2, #1
   1749e:	d04c      	beq.n	1753a <rpc_transport_input+0x1d6>
   174a0:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   174a4:	2a01      	cmp	r2, #1
   174a6:	d04c      	beq.n	17542 <rpc_transport_input+0x1de>
   174a8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   174ac:	2a01      	cmp	r2, #1
   174ae:	d04c      	beq.n	1754a <rpc_transport_input+0x1e6>
   174b0:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   174b4:	2a01      	cmp	r2, #1
   174b6:	d04c      	beq.n	17552 <rpc_transport_input+0x1ee>
   174b8:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   174bc:	2a01      	cmp	r2, #1
   174be:	d04a      	beq.n	17556 <rpc_transport_input+0x1f2>
   174c0:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   174c4:	2a01      	cmp	r2, #1
   174c6:	d04a      	beq.n	1755e <rpc_transport_input+0x1fa>
   174c8:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   174cc:	2a01      	cmp	r2, #1
   174ce:	d00a      	beq.n	174e6 <rpc_transport_input+0x182>
   174d0:	2c10      	cmp	r4, #16
   174d2:	d0b8      	beq.n	17446 <rpc_transport_input+0xe2>
   174d4:	2200      	movs	r2, #0
   174d6:	4b28      	ldr	r3, [pc, #160]	; (17578 <rpc_transport_input+0x214>)
   174d8:	2001      	movs	r0, #1
   174da:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
   174de:	808a      	strh	r2, [r1, #4]
   174e0:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
   174e4:	bd38      	pop	{r3, r4, r5, pc}
   174e6:	220f      	movs	r2, #15
   174e8:	2402      	movs	r4, #2
   174ea:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
   174ee:	f803 4032 	strb.w	r4, [r3, r2, lsl #3]
   174f2:	6041      	str	r1, [r0, #4]
   174f4:	f7f8 f988 	bl	f808 <bsd_os_application_irq_set>
   174f8:	e7a5      	b.n	17446 <rpc_transport_input+0xe2>
   174fa:	2410      	movs	r4, #16
   174fc:	e7ab      	b.n	17456 <rpc_transport_input+0xf2>
   174fe:	2206      	movs	r2, #6
   17500:	e7f2      	b.n	174e8 <rpc_transport_input+0x184>
   17502:	2405      	movs	r4, #5
   17504:	e7a2      	b.n	1744c <rpc_transport_input+0xe8>
   17506:	2200      	movs	r2, #0
   17508:	e7ee      	b.n	174e8 <rpc_transport_input+0x184>
   1750a:	2202      	movs	r2, #2
   1750c:	e7ec      	b.n	174e8 <rpc_transport_input+0x184>
   1750e:	2401      	movs	r4, #1
   17510:	e79c      	b.n	1744c <rpc_transport_input+0xe8>
   17512:	2203      	movs	r2, #3
   17514:	e7e8      	b.n	174e8 <rpc_transport_input+0x184>
   17516:	2402      	movs	r4, #2
   17518:	e798      	b.n	1744c <rpc_transport_input+0xe8>
   1751a:	2204      	movs	r2, #4
   1751c:	e7e4      	b.n	174e8 <rpc_transport_input+0x184>
   1751e:	2403      	movs	r4, #3
   17520:	e794      	b.n	1744c <rpc_transport_input+0xe8>
   17522:	2205      	movs	r2, #5
   17524:	e7e0      	b.n	174e8 <rpc_transport_input+0x184>
   17526:	2404      	movs	r4, #4
   17528:	e790      	b.n	1744c <rpc_transport_input+0xe8>
   1752a:	2207      	movs	r2, #7
   1752c:	e7dc      	b.n	174e8 <rpc_transport_input+0x184>
   1752e:	2208      	movs	r2, #8
   17530:	e7da      	b.n	174e8 <rpc_transport_input+0x184>
   17532:	2406      	movs	r4, #6
   17534:	e78a      	b.n	1744c <rpc_transport_input+0xe8>
   17536:	2407      	movs	r4, #7
   17538:	e788      	b.n	1744c <rpc_transport_input+0xe8>
   1753a:	2209      	movs	r2, #9
   1753c:	e7d4      	b.n	174e8 <rpc_transport_input+0x184>
   1753e:	2408      	movs	r4, #8
   17540:	e784      	b.n	1744c <rpc_transport_input+0xe8>
   17542:	220a      	movs	r2, #10
   17544:	e7d0      	b.n	174e8 <rpc_transport_input+0x184>
   17546:	2409      	movs	r4, #9
   17548:	e780      	b.n	1744c <rpc_transport_input+0xe8>
   1754a:	220b      	movs	r2, #11
   1754c:	e7cc      	b.n	174e8 <rpc_transport_input+0x184>
   1754e:	240a      	movs	r4, #10
   17550:	e77c      	b.n	1744c <rpc_transport_input+0xe8>
   17552:	220c      	movs	r2, #12
   17554:	e7c8      	b.n	174e8 <rpc_transport_input+0x184>
   17556:	220d      	movs	r2, #13
   17558:	e7c6      	b.n	174e8 <rpc_transport_input+0x184>
   1755a:	240b      	movs	r4, #11
   1755c:	e776      	b.n	1744c <rpc_transport_input+0xe8>
   1755e:	220e      	movs	r2, #14
   17560:	e7c2      	b.n	174e8 <rpc_transport_input+0x184>
   17562:	240c      	movs	r4, #12
   17564:	e772      	b.n	1744c <rpc_transport_input+0xe8>
   17566:	240d      	movs	r4, #13
   17568:	e770      	b.n	1744c <rpc_transport_input+0xe8>
   1756a:	240e      	movs	r4, #14
   1756c:	e76e      	b.n	1744c <rpc_transport_input+0xe8>
   1756e:	bf00      	nop
   17570:	20020a70 	.word	0x20020a70
   17574:	20020b10 	.word	0x20020b10
   17578:	20020b28 	.word	0x20020b28
   1757c:	20020ba8 	.word	0x20020ba8

00017580 <rpc_transport_register>:
   17580:	b4f0      	push	{r4, r5, r6, r7}
   17582:	2900      	cmp	r1, #0
   17584:	d052      	beq.n	1762c <rpc_transport_register+0xac>
   17586:	2800      	cmp	r0, #0
   17588:	d050      	beq.n	1762c <rpc_transport_register+0xac>
   1758a:	6883      	ldr	r3, [r0, #8]
   1758c:	2b00      	cmp	r3, #0
   1758e:	d04d      	beq.n	1762c <rpc_transport_register+0xac>
   17590:	6903      	ldr	r3, [r0, #16]
   17592:	2b00      	cmp	r3, #0
   17594:	d04a      	beq.n	1762c <rpc_transport_register+0xac>
   17596:	6843      	ldr	r3, [r0, #4]
   17598:	2b00      	cmp	r3, #0
   1759a:	d047      	beq.n	1762c <rpc_transport_register+0xac>
   1759c:	68c3      	ldr	r3, [r0, #12]
   1759e:	2b00      	cmp	r3, #0
   175a0:	d044      	beq.n	1762c <rpc_transport_register+0xac>
   175a2:	6803      	ldr	r3, [r0, #0]
   175a4:	2b00      	cmp	r3, #0
   175a6:	d041      	beq.n	1762c <rpc_transport_register+0xac>
   175a8:	6943      	ldr	r3, [r0, #20]
   175aa:	2b00      	cmp	r3, #0
   175ac:	d03e      	beq.n	1762c <rpc_transport_register+0xac>
   175ae:	2601      	movs	r6, #1
   175b0:	2500      	movs	r5, #0
   175b2:	4604      	mov	r4, r0
   175b4:	460f      	mov	r7, r1
   175b6:	4a1f      	ldr	r2, [pc, #124]	; (17634 <rpc_transport_register+0xb4>)
   175b8:	4b1f      	ldr	r3, [pc, #124]	; (17638 <rpc_transport_register+0xb8>)
   175ba:	f8df c080 	ldr.w	ip, [pc, #128]	; 1763c <rpc_transport_register+0xbc>
   175be:	7416      	strb	r6, [r2, #16]
   175c0:	7616      	strb	r6, [r2, #24]
   175c2:	f882 6020 	strb.w	r6, [r2, #32]
   175c6:	f882 6028 	strb.w	r6, [r2, #40]	; 0x28
   175ca:	f882 6030 	strb.w	r6, [r2, #48]	; 0x30
   175ce:	f882 6038 	strb.w	r6, [r2, #56]	; 0x38
   175d2:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
   175d6:	f882 6048 	strb.w	r6, [r2, #72]	; 0x48
   175da:	f882 6050 	strb.w	r6, [r2, #80]	; 0x50
   175de:	f882 6058 	strb.w	r6, [r2, #88]	; 0x58
   175e2:	f882 6060 	strb.w	r6, [r2, #96]	; 0x60
   175e6:	f882 6068 	strb.w	r6, [r2, #104]	; 0x68
   175ea:	f882 6070 	strb.w	r6, [r2, #112]	; 0x70
   175ee:	f882 6078 	strb.w	r6, [r2, #120]	; 0x78
   175f2:	611d      	str	r5, [r3, #16]
   175f4:	619d      	str	r5, [r3, #24]
   175f6:	621d      	str	r5, [r3, #32]
   175f8:	629d      	str	r5, [r3, #40]	; 0x28
   175fa:	631d      	str	r5, [r3, #48]	; 0x30
   175fc:	639d      	str	r5, [r3, #56]	; 0x38
   175fe:	641d      	str	r5, [r3, #64]	; 0x40
   17600:	649d      	str	r5, [r3, #72]	; 0x48
   17602:	651d      	str	r5, [r3, #80]	; 0x50
   17604:	659d      	str	r5, [r3, #88]	; 0x58
   17606:	661d      	str	r5, [r3, #96]	; 0x60
   17608:	669d      	str	r5, [r3, #104]	; 0x68
   1760a:	671d      	str	r5, [r3, #112]	; 0x70
   1760c:	679d      	str	r5, [r3, #120]	; 0x78
   1760e:	7016      	strb	r6, [r2, #0]
   17610:	7216      	strb	r6, [r2, #8]
   17612:	601d      	str	r5, [r3, #0]
   17614:	609d      	str	r5, [r3, #8]
   17616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   17618:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1761c:	e894 0003 	ldmia.w	r4, {r0, r1}
   17620:	e88c 0003 	stmia.w	ip, {r0, r1}
   17624:	603e      	str	r6, [r7, #0]
   17626:	4628      	mov	r0, r5
   17628:	bcf0      	pop	{r4, r5, r6, r7}
   1762a:	4770      	bx	lr
   1762c:	250e      	movs	r5, #14
   1762e:	4628      	mov	r0, r5
   17630:	bcf0      	pop	{r4, r5, r6, r7}
   17632:	4770      	bx	lr
   17634:	20020ba8 	.word	0x20020ba8
   17638:	20020b28 	.word	0x20020b28
   1763c:	20020b10 	.word	0x20020b10

00017640 <rpc_transport_unregister>:
   17640:	2800      	cmp	r0, #0
   17642:	d03a      	beq.n	176ba <rpc_transport_unregister+0x7a>
   17644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17648:	4680      	mov	r8, r0
   1764a:	4c1d      	ldr	r4, [pc, #116]	; (176c0 <rpc_transport_unregister+0x80>)
   1764c:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
   17650:	68a3      	ldr	r3, [r4, #8]
   17652:	3410      	adds	r4, #16
   17654:	b103      	cbz	r3, 17658 <rpc_transport_unregister+0x18>
   17656:	4798      	blx	r3
   17658:	42ac      	cmp	r4, r5
   1765a:	d1f9      	bne.n	17650 <rpc_transport_unregister+0x10>
   1765c:	f04f 0901 	mov.w	r9, #1
   17660:	2600      	movs	r6, #0
   17662:	4c18      	ldr	r4, [pc, #96]	; (176c4 <rpc_transport_unregister+0x84>)
   17664:	4d18      	ldr	r5, [pc, #96]	; (176c8 <rpc_transport_unregister+0x88>)
   17666:	f8df a064 	ldr.w	sl, [pc, #100]	; 176cc <rpc_transport_unregister+0x8c>
   1766a:	f104 0780 	add.w	r7, r4, #128	; 0x80
   1766e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   17672:	2b01      	cmp	r3, #1
   17674:	d005      	beq.n	17682 <rpc_transport_unregister+0x42>
   17676:	f8da 300c 	ldr.w	r3, [sl, #12]
   1767a:	6820      	ldr	r0, [r4, #0]
   1767c:	4798      	blx	r3
   1767e:	f804 9c04 	strb.w	r9, [r4, #-4]
   17682:	f855 0c04 	ldr.w	r0, [r5, #-4]
   17686:	3408      	adds	r4, #8
   17688:	b128      	cbz	r0, 17696 <rpc_transport_unregister+0x56>
   1768a:	f8da 3010 	ldr.w	r3, [sl, #16]
   1768e:	4798      	blx	r3
   17690:	802e      	strh	r6, [r5, #0]
   17692:	f845 6c04 	str.w	r6, [r5, #-4]
   17696:	42bc      	cmp	r4, r7
   17698:	f105 0508 	add.w	r5, r5, #8
   1769c:	d1e7      	bne.n	1766e <rpc_transport_unregister+0x2e>
   1769e:	f8d8 0000 	ldr.w	r0, [r8]
   176a2:	2218      	movs	r2, #24
   176a4:	3801      	subs	r0, #1
   176a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   176aa:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
   176ae:	2100      	movs	r1, #0
   176b0:	f006 f8fe 	bl	1d8b0 <memset>
   176b4:	2000      	movs	r0, #0
   176b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   176ba:	200e      	movs	r0, #14
   176bc:	4770      	bx	lr
   176be:	bf00      	nop
   176c0:	20020a70 	.word	0x20020a70
   176c4:	20020bac 	.word	0x20020bac
   176c8:	20020b2c 	.word	0x20020b2c
   176cc:	20020b10 	.word	0x20020b10

000176d0 <rpc_message_send>:
   176d0:	b168      	cbz	r0, 176ee <rpc_message_send+0x1e>
   176d2:	b171      	cbz	r1, 176f2 <rpc_message_send+0x22>
   176d4:	4a09      	ldr	r2, [pc, #36]	; (176fc <rpc_message_send+0x2c>)
   176d6:	6853      	ldr	r3, [r2, #4]
   176d8:	b16b      	cbz	r3, 176f6 <rpc_message_send+0x26>
   176da:	684b      	ldr	r3, [r1, #4]
   176dc:	8008      	strh	r0, [r1, #0]
   176de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   176e2:	f043 0302 	orr.w	r3, r3, #2
   176e6:	6812      	ldr	r2, [r2, #0]
   176e8:	604b      	str	r3, [r1, #4]
   176ea:	4608      	mov	r0, r1
   176ec:	4710      	bx	r2
   176ee:	2007      	movs	r0, #7
   176f0:	4770      	bx	lr
   176f2:	200e      	movs	r0, #14
   176f4:	4770      	bx	lr
   176f6:	2008      	movs	r0, #8
   176f8:	4770      	bx	lr
   176fa:	bf00      	nop
   176fc:	20020b10 	.word	0x20020b10

00017700 <rpc_message_alloc>:
   17700:	b35a      	cbz	r2, 1775a <rpc_message_alloc+0x5a>
   17702:	b330      	cbz	r0, 17752 <rpc_message_alloc+0x52>
   17704:	2300      	movs	r3, #0
   17706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1770a:	4f15      	ldr	r7, [pc, #84]	; (17760 <rpc_message_alloc+0x60>)
   1770c:	6013      	str	r3, [r2, #0]
   1770e:	687b      	ldr	r3, [r7, #4]
   17710:	b30b      	cbz	r3, 17756 <rpc_message_alloc+0x56>
   17712:	4615      	mov	r5, r2
   17714:	460c      	mov	r4, r1
   17716:	4606      	mov	r6, r0
   17718:	b959      	cbnz	r1, 17732 <rpc_message_alloc+0x32>
   1771a:	4798      	blx	r3
   1771c:	4603      	mov	r3, r0
   1771e:	b1a8      	cbz	r0, 1774c <rpc_message_alloc+0x4c>
   17720:	46a0      	mov	r8, r4
   17722:	60dc      	str	r4, [r3, #12]
   17724:	f8c3 8008 	str.w	r8, [r3, #8]
   17728:	801e      	strh	r6, [r3, #0]
   1772a:	602b      	str	r3, [r5, #0]
   1772c:	2000      	movs	r0, #0
   1772e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17732:	68bb      	ldr	r3, [r7, #8]
   17734:	4608      	mov	r0, r1
   17736:	4798      	blx	r3
   17738:	4680      	mov	r8, r0
   1773a:	b138      	cbz	r0, 1774c <rpc_message_alloc+0x4c>
   1773c:	687b      	ldr	r3, [r7, #4]
   1773e:	4798      	blx	r3
   17740:	4603      	mov	r3, r0
   17742:	2800      	cmp	r0, #0
   17744:	d1ed      	bne.n	17722 <rpc_message_alloc+0x22>
   17746:	693b      	ldr	r3, [r7, #16]
   17748:	4640      	mov	r0, r8
   1774a:	4798      	blx	r3
   1774c:	2004      	movs	r0, #4
   1774e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17752:	2007      	movs	r0, #7
   17754:	4770      	bx	lr
   17756:	2008      	movs	r0, #8
   17758:	e7f9      	b.n	1774e <rpc_message_alloc+0x4e>
   1775a:	200e      	movs	r0, #14
   1775c:	4770      	bx	lr
   1775e:	bf00      	nop
   17760:	20020b10 	.word	0x20020b10

00017764 <rpc_message_free>:
   17764:	2800      	cmp	r0, #0
   17766:	f000 808c 	beq.w	17882 <rpc_message_free+0x11e>
   1776a:	2900      	cmp	r1, #0
   1776c:	f000 80e9 	beq.w	17942 <rpc_message_free+0x1de>
   17770:	b538      	push	{r3, r4, r5, lr}
   17772:	4a83      	ldr	r2, [pc, #524]	; (17980 <rpc_message_free+0x21c>)
   17774:	6853      	ldr	r3, [r2, #4]
   17776:	2b00      	cmp	r3, #0
   17778:	f000 8085 	beq.w	17886 <rpc_message_free+0x122>
   1777c:	4c81      	ldr	r4, [pc, #516]	; (17984 <rpc_message_free+0x220>)
   1777e:	4608      	mov	r0, r1
   17780:	6863      	ldr	r3, [r4, #4]
   17782:	4299      	cmp	r1, r3
   17784:	f000 8085 	beq.w	17892 <rpc_message_free+0x12e>
   17788:	68e3      	ldr	r3, [r4, #12]
   1778a:	4298      	cmp	r0, r3
   1778c:	f000 808e 	beq.w	178ac <rpc_message_free+0x148>
   17790:	6963      	ldr	r3, [r4, #20]
   17792:	4298      	cmp	r0, r3
   17794:	f000 8090 	beq.w	178b8 <rpc_message_free+0x154>
   17798:	69e3      	ldr	r3, [r4, #28]
   1779a:	4298      	cmp	r0, r3
   1779c:	f000 8092 	beq.w	178c4 <rpc_message_free+0x160>
   177a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   177a2:	4298      	cmp	r0, r3
   177a4:	f000 8095 	beq.w	178d2 <rpc_message_free+0x16e>
   177a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   177aa:	4298      	cmp	r0, r3
   177ac:	f000 8098 	beq.w	178e0 <rpc_message_free+0x17c>
   177b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   177b2:	4298      	cmp	r0, r3
   177b4:	f000 809b 	beq.w	178ee <rpc_message_free+0x18a>
   177b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   177ba:	4298      	cmp	r0, r3
   177bc:	f000 809e 	beq.w	178fc <rpc_message_free+0x198>
   177c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   177c2:	4298      	cmp	r0, r3
   177c4:	f000 80a1 	beq.w	1790a <rpc_message_free+0x1a6>
   177c8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   177ca:	4298      	cmp	r0, r3
   177cc:	f000 80a4 	beq.w	17918 <rpc_message_free+0x1b4>
   177d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   177d2:	4298      	cmp	r0, r3
   177d4:	f000 80a7 	beq.w	17926 <rpc_message_free+0x1c2>
   177d8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   177da:	4298      	cmp	r0, r3
   177dc:	f000 80aa 	beq.w	17934 <rpc_message_free+0x1d0>
   177e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   177e2:	4298      	cmp	r0, r3
   177e4:	f000 80af 	beq.w	17946 <rpc_message_free+0x1e2>
   177e8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   177ea:	4298      	cmp	r0, r3
   177ec:	f000 80b2 	beq.w	17954 <rpc_message_free+0x1f0>
   177f0:	6f63      	ldr	r3, [r4, #116]	; 0x74
   177f2:	4298      	cmp	r0, r3
   177f4:	f000 80b5 	beq.w	17962 <rpc_message_free+0x1fe>
   177f8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   177fa:	4283      	cmp	r3, r0
   177fc:	f000 80b8 	beq.w	17970 <rpc_message_free+0x20c>
   17800:	68d3      	ldr	r3, [r2, #12]
   17802:	4798      	blx	r3
   17804:	7823      	ldrb	r3, [r4, #0]
   17806:	2b04      	cmp	r3, #4
   17808:	d03f      	beq.n	1788a <rpc_message_free+0x126>
   1780a:	7a23      	ldrb	r3, [r4, #8]
   1780c:	2b04      	cmp	r3, #4
   1780e:	d03c      	beq.n	1788a <rpc_message_free+0x126>
   17810:	7c23      	ldrb	r3, [r4, #16]
   17812:	2b04      	cmp	r3, #4
   17814:	d039      	beq.n	1788a <rpc_message_free+0x126>
   17816:	7e23      	ldrb	r3, [r4, #24]
   17818:	2b04      	cmp	r3, #4
   1781a:	d036      	beq.n	1788a <rpc_message_free+0x126>
   1781c:	f894 3020 	ldrb.w	r3, [r4, #32]
   17820:	2b04      	cmp	r3, #4
   17822:	d032      	beq.n	1788a <rpc_message_free+0x126>
   17824:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   17828:	2b04      	cmp	r3, #4
   1782a:	d02e      	beq.n	1788a <rpc_message_free+0x126>
   1782c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   17830:	2b04      	cmp	r3, #4
   17832:	d02a      	beq.n	1788a <rpc_message_free+0x126>
   17834:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   17838:	2b04      	cmp	r3, #4
   1783a:	d026      	beq.n	1788a <rpc_message_free+0x126>
   1783c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   17840:	2b04      	cmp	r3, #4
   17842:	d022      	beq.n	1788a <rpc_message_free+0x126>
   17844:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   17848:	2b04      	cmp	r3, #4
   1784a:	d01e      	beq.n	1788a <rpc_message_free+0x126>
   1784c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   17850:	2b04      	cmp	r3, #4
   17852:	d01a      	beq.n	1788a <rpc_message_free+0x126>
   17854:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   17858:	2b04      	cmp	r3, #4
   1785a:	d016      	beq.n	1788a <rpc_message_free+0x126>
   1785c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   17860:	2b04      	cmp	r3, #4
   17862:	d012      	beq.n	1788a <rpc_message_free+0x126>
   17864:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   17868:	2b04      	cmp	r3, #4
   1786a:	d00e      	beq.n	1788a <rpc_message_free+0x126>
   1786c:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   17870:	2b04      	cmp	r3, #4
   17872:	d00a      	beq.n	1788a <rpc_message_free+0x126>
   17874:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   17878:	2b04      	cmp	r3, #4
   1787a:	bf18      	it	ne
   1787c:	2000      	movne	r0, #0
   1787e:	d004      	beq.n	1788a <rpc_message_free+0x126>
   17880:	bd38      	pop	{r3, r4, r5, pc}
   17882:	2007      	movs	r0, #7
   17884:	4770      	bx	lr
   17886:	2008      	movs	r0, #8
   17888:	bd38      	pop	{r3, r4, r5, pc}
   1788a:	f7f7 ffbd 	bl	f808 <bsd_os_application_irq_set>
   1788e:	2000      	movs	r0, #0
   17890:	bd38      	pop	{r3, r4, r5, pc}
   17892:	7821      	ldrb	r1, [r4, #0]
   17894:	2903      	cmp	r1, #3
   17896:	f47f af77 	bne.w	17788 <rpc_message_free+0x24>
   1789a:	2100      	movs	r1, #0
   1789c:	2501      	movs	r5, #1
   1789e:	4618      	mov	r0, r3
   178a0:	68d2      	ldr	r2, [r2, #12]
   178a2:	f804 5031 	strb.w	r5, [r4, r1, lsl #3]
   178a6:	4790      	blx	r2
   178a8:	2000      	movs	r0, #0
   178aa:	bd38      	pop	{r3, r4, r5, pc}
   178ac:	7a21      	ldrb	r1, [r4, #8]
   178ae:	2903      	cmp	r1, #3
   178b0:	f47f af6e 	bne.w	17790 <rpc_message_free+0x2c>
   178b4:	2101      	movs	r1, #1
   178b6:	e7f1      	b.n	1789c <rpc_message_free+0x138>
   178b8:	7c21      	ldrb	r1, [r4, #16]
   178ba:	2903      	cmp	r1, #3
   178bc:	f47f af6c 	bne.w	17798 <rpc_message_free+0x34>
   178c0:	2102      	movs	r1, #2
   178c2:	e7eb      	b.n	1789c <rpc_message_free+0x138>
   178c4:	7e21      	ldrb	r1, [r4, #24]
   178c6:	2903      	cmp	r1, #3
   178c8:	d0e8      	beq.n	1789c <rpc_message_free+0x138>
   178ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
   178cc:	4298      	cmp	r0, r3
   178ce:	f47f af6b 	bne.w	177a8 <rpc_message_free+0x44>
   178d2:	f894 1020 	ldrb.w	r1, [r4, #32]
   178d6:	2903      	cmp	r1, #3
   178d8:	f47f af66 	bne.w	177a8 <rpc_message_free+0x44>
   178dc:	2104      	movs	r1, #4
   178de:	e7dd      	b.n	1789c <rpc_message_free+0x138>
   178e0:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   178e4:	2903      	cmp	r1, #3
   178e6:	f47f af63 	bne.w	177b0 <rpc_message_free+0x4c>
   178ea:	2105      	movs	r1, #5
   178ec:	e7d6      	b.n	1789c <rpc_message_free+0x138>
   178ee:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
   178f2:	2903      	cmp	r1, #3
   178f4:	f47f af60 	bne.w	177b8 <rpc_message_free+0x54>
   178f8:	2106      	movs	r1, #6
   178fa:	e7cf      	b.n	1789c <rpc_message_free+0x138>
   178fc:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   17900:	2903      	cmp	r1, #3
   17902:	f47f af5d 	bne.w	177c0 <rpc_message_free+0x5c>
   17906:	2107      	movs	r1, #7
   17908:	e7c8      	b.n	1789c <rpc_message_free+0x138>
   1790a:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   1790e:	2903      	cmp	r1, #3
   17910:	f47f af5a 	bne.w	177c8 <rpc_message_free+0x64>
   17914:	2108      	movs	r1, #8
   17916:	e7c1      	b.n	1789c <rpc_message_free+0x138>
   17918:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
   1791c:	2903      	cmp	r1, #3
   1791e:	f47f af57 	bne.w	177d0 <rpc_message_free+0x6c>
   17922:	2109      	movs	r1, #9
   17924:	e7ba      	b.n	1789c <rpc_message_free+0x138>
   17926:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   1792a:	2903      	cmp	r1, #3
   1792c:	f47f af54 	bne.w	177d8 <rpc_message_free+0x74>
   17930:	210a      	movs	r1, #10
   17932:	e7b3      	b.n	1789c <rpc_message_free+0x138>
   17934:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
   17938:	2903      	cmp	r1, #3
   1793a:	f47f af51 	bne.w	177e0 <rpc_message_free+0x7c>
   1793e:	210b      	movs	r1, #11
   17940:	e7ac      	b.n	1789c <rpc_message_free+0x138>
   17942:	200e      	movs	r0, #14
   17944:	4770      	bx	lr
   17946:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   1794a:	2903      	cmp	r1, #3
   1794c:	f47f af4c 	bne.w	177e8 <rpc_message_free+0x84>
   17950:	210c      	movs	r1, #12
   17952:	e7a3      	b.n	1789c <rpc_message_free+0x138>
   17954:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
   17958:	2903      	cmp	r1, #3
   1795a:	f47f af49 	bne.w	177f0 <rpc_message_free+0x8c>
   1795e:	210d      	movs	r1, #13
   17960:	e79c      	b.n	1789c <rpc_message_free+0x138>
   17962:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
   17966:	2903      	cmp	r1, #3
   17968:	f47f af46 	bne.w	177f8 <rpc_message_free+0x94>
   1796c:	210e      	movs	r1, #14
   1796e:	e795      	b.n	1789c <rpc_message_free+0x138>
   17970:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   17974:	2b03      	cmp	r3, #3
   17976:	f47f af43 	bne.w	17800 <rpc_message_free+0x9c>
   1797a:	4603      	mov	r3, r0
   1797c:	210f      	movs	r1, #15
   1797e:	e78d      	b.n	1789c <rpc_message_free+0x138>
   17980:	20020b10 	.word	0x20020b10
   17984:	20020ba8 	.word	0x20020ba8

00017988 <rpc_message_data_free>:
   17988:	2800      	cmp	r0, #0
   1798a:	f000 8091 	beq.w	17ab0 <rpc_message_data_free+0x128>
   1798e:	2900      	cmp	r1, #0
   17990:	f000 80e4 	beq.w	17b5c <rpc_message_data_free+0x1d4>
   17994:	b538      	push	{r3, r4, r5, lr}
   17996:	4a81      	ldr	r2, [pc, #516]	; (17b9c <rpc_message_data_free+0x214>)
   17998:	6853      	ldr	r3, [r2, #4]
   1799a:	2b00      	cmp	r3, #0
   1799c:	f000 808a 	beq.w	17ab4 <rpc_message_data_free+0x12c>
   179a0:	4b7f      	ldr	r3, [pc, #508]	; (17ba0 <rpc_message_data_free+0x218>)
   179a2:	681c      	ldr	r4, [r3, #0]
   179a4:	42a1      	cmp	r1, r4
   179a6:	f000 8087 	beq.w	17ab8 <rpc_message_data_free+0x130>
   179aa:	689c      	ldr	r4, [r3, #8]
   179ac:	42a1      	cmp	r1, r4
   179ae:	f000 808f 	beq.w	17ad0 <rpc_message_data_free+0x148>
   179b2:	691c      	ldr	r4, [r3, #16]
   179b4:	42a1      	cmp	r1, r4
   179b6:	f000 8091 	beq.w	17adc <rpc_message_data_free+0x154>
   179ba:	699c      	ldr	r4, [r3, #24]
   179bc:	42a1      	cmp	r1, r4
   179be:	f000 8093 	beq.w	17ae8 <rpc_message_data_free+0x160>
   179c2:	6a1c      	ldr	r4, [r3, #32]
   179c4:	42a1      	cmp	r1, r4
   179c6:	f000 8095 	beq.w	17af4 <rpc_message_data_free+0x16c>
   179ca:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   179cc:	42a1      	cmp	r1, r4
   179ce:	f000 8097 	beq.w	17b00 <rpc_message_data_free+0x178>
   179d2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   179d4:	42a1      	cmp	r1, r4
   179d6:	f000 8099 	beq.w	17b0c <rpc_message_data_free+0x184>
   179da:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   179dc:	42a1      	cmp	r1, r4
   179de:	f000 809b 	beq.w	17b18 <rpc_message_data_free+0x190>
   179e2:	6c1c      	ldr	r4, [r3, #64]	; 0x40
   179e4:	42a1      	cmp	r1, r4
   179e6:	f000 809d 	beq.w	17b24 <rpc_message_data_free+0x19c>
   179ea:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   179ec:	42a1      	cmp	r1, r4
   179ee:	f000 80a0 	beq.w	17b32 <rpc_message_data_free+0x1aa>
   179f2:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   179f4:	42a1      	cmp	r1, r4
   179f6:	f000 80a3 	beq.w	17b40 <rpc_message_data_free+0x1b8>
   179fa:	6d9c      	ldr	r4, [r3, #88]	; 0x58
   179fc:	42a1      	cmp	r1, r4
   179fe:	f000 80a6 	beq.w	17b4e <rpc_message_data_free+0x1c6>
   17a02:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   17a04:	42a1      	cmp	r1, r4
   17a06:	f000 80ab 	beq.w	17b60 <rpc_message_data_free+0x1d8>
   17a0a:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   17a0c:	42a1      	cmp	r1, r4
   17a0e:	f000 80ae 	beq.w	17b6e <rpc_message_data_free+0x1e6>
   17a12:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   17a14:	42a1      	cmp	r1, r4
   17a16:	f000 80b1 	beq.w	17b7c <rpc_message_data_free+0x1f4>
   17a1a:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   17a1c:	428c      	cmp	r4, r1
   17a1e:	f000 80b4 	beq.w	17b8a <rpc_message_data_free+0x202>
   17a22:	6913      	ldr	r3, [r2, #16]
   17a24:	4608      	mov	r0, r1
   17a26:	4798      	blx	r3
   17a28:	4b5e      	ldr	r3, [pc, #376]	; (17ba4 <rpc_message_data_free+0x21c>)
   17a2a:	781a      	ldrb	r2, [r3, #0]
   17a2c:	2a04      	cmp	r2, #4
   17a2e:	d03b      	beq.n	17aa8 <rpc_message_data_free+0x120>
   17a30:	7a1a      	ldrb	r2, [r3, #8]
   17a32:	2a04      	cmp	r2, #4
   17a34:	d038      	beq.n	17aa8 <rpc_message_data_free+0x120>
   17a36:	7c1a      	ldrb	r2, [r3, #16]
   17a38:	2a04      	cmp	r2, #4
   17a3a:	d035      	beq.n	17aa8 <rpc_message_data_free+0x120>
   17a3c:	7e1a      	ldrb	r2, [r3, #24]
   17a3e:	2a04      	cmp	r2, #4
   17a40:	d032      	beq.n	17aa8 <rpc_message_data_free+0x120>
   17a42:	f893 2020 	ldrb.w	r2, [r3, #32]
   17a46:	2a04      	cmp	r2, #4
   17a48:	d02e      	beq.n	17aa8 <rpc_message_data_free+0x120>
   17a4a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   17a4e:	2a04      	cmp	r2, #4
   17a50:	d02a      	beq.n	17aa8 <rpc_message_data_free+0x120>
   17a52:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   17a56:	2a04      	cmp	r2, #4
   17a58:	d026      	beq.n	17aa8 <rpc_message_data_free+0x120>
   17a5a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   17a5e:	2a04      	cmp	r2, #4
   17a60:	d022      	beq.n	17aa8 <rpc_message_data_free+0x120>
   17a62:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   17a66:	2a04      	cmp	r2, #4
   17a68:	d01e      	beq.n	17aa8 <rpc_message_data_free+0x120>
   17a6a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   17a6e:	2a04      	cmp	r2, #4
   17a70:	d01a      	beq.n	17aa8 <rpc_message_data_free+0x120>
   17a72:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   17a76:	2a04      	cmp	r2, #4
   17a78:	d016      	beq.n	17aa8 <rpc_message_data_free+0x120>
   17a7a:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   17a7e:	2a04      	cmp	r2, #4
   17a80:	d012      	beq.n	17aa8 <rpc_message_data_free+0x120>
   17a82:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   17a86:	2a04      	cmp	r2, #4
   17a88:	d00e      	beq.n	17aa8 <rpc_message_data_free+0x120>
   17a8a:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   17a8e:	2a04      	cmp	r2, #4
   17a90:	d00a      	beq.n	17aa8 <rpc_message_data_free+0x120>
   17a92:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   17a96:	2a04      	cmp	r2, #4
   17a98:	d006      	beq.n	17aa8 <rpc_message_data_free+0x120>
   17a9a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   17a9e:	2b04      	cmp	r3, #4
   17aa0:	bf18      	it	ne
   17aa2:	2000      	movne	r0, #0
   17aa4:	d000      	beq.n	17aa8 <rpc_message_data_free+0x120>
   17aa6:	bd38      	pop	{r3, r4, r5, pc}
   17aa8:	f7f7 feae 	bl	f808 <bsd_os_application_irq_set>
   17aac:	2000      	movs	r0, #0
   17aae:	bd38      	pop	{r3, r4, r5, pc}
   17ab0:	2007      	movs	r0, #7
   17ab2:	4770      	bx	lr
   17ab4:	2008      	movs	r0, #8
   17ab6:	bd38      	pop	{r3, r4, r5, pc}
   17ab8:	889c      	ldrh	r4, [r3, #4]
   17aba:	4284      	cmp	r4, r0
   17abc:	f47f af75 	bne.w	179aa <rpc_message_data_free+0x22>
   17ac0:	2400      	movs	r4, #0
   17ac2:	2000      	movs	r0, #0
   17ac4:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   17ac8:	f843 0034 	str.w	r0, [r3, r4, lsl #3]
   17acc:	80a8      	strh	r0, [r5, #4]
   17ace:	e7a8      	b.n	17a22 <rpc_message_data_free+0x9a>
   17ad0:	899c      	ldrh	r4, [r3, #12]
   17ad2:	4284      	cmp	r4, r0
   17ad4:	f47f af6d 	bne.w	179b2 <rpc_message_data_free+0x2a>
   17ad8:	2401      	movs	r4, #1
   17ada:	e7f2      	b.n	17ac2 <rpc_message_data_free+0x13a>
   17adc:	8a9c      	ldrh	r4, [r3, #20]
   17ade:	4284      	cmp	r4, r0
   17ae0:	f47f af6b 	bne.w	179ba <rpc_message_data_free+0x32>
   17ae4:	2402      	movs	r4, #2
   17ae6:	e7ec      	b.n	17ac2 <rpc_message_data_free+0x13a>
   17ae8:	8b9c      	ldrh	r4, [r3, #28]
   17aea:	4284      	cmp	r4, r0
   17aec:	f47f af69 	bne.w	179c2 <rpc_message_data_free+0x3a>
   17af0:	2403      	movs	r4, #3
   17af2:	e7e6      	b.n	17ac2 <rpc_message_data_free+0x13a>
   17af4:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
   17af6:	4284      	cmp	r4, r0
   17af8:	f47f af67 	bne.w	179ca <rpc_message_data_free+0x42>
   17afc:	2404      	movs	r4, #4
   17afe:	e7e0      	b.n	17ac2 <rpc_message_data_free+0x13a>
   17b00:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
   17b02:	4284      	cmp	r4, r0
   17b04:	f47f af65 	bne.w	179d2 <rpc_message_data_free+0x4a>
   17b08:	2405      	movs	r4, #5
   17b0a:	e7da      	b.n	17ac2 <rpc_message_data_free+0x13a>
   17b0c:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
   17b0e:	4284      	cmp	r4, r0
   17b10:	f47f af63 	bne.w	179da <rpc_message_data_free+0x52>
   17b14:	2406      	movs	r4, #6
   17b16:	e7d4      	b.n	17ac2 <rpc_message_data_free+0x13a>
   17b18:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
   17b1a:	4284      	cmp	r4, r0
   17b1c:	f47f af61 	bne.w	179e2 <rpc_message_data_free+0x5a>
   17b20:	2407      	movs	r4, #7
   17b22:	e7ce      	b.n	17ac2 <rpc_message_data_free+0x13a>
   17b24:	f8b3 4044 	ldrh.w	r4, [r3, #68]	; 0x44
   17b28:	4284      	cmp	r4, r0
   17b2a:	f47f af5e 	bne.w	179ea <rpc_message_data_free+0x62>
   17b2e:	2408      	movs	r4, #8
   17b30:	e7c7      	b.n	17ac2 <rpc_message_data_free+0x13a>
   17b32:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
   17b36:	4284      	cmp	r4, r0
   17b38:	f47f af5b 	bne.w	179f2 <rpc_message_data_free+0x6a>
   17b3c:	2409      	movs	r4, #9
   17b3e:	e7c0      	b.n	17ac2 <rpc_message_data_free+0x13a>
   17b40:	f8b3 4054 	ldrh.w	r4, [r3, #84]	; 0x54
   17b44:	4284      	cmp	r4, r0
   17b46:	f47f af58 	bne.w	179fa <rpc_message_data_free+0x72>
   17b4a:	240a      	movs	r4, #10
   17b4c:	e7b9      	b.n	17ac2 <rpc_message_data_free+0x13a>
   17b4e:	f8b3 405c 	ldrh.w	r4, [r3, #92]	; 0x5c
   17b52:	4284      	cmp	r4, r0
   17b54:	f47f af55 	bne.w	17a02 <rpc_message_data_free+0x7a>
   17b58:	240b      	movs	r4, #11
   17b5a:	e7b2      	b.n	17ac2 <rpc_message_data_free+0x13a>
   17b5c:	200e      	movs	r0, #14
   17b5e:	4770      	bx	lr
   17b60:	f8b3 4064 	ldrh.w	r4, [r3, #100]	; 0x64
   17b64:	4284      	cmp	r4, r0
   17b66:	f47f af50 	bne.w	17a0a <rpc_message_data_free+0x82>
   17b6a:	240c      	movs	r4, #12
   17b6c:	e7a9      	b.n	17ac2 <rpc_message_data_free+0x13a>
   17b6e:	f8b3 406c 	ldrh.w	r4, [r3, #108]	; 0x6c
   17b72:	4284      	cmp	r4, r0
   17b74:	f47f af4d 	bne.w	17a12 <rpc_message_data_free+0x8a>
   17b78:	240d      	movs	r4, #13
   17b7a:	e7a2      	b.n	17ac2 <rpc_message_data_free+0x13a>
   17b7c:	f8b3 4074 	ldrh.w	r4, [r3, #116]	; 0x74
   17b80:	4284      	cmp	r4, r0
   17b82:	f47f af4a 	bne.w	17a1a <rpc_message_data_free+0x92>
   17b86:	240e      	movs	r4, #14
   17b88:	e79b      	b.n	17ac2 <rpc_message_data_free+0x13a>
   17b8a:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
   17b8e:	4284      	cmp	r4, r0
   17b90:	bf08      	it	eq
   17b92:	240f      	moveq	r4, #15
   17b94:	f47f af45 	bne.w	17a22 <rpc_message_data_free+0x9a>
   17b98:	e793      	b.n	17ac2 <rpc_message_data_free+0x13a>
   17b9a:	bf00      	nop
   17b9c:	20020b10 	.word	0x20020b10
   17ba0:	20020b28 	.word	0x20020b28
   17ba4:	20020ba8 	.word	0x20020ba8

00017ba8 <packet_free_cb>:
   17ba8:	b510      	push	{r4, lr}
   17baa:	4604      	mov	r4, r0
   17bac:	b118      	cbz	r0, 17bb6 <packet_free_cb+0xe>
   17bae:	6800      	ldr	r0, [r0, #0]
   17bb0:	b108      	cbz	r0, 17bb6 <packet_free_cb+0xe>
   17bb2:	f001 f829 	bl	18c08 <rpc_gnss_client_data_free>
   17bb6:	68a0      	ldr	r0, [r4, #8]
   17bb8:	b118      	cbz	r0, 17bc2 <packet_free_cb+0x1a>
   17bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17bbe:	f7fa b99d 	b.w	11efc <nrf_free>
   17bc2:	bd10      	pop	{r4, pc}

00017bc4 <rpc_gnss_event_handler>:
   17bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17bc8:	4b64      	ldr	r3, [pc, #400]	; (17d5c <rpc_gnss_event_handler+0x198>)
   17bca:	4606      	mov	r6, r0
   17bcc:	6800      	ldr	r0, [r0, #0]
   17bce:	881b      	ldrh	r3, [r3, #0]
   17bd0:	6802      	ldr	r2, [r0, #0]
   17bd2:	4f63      	ldr	r7, [pc, #396]	; (17d60 <rpc_gnss_event_handler+0x19c>)
   17bd4:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   17bd8:	b084      	sub	sp, #16
   17bda:	460d      	mov	r5, r1
   17bdc:	6038      	str	r0, [r7, #0]
   17bde:	d038      	beq.n	17c52 <rpc_gnss_event_handler+0x8e>
   17be0:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   17be4:	33ff      	adds	r3, #255	; 0xff
   17be6:	b29b      	uxth	r3, r3
   17be8:	2b02      	cmp	r3, #2
   17bea:	d810      	bhi.n	17c0e <rpc_gnss_event_handler+0x4a>
   17bec:	4c5d      	ldr	r4, [pc, #372]	; (17d64 <rpc_gnss_event_handler+0x1a0>)
   17bee:	6823      	ldr	r3, [r4, #0]
   17bf0:	075a      	lsls	r2, r3, #29
   17bf2:	d410      	bmi.n	17c16 <rpc_gnss_event_handler+0x52>
   17bf4:	6823      	ldr	r3, [r4, #0]
   17bf6:	079b      	lsls	r3, r3, #30
   17bf8:	d503      	bpl.n	17c02 <rpc_gnss_event_handler+0x3e>
   17bfa:	f244 0303 	movw	r3, #16387	; 0x4003
   17bfe:	429d      	cmp	r5, r3
   17c00:	d009      	beq.n	17c16 <rpc_gnss_event_handler+0x52>
   17c02:	6830      	ldr	r0, [r6, #0]
   17c04:	b118      	cbz	r0, 17c0e <rpc_gnss_event_handler+0x4a>
   17c06:	f000 ffff 	bl	18c08 <rpc_gnss_client_data_free>
   17c0a:	2300      	movs	r3, #0
   17c0c:	603b      	str	r3, [r7, #0]
   17c0e:	2000      	movs	r0, #0
   17c10:	b004      	add	sp, #16
   17c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17c16:	2002      	movs	r0, #2
   17c18:	f7fa f966 	bl	11ee8 <nrf_malloc>
   17c1c:	4680      	mov	r8, r0
   17c1e:	2800      	cmp	r0, #0
   17c20:	f000 8093 	beq.w	17d4a <rpc_gnss_event_handler+0x186>
   17c24:	2302      	movs	r3, #2
   17c26:	8005      	strh	r5, [r0, #0]
   17c28:	6831      	ldr	r1, [r6, #0]
   17c2a:	6872      	ldr	r2, [r6, #4]
   17c2c:	484e      	ldr	r0, [pc, #312]	; (17d68 <rpc_gnss_event_handler+0x1a4>)
   17c2e:	e88d 0106 	stmia.w	sp, {r1, r2, r8}
   17c32:	6800      	ldr	r0, [r0, #0]
   17c34:	9303      	str	r3, [sp, #12]
   17c36:	6803      	ldr	r3, [r0, #0]
   17c38:	4669      	mov	r1, sp
   17c3a:	685b      	ldr	r3, [r3, #4]
   17c3c:	4798      	blx	r3
   17c3e:	3001      	adds	r0, #1
   17c40:	d070      	beq.n	17d24 <rpc_gnss_event_handler+0x160>
   17c42:	2000      	movs	r0, #0
   17c44:	6823      	ldr	r3, [r4, #0]
   17c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17c4a:	6023      	str	r3, [r4, #0]
   17c4c:	b004      	add	sp, #16
   17c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17c52:	4c44      	ldr	r4, [pc, #272]	; (17d64 <rpc_gnss_event_handler+0x1a0>)
   17c54:	6823      	ldr	r3, [r4, #0]
   17c56:	01d9      	lsls	r1, r3, #7
   17c58:	d523      	bpl.n	17ca2 <rpc_gnss_event_handler+0xde>
   17c5a:	f242 1302 	movw	r3, #8450	; 0x2102
   17c5e:	429d      	cmp	r5, r3
   17c60:	d11f      	bne.n	17ca2 <rpc_gnss_event_handler+0xde>
   17c62:	6843      	ldr	r3, [r0, #4]
   17c64:	b91b      	cbnz	r3, 17c6e <rpc_gnss_event_handler+0xaa>
   17c66:	6823      	ldr	r3, [r4, #0]
   17c68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   17c6c:	6023      	str	r3, [r4, #0]
   17c6e:	6823      	ldr	r3, [r4, #0]
   17c70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   17c74:	6023      	str	r3, [r4, #0]
   17c76:	6823      	ldr	r3, [r4, #0]
   17c78:	025a      	lsls	r2, r3, #9
   17c7a:	d430      	bmi.n	17cde <rpc_gnss_event_handler+0x11a>
   17c7c:	f242 0305 	movw	r3, #8197	; 0x2005
   17c80:	429d      	cmp	r5, r3
   17c82:	d12c      	bne.n	17cde <rpc_gnss_event_handler+0x11a>
   17c84:	6823      	ldr	r3, [r4, #0]
   17c86:	0299      	lsls	r1, r3, #10
   17c88:	d529      	bpl.n	17cde <rpc_gnss_event_handler+0x11a>
   17c8a:	6843      	ldr	r3, [r0, #4]
   17c8c:	2b00      	cmp	r3, #0
   17c8e:	d157      	bne.n	17d40 <rpc_gnss_event_handler+0x17c>
   17c90:	6823      	ldr	r3, [r4, #0]
   17c92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   17c96:	6023      	str	r3, [r4, #0]
   17c98:	6823      	ldr	r3, [r4, #0]
   17c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17c9e:	6023      	str	r3, [r4, #0]
   17ca0:	e01d      	b.n	17cde <rpc_gnss_event_handler+0x11a>
   17ca2:	6823      	ldr	r3, [r4, #0]
   17ca4:	025b      	lsls	r3, r3, #9
   17ca6:	d50e      	bpl.n	17cc6 <rpc_gnss_event_handler+0x102>
   17ca8:	f242 1303 	movw	r3, #8451	; 0x2103
   17cac:	429d      	cmp	r5, r3
   17cae:	d10a      	bne.n	17cc6 <rpc_gnss_event_handler+0x102>
   17cb0:	6843      	ldr	r3, [r0, #4]
   17cb2:	b91b      	cbnz	r3, 17cbc <rpc_gnss_event_handler+0xf8>
   17cb4:	6823      	ldr	r3, [r4, #0]
   17cb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   17cba:	6023      	str	r3, [r4, #0]
   17cbc:	6823      	ldr	r3, [r4, #0]
   17cbe:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   17cc2:	6023      	str	r3, [r4, #0]
   17cc4:	e00b      	b.n	17cde <rpc_gnss_event_handler+0x11a>
   17cc6:	f242 0301 	movw	r3, #8193	; 0x2001
   17cca:	429d      	cmp	r5, r3
   17ccc:	d10c      	bne.n	17ce8 <rpc_gnss_event_handler+0x124>
   17cce:	6843      	ldr	r3, [r0, #4]
   17cd0:	b92b      	cbnz	r3, 17cde <rpc_gnss_event_handler+0x11a>
   17cd2:	6823      	ldr	r3, [r4, #0]
   17cd4:	0c1b      	lsrs	r3, r3, #16
   17cd6:	041b      	lsls	r3, r3, #16
   17cd8:	f043 0302 	orr.w	r3, r3, #2
   17cdc:	6023      	str	r3, [r4, #0]
   17cde:	f000 ff93 	bl	18c08 <rpc_gnss_client_data_free>
   17ce2:	2300      	movs	r3, #0
   17ce4:	603b      	str	r3, [r7, #0]
   17ce6:	e77b      	b.n	17be0 <rpc_gnss_event_handler+0x1c>
   17ce8:	f242 0304 	movw	r3, #8196	; 0x2004
   17cec:	429d      	cmp	r5, r3
   17cee:	d1c5      	bne.n	17c7c <rpc_gnss_event_handler+0xb8>
   17cf0:	6843      	ldr	r3, [r0, #4]
   17cf2:	b993      	cbnz	r3, 17d1a <rpc_gnss_event_handler+0x156>
   17cf4:	6823      	ldr	r3, [r4, #0]
   17cf6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   17cfa:	6023      	str	r3, [r4, #0]
   17cfc:	6823      	ldr	r3, [r4, #0]
   17cfe:	b29b      	uxth	r3, r3
   17d00:	2b03      	cmp	r3, #3
   17d02:	6823      	ldr	r3, [r4, #0]
   17d04:	d016      	beq.n	17d34 <rpc_gnss_event_handler+0x170>
   17d06:	b29b      	uxth	r3, r3
   17d08:	2b04      	cmp	r3, #4
   17d0a:	d1d7      	bne.n	17cbc <rpc_gnss_event_handler+0xf8>
   17d0c:	6823      	ldr	r3, [r4, #0]
   17d0e:	0c1b      	lsrs	r3, r3, #16
   17d10:	041b      	lsls	r3, r3, #16
   17d12:	f043 0302 	orr.w	r3, r3, #2
   17d16:	6023      	str	r3, [r4, #0]
   17d18:	e7d0      	b.n	17cbc <rpc_gnss_event_handler+0xf8>
   17d1a:	6823      	ldr	r3, [r4, #0]
   17d1c:	b29b      	uxth	r3, r3
   17d1e:	2b03      	cmp	r3, #3
   17d20:	d1cc      	bne.n	17cbc <rpc_gnss_event_handler+0xf8>
   17d22:	e7f3      	b.n	17d0c <rpc_gnss_event_handler+0x148>
   17d24:	4640      	mov	r0, r8
   17d26:	f7fa f8e9 	bl	11efc <nrf_free>
   17d2a:	6830      	ldr	r0, [r6, #0]
   17d2c:	2800      	cmp	r0, #0
   17d2e:	f47f af6a 	bne.w	17c06 <rpc_gnss_event_handler+0x42>
   17d32:	e76c      	b.n	17c0e <rpc_gnss_event_handler+0x4a>
   17d34:	0c1b      	lsrs	r3, r3, #16
   17d36:	041b      	lsls	r3, r3, #16
   17d38:	f043 0304 	orr.w	r3, r3, #4
   17d3c:	6023      	str	r3, [r4, #0]
   17d3e:	e7bd      	b.n	17cbc <rpc_gnss_event_handler+0xf8>
   17d40:	6823      	ldr	r3, [r4, #0]
   17d42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   17d46:	6023      	str	r3, [r4, #0]
   17d48:	e7c9      	b.n	17cde <rpc_gnss_event_handler+0x11a>
   17d4a:	6830      	ldr	r0, [r6, #0]
   17d4c:	2800      	cmp	r0, #0
   17d4e:	f43f af5e 	beq.w	17c0e <rpc_gnss_event_handler+0x4a>
   17d52:	f000 ff59 	bl	18c08 <rpc_gnss_client_data_free>
   17d56:	f8c7 8000 	str.w	r8, [r7]
   17d5a:	e758      	b.n	17c0e <rpc_gnss_event_handler+0x4a>
   17d5c:	20024f2e 	.word	0x20024f2e
   17d60:	20020c2c 	.word	0x20020c2c
   17d64:	20020c28 	.word	0x20020c28
   17d68:	20020c30 	.word	0x20020c30

00017d6c <gnss_interface_write>:
   17d6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17d70:	4a75      	ldr	r2, [pc, #468]	; (17f48 <gnss_interface_write+0x1dc>)
   17d72:	b09f      	sub	sp, #124	; 0x7c
   17d74:	4290      	cmp	r0, r2
   17d76:	9d26      	ldr	r5, [sp, #152]	; 0x98
   17d78:	f040 80d4 	bne.w	17f24 <gnss_interface_write+0x1b8>
   17d7c:	2900      	cmp	r1, #0
   17d7e:	f000 80c9 	beq.w	17f14 <gnss_interface_write+0x1a8>
   17d82:	2d00      	cmp	r5, #0
   17d84:	f000 80c6 	beq.w	17f14 <gnss_interface_write+0x1a8>
   17d88:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   17d8a:	2a02      	cmp	r2, #2
   17d8c:	f040 80c2 	bne.w	17f14 <gnss_interface_write+0x1a8>
   17d90:	4c6e      	ldr	r4, [pc, #440]	; (17f4c <gnss_interface_write+0x1e0>)
   17d92:	6822      	ldr	r2, [r4, #0]
   17d94:	b292      	uxth	r2, r2
   17d96:	2a02      	cmp	r2, #2
   17d98:	d004      	beq.n	17da4 <gnss_interface_write+0x38>
   17d9a:	6822      	ldr	r2, [r4, #0]
   17d9c:	b292      	uxth	r2, r2
   17d9e:	2a04      	cmp	r2, #4
   17da0:	f040 80c6 	bne.w	17f30 <gnss_interface_write+0x1c4>
   17da4:	0798      	lsls	r0, r3, #30
   17da6:	f100 80c9 	bmi.w	17f3c <gnss_interface_write+0x1d0>
   17daa:	6820      	ldr	r0, [r4, #0]
   17dac:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
   17db0:	d065      	beq.n	17e7e <gnss_interface_write+0x112>
   17db2:	6822      	ldr	r2, [r4, #0]
   17db4:	882b      	ldrh	r3, [r5, #0]
   17db6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   17dba:	6022      	str	r2, [r4, #0]
   17dbc:	6822      	ldr	r2, [r4, #0]
   17dbe:	3b01      	subs	r3, #1
   17dc0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   17dc4:	6022      	str	r2, [r4, #0]
   17dc6:	2b07      	cmp	r3, #7
   17dc8:	f200 80a4 	bhi.w	17f14 <gnss_interface_write+0x1a8>
   17dcc:	e8df f003 	tbb	[pc, r3]
   17dd0:	696e7378 	.word	0x696e7378
   17dd4:	045f5a64 	.word	0x045f5a64
   17dd8:	4608      	mov	r0, r1
   17dda:	a902      	add	r1, sp, #8
   17ddc:	f000 fec8 	bl	18b70 <rpc_gnss_serialize_integrity>
   17de0:	2172      	movs	r1, #114	; 0x72
   17de2:	4668      	mov	r0, sp
   17de4:	f000 fede 	bl	18ba4 <rpc_gnss_client_request_alloc>
   17de8:	4605      	mov	r5, r0
   17dea:	9800      	ldr	r0, [sp, #0]
   17dec:	2d00      	cmp	r5, #0
   17dee:	d16c      	bne.n	17eca <gnss_interface_write+0x15e>
   17df0:	2800      	cmp	r0, #0
   17df2:	d071      	beq.n	17ed8 <gnss_interface_write+0x16c>
   17df4:	f241 0605 	movw	r6, #4101	; 0x1005
   17df8:	f04f 0c49 	mov.w	ip, #73	; 0x49
   17dfc:	2272      	movs	r2, #114	; 0x72
   17dfe:	f04f 0e76 	mov.w	lr, #118	; 0x76
   17e02:	f04f 0943 	mov.w	r9, #67	; 0x43
   17e06:	f04f 0854 	mov.w	r8, #84	; 0x54
   17e0a:	4f51      	ldr	r7, [pc, #324]	; (17f50 <gnss_interface_write+0x1e4>)
   17e0c:	a91e      	add	r1, sp, #120	; 0x78
   17e0e:	883b      	ldrh	r3, [r7, #0]
   17e10:	f880 c00f 	strb.w	ip, [r0, #15]
   17e14:	3301      	adds	r3, #1
   17e16:	b29b      	uxth	r3, r3
   17e18:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   17e1c:	f841 cd74 	str.w	ip, [r1, #-116]!
   17e20:	7145      	strb	r5, [r0, #5]
   17e22:	7185      	strb	r5, [r0, #6]
   17e24:	71c5      	strb	r5, [r0, #7]
   17e26:	7205      	strb	r5, [r0, #8]
   17e28:	7245      	strb	r5, [r0, #9]
   17e2a:	7285      	strb	r5, [r0, #10]
   17e2c:	72c5      	strb	r5, [r0, #11]
   17e2e:	7102      	strb	r2, [r0, #4]
   17e30:	f880 900c 	strb.w	r9, [r0, #12]
   17e34:	f880 800d 	strb.w	r8, [r0, #13]
   17e38:	f880 e00e 	strb.w	lr, [r0, #14]
   17e3c:	6800      	ldr	r0, [r0, #0]
   17e3e:	803b      	strh	r3, [r7, #0]
   17e40:	f005 fd0c 	bl	1d85c <memcpy>
   17e44:	4b43      	ldr	r3, [pc, #268]	; (17f54 <gnss_interface_write+0x1e8>)
   17e46:	4631      	mov	r1, r6
   17e48:	9800      	ldr	r0, [sp, #0]
   17e4a:	601d      	str	r5, [r3, #0]
   17e4c:	f000 febe 	bl	18bcc <rpc_gnss_client_request_send>
   17e50:	2800      	cmp	r0, #0
   17e52:	d148      	bne.n	17ee6 <gnss_interface_write+0x17a>
   17e54:	6823      	ldr	r3, [r4, #0]
   17e56:	0299      	lsls	r1, r3, #10
   17e58:	d50d      	bpl.n	17e76 <gnss_interface_write+0x10a>
   17e5a:	4e3f      	ldr	r6, [pc, #252]	; (17f58 <gnss_interface_write+0x1ec>)
   17e5c:	4d3a      	ldr	r5, [pc, #232]	; (17f48 <gnss_interface_write+0x1dc>)
   17e5e:	e001      	b.n	17e64 <gnss_interface_write+0xf8>
   17e60:	2800      	cmp	r0, #0
   17e62:	d150      	bne.n	17f06 <gnss_interface_write+0x19a>
   17e64:	4631      	mov	r1, r6
   17e66:	4628      	mov	r0, r5
   17e68:	f7f7 fb8a 	bl	f580 <bsd_os_timedwait>
   17e6c:	6823      	ldr	r3, [r4, #0]
   17e6e:	029a      	lsls	r2, r3, #10
   17e70:	d4f6      	bmi.n	17e60 <gnss_interface_write+0xf4>
   17e72:	2800      	cmp	r0, #0
   17e74:	d147      	bne.n	17f06 <gnss_interface_write+0x19a>
   17e76:	6823      	ldr	r3, [r4, #0]
   17e78:	039b      	lsls	r3, r3, #14
   17e7a:	d53f      	bpl.n	17efc <gnss_interface_write+0x190>
   17e7c:	2000      	movs	r0, #0
   17e7e:	b01f      	add	sp, #124	; 0x7c
   17e80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17e84:	4608      	mov	r0, r1
   17e86:	a902      	add	r1, sp, #8
   17e88:	f000 fe2a 	bl	18ae0 <rpc_gnss_serialize_time_and_sv_tow>
   17e8c:	e7a8      	b.n	17de0 <gnss_interface_write+0x74>
   17e8e:	4608      	mov	r0, r1
   17e90:	a902      	add	r1, sp, #8
   17e92:	f000 fe4d 	bl	18b30 <rpc_gnss_serialize_location>
   17e96:	e7a3      	b.n	17de0 <gnss_interface_write+0x74>
   17e98:	4608      	mov	r0, r1
   17e9a:	a902      	add	r1, sp, #8
   17e9c:	f000 fe06 	bl	18aac <rpc_gnss_serialize_nequick>
   17ea0:	e79e      	b.n	17de0 <gnss_interface_write+0x74>
   17ea2:	4608      	mov	r0, r1
   17ea4:	a902      	add	r1, sp, #8
   17ea6:	f000 fddd 	bl	18a64 <rpc_gnss_serialize_klob>
   17eaa:	e799      	b.n	17de0 <gnss_interface_write+0x74>
   17eac:	4608      	mov	r0, r1
   17eae:	a902      	add	r1, sp, #8
   17eb0:	f000 fda6 	bl	18a00 <rpc_gnss_serialize_alm>
   17eb4:	e794      	b.n	17de0 <gnss_interface_write+0x74>
   17eb6:	4608      	mov	r0, r1
   17eb8:	a902      	add	r1, sp, #8
   17eba:	f000 fd4f 	bl	1895c <rpc_gnss_serialize_ephe>
   17ebe:	e78f      	b.n	17de0 <gnss_interface_write+0x74>
   17ec0:	4608      	mov	r0, r1
   17ec2:	a902      	add	r1, sp, #8
   17ec4:	f000 fd28 	bl	18918 <rpc_gnss_serialize_utc>
   17ec8:	e78a      	b.n	17de0 <gnss_interface_write+0x74>
   17eca:	b128      	cbz	r0, 17ed8 <gnss_interface_write+0x16c>
   17ecc:	6803      	ldr	r3, [r0, #0]
   17ece:	b11b      	cbz	r3, 17ed8 <gnss_interface_write+0x16c>
   17ed0:	4618      	mov	r0, r3
   17ed2:	f000 fe99 	bl	18c08 <rpc_gnss_client_data_free>
   17ed6:	9800      	ldr	r0, [sp, #0]
   17ed8:	f000 fe8e 	bl	18bf8 <rpc_gnss_client_message_free>
   17edc:	2023      	movs	r0, #35	; 0x23
   17ede:	f7f7 fbe3 	bl	f6a8 <bsd_os_errno_set>
   17ee2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17ee6:	6823      	ldr	r3, [r4, #0]
   17ee8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   17eec:	6023      	str	r3, [r4, #0]
   17eee:	6823      	ldr	r3, [r4, #0]
   17ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17ef4:	6023      	str	r3, [r4, #0]
   17ef6:	b01f      	add	sp, #124	; 0x7c
   17ef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17efc:	2005      	movs	r0, #5
   17efe:	6823      	ldr	r3, [r4, #0]
   17f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17f04:	6023      	str	r3, [r4, #0]
   17f06:	f7f7 fbcf 	bl	f6a8 <bsd_os_errno_set>
   17f0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17f0e:	b01f      	add	sp, #124	; 0x7c
   17f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17f14:	2016      	movs	r0, #22
   17f16:	f7f7 fbc7 	bl	f6a8 <bsd_os_errno_set>
   17f1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17f1e:	b01f      	add	sp, #124	; 0x7c
   17f20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17f24:	2009      	movs	r0, #9
   17f26:	f7f7 fbbf 	bl	f6a8 <bsd_os_errno_set>
   17f2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17f2e:	e7a6      	b.n	17e7e <gnss_interface_write+0x112>
   17f30:	2039      	movs	r0, #57	; 0x39
   17f32:	f7f7 fbb9 	bl	f6a8 <bsd_os_errno_set>
   17f36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17f3a:	e7a0      	b.n	17e7e <gnss_interface_write+0x112>
   17f3c:	202d      	movs	r0, #45	; 0x2d
   17f3e:	f7f7 fbb3 	bl	f6a8 <bsd_os_errno_set>
   17f42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17f46:	e79a      	b.n	17e7e <gnss_interface_write+0x112>
   17f48:	49765443 	.word	0x49765443
   17f4c:	20020c28 	.word	0x20020c28
   17f50:	20024f2e 	.word	0x20024f2e
   17f54:	20020c2c 	.word	0x20020c2c
   17f58:	2002c46c 	.word	0x2002c46c

00017f5c <gnss_interface_read>:
   17f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f60:	4c4a      	ldr	r4, [pc, #296]	; (1808c <gnss_interface_read+0x130>)
   17f62:	b0b7      	sub	sp, #220	; 0xdc
   17f64:	42a0      	cmp	r0, r4
   17f66:	f040 81ec 	bne.w	18342 <gnss_interface_read+0x3e6>
   17f6a:	4688      	mov	r8, r1
   17f6c:	2900      	cmp	r1, #0
   17f6e:	f000 81e2 	beq.w	18336 <gnss_interface_read+0x3da>
   17f72:	2ad7      	cmp	r2, #215	; 0xd7
   17f74:	f240 81df 	bls.w	18336 <gnss_interface_read+0x3da>
   17f78:	4d45      	ldr	r5, [pc, #276]	; (18090 <gnss_interface_read+0x134>)
   17f7a:	4699      	mov	r9, r3
   17f7c:	682b      	ldr	r3, [r5, #0]
   17f7e:	b29b      	uxth	r3, r3
   17f80:	2b04      	cmp	r3, #4
   17f82:	d004      	beq.n	17f8e <gnss_interface_read+0x32>
   17f84:	682b      	ldr	r3, [r5, #0]
   17f86:	b29b      	uxth	r3, r3
   17f88:	2b02      	cmp	r3, #2
   17f8a:	f040 81e0 	bne.w	1834e <gnss_interface_read+0x3f2>
   17f8e:	2102      	movs	r1, #2
   17f90:	20b6      	movs	r0, #182	; 0xb6
   17f92:	2400      	movs	r4, #0
   17f94:	682b      	ldr	r3, [r5, #0]
   17f96:	f10d 020e 	add.w	r2, sp, #14
   17f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   17f9e:	602b      	str	r3, [r5, #0]
   17fa0:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 18098 <gnss_interface_read+0x13c>
   17fa4:	ab08      	add	r3, sp, #32
   17fa6:	4f3b      	ldr	r7, [pc, #236]	; (18094 <gnss_interface_read+0x138>)
   17fa8:	4e38      	ldr	r6, [pc, #224]	; (1808c <gnss_interface_read+0x130>)
   17faa:	9005      	str	r0, [sp, #20]
   17fac:	9107      	str	r1, [sp, #28]
   17fae:	9304      	str	r3, [sp, #16]
   17fb0:	9206      	str	r2, [sp, #24]
   17fb2:	ea09 0b01 	and.w	fp, r9, r1
   17fb6:	f8da 0000 	ldr.w	r0, [sl]
   17fba:	464a      	mov	r2, r9
   17fbc:	6803      	ldr	r3, [r0, #0]
   17fbe:	a904      	add	r1, sp, #16
   17fc0:	689b      	ldr	r3, [r3, #8]
   17fc2:	4798      	blx	r3
   17fc4:	2800      	cmp	r0, #0
   17fc6:	da11      	bge.n	17fec <gnss_interface_read+0x90>
   17fc8:	f1bb 0f00 	cmp.w	fp, #0
   17fcc:	d138      	bne.n	18040 <gnss_interface_read+0xe4>
   17fce:	682b      	ldr	r3, [r5, #0]
   17fd0:	03d8      	lsls	r0, r3, #15
   17fd2:	d4f0      	bmi.n	17fb6 <gnss_interface_read+0x5a>
   17fd4:	b10c      	cbz	r4, 17fda <gnss_interface_read+0x7e>
   17fd6:	e7ee      	b.n	17fb6 <gnss_interface_read+0x5a>
   17fd8:	b930      	cbnz	r0, 17fe8 <gnss_interface_read+0x8c>
   17fda:	4639      	mov	r1, r7
   17fdc:	4630      	mov	r0, r6
   17fde:	f7f7 facf 	bl	f580 <bsd_os_timedwait>
   17fe2:	682b      	ldr	r3, [r5, #0]
   17fe4:	03d9      	lsls	r1, r3, #15
   17fe6:	d5f7      	bpl.n	17fd8 <gnss_interface_read+0x7c>
   17fe8:	4604      	mov	r4, r0
   17fea:	e7e4      	b.n	17fb6 <gnss_interface_read+0x5a>
   17fec:	f244 0202 	movw	r2, #16386	; 0x4002
   17ff0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   17ff4:	4293      	cmp	r3, r2
   17ff6:	d039      	beq.n	1806c <gnss_interface_read+0x110>
   17ff8:	f244 0201 	movw	r2, #16385	; 0x4001
   17ffc:	4293      	cmp	r3, r2
   17ffe:	d04d      	beq.n	1809c <gnss_interface_read+0x140>
   18000:	f244 0203 	movw	r2, #16387	; 0x4003
   18004:	4293      	cmp	r3, r2
   18006:	f040 8196 	bne.w	18336 <gnss_interface_read+0x3da>
   1800a:	2203      	movs	r2, #3
   1800c:	2414      	movs	r4, #20
   1800e:	9b08      	ldr	r3, [sp, #32]
   18010:	f888 2000 	strb.w	r2, [r8]
   18014:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18016:	f8c8 3008 	str.w	r3, [r8, #8]
   1801a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1801e:	e9c8 2303 	strd	r2, r3, [r8, #12]
   18022:	f8da 0000 	ldr.w	r0, [sl]
   18026:	6803      	ldr	r3, [r0, #0]
   18028:	68db      	ldr	r3, [r3, #12]
   1802a:	4798      	blx	r3
   1802c:	2800      	cmp	r0, #0
   1802e:	dd03      	ble.n	18038 <gnss_interface_read+0xdc>
   18030:	682b      	ldr	r3, [r5, #0]
   18032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   18036:	602b      	str	r3, [r5, #0]
   18038:	4620      	mov	r0, r4
   1803a:	b037      	add	sp, #220	; 0xdc
   1803c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18040:	1c42      	adds	r2, r0, #1
   18042:	4603      	mov	r3, r0
   18044:	d1d2      	bne.n	17fec <gnss_interface_read+0x90>
   18046:	b93c      	cbnz	r4, 18058 <gnss_interface_read+0xfc>
   18048:	461c      	mov	r4, r3
   1804a:	2023      	movs	r0, #35	; 0x23
   1804c:	f7f7 fb2c 	bl	f6a8 <bsd_os_errno_set>
   18050:	4620      	mov	r0, r4
   18052:	b037      	add	sp, #220	; 0xdc
   18054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18058:	9001      	str	r0, [sp, #4]
   1805a:	4620      	mov	r0, r4
   1805c:	f7f7 fb24 	bl	f6a8 <bsd_os_errno_set>
   18060:	9b01      	ldr	r3, [sp, #4]
   18062:	461c      	mov	r4, r3
   18064:	4620      	mov	r0, r4
   18066:	b037      	add	sp, #220	; 0xdc
   18068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1806c:	a808      	add	r0, sp, #32
   1806e:	f005 fbc3 	bl	1d7f8 <strlen>
   18072:	2302      	movs	r3, #2
   18074:	1c44      	adds	r4, r0, #1
   18076:	b2a4      	uxth	r4, r4
   18078:	f808 3b08 	strb.w	r3, [r8], #8
   1807c:	4622      	mov	r2, r4
   1807e:	a908      	add	r1, sp, #32
   18080:	4640      	mov	r0, r8
   18082:	f005 fbeb 	bl	1d85c <memcpy>
   18086:	3408      	adds	r4, #8
   18088:	e7cb      	b.n	18022 <gnss_interface_read+0xc6>
   1808a:	bf00      	nop
   1808c:	49765443 	.word	0x49765443
   18090:	20020c28 	.word	0x20020c28
   18094:	2002c46c 	.word	0x2002c46c
   18098:	20020c30 	.word	0x20020c30
   1809c:	2401      	movs	r4, #1
   1809e:	a809      	add	r0, sp, #36	; 0x24
   180a0:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   180a2:	e9c8 0102 	strd	r0, r1, [r8, #8]
   180a6:	e9c8 2304 	strd	r2, r3, [r8, #16]
   180aa:	990d      	ldr	r1, [sp, #52]	; 0x34
   180ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   180ae:	f888 4000 	strb.w	r4, [r8]
   180b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   180b4:	f8c8 1018 	str.w	r1, [r8, #24]
   180b8:	9910      	ldr	r1, [sp, #64]	; 0x40
   180ba:	f8c8 201c 	str.w	r2, [r8, #28]
   180be:	f8c8 3020 	str.w	r3, [r8, #32]
   180c2:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   180c6:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   180ca:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
   180ce:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   180d2:	f888 2044 	strb.w	r2, [r8, #68]	; 0x44
   180d6:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   180da:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
   180de:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   180e2:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
   180e6:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   180ea:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
   180ee:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
   180f2:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   180f6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   180fa:	f8a8 1028 	strh.w	r1, [r8, #40]	; 0x28
   180fe:	f888 302e 	strb.w	r3, [r8, #46]	; 0x2e
   18102:	f8c8 202a 	str.w	r2, [r8, #42]	; 0x2a
   18106:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   1810a:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   1810e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   18110:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   18114:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   18118:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   1811c:	f3c3 210f 	ubfx	r1, r3, #8, #16
   18120:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   18122:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   18126:	f8a8 0030 	strh.w	r0, [r8, #48]	; 0x30
   1812a:	f8a8 104a 	strh.w	r1, [r8, #74]	; 0x4a
   1812e:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   18132:	f3c3 230f 	ubfx	r3, r3, #8, #16
   18136:	f8a8 2056 	strh.w	r2, [r8, #86]	; 0x56
   1813a:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   1813e:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
   18142:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   18146:	f8a8 1046 	strh.w	r1, [r8, #70]	; 0x46
   1814a:	f888 2048 	strb.w	r2, [r8, #72]	; 0x48
   1814e:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   18152:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   18156:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
   1815a:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   1815e:	f888 1050 	strb.w	r1, [r8, #80]	; 0x50
   18162:	f8a8 2052 	strh.w	r2, [r8, #82]	; 0x52
   18166:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
   1816a:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   1816e:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   18172:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   18176:	f8c8 1058 	str.w	r1, [r8, #88]	; 0x58
   1817a:	f888 205c 	strb.w	r2, [r8, #92]	; 0x5c
   1817e:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   18182:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   18186:	f8a8 305e 	strh.w	r3, [r8, #94]	; 0x5e
   1818a:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   1818e:	f888 1060 	strb.w	r1, [r8, #96]	; 0x60
   18192:	f8c8 2064 	str.w	r2, [r8, #100]	; 0x64
   18196:	f888 3068 	strb.w	r3, [r8, #104]	; 0x68
   1819a:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   1819e:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   181a2:	9a22      	ldr	r2, [sp, #136]	; 0x88
   181a4:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   181a8:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   181ac:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   181b0:	f3c2 220f 	ubfx	r2, r2, #8, #16
   181b4:	f8a8 106e 	strh.w	r1, [r8, #110]	; 0x6e
   181b8:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   181bc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   181c0:	f8a8 207a 	strh.w	r2, [r8, #122]	; 0x7a
   181c4:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   181c8:	f8a8 3086 	strh.w	r3, [r8, #134]	; 0x86
   181cc:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   181d0:	f8a8 106a 	strh.w	r1, [r8, #106]	; 0x6a
   181d4:	f888 206c 	strb.w	r2, [r8, #108]	; 0x6c
   181d8:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   181dc:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   181e0:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
   181e4:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   181e8:	f888 1074 	strb.w	r1, [r8, #116]	; 0x74
   181ec:	f8a8 2076 	strh.w	r2, [r8, #118]	; 0x76
   181f0:	f888 3078 	strb.w	r3, [r8, #120]	; 0x78
   181f4:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   181f8:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   181fc:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   18200:	f8c8 107c 	str.w	r1, [r8, #124]	; 0x7c
   18204:	f888 2080 	strb.w	r2, [r8, #128]	; 0x80
   18208:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   1820c:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   18210:	f8a8 3082 	strh.w	r3, [r8, #130]	; 0x82
   18214:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   18218:	f888 1084 	strb.w	r1, [r8, #132]	; 0x84
   1821c:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
   18220:	f888 308c 	strb.w	r3, [r8, #140]	; 0x8c
   18224:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   18228:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1822a:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   1822e:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   18232:	f3c3 210f 	ubfx	r1, r3, #8, #16
   18236:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   18238:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   1823c:	f8a8 1092 	strh.w	r1, [r8, #146]	; 0x92
   18240:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   18244:	f8a8 209e 	strh.w	r2, [r8, #158]	; 0x9e
   18248:	f3c3 230f 	ubfx	r3, r3, #8, #16
   1824c:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   18250:	f8a8 008e 	strh.w	r0, [r8, #142]	; 0x8e
   18254:	f8a8 30aa 	strh.w	r3, [r8, #170]	; 0xaa
   18258:	f888 1090 	strb.w	r1, [r8, #144]	; 0x90
   1825c:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   18260:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   18264:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
   18268:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   1826c:	f888 3098 	strb.w	r3, [r8, #152]	; 0x98
   18270:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   18274:	f8a8 109a 	strh.w	r1, [r8, #154]	; 0x9a
   18278:	f888 209c 	strb.w	r2, [r8, #156]	; 0x9c
   1827c:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   18280:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   18284:	f8c8 30a0 	str.w	r3, [r8, #160]	; 0xa0
   18288:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   1828c:	f888 10a4 	strb.w	r1, [r8, #164]	; 0xa4
   18290:	f8a8 20a6 	strh.w	r2, [r8, #166]	; 0xa6
   18294:	f888 30a8 	strb.w	r3, [r8, #168]	; 0xa8
   18298:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   1829c:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   182a0:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   182a4:	f8c8 10ac 	str.w	r1, [r8, #172]	; 0xac
   182a8:	f888 20b0 	strb.w	r2, [r8, #176]	; 0xb0
   182ac:	f8a8 30b2 	strh.w	r3, [r8, #178]	; 0xb2
   182b0:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   182b4:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   182b8:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   182bc:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   182be:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   182c2:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   182c6:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   182ca:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   182ce:	f3c2 220f 	ubfx	r2, r2, #8, #16
   182d2:	f8a8 10b6 	strh.w	r1, [r8, #182]	; 0xb6
   182d6:	f8a8 30ce 	strh.w	r3, [r8, #206]	; 0xce
   182da:	f888 40b4 	strb.w	r4, [r8, #180]	; 0xb4
   182de:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
   182e2:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   182e6:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   182ea:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   182ee:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   182f2:	f888 10bc 	strb.w	r1, [r8, #188]	; 0xbc
   182f6:	f8a8 20be 	strh.w	r2, [r8, #190]	; 0xbe
   182fa:	f8c8 00b8 	str.w	r0, [r8, #184]	; 0xb8
   182fe:	f888 30c0 	strb.w	r3, [r8, #192]	; 0xc0
   18302:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   18306:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   1830a:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   1830e:	f8c8 10c4 	str.w	r1, [r8, #196]	; 0xc4
   18312:	f888 20c8 	strb.w	r2, [r8, #200]	; 0xc8
   18316:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   1831a:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   1831e:	f8a8 30ca 	strh.w	r3, [r8, #202]	; 0xca
   18322:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   18326:	f888 10cc 	strb.w	r1, [r8, #204]	; 0xcc
   1832a:	f8c8 20d0 	str.w	r2, [r8, #208]	; 0xd0
   1832e:	f888 30d4 	strb.w	r3, [r8, #212]	; 0xd4
   18332:	24d8      	movs	r4, #216	; 0xd8
   18334:	e675      	b.n	18022 <gnss_interface_read+0xc6>
   18336:	2016      	movs	r0, #22
   18338:	f7f7 f9b6 	bl	f6a8 <bsd_os_errno_set>
   1833c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   18340:	e67a      	b.n	18038 <gnss_interface_read+0xdc>
   18342:	2009      	movs	r0, #9
   18344:	f7f7 f9b0 	bl	f6a8 <bsd_os_errno_set>
   18348:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1834c:	e674      	b.n	18038 <gnss_interface_read+0xdc>
   1834e:	2039      	movs	r0, #57	; 0x39
   18350:	f7f7 f9aa 	bl	f6a8 <bsd_os_errno_set>
   18354:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   18358:	e66e      	b.n	18038 <gnss_interface_read+0xdc>
   1835a:	bf00      	nop

0001835c <gnss_interface_setopt>:
   1835c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18360:	f241 1402 	movw	r4, #4354	; 0x1102
   18364:	4222      	tst	r2, r4
   18366:	b086      	sub	sp, #24
   18368:	4d9c      	ldr	r5, [pc, #624]	; (185dc <gnss_interface_setopt+0x280>)
   1836a:	d004      	beq.n	18376 <gnss_interface_setopt+0x1a>
   1836c:	682c      	ldr	r4, [r5, #0]
   1836e:	b2a4      	uxth	r4, r4
   18370:	2c02      	cmp	r4, #2
   18372:	f040 8104 	bne.w	1857e <gnss_interface_setopt+0x222>
   18376:	682c      	ldr	r4, [r5, #0]
   18378:	0264      	lsls	r4, r4, #9
   1837a:	f100 8128 	bmi.w	185ce <gnss_interface_setopt+0x272>
   1837e:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   18382:	f040 811e 	bne.w	185c2 <gnss_interface_setopt+0x266>
   18386:	4996      	ldr	r1, [pc, #600]	; (185e0 <gnss_interface_setopt+0x284>)
   18388:	4288      	cmp	r0, r1
   1838a:	f040 8114 	bne.w	185b6 <gnss_interface_setopt+0x25a>
   1838e:	3a01      	subs	r2, #1
   18390:	2a08      	cmp	r2, #8
   18392:	f200 80ec 	bhi.w	1856e <gnss_interface_setopt+0x212>
   18396:	e8df f012 	tbh	[pc, r2, lsl #1]
   1839a:	0075      	.short	0x0075
   1839c:	00c200d8 	.word	0x00c200d8
   183a0:	008100cc 	.word	0x008100cc
   183a4:	0098008c 	.word	0x0098008c
   183a8:	000900af 	.word	0x000900af
   183ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   183ae:	2a01      	cmp	r2, #1
   183b0:	f040 80dd 	bne.w	1856e <gnss_interface_setopt+0x212>
   183b4:	f241 1603 	movw	r6, #4355	; 0x1103
   183b8:	2240      	movs	r2, #64	; 0x40
   183ba:	4637      	mov	r7, r6
   183bc:	781b      	ldrb	r3, [r3, #0]
   183be:	9202      	str	r2, [sp, #8]
   183c0:	f88d 3015 	strb.w	r3, [sp, #21]
   183c4:	682b      	ldr	r3, [r5, #0]
   183c6:	2112      	movs	r1, #18
   183c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   183cc:	4668      	mov	r0, sp
   183ce:	602b      	str	r3, [r5, #0]
   183d0:	f000 fbe8 	bl	18ba4 <rpc_gnss_client_request_alloc>
   183d4:	4604      	mov	r4, r0
   183d6:	9800      	ldr	r0, [sp, #0]
   183d8:	2c00      	cmp	r4, #0
   183da:	f040 80d6 	bne.w	1858a <gnss_interface_setopt+0x22e>
   183de:	2800      	cmp	r0, #0
   183e0:	f000 80da 	beq.w	18598 <gnss_interface_setopt+0x23c>
   183e4:	2212      	movs	r2, #18
   183e6:	f04f 0876 	mov.w	r8, #118	; 0x76
   183ea:	f04f 0e49 	mov.w	lr, #73	; 0x49
   183ee:	f04f 0a43 	mov.w	sl, #67	; 0x43
   183f2:	f04f 0954 	mov.w	r9, #84	; 0x54
   183f6:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 185e8 <gnss_interface_setopt+0x28c>
   183fa:	a906      	add	r1, sp, #24
   183fc:	f8bc 3000 	ldrh.w	r3, [ip]
   18400:	f880 800e 	strb.w	r8, [r0, #14]
   18404:	3301      	adds	r3, #1
   18406:	b29b      	uxth	r3, r3
   18408:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   1840c:	f841 6d14 	str.w	r6, [r1, #-20]!
   18410:	7144      	strb	r4, [r0, #5]
   18412:	7184      	strb	r4, [r0, #6]
   18414:	71c4      	strb	r4, [r0, #7]
   18416:	7204      	strb	r4, [r0, #8]
   18418:	7244      	strb	r4, [r0, #9]
   1841a:	7284      	strb	r4, [r0, #10]
   1841c:	72c4      	strb	r4, [r0, #11]
   1841e:	7102      	strb	r2, [r0, #4]
   18420:	f880 a00c 	strb.w	sl, [r0, #12]
   18424:	f880 900d 	strb.w	r9, [r0, #13]
   18428:	f880 e00f 	strb.w	lr, [r0, #15]
   1842c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 185ec <gnss_interface_setopt+0x290>
   18430:	6800      	ldr	r0, [r0, #0]
   18432:	f8ac 3000 	strh.w	r3, [ip]
   18436:	f005 fa11 	bl	1d85c <memcpy>
   1843a:	4639      	mov	r1, r7
   1843c:	9800      	ldr	r0, [sp, #0]
   1843e:	f8c8 4000 	str.w	r4, [r8]
   18442:	f000 fbc3 	bl	18bcc <rpc_gnss_client_request_send>
   18446:	2800      	cmp	r0, #0
   18448:	f040 80ab 	bne.w	185a2 <gnss_interface_setopt+0x246>
   1844c:	4f65      	ldr	r7, [pc, #404]	; (185e4 <gnss_interface_setopt+0x288>)
   1844e:	4e64      	ldr	r6, [pc, #400]	; (185e0 <gnss_interface_setopt+0x284>)
   18450:	4639      	mov	r1, r7
   18452:	4630      	mov	r0, r6
   18454:	f7f7 f894 	bl	f580 <bsd_os_timedwait>
   18458:	682c      	ldr	r4, [r5, #0]
   1845a:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   1845e:	d1f7      	bne.n	18450 <gnss_interface_setopt+0xf4>
   18460:	f8d8 0000 	ldr.w	r0, [r8]
   18464:	b118      	cbz	r0, 1846e <gnss_interface_setopt+0x112>
   18466:	f000 fbcf 	bl	18c08 <rpc_gnss_client_data_free>
   1846a:	f8c8 4000 	str.w	r4, [r8]
   1846e:	682b      	ldr	r3, [r5, #0]
   18470:	021b      	lsls	r3, r3, #8
   18472:	d576      	bpl.n	18562 <gnss_interface_setopt+0x206>
   18474:	2000      	movs	r0, #0
   18476:	682b      	ldr	r3, [r5, #0]
   18478:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1847c:	602b      	str	r3, [r5, #0]
   1847e:	b006      	add	sp, #24
   18480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18484:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18486:	2a02      	cmp	r2, #2
   18488:	d171      	bne.n	1856e <gnss_interface_setopt+0x212>
   1848a:	2208      	movs	r2, #8
   1848c:	f241 1603 	movw	r6, #4355	; 0x1103
   18490:	881b      	ldrh	r3, [r3, #0]
   18492:	9202      	str	r2, [sp, #8]
   18494:	f8ad 300f 	strh.w	r3, [sp, #15]
   18498:	4637      	mov	r7, r6
   1849a:	e793      	b.n	183c4 <gnss_interface_setopt+0x68>
   1849c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1849e:	2a01      	cmp	r2, #1
   184a0:	d165      	bne.n	1856e <gnss_interface_setopt+0x212>
   184a2:	f241 1603 	movw	r6, #4355	; 0x1103
   184a6:	781b      	ldrb	r3, [r3, #0]
   184a8:	9202      	str	r2, [sp, #8]
   184aa:	f88d 300c 	strb.w	r3, [sp, #12]
   184ae:	4637      	mov	r7, r6
   184b0:	e788      	b.n	183c4 <gnss_interface_setopt+0x68>
   184b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   184b4:	2a01      	cmp	r2, #1
   184b6:	d15a      	bne.n	1856e <gnss_interface_setopt+0x212>
   184b8:	2202      	movs	r2, #2
   184ba:	f241 1603 	movw	r6, #4355	; 0x1103
   184be:	781b      	ldrb	r3, [r3, #0]
   184c0:	9202      	str	r2, [sp, #8]
   184c2:	f88d 300d 	strb.w	r3, [sp, #13]
   184c6:	4637      	mov	r7, r6
   184c8:	e77c      	b.n	183c4 <gnss_interface_setopt+0x68>
   184ca:	682a      	ldr	r2, [r5, #0]
   184cc:	b292      	uxth	r2, r2
   184ce:	2a02      	cmp	r2, #2
   184d0:	d155      	bne.n	1857e <gnss_interface_setopt+0x222>
   184d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   184d4:	2a04      	cmp	r2, #4
   184d6:	d14a      	bne.n	1856e <gnss_interface_setopt+0x212>
   184d8:	2101      	movs	r1, #1
   184da:	f241 0604 	movw	r6, #4100	; 0x1004
   184de:	682a      	ldr	r2, [r5, #0]
   184e0:	6818      	ldr	r0, [r3, #0]
   184e2:	0c13      	lsrs	r3, r2, #16
   184e4:	041b      	lsls	r3, r3, #16
   184e6:	f043 0303 	orr.w	r3, r3, #3
   184ea:	f8cd 0009 	str.w	r0, [sp, #9]
   184ee:	602b      	str	r3, [r5, #0]
   184f0:	f88d 1008 	strb.w	r1, [sp, #8]
   184f4:	4637      	mov	r7, r6
   184f6:	e765      	b.n	183c4 <gnss_interface_setopt+0x68>
   184f8:	682b      	ldr	r3, [r5, #0]
   184fa:	b29b      	uxth	r3, r3
   184fc:	2b04      	cmp	r3, #4
   184fe:	d13e      	bne.n	1857e <gnss_interface_setopt+0x222>
   18500:	2300      	movs	r3, #0
   18502:	f241 0604 	movw	r6, #4100	; 0x1004
   18506:	f88d 3008 	strb.w	r3, [sp, #8]
   1850a:	f88d 3009 	strb.w	r3, [sp, #9]
   1850e:	f88d 300a 	strb.w	r3, [sp, #10]
   18512:	f88d 300b 	strb.w	r3, [sp, #11]
   18516:	f88d 300c 	strb.w	r3, [sp, #12]
   1851a:	4637      	mov	r7, r6
   1851c:	e752      	b.n	183c4 <gnss_interface_setopt+0x68>
   1851e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18520:	2a01      	cmp	r2, #1
   18522:	d124      	bne.n	1856e <gnss_interface_setopt+0x212>
   18524:	781b      	ldrb	r3, [r3, #0]
   18526:	2b01      	cmp	r3, #1
   18528:	d121      	bne.n	1856e <gnss_interface_setopt+0x212>
   1852a:	f241 1603 	movw	r6, #4355	; 0x1103
   1852e:	4637      	mov	r7, r6
   18530:	e748      	b.n	183c4 <gnss_interface_setopt+0x68>
   18532:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18534:	2a02      	cmp	r2, #2
   18536:	d11a      	bne.n	1856e <gnss_interface_setopt+0x212>
   18538:	2220      	movs	r2, #32
   1853a:	f241 1603 	movw	r6, #4355	; 0x1103
   1853e:	881b      	ldrh	r3, [r3, #0]
   18540:	9202      	str	r2, [sp, #8]
   18542:	f8ad 3013 	strh.w	r3, [sp, #19]
   18546:	4637      	mov	r7, r6
   18548:	e73c      	b.n	183c4 <gnss_interface_setopt+0x68>
   1854a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1854c:	2a02      	cmp	r2, #2
   1854e:	d10e      	bne.n	1856e <gnss_interface_setopt+0x212>
   18550:	2210      	movs	r2, #16
   18552:	f241 1603 	movw	r6, #4355	; 0x1103
   18556:	881b      	ldrh	r3, [r3, #0]
   18558:	9202      	str	r2, [sp, #8]
   1855a:	f8ad 3011 	strh.w	r3, [sp, #17]
   1855e:	4637      	mov	r7, r6
   18560:	e730      	b.n	183c4 <gnss_interface_setopt+0x68>
   18562:	200e      	movs	r0, #14
   18564:	f7f7 f8a0 	bl	f6a8 <bsd_os_errno_set>
   18568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1856c:	e783      	b.n	18476 <gnss_interface_setopt+0x11a>
   1856e:	2016      	movs	r0, #22
   18570:	f7f7 f89a 	bl	f6a8 <bsd_os_errno_set>
   18574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18578:	b006      	add	sp, #24
   1857a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1857e:	200e      	movs	r0, #14
   18580:	f7f7 f892 	bl	f6a8 <bsd_os_errno_set>
   18584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18588:	e779      	b.n	1847e <gnss_interface_setopt+0x122>
   1858a:	b128      	cbz	r0, 18598 <gnss_interface_setopt+0x23c>
   1858c:	6803      	ldr	r3, [r0, #0]
   1858e:	b11b      	cbz	r3, 18598 <gnss_interface_setopt+0x23c>
   18590:	4618      	mov	r0, r3
   18592:	f000 fb39 	bl	18c08 <rpc_gnss_client_data_free>
   18596:	9800      	ldr	r0, [sp, #0]
   18598:	f000 fb2e 	bl	18bf8 <rpc_gnss_client_message_free>
   1859c:	2023      	movs	r0, #35	; 0x23
   1859e:	f7f7 f883 	bl	f6a8 <bsd_os_errno_set>
   185a2:	682b      	ldr	r3, [r5, #0]
   185a4:	200e      	movs	r0, #14
   185a6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   185aa:	602b      	str	r3, [r5, #0]
   185ac:	f7f7 f87c 	bl	f6a8 <bsd_os_errno_set>
   185b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   185b4:	e763      	b.n	1847e <gnss_interface_setopt+0x122>
   185b6:	2009      	movs	r0, #9
   185b8:	f7f7 f876 	bl	f6a8 <bsd_os_errno_set>
   185bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   185c0:	e75d      	b.n	1847e <gnss_interface_setopt+0x122>
   185c2:	202a      	movs	r0, #42	; 0x2a
   185c4:	f7f7 f870 	bl	f6a8 <bsd_os_errno_set>
   185c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   185cc:	e757      	b.n	1847e <gnss_interface_setopt+0x122>
   185ce:	2073      	movs	r0, #115	; 0x73
   185d0:	f7f7 f86a 	bl	f6a8 <bsd_os_errno_set>
   185d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   185d8:	e751      	b.n	1847e <gnss_interface_setopt+0x122>
   185da:	bf00      	nop
   185dc:	20020c28 	.word	0x20020c28
   185e0:	49765443 	.word	0x49765443
   185e4:	2002c46c 	.word	0x2002c46c
   185e8:	20024f2e 	.word	0x20024f2e
   185ec:	20020c2c 	.word	0x20020c2c

000185f0 <gnss_interface_getopt>:
   185f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185f4:	4c81      	ldr	r4, [pc, #516]	; (187fc <gnss_interface_getopt+0x20c>)
   185f6:	b087      	sub	sp, #28
   185f8:	6825      	ldr	r5, [r4, #0]
   185fa:	4698      	mov	r8, r3
   185fc:	b2ad      	uxth	r5, r5
   185fe:	2d02      	cmp	r5, #2
   18600:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18602:	f040 80dd 	bne.w	187c0 <gnss_interface_getopt+0x1d0>
   18606:	6825      	ldr	r5, [r4, #0]
   18608:	03ee      	lsls	r6, r5, #15
   1860a:	f100 80eb 	bmi.w	187e4 <gnss_interface_getopt+0x1f4>
   1860e:	6825      	ldr	r5, [r4, #0]
   18610:	01ed      	lsls	r5, r5, #7
   18612:	f100 80ed 	bmi.w	187f0 <gnss_interface_getopt+0x200>
   18616:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1861a:	f040 80d7 	bne.w	187cc <gnss_interface_getopt+0x1dc>
   1861e:	4978      	ldr	r1, [pc, #480]	; (18800 <gnss_interface_getopt+0x210>)
   18620:	4288      	cmp	r0, r1
   18622:	f040 80d9 	bne.w	187d8 <gnss_interface_getopt+0x1e8>
   18626:	f1b8 0f00 	cmp.w	r8, #0
   1862a:	d00b      	beq.n	18644 <gnss_interface_getopt+0x54>
   1862c:	b153      	cbz	r3, 18644 <gnss_interface_getopt+0x54>
   1862e:	1e57      	subs	r7, r2, #1
   18630:	2f05      	cmp	r7, #5
   18632:	d807      	bhi.n	18644 <gnss_interface_getopt+0x54>
   18634:	e8df f007 	tbb	[pc, r7]
   18638:	0f030f0f 	.word	0x0f030f0f
   1863c:	0303      	.short	0x0303
   1863e:	681b      	ldr	r3, [r3, #0]
   18640:	2b01      	cmp	r3, #1
   18642:	d00b      	beq.n	1865c <gnss_interface_getopt+0x6c>
   18644:	2016      	movs	r0, #22
   18646:	f7f7 f82f 	bl	f6a8 <bsd_os_errno_set>
   1864a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1864e:	4628      	mov	r0, r5
   18650:	b007      	add	sp, #28
   18652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18656:	681b      	ldr	r3, [r3, #0]
   18658:	2b02      	cmp	r3, #2
   1865a:	d1f3      	bne.n	18644 <gnss_interface_getopt+0x54>
   1865c:	6823      	ldr	r3, [r4, #0]
   1865e:	2212      	movs	r2, #18
   18660:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   18664:	2100      	movs	r1, #0
   18666:	a801      	add	r0, sp, #4
   18668:	6023      	str	r3, [r4, #0]
   1866a:	f005 f921 	bl	1d8b0 <memset>
   1866e:	2112      	movs	r1, #18
   18670:	4668      	mov	r0, sp
   18672:	f000 fa97 	bl	18ba4 <rpc_gnss_client_request_alloc>
   18676:	4605      	mov	r5, r0
   18678:	9800      	ldr	r0, [sp, #0]
   1867a:	2d00      	cmp	r5, #0
   1867c:	f040 808a 	bne.w	18794 <gnss_interface_getopt+0x1a4>
   18680:	2800      	cmp	r0, #0
   18682:	f000 808e 	beq.w	187a2 <gnss_interface_getopt+0x1b2>
   18686:	f241 1602 	movw	r6, #4354	; 0x1102
   1868a:	f04f 0e49 	mov.w	lr, #73	; 0x49
   1868e:	2212      	movs	r2, #18
   18690:	f04f 0976 	mov.w	r9, #118	; 0x76
   18694:	f04f 0b43 	mov.w	fp, #67	; 0x43
   18698:	f04f 0a54 	mov.w	sl, #84	; 0x54
   1869c:	f8df c168 	ldr.w	ip, [pc, #360]	; 18808 <gnss_interface_getopt+0x218>
   186a0:	f880 e00f 	strb.w	lr, [r0, #15]
   186a4:	f8bc 3000 	ldrh.w	r3, [ip]
   186a8:	f880 900e 	strb.w	r9, [r0, #14]
   186ac:	3301      	adds	r3, #1
   186ae:	b29b      	uxth	r3, r3
   186b0:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   186b4:	f8cd e004 	str.w	lr, [sp, #4]
   186b8:	7145      	strb	r5, [r0, #5]
   186ba:	7185      	strb	r5, [r0, #6]
   186bc:	71c5      	strb	r5, [r0, #7]
   186be:	7205      	strb	r5, [r0, #8]
   186c0:	7245      	strb	r5, [r0, #9]
   186c2:	7285      	strb	r5, [r0, #10]
   186c4:	72c5      	strb	r5, [r0, #11]
   186c6:	a901      	add	r1, sp, #4
   186c8:	7102      	strb	r2, [r0, #4]
   186ca:	f880 b00c 	strb.w	fp, [r0, #12]
   186ce:	f880 a00d 	strb.w	sl, [r0, #13]
   186d2:	f8df 9138 	ldr.w	r9, [pc, #312]	; 1880c <gnss_interface_getopt+0x21c>
   186d6:	6800      	ldr	r0, [r0, #0]
   186d8:	f8ac 3000 	strh.w	r3, [ip]
   186dc:	f005 f8be 	bl	1d85c <memcpy>
   186e0:	4631      	mov	r1, r6
   186e2:	9800      	ldr	r0, [sp, #0]
   186e4:	f8c9 5000 	str.w	r5, [r9]
   186e8:	f000 fa70 	bl	18bcc <rpc_gnss_client_request_send>
   186ec:	2800      	cmp	r0, #0
   186ee:	d15d      	bne.n	187ac <gnss_interface_getopt+0x1bc>
   186f0:	4e44      	ldr	r6, [pc, #272]	; (18804 <gnss_interface_getopt+0x214>)
   186f2:	4d43      	ldr	r5, [pc, #268]	; (18800 <gnss_interface_getopt+0x210>)
   186f4:	4631      	mov	r1, r6
   186f6:	4628      	mov	r0, r5
   186f8:	f7f6 ff42 	bl	f580 <bsd_os_timedwait>
   186fc:	6823      	ldr	r3, [r4, #0]
   186fe:	01db      	lsls	r3, r3, #7
   18700:	d4f8      	bmi.n	186f4 <gnss_interface_getopt+0x104>
   18702:	f8d9 0000 	ldr.w	r0, [r9]
   18706:	b1d8      	cbz	r0, 18740 <gnss_interface_getopt+0x150>
   18708:	6825      	ldr	r5, [r4, #0]
   1870a:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   1870e:	d00f      	beq.n	18730 <gnss_interface_getopt+0x140>
   18710:	2f05      	cmp	r7, #5
   18712:	d837      	bhi.n	18784 <gnss_interface_getopt+0x194>
   18714:	e8df f007 	tbb	[pc, r7]
   18718:	2b26201a 	.word	0x2b26201a
   1871c:	0331      	.short	0x0331
   1871e:	2500      	movs	r5, #0
   18720:	7b43      	ldrb	r3, [r0, #13]
   18722:	f888 3000 	strb.w	r3, [r8]
   18726:	f000 fa6f 	bl	18c08 <rpc_gnss_client_data_free>
   1872a:	2300      	movs	r3, #0
   1872c:	f8c9 3000 	str.w	r3, [r9]
   18730:	6823      	ldr	r3, [r4, #0]
   18732:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   18736:	6023      	str	r3, [r4, #0]
   18738:	4628      	mov	r0, r5
   1873a:	b007      	add	sp, #28
   1873c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18740:	6823      	ldr	r3, [r4, #0]
   18742:	4605      	mov	r5, r0
   18744:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   18748:	6023      	str	r3, [r4, #0]
   1874a:	e7f5      	b.n	18738 <gnss_interface_getopt+0x148>
   1874c:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   18750:	2500      	movs	r5, #0
   18752:	f8a8 3000 	strh.w	r3, [r8]
   18756:	e7e6      	b.n	18726 <gnss_interface_getopt+0x136>
   18758:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   1875c:	2500      	movs	r5, #0
   1875e:	f8a8 3000 	strh.w	r3, [r8]
   18762:	e7e0      	b.n	18726 <gnss_interface_getopt+0x136>
   18764:	7b83      	ldrb	r3, [r0, #14]
   18766:	2500      	movs	r5, #0
   18768:	f888 3000 	strb.w	r3, [r8]
   1876c:	e7db      	b.n	18726 <gnss_interface_getopt+0x136>
   1876e:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   18772:	2500      	movs	r5, #0
   18774:	f8a8 3000 	strh.w	r3, [r8]
   18778:	e7d5      	b.n	18726 <gnss_interface_getopt+0x136>
   1877a:	7b03      	ldrb	r3, [r0, #12]
   1877c:	2500      	movs	r5, #0
   1877e:	f888 3000 	strb.w	r3, [r8]
   18782:	e7d0      	b.n	18726 <gnss_interface_getopt+0x136>
   18784:	2016      	movs	r0, #22
   18786:	f7f6 ff8f 	bl	f6a8 <bsd_os_errno_set>
   1878a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1878e:	f8d9 0000 	ldr.w	r0, [r9]
   18792:	e7c8      	b.n	18726 <gnss_interface_getopt+0x136>
   18794:	b128      	cbz	r0, 187a2 <gnss_interface_getopt+0x1b2>
   18796:	6803      	ldr	r3, [r0, #0]
   18798:	b11b      	cbz	r3, 187a2 <gnss_interface_getopt+0x1b2>
   1879a:	4618      	mov	r0, r3
   1879c:	f000 fa34 	bl	18c08 <rpc_gnss_client_data_free>
   187a0:	9800      	ldr	r0, [sp, #0]
   187a2:	f000 fa29 	bl	18bf8 <rpc_gnss_client_message_free>
   187a6:	2023      	movs	r0, #35	; 0x23
   187a8:	f7f6 ff7e 	bl	f6a8 <bsd_os_errno_set>
   187ac:	6823      	ldr	r3, [r4, #0]
   187ae:	200e      	movs	r0, #14
   187b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   187b4:	6023      	str	r3, [r4, #0]
   187b6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   187ba:	f7f6 ff75 	bl	f6a8 <bsd_os_errno_set>
   187be:	e746      	b.n	1864e <gnss_interface_getopt+0x5e>
   187c0:	200e      	movs	r0, #14
   187c2:	f7f6 ff71 	bl	f6a8 <bsd_os_errno_set>
   187c6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   187ca:	e740      	b.n	1864e <gnss_interface_getopt+0x5e>
   187cc:	202a      	movs	r0, #42	; 0x2a
   187ce:	f7f6 ff6b 	bl	f6a8 <bsd_os_errno_set>
   187d2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   187d6:	e73a      	b.n	1864e <gnss_interface_getopt+0x5e>
   187d8:	2009      	movs	r0, #9
   187da:	f7f6 ff65 	bl	f6a8 <bsd_os_errno_set>
   187de:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   187e2:	e734      	b.n	1864e <gnss_interface_getopt+0x5e>
   187e4:	2005      	movs	r0, #5
   187e6:	f7f6 ff5f 	bl	f6a8 <bsd_os_errno_set>
   187ea:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   187ee:	e72e      	b.n	1864e <gnss_interface_getopt+0x5e>
   187f0:	2073      	movs	r0, #115	; 0x73
   187f2:	f7f6 ff59 	bl	f6a8 <bsd_os_errno_set>
   187f6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   187fa:	e728      	b.n	1864e <gnss_interface_getopt+0x5e>
   187fc:	20020c28 	.word	0x20020c28
   18800:	49765443 	.word	0x49765443
   18804:	2002c46c 	.word	0x2002c46c
   18808:	20024f2e 	.word	0x20024f2e
   1880c:	20020c2c 	.word	0x20020c2c

00018810 <gnss_interface_init>:
   18810:	2100      	movs	r1, #0
   18812:	b538      	push	{r3, r4, r5, lr}
   18814:	4c09      	ldr	r4, [pc, #36]	; (1883c <gnss_interface_init+0x2c>)
   18816:	4d0a      	ldr	r5, [pc, #40]	; (18840 <gnss_interface_init+0x30>)
   18818:	6822      	ldr	r2, [r4, #0]
   1881a:	480a      	ldr	r0, [pc, #40]	; (18844 <gnss_interface_init+0x34>)
   1881c:	4b0a      	ldr	r3, [pc, #40]	; (18848 <gnss_interface_init+0x38>)
   1881e:	402a      	ands	r2, r5
   18820:	6022      	str	r2, [r4, #0]
   18822:	8001      	strh	r1, [r0, #0]
   18824:	6019      	str	r1, [r3, #0]
   18826:	f000 f9b7 	bl	18b98 <rpc_gnss_client_init>
   1882a:	b928      	cbnz	r0, 18838 <gnss_interface_init+0x28>
   1882c:	6823      	ldr	r3, [r4, #0]
   1882e:	402b      	ands	r3, r5
   18830:	f043 0301 	orr.w	r3, r3, #1
   18834:	6023      	str	r3, [r4, #0]
   18836:	bd38      	pop	{r3, r4, r5, pc}
   18838:	2003      	movs	r0, #3
   1883a:	bd38      	pop	{r3, r4, r5, pc}
   1883c:	20020c28 	.word	0x20020c28
   18840:	ffff0000 	.word	0xffff0000
   18844:	20024f2e 	.word	0x20024f2e
   18848:	20020c2c 	.word	0x20020c2c

0001884c <gnss_interface_open>:
   1884c:	2801      	cmp	r0, #1
   1884e:	b510      	push	{r4, lr}
   18850:	d120      	bne.n	18894 <gnss_interface_open+0x48>
   18852:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   18856:	d11d      	bne.n	18894 <gnss_interface_open+0x48>
   18858:	2902      	cmp	r1, #2
   1885a:	d11b      	bne.n	18894 <gnss_interface_open+0x48>
   1885c:	4c13      	ldr	r4, [pc, #76]	; (188ac <gnss_interface_open+0x60>)
   1885e:	6823      	ldr	r3, [r4, #0]
   18860:	b29b      	uxth	r3, r3
   18862:	2b01      	cmp	r3, #1
   18864:	d11c      	bne.n	188a0 <gnss_interface_open+0x54>
   18866:	6823      	ldr	r3, [r4, #0]
   18868:	4608      	mov	r0, r1
   1886a:	0c1b      	lsrs	r3, r3, #16
   1886c:	041b      	lsls	r3, r3, #16
   1886e:	f043 0302 	orr.w	r3, r3, #2
   18872:	2200      	movs	r2, #0
   18874:	490e      	ldr	r1, [pc, #56]	; (188b0 <gnss_interface_open+0x64>)
   18876:	6023      	str	r3, [r4, #0]
   18878:	f000 faac 	bl	18dd4 <packet_handler_create>
   1887c:	4a0d      	ldr	r2, [pc, #52]	; (188b4 <gnss_interface_open+0x68>)
   1887e:	6010      	str	r0, [r2, #0]
   18880:	b170      	cbz	r0, 188a0 <gnss_interface_open+0x54>
   18882:	6823      	ldr	r3, [r4, #0]
   18884:	6802      	ldr	r2, [r0, #0]
   18886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1888a:	6812      	ldr	r2, [r2, #0]
   1888c:	6023      	str	r3, [r4, #0]
   1888e:	4790      	blx	r2
   18890:	4809      	ldr	r0, [pc, #36]	; (188b8 <gnss_interface_open+0x6c>)
   18892:	bd10      	pop	{r4, pc}
   18894:	2016      	movs	r0, #22
   18896:	f7f6 ff07 	bl	f6a8 <bsd_os_errno_set>
   1889a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1889e:	bd10      	pop	{r4, pc}
   188a0:	200e      	movs	r0, #14
   188a2:	f7f6 ff01 	bl	f6a8 <bsd_os_errno_set>
   188a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   188aa:	bd10      	pop	{r4, pc}
   188ac:	20020c28 	.word	0x20020c28
   188b0:	00017ba9 	.word	0x00017ba9
   188b4:	20020c30 	.word	0x20020c30
   188b8:	49765443 	.word	0x49765443

000188bc <gnss_interface_close>:
   188bc:	b530      	push	{r4, r5, lr}
   188be:	4b13      	ldr	r3, [pc, #76]	; (1890c <gnss_interface_close+0x50>)
   188c0:	b083      	sub	sp, #12
   188c2:	4298      	cmp	r0, r3
   188c4:	d11c      	bne.n	18900 <gnss_interface_close+0x44>
   188c6:	4c12      	ldr	r4, [pc, #72]	; (18910 <gnss_interface_close+0x54>)
   188c8:	6823      	ldr	r3, [r4, #0]
   188ca:	b29b      	uxth	r3, r3
   188cc:	2b04      	cmp	r3, #4
   188ce:	d00f      	beq.n	188f0 <gnss_interface_close+0x34>
   188d0:	4d10      	ldr	r5, [pc, #64]	; (18914 <gnss_interface_close+0x58>)
   188d2:	6828      	ldr	r0, [r5, #0]
   188d4:	b118      	cbz	r0, 188de <gnss_interface_close+0x22>
   188d6:	f000 fa9d 	bl	18e14 <packet_handler_delete>
   188da:	2300      	movs	r3, #0
   188dc:	602b      	str	r3, [r5, #0]
   188de:	2000      	movs	r0, #0
   188e0:	6823      	ldr	r3, [r4, #0]
   188e2:	0c1b      	lsrs	r3, r3, #16
   188e4:	041b      	lsls	r3, r3, #16
   188e6:	f043 0301 	orr.w	r3, r3, #1
   188ea:	6023      	str	r3, [r4, #0]
   188ec:	b003      	add	sp, #12
   188ee:	bd30      	pop	{r4, r5, pc}
   188f0:	2300      	movs	r3, #0
   188f2:	2208      	movs	r2, #8
   188f4:	9300      	str	r3, [sp, #0]
   188f6:	f44f 7101 	mov.w	r1, #516	; 0x204
   188fa:	f7fc febf 	bl	1567c <nrf_setsockopt>
   188fe:	e7e7      	b.n	188d0 <gnss_interface_close+0x14>
   18900:	2009      	movs	r0, #9
   18902:	f7f6 fed1 	bl	f6a8 <bsd_os_errno_set>
   18906:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1890a:	e7ef      	b.n	188ec <gnss_interface_close+0x30>
   1890c:	49765443 	.word	0x49765443
   18910:	20020c28 	.word	0x20020c28
   18914:	20020c30 	.word	0x20020c30

00018918 <rpc_gnss_serialize_utc>:
   18918:	4603      	mov	r3, r0
   1891a:	b1d8      	cbz	r0, 18954 <rpc_gnss_serialize_utc+0x3c>
   1891c:	b1d1      	cbz	r1, 18954 <rpc_gnss_serialize_utc+0x3c>
   1891e:	2000      	movs	r0, #0
   18920:	2201      	movs	r2, #1
   18922:	7048      	strb	r0, [r1, #1]
   18924:	700a      	strb	r2, [r1, #0]
   18926:	685a      	ldr	r2, [r3, #4]
   18928:	2010      	movs	r0, #16
   1892a:	f8c1 2006 	str.w	r2, [r1, #6]
   1892e:	681a      	ldr	r2, [r3, #0]
   18930:	f8c1 2002 	str.w	r2, [r1, #2]
   18934:	f993 200a 	ldrsb.w	r2, [r3, #10]
   18938:	730a      	strb	r2, [r1, #12]
   1893a:	f993 200d 	ldrsb.w	r2, [r3, #13]
   1893e:	73ca      	strb	r2, [r1, #15]
   18940:	f993 200c 	ldrsb.w	r2, [r3, #12]
   18944:	738a      	strb	r2, [r1, #14]
   18946:	7a1a      	ldrb	r2, [r3, #8]
   18948:	728a      	strb	r2, [r1, #10]
   1894a:	7ada      	ldrb	r2, [r3, #11]
   1894c:	734a      	strb	r2, [r1, #13]
   1894e:	7a5b      	ldrb	r3, [r3, #9]
   18950:	72cb      	strb	r3, [r1, #11]
   18952:	4770      	bx	lr
   18954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18958:	4770      	bx	lr
   1895a:	bf00      	nop

0001895c <rpc_gnss_serialize_ephe>:
   1895c:	4603      	mov	r3, r0
   1895e:	2800      	cmp	r0, #0
   18960:	d04b      	beq.n	189fa <rpc_gnss_serialize_ephe+0x9e>
   18962:	2900      	cmp	r1, #0
   18964:	d049      	beq.n	189fa <rpc_gnss_serialize_ephe+0x9e>
   18966:	2000      	movs	r0, #0
   18968:	2202      	movs	r2, #2
   1896a:	7048      	strb	r0, [r1, #1]
   1896c:	700a      	strb	r2, [r1, #0]
   1896e:	68da      	ldr	r2, [r3, #12]
   18970:	2040      	movs	r0, #64	; 0x40
   18972:	f8c1 200b 	str.w	r2, [r1, #11]
   18976:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1897a:	f8a1 2009 	strh.w	r2, [r1, #9]
   1897e:	f993 2006 	ldrsb.w	r2, [r3, #6]
   18982:	720a      	strb	r2, [r1, #8]
   18984:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   18988:	878a      	strh	r2, [r1, #60]	; 0x3c
   1898a:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   1898e:	86ca      	strh	r2, [r1, #54]	; 0x36
   18990:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   18994:	874a      	strh	r2, [r1, #58]	; 0x3a
   18996:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   1899a:	868a      	strh	r2, [r1, #52]	; 0x34
   1899c:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   189a0:	87ca      	strh	r2, [r1, #62]	; 0x3e
   189a2:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   189a6:	870a      	strh	r2, [r1, #56]	; 0x38
   189a8:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   189ac:	830a      	strh	r2, [r1, #24]
   189ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   189b0:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   189b4:	7c9a      	ldrb	r2, [r3, #18]
   189b6:	744a      	strb	r2, [r1, #17]
   189b8:	785a      	ldrb	r2, [r3, #1]
   189ba:	70ca      	strb	r2, [r1, #3]
   189bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   189be:	62ca      	str	r2, [r1, #44]	; 0x2c
   189c0:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   189c4:	84ca      	strh	r2, [r1, #38]	; 0x26
   189c6:	885a      	ldrh	r2, [r3, #2]
   189c8:	808a      	strh	r2, [r1, #4]
   189ca:	6a1a      	ldr	r2, [r3, #32]
   189cc:	f8c1 201a 	str.w	r2, [r1, #26]
   189d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   189d2:	630a      	str	r2, [r1, #48]	; 0x30
   189d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   189d6:	f8c1 201e 	str.w	r2, [r1, #30]
   189da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   189dc:	628a      	str	r2, [r1, #40]	; 0x28
   189de:	781a      	ldrb	r2, [r3, #0]
   189e0:	708a      	strb	r2, [r1, #2]
   189e2:	f993 2010 	ldrsb.w	r2, [r3, #16]
   189e6:	73ca      	strb	r2, [r1, #15]
   189e8:	889a      	ldrh	r2, [r3, #4]
   189ea:	80ca      	strh	r2, [r1, #6]
   189ec:	8a9a      	ldrh	r2, [r3, #20]
   189ee:	824a      	strh	r2, [r1, #18]
   189f0:	7c5a      	ldrb	r2, [r3, #17]
   189f2:	740a      	strb	r2, [r1, #16]
   189f4:	699b      	ldr	r3, [r3, #24]
   189f6:	614b      	str	r3, [r1, #20]
   189f8:	4770      	bx	lr
   189fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   189fe:	4770      	bx	lr

00018a00 <rpc_gnss_serialize_alm>:
   18a00:	4603      	mov	r3, r0
   18a02:	b360      	cbz	r0, 18a5e <rpc_gnss_serialize_alm+0x5e>
   18a04:	b359      	cbz	r1, 18a5e <rpc_gnss_serialize_alm+0x5e>
   18a06:	2000      	movs	r0, #0
   18a08:	2203      	movs	r2, #3
   18a0a:	7048      	strb	r0, [r1, #1]
   18a0c:	700a      	strb	r2, [r1, #0]
   18a0e:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   18a12:	2021      	movs	r0, #33	; 0x21
   18a14:	f8a1 201d 	strh.w	r2, [r1, #29]
   18a18:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   18a1c:	f8a1 201f 	strh.w	r2, [r1, #31]
   18a20:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   18a24:	810a      	strh	r2, [r1, #8]
   18a26:	889a      	ldrh	r2, [r3, #4]
   18a28:	80ca      	strh	r2, [r1, #6]
   18a2a:	78da      	ldrb	r2, [r3, #3]
   18a2c:	714a      	strb	r2, [r1, #5]
   18a2e:	699a      	ldr	r2, [r3, #24]
   18a30:	f8c1 2019 	str.w	r2, [r1, #25]
   18a34:	691a      	ldr	r2, [r3, #16]
   18a36:	f8c1 2011 	str.w	r2, [r1, #17]
   18a3a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   18a3e:	814a      	strh	r2, [r1, #10]
   18a40:	68da      	ldr	r2, [r3, #12]
   18a42:	f8c1 200d 	str.w	r2, [r1, #13]
   18a46:	7a9a      	ldrb	r2, [r3, #10]
   18a48:	730a      	strb	r2, [r1, #12]
   18a4a:	781a      	ldrb	r2, [r3, #0]
   18a4c:	708a      	strb	r2, [r1, #2]
   18a4e:	789a      	ldrb	r2, [r3, #2]
   18a50:	710a      	strb	r2, [r1, #4]
   18a52:	695a      	ldr	r2, [r3, #20]
   18a54:	f8c1 2015 	str.w	r2, [r1, #21]
   18a58:	785b      	ldrb	r3, [r3, #1]
   18a5a:	70cb      	strb	r3, [r1, #3]
   18a5c:	4770      	bx	lr
   18a5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18a62:	4770      	bx	lr

00018a64 <rpc_gnss_serialize_klob>:
   18a64:	4603      	mov	r3, r0
   18a66:	b1f0      	cbz	r0, 18aa6 <rpc_gnss_serialize_klob+0x42>
   18a68:	b1e9      	cbz	r1, 18aa6 <rpc_gnss_serialize_klob+0x42>
   18a6a:	2000      	movs	r0, #0
   18a6c:	2204      	movs	r2, #4
   18a6e:	7048      	strb	r0, [r1, #1]
   18a70:	700a      	strb	r2, [r1, #0]
   18a72:	f993 2000 	ldrsb.w	r2, [r3]
   18a76:	200a      	movs	r0, #10
   18a78:	708a      	strb	r2, [r1, #2]
   18a7a:	f993 2001 	ldrsb.w	r2, [r3, #1]
   18a7e:	70ca      	strb	r2, [r1, #3]
   18a80:	f993 2002 	ldrsb.w	r2, [r3, #2]
   18a84:	710a      	strb	r2, [r1, #4]
   18a86:	f993 2003 	ldrsb.w	r2, [r3, #3]
   18a8a:	714a      	strb	r2, [r1, #5]
   18a8c:	f993 2004 	ldrsb.w	r2, [r3, #4]
   18a90:	718a      	strb	r2, [r1, #6]
   18a92:	f993 2005 	ldrsb.w	r2, [r3, #5]
   18a96:	71ca      	strb	r2, [r1, #7]
   18a98:	f993 2006 	ldrsb.w	r2, [r3, #6]
   18a9c:	720a      	strb	r2, [r1, #8]
   18a9e:	f993 3007 	ldrsb.w	r3, [r3, #7]
   18aa2:	724b      	strb	r3, [r1, #9]
   18aa4:	4770      	bx	lr
   18aa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18aaa:	4770      	bx	lr

00018aac <rpc_gnss_serialize_nequick>:
   18aac:	4603      	mov	r3, r0
   18aae:	b198      	cbz	r0, 18ad8 <rpc_gnss_serialize_nequick+0x2c>
   18ab0:	b191      	cbz	r1, 18ad8 <rpc_gnss_serialize_nequick+0x2c>
   18ab2:	2000      	movs	r0, #0
   18ab4:	2205      	movs	r2, #5
   18ab6:	7048      	strb	r0, [r1, #1]
   18ab8:	700a      	strb	r2, [r1, #0]
   18aba:	f9b3 2000 	ldrsh.w	r2, [r3]
   18abe:	200a      	movs	r0, #10
   18ac0:	804a      	strh	r2, [r1, #2]
   18ac2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   18ac6:	808a      	strh	r2, [r1, #4]
   18ac8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   18acc:	80ca      	strh	r2, [r1, #6]
   18ace:	799a      	ldrb	r2, [r3, #6]
   18ad0:	720a      	strb	r2, [r1, #8]
   18ad2:	79db      	ldrb	r3, [r3, #7]
   18ad4:	724b      	strb	r3, [r1, #9]
   18ad6:	4770      	bx	lr
   18ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18adc:	4770      	bx	lr
   18ade:	bf00      	nop

00018ae0 <rpc_gnss_serialize_time_and_sv_tow>:
   18ae0:	b310      	cbz	r0, 18b28 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   18ae2:	b309      	cbz	r1, 18b28 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   18ae4:	b470      	push	{r4, r5, r6}
   18ae6:	2500      	movs	r5, #0
   18ae8:	2606      	movs	r6, #6
   18aea:	460c      	mov	r4, r1
   18aec:	704d      	strb	r5, [r1, #1]
   18aee:	700e      	strb	r6, [r1, #0]
   18af0:	462b      	mov	r3, r5
   18af2:	8805      	ldrh	r5, [r0, #0]
   18af4:	4602      	mov	r2, r0
   18af6:	804d      	strh	r5, [r1, #2]
   18af8:	68c5      	ldr	r5, [r0, #12]
   18afa:	f8c1 500a 	str.w	r5, [r1, #10]
   18afe:	8905      	ldrh	r5, [r0, #8]
   18b00:	810d      	strh	r5, [r1, #8]
   18b02:	6840      	ldr	r0, [r0, #4]
   18b04:	6048      	str	r0, [r1, #4]
   18b06:	8a15      	ldrh	r5, [r2, #16]
   18b08:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   18b0c:	4408      	add	r0, r1
   18b0e:	81c5      	strh	r5, [r0, #14]
   18b10:	7c90      	ldrb	r0, [r2, #18]
   18b12:	3301      	adds	r3, #1
   18b14:	2b20      	cmp	r3, #32
   18b16:	7420      	strb	r0, [r4, #16]
   18b18:	f102 0204 	add.w	r2, r2, #4
   18b1c:	f104 0403 	add.w	r4, r4, #3
   18b20:	d1f1      	bne.n	18b06 <rpc_gnss_serialize_time_and_sv_tow+0x26>
   18b22:	206e      	movs	r0, #110	; 0x6e
   18b24:	bc70      	pop	{r4, r5, r6}
   18b26:	4770      	bx	lr
   18b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18b2c:	4770      	bx	lr
   18b2e:	bf00      	nop

00018b30 <rpc_gnss_serialize_location>:
   18b30:	4603      	mov	r3, r0
   18b32:	b1c8      	cbz	r0, 18b68 <rpc_gnss_serialize_location+0x38>
   18b34:	b1c1      	cbz	r1, 18b68 <rpc_gnss_serialize_location+0x38>
   18b36:	2000      	movs	r0, #0
   18b38:	2207      	movs	r2, #7
   18b3a:	7048      	strb	r0, [r1, #1]
   18b3c:	700a      	strb	r2, [r1, #0]
   18b3e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   18b42:	2011      	movs	r0, #17
   18b44:	814a      	strh	r2, [r1, #10]
   18b46:	7b9a      	ldrb	r2, [r3, #14]
   18b48:	740a      	strb	r2, [r1, #16]
   18b4a:	681a      	ldr	r2, [r3, #0]
   18b4c:	f8c1 2002 	str.w	r2, [r1, #2]
   18b50:	685a      	ldr	r2, [r3, #4]
   18b52:	f8c1 2006 	str.w	r2, [r1, #6]
   18b56:	7b1a      	ldrb	r2, [r3, #12]
   18b58:	738a      	strb	r2, [r1, #14]
   18b5a:	7b5a      	ldrb	r2, [r3, #13]
   18b5c:	73ca      	strb	r2, [r1, #15]
   18b5e:	7a9a      	ldrb	r2, [r3, #10]
   18b60:	730a      	strb	r2, [r1, #12]
   18b62:	7adb      	ldrb	r3, [r3, #11]
   18b64:	734b      	strb	r3, [r1, #13]
   18b66:	4770      	bx	lr
   18b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18b6c:	4770      	bx	lr
   18b6e:	bf00      	nop

00018b70 <rpc_gnss_serialize_integrity>:
   18b70:	b148      	cbz	r0, 18b86 <rpc_gnss_serialize_integrity+0x16>
   18b72:	b141      	cbz	r1, 18b86 <rpc_gnss_serialize_integrity+0x16>
   18b74:	2200      	movs	r2, #0
   18b76:	2308      	movs	r3, #8
   18b78:	704a      	strb	r2, [r1, #1]
   18b7a:	700b      	strb	r3, [r1, #0]
   18b7c:	6803      	ldr	r3, [r0, #0]
   18b7e:	2006      	movs	r0, #6
   18b80:	f8c1 3002 	str.w	r3, [r1, #2]
   18b84:	4770      	bx	lr
   18b86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18b8a:	4770      	bx	lr

00018b8c <gnss_client_event_handler>:
   18b8c:	f850 1b08 	ldr.w	r1, [r0], #8
   18b90:	0c09      	lsrs	r1, r1, #16
   18b92:	f7ff b817 	b.w	17bc4 <rpc_gnss_event_handler>
   18b96:	bf00      	nop

00018b98 <rpc_gnss_client_init>:
   18b98:	4801      	ldr	r0, [pc, #4]	; (18ba0 <rpc_gnss_client_init+0x8>)
   18b9a:	f7fe bb79 	b.w	17290 <rpc_client_register>
   18b9e:	bf00      	nop
   18ba0:	0001f1bc 	.word	0x0001f1bc

00018ba4 <rpc_gnss_client_request_alloc>:
   18ba4:	2300      	movs	r3, #0
   18ba6:	b510      	push	{r4, lr}
   18ba8:	b082      	sub	sp, #8
   18baa:	9301      	str	r3, [sp, #4]
   18bac:	b158      	cbz	r0, 18bc6 <rpc_gnss_client_request_alloc+0x22>
   18bae:	4604      	mov	r4, r0
   18bb0:	aa01      	add	r2, sp, #4
   18bb2:	2007      	movs	r0, #7
   18bb4:	f7fe fda4 	bl	17700 <rpc_message_alloc>
   18bb8:	b918      	cbnz	r0, 18bc2 <rpc_gnss_client_request_alloc+0x1e>
   18bba:	9b01      	ldr	r3, [sp, #4]
   18bbc:	b10b      	cbz	r3, 18bc2 <rpc_gnss_client_request_alloc+0x1e>
   18bbe:	3308      	adds	r3, #8
   18bc0:	6023      	str	r3, [r4, #0]
   18bc2:	b002      	add	sp, #8
   18bc4:	bd10      	pop	{r4, pc}
   18bc6:	2007      	movs	r0, #7
   18bc8:	b002      	add	sp, #8
   18bca:	bd10      	pop	{r4, pc}

00018bcc <rpc_gnss_client_request_send>:
   18bcc:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   18bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   18bd4:	d10b      	bne.n	18bee <rpc_gnss_client_request_send+0x22>
   18bd6:	b160      	cbz	r0, 18bf2 <rpc_gnss_client_request_send+0x26>
   18bd8:	4603      	mov	r3, r0
   18bda:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   18bde:	2007      	movs	r0, #7
   18be0:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   18be4:	f843 1d08 	str.w	r1, [r3, #-8]!
   18be8:	4619      	mov	r1, r3
   18bea:	f7fe bd71 	b.w	176d0 <rpc_message_send>
   18bee:	200f      	movs	r0, #15
   18bf0:	4770      	bx	lr
   18bf2:	2007      	movs	r0, #7
   18bf4:	4770      	bx	lr
   18bf6:	bf00      	nop

00018bf8 <rpc_gnss_client_message_free>:
   18bf8:	b120      	cbz	r0, 18c04 <rpc_gnss_client_message_free+0xc>
   18bfa:	f1a0 0108 	sub.w	r1, r0, #8
   18bfe:	2007      	movs	r0, #7
   18c00:	f7fe bdb0 	b.w	17764 <rpc_message_free>
   18c04:	2007      	movs	r0, #7
   18c06:	4770      	bx	lr

00018c08 <rpc_gnss_client_data_free>:
   18c08:	b118      	cbz	r0, 18c12 <rpc_gnss_client_data_free+0xa>
   18c0a:	4601      	mov	r1, r0
   18c0c:	2007      	movs	r0, #7
   18c0e:	f7fe bebb 	b.w	17988 <rpc_message_data_free>
   18c12:	2007      	movs	r0, #7
   18c14:	4770      	bx	lr
   18c16:	bf00      	nop

00018c18 <datagram_handler_init>:
   18c18:	b510      	push	{r4, lr}
   18c1a:	4604      	mov	r4, r0
   18c1c:	200c      	movs	r0, #12
   18c1e:	f7f9 f963 	bl	11ee8 <nrf_malloc>
   18c22:	60e0      	str	r0, [r4, #12]
   18c24:	b118      	cbz	r0, 18c2e <datagram_handler_init+0x16>
   18c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18c2a:	f7fc bc1d 	b.w	15468 <linked_list_init>
   18c2e:	2004      	movs	r0, #4
   18c30:	bd10      	pop	{r4, pc}
   18c32:	bf00      	nop

00018c34 <datagram_handler_put>:
   18c34:	b570      	push	{r4, r5, r6, lr}
   18c36:	4606      	mov	r6, r0
   18c38:	2014      	movs	r0, #20
   18c3a:	460d      	mov	r5, r1
   18c3c:	f7f9 f954 	bl	11ee8 <nrf_malloc>
   18c40:	b178      	cbz	r0, 18c62 <datagram_handler_put+0x2e>
   18c42:	682b      	ldr	r3, [r5, #0]
   18c44:	4604      	mov	r4, r0
   18c46:	6043      	str	r3, [r0, #4]
   18c48:	686b      	ldr	r3, [r5, #4]
   18c4a:	4601      	mov	r1, r0
   18c4c:	6083      	str	r3, [r0, #8]
   18c4e:	68eb      	ldr	r3, [r5, #12]
   18c50:	60c3      	str	r3, [r0, #12]
   18c52:	68ab      	ldr	r3, [r5, #8]
   18c54:	6103      	str	r3, [r0, #16]
   18c56:	68f0      	ldr	r0, [r6, #12]
   18c58:	f7fc fc10 	bl	1547c <linked_list_push>
   18c5c:	b920      	cbnz	r0, 18c68 <datagram_handler_put+0x34>
   18c5e:	6868      	ldr	r0, [r5, #4]
   18c60:	bd70      	pop	{r4, r5, r6, pc}
   18c62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18c66:	bd70      	pop	{r4, r5, r6, pc}
   18c68:	4620      	mov	r0, r4
   18c6a:	f7f9 f947 	bl	11efc <nrf_free>
   18c6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18c72:	bd70      	pop	{r4, r5, r6, pc}

00018c74 <datagram_handler_get>:
   18c74:	b5f0      	push	{r4, r5, r6, r7, lr}
   18c76:	4606      	mov	r6, r0
   18c78:	b085      	sub	sp, #20
   18c7a:	68c0      	ldr	r0, [r0, #12]
   18c7c:	460c      	mov	r4, r1
   18c7e:	4617      	mov	r7, r2
   18c80:	f7fc fc1c 	bl	154bc <linked_list_peek>
   18c84:	2800      	cmp	r0, #0
   18c86:	d037      	beq.n	18cf8 <datagram_handler_get+0x84>
   18c88:	6882      	ldr	r2, [r0, #8]
   18c8a:	4605      	mov	r5, r0
   18c8c:	e9d4 0300 	ldrd	r0, r3, [r4]
   18c90:	429a      	cmp	r2, r3
   18c92:	bf28      	it	cs
   18c94:	461a      	movcs	r2, r3
   18c96:	6062      	str	r2, [r4, #4]
   18c98:	b110      	cbz	r0, 18ca0 <datagram_handler_get+0x2c>
   18c9a:	6869      	ldr	r1, [r5, #4]
   18c9c:	f004 fdde 	bl	1d85c <memcpy>
   18ca0:	68a0      	ldr	r0, [r4, #8]
   18ca2:	b118      	cbz	r0, 18cac <datagram_handler_get+0x38>
   18ca4:	692b      	ldr	r3, [r5, #16]
   18ca6:	b10b      	cbz	r3, 18cac <datagram_handler_get+0x38>
   18ca8:	68ea      	ldr	r2, [r5, #12]
   18caa:	b9e2      	cbnz	r2, 18ce6 <datagram_handler_get+0x72>
   18cac:	2300      	movs	r3, #0
   18cae:	60e3      	str	r3, [r4, #12]
   18cb0:	073b      	lsls	r3, r7, #28
   18cb2:	d502      	bpl.n	18cba <datagram_handler_get+0x46>
   18cb4:	6860      	ldr	r0, [r4, #4]
   18cb6:	b005      	add	sp, #20
   18cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18cba:	68f0      	ldr	r0, [r6, #12]
   18cbc:	f7fc fbf4 	bl	154a8 <linked_list_pop>
   18cc0:	4605      	mov	r5, r0
   18cc2:	2800      	cmp	r0, #0
   18cc4:	d0f6      	beq.n	18cb4 <datagram_handler_get+0x40>
   18cc6:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   18cca:	6902      	ldr	r2, [r0, #16]
   18ccc:	9300      	str	r3, [sp, #0]
   18cce:	68c3      	ldr	r3, [r0, #12]
   18cd0:	e9cd 1201 	strd	r1, r2, [sp, #4]
   18cd4:	9303      	str	r3, [sp, #12]
   18cd6:	4668      	mov	r0, sp
   18cd8:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
   18cdc:	4798      	blx	r3
   18cde:	4628      	mov	r0, r5
   18ce0:	f7f9 f90c 	bl	11efc <nrf_free>
   18ce4:	e7e6      	b.n	18cb4 <datagram_handler_get+0x40>
   18ce6:	68e3      	ldr	r3, [r4, #12]
   18ce8:	429a      	cmp	r2, r3
   18cea:	bf28      	it	cs
   18cec:	461a      	movcs	r2, r3
   18cee:	60e2      	str	r2, [r4, #12]
   18cf0:	6929      	ldr	r1, [r5, #16]
   18cf2:	f004 fdb3 	bl	1d85c <memcpy>
   18cf6:	e7db      	b.n	18cb0 <datagram_handler_get+0x3c>
   18cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18cfc:	e7db      	b.n	18cb6 <datagram_handler_get+0x42>
   18cfe:	bf00      	nop

00018d00 <datagram_handler_available>:
   18d00:	b508      	push	{r3, lr}
   18d02:	68c0      	ldr	r0, [r0, #12]
   18d04:	f7fc fbda 	bl	154bc <linked_list_peek>
   18d08:	b108      	cbz	r0, 18d0e <datagram_handler_available+0xe>
   18d0a:	6880      	ldr	r0, [r0, #8]
   18d0c:	bd08      	pop	{r3, pc}
   18d0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18d12:	bd08      	pop	{r3, pc}

00018d14 <datagram_handler_flush>:
   18d14:	b530      	push	{r4, r5, lr}
   18d16:	4605      	mov	r5, r0
   18d18:	68c0      	ldr	r0, [r0, #12]
   18d1a:	b085      	sub	sp, #20
   18d1c:	b9a8      	cbnz	r0, 18d4a <datagram_handler_flush+0x36>
   18d1e:	e01a      	b.n	18d56 <datagram_handler_flush+0x42>
   18d20:	68e8      	ldr	r0, [r5, #12]
   18d22:	f7fc fbc1 	bl	154a8 <linked_list_pop>
   18d26:	4604      	mov	r4, r0
   18d28:	b170      	cbz	r0, 18d48 <datagram_handler_flush+0x34>
   18d2a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   18d2e:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   18d32:	e9cd 0100 	strd	r0, r1, [sp]
   18d36:	e9cd 2302 	strd	r2, r3, [sp, #8]
   18d3a:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   18d3e:	4668      	mov	r0, sp
   18d40:	4798      	blx	r3
   18d42:	4620      	mov	r0, r4
   18d44:	f7f9 f8da 	bl	11efc <nrf_free>
   18d48:	68e8      	ldr	r0, [r5, #12]
   18d4a:	f7fc fbbd 	bl	154c8 <linked_list_size_get>
   18d4e:	2800      	cmp	r0, #0
   18d50:	d1e6      	bne.n	18d20 <datagram_handler_flush+0xc>
   18d52:	b005      	add	sp, #20
   18d54:	bd30      	pop	{r4, r5, pc}
   18d56:	2008      	movs	r0, #8
   18d58:	b005      	add	sp, #20
   18d5a:	bd30      	pop	{r4, r5, pc}

00018d5c <datagram_handler_free>:
   18d5c:	b530      	push	{r4, r5, lr}
   18d5e:	4605      	mov	r5, r0
   18d60:	68c0      	ldr	r0, [r0, #12]
   18d62:	b085      	sub	sp, #20
   18d64:	b9a0      	cbnz	r0, 18d90 <datagram_handler_free+0x34>
   18d66:	e01c      	b.n	18da2 <datagram_handler_free+0x46>
   18d68:	f7fc fb9e 	bl	154a8 <linked_list_pop>
   18d6c:	4604      	mov	r4, r0
   18d6e:	b170      	cbz	r0, 18d8e <datagram_handler_free+0x32>
   18d70:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   18d74:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   18d78:	e9cd 0100 	strd	r0, r1, [sp]
   18d7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   18d80:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   18d84:	4668      	mov	r0, sp
   18d86:	4798      	blx	r3
   18d88:	4620      	mov	r0, r4
   18d8a:	f7f9 f8b7 	bl	11efc <nrf_free>
   18d8e:	68e8      	ldr	r0, [r5, #12]
   18d90:	f7fc fb9a 	bl	154c8 <linked_list_size_get>
   18d94:	4604      	mov	r4, r0
   18d96:	68e8      	ldr	r0, [r5, #12]
   18d98:	2c00      	cmp	r4, #0
   18d9a:	d1e5      	bne.n	18d68 <datagram_handler_free+0xc>
   18d9c:	f7f9 f8ae 	bl	11efc <nrf_free>
   18da0:	60ec      	str	r4, [r5, #12]
   18da2:	b005      	add	sp, #20
   18da4:	bd30      	pop	{r4, r5, pc}
   18da6:	bf00      	nop

00018da8 <null_handler_init>:
   18da8:	2000      	movs	r0, #0
   18daa:	4770      	bx	lr

00018dac <null_handler_put>:
   18dac:	b510      	push	{r4, lr}
   18dae:	460c      	mov	r4, r1
   18db0:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   18db4:	4620      	mov	r0, r4
   18db6:	4798      	blx	r3
   18db8:	6860      	ldr	r0, [r4, #4]
   18dba:	bd10      	pop	{r4, pc}

00018dbc <null_handler_get>:
   18dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18dc0:	4770      	bx	lr
   18dc2:	bf00      	nop

00018dc4 <null_handler_available>:
   18dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18dc8:	4770      	bx	lr
   18dca:	bf00      	nop

00018dcc <null_handler_flush>:
   18dcc:	2000      	movs	r0, #0
   18dce:	4770      	bx	lr

00018dd0 <null_handler_free>:
   18dd0:	4770      	bx	lr
   18dd2:	bf00      	nop

00018dd4 <packet_handler_create>:
   18dd4:	2801      	cmp	r0, #1
   18dd6:	b538      	push	{r3, r4, r5, lr}
   18dd8:	460d      	mov	r5, r1
   18dda:	4614      	mov	r4, r2
   18ddc:	d00d      	beq.n	18dfa <packet_handler_create+0x26>
   18dde:	db11      	blt.n	18e04 <packet_handler_create+0x30>
   18de0:	2803      	cmp	r0, #3
   18de2:	dc0f      	bgt.n	18e04 <packet_handler_create+0x30>
   18de4:	2010      	movs	r0, #16
   18de6:	f7f9 f87f 	bl	11ee8 <nrf_malloc>
   18dea:	2218      	movs	r2, #24
   18dec:	b120      	cbz	r0, 18df8 <packet_handler_create+0x24>
   18dee:	4b08      	ldr	r3, [pc, #32]	; (18e10 <packet_handler_create+0x3c>)
   18df0:	6045      	str	r5, [r0, #4]
   18df2:	4413      	add	r3, r2
   18df4:	6084      	str	r4, [r0, #8]
   18df6:	6003      	str	r3, [r0, #0]
   18df8:	bd38      	pop	{r3, r4, r5, pc}
   18dfa:	2014      	movs	r0, #20
   18dfc:	f7f9 f874 	bl	11ee8 <nrf_malloc>
   18e00:	2230      	movs	r2, #48	; 0x30
   18e02:	e7f3      	b.n	18dec <packet_handler_create+0x18>
   18e04:	200c      	movs	r0, #12
   18e06:	f7f9 f86f 	bl	11ee8 <nrf_malloc>
   18e0a:	2200      	movs	r2, #0
   18e0c:	e7ee      	b.n	18dec <packet_handler_create+0x18>
   18e0e:	bf00      	nop
   18e10:	0001f1cc 	.word	0x0001f1cc

00018e14 <packet_handler_delete>:
   18e14:	b510      	push	{r4, lr}
   18e16:	4604      	mov	r4, r0
   18e18:	6803      	ldr	r3, [r0, #0]
   18e1a:	691b      	ldr	r3, [r3, #16]
   18e1c:	4798      	blx	r3
   18e1e:	6823      	ldr	r3, [r4, #0]
   18e20:	4620      	mov	r0, r4
   18e22:	695b      	ldr	r3, [r3, #20]
   18e24:	4798      	blx	r3
   18e26:	4620      	mov	r0, r4
   18e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18e2c:	f7f9 b866 	b.w	11efc <nrf_free>

00018e30 <stream_handler_init>:
   18e30:	b510      	push	{r4, lr}
   18e32:	4604      	mov	r4, r0
   18e34:	200c      	movs	r0, #12
   18e36:	f7f9 f857 	bl	11ee8 <nrf_malloc>
   18e3a:	60e0      	str	r0, [r4, #12]
   18e3c:	b128      	cbz	r0, 18e4a <stream_handler_init+0x1a>
   18e3e:	2300      	movs	r3, #0
   18e40:	6123      	str	r3, [r4, #16]
   18e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18e46:	f7fc bb0f 	b.w	15468 <linked_list_init>
   18e4a:	2004      	movs	r0, #4
   18e4c:	bd10      	pop	{r4, pc}
   18e4e:	bf00      	nop

00018e50 <stream_handler_put>:
   18e50:	b570      	push	{r4, r5, r6, lr}
   18e52:	4606      	mov	r6, r0
   18e54:	2014      	movs	r0, #20
   18e56:	460d      	mov	r5, r1
   18e58:	f7f9 f846 	bl	11ee8 <nrf_malloc>
   18e5c:	b178      	cbz	r0, 18e7e <stream_handler_put+0x2e>
   18e5e:	682b      	ldr	r3, [r5, #0]
   18e60:	4604      	mov	r4, r0
   18e62:	6043      	str	r3, [r0, #4]
   18e64:	686b      	ldr	r3, [r5, #4]
   18e66:	4601      	mov	r1, r0
   18e68:	6083      	str	r3, [r0, #8]
   18e6a:	68eb      	ldr	r3, [r5, #12]
   18e6c:	60c3      	str	r3, [r0, #12]
   18e6e:	68ab      	ldr	r3, [r5, #8]
   18e70:	6103      	str	r3, [r0, #16]
   18e72:	68f0      	ldr	r0, [r6, #12]
   18e74:	f7fc fb02 	bl	1547c <linked_list_push>
   18e78:	b920      	cbnz	r0, 18e84 <stream_handler_put+0x34>
   18e7a:	6868      	ldr	r0, [r5, #4]
   18e7c:	bd70      	pop	{r4, r5, r6, pc}
   18e7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18e82:	bd70      	pop	{r4, r5, r6, pc}
   18e84:	4620      	mov	r0, r4
   18e86:	f7f9 f839 	bl	11efc <nrf_free>
   18e8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18e8e:	bd70      	pop	{r4, r5, r6, pc}

00018e90 <stream_handler_get>:
   18e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e94:	4682      	mov	sl, r0
   18e96:	b087      	sub	sp, #28
   18e98:	68c0      	ldr	r0, [r0, #12]
   18e9a:	4689      	mov	r9, r1
   18e9c:	4693      	mov	fp, r2
   18e9e:	f7fc fb0d 	bl	154bc <linked_list_peek>
   18ea2:	2800      	cmp	r0, #0
   18ea4:	d072      	beq.n	18f8c <stream_handler_get+0xfc>
   18ea6:	4605      	mov	r5, r0
   18ea8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   18eac:	b120      	cbz	r0, 18eb8 <stream_handler_get+0x28>
   18eae:	692b      	ldr	r3, [r5, #16]
   18eb0:	b113      	cbz	r3, 18eb8 <stream_handler_get+0x28>
   18eb2:	68ea      	ldr	r2, [r5, #12]
   18eb4:	2a00      	cmp	r2, #0
   18eb6:	d15c      	bne.n	18f72 <stream_handler_get+0xe2>
   18eb8:	2300      	movs	r3, #0
   18eba:	f8c9 300c 	str.w	r3, [r9, #12]
   18ebe:	f8d9 2000 	ldr.w	r2, [r9]
   18ec2:	f8d9 8004 	ldr.w	r8, [r9, #4]
   18ec6:	f8da 1010 	ldr.w	r1, [sl, #16]
   18eca:	9201      	str	r2, [sp, #4]
   18ecc:	f1b8 0f00 	cmp.w	r8, #0
   18ed0:	d05a      	beq.n	18f88 <stream_handler_get+0xf8>
   18ed2:	f00b 0308 	and.w	r3, fp, #8
   18ed6:	2400      	movs	r4, #0
   18ed8:	9300      	str	r3, [sp, #0]
   18eda:	e010      	b.n	18efe <stream_handler_get+0x6e>
   18edc:	f8da 3010 	ldr.w	r3, [sl, #16]
   18ee0:	443b      	add	r3, r7
   18ee2:	f8ca 3010 	str.w	r3, [sl, #16]
   18ee6:	4628      	mov	r0, r5
   18ee8:	f7fc faf0 	bl	154cc <linked_list_get_next>
   18eec:	443c      	add	r4, r7
   18eee:	4605      	mov	r5, r0
   18ef0:	2800      	cmp	r0, #0
   18ef2:	d038      	beq.n	18f66 <stream_handler_get+0xd6>
   18ef4:	45a0      	cmp	r8, r4
   18ef6:	d936      	bls.n	18f66 <stream_handler_get+0xd6>
   18ef8:	2100      	movs	r1, #0
   18efa:	f8d9 2000 	ldr.w	r2, [r9]
   18efe:	68ae      	ldr	r6, [r5, #8]
   18f00:	eba8 0b04 	sub.w	fp, r8, r4
   18f04:	1a76      	subs	r6, r6, r1
   18f06:	455e      	cmp	r6, fp
   18f08:	4637      	mov	r7, r6
   18f0a:	bf28      	it	cs
   18f0c:	465f      	movcs	r7, fp
   18f0e:	b132      	cbz	r2, 18f1e <stream_handler_get+0x8e>
   18f10:	6868      	ldr	r0, [r5, #4]
   18f12:	9b01      	ldr	r3, [sp, #4]
   18f14:	4401      	add	r1, r0
   18f16:	463a      	mov	r2, r7
   18f18:	1918      	adds	r0, r3, r4
   18f1a:	f004 fc9f 	bl	1d85c <memcpy>
   18f1e:	9b00      	ldr	r3, [sp, #0]
   18f20:	2b00      	cmp	r3, #0
   18f22:	d1e0      	bne.n	18ee6 <stream_handler_get+0x56>
   18f24:	455e      	cmp	r6, fp
   18f26:	d8d9      	bhi.n	18edc <stream_handler_get+0x4c>
   18f28:	f8da 000c 	ldr.w	r0, [sl, #12]
   18f2c:	f7fc fabc 	bl	154a8 <linked_list_pop>
   18f30:	4606      	mov	r6, r0
   18f32:	b170      	cbz	r0, 18f52 <stream_handler_get+0xc2>
   18f34:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   18f38:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   18f3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   18f40:	e9cd 1004 	strd	r1, r0, [sp, #16]
   18f44:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   18f48:	a802      	add	r0, sp, #8
   18f4a:	4798      	blx	r3
   18f4c:	4630      	mov	r0, r6
   18f4e:	f7f8 ffd5 	bl	11efc <nrf_free>
   18f52:	2300      	movs	r3, #0
   18f54:	4628      	mov	r0, r5
   18f56:	f8ca 3010 	str.w	r3, [sl, #16]
   18f5a:	f7fc fab7 	bl	154cc <linked_list_get_next>
   18f5e:	443c      	add	r4, r7
   18f60:	4605      	mov	r5, r0
   18f62:	2800      	cmp	r0, #0
   18f64:	d1c6      	bne.n	18ef4 <stream_handler_get+0x64>
   18f66:	4620      	mov	r0, r4
   18f68:	f8c9 4004 	str.w	r4, [r9, #4]
   18f6c:	b007      	add	sp, #28
   18f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f72:	f8d9 300c 	ldr.w	r3, [r9, #12]
   18f76:	429a      	cmp	r2, r3
   18f78:	bf28      	it	cs
   18f7a:	461a      	movcs	r2, r3
   18f7c:	f8c9 200c 	str.w	r2, [r9, #12]
   18f80:	6929      	ldr	r1, [r5, #16]
   18f82:	f004 fc6b 	bl	1d85c <memcpy>
   18f86:	e79a      	b.n	18ebe <stream_handler_get+0x2e>
   18f88:	4644      	mov	r4, r8
   18f8a:	e7ec      	b.n	18f66 <stream_handler_get+0xd6>
   18f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18f90:	e7ec      	b.n	18f6c <stream_handler_get+0xdc>
   18f92:	bf00      	nop

00018f94 <stream_handler_available>:
   18f94:	b510      	push	{r4, lr}
   18f96:	4604      	mov	r4, r0
   18f98:	68c0      	ldr	r0, [r0, #12]
   18f9a:	f7fc fa8f 	bl	154bc <linked_list_peek>
   18f9e:	b150      	cbz	r0, 18fb6 <stream_handler_available+0x22>
   18fa0:	6924      	ldr	r4, [r4, #16]
   18fa2:	4264      	negs	r4, r4
   18fa4:	6883      	ldr	r3, [r0, #8]
   18fa6:	441c      	add	r4, r3
   18fa8:	f7fc fa90 	bl	154cc <linked_list_get_next>
   18fac:	2800      	cmp	r0, #0
   18fae:	d1f9      	bne.n	18fa4 <stream_handler_available+0x10>
   18fb0:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   18fb4:	bd10      	pop	{r4, pc}
   18fb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18fba:	bd10      	pop	{r4, pc}

00018fbc <stream_handler_flush>:
   18fbc:	b530      	push	{r4, r5, lr}
   18fbe:	4605      	mov	r5, r0
   18fc0:	68c0      	ldr	r0, [r0, #12]
   18fc2:	b085      	sub	sp, #20
   18fc4:	b9a8      	cbnz	r0, 18ff2 <stream_handler_flush+0x36>
   18fc6:	e01a      	b.n	18ffe <stream_handler_flush+0x42>
   18fc8:	68e8      	ldr	r0, [r5, #12]
   18fca:	f7fc fa6d 	bl	154a8 <linked_list_pop>
   18fce:	4604      	mov	r4, r0
   18fd0:	b170      	cbz	r0, 18ff0 <stream_handler_flush+0x34>
   18fd2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   18fd6:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   18fda:	e9cd 0100 	strd	r0, r1, [sp]
   18fde:	e9cd 2302 	strd	r2, r3, [sp, #8]
   18fe2:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   18fe6:	4668      	mov	r0, sp
   18fe8:	4798      	blx	r3
   18fea:	4620      	mov	r0, r4
   18fec:	f7f8 ff86 	bl	11efc <nrf_free>
   18ff0:	68e8      	ldr	r0, [r5, #12]
   18ff2:	f7fc fa69 	bl	154c8 <linked_list_size_get>
   18ff6:	2800      	cmp	r0, #0
   18ff8:	d1e6      	bne.n	18fc8 <stream_handler_flush+0xc>
   18ffa:	b005      	add	sp, #20
   18ffc:	bd30      	pop	{r4, r5, pc}
   18ffe:	2008      	movs	r0, #8
   19000:	b005      	add	sp, #20
   19002:	bd30      	pop	{r4, r5, pc}

00019004 <stream_handler_free>:
   19004:	b530      	push	{r4, r5, lr}
   19006:	4605      	mov	r5, r0
   19008:	68c0      	ldr	r0, [r0, #12]
   1900a:	b085      	sub	sp, #20
   1900c:	b9a0      	cbnz	r0, 19038 <stream_handler_free+0x34>
   1900e:	e01c      	b.n	1904a <stream_handler_free+0x46>
   19010:	f7fc fa4a 	bl	154a8 <linked_list_pop>
   19014:	4604      	mov	r4, r0
   19016:	b170      	cbz	r0, 19036 <stream_handler_free+0x32>
   19018:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1901c:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   19020:	e9cd 0100 	strd	r0, r1, [sp]
   19024:	e9cd 2302 	strd	r2, r3, [sp, #8]
   19028:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1902c:	4668      	mov	r0, sp
   1902e:	4798      	blx	r3
   19030:	4620      	mov	r0, r4
   19032:	f7f8 ff63 	bl	11efc <nrf_free>
   19036:	68e8      	ldr	r0, [r5, #12]
   19038:	f7fc fa46 	bl	154c8 <linked_list_size_get>
   1903c:	4604      	mov	r4, r0
   1903e:	68e8      	ldr	r0, [r5, #12]
   19040:	2c00      	cmp	r4, #0
   19042:	d1e5      	bne.n	19010 <stream_handler_free+0xc>
   19044:	f7f8 ff5a 	bl	11efc <nrf_free>
   19048:	60ec      	str	r4, [r5, #12]
   1904a:	b005      	add	sp, #20
   1904c:	bd30      	pop	{r4, r5, pc}
   1904e:	bf00      	nop

00019050 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   19050:	4a07      	ldr	r2, [pc, #28]	; (19070 <SystemInit+0x20>)
   19052:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   19056:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   1905a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   1905e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   19062:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   19066:	4b03      	ldr	r3, [pc, #12]	; (19074 <SystemInit+0x24>)
   19068:	4a03      	ldr	r2, [pc, #12]	; (19078 <SystemInit+0x28>)
   1906a:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   1906c:	4770      	bx	lr
   1906e:	bf00      	nop
   19070:	e000ed00 	.word	0xe000ed00
   19074:	2002c470 	.word	0x2002c470
   19078:	03d09000 	.word	0x03d09000

0001907c <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   1907c:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   1907e:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   19080:	4b08      	ldr	r3, [pc, #32]	; (190a4 <z_sys_device_do_config_level+0x28>)
   19082:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   19086:	3001      	adds	r0, #1
   19088:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1908c:	42a5      	cmp	r5, r4
   1908e:	d800      	bhi.n	19092 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   19090:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   19092:	6823      	ldr	r3, [r4, #0]
   19094:	4620      	mov	r0, r4
   19096:	685b      	ldr	r3, [r3, #4]
   19098:	4798      	blx	r3
		if (retval != 0) {
   1909a:	b100      	cbz	r0, 1909e <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   1909c:	6066      	str	r6, [r4, #4]
								info++) {
   1909e:	340c      	adds	r4, #12
   190a0:	e7f4      	b.n	1908c <z_sys_device_do_config_level+0x10>
   190a2:	bf00      	nop
   190a4:	0001f214 	.word	0x0001f214

000190a8 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   190a8:	4b10      	ldr	r3, [pc, #64]	; (190ec <z_impl_device_get_binding+0x44>)
{
   190aa:	b570      	push	{r4, r5, r6, lr}
   190ac:	4605      	mov	r5, r0
   190ae:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   190b0:	4c0f      	ldr	r4, [pc, #60]	; (190f0 <z_impl_device_get_binding+0x48>)
   190b2:	429c      	cmp	r4, r3
   190b4:	d104      	bne.n	190c0 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   190b6:	4c0e      	ldr	r4, [pc, #56]	; (190f0 <z_impl_device_get_binding+0x48>)
   190b8:	42b4      	cmp	r4, r6
   190ba:	d109      	bne.n	190d0 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   190bc:	2400      	movs	r4, #0
   190be:	e012      	b.n	190e6 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   190c0:	6862      	ldr	r2, [r4, #4]
   190c2:	b11a      	cbz	r2, 190cc <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   190c4:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   190c6:	6812      	ldr	r2, [r2, #0]
   190c8:	42aa      	cmp	r2, r5
   190ca:	d00c      	beq.n	190e6 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   190cc:	340c      	adds	r4, #12
   190ce:	e7f0      	b.n	190b2 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   190d0:	6863      	ldr	r3, [r4, #4]
   190d2:	b90b      	cbnz	r3, 190d8 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   190d4:	340c      	adds	r4, #12
   190d6:	e7ef      	b.n	190b8 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   190d8:	6823      	ldr	r3, [r4, #0]
   190da:	4628      	mov	r0, r5
   190dc:	6819      	ldr	r1, [r3, #0]
   190de:	f004 fb92 	bl	1d806 <strcmp>
   190e2:	2800      	cmp	r0, #0
   190e4:	d1f6      	bne.n	190d4 <z_impl_device_get_binding+0x2c>
}
   190e6:	4620      	mov	r0, r4
   190e8:	bd70      	pop	{r4, r5, r6, pc}
   190ea:	bf00      	nop
   190ec:	2002c540 	.word	0x2002c540
   190f0:	2002c480 	.word	0x2002c480

000190f4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   190f4:	4b01      	ldr	r3, [pc, #4]	; (190fc <z_impl_z_errno+0x8>)
   190f6:	6898      	ldr	r0, [r3, #8]
}
   190f8:	3054      	adds	r0, #84	; 0x54
   190fa:	4770      	bx	lr
   190fc:	20024e04 	.word	0x20024e04

00019100 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   19100:	b570      	push	{r4, r5, r6, lr}
   19102:	4604      	mov	r4, r0
   19104:	460e      	mov	r6, r1
	return z_impl_k_current_get();
   19106:	f002 f8b9 	bl	1b27c <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   1910a:	4631      	mov	r1, r6
   1910c:	4605      	mov	r5, r0
   1910e:	4620      	mov	r0, r4
   19110:	f005 fb2f 	bl	1e772 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   19114:	2c04      	cmp	r4, #4
   19116:	d10c      	bne.n	19132 <z_fatal_error+0x32>
   19118:	4908      	ldr	r1, [pc, #32]	; (1913c <z_fatal_error+0x3c>)
   1911a:	2387      	movs	r3, #135	; 0x87
   1911c:	4a08      	ldr	r2, [pc, #32]	; (19140 <z_fatal_error+0x40>)
   1911e:	4809      	ldr	r0, [pc, #36]	; (19144 <z_fatal_error+0x44>)
   19120:	f003 fe4a 	bl	1cdb8 <printk>
   19124:	4808      	ldr	r0, [pc, #32]	; (19148 <z_fatal_error+0x48>)
   19126:	f003 fe47 	bl	1cdb8 <printk>
   1912a:	2187      	movs	r1, #135	; 0x87
   1912c:	4804      	ldr	r0, [pc, #16]	; (19140 <z_fatal_error+0x40>)
   1912e:	f003 fe75 	bl	1ce1c <assert_post_action>
	z_impl_k_thread_abort(thread);
   19132:	4628      	mov	r0, r5
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
   19134:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   19138:	f7f4 be74 	b.w	de24 <z_impl_k_thread_abort>
   1913c:	00020313 	.word	0x00020313
   19140:	000202f8 	.word	0x000202f8
   19144:	0001f722 	.word	0x0001f722
   19148:	00020330 	.word	0x00020330

0001914c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   1914c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1914e:	4d0b      	ldr	r5, [pc, #44]	; (1917c <idle+0x30>)
	__asm__ volatile(
   19150:	f04f 0220 	mov.w	r2, #32
   19154:	f3ef 8311 	mrs	r3, BASEPRI
   19158:	f382 8811 	msr	BASEPRI, r2
   1915c:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   19160:	f002 fd1e 	bl	1bba0 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   19164:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   19166:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   19168:	2802      	cmp	r0, #2
   1916a:	bfd8      	it	le
   1916c:	4608      	movle	r0, r1
   1916e:	f002 fd5f 	bl	1bc30 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   19172:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   19174:	f7f4 fcba 	bl	daec <arch_cpu_idle>
   19178:	e7ea      	b.n	19150 <idle+0x4>
   1917a:	bf00      	nop
   1917c:	20024e04 	.word	0x20024e04

00019180 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   19180:	4802      	ldr	r0, [pc, #8]	; (1918c <z_bss_zero+0xc>)
   19182:	4a03      	ldr	r2, [pc, #12]	; (19190 <z_bss_zero+0x10>)
   19184:	2100      	movs	r1, #0
   19186:	1a12      	subs	r2, r2, r0
   19188:	f004 bb92 	b.w	1d8b0 <memset>
   1918c:	20020000 	.word	0x20020000
   19190:	20025084 	.word	0x20025084

00019194 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   19194:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   19196:	4806      	ldr	r0, [pc, #24]	; (191b0 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   19198:	4a06      	ldr	r2, [pc, #24]	; (191b4 <z_data_copy+0x20>)
   1919a:	4907      	ldr	r1, [pc, #28]	; (191b8 <z_data_copy+0x24>)
   1919c:	1a12      	subs	r2, r2, r0
   1919e:	f004 fb5d 	bl	1d85c <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   191a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   191a6:	4a05      	ldr	r2, [pc, #20]	; (191bc <z_data_copy+0x28>)
   191a8:	4905      	ldr	r1, [pc, #20]	; (191c0 <z_data_copy+0x2c>)
   191aa:	4806      	ldr	r0, [pc, #24]	; (191c4 <z_data_copy+0x30>)
   191ac:	f004 bb56 	b.w	1d85c <memcpy>
   191b0:	2002c408 	.word	0x2002c408
   191b4:	2002c6fc 	.word	0x2002c6fc
   191b8:	0002097c 	.word	0x0002097c
   191bc:	00000000 	.word	0x00000000
   191c0:	0002097c 	.word	0x0002097c
   191c4:	20020000 	.word	0x20020000

000191c8 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   191c8:	2201      	movs	r2, #1
{
   191ca:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   191cc:	4b08      	ldr	r3, [pc, #32]	; (191f0 <bg_thread_main+0x28>)

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   191ce:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   191d0:	701a      	strb	r2, [r3, #0]
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   191d2:	f7ff ff53 	bl	1907c <z_sys_device_do_config_level>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   191d6:	2003      	movs	r0, #3
   191d8:	f7ff ff50 	bl	1907c <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   191dc:	f002 fa24 	bl	1b628 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   191e0:	f7f3 fa3a 	bl	c658 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   191e4:	4a03      	ldr	r2, [pc, #12]	; (191f4 <bg_thread_main+0x2c>)
   191e6:	7b13      	ldrb	r3, [r2, #12]
   191e8:	f023 0301 	bic.w	r3, r3, #1
   191ec:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   191ee:	bd08      	pop	{r3, pc}
   191f0:	20024f3c 	.word	0x20024f3c
   191f4:	20020ce4 	.word	0x20020ce4

000191f8 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   191f8:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   191fa:	4b36      	ldr	r3, [pc, #216]	; (192d4 <z_cstart+0xdc>)
   191fc:	b0b2      	sub	sp, #200	; 0xc8
   191fe:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   19202:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   19206:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1920a:	2400      	movs	r4, #0
   1920c:	23e0      	movs	r3, #224	; 0xe0
   1920e:	4d32      	ldr	r5, [pc, #200]	; (192d8 <z_cstart+0xe0>)

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   19210:	2701      	movs	r7, #1
   19212:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   19216:	77ec      	strb	r4, [r5, #31]
   19218:	762c      	strb	r4, [r5, #24]
   1921a:	766c      	strb	r4, [r5, #25]
   1921c:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1921e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   19220:	4e2e      	ldr	r6, [pc, #184]	; (192dc <z_cstart+0xe4>)
   19222:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   19226:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   19228:	f7f4 fdd2 	bl	ddd0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1922c:	f7f4 fc58 	bl	dae0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   19230:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19234:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   19236:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   19238:	ab06      	add	r3, sp, #24
   1923a:	22b0      	movs	r2, #176	; 0xb0
   1923c:	4621      	mov	r1, r4
   1923e:	4618      	mov	r0, r3
   19240:	f004 fb36 	bl	1d8b0 <memset>
	_current = &dummy_thread;
   19244:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   19246:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   19248:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1924c:	f7ff ff16 	bl	1907c <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   19250:	4638      	mov	r0, r7
   19252:	f7ff ff13 	bl	1907c <z_sys_device_do_config_level>
	_kernel.ready_q.cache = &z_main_thread;
   19256:	4d22      	ldr	r5, [pc, #136]	; (192e0 <z_cstart+0xe8>)
	z_sched_init();
   19258:	f001 fe86 	bl	1af68 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1925c:	4b21      	ldr	r3, [pc, #132]	; (192e4 <z_cstart+0xec>)
   1925e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   19262:	e9cd 7304 	strd	r7, r3, [sp, #16]
   19266:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1926a:	4b1f      	ldr	r3, [pc, #124]	; (192e8 <z_cstart+0xf0>)
   1926c:	e9cd 4400 	strd	r4, r4, [sp]
   19270:	491e      	ldr	r1, [pc, #120]	; (192ec <z_cstart+0xf4>)
   19272:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   19274:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   19276:	f002 f8ed 	bl	1b454 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1927a:	7b6b      	ldrb	r3, [r5, #13]
   1927c:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   19280:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   19284:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   19286:	d104      	bne.n	19292 <z_cstart+0x9a>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   19288:	69ab      	ldr	r3, [r5, #24]
   1928a:	b913      	cbnz	r3, 19292 <z_cstart+0x9a>
		z_add_thread_to_ready_q(thread);
   1928c:	4628      	mov	r0, r5
   1928e:	f001 f965 	bl	1a55c <z_add_thread_to_ready_q>
	z_setup_new_thread(thread, stack,
   19292:	4b17      	ldr	r3, [pc, #92]	; (192f0 <z_cstart+0xf8>)
   19294:	2201      	movs	r2, #1
   19296:	9305      	str	r3, [sp, #20]
   19298:	230f      	movs	r3, #15
   1929a:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1929e:	2300      	movs	r3, #0
   192a0:	4d14      	ldr	r5, [pc, #80]	; (192f4 <z_cstart+0xfc>)
   192a2:	e9cd 3301 	strd	r3, r3, [sp, #4]
   192a6:	9300      	str	r3, [sp, #0]
   192a8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   192ac:	4b12      	ldr	r3, [pc, #72]	; (192f8 <z_cstart+0x100>)
   192ae:	4913      	ldr	r1, [pc, #76]	; (192fc <z_cstart+0x104>)
   192b0:	4628      	mov	r0, r5
   192b2:	f002 f8cf 	bl	1b454 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   192b6:	7b6b      	ldrb	r3, [r5, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   192b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   192bc:	f023 0304 	bic.w	r3, r3, #4
   192c0:	736b      	strb	r3, [r5, #13]
	list->head = (sys_dnode_t *)list;
   192c2:	4b0f      	ldr	r3, [pc, #60]	; (19300 <z_cstart+0x108>)
   192c4:	4909      	ldr	r1, [pc, #36]	; (192ec <z_cstart+0xf4>)
	list->tail = (sys_dnode_t *)list;
   192c6:	e9c6 3306 	strd	r3, r3, [r6, #24]
   192ca:	4805      	ldr	r0, [pc, #20]	; (192e0 <z_cstart+0xe8>)
   192cc:	4b06      	ldr	r3, [pc, #24]	; (192e8 <z_cstart+0xf0>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   192ce:	60f5      	str	r5, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   192d0:	f7f4 fbda 	bl	da88 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   192d4:	200289c8 	.word	0x200289c8
   192d8:	e000ed00 	.word	0xe000ed00
   192dc:	20024e04 	.word	0x20024e04
   192e0:	20020ce4 	.word	0x20020ce4
   192e4:	00020365 	.word	0x00020365
   192e8:	000191c9 	.word	0x000191c9
   192ec:	20026888 	.word	0x20026888
   192f0:	0002036a 	.word	0x0002036a
   192f4:	20020c34 	.word	0x20020c34
   192f8:	0001914d 	.word	0x0001914d
   192fc:	20028888 	.word	0x20028888
   19300:	20024e1c 	.word	0x20024e1c

00019304 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   19304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   19308:	4d16      	ldr	r5, [pc, #88]	; (19364 <init_mem_slab_module+0x60>)
   1930a:	4c17      	ldr	r4, [pc, #92]	; (19368 <init_mem_slab_module+0x64>)
   1930c:	46a8      	mov	r8, r5
   1930e:	4e17      	ldr	r6, [pc, #92]	; (1936c <init_mem_slab_module+0x68>)
   19310:	42ac      	cmp	r4, r5
   19312:	d90c      	bls.n	1932e <init_mem_slab_module+0x2a>
   19314:	4916      	ldr	r1, [pc, #88]	; (19370 <init_mem_slab_module+0x6c>)
   19316:	2342      	movs	r3, #66	; 0x42
   19318:	4632      	mov	r2, r6
   1931a:	4816      	ldr	r0, [pc, #88]	; (19374 <init_mem_slab_module+0x70>)
   1931c:	f003 fd4c 	bl	1cdb8 <printk>
   19320:	4815      	ldr	r0, [pc, #84]	; (19378 <init_mem_slab_module+0x74>)
   19322:	f003 fd49 	bl	1cdb8 <printk>
   19326:	2142      	movs	r1, #66	; 0x42
   19328:	4630      	mov	r0, r6
   1932a:	f003 fd77 	bl	1ce1c <assert_post_action>
   1932e:	4544      	cmp	r4, r8
   19330:	d302      	bcc.n	19338 <init_mem_slab_module+0x34>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   19332:	2000      	movs	r0, #0
	return rc;
}
   19334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   19338:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   1933c:	ea42 0301 	orr.w	r3, r2, r1
   19340:	f013 0303 	ands.w	r3, r3, #3
   19344:	d10b      	bne.n	1935e <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   19346:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   19348:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1934a:	4283      	cmp	r3, r0
   1934c:	d101      	bne.n	19352 <init_mem_slab_module+0x4e>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1934e:	341c      	adds	r4, #28
   19350:	e7de      	b.n	19310 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   19352:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   19354:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   19356:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   19358:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   1935a:	440a      	add	r2, r1
   1935c:	e7f5      	b.n	1934a <init_mem_slab_module+0x46>
		return -EINVAL;
   1935e:	f06f 0015 	mvn.w	r0, #21
	return rc;
   19362:	e7e7      	b.n	19334 <init_mem_slab_module+0x30>
   19364:	2002c5c0 	.word	0x2002c5c0
   19368:	2002c56c 	.word	0x2002c56c
   1936c:	0002036f 	.word	0x0002036f
   19370:	0002038d 	.word	0x0002038d
   19374:	0001f722 	.word	0x0001f722
   19378:	000203aa 	.word	0x000203aa

0001937c <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   1937c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1937e:	4604      	mov	r4, r0
   19380:	460d      	mov	r5, r1
   19382:	4616      	mov	r6, r2
   19384:	f04f 0320 	mov.w	r3, #32
   19388:	f3ef 8711 	mrs	r7, BASEPRI
   1938c:	f383 8811 	msr	BASEPRI, r3
   19390:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19394:	4823      	ldr	r0, [pc, #140]	; (19424 <k_mem_slab_alloc+0xa8>)
   19396:	f002 f875 	bl	1b484 <z_spin_lock_valid>
   1939a:	b968      	cbnz	r0, 193b8 <k_mem_slab_alloc+0x3c>
   1939c:	234a      	movs	r3, #74	; 0x4a
   1939e:	4a22      	ldr	r2, [pc, #136]	; (19428 <k_mem_slab_alloc+0xac>)
   193a0:	4922      	ldr	r1, [pc, #136]	; (1942c <k_mem_slab_alloc+0xb0>)
   193a2:	4823      	ldr	r0, [pc, #140]	; (19430 <k_mem_slab_alloc+0xb4>)
   193a4:	f003 fd08 	bl	1cdb8 <printk>
   193a8:	491e      	ldr	r1, [pc, #120]	; (19424 <k_mem_slab_alloc+0xa8>)
   193aa:	4822      	ldr	r0, [pc, #136]	; (19434 <k_mem_slab_alloc+0xb8>)
   193ac:	f003 fd04 	bl	1cdb8 <printk>
   193b0:	214a      	movs	r1, #74	; 0x4a
   193b2:	481d      	ldr	r0, [pc, #116]	; (19428 <k_mem_slab_alloc+0xac>)
   193b4:	f003 fd32 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   193b8:	481a      	ldr	r0, [pc, #104]	; (19424 <k_mem_slab_alloc+0xa8>)
   193ba:	f002 f881 	bl	1b4c0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   193be:	6963      	ldr	r3, [r4, #20]
   193c0:	b1eb      	cbz	r3, 193fe <k_mem_slab_alloc+0x82>
		/* take a free block */
		*mem = slab->free_list;
   193c2:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   193c4:	681b      	ldr	r3, [r3, #0]
   193c6:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   193c8:	69a3      	ldr	r3, [r4, #24]
   193ca:	3301      	adds	r3, #1
   193cc:	61a3      	str	r3, [r4, #24]
		result = 0;
   193ce:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   193d0:	4814      	ldr	r0, [pc, #80]	; (19424 <k_mem_slab_alloc+0xa8>)
   193d2:	f002 f865 	bl	1b4a0 <z_spin_unlock_valid>
   193d6:	b968      	cbnz	r0, 193f4 <k_mem_slab_alloc+0x78>
   193d8:	235d      	movs	r3, #93	; 0x5d
   193da:	4a13      	ldr	r2, [pc, #76]	; (19428 <k_mem_slab_alloc+0xac>)
   193dc:	4916      	ldr	r1, [pc, #88]	; (19438 <k_mem_slab_alloc+0xbc>)
   193de:	4814      	ldr	r0, [pc, #80]	; (19430 <k_mem_slab_alloc+0xb4>)
   193e0:	f003 fcea 	bl	1cdb8 <printk>
   193e4:	490f      	ldr	r1, [pc, #60]	; (19424 <k_mem_slab_alloc+0xa8>)
   193e6:	4815      	ldr	r0, [pc, #84]	; (1943c <k_mem_slab_alloc+0xc0>)
   193e8:	f003 fce6 	bl	1cdb8 <printk>
   193ec:	215d      	movs	r1, #93	; 0x5d
   193ee:	480e      	ldr	r0, [pc, #56]	; (19428 <k_mem_slab_alloc+0xac>)
   193f0:	f003 fd14 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   193f4:	f387 8811 	msr	BASEPRI, r7
   193f8:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   193fc:	e010      	b.n	19420 <k_mem_slab_alloc+0xa4>
	} else if (timeout == K_NO_WAIT) {
   193fe:	b91e      	cbnz	r6, 19408 <k_mem_slab_alloc+0x8c>
		*mem = NULL;
   19400:	602e      	str	r6, [r5, #0]
		result = -ENOMEM;
   19402:	f06f 040b 	mvn.w	r4, #11
   19406:	e7e3      	b.n	193d0 <k_mem_slab_alloc+0x54>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   19408:	4622      	mov	r2, r4
   1940a:	4633      	mov	r3, r6
   1940c:	4639      	mov	r1, r7
   1940e:	4805      	ldr	r0, [pc, #20]	; (19424 <k_mem_slab_alloc+0xa8>)
   19410:	f001 fc5e 	bl	1acd0 <z_pend_curr>
		if (result == 0) {
   19414:	4604      	mov	r4, r0
   19416:	b918      	cbnz	r0, 19420 <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   19418:	4b09      	ldr	r3, [pc, #36]	; (19440 <k_mem_slab_alloc+0xc4>)
   1941a:	689b      	ldr	r3, [r3, #8]
   1941c:	695b      	ldr	r3, [r3, #20]
   1941e:	602b      	str	r3, [r5, #0]
}
   19420:	4620      	mov	r0, r4
   19422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19424:	20020d94 	.word	0x20020d94
   19428:	0001f904 	.word	0x0001f904
   1942c:	0001f923 	.word	0x0001f923
   19430:	0001f722 	.word	0x0001f722
   19434:	0001f938 	.word	0x0001f938
   19438:	0001f950 	.word	0x0001f950
   1943c:	0001f967 	.word	0x0001f967
   19440:	20024e04 	.word	0x20024e04

00019444 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   19444:	b570      	push	{r4, r5, r6, lr}
   19446:	4604      	mov	r4, r0
   19448:	460d      	mov	r5, r1
	__asm__ volatile(
   1944a:	f04f 0320 	mov.w	r3, #32
   1944e:	f3ef 8611 	mrs	r6, BASEPRI
   19452:	f383 8811 	msr	BASEPRI, r3
   19456:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1945a:	4824      	ldr	r0, [pc, #144]	; (194ec <k_mem_slab_free+0xa8>)
   1945c:	f002 f812 	bl	1b484 <z_spin_lock_valid>
   19460:	b968      	cbnz	r0, 1947e <k_mem_slab_free+0x3a>
   19462:	234a      	movs	r3, #74	; 0x4a
   19464:	4a22      	ldr	r2, [pc, #136]	; (194f0 <k_mem_slab_free+0xac>)
   19466:	4923      	ldr	r1, [pc, #140]	; (194f4 <k_mem_slab_free+0xb0>)
   19468:	4823      	ldr	r0, [pc, #140]	; (194f8 <k_mem_slab_free+0xb4>)
   1946a:	f003 fca5 	bl	1cdb8 <printk>
   1946e:	491f      	ldr	r1, [pc, #124]	; (194ec <k_mem_slab_free+0xa8>)
   19470:	4822      	ldr	r0, [pc, #136]	; (194fc <k_mem_slab_free+0xb8>)
   19472:	f003 fca1 	bl	1cdb8 <printk>
   19476:	214a      	movs	r1, #74	; 0x4a
   19478:	481d      	ldr	r0, [pc, #116]	; (194f0 <k_mem_slab_free+0xac>)
   1947a:	f003 fccf 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1947e:	481b      	ldr	r0, [pc, #108]	; (194ec <k_mem_slab_free+0xa8>)
   19480:	f002 f81e 	bl	1b4c0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   19484:	4620      	mov	r0, r4
   19486:	f001 fcdf 	bl	1ae48 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1948a:	b180      	cbz	r0, 194ae <k_mem_slab_free+0x6a>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1948c:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1948e:	682a      	ldr	r2, [r5, #0]
   19490:	6681      	str	r1, [r0, #104]	; 0x68
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   19492:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   19494:	7b42      	ldrb	r2, [r0, #13]
   19496:	06d2      	lsls	r2, r2, #27
   19498:	d103      	bne.n	194a2 <k_mem_slab_free+0x5e>
	if (z_is_thread_ready(thread)) {
   1949a:	6983      	ldr	r3, [r0, #24]
   1949c:	b90b      	cbnz	r3, 194a2 <k_mem_slab_free+0x5e>
		z_add_thread_to_ready_q(thread);
   1949e:	f001 f85d 	bl	1a55c <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   194a2:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   194a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   194a8:	4810      	ldr	r0, [pc, #64]	; (194ec <k_mem_slab_free+0xa8>)
   194aa:	f000 be6d 	b.w	1a188 <z_reschedule>
		**(char ***)mem = slab->free_list;
   194ae:	682b      	ldr	r3, [r5, #0]
   194b0:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   194b2:	480e      	ldr	r0, [pc, #56]	; (194ec <k_mem_slab_free+0xa8>)
   194b4:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   194b6:	682b      	ldr	r3, [r5, #0]
   194b8:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   194ba:	69a3      	ldr	r3, [r4, #24]
   194bc:	3b01      	subs	r3, #1
   194be:	61a3      	str	r3, [r4, #24]
   194c0:	f001 ffee 	bl	1b4a0 <z_spin_unlock_valid>
   194c4:	b968      	cbnz	r0, 194e2 <k_mem_slab_free+0x9e>
   194c6:	235d      	movs	r3, #93	; 0x5d
   194c8:	4a09      	ldr	r2, [pc, #36]	; (194f0 <k_mem_slab_free+0xac>)
   194ca:	490d      	ldr	r1, [pc, #52]	; (19500 <k_mem_slab_free+0xbc>)
   194cc:	480a      	ldr	r0, [pc, #40]	; (194f8 <k_mem_slab_free+0xb4>)
   194ce:	f003 fc73 	bl	1cdb8 <printk>
   194d2:	4906      	ldr	r1, [pc, #24]	; (194ec <k_mem_slab_free+0xa8>)
   194d4:	480b      	ldr	r0, [pc, #44]	; (19504 <k_mem_slab_free+0xc0>)
   194d6:	f003 fc6f 	bl	1cdb8 <printk>
   194da:	215d      	movs	r1, #93	; 0x5d
   194dc:	4804      	ldr	r0, [pc, #16]	; (194f0 <k_mem_slab_free+0xac>)
   194de:	f003 fc9d 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   194e2:	f386 8811 	msr	BASEPRI, r6
   194e6:	f3bf 8f6f 	isb	sy
}
   194ea:	bd70      	pop	{r4, r5, r6, pc}
   194ec:	20020d94 	.word	0x20020d94
   194f0:	0001f904 	.word	0x0001f904
   194f4:	0001f923 	.word	0x0001f923
   194f8:	0001f722 	.word	0x0001f722
   194fc:	0001f938 	.word	0x0001f938
   19500:	0001f950 	.word	0x0001f950
   19504:	0001f967 	.word	0x0001f967

00019508 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   19508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   1950a:	4d10      	ldr	r5, [pc, #64]	; (1954c <init_static_pools+0x44>)
   1950c:	4c10      	ldr	r4, [pc, #64]	; (19550 <init_static_pools+0x48>)
   1950e:	462f      	mov	r7, r5
   19510:	4e10      	ldr	r6, [pc, #64]	; (19554 <init_static_pools+0x4c>)
   19512:	42ac      	cmp	r4, r5
   19514:	d90c      	bls.n	19530 <init_static_pools+0x28>
   19516:	4910      	ldr	r1, [pc, #64]	; (19558 <init_static_pools+0x50>)
   19518:	2328      	movs	r3, #40	; 0x28
   1951a:	4632      	mov	r2, r6
   1951c:	480f      	ldr	r0, [pc, #60]	; (1955c <init_static_pools+0x54>)
   1951e:	f003 fc4b 	bl	1cdb8 <printk>
   19522:	480f      	ldr	r0, [pc, #60]	; (19560 <init_static_pools+0x58>)
   19524:	f003 fc48 	bl	1cdb8 <printk>
   19528:	2128      	movs	r1, #40	; 0x28
   1952a:	4630      	mov	r0, r6
   1952c:	f003 fc76 	bl	1ce1c <assert_post_action>
   19530:	42bc      	cmp	r4, r7
   19532:	d301      	bcc.n	19538 <init_static_pools+0x30>
		k_mem_pool_init(p);
	}

	return 0;
}
   19534:	2000      	movs	r0, #0
   19536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   19538:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   1953c:	4620      	mov	r0, r4
   1953e:	e9c4 3305 	strd	r3, r3, [r4, #20]
   19542:	f003 f9c1 	bl	1c8c8 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   19546:	341c      	adds	r4, #28
   19548:	e7e3      	b.n	19512 <init_static_pools+0xa>
   1954a:	bf00      	nop
   1954c:	2002c5dc 	.word	0x2002c5dc
   19550:	2002c5c0 	.word	0x2002c5c0
   19554:	000203c9 	.word	0x000203c9
   19558:	000203e6 	.word	0x000203e6
   1955c:	0001f722 	.word	0x0001f722
   19560:	000203aa 	.word	0x000203aa

00019564 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   19564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19568:	4607      	mov	r7, r0
   1956a:	b085      	sub	sp, #20
   1956c:	460d      	mov	r5, r1
   1956e:	4692      	mov	sl, r2
   19570:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   19572:	f3ef 8305 	mrs	r3, IPSR
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");
   19576:	2b00      	cmp	r3, #0
   19578:	d048      	beq.n	1960c <k_mem_pool_alloc+0xa8>
   1957a:	2c00      	cmp	r4, #0
   1957c:	d139      	bne.n	195f2 <k_mem_pool_alloc+0x8e>
	s64_t end = 0;
   1957e:	f04f 0800 	mov.w	r8, #0
	return pool - &_k_mem_pool_list_start[0];
   19582:	4b26      	ldr	r3, [pc, #152]	; (1961c <k_mem_pool_alloc+0xb8>)
   19584:	4e26      	ldr	r6, [pc, #152]	; (19620 <k_mem_pool_alloc+0xbc>)
   19586:	1afb      	subs	r3, r7, r3
   19588:	109b      	asrs	r3, r3, #2
   1958a:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   1958c:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
   19590:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   19592:	ab03      	add	r3, sp, #12
   19594:	aa02      	add	r2, sp, #8
   19596:	9500      	str	r5, [sp, #0]
   19598:	4651      	mov	r1, sl
   1959a:	4638      	mov	r0, r7
   1959c:	f003 f9da 	bl	1c954 <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   195a0:	796b      	ldrb	r3, [r5, #5]
   195a2:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   195a4:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   195a6:	f362 0303 	bfi	r3, r2, #0, #4
   195aa:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   195ac:	686b      	ldr	r3, [r5, #4]
   195ae:	9a03      	ldr	r2, [sp, #12]
   195b0:	f362 331f 	bfi	r3, r2, #12, #20
   195b4:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   195b6:	b1c8      	cbz	r0, 195ec <k_mem_pool_alloc+0x88>
   195b8:	b1c4      	cbz	r4, 195ec <k_mem_pool_alloc+0x88>
   195ba:	f110 0f0c 	cmn.w	r0, #12
   195be:	d115      	bne.n	195ec <k_mem_pool_alloc+0x88>
	__asm__ volatile(
   195c0:	f04f 0320 	mov.w	r3, #32
   195c4:	f3ef 8011 	mrs	r0, BASEPRI
   195c8:	f383 8811 	msr	BASEPRI, r3
   195cc:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
   195d0:	4622      	mov	r2, r4
   195d2:	4659      	mov	r1, fp
   195d4:	f001 fb22 	bl	1ac1c <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   195d8:	1c63      	adds	r3, r4, #1
   195da:	d0da      	beq.n	19592 <k_mem_pool_alloc+0x2e>
	return z_impl_k_uptime_get();
   195dc:	f005 f9ee 	bl	1e9bc <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   195e0:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   195e4:	2c00      	cmp	r4, #0
   195e6:	dcd4      	bgt.n	19592 <k_mem_pool_alloc+0x2e>
				break;
			}
		}
	}

	return -EAGAIN;
   195e8:	f06f 000a 	mvn.w	r0, #10
}
   195ec:	b005      	add	sp, #20
   195ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");
   195f2:	490c      	ldr	r1, [pc, #48]	; (19624 <k_mem_pool_alloc+0xc0>)
   195f4:	2337      	movs	r3, #55	; 0x37
   195f6:	4a0c      	ldr	r2, [pc, #48]	; (19628 <k_mem_pool_alloc+0xc4>)
   195f8:	480c      	ldr	r0, [pc, #48]	; (1962c <k_mem_pool_alloc+0xc8>)
   195fa:	f003 fbdd 	bl	1cdb8 <printk>
   195fe:	480c      	ldr	r0, [pc, #48]	; (19630 <k_mem_pool_alloc+0xcc>)
   19600:	f003 fbda 	bl	1cdb8 <printk>
   19604:	2137      	movs	r1, #55	; 0x37
   19606:	4808      	ldr	r0, [pc, #32]	; (19628 <k_mem_pool_alloc+0xc4>)
   19608:	f003 fc08 	bl	1ce1c <assert_post_action>
	if (timeout > 0) {
   1960c:	2c00      	cmp	r4, #0
   1960e:	ddb6      	ble.n	1957e <k_mem_pool_alloc+0x1a>
   19610:	f005 f9d4 	bl	1e9bc <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   19614:	eb10 0804 	adds.w	r8, r0, r4
   19618:	e7b3      	b.n	19582 <k_mem_pool_alloc+0x1e>
   1961a:	bf00      	nop
   1961c:	2002c5c0 	.word	0x2002c5c0
   19620:	b6db6db7 	.word	0xb6db6db7
   19624:	00020400 	.word	0x00020400
   19628:	000203c9 	.word	0x000203c9
   1962c:	0001f722 	.word	0x0001f722
   19630:	0001fdcc 	.word	0x0001fdcc

00019634 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   19634:	b570      	push	{r4, r5, r6, lr}
   19636:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   19638:	6802      	ldr	r2, [r0, #0]
   1963a:	7841      	ldrb	r1, [r0, #1]
   1963c:	4d24      	ldr	r5, [pc, #144]	; (196d0 <k_mem_pool_free_id+0x9c>)
   1963e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   19642:	00a4      	lsls	r4, r4, #2
   19644:	0b12      	lsrs	r2, r2, #12
   19646:	f001 010f 	and.w	r1, r1, #15
   1964a:	1928      	adds	r0, r5, r4
   1964c:	f7f3 fc20 	bl	ce90 <z_sys_mem_pool_block_free>
   19650:	f04f 0320 	mov.w	r3, #32
   19654:	f3ef 8611 	mrs	r6, BASEPRI
   19658:	f383 8811 	msr	BASEPRI, r3
   1965c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19660:	481c      	ldr	r0, [pc, #112]	; (196d4 <k_mem_pool_free_id+0xa0>)
   19662:	f001 ff0f 	bl	1b484 <z_spin_lock_valid>
   19666:	b968      	cbnz	r0, 19684 <k_mem_pool_free_id+0x50>
   19668:	234a      	movs	r3, #74	; 0x4a
   1966a:	4a1b      	ldr	r2, [pc, #108]	; (196d8 <k_mem_pool_free_id+0xa4>)
   1966c:	491b      	ldr	r1, [pc, #108]	; (196dc <k_mem_pool_free_id+0xa8>)
   1966e:	481c      	ldr	r0, [pc, #112]	; (196e0 <k_mem_pool_free_id+0xac>)
   19670:	f003 fba2 	bl	1cdb8 <printk>
   19674:	4917      	ldr	r1, [pc, #92]	; (196d4 <k_mem_pool_free_id+0xa0>)
   19676:	481b      	ldr	r0, [pc, #108]	; (196e4 <k_mem_pool_free_id+0xb0>)
   19678:	f003 fb9e 	bl	1cdb8 <printk>
   1967c:	214a      	movs	r1, #74	; 0x4a
   1967e:	4816      	ldr	r0, [pc, #88]	; (196d8 <k_mem_pool_free_id+0xa4>)
   19680:	f003 fbcc 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   19684:	4813      	ldr	r0, [pc, #76]	; (196d4 <k_mem_pool_free_id+0xa0>)
   19686:	f001 ff1b 	bl	1b4c0 <z_spin_lock_set_owner>
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   1968a:	f104 0014 	add.w	r0, r4, #20
   1968e:	4428      	add	r0, r5
   19690:	f005 f8ef 	bl	1e872 <z_unpend_all>

	if (need_sched != 0) {
   19694:	b128      	cbz	r0, 196a2 <k_mem_pool_free_id+0x6e>
		z_reschedule(&lock, key);
   19696:	4631      	mov	r1, r6
	} else {
		k_spin_unlock(&lock, key);
	}
}
   19698:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1969c:	480d      	ldr	r0, [pc, #52]	; (196d4 <k_mem_pool_free_id+0xa0>)
   1969e:	f000 bd73 	b.w	1a188 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   196a2:	480c      	ldr	r0, [pc, #48]	; (196d4 <k_mem_pool_free_id+0xa0>)
   196a4:	f001 fefc 	bl	1b4a0 <z_spin_unlock_valid>
   196a8:	b968      	cbnz	r0, 196c6 <k_mem_pool_free_id+0x92>
   196aa:	235d      	movs	r3, #93	; 0x5d
   196ac:	4a0a      	ldr	r2, [pc, #40]	; (196d8 <k_mem_pool_free_id+0xa4>)
   196ae:	490e      	ldr	r1, [pc, #56]	; (196e8 <k_mem_pool_free_id+0xb4>)
   196b0:	480b      	ldr	r0, [pc, #44]	; (196e0 <k_mem_pool_free_id+0xac>)
   196b2:	f003 fb81 	bl	1cdb8 <printk>
   196b6:	4907      	ldr	r1, [pc, #28]	; (196d4 <k_mem_pool_free_id+0xa0>)
   196b8:	480c      	ldr	r0, [pc, #48]	; (196ec <k_mem_pool_free_id+0xb8>)
   196ba:	f003 fb7d 	bl	1cdb8 <printk>
   196be:	215d      	movs	r1, #93	; 0x5d
   196c0:	4805      	ldr	r0, [pc, #20]	; (196d8 <k_mem_pool_free_id+0xa4>)
   196c2:	f003 fbab 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   196c6:	f386 8811 	msr	BASEPRI, r6
   196ca:	f3bf 8f6f 	isb	sy
}
   196ce:	bd70      	pop	{r4, r5, r6, pc}
   196d0:	2002c5c0 	.word	0x2002c5c0
   196d4:	20024dfc 	.word	0x20024dfc
   196d8:	0001f904 	.word	0x0001f904
   196dc:	0001f923 	.word	0x0001f923
   196e0:	0001f722 	.word	0x0001f722
   196e4:	0001f938 	.word	0x0001f938
   196e8:	0001f950 	.word	0x0001f950
   196ec:	0001f967 	.word	0x0001f967

000196f0 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   196f0:	4601      	mov	r1, r0
   196f2:	4801      	ldr	r0, [pc, #4]	; (196f8 <k_malloc+0x8>)
   196f4:	f005 b843 	b.w	1e77e <k_mem_pool_malloc>
   196f8:	2002c5c0 	.word	0x2002c5c0

000196fc <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   196fc:	b510      	push	{r4, lr}
   196fe:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   19700:	f005 f8dd 	bl	1e8be <k_is_in_isr>
   19704:	b948      	cbnz	r0, 1971a <z_thread_malloc+0x1e>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   19706:	4b06      	ldr	r3, [pc, #24]	; (19720 <z_thread_malloc+0x24>)
   19708:	689b      	ldr	r3, [r3, #8]
   1970a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	}

	if (pool) {
   1970c:	b13b      	cbz	r3, 1971e <z_thread_malloc+0x22>
		ret = k_mem_pool_malloc(pool, size);
   1970e:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
   19710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   19714:	4618      	mov	r0, r3
   19716:	f005 b832 	b.w	1e77e <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   1971a:	4b02      	ldr	r3, [pc, #8]	; (19724 <z_thread_malloc+0x28>)
   1971c:	e7f7      	b.n	1970e <z_thread_malloc+0x12>
}
   1971e:	bd10      	pop	{r4, pc}
   19720:	20024e04 	.word	0x20024e04
   19724:	2002c5c0 	.word	0x2002c5c0

00019728 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, s32_t timeout)
{
   19728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1972c:	4604      	mov	r4, r0
   1972e:	4688      	mov	r8, r1
   19730:	4616      	mov	r6, r2
   19732:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || timeout == K_NO_WAIT, "");
   19736:	b16b      	cbz	r3, 19754 <z_impl_k_msgq_put+0x2c>
   19738:	b162      	cbz	r2, 19754 <z_impl_k_msgq_put+0x2c>
   1973a:	4941      	ldr	r1, [pc, #260]	; (19840 <z_impl_k_msgq_put+0x118>)
   1973c:	2376      	movs	r3, #118	; 0x76
   1973e:	4a41      	ldr	r2, [pc, #260]	; (19844 <z_impl_k_msgq_put+0x11c>)
   19740:	4841      	ldr	r0, [pc, #260]	; (19848 <z_impl_k_msgq_put+0x120>)
   19742:	f003 fb39 	bl	1cdb8 <printk>
   19746:	4841      	ldr	r0, [pc, #260]	; (1984c <z_impl_k_msgq_put+0x124>)
   19748:	f003 fb36 	bl	1cdb8 <printk>
   1974c:	2176      	movs	r1, #118	; 0x76
   1974e:	483d      	ldr	r0, [pc, #244]	; (19844 <z_impl_k_msgq_put+0x11c>)
   19750:	f003 fb64 	bl	1ce1c <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   19754:	f104 0508 	add.w	r5, r4, #8
	__asm__ volatile(
   19758:	f04f 0320 	mov.w	r3, #32
   1975c:	f3ef 8711 	mrs	r7, BASEPRI
   19760:	f383 8811 	msr	BASEPRI, r3
   19764:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19768:	4628      	mov	r0, r5
   1976a:	f001 fe8b 	bl	1b484 <z_spin_lock_valid>
   1976e:	b968      	cbnz	r0, 1978c <z_impl_k_msgq_put+0x64>
   19770:	234a      	movs	r3, #74	; 0x4a
   19772:	4a37      	ldr	r2, [pc, #220]	; (19850 <z_impl_k_msgq_put+0x128>)
   19774:	4937      	ldr	r1, [pc, #220]	; (19854 <z_impl_k_msgq_put+0x12c>)
   19776:	4834      	ldr	r0, [pc, #208]	; (19848 <z_impl_k_msgq_put+0x120>)
   19778:	f003 fb1e 	bl	1cdb8 <printk>
   1977c:	4629      	mov	r1, r5
   1977e:	4836      	ldr	r0, [pc, #216]	; (19858 <z_impl_k_msgq_put+0x130>)
   19780:	f003 fb1a 	bl	1cdb8 <printk>
   19784:	214a      	movs	r1, #74	; 0x4a
   19786:	4832      	ldr	r0, [pc, #200]	; (19850 <z_impl_k_msgq_put+0x128>)
   19788:	f003 fb48 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1978c:	4628      	mov	r0, r5
   1978e:	f001 fe97 	bl	1b4c0 <z_spin_lock_set_owner>

	if (msgq->used_msgs < msgq->max_msgs) {
   19792:	6a62      	ldr	r2, [r4, #36]	; 0x24
   19794:	6923      	ldr	r3, [r4, #16]
   19796:	429a      	cmp	r2, r3
   19798:	d242      	bcs.n	19820 <z_impl_k_msgq_put+0xf8>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1979a:	4620      	mov	r0, r4
   1979c:	f001 fb54 	bl	1ae48 <z_unpend_first_thread>
		if (pending_thread != NULL) {
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   197a0:	68e2      	ldr	r2, [r4, #12]
		if (pending_thread != NULL) {
   197a2:	4606      	mov	r6, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   197a4:	4641      	mov	r1, r8
		if (pending_thread != NULL) {
   197a6:	b1a0      	cbz	r0, 197d2 <z_impl_k_msgq_put+0xaa>
			(void)memcpy(pending_thread->base.swap_data, data,
   197a8:	6940      	ldr	r0, [r0, #20]
   197aa:	f004 f857 	bl	1d85c <memcpy>
   197ae:	2300      	movs	r3, #0
   197b0:	66b3      	str	r3, [r6, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   197b2:	7b73      	ldrb	r3, [r6, #13]
   197b4:	06db      	lsls	r3, r3, #27
   197b6:	d104      	bne.n	197c2 <z_impl_k_msgq_put+0x9a>
	if (z_is_thread_ready(thread)) {
   197b8:	69b3      	ldr	r3, [r6, #24]
   197ba:	b913      	cbnz	r3, 197c2 <z_impl_k_msgq_put+0x9a>
		z_add_thread_to_ready_q(thread);
   197bc:	4630      	mov	r0, r6
   197be:	f000 fecd 	bl	1a55c <z_add_thread_to_ready_q>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   197c2:	4639      	mov	r1, r7
   197c4:	4628      	mov	r0, r5
   197c6:	f000 fcdf 	bl	1a188 <z_reschedule>
			return 0;
   197ca:	2400      	movs	r4, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   197cc:	4620      	mov	r0, r4
   197ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   197d2:	6a20      	ldr	r0, [r4, #32]
   197d4:	f004 f842 	bl	1d85c <memcpy>
			msgq->write_ptr += msgq->msg_size;
   197d8:	6a23      	ldr	r3, [r4, #32]
   197da:	68e2      	ldr	r2, [r4, #12]
   197dc:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   197de:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   197e0:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   197e2:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   197e4:	bf04      	itt	eq
   197e6:	6963      	ldreq	r3, [r4, #20]
   197e8:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   197ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   197ec:	3301      	adds	r3, #1
   197ee:	6263      	str	r3, [r4, #36]	; 0x24
		result = 0;
   197f0:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   197f2:	4628      	mov	r0, r5
   197f4:	f001 fe54 	bl	1b4a0 <z_spin_unlock_valid>
   197f8:	b968      	cbnz	r0, 19816 <z_impl_k_msgq_put+0xee>
   197fa:	235d      	movs	r3, #93	; 0x5d
   197fc:	4a14      	ldr	r2, [pc, #80]	; (19850 <z_impl_k_msgq_put+0x128>)
   197fe:	4917      	ldr	r1, [pc, #92]	; (1985c <z_impl_k_msgq_put+0x134>)
   19800:	4811      	ldr	r0, [pc, #68]	; (19848 <z_impl_k_msgq_put+0x120>)
   19802:	f003 fad9 	bl	1cdb8 <printk>
   19806:	4629      	mov	r1, r5
   19808:	4815      	ldr	r0, [pc, #84]	; (19860 <z_impl_k_msgq_put+0x138>)
   1980a:	f003 fad5 	bl	1cdb8 <printk>
   1980e:	215d      	movs	r1, #93	; 0x5d
   19810:	480f      	ldr	r0, [pc, #60]	; (19850 <z_impl_k_msgq_put+0x128>)
   19812:	f003 fb03 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   19816:	f387 8811 	msr	BASEPRI, r7
   1981a:	f3bf 8f6f 	isb	sy
	return result;
   1981e:	e7d5      	b.n	197cc <z_impl_k_msgq_put+0xa4>
	} else if (timeout == K_NO_WAIT) {
   19820:	b15e      	cbz	r6, 1983a <z_impl_k_msgq_put+0x112>
		_current->base.swap_data = data;
   19822:	4b10      	ldr	r3, [pc, #64]	; (19864 <z_impl_k_msgq_put+0x13c>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   19824:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   19826:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   19828:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   1982a:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1982e:	4628      	mov	r0, r5
   19830:	4633      	mov	r3, r6
}
   19832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   19836:	f001 ba4b 	b.w	1acd0 <z_pend_curr>
		result = -ENOMSG;
   1983a:	f06f 044f 	mvn.w	r4, #79	; 0x4f
   1983e:	e7d8      	b.n	197f2 <z_impl_k_msgq_put+0xca>
   19840:	0002043f 	.word	0x0002043f
   19844:	00020424 	.word	0x00020424
   19848:	0001f722 	.word	0x0001f722
   1984c:	0001fdcc 	.word	0x0001fdcc
   19850:	0001f904 	.word	0x0001f904
   19854:	0001f923 	.word	0x0001f923
   19858:	0001f938 	.word	0x0001f938
   1985c:	0001f950 	.word	0x0001f950
   19860:	0001f967 	.word	0x0001f967
   19864:	20024e04 	.word	0x20024e04

00019868 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, s32_t timeout)
{
   19868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1986c:	4604      	mov	r4, r0
   1986e:	4688      	mov	r8, r1
   19870:	4615      	mov	r5, r2
   19872:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || timeout == K_NO_WAIT, "");
   19876:	b16b      	cbz	r3, 19894 <z_impl_k_msgq_get+0x2c>
   19878:	b162      	cbz	r2, 19894 <z_impl_k_msgq_get+0x2c>
   1987a:	4947      	ldr	r1, [pc, #284]	; (19998 <z_impl_k_msgq_get+0x130>)
   1987c:	23c1      	movs	r3, #193	; 0xc1
   1987e:	4a47      	ldr	r2, [pc, #284]	; (1999c <z_impl_k_msgq_get+0x134>)
   19880:	4847      	ldr	r0, [pc, #284]	; (199a0 <z_impl_k_msgq_get+0x138>)
   19882:	f003 fa99 	bl	1cdb8 <printk>
   19886:	4847      	ldr	r0, [pc, #284]	; (199a4 <z_impl_k_msgq_get+0x13c>)
   19888:	f003 fa96 	bl	1cdb8 <printk>
   1988c:	21c1      	movs	r1, #193	; 0xc1
   1988e:	4843      	ldr	r0, [pc, #268]	; (1999c <z_impl_k_msgq_get+0x134>)
   19890:	f003 fac4 	bl	1ce1c <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   19894:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   19898:	f04f 0320 	mov.w	r3, #32
   1989c:	f3ef 8711 	mrs	r7, BASEPRI
   198a0:	f383 8811 	msr	BASEPRI, r3
   198a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   198a8:	4630      	mov	r0, r6
   198aa:	f001 fdeb 	bl	1b484 <z_spin_lock_valid>
   198ae:	b968      	cbnz	r0, 198cc <z_impl_k_msgq_get+0x64>
   198b0:	234a      	movs	r3, #74	; 0x4a
   198b2:	4a3d      	ldr	r2, [pc, #244]	; (199a8 <z_impl_k_msgq_get+0x140>)
   198b4:	493d      	ldr	r1, [pc, #244]	; (199ac <z_impl_k_msgq_get+0x144>)
   198b6:	483a      	ldr	r0, [pc, #232]	; (199a0 <z_impl_k_msgq_get+0x138>)
   198b8:	f003 fa7e 	bl	1cdb8 <printk>
   198bc:	4631      	mov	r1, r6
   198be:	483c      	ldr	r0, [pc, #240]	; (199b0 <z_impl_k_msgq_get+0x148>)
   198c0:	f003 fa7a 	bl	1cdb8 <printk>
   198c4:	214a      	movs	r1, #74	; 0x4a
   198c6:	4838      	ldr	r0, [pc, #224]	; (199a8 <z_impl_k_msgq_get+0x140>)
   198c8:	f003 faa8 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   198cc:	4630      	mov	r0, r6
   198ce:	f001 fdf7 	bl	1b4c0 <z_spin_lock_set_owner>

	if (msgq->used_msgs > 0) {
   198d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   198d4:	2b00      	cmp	r3, #0
   198d6:	d039      	beq.n	1994c <z_impl_k_msgq_get+0xe4>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   198d8:	68e2      	ldr	r2, [r4, #12]
   198da:	69e1      	ldr	r1, [r4, #28]
   198dc:	4640      	mov	r0, r8
   198de:	f003 ffbd 	bl	1d85c <memcpy>
		msgq->read_ptr += msgq->msg_size;
   198e2:	69e3      	ldr	r3, [r4, #28]
   198e4:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   198e6:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   198e8:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   198ea:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   198ec:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   198ee:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   198f0:	bf04      	itt	eq
   198f2:	6963      	ldreq	r3, [r4, #20]
   198f4:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   198f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   198f8:	3b01      	subs	r3, #1
   198fa:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   198fc:	f001 faa4 	bl	1ae48 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   19900:	4605      	mov	r5, r0
   19902:	2800      	cmp	r0, #0
   19904:	d031      	beq.n	1996a <z_impl_k_msgq_get+0x102>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   19906:	68e2      	ldr	r2, [r4, #12]
   19908:	6941      	ldr	r1, [r0, #20]
   1990a:	6a20      	ldr	r0, [r4, #32]
   1990c:	f003 ffa6 	bl	1d85c <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   19910:	6a23      	ldr	r3, [r4, #32]
   19912:	68e2      	ldr	r2, [r4, #12]
   19914:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   19916:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   19918:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   1991a:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1991c:	bf04      	itt	eq
   1991e:	6963      	ldreq	r3, [r4, #20]
   19920:	6223      	streq	r3, [r4, #32]
			}
			msgq->used_msgs++;
   19922:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19924:	3301      	adds	r3, #1
   19926:	6263      	str	r3, [r4, #36]	; 0x24
   19928:	2300      	movs	r3, #0
   1992a:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1992c:	7b6b      	ldrb	r3, [r5, #13]
   1992e:	06db      	lsls	r3, r3, #27
   19930:	d104      	bne.n	1993c <z_impl_k_msgq_get+0xd4>
	if (z_is_thread_ready(thread)) {
   19932:	69ab      	ldr	r3, [r5, #24]
   19934:	b913      	cbnz	r3, 1993c <z_impl_k_msgq_get+0xd4>
		z_add_thread_to_ready_q(thread);
   19936:	4628      	mov	r0, r5
   19938:	f000 fe10 	bl	1a55c <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   1993c:	4639      	mov	r1, r7
   1993e:	4630      	mov	r0, r6
   19940:	f000 fc22 	bl	1a188 <z_reschedule>
			return 0;
   19944:	2500      	movs	r5, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   19946:	4628      	mov	r0, r5
   19948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
   1994c:	b15d      	cbz	r5, 19966 <z_impl_k_msgq_get+0xfe>
		_current->base.swap_data = data;
   1994e:	4b19      	ldr	r3, [pc, #100]	; (199b4 <z_impl_k_msgq_get+0x14c>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   19950:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   19952:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   19954:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   19956:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1995a:	4630      	mov	r0, r6
   1995c:	462b      	mov	r3, r5
}
   1995e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   19962:	f001 b9b5 	b.w	1acd0 <z_pend_curr>
		result = -ENOMSG;
   19966:	f06f 054f 	mvn.w	r5, #79	; 0x4f
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1996a:	4630      	mov	r0, r6
   1996c:	f001 fd98 	bl	1b4a0 <z_spin_unlock_valid>
   19970:	b968      	cbnz	r0, 1998e <z_impl_k_msgq_get+0x126>
   19972:	235d      	movs	r3, #93	; 0x5d
   19974:	4a0c      	ldr	r2, [pc, #48]	; (199a8 <z_impl_k_msgq_get+0x140>)
   19976:	4910      	ldr	r1, [pc, #64]	; (199b8 <z_impl_k_msgq_get+0x150>)
   19978:	4809      	ldr	r0, [pc, #36]	; (199a0 <z_impl_k_msgq_get+0x138>)
   1997a:	f003 fa1d 	bl	1cdb8 <printk>
   1997e:	4631      	mov	r1, r6
   19980:	480e      	ldr	r0, [pc, #56]	; (199bc <z_impl_k_msgq_get+0x154>)
   19982:	f003 fa19 	bl	1cdb8 <printk>
   19986:	215d      	movs	r1, #93	; 0x5d
   19988:	4807      	ldr	r0, [pc, #28]	; (199a8 <z_impl_k_msgq_get+0x140>)
   1998a:	f003 fa47 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1998e:	f387 8811 	msr	BASEPRI, r7
   19992:	f3bf 8f6f 	isb	sy
	return result;
   19996:	e7d6      	b.n	19946 <z_impl_k_msgq_get+0xde>
   19998:	0002043f 	.word	0x0002043f
   1999c:	00020424 	.word	0x00020424
   199a0:	0001f722 	.word	0x0001f722
   199a4:	0001fdcc 	.word	0x0001fdcc
   199a8:	0001f904 	.word	0x0001f904
   199ac:	0001f923 	.word	0x0001f923
   199b0:	0001f938 	.word	0x0001f938
   199b4:	20024e04 	.word	0x20024e04
   199b8:	0001f950 	.word	0x0001f950
   199bc:	0001f967 	.word	0x0001f967

000199c0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   199c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   199c2:	4604      	mov	r4, r0
   199c4:	460e      	mov	r6, r1
	__asm__ volatile(
   199c6:	f04f 0320 	mov.w	r3, #32
   199ca:	f3ef 8511 	mrs	r5, BASEPRI
   199ce:	f383 8811 	msr	BASEPRI, r3
   199d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   199d6:	4861      	ldr	r0, [pc, #388]	; (19b5c <z_impl_k_mutex_lock+0x19c>)
   199d8:	f001 fd54 	bl	1b484 <z_spin_lock_valid>
   199dc:	b968      	cbnz	r0, 199fa <z_impl_k_mutex_lock+0x3a>
   199de:	234a      	movs	r3, #74	; 0x4a
   199e0:	4a5f      	ldr	r2, [pc, #380]	; (19b60 <z_impl_k_mutex_lock+0x1a0>)
   199e2:	4960      	ldr	r1, [pc, #384]	; (19b64 <z_impl_k_mutex_lock+0x1a4>)
   199e4:	4860      	ldr	r0, [pc, #384]	; (19b68 <z_impl_k_mutex_lock+0x1a8>)
   199e6:	f003 f9e7 	bl	1cdb8 <printk>
   199ea:	495c      	ldr	r1, [pc, #368]	; (19b5c <z_impl_k_mutex_lock+0x19c>)
   199ec:	485f      	ldr	r0, [pc, #380]	; (19b6c <z_impl_k_mutex_lock+0x1ac>)
   199ee:	f003 f9e3 	bl	1cdb8 <printk>
   199f2:	214a      	movs	r1, #74	; 0x4a
   199f4:	485a      	ldr	r0, [pc, #360]	; (19b60 <z_impl_k_mutex_lock+0x1a0>)
   199f6:	f003 fa11 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   199fa:	4858      	ldr	r0, [pc, #352]	; (19b5c <z_impl_k_mutex_lock+0x19c>)
   199fc:	f001 fd60 	bl	1b4c0 <z_spin_lock_set_owner>
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   19a00:	68e3      	ldr	r3, [r4, #12]
   19a02:	4a5b      	ldr	r2, [pc, #364]	; (19b70 <z_impl_k_mutex_lock+0x1b0>)
   19a04:	b1f3      	cbz	r3, 19a44 <z_impl_k_mutex_lock+0x84>
   19a06:	68a0      	ldr	r0, [r4, #8]
   19a08:	6891      	ldr	r1, [r2, #8]
   19a0a:	4288      	cmp	r0, r1
   19a0c:	d03a      	beq.n	19a84 <z_impl_k_mutex_lock+0xc4>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   19a0e:	2e00      	cmp	r6, #0
   19a10:	d13a      	bne.n	19a88 <z_impl_k_mutex_lock+0xc8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19a12:	4852      	ldr	r0, [pc, #328]	; (19b5c <z_impl_k_mutex_lock+0x19c>)
   19a14:	f001 fd44 	bl	1b4a0 <z_spin_unlock_valid>
   19a18:	b968      	cbnz	r0, 19a36 <z_impl_k_mutex_lock+0x76>
   19a1a:	235d      	movs	r3, #93	; 0x5d
   19a1c:	4a50      	ldr	r2, [pc, #320]	; (19b60 <z_impl_k_mutex_lock+0x1a0>)
   19a1e:	4955      	ldr	r1, [pc, #340]	; (19b74 <z_impl_k_mutex_lock+0x1b4>)
   19a20:	4851      	ldr	r0, [pc, #324]	; (19b68 <z_impl_k_mutex_lock+0x1a8>)
   19a22:	f003 f9c9 	bl	1cdb8 <printk>
   19a26:	494d      	ldr	r1, [pc, #308]	; (19b5c <z_impl_k_mutex_lock+0x19c>)
   19a28:	4853      	ldr	r0, [pc, #332]	; (19b78 <z_impl_k_mutex_lock+0x1b8>)
   19a2a:	f003 f9c5 	bl	1cdb8 <printk>
   19a2e:	215d      	movs	r1, #93	; 0x5d
   19a30:	484b      	ldr	r0, [pc, #300]	; (19b60 <z_impl_k_mutex_lock+0x1a0>)
   19a32:	f003 f9f3 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   19a36:	f385 8811 	msr	BASEPRI, r5
   19a3a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   19a3e:	f06f 000f 	mvn.w	r0, #15
   19a42:	e01e      	b.n	19a82 <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   19a44:	6891      	ldr	r1, [r2, #8]
   19a46:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   19a4a:	3301      	adds	r3, #1
   19a4c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   19a4e:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   19a50:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   19a52:	60a3      	str	r3, [r4, #8]
   19a54:	4841      	ldr	r0, [pc, #260]	; (19b5c <z_impl_k_mutex_lock+0x19c>)
   19a56:	f001 fd23 	bl	1b4a0 <z_spin_unlock_valid>
   19a5a:	b968      	cbnz	r0, 19a78 <z_impl_k_mutex_lock+0xb8>
   19a5c:	235d      	movs	r3, #93	; 0x5d
   19a5e:	4a40      	ldr	r2, [pc, #256]	; (19b60 <z_impl_k_mutex_lock+0x1a0>)
   19a60:	4944      	ldr	r1, [pc, #272]	; (19b74 <z_impl_k_mutex_lock+0x1b4>)
   19a62:	4841      	ldr	r0, [pc, #260]	; (19b68 <z_impl_k_mutex_lock+0x1a8>)
   19a64:	f003 f9a8 	bl	1cdb8 <printk>
   19a68:	493c      	ldr	r1, [pc, #240]	; (19b5c <z_impl_k_mutex_lock+0x19c>)
   19a6a:	4843      	ldr	r0, [pc, #268]	; (19b78 <z_impl_k_mutex_lock+0x1b8>)
   19a6c:	f003 f9a4 	bl	1cdb8 <printk>
   19a70:	215d      	movs	r1, #93	; 0x5d
   19a72:	483b      	ldr	r0, [pc, #236]	; (19b60 <z_impl_k_mutex_lock+0x1a0>)
   19a74:	f003 f9d2 	bl	1ce1c <assert_post_action>
   19a78:	f385 8811 	msr	BASEPRI, r5
   19a7c:	f3bf 8f6f 	isb	sy
		return 0;
   19a80:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   19a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   19a84:	6921      	ldr	r1, [r4, #16]
   19a86:	e7e0      	b.n	19a4a <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   19a88:	f990 300e 	ldrsb.w	r3, [r0, #14]
   19a8c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   19a90:	4299      	cmp	r1, r3
   19a92:	bfa8      	it	ge
   19a94:	4619      	movge	r1, r3
   19a96:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   19a9a:	4299      	cmp	r1, r3
   19a9c:	da40      	bge.n	19b20 <z_impl_k_mutex_lock+0x160>
		return z_set_prio(mutex->owner, new_prio);
   19a9e:	f001 f945 	bl	1ad2c <z_set_prio>
   19aa2:	4607      	mov	r7, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   19aa4:	4633      	mov	r3, r6
   19aa6:	4622      	mov	r2, r4
   19aa8:	4629      	mov	r1, r5
   19aaa:	482c      	ldr	r0, [pc, #176]	; (19b5c <z_impl_k_mutex_lock+0x19c>)
   19aac:	f001 f910 	bl	1acd0 <z_pend_curr>
	if (got_mutex == 0) {
   19ab0:	2800      	cmp	r0, #0
   19ab2:	d0e6      	beq.n	19a82 <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   19ab4:	f04f 0320 	mov.w	r3, #32
   19ab8:	f3ef 8511 	mrs	r5, BASEPRI
   19abc:	f383 8811 	msr	BASEPRI, r3
   19ac0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19ac4:	4825      	ldr	r0, [pc, #148]	; (19b5c <z_impl_k_mutex_lock+0x19c>)
   19ac6:	f001 fcdd 	bl	1b484 <z_spin_lock_valid>
   19aca:	b968      	cbnz	r0, 19ae8 <z_impl_k_mutex_lock+0x128>
   19acc:	234a      	movs	r3, #74	; 0x4a
   19ace:	4a24      	ldr	r2, [pc, #144]	; (19b60 <z_impl_k_mutex_lock+0x1a0>)
   19ad0:	4924      	ldr	r1, [pc, #144]	; (19b64 <z_impl_k_mutex_lock+0x1a4>)
   19ad2:	4825      	ldr	r0, [pc, #148]	; (19b68 <z_impl_k_mutex_lock+0x1a8>)
   19ad4:	f003 f970 	bl	1cdb8 <printk>
   19ad8:	4920      	ldr	r1, [pc, #128]	; (19b5c <z_impl_k_mutex_lock+0x19c>)
   19ada:	4824      	ldr	r0, [pc, #144]	; (19b6c <z_impl_k_mutex_lock+0x1ac>)
   19adc:	f003 f96c 	bl	1cdb8 <printk>
   19ae0:	214a      	movs	r1, #74	; 0x4a
   19ae2:	481f      	ldr	r0, [pc, #124]	; (19b60 <z_impl_k_mutex_lock+0x1a0>)
   19ae4:	f003 f99a 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   19ae8:	481c      	ldr	r0, [pc, #112]	; (19b5c <z_impl_k_mutex_lock+0x19c>)
   19aea:	f001 fce9 	bl	1b4c0 <z_spin_lock_set_owner>
	return list->head == list;
   19aee:	6823      	ldr	r3, [r4, #0]
   19af0:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19af2:	429c      	cmp	r4, r3
   19af4:	d007      	beq.n	19b06 <z_impl_k_mutex_lock+0x146>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   19af6:	b133      	cbz	r3, 19b06 <z_impl_k_mutex_lock+0x146>
   19af8:	f993 300e 	ldrsb.w	r3, [r3, #14]
   19afc:	4299      	cmp	r1, r3
   19afe:	bfa8      	it	ge
   19b00:	4619      	movge	r1, r3
   19b02:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   19b06:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   19b08:	f990 300e 	ldrsb.w	r3, [r0, #14]
   19b0c:	4299      	cmp	r1, r3
   19b0e:	d109      	bne.n	19b24 <z_impl_k_mutex_lock+0x164>
	if (resched) {
   19b10:	b16f      	cbz	r7, 19b2e <z_impl_k_mutex_lock+0x16e>
		z_reschedule(&lock, key);
   19b12:	4629      	mov	r1, r5
   19b14:	4811      	ldr	r0, [pc, #68]	; (19b5c <z_impl_k_mutex_lock+0x19c>)
   19b16:	f000 fb37 	bl	1a188 <z_reschedule>
	return -EAGAIN;
   19b1a:	f06f 000a 	mvn.w	r0, #10
   19b1e:	e7b0      	b.n	19a82 <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   19b20:	2700      	movs	r7, #0
   19b22:	e7bf      	b.n	19aa4 <z_impl_k_mutex_lock+0xe4>
		return z_set_prio(mutex->owner, new_prio);
   19b24:	f001 f902 	bl	1ad2c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   19b28:	2800      	cmp	r0, #0
   19b2a:	d1f2      	bne.n	19b12 <z_impl_k_mutex_lock+0x152>
   19b2c:	e7f0      	b.n	19b10 <z_impl_k_mutex_lock+0x150>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19b2e:	480b      	ldr	r0, [pc, #44]	; (19b5c <z_impl_k_mutex_lock+0x19c>)
   19b30:	f001 fcb6 	bl	1b4a0 <z_spin_unlock_valid>
   19b34:	b968      	cbnz	r0, 19b52 <z_impl_k_mutex_lock+0x192>
   19b36:	235d      	movs	r3, #93	; 0x5d
   19b38:	4a09      	ldr	r2, [pc, #36]	; (19b60 <z_impl_k_mutex_lock+0x1a0>)
   19b3a:	490e      	ldr	r1, [pc, #56]	; (19b74 <z_impl_k_mutex_lock+0x1b4>)
   19b3c:	480a      	ldr	r0, [pc, #40]	; (19b68 <z_impl_k_mutex_lock+0x1a8>)
   19b3e:	f003 f93b 	bl	1cdb8 <printk>
   19b42:	4906      	ldr	r1, [pc, #24]	; (19b5c <z_impl_k_mutex_lock+0x19c>)
   19b44:	480c      	ldr	r0, [pc, #48]	; (19b78 <z_impl_k_mutex_lock+0x1b8>)
   19b46:	f003 f937 	bl	1cdb8 <printk>
   19b4a:	215d      	movs	r1, #93	; 0x5d
   19b4c:	4804      	ldr	r0, [pc, #16]	; (19b60 <z_impl_k_mutex_lock+0x1a0>)
   19b4e:	f003 f965 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   19b52:	f385 8811 	msr	BASEPRI, r5
   19b56:	f3bf 8f6f 	isb	sy
   19b5a:	e7de      	b.n	19b1a <z_impl_k_mutex_lock+0x15a>
   19b5c:	20024e00 	.word	0x20024e00
   19b60:	0001f904 	.word	0x0001f904
   19b64:	0001f923 	.word	0x0001f923
   19b68:	0001f722 	.word	0x0001f722
   19b6c:	0001f938 	.word	0x0001f938
   19b70:	20024e04 	.word	0x20024e04
   19b74:	0001f950 	.word	0x0001f950
   19b78:	0001f967 	.word	0x0001f967

00019b7c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   19b7c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
   19b7e:	6883      	ldr	r3, [r0, #8]
{
   19b80:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   19b82:	2b00      	cmp	r3, #0
   19b84:	f000 8096 	beq.w	19cb4 <z_impl_k_mutex_unlock+0x138>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   19b88:	4d4d      	ldr	r5, [pc, #308]	; (19cc0 <z_impl_k_mutex_unlock+0x144>)
   19b8a:	68aa      	ldr	r2, [r5, #8]
   19b8c:	4293      	cmp	r3, r2
   19b8e:	f040 8094 	bne.w	19cba <z_impl_k_mutex_unlock+0x13e>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   19b92:	68c3      	ldr	r3, [r0, #12]
   19b94:	b94b      	cbnz	r3, 19baa <z_impl_k_mutex_unlock+0x2e>
   19b96:	494b      	ldr	r1, [pc, #300]	; (19cc4 <z_impl_k_mutex_unlock+0x148>)
   19b98:	484b      	ldr	r0, [pc, #300]	; (19cc8 <z_impl_k_mutex_unlock+0x14c>)
   19b9a:	23e5      	movs	r3, #229	; 0xe5
   19b9c:	4a4b      	ldr	r2, [pc, #300]	; (19ccc <z_impl_k_mutex_unlock+0x150>)
   19b9e:	f003 f90b 	bl	1cdb8 <printk>
   19ba2:	21e5      	movs	r1, #229	; 0xe5
   19ba4:	4849      	ldr	r0, [pc, #292]	; (19ccc <z_impl_k_mutex_unlock+0x150>)
   19ba6:	f003 f939 	bl	1ce1c <assert_post_action>
   19baa:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   19bae:	b173      	cbz	r3, 19bce <z_impl_k_mutex_unlock+0x52>
   19bb0:	4947      	ldr	r1, [pc, #284]	; (19cd0 <z_impl_k_mutex_unlock+0x154>)
   19bb2:	f240 130d 	movw	r3, #269	; 0x10d
   19bb6:	4a47      	ldr	r2, [pc, #284]	; (19cd4 <z_impl_k_mutex_unlock+0x158>)
   19bb8:	4843      	ldr	r0, [pc, #268]	; (19cc8 <z_impl_k_mutex_unlock+0x14c>)
   19bba:	f003 f8fd 	bl	1cdb8 <printk>
   19bbe:	4846      	ldr	r0, [pc, #280]	; (19cd8 <z_impl_k_mutex_unlock+0x15c>)
   19bc0:	f003 f8fa 	bl	1cdb8 <printk>
   19bc4:	f240 110d 	movw	r1, #269	; 0x10d
   19bc8:	4842      	ldr	r0, [pc, #264]	; (19cd4 <z_impl_k_mutex_unlock+0x158>)
   19bca:	f003 f927 	bl	1ce1c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   19bce:	68ab      	ldr	r3, [r5, #8]
   19bd0:	7bdb      	ldrb	r3, [r3, #15]
   19bd2:	2b01      	cmp	r3, #1
   19bd4:	d10e      	bne.n	19bf4 <z_impl_k_mutex_unlock+0x78>
   19bd6:	4941      	ldr	r1, [pc, #260]	; (19cdc <z_impl_k_mutex_unlock+0x160>)
   19bd8:	f44f 7387 	mov.w	r3, #270	; 0x10e
   19bdc:	4a3d      	ldr	r2, [pc, #244]	; (19cd4 <z_impl_k_mutex_unlock+0x158>)
   19bde:	483a      	ldr	r0, [pc, #232]	; (19cc8 <z_impl_k_mutex_unlock+0x14c>)
   19be0:	f003 f8ea 	bl	1cdb8 <printk>
   19be4:	483c      	ldr	r0, [pc, #240]	; (19cd8 <z_impl_k_mutex_unlock+0x15c>)
   19be6:	f003 f8e7 	bl	1cdb8 <printk>
   19bea:	f44f 7187 	mov.w	r1, #270	; 0x10e
   19bee:	4839      	ldr	r0, [pc, #228]	; (19cd4 <z_impl_k_mutex_unlock+0x158>)
   19bf0:	f003 f914 	bl	1ce1c <assert_post_action>

	--_current->base.sched_locked;
   19bf4:	68aa      	ldr	r2, [r5, #8]
   19bf6:	7bd3      	ldrb	r3, [r2, #15]
   19bf8:	3b01      	subs	r3, #1
   19bfa:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   19bfc:	68e3      	ldr	r3, [r4, #12]
   19bfe:	2b01      	cmp	r3, #1
   19c00:	d005      	beq.n	19c0e <z_impl_k_mutex_unlock+0x92>
		mutex->lock_count--;
   19c02:	3b01      	subs	r3, #1
   19c04:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   19c06:	f000 fc2d 	bl	1a464 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   19c0a:	2000      	movs	r0, #0
}
   19c0c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   19c0e:	f04f 0320 	mov.w	r3, #32
   19c12:	f3ef 8511 	mrs	r5, BASEPRI
   19c16:	f383 8811 	msr	BASEPRI, r3
   19c1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19c1e:	4830      	ldr	r0, [pc, #192]	; (19ce0 <z_impl_k_mutex_unlock+0x164>)
   19c20:	f001 fc30 	bl	1b484 <z_spin_lock_valid>
   19c24:	b968      	cbnz	r0, 19c42 <z_impl_k_mutex_unlock+0xc6>
   19c26:	234a      	movs	r3, #74	; 0x4a
   19c28:	4a2e      	ldr	r2, [pc, #184]	; (19ce4 <z_impl_k_mutex_unlock+0x168>)
   19c2a:	492f      	ldr	r1, [pc, #188]	; (19ce8 <z_impl_k_mutex_unlock+0x16c>)
   19c2c:	4826      	ldr	r0, [pc, #152]	; (19cc8 <z_impl_k_mutex_unlock+0x14c>)
   19c2e:	f003 f8c3 	bl	1cdb8 <printk>
   19c32:	492b      	ldr	r1, [pc, #172]	; (19ce0 <z_impl_k_mutex_unlock+0x164>)
   19c34:	482d      	ldr	r0, [pc, #180]	; (19cec <z_impl_k_mutex_unlock+0x170>)
   19c36:	f003 f8bf 	bl	1cdb8 <printk>
   19c3a:	214a      	movs	r1, #74	; 0x4a
   19c3c:	4829      	ldr	r0, [pc, #164]	; (19ce4 <z_impl_k_mutex_unlock+0x168>)
   19c3e:	f003 f8ed 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   19c42:	4827      	ldr	r0, [pc, #156]	; (19ce0 <z_impl_k_mutex_unlock+0x164>)
   19c44:	f001 fc3c 	bl	1b4c0 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   19c48:	68a0      	ldr	r0, [r4, #8]
   19c4a:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   19c4c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   19c50:	4299      	cmp	r1, r3
   19c52:	d001      	beq.n	19c58 <z_impl_k_mutex_unlock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
   19c54:	f001 f86a 	bl	1ad2c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   19c58:	4620      	mov	r0, r4
   19c5a:	f001 f8f5 	bl	1ae48 <z_unpend_first_thread>
	mutex->owner = new_owner;
   19c5e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   19c60:	b180      	cbz	r0, 19c84 <z_impl_k_mutex_unlock+0x108>
		mutex->owner_orig_prio = new_owner->base.prio;
   19c62:	f990 200e 	ldrsb.w	r2, [r0, #14]
   19c66:	6122      	str	r2, [r4, #16]
   19c68:	2200      	movs	r2, #0
   19c6a:	6682      	str	r2, [r0, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   19c6c:	7b42      	ldrb	r2, [r0, #13]
   19c6e:	06d2      	lsls	r2, r2, #27
   19c70:	d103      	bne.n	19c7a <z_impl_k_mutex_unlock+0xfe>
	if (z_is_thread_ready(thread)) {
   19c72:	6983      	ldr	r3, [r0, #24]
   19c74:	b90b      	cbnz	r3, 19c7a <z_impl_k_mutex_unlock+0xfe>
		z_add_thread_to_ready_q(thread);
   19c76:	f000 fc71 	bl	1a55c <z_add_thread_to_ready_q>
		z_reschedule(&lock, key);
   19c7a:	4629      	mov	r1, r5
   19c7c:	4818      	ldr	r0, [pc, #96]	; (19ce0 <z_impl_k_mutex_unlock+0x164>)
   19c7e:	f000 fa83 	bl	1a188 <z_reschedule>
   19c82:	e7c0      	b.n	19c06 <z_impl_k_mutex_unlock+0x8a>
		mutex->lock_count = 0U;
   19c84:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19c86:	4816      	ldr	r0, [pc, #88]	; (19ce0 <z_impl_k_mutex_unlock+0x164>)
   19c88:	f001 fc0a 	bl	1b4a0 <z_spin_unlock_valid>
   19c8c:	b968      	cbnz	r0, 19caa <z_impl_k_mutex_unlock+0x12e>
   19c8e:	235d      	movs	r3, #93	; 0x5d
   19c90:	4a14      	ldr	r2, [pc, #80]	; (19ce4 <z_impl_k_mutex_unlock+0x168>)
   19c92:	4917      	ldr	r1, [pc, #92]	; (19cf0 <z_impl_k_mutex_unlock+0x174>)
   19c94:	480c      	ldr	r0, [pc, #48]	; (19cc8 <z_impl_k_mutex_unlock+0x14c>)
   19c96:	f003 f88f 	bl	1cdb8 <printk>
   19c9a:	4911      	ldr	r1, [pc, #68]	; (19ce0 <z_impl_k_mutex_unlock+0x164>)
   19c9c:	4815      	ldr	r0, [pc, #84]	; (19cf4 <z_impl_k_mutex_unlock+0x178>)
   19c9e:	f003 f88b 	bl	1cdb8 <printk>
   19ca2:	215d      	movs	r1, #93	; 0x5d
   19ca4:	480f      	ldr	r0, [pc, #60]	; (19ce4 <z_impl_k_mutex_unlock+0x168>)
   19ca6:	f003 f8b9 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   19caa:	f385 8811 	msr	BASEPRI, r5
   19cae:	f3bf 8f6f 	isb	sy
   19cb2:	e7a8      	b.n	19c06 <z_impl_k_mutex_unlock+0x8a>
		return -EINVAL;
   19cb4:	f06f 0015 	mvn.w	r0, #21
   19cb8:	e7a8      	b.n	19c0c <z_impl_k_mutex_unlock+0x90>
		return -EPERM;
   19cba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19cbe:	e7a5      	b.n	19c0c <z_impl_k_mutex_unlock+0x90>
   19cc0:	20024e04 	.word	0x20024e04
   19cc4:	0002047c 	.word	0x0002047c
   19cc8:	0001f722 	.word	0x0001f722
   19ccc:	00020461 	.word	0x00020461
   19cd0:	000204b7 	.word	0x000204b7
   19cd4:	00020493 	.word	0x00020493
   19cd8:	0001fdcc 	.word	0x0001fdcc
   19cdc:	000204c9 	.word	0x000204c9
   19ce0:	20024e00 	.word	0x20024e00
   19ce4:	0001f904 	.word	0x0001f904
   19ce8:	0001f923 	.word	0x0001f923
   19cec:	0001f938 	.word	0x0001f938
   19cf0:	0001f950 	.word	0x0001f950
   19cf4:	0001f967 	.word	0x0001f967

00019cf8 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   19cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19cfc:	4604      	mov	r4, r0
   19cfe:	460e      	mov	r6, r1
   19d00:	4690      	mov	r8, r2
   19d02:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   19d04:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   19d08:	f04f 0320 	mov.w	r3, #32
   19d0c:	f3ef 8711 	mrs	r7, BASEPRI
   19d10:	f383 8811 	msr	BASEPRI, r3
   19d14:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19d18:	4628      	mov	r0, r5
   19d1a:	f001 fbb3 	bl	1b484 <z_spin_lock_valid>
   19d1e:	b968      	cbnz	r0, 19d3c <queue_insert+0x44>
   19d20:	234a      	movs	r3, #74	; 0x4a
   19d22:	4a33      	ldr	r2, [pc, #204]	; (19df0 <queue_insert+0xf8>)
   19d24:	4933      	ldr	r1, [pc, #204]	; (19df4 <queue_insert+0xfc>)
   19d26:	4834      	ldr	r0, [pc, #208]	; (19df8 <queue_insert+0x100>)
   19d28:	f003 f846 	bl	1cdb8 <printk>
   19d2c:	4629      	mov	r1, r5
   19d2e:	4833      	ldr	r0, [pc, #204]	; (19dfc <queue_insert+0x104>)
   19d30:	f003 f842 	bl	1cdb8 <printk>
   19d34:	214a      	movs	r1, #74	; 0x4a
   19d36:	482e      	ldr	r0, [pc, #184]	; (19df0 <queue_insert+0xf8>)
   19d38:	f003 f870 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   19d3c:	4628      	mov	r0, r5
   19d3e:	f001 fbbf 	bl	1b4c0 <z_spin_lock_set_owner>
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   19d42:	f1b9 0f00 	cmp.w	r9, #0
   19d46:	d02d      	beq.n	19da4 <queue_insert+0xac>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   19d48:	2008      	movs	r0, #8
   19d4a:	f7ff fcd7 	bl	196fc <z_thread_malloc>
		if (anode == NULL) {
   19d4e:	b9c8      	cbnz	r0, 19d84 <queue_insert+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19d50:	4628      	mov	r0, r5
   19d52:	f001 fba5 	bl	1b4a0 <z_spin_unlock_valid>
   19d56:	b968      	cbnz	r0, 19d74 <queue_insert+0x7c>
   19d58:	235d      	movs	r3, #93	; 0x5d
   19d5a:	4a25      	ldr	r2, [pc, #148]	; (19df0 <queue_insert+0xf8>)
   19d5c:	4928      	ldr	r1, [pc, #160]	; (19e00 <queue_insert+0x108>)
   19d5e:	4826      	ldr	r0, [pc, #152]	; (19df8 <queue_insert+0x100>)
   19d60:	f003 f82a 	bl	1cdb8 <printk>
   19d64:	4629      	mov	r1, r5
   19d66:	4827      	ldr	r0, [pc, #156]	; (19e04 <queue_insert+0x10c>)
   19d68:	f003 f826 	bl	1cdb8 <printk>
   19d6c:	215d      	movs	r1, #93	; 0x5d
   19d6e:	4820      	ldr	r0, [pc, #128]	; (19df0 <queue_insert+0xf8>)
   19d70:	f003 f854 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   19d74:	f387 8811 	msr	BASEPRI, r7
   19d78:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   19d7c:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   19d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   19d84:	2301      	movs	r3, #1
		anode->data = data;
   19d86:	f8c0 8004 	str.w	r8, [r0, #4]
   19d8a:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   19d8c:	6803      	ldr	r3, [r0, #0]
   19d8e:	f003 0203 	and.w	r2, r3, #3
   19d92:	b95e      	cbnz	r6, 19dac <queue_insert+0xb4>
	parent->next_and_flags = cur_flags | (unative_t)child;
   19d94:	6823      	ldr	r3, [r4, #0]
   19d96:	4313      	orrs	r3, r2
   19d98:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   19d9a:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   19d9c:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   19d9e:	b973      	cbnz	r3, 19dbe <queue_insert+0xc6>
	list->tail = node;
   19da0:	6060      	str	r0, [r4, #4]
   19da2:	e00c      	b.n	19dbe <queue_insert+0xc6>
	node->next_and_flags = flags;
   19da4:	f8c8 9000 	str.w	r9, [r8]
   19da8:	4640      	mov	r0, r8
   19daa:	e7ef      	b.n	19d8c <queue_insert+0x94>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   19dac:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   19dae:	f033 0303 	bics.w	r3, r3, #3
   19db2:	d115      	bne.n	19de0 <queue_insert+0xe8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   19db4:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   19db6:	6862      	ldr	r2, [r4, #4]
   19db8:	b962      	cbnz	r2, 19dd4 <queue_insert+0xdc>
	list->head = node;
   19dba:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   19dbe:	2104      	movs	r1, #4
   19dc0:	f104 000c 	add.w	r0, r4, #12
   19dc4:	f004 fe51 	bl	1ea6a <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   19dc8:	4628      	mov	r0, r5
   19dca:	4639      	mov	r1, r7
   19dcc:	f000 f9dc 	bl	1a188 <z_reschedule>
	return 0;
   19dd0:	2000      	movs	r0, #0
   19dd2:	e7d5      	b.n	19d80 <queue_insert+0x88>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   19dd4:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   19dd6:	f003 0303 	and.w	r3, r3, #3
   19dda:	4303      	orrs	r3, r0
   19ddc:	6013      	str	r3, [r2, #0]
   19dde:	e7df      	b.n	19da0 <queue_insert+0xa8>
   19de0:	4313      	orrs	r3, r2
   19de2:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   19de4:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   19de6:	f003 0303 	and.w	r3, r3, #3
   19dea:	4318      	orrs	r0, r3
   19dec:	6030      	str	r0, [r6, #0]
   19dee:	e7e6      	b.n	19dbe <queue_insert+0xc6>
   19df0:	0001f904 	.word	0x0001f904
   19df4:	0001f923 	.word	0x0001f923
   19df8:	0001f722 	.word	0x0001f722
   19dfc:	0001f938 	.word	0x0001f938
   19e00:	0001f950 	.word	0x0001f950
   19e04:	0001f967 	.word	0x0001f967

00019e08 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   19e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e0c:	4606      	mov	r6, r0
   19e0e:	b089      	sub	sp, #36	; 0x24
   19e10:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   19e12:	f100 0408 	add.w	r4, r0, #8
	__asm__ volatile(
   19e16:	f04f 0320 	mov.w	r3, #32
   19e1a:	f3ef 8811 	mrs	r8, BASEPRI
   19e1e:	f383 8811 	msr	BASEPRI, r3
   19e22:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19e26:	4620      	mov	r0, r4
   19e28:	f001 fb2c 	bl	1b484 <z_spin_lock_valid>
   19e2c:	b968      	cbnz	r0, 19e4a <z_impl_k_queue_get+0x42>
   19e2e:	234a      	movs	r3, #74	; 0x4a
   19e30:	4a5f      	ldr	r2, [pc, #380]	; (19fb0 <z_impl_k_queue_get+0x1a8>)
   19e32:	4960      	ldr	r1, [pc, #384]	; (19fb4 <z_impl_k_queue_get+0x1ac>)
   19e34:	4860      	ldr	r0, [pc, #384]	; (19fb8 <z_impl_k_queue_get+0x1b0>)
   19e36:	f002 ffbf 	bl	1cdb8 <printk>
   19e3a:	4621      	mov	r1, r4
   19e3c:	485f      	ldr	r0, [pc, #380]	; (19fbc <z_impl_k_queue_get+0x1b4>)
   19e3e:	f002 ffbb 	bl	1cdb8 <printk>
   19e42:	214a      	movs	r1, #74	; 0x4a
   19e44:	485a      	ldr	r0, [pc, #360]	; (19fb0 <z_impl_k_queue_get+0x1a8>)
   19e46:	f002 ffe9 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   19e4a:	4620      	mov	r0, r4
   19e4c:	f001 fb38 	bl	1b4c0 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   19e50:	6835      	ldr	r5, [r6, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   19e52:	b335      	cbz	r5, 19ea2 <z_impl_k_queue_get+0x9a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   19e54:	682b      	ldr	r3, [r5, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   19e56:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   19e58:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   19e5c:	4295      	cmp	r5, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   19e5e:	4628      	mov	r0, r5
	list->head = node;
   19e60:	6033      	str	r3, [r6, #0]
	list->tail = node;
   19e62:	bf08      	it	eq
   19e64:	6073      	streq	r3, [r6, #4]
   19e66:	2101      	movs	r1, #1
   19e68:	f004 fcbb 	bl	1e7e2 <z_queue_node_peek>
   19e6c:	4605      	mov	r5, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19e6e:	4620      	mov	r0, r4
   19e70:	f001 fb16 	bl	1b4a0 <z_spin_unlock_valid>
   19e74:	b968      	cbnz	r0, 19e92 <z_impl_k_queue_get+0x8a>
   19e76:	235d      	movs	r3, #93	; 0x5d
   19e78:	4a4d      	ldr	r2, [pc, #308]	; (19fb0 <z_impl_k_queue_get+0x1a8>)
   19e7a:	4951      	ldr	r1, [pc, #324]	; (19fc0 <z_impl_k_queue_get+0x1b8>)
   19e7c:	484e      	ldr	r0, [pc, #312]	; (19fb8 <z_impl_k_queue_get+0x1b0>)
   19e7e:	f002 ff9b 	bl	1cdb8 <printk>
   19e82:	4621      	mov	r1, r4
   19e84:	484f      	ldr	r0, [pc, #316]	; (19fc4 <z_impl_k_queue_get+0x1bc>)
   19e86:	f002 ff97 	bl	1cdb8 <printk>
   19e8a:	215d      	movs	r1, #93	; 0x5d
   19e8c:	4848      	ldr	r0, [pc, #288]	; (19fb0 <z_impl_k_queue_get+0x1a8>)
   19e8e:	f002 ffc5 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   19e92:	f388 8811 	msr	BASEPRI, r8
   19e96:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   19e9a:	4628      	mov	r0, r5
   19e9c:	b009      	add	sp, #36	; 0x24
   19e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ea2:	4620      	mov	r0, r4
	if (timeout == K_NO_WAIT) {
   19ea4:	2f00      	cmp	r7, #0
   19ea6:	d0e3      	beq.n	19e70 <z_impl_k_queue_get+0x68>
   19ea8:	f001 fafa 	bl	1b4a0 <z_spin_unlock_valid>
   19eac:	b968      	cbnz	r0, 19eca <z_impl_k_queue_get+0xc2>
   19eae:	235d      	movs	r3, #93	; 0x5d
   19eb0:	4a3f      	ldr	r2, [pc, #252]	; (19fb0 <z_impl_k_queue_get+0x1a8>)
   19eb2:	4943      	ldr	r1, [pc, #268]	; (19fc0 <z_impl_k_queue_get+0x1b8>)
   19eb4:	4840      	ldr	r0, [pc, #256]	; (19fb8 <z_impl_k_queue_get+0x1b0>)
   19eb6:	f002 ff7f 	bl	1cdb8 <printk>
   19eba:	4621      	mov	r1, r4
   19ebc:	4841      	ldr	r0, [pc, #260]	; (19fc4 <z_impl_k_queue_get+0x1bc>)
   19ebe:	f002 ff7b 	bl	1cdb8 <printk>
   19ec2:	215d      	movs	r1, #93	; 0x5d
   19ec4:	483a      	ldr	r0, [pc, #232]	; (19fb0 <z_impl_k_queue_get+0x1a8>)
   19ec6:	f002 ffa9 	bl	1ce1c <assert_post_action>
   19eca:	f388 8811 	msr	BASEPRI, r8
   19ece:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   19ed2:	2200      	movs	r2, #0
   19ed4:	4633      	mov	r3, r6
   19ed6:	2104      	movs	r1, #4
   19ed8:	a803      	add	r0, sp, #12
   19eda:	f002 fa59 	bl	1c390 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   19ede:	1c7a      	adds	r2, r7, #1
   19ee0:	d002      	beq.n	19ee8 <z_impl_k_queue_get+0xe0>
   19ee2:	f004 fd6b 	bl	1e9bc <z_impl_k_uptime_get>
   19ee6:	4683      	mov	fp, r0
{
   19ee8:	f04f 0900 	mov.w	r9, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19eec:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 19fb0 <z_impl_k_queue_get+0x1a8>
   19ef0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 19fb8 <z_impl_k_queue_get+0x1b0>
		event.state = K_POLL_STATE_NOT_READY;
   19ef4:	9b06      	ldr	r3, [sp, #24]
   19ef6:	f36f 3310 	bfc	r3, #12, #5
   19efa:	9306      	str	r3, [sp, #24]
	return z_impl_k_poll(events, num_events, timeout);
   19efc:	2101      	movs	r1, #1
   19efe:	eba7 0209 	sub.w	r2, r7, r9
   19f02:	a803      	add	r0, sp, #12
   19f04:	f002 fa96 	bl	1c434 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   19f08:	b118      	cbz	r0, 19f12 <z_impl_k_queue_get+0x10a>
   19f0a:	300b      	adds	r0, #11
   19f0c:	d001      	beq.n	19f12 <z_impl_k_queue_get+0x10a>
			return NULL;
   19f0e:	2500      	movs	r5, #0
   19f10:	e7c3      	b.n	19e9a <z_impl_k_queue_get+0x92>
	__asm__ volatile(
   19f12:	f04f 0320 	mov.w	r3, #32
   19f16:	f3ef 8211 	mrs	r2, BASEPRI
   19f1a:	f383 8811 	msr	BASEPRI, r3
   19f1e:	f3bf 8f6f 	isb	sy
   19f22:	4620      	mov	r0, r4
   19f24:	9201      	str	r2, [sp, #4]
   19f26:	f001 faad 	bl	1b484 <z_spin_lock_valid>
   19f2a:	b968      	cbnz	r0, 19f48 <z_impl_k_queue_get+0x140>
   19f2c:	234a      	movs	r3, #74	; 0x4a
   19f2e:	4642      	mov	r2, r8
   19f30:	4920      	ldr	r1, [pc, #128]	; (19fb4 <z_impl_k_queue_get+0x1ac>)
   19f32:	4650      	mov	r0, sl
   19f34:	f002 ff40 	bl	1cdb8 <printk>
   19f38:	4621      	mov	r1, r4
   19f3a:	4820      	ldr	r0, [pc, #128]	; (19fbc <z_impl_k_queue_get+0x1b4>)
   19f3c:	f002 ff3c 	bl	1cdb8 <printk>
   19f40:	214a      	movs	r1, #74	; 0x4a
   19f42:	4640      	mov	r0, r8
   19f44:	f002 ff6a 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   19f48:	4620      	mov	r0, r4
   19f4a:	f001 fab9 	bl	1b4c0 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   19f4e:	6830      	ldr	r0, [r6, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   19f50:	b138      	cbz	r0, 19f62 <z_impl_k_queue_get+0x15a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   19f52:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   19f54:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   19f56:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   19f5a:	4290      	cmp	r0, r2
	list->head = node;
   19f5c:	6033      	str	r3, [r6, #0]
	list->tail = node;
   19f5e:	bf08      	it	eq
   19f60:	6073      	streq	r3, [r6, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   19f62:	2101      	movs	r1, #1
   19f64:	f004 fc3d 	bl	1e7e2 <z_queue_node_peek>
   19f68:	4605      	mov	r5, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19f6a:	4620      	mov	r0, r4
   19f6c:	f001 fa98 	bl	1b4a0 <z_spin_unlock_valid>
   19f70:	b968      	cbnz	r0, 19f8e <z_impl_k_queue_get+0x186>
   19f72:	235d      	movs	r3, #93	; 0x5d
   19f74:	4642      	mov	r2, r8
   19f76:	4912      	ldr	r1, [pc, #72]	; (19fc0 <z_impl_k_queue_get+0x1b8>)
   19f78:	4650      	mov	r0, sl
   19f7a:	f002 ff1d 	bl	1cdb8 <printk>
   19f7e:	4621      	mov	r1, r4
   19f80:	4810      	ldr	r0, [pc, #64]	; (19fc4 <z_impl_k_queue_get+0x1bc>)
   19f82:	f002 ff19 	bl	1cdb8 <printk>
   19f86:	215d      	movs	r1, #93	; 0x5d
   19f88:	4640      	mov	r0, r8
   19f8a:	f002 ff47 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   19f8e:	9b01      	ldr	r3, [sp, #4]
   19f90:	f383 8811 	msr	BASEPRI, r3
   19f94:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   19f98:	2d00      	cmp	r5, #0
   19f9a:	f47f af7e 	bne.w	19e9a <z_impl_k_queue_get+0x92>
   19f9e:	1c7b      	adds	r3, r7, #1
   19fa0:	d0a8      	beq.n	19ef4 <z_impl_k_queue_get+0xec>
	return z_impl_k_uptime_get();
   19fa2:	f004 fd0b 	bl	1e9bc <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   19fa6:	eba0 090b 	sub.w	r9, r0, fp
	} while (!val && !done);
   19faa:	454f      	cmp	r7, r9
   19fac:	daa2      	bge.n	19ef4 <z_impl_k_queue_get+0xec>
   19fae:	e7ae      	b.n	19f0e <z_impl_k_queue_get+0x106>
   19fb0:	0001f904 	.word	0x0001f904
   19fb4:	0001f923 	.word	0x0001f923
   19fb8:	0001f722 	.word	0x0001f722
   19fbc:	0001f938 	.word	0x0001f938
   19fc0:	0001f950 	.word	0x0001f950
   19fc4:	0001f967 	.word	0x0001f967

00019fc8 <pended_on.isra.17>:
	}
}

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   19fc8:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   19fca:	b510      	push	{r4, lr}
   19fcc:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   19fce:	b95b      	cbnz	r3, 19fe8 <pended_on.isra.17+0x20>
   19fd0:	4906      	ldr	r1, [pc, #24]	; (19fec <pended_on.isra.17+0x24>)
   19fd2:	4807      	ldr	r0, [pc, #28]	; (19ff0 <pended_on.isra.17+0x28>)
   19fd4:	f240 139d 	movw	r3, #413	; 0x19d
   19fd8:	4a06      	ldr	r2, [pc, #24]	; (19ff4 <pended_on.isra.17+0x2c>)
   19fda:	f002 feed 	bl	1cdb8 <printk>
   19fde:	f240 119d 	movw	r1, #413	; 0x19d
   19fe2:	4804      	ldr	r0, [pc, #16]	; (19ff4 <pended_on.isra.17+0x2c>)
   19fe4:	f002 ff1a 	bl	1ce1c <assert_post_action>

	return thread->base.pended_on;
}
   19fe8:	6820      	ldr	r0, [r4, #0]
   19fea:	bd10      	pop	{r4, pc}
   19fec:	0002056a 	.word	0x0002056a
   19ff0:	0001f722 	.word	0x0001f722
   19ff4:	0002054f 	.word	0x0002054f

00019ff8 <z_reset_time_slice>:
{
   19ff8:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   19ffa:	4c08      	ldr	r4, [pc, #32]	; (1a01c <z_reset_time_slice+0x24>)
   19ffc:	6823      	ldr	r3, [r4, #0]
   19ffe:	b15b      	cbz	r3, 1a018 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1a000:	f7f3 fb64 	bl	d6cc <z_clock_elapsed>
   1a004:	6823      	ldr	r3, [r4, #0]
   1a006:	4a06      	ldr	r2, [pc, #24]	; (1a020 <z_reset_time_slice+0x28>)
   1a008:	4418      	add	r0, r3
   1a00a:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1a00c:	2100      	movs	r1, #0
}
   1a00e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   1a012:	4618      	mov	r0, r3
   1a014:	f001 be0c 	b.w	1bc30 <z_set_timeout_expiry>
}
   1a018:	bd10      	pop	{r4, pc}
   1a01a:	bf00      	nop
   1a01c:	20024e44 	.word	0x20024e44
   1a020:	20024e04 	.word	0x20024e04

0001a024 <k_sched_time_slice_set>:
{
   1a024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a026:	4607      	mov	r7, r0
   1a028:	460d      	mov	r5, r1
	__asm__ volatile(
   1a02a:	f04f 0320 	mov.w	r3, #32
   1a02e:	f3ef 8411 	mrs	r4, BASEPRI
   1a032:	f383 8811 	msr	BASEPRI, r3
   1a036:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a03a:	4820      	ldr	r0, [pc, #128]	; (1a0bc <k_sched_time_slice_set+0x98>)
   1a03c:	f001 fa22 	bl	1b484 <z_spin_lock_valid>
   1a040:	b968      	cbnz	r0, 1a05e <k_sched_time_slice_set+0x3a>
   1a042:	234a      	movs	r3, #74	; 0x4a
   1a044:	4a1e      	ldr	r2, [pc, #120]	; (1a0c0 <k_sched_time_slice_set+0x9c>)
   1a046:	491f      	ldr	r1, [pc, #124]	; (1a0c4 <k_sched_time_slice_set+0xa0>)
   1a048:	481f      	ldr	r0, [pc, #124]	; (1a0c8 <k_sched_time_slice_set+0xa4>)
   1a04a:	f002 feb5 	bl	1cdb8 <printk>
   1a04e:	491b      	ldr	r1, [pc, #108]	; (1a0bc <k_sched_time_slice_set+0x98>)
   1a050:	481e      	ldr	r0, [pc, #120]	; (1a0cc <k_sched_time_slice_set+0xa8>)
   1a052:	f002 feb1 	bl	1cdb8 <printk>
   1a056:	214a      	movs	r1, #74	; 0x4a
   1a058:	4819      	ldr	r0, [pc, #100]	; (1a0c0 <k_sched_time_slice_set+0x9c>)
   1a05a:	f002 fedf 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a05e:	4817      	ldr	r0, [pc, #92]	; (1a0bc <k_sched_time_slice_set+0x98>)
   1a060:	f001 fa2e 	bl	1b4c0 <z_spin_lock_set_owner>
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
   1a064:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   1a068:	2200      	movs	r2, #0
   1a06a:	f240 30e7 	movw	r0, #999	; 0x3e7
   1a06e:	2100      	movs	r1, #0
   1a070:	4b17      	ldr	r3, [pc, #92]	; (1a0d0 <k_sched_time_slice_set+0xac>)
   1a072:	fbe6 0107 	umlal	r0, r1, r6, r7
   1a076:	611a      	str	r2, [r3, #16]
   1a078:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a07c:	2300      	movs	r3, #0
   1a07e:	f7f2 f8dd 	bl	c23c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1a082:	4b14      	ldr	r3, [pc, #80]	; (1a0d4 <k_sched_time_slice_set+0xb0>)
   1a084:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1a086:	4b14      	ldr	r3, [pc, #80]	; (1a0d8 <k_sched_time_slice_set+0xb4>)
   1a088:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1a08a:	f7ff ffb5 	bl	19ff8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a08e:	480b      	ldr	r0, [pc, #44]	; (1a0bc <k_sched_time_slice_set+0x98>)
   1a090:	f001 fa06 	bl	1b4a0 <z_spin_unlock_valid>
   1a094:	b968      	cbnz	r0, 1a0b2 <k_sched_time_slice_set+0x8e>
   1a096:	235d      	movs	r3, #93	; 0x5d
   1a098:	4a09      	ldr	r2, [pc, #36]	; (1a0c0 <k_sched_time_slice_set+0x9c>)
   1a09a:	4910      	ldr	r1, [pc, #64]	; (1a0dc <k_sched_time_slice_set+0xb8>)
   1a09c:	480a      	ldr	r0, [pc, #40]	; (1a0c8 <k_sched_time_slice_set+0xa4>)
   1a09e:	f002 fe8b 	bl	1cdb8 <printk>
   1a0a2:	4906      	ldr	r1, [pc, #24]	; (1a0bc <k_sched_time_slice_set+0x98>)
   1a0a4:	480e      	ldr	r0, [pc, #56]	; (1a0e0 <k_sched_time_slice_set+0xbc>)
   1a0a6:	f002 fe87 	bl	1cdb8 <printk>
   1a0aa:	215d      	movs	r1, #93	; 0x5d
   1a0ac:	4804      	ldr	r0, [pc, #16]	; (1a0c0 <k_sched_time_slice_set+0x9c>)
   1a0ae:	f002 feb5 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1a0b2:	f384 8811 	msr	BASEPRI, r4
   1a0b6:	f3bf 8f6f 	isb	sy
}
   1a0ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a0bc:	20024e3c 	.word	0x20024e3c
   1a0c0:	0001f904 	.word	0x0001f904
   1a0c4:	0001f923 	.word	0x0001f923
   1a0c8:	0001f722 	.word	0x0001f722
   1a0cc:	0001f938 	.word	0x0001f938
   1a0d0:	20024e04 	.word	0x20024e04
   1a0d4:	20024e44 	.word	0x20024e44
   1a0d8:	20024e40 	.word	0x20024e40
   1a0dc:	0001f950 	.word	0x0001f950
   1a0e0:	0001f967 	.word	0x0001f967

0001a0e4 <z_unpend_thread_no_timeout>:

	return ret;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   1a0e4:	b538      	push	{r3, r4, r5, lr}
   1a0e6:	4604      	mov	r4, r0
	__asm__ volatile(
   1a0e8:	f04f 0320 	mov.w	r3, #32
   1a0ec:	f3ef 8511 	mrs	r5, BASEPRI
   1a0f0:	f383 8811 	msr	BASEPRI, r3
   1a0f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a0f8:	481c      	ldr	r0, [pc, #112]	; (1a16c <z_unpend_thread_no_timeout+0x88>)
   1a0fa:	f001 f9c3 	bl	1b484 <z_spin_lock_valid>
   1a0fe:	b968      	cbnz	r0, 1a11c <z_unpend_thread_no_timeout+0x38>
   1a100:	234a      	movs	r3, #74	; 0x4a
   1a102:	4a1b      	ldr	r2, [pc, #108]	; (1a170 <z_unpend_thread_no_timeout+0x8c>)
   1a104:	491b      	ldr	r1, [pc, #108]	; (1a174 <z_unpend_thread_no_timeout+0x90>)
   1a106:	481c      	ldr	r0, [pc, #112]	; (1a178 <z_unpend_thread_no_timeout+0x94>)
   1a108:	f002 fe56 	bl	1cdb8 <printk>
   1a10c:	4917      	ldr	r1, [pc, #92]	; (1a16c <z_unpend_thread_no_timeout+0x88>)
   1a10e:	481b      	ldr	r0, [pc, #108]	; (1a17c <z_unpend_thread_no_timeout+0x98>)
   1a110:	f002 fe52 	bl	1cdb8 <printk>
   1a114:	214a      	movs	r1, #74	; 0x4a
   1a116:	4816      	ldr	r0, [pc, #88]	; (1a170 <z_unpend_thread_no_timeout+0x8c>)
   1a118:	f002 fe80 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a11c:	4813      	ldr	r0, [pc, #76]	; (1a16c <z_unpend_thread_no_timeout+0x88>)
   1a11e:	f001 f9cf 	bl	1b4c0 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1a122:	f104 0008 	add.w	r0, r4, #8
   1a126:	f7ff ff4f 	bl	19fc8 <pended_on.isra.17>
   1a12a:	4621      	mov	r1, r4
   1a12c:	f000 f8e0 	bl	1a2f0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1a130:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a132:	480e      	ldr	r0, [pc, #56]	; (1a16c <z_unpend_thread_no_timeout+0x88>)
   1a134:	f023 0302 	bic.w	r3, r3, #2
   1a138:	7363      	strb	r3, [r4, #13]
   1a13a:	f001 f9b1 	bl	1b4a0 <z_spin_unlock_valid>
   1a13e:	b968      	cbnz	r0, 1a15c <z_unpend_thread_no_timeout+0x78>
   1a140:	235d      	movs	r3, #93	; 0x5d
   1a142:	4a0b      	ldr	r2, [pc, #44]	; (1a170 <z_unpend_thread_no_timeout+0x8c>)
   1a144:	490e      	ldr	r1, [pc, #56]	; (1a180 <z_unpend_thread_no_timeout+0x9c>)
   1a146:	480c      	ldr	r0, [pc, #48]	; (1a178 <z_unpend_thread_no_timeout+0x94>)
   1a148:	f002 fe36 	bl	1cdb8 <printk>
   1a14c:	4907      	ldr	r1, [pc, #28]	; (1a16c <z_unpend_thread_no_timeout+0x88>)
   1a14e:	480d      	ldr	r0, [pc, #52]	; (1a184 <z_unpend_thread_no_timeout+0xa0>)
   1a150:	f002 fe32 	bl	1cdb8 <printk>
   1a154:	215d      	movs	r1, #93	; 0x5d
   1a156:	4806      	ldr	r0, [pc, #24]	; (1a170 <z_unpend_thread_no_timeout+0x8c>)
   1a158:	f002 fe60 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1a15c:	f385 8811 	msr	BASEPRI, r5
   1a160:	f3bf 8f6f 	isb	sy
		z_mark_thread_as_not_pending(thread);
	}

	thread->base.pended_on = NULL;
   1a164:	2300      	movs	r3, #0
   1a166:	60a3      	str	r3, [r4, #8]
}
   1a168:	bd38      	pop	{r3, r4, r5, pc}
   1a16a:	bf00      	nop
   1a16c:	20024e3c 	.word	0x20024e3c
   1a170:	0001f904 	.word	0x0001f904
   1a174:	0001f923 	.word	0x0001f923
   1a178:	0001f722 	.word	0x0001f722
   1a17c:	0001f938 	.word	0x0001f938
   1a180:	0001f950 	.word	0x0001f950
   1a184:	0001f967 	.word	0x0001f967

0001a188 <z_reschedule>:

	return arch_irq_unlocked(key) && !arch_is_in_isr();
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   1a188:	b538      	push	{r3, r4, r5, lr}
   1a18a:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1a18c:	460d      	mov	r5, r1
   1a18e:	b9c1      	cbnz	r1, 1a1c2 <z_reschedule+0x3a>
   1a190:	f3ef 8305 	mrs	r3, IPSR
   1a194:	b9ab      	cbnz	r3, 1a1c2 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a196:	f001 f983 	bl	1b4a0 <z_spin_unlock_valid>
   1a19a:	b968      	cbnz	r0, 1a1b8 <z_reschedule+0x30>
   1a19c:	2374      	movs	r3, #116	; 0x74
   1a19e:	4a14      	ldr	r2, [pc, #80]	; (1a1f0 <z_reschedule+0x68>)
   1a1a0:	4914      	ldr	r1, [pc, #80]	; (1a1f4 <z_reschedule+0x6c>)
   1a1a2:	4815      	ldr	r0, [pc, #84]	; (1a1f8 <z_reschedule+0x70>)
   1a1a4:	f002 fe08 	bl	1cdb8 <printk>
   1a1a8:	4621      	mov	r1, r4
   1a1aa:	4814      	ldr	r0, [pc, #80]	; (1a1fc <z_reschedule+0x74>)
   1a1ac:	f002 fe04 	bl	1cdb8 <printk>
   1a1b0:	2174      	movs	r1, #116	; 0x74
   1a1b2:	480f      	ldr	r0, [pc, #60]	; (1a1f0 <z_reschedule+0x68>)
   1a1b4:	f002 fe32 	bl	1ce1c <assert_post_action>
	if (resched(key.key)) {
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1a1b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1a1bc:	2000      	movs	r0, #0
   1a1be:	f7f3 bb35 	b.w	d82c <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a1c2:	4620      	mov	r0, r4
   1a1c4:	f001 f96c 	bl	1b4a0 <z_spin_unlock_valid>
   1a1c8:	b968      	cbnz	r0, 1a1e6 <z_reschedule+0x5e>
   1a1ca:	235d      	movs	r3, #93	; 0x5d
   1a1cc:	4a08      	ldr	r2, [pc, #32]	; (1a1f0 <z_reschedule+0x68>)
   1a1ce:	4909      	ldr	r1, [pc, #36]	; (1a1f4 <z_reschedule+0x6c>)
   1a1d0:	4809      	ldr	r0, [pc, #36]	; (1a1f8 <z_reschedule+0x70>)
   1a1d2:	f002 fdf1 	bl	1cdb8 <printk>
   1a1d6:	4621      	mov	r1, r4
   1a1d8:	4808      	ldr	r0, [pc, #32]	; (1a1fc <z_reschedule+0x74>)
   1a1da:	f002 fded 	bl	1cdb8 <printk>
   1a1de:	215d      	movs	r1, #93	; 0x5d
   1a1e0:	4803      	ldr	r0, [pc, #12]	; (1a1f0 <z_reschedule+0x68>)
   1a1e2:	f002 fe1b 	bl	1ce1c <assert_post_action>
   1a1e6:	f385 8811 	msr	BASEPRI, r5
   1a1ea:	f3bf 8f6f 	isb	sy
   1a1ee:	bd38      	pop	{r3, r4, r5, pc}
   1a1f0:	0001f904 	.word	0x0001f904
   1a1f4:	0001f950 	.word	0x0001f950
   1a1f8:	0001f722 	.word	0x0001f722
   1a1fc:	0001f967 	.word	0x0001f967

0001a200 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   1a200:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1a202:	f04f 0320 	mov.w	r3, #32
   1a206:	f3ef 8511 	mrs	r5, BASEPRI
   1a20a:	f383 8811 	msr	BASEPRI, r3
   1a20e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a212:	482b      	ldr	r0, [pc, #172]	; (1a2c0 <k_sched_lock+0xc0>)
   1a214:	f001 f936 	bl	1b484 <z_spin_lock_valid>
   1a218:	b968      	cbnz	r0, 1a236 <k_sched_lock+0x36>
   1a21a:	234a      	movs	r3, #74	; 0x4a
   1a21c:	4a29      	ldr	r2, [pc, #164]	; (1a2c4 <k_sched_lock+0xc4>)
   1a21e:	492a      	ldr	r1, [pc, #168]	; (1a2c8 <k_sched_lock+0xc8>)
   1a220:	482a      	ldr	r0, [pc, #168]	; (1a2cc <k_sched_lock+0xcc>)
   1a222:	f002 fdc9 	bl	1cdb8 <printk>
   1a226:	4926      	ldr	r1, [pc, #152]	; (1a2c0 <k_sched_lock+0xc0>)
   1a228:	4829      	ldr	r0, [pc, #164]	; (1a2d0 <k_sched_lock+0xd0>)
   1a22a:	f002 fdc5 	bl	1cdb8 <printk>
   1a22e:	214a      	movs	r1, #74	; 0x4a
   1a230:	4824      	ldr	r0, [pc, #144]	; (1a2c4 <k_sched_lock+0xc4>)
   1a232:	f002 fdf3 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a236:	4822      	ldr	r0, [pc, #136]	; (1a2c0 <k_sched_lock+0xc0>)
   1a238:	f001 f942 	bl	1b4c0 <z_spin_lock_set_owner>
   1a23c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1a240:	b173      	cbz	r3, 1a260 <k_sched_lock+0x60>
   1a242:	4924      	ldr	r1, [pc, #144]	; (1a2d4 <k_sched_lock+0xd4>)
   1a244:	f240 130d 	movw	r3, #269	; 0x10d
   1a248:	4a23      	ldr	r2, [pc, #140]	; (1a2d8 <k_sched_lock+0xd8>)
   1a24a:	4820      	ldr	r0, [pc, #128]	; (1a2cc <k_sched_lock+0xcc>)
   1a24c:	f002 fdb4 	bl	1cdb8 <printk>
   1a250:	4822      	ldr	r0, [pc, #136]	; (1a2dc <k_sched_lock+0xdc>)
   1a252:	f002 fdb1 	bl	1cdb8 <printk>
   1a256:	f240 110d 	movw	r1, #269	; 0x10d
   1a25a:	481f      	ldr	r0, [pc, #124]	; (1a2d8 <k_sched_lock+0xd8>)
   1a25c:	f002 fdde 	bl	1ce1c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   1a260:	4c1f      	ldr	r4, [pc, #124]	; (1a2e0 <k_sched_lock+0xe0>)
   1a262:	68a2      	ldr	r2, [r4, #8]
   1a264:	7bd2      	ldrb	r2, [r2, #15]
   1a266:	2a01      	cmp	r2, #1
   1a268:	d10e      	bne.n	1a288 <k_sched_lock+0x88>
   1a26a:	491e      	ldr	r1, [pc, #120]	; (1a2e4 <k_sched_lock+0xe4>)
   1a26c:	f44f 7387 	mov.w	r3, #270	; 0x10e
   1a270:	4a19      	ldr	r2, [pc, #100]	; (1a2d8 <k_sched_lock+0xd8>)
   1a272:	4816      	ldr	r0, [pc, #88]	; (1a2cc <k_sched_lock+0xcc>)
   1a274:	f002 fda0 	bl	1cdb8 <printk>
   1a278:	4818      	ldr	r0, [pc, #96]	; (1a2dc <k_sched_lock+0xdc>)
   1a27a:	f002 fd9d 	bl	1cdb8 <printk>
   1a27e:	f44f 7187 	mov.w	r1, #270	; 0x10e
   1a282:	4815      	ldr	r0, [pc, #84]	; (1a2d8 <k_sched_lock+0xd8>)
   1a284:	f002 fdca 	bl	1ce1c <assert_post_action>
	--_current->base.sched_locked;
   1a288:	68a2      	ldr	r2, [r4, #8]
   1a28a:	7bd3      	ldrb	r3, [r2, #15]
   1a28c:	3b01      	subs	r3, #1
   1a28e:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a290:	480b      	ldr	r0, [pc, #44]	; (1a2c0 <k_sched_lock+0xc0>)
   1a292:	f001 f905 	bl	1b4a0 <z_spin_unlock_valid>
   1a296:	b968      	cbnz	r0, 1a2b4 <k_sched_lock+0xb4>
   1a298:	235d      	movs	r3, #93	; 0x5d
   1a29a:	4a0a      	ldr	r2, [pc, #40]	; (1a2c4 <k_sched_lock+0xc4>)
   1a29c:	4912      	ldr	r1, [pc, #72]	; (1a2e8 <k_sched_lock+0xe8>)
   1a29e:	480b      	ldr	r0, [pc, #44]	; (1a2cc <k_sched_lock+0xcc>)
   1a2a0:	f002 fd8a 	bl	1cdb8 <printk>
   1a2a4:	4906      	ldr	r1, [pc, #24]	; (1a2c0 <k_sched_lock+0xc0>)
   1a2a6:	4811      	ldr	r0, [pc, #68]	; (1a2ec <k_sched_lock+0xec>)
   1a2a8:	f002 fd86 	bl	1cdb8 <printk>
   1a2ac:	215d      	movs	r1, #93	; 0x5d
   1a2ae:	4805      	ldr	r0, [pc, #20]	; (1a2c4 <k_sched_lock+0xc4>)
   1a2b0:	f002 fdb4 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1a2b4:	f385 8811 	msr	BASEPRI, r5
   1a2b8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1a2bc:	bd38      	pop	{r3, r4, r5, pc}
   1a2be:	bf00      	nop
   1a2c0:	20024e3c 	.word	0x20024e3c
   1a2c4:	0001f904 	.word	0x0001f904
   1a2c8:	0001f923 	.word	0x0001f923
   1a2cc:	0001f722 	.word	0x0001f722
   1a2d0:	0001f938 	.word	0x0001f938
   1a2d4:	000204b7 	.word	0x000204b7
   1a2d8:	00020493 	.word	0x00020493
   1a2dc:	0001fdcc 	.word	0x0001fdcc
   1a2e0:	20024e04 	.word	0x20024e04
   1a2e4:	000204c9 	.word	0x000204c9
   1a2e8:	0001f950 	.word	0x0001f950
   1a2ec:	0001f967 	.word	0x0001f967

0001a2f0 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1a2f0:	4b11      	ldr	r3, [pc, #68]	; (1a338 <z_priq_dumb_remove+0x48>)
{
   1a2f2:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1a2f4:	f103 0228 	add.w	r2, r3, #40	; 0x28
   1a2f8:	4282      	cmp	r2, r0
{
   1a2fa:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1a2fc:	d105      	bne.n	1a30a <z_priq_dumb_remove+0x1a>
   1a2fe:	689b      	ldr	r3, [r3, #8]
   1a300:	428b      	cmp	r3, r1
   1a302:	d102      	bne.n	1a30a <z_priq_dumb_remove+0x1a>
   1a304:	7b4b      	ldrb	r3, [r1, #13]
   1a306:	06db      	lsls	r3, r3, #27
   1a308:	d115      	bne.n	1a336 <z_priq_dumb_remove+0x46>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1a30a:	4b0c      	ldr	r3, [pc, #48]	; (1a33c <z_priq_dumb_remove+0x4c>)
   1a30c:	429c      	cmp	r4, r3
   1a30e:	d10b      	bne.n	1a328 <z_priq_dumb_remove+0x38>
   1a310:	490b      	ldr	r1, [pc, #44]	; (1a340 <z_priq_dumb_remove+0x50>)
   1a312:	480c      	ldr	r0, [pc, #48]	; (1a344 <z_priq_dumb_remove+0x54>)
   1a314:	f44f 7346 	mov.w	r3, #792	; 0x318
   1a318:	4a0b      	ldr	r2, [pc, #44]	; (1a348 <z_priq_dumb_remove+0x58>)
   1a31a:	f002 fd4d 	bl	1cdb8 <printk>
   1a31e:	f44f 7146 	mov.w	r1, #792	; 0x318
   1a322:	4809      	ldr	r0, [pc, #36]	; (1a348 <z_priq_dumb_remove+0x58>)
   1a324:	f002 fd7a 	bl	1ce1c <assert_post_action>
	node->prev->next = node->next;
   1a328:	e9d4 3200 	ldrd	r3, r2, [r4]
   1a32c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1a32e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a330:	2300      	movs	r3, #0
	node->prev = NULL;
   1a332:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1a336:	bd10      	pop	{r4, pc}
   1a338:	20024e04 	.word	0x20024e04
   1a33c:	20020c34 	.word	0x20020c34
   1a340:	000205a0 	.word	0x000205a0
   1a344:	0001f722 	.word	0x0001f722
   1a348:	0002054f 	.word	0x0002054f

0001a34c <z_unpend_thread>:
{
   1a34c:	b538      	push	{r3, r4, r5, lr}
   1a34e:	4604      	mov	r4, r0
	__asm__ volatile(
   1a350:	f04f 0320 	mov.w	r3, #32
   1a354:	f3ef 8511 	mrs	r5, BASEPRI
   1a358:	f383 8811 	msr	BASEPRI, r3
   1a35c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a360:	481e      	ldr	r0, [pc, #120]	; (1a3dc <z_unpend_thread+0x90>)
   1a362:	f001 f88f 	bl	1b484 <z_spin_lock_valid>
   1a366:	b968      	cbnz	r0, 1a384 <z_unpend_thread+0x38>
   1a368:	234a      	movs	r3, #74	; 0x4a
   1a36a:	4a1d      	ldr	r2, [pc, #116]	; (1a3e0 <z_unpend_thread+0x94>)
   1a36c:	491d      	ldr	r1, [pc, #116]	; (1a3e4 <z_unpend_thread+0x98>)
   1a36e:	481e      	ldr	r0, [pc, #120]	; (1a3e8 <z_unpend_thread+0x9c>)
   1a370:	f002 fd22 	bl	1cdb8 <printk>
   1a374:	4919      	ldr	r1, [pc, #100]	; (1a3dc <z_unpend_thread+0x90>)
   1a376:	481d      	ldr	r0, [pc, #116]	; (1a3ec <z_unpend_thread+0xa0>)
   1a378:	f002 fd1e 	bl	1cdb8 <printk>
   1a37c:	214a      	movs	r1, #74	; 0x4a
   1a37e:	4818      	ldr	r0, [pc, #96]	; (1a3e0 <z_unpend_thread+0x94>)
   1a380:	f002 fd4c 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a384:	4815      	ldr	r0, [pc, #84]	; (1a3dc <z_unpend_thread+0x90>)
   1a386:	f001 f89b 	bl	1b4c0 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1a38a:	f104 0008 	add.w	r0, r4, #8
   1a38e:	f7ff fe1b 	bl	19fc8 <pended_on.isra.17>
   1a392:	4621      	mov	r1, r4
   1a394:	f7ff ffac 	bl	1a2f0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1a398:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a39a:	4810      	ldr	r0, [pc, #64]	; (1a3dc <z_unpend_thread+0x90>)
   1a39c:	f023 0302 	bic.w	r3, r3, #2
   1a3a0:	7363      	strb	r3, [r4, #13]
   1a3a2:	f001 f87d 	bl	1b4a0 <z_spin_unlock_valid>
   1a3a6:	b968      	cbnz	r0, 1a3c4 <z_unpend_thread+0x78>
   1a3a8:	235d      	movs	r3, #93	; 0x5d
   1a3aa:	4a0d      	ldr	r2, [pc, #52]	; (1a3e0 <z_unpend_thread+0x94>)
   1a3ac:	4910      	ldr	r1, [pc, #64]	; (1a3f0 <z_unpend_thread+0xa4>)
   1a3ae:	480e      	ldr	r0, [pc, #56]	; (1a3e8 <z_unpend_thread+0x9c>)
   1a3b0:	f002 fd02 	bl	1cdb8 <printk>
   1a3b4:	4909      	ldr	r1, [pc, #36]	; (1a3dc <z_unpend_thread+0x90>)
   1a3b6:	480f      	ldr	r0, [pc, #60]	; (1a3f4 <z_unpend_thread+0xa8>)
   1a3b8:	f002 fcfe 	bl	1cdb8 <printk>
   1a3bc:	215d      	movs	r1, #93	; 0x5d
   1a3be:	4808      	ldr	r0, [pc, #32]	; (1a3e0 <z_unpend_thread+0x94>)
   1a3c0:	f002 fd2c 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1a3c4:	f385 8811 	msr	BASEPRI, r5
   1a3c8:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1a3cc:	2300      	movs	r3, #0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1a3ce:	f104 0018 	add.w	r0, r4, #24
   1a3d2:	60a3      	str	r3, [r4, #8]
}
   1a3d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1a3d8:	f001 bb94 	b.w	1bb04 <z_abort_timeout>
   1a3dc:	20024e3c 	.word	0x20024e3c
   1a3e0:	0001f904 	.word	0x0001f904
   1a3e4:	0001f923 	.word	0x0001f923
   1a3e8:	0001f722 	.word	0x0001f722
   1a3ec:	0001f938 	.word	0x0001f938
   1a3f0:	0001f950 	.word	0x0001f950
   1a3f4:	0001f967 	.word	0x0001f967

0001a3f8 <update_cache>:
{
   1a3f8:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1a3fa:	4c15      	ldr	r4, [pc, #84]	; (1a450 <update_cache+0x58>)
{
   1a3fc:	4602      	mov	r2, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1a3fe:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1a402:	f004 fa30 	bl	1e866 <z_priq_dumb_best>
	return thread ? thread : _current_cpu->idle_thread;
   1a406:	4605      	mov	r5, r0
   1a408:	b900      	cbnz	r0, 1a40c <update_cache+0x14>
   1a40a:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1a40c:	b9ca      	cbnz	r2, 1a442 <update_cache+0x4a>
	__ASSERT(_current != NULL, "");
   1a40e:	68a3      	ldr	r3, [r4, #8]
   1a410:	b963      	cbnz	r3, 1a42c <update_cache+0x34>
   1a412:	4910      	ldr	r1, [pc, #64]	; (1a454 <update_cache+0x5c>)
   1a414:	237e      	movs	r3, #126	; 0x7e
   1a416:	4a10      	ldr	r2, [pc, #64]	; (1a458 <update_cache+0x60>)
   1a418:	4810      	ldr	r0, [pc, #64]	; (1a45c <update_cache+0x64>)
   1a41a:	f002 fccd 	bl	1cdb8 <printk>
   1a41e:	4810      	ldr	r0, [pc, #64]	; (1a460 <update_cache+0x68>)
   1a420:	f002 fcca 	bl	1cdb8 <printk>
   1a424:	217e      	movs	r1, #126	; 0x7e
   1a426:	480c      	ldr	r0, [pc, #48]	; (1a458 <update_cache+0x60>)
   1a428:	f002 fcf8 	bl	1ce1c <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   1a42c:	68a3      	ldr	r3, [r4, #8]
   1a42e:	7b5a      	ldrb	r2, [r3, #13]
   1a430:	06d2      	lsls	r2, r2, #27
   1a432:	d106      	bne.n	1a442 <update_cache+0x4a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1a434:	69aa      	ldr	r2, [r5, #24]
   1a436:	b922      	cbnz	r2, 1a442 <update_cache+0x4a>
	if (is_preempt(_current) || is_metairq(thread)) {
   1a438:	89da      	ldrh	r2, [r3, #14]
   1a43a:	2a7f      	cmp	r2, #127	; 0x7f
   1a43c:	d901      	bls.n	1a442 <update_cache+0x4a>
		_kernel.ready_q.cache = _current;
   1a43e:	6263      	str	r3, [r4, #36]	; 0x24
}
   1a440:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1a442:	68a3      	ldr	r3, [r4, #8]
   1a444:	42ab      	cmp	r3, r5
   1a446:	d001      	beq.n	1a44c <update_cache+0x54>
			z_reset_time_slice();
   1a448:	f7ff fdd6 	bl	19ff8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1a44c:	6265      	str	r5, [r4, #36]	; 0x24
}
   1a44e:	e7f7      	b.n	1a440 <update_cache+0x48>
   1a450:	20024e04 	.word	0x20024e04
   1a454:	00020581 	.word	0x00020581
   1a458:	0002054f 	.word	0x0002054f
   1a45c:	0001f722 	.word	0x0001f722
   1a460:	0001fdcc 	.word	0x0001fdcc

0001a464 <k_sched_unlock>:
{
   1a464:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(_current->base.sched_locked != 0, "");
   1a466:	4c31      	ldr	r4, [pc, #196]	; (1a52c <k_sched_unlock+0xc8>)
   1a468:	68a2      	ldr	r2, [r4, #8]
   1a46a:	7bd2      	ldrb	r2, [r2, #15]
   1a46c:	b972      	cbnz	r2, 1a48c <k_sched_unlock+0x28>
   1a46e:	4930      	ldr	r1, [pc, #192]	; (1a530 <k_sched_unlock+0xcc>)
   1a470:	f240 23ad 	movw	r3, #685	; 0x2ad
   1a474:	4a2f      	ldr	r2, [pc, #188]	; (1a534 <k_sched_unlock+0xd0>)
   1a476:	4830      	ldr	r0, [pc, #192]	; (1a538 <k_sched_unlock+0xd4>)
   1a478:	f002 fc9e 	bl	1cdb8 <printk>
   1a47c:	482f      	ldr	r0, [pc, #188]	; (1a53c <k_sched_unlock+0xd8>)
   1a47e:	f002 fc9b 	bl	1cdb8 <printk>
   1a482:	f240 21ad 	movw	r1, #685	; 0x2ad
   1a486:	482b      	ldr	r0, [pc, #172]	; (1a534 <k_sched_unlock+0xd0>)
   1a488:	f002 fcc8 	bl	1ce1c <assert_post_action>
   1a48c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1a490:	b173      	cbz	r3, 1a4b0 <k_sched_unlock+0x4c>
   1a492:	492b      	ldr	r1, [pc, #172]	; (1a540 <k_sched_unlock+0xdc>)
   1a494:	f240 23ae 	movw	r3, #686	; 0x2ae
   1a498:	4a26      	ldr	r2, [pc, #152]	; (1a534 <k_sched_unlock+0xd0>)
   1a49a:	4827      	ldr	r0, [pc, #156]	; (1a538 <k_sched_unlock+0xd4>)
   1a49c:	f002 fc8c 	bl	1cdb8 <printk>
   1a4a0:	4826      	ldr	r0, [pc, #152]	; (1a53c <k_sched_unlock+0xd8>)
   1a4a2:	f002 fc89 	bl	1cdb8 <printk>
   1a4a6:	f240 21ae 	movw	r1, #686	; 0x2ae
   1a4aa:	4822      	ldr	r0, [pc, #136]	; (1a534 <k_sched_unlock+0xd0>)
   1a4ac:	f002 fcb6 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1a4b0:	f04f 0320 	mov.w	r3, #32
   1a4b4:	f3ef 8511 	mrs	r5, BASEPRI
   1a4b8:	f383 8811 	msr	BASEPRI, r3
   1a4bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a4c0:	4820      	ldr	r0, [pc, #128]	; (1a544 <k_sched_unlock+0xe0>)
   1a4c2:	f000 ffdf 	bl	1b484 <z_spin_lock_valid>
   1a4c6:	b968      	cbnz	r0, 1a4e4 <k_sched_unlock+0x80>
   1a4c8:	234a      	movs	r3, #74	; 0x4a
   1a4ca:	4a1f      	ldr	r2, [pc, #124]	; (1a548 <k_sched_unlock+0xe4>)
   1a4cc:	491f      	ldr	r1, [pc, #124]	; (1a54c <k_sched_unlock+0xe8>)
   1a4ce:	481a      	ldr	r0, [pc, #104]	; (1a538 <k_sched_unlock+0xd4>)
   1a4d0:	f002 fc72 	bl	1cdb8 <printk>
   1a4d4:	491b      	ldr	r1, [pc, #108]	; (1a544 <k_sched_unlock+0xe0>)
   1a4d6:	481e      	ldr	r0, [pc, #120]	; (1a550 <k_sched_unlock+0xec>)
   1a4d8:	f002 fc6e 	bl	1cdb8 <printk>
   1a4dc:	214a      	movs	r1, #74	; 0x4a
   1a4de:	481a      	ldr	r0, [pc, #104]	; (1a548 <k_sched_unlock+0xe4>)
   1a4e0:	f002 fc9c 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a4e4:	4817      	ldr	r0, [pc, #92]	; (1a544 <k_sched_unlock+0xe0>)
   1a4e6:	f000 ffeb 	bl	1b4c0 <z_spin_lock_set_owner>
		++_current->base.sched_locked;
   1a4ea:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   1a4ec:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1a4ee:	7bd3      	ldrb	r3, [r2, #15]
   1a4f0:	3301      	adds	r3, #1
   1a4f2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1a4f4:	f7ff ff80 	bl	1a3f8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a4f8:	4812      	ldr	r0, [pc, #72]	; (1a544 <k_sched_unlock+0xe0>)
   1a4fa:	f000 ffd1 	bl	1b4a0 <z_spin_unlock_valid>
   1a4fe:	b968      	cbnz	r0, 1a51c <k_sched_unlock+0xb8>
   1a500:	235d      	movs	r3, #93	; 0x5d
   1a502:	4a11      	ldr	r2, [pc, #68]	; (1a548 <k_sched_unlock+0xe4>)
   1a504:	4913      	ldr	r1, [pc, #76]	; (1a554 <k_sched_unlock+0xf0>)
   1a506:	480c      	ldr	r0, [pc, #48]	; (1a538 <k_sched_unlock+0xd4>)
   1a508:	f002 fc56 	bl	1cdb8 <printk>
   1a50c:	490d      	ldr	r1, [pc, #52]	; (1a544 <k_sched_unlock+0xe0>)
   1a50e:	4812      	ldr	r0, [pc, #72]	; (1a558 <k_sched_unlock+0xf4>)
   1a510:	f002 fc52 	bl	1cdb8 <printk>
   1a514:	215d      	movs	r1, #93	; 0x5d
   1a516:	480c      	ldr	r0, [pc, #48]	; (1a548 <k_sched_unlock+0xe4>)
   1a518:	f002 fc80 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1a51c:	f385 8811 	msr	BASEPRI, r5
   1a520:	f3bf 8f6f 	isb	sy
}
   1a524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   1a528:	f004 b993 	b.w	1e852 <z_reschedule_unlocked>
   1a52c:	20024e04 	.word	0x20024e04
   1a530:	000204f1 	.word	0x000204f1
   1a534:	0002054f 	.word	0x0002054f
   1a538:	0001f722 	.word	0x0001f722
   1a53c:	0001fdcc 	.word	0x0001fdcc
   1a540:	000204b7 	.word	0x000204b7
   1a544:	20024e3c 	.word	0x20024e3c
   1a548:	0001f904 	.word	0x0001f904
   1a54c:	0001f923 	.word	0x0001f923
   1a550:	0001f938 	.word	0x0001f938
   1a554:	0001f950 	.word	0x0001f950
   1a558:	0001f967 	.word	0x0001f967

0001a55c <z_add_thread_to_ready_q>:
{
   1a55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a55e:	4604      	mov	r4, r0
	__asm__ volatile(
   1a560:	f04f 0320 	mov.w	r3, #32
   1a564:	f3ef 8511 	mrs	r5, BASEPRI
   1a568:	f383 8811 	msr	BASEPRI, r3
   1a56c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a570:	482f      	ldr	r0, [pc, #188]	; (1a630 <z_add_thread_to_ready_q+0xd4>)
   1a572:	f000 ff87 	bl	1b484 <z_spin_lock_valid>
   1a576:	b968      	cbnz	r0, 1a594 <z_add_thread_to_ready_q+0x38>
   1a578:	234a      	movs	r3, #74	; 0x4a
   1a57a:	4a2e      	ldr	r2, [pc, #184]	; (1a634 <z_add_thread_to_ready_q+0xd8>)
   1a57c:	492e      	ldr	r1, [pc, #184]	; (1a638 <z_add_thread_to_ready_q+0xdc>)
   1a57e:	482f      	ldr	r0, [pc, #188]	; (1a63c <z_add_thread_to_ready_q+0xe0>)
   1a580:	f002 fc1a 	bl	1cdb8 <printk>
   1a584:	492a      	ldr	r1, [pc, #168]	; (1a630 <z_add_thread_to_ready_q+0xd4>)
   1a586:	482e      	ldr	r0, [pc, #184]	; (1a640 <z_add_thread_to_ready_q+0xe4>)
   1a588:	f002 fc16 	bl	1cdb8 <printk>
   1a58c:	214a      	movs	r1, #74	; 0x4a
   1a58e:	4829      	ldr	r0, [pc, #164]	; (1a634 <z_add_thread_to_ready_q+0xd8>)
   1a590:	f002 fc44 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a594:	4826      	ldr	r0, [pc, #152]	; (1a630 <z_add_thread_to_ready_q+0xd4>)
   1a596:	f000 ff93 	bl	1b4c0 <z_spin_lock_set_owner>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1a59a:	4b2a      	ldr	r3, [pc, #168]	; (1a644 <z_add_thread_to_ready_q+0xe8>)
   1a59c:	429c      	cmp	r4, r3
   1a59e:	d10b      	bne.n	1a5b8 <z_add_thread_to_ready_q+0x5c>
   1a5a0:	4929      	ldr	r1, [pc, #164]	; (1a648 <z_add_thread_to_ready_q+0xec>)
   1a5a2:	4826      	ldr	r0, [pc, #152]	; (1a63c <z_add_thread_to_ready_q+0xe0>)
   1a5a4:	f240 3302 	movw	r3, #770	; 0x302
   1a5a8:	4a28      	ldr	r2, [pc, #160]	; (1a64c <z_add_thread_to_ready_q+0xf0>)
   1a5aa:	f002 fc05 	bl	1cdb8 <printk>
   1a5ae:	f240 3102 	movw	r1, #770	; 0x302
   1a5b2:	4826      	ldr	r0, [pc, #152]	; (1a64c <z_add_thread_to_ready_q+0xf0>)
   1a5b4:	f002 fc32 	bl	1ce1c <assert_post_action>
	return list->head == list;
   1a5b8:	4a25      	ldr	r2, [pc, #148]	; (1a650 <z_add_thread_to_ready_q+0xf4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a5ba:	f102 0128 	add.w	r1, r2, #40	; 0x28
   1a5be:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   1a5c2:	428b      	cmp	r3, r1
   1a5c4:	d02e      	beq.n	1a624 <z_add_thread_to_ready_q+0xc8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a5c6:	b36b      	cbz	r3, 1a624 <z_add_thread_to_ready_q+0xc8>
	if (thread_1->base.prio < thread_2->base.prio) {
   1a5c8:	f994 600e 	ldrsb.w	r6, [r4, #14]
   1a5cc:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1a5d0:	42b7      	cmp	r7, r6
   1a5d2:	dd22      	ble.n	1a61a <z_add_thread_to_ready_q+0xbe>
	node->prev = successor->prev;
   1a5d4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1a5d6:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1a5da:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1a5dc:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   1a5de:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   1a5e0:	2000      	movs	r0, #0
   1a5e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1a5e6:	7363      	strb	r3, [r4, #13]
   1a5e8:	f7ff ff06 	bl	1a3f8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a5ec:	4810      	ldr	r0, [pc, #64]	; (1a630 <z_add_thread_to_ready_q+0xd4>)
   1a5ee:	f000 ff57 	bl	1b4a0 <z_spin_unlock_valid>
   1a5f2:	b968      	cbnz	r0, 1a610 <z_add_thread_to_ready_q+0xb4>
   1a5f4:	235d      	movs	r3, #93	; 0x5d
   1a5f6:	4a0f      	ldr	r2, [pc, #60]	; (1a634 <z_add_thread_to_ready_q+0xd8>)
   1a5f8:	4916      	ldr	r1, [pc, #88]	; (1a654 <z_add_thread_to_ready_q+0xf8>)
   1a5fa:	4810      	ldr	r0, [pc, #64]	; (1a63c <z_add_thread_to_ready_q+0xe0>)
   1a5fc:	f002 fbdc 	bl	1cdb8 <printk>
   1a600:	490b      	ldr	r1, [pc, #44]	; (1a630 <z_add_thread_to_ready_q+0xd4>)
   1a602:	4815      	ldr	r0, [pc, #84]	; (1a658 <z_add_thread_to_ready_q+0xfc>)
   1a604:	f002 fbd8 	bl	1cdb8 <printk>
   1a608:	215d      	movs	r1, #93	; 0x5d
   1a60a:	480a      	ldr	r0, [pc, #40]	; (1a634 <z_add_thread_to_ready_q+0xd8>)
   1a60c:	f002 fc06 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1a610:	f385 8811 	msr	BASEPRI, r5
   1a614:	f3bf 8f6f 	isb	sy
}
   1a618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1a61a:	4298      	cmp	r0, r3
   1a61c:	d002      	beq.n	1a624 <z_add_thread_to_ready_q+0xc8>
   1a61e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a620:	2b00      	cmp	r3, #0
   1a622:	d1d3      	bne.n	1a5cc <z_add_thread_to_ready_q+0x70>
	node->prev = list->tail;
   1a624:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   1a628:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1a62a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1a62c:	62d4      	str	r4, [r2, #44]	; 0x2c
   1a62e:	e7d6      	b.n	1a5de <z_add_thread_to_ready_q+0x82>
   1a630:	20024e3c 	.word	0x20024e3c
   1a634:	0001f904 	.word	0x0001f904
   1a638:	0001f923 	.word	0x0001f923
   1a63c:	0001f722 	.word	0x0001f722
   1a640:	0001f938 	.word	0x0001f938
   1a644:	20020c34 	.word	0x20020c34
   1a648:	000205a0 	.word	0x000205a0
   1a64c:	0002054f 	.word	0x0002054f
   1a650:	20024e04 	.word	0x20024e04
   1a654:	0001f950 	.word	0x0001f950
   1a658:	0001f967 	.word	0x0001f967

0001a65c <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
   1a65c:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   1a660:	b570      	push	{r4, r5, r6, lr}
   1a662:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   1a664:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
   1a668:	2b00      	cmp	r3, #0
   1a66a:	d042      	beq.n	1a6f2 <z_thread_timeout+0x96>
	__asm__ volatile(
   1a66c:	f04f 0320 	mov.w	r3, #32
   1a670:	f3ef 8611 	mrs	r6, BASEPRI
   1a674:	f383 8811 	msr	BASEPRI, r3
   1a678:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a67c:	4825      	ldr	r0, [pc, #148]	; (1a714 <z_thread_timeout+0xb8>)
   1a67e:	f000 ff01 	bl	1b484 <z_spin_lock_valid>
   1a682:	b968      	cbnz	r0, 1a6a0 <z_thread_timeout+0x44>
   1a684:	234a      	movs	r3, #74	; 0x4a
   1a686:	4a24      	ldr	r2, [pc, #144]	; (1a718 <z_thread_timeout+0xbc>)
   1a688:	4924      	ldr	r1, [pc, #144]	; (1a71c <z_thread_timeout+0xc0>)
   1a68a:	4825      	ldr	r0, [pc, #148]	; (1a720 <z_thread_timeout+0xc4>)
   1a68c:	f002 fb94 	bl	1cdb8 <printk>
   1a690:	4920      	ldr	r1, [pc, #128]	; (1a714 <z_thread_timeout+0xb8>)
   1a692:	4824      	ldr	r0, [pc, #144]	; (1a724 <z_thread_timeout+0xc8>)
   1a694:	f002 fb90 	bl	1cdb8 <printk>
   1a698:	214a      	movs	r1, #74	; 0x4a
   1a69a:	481f      	ldr	r0, [pc, #124]	; (1a718 <z_thread_timeout+0xbc>)
   1a69c:	f002 fbbe 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a6a0:	481c      	ldr	r0, [pc, #112]	; (1a714 <z_thread_timeout+0xb8>)
   1a6a2:	f000 ff0d 	bl	1b4c0 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1a6a6:	f1a4 0010 	sub.w	r0, r4, #16
   1a6aa:	f7ff fc8d 	bl	19fc8 <pended_on.isra.17>
   1a6ae:	4629      	mov	r1, r5
   1a6b0:	f7ff fe1e 	bl	1a2f0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1a6b4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a6b8:	4816      	ldr	r0, [pc, #88]	; (1a714 <z_thread_timeout+0xb8>)
   1a6ba:	f023 0302 	bic.w	r3, r3, #2
   1a6be:	f804 3c0b 	strb.w	r3, [r4, #-11]
   1a6c2:	f000 feed 	bl	1b4a0 <z_spin_unlock_valid>
   1a6c6:	b968      	cbnz	r0, 1a6e4 <z_thread_timeout+0x88>
   1a6c8:	235d      	movs	r3, #93	; 0x5d
   1a6ca:	4a13      	ldr	r2, [pc, #76]	; (1a718 <z_thread_timeout+0xbc>)
   1a6cc:	4916      	ldr	r1, [pc, #88]	; (1a728 <z_thread_timeout+0xcc>)
   1a6ce:	4814      	ldr	r0, [pc, #80]	; (1a720 <z_thread_timeout+0xc4>)
   1a6d0:	f002 fb72 	bl	1cdb8 <printk>
   1a6d4:	490f      	ldr	r1, [pc, #60]	; (1a714 <z_thread_timeout+0xb8>)
   1a6d6:	4815      	ldr	r0, [pc, #84]	; (1a72c <z_thread_timeout+0xd0>)
   1a6d8:	f002 fb6e 	bl	1cdb8 <printk>
   1a6dc:	215d      	movs	r1, #93	; 0x5d
   1a6de:	480e      	ldr	r0, [pc, #56]	; (1a718 <z_thread_timeout+0xbc>)
   1a6e0:	f002 fb9c 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1a6e4:	f386 8811 	msr	BASEPRI, r6
   1a6e8:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1a6ec:	2300      	movs	r3, #0
   1a6ee:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1a6f2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   1a6f6:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1a6f8:	f023 0314 	bic.w	r3, r3, #20
   1a6fc:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   1a700:	f004 f889 	bl	1e816 <z_is_thread_ready>
   1a704:	b120      	cbz	r0, 1a710 <z_thread_timeout+0xb4>
		z_add_thread_to_ready_q(thread);
   1a706:	4628      	mov	r0, r5
}
   1a708:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a70c:	f7ff bf26 	b.w	1a55c <z_add_thread_to_ready_q>
   1a710:	bd70      	pop	{r4, r5, r6, pc}
   1a712:	bf00      	nop
   1a714:	20024e3c 	.word	0x20024e3c
   1a718:	0001f904 	.word	0x0001f904
   1a71c:	0001f923 	.word	0x0001f923
   1a720:	0001f722 	.word	0x0001f722
   1a724:	0001f938 	.word	0x0001f938
   1a728:	0001f950 	.word	0x0001f950
   1a72c:	0001f967 	.word	0x0001f967

0001a730 <z_move_thread_to_end_of_prio_q>:
{
   1a730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a732:	4604      	mov	r4, r0
	__asm__ volatile(
   1a734:	f04f 0320 	mov.w	r3, #32
   1a738:	f3ef 8511 	mrs	r5, BASEPRI
   1a73c:	f383 8811 	msr	BASEPRI, r3
   1a740:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a744:	4835      	ldr	r0, [pc, #212]	; (1a81c <z_move_thread_to_end_of_prio_q+0xec>)
   1a746:	f000 fe9d 	bl	1b484 <z_spin_lock_valid>
   1a74a:	b968      	cbnz	r0, 1a768 <z_move_thread_to_end_of_prio_q+0x38>
   1a74c:	234a      	movs	r3, #74	; 0x4a
   1a74e:	4a34      	ldr	r2, [pc, #208]	; (1a820 <z_move_thread_to_end_of_prio_q+0xf0>)
   1a750:	4934      	ldr	r1, [pc, #208]	; (1a824 <z_move_thread_to_end_of_prio_q+0xf4>)
   1a752:	4835      	ldr	r0, [pc, #212]	; (1a828 <z_move_thread_to_end_of_prio_q+0xf8>)
   1a754:	f002 fb30 	bl	1cdb8 <printk>
   1a758:	4930      	ldr	r1, [pc, #192]	; (1a81c <z_move_thread_to_end_of_prio_q+0xec>)
   1a75a:	4834      	ldr	r0, [pc, #208]	; (1a82c <z_move_thread_to_end_of_prio_q+0xfc>)
   1a75c:	f002 fb2c 	bl	1cdb8 <printk>
   1a760:	214a      	movs	r1, #74	; 0x4a
   1a762:	482f      	ldr	r0, [pc, #188]	; (1a820 <z_move_thread_to_end_of_prio_q+0xf0>)
   1a764:	f002 fb5a 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a768:	482c      	ldr	r0, [pc, #176]	; (1a81c <z_move_thread_to_end_of_prio_q+0xec>)
   1a76a:	f000 fea9 	bl	1b4c0 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   1a76e:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1a772:	2b00      	cmp	r3, #0
   1a774:	da03      	bge.n	1a77e <z_move_thread_to_end_of_prio_q+0x4e>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1a776:	4621      	mov	r1, r4
   1a778:	482d      	ldr	r0, [pc, #180]	; (1a830 <z_move_thread_to_end_of_prio_q+0x100>)
   1a77a:	f7ff fdb9 	bl	1a2f0 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1a77e:	4b2d      	ldr	r3, [pc, #180]	; (1a834 <z_move_thread_to_end_of_prio_q+0x104>)
   1a780:	429c      	cmp	r4, r3
   1a782:	d10b      	bne.n	1a79c <z_move_thread_to_end_of_prio_q+0x6c>
   1a784:	492c      	ldr	r1, [pc, #176]	; (1a838 <z_move_thread_to_end_of_prio_q+0x108>)
   1a786:	4828      	ldr	r0, [pc, #160]	; (1a828 <z_move_thread_to_end_of_prio_q+0xf8>)
   1a788:	f240 3302 	movw	r3, #770	; 0x302
   1a78c:	4a2b      	ldr	r2, [pc, #172]	; (1a83c <z_move_thread_to_end_of_prio_q+0x10c>)
   1a78e:	f002 fb13 	bl	1cdb8 <printk>
   1a792:	f240 3102 	movw	r1, #770	; 0x302
   1a796:	4829      	ldr	r0, [pc, #164]	; (1a83c <z_move_thread_to_end_of_prio_q+0x10c>)
   1a798:	f002 fb40 	bl	1ce1c <assert_post_action>
	return list->head == list;
   1a79c:	4a28      	ldr	r2, [pc, #160]	; (1a840 <z_move_thread_to_end_of_prio_q+0x110>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a79e:	f102 0128 	add.w	r1, r2, #40	; 0x28
   1a7a2:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   1a7a6:	428b      	cmp	r3, r1
   1a7a8:	d032      	beq.n	1a810 <z_move_thread_to_end_of_prio_q+0xe0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a7aa:	2b00      	cmp	r3, #0
   1a7ac:	d030      	beq.n	1a810 <z_move_thread_to_end_of_prio_q+0xe0>
	if (thread_1->base.prio < thread_2->base.prio) {
   1a7ae:	f994 600e 	ldrsb.w	r6, [r4, #14]
   1a7b2:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1a7b6:	42b7      	cmp	r7, r6
   1a7b8:	dd25      	ble.n	1a806 <z_move_thread_to_end_of_prio_q+0xd6>
	node->prev = successor->prev;
   1a7ba:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1a7bc:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   1a7c0:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1a7c2:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   1a7c4:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   1a7c6:	6890      	ldr	r0, [r2, #8]
   1a7c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1a7cc:	7363      	strb	r3, [r4, #13]
   1a7ce:	1b03      	subs	r3, r0, r4
   1a7d0:	4258      	negs	r0, r3
   1a7d2:	4158      	adcs	r0, r3
   1a7d4:	f7ff fe10 	bl	1a3f8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a7d8:	4810      	ldr	r0, [pc, #64]	; (1a81c <z_move_thread_to_end_of_prio_q+0xec>)
   1a7da:	f000 fe61 	bl	1b4a0 <z_spin_unlock_valid>
   1a7de:	b968      	cbnz	r0, 1a7fc <z_move_thread_to_end_of_prio_q+0xcc>
   1a7e0:	235d      	movs	r3, #93	; 0x5d
   1a7e2:	4a0f      	ldr	r2, [pc, #60]	; (1a820 <z_move_thread_to_end_of_prio_q+0xf0>)
   1a7e4:	4917      	ldr	r1, [pc, #92]	; (1a844 <z_move_thread_to_end_of_prio_q+0x114>)
   1a7e6:	4810      	ldr	r0, [pc, #64]	; (1a828 <z_move_thread_to_end_of_prio_q+0xf8>)
   1a7e8:	f002 fae6 	bl	1cdb8 <printk>
   1a7ec:	490b      	ldr	r1, [pc, #44]	; (1a81c <z_move_thread_to_end_of_prio_q+0xec>)
   1a7ee:	4816      	ldr	r0, [pc, #88]	; (1a848 <z_move_thread_to_end_of_prio_q+0x118>)
   1a7f0:	f002 fae2 	bl	1cdb8 <printk>
   1a7f4:	215d      	movs	r1, #93	; 0x5d
   1a7f6:	480a      	ldr	r0, [pc, #40]	; (1a820 <z_move_thread_to_end_of_prio_q+0xf0>)
   1a7f8:	f002 fb10 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1a7fc:	f385 8811 	msr	BASEPRI, r5
   1a800:	f3bf 8f6f 	isb	sy
}
   1a804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1a806:	4298      	cmp	r0, r3
   1a808:	d002      	beq.n	1a810 <z_move_thread_to_end_of_prio_q+0xe0>
   1a80a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a80c:	2b00      	cmp	r3, #0
   1a80e:	d1d0      	bne.n	1a7b2 <z_move_thread_to_end_of_prio_q+0x82>
	node->prev = list->tail;
   1a810:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   1a814:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1a816:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1a818:	62d4      	str	r4, [r2, #44]	; 0x2c
   1a81a:	e7d3      	b.n	1a7c4 <z_move_thread_to_end_of_prio_q+0x94>
   1a81c:	20024e3c 	.word	0x20024e3c
   1a820:	0001f904 	.word	0x0001f904
   1a824:	0001f923 	.word	0x0001f923
   1a828:	0001f722 	.word	0x0001f722
   1a82c:	0001f938 	.word	0x0001f938
   1a830:	20024e2c 	.word	0x20024e2c
   1a834:	20020c34 	.word	0x20020c34
   1a838:	000205a0 	.word	0x000205a0
   1a83c:	0002054f 	.word	0x0002054f
   1a840:	20024e04 	.word	0x20024e04
   1a844:	0001f950 	.word	0x0001f950
   1a848:	0001f967 	.word	0x0001f967

0001a84c <z_time_slice>:
	if (pending_current == _current) {
   1a84c:	4a15      	ldr	r2, [pc, #84]	; (1a8a4 <z_time_slice+0x58>)
   1a84e:	4916      	ldr	r1, [pc, #88]	; (1a8a8 <z_time_slice+0x5c>)
{
   1a850:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   1a852:	680c      	ldr	r4, [r1, #0]
   1a854:	6893      	ldr	r3, [r2, #8]
   1a856:	42a3      	cmp	r3, r4
   1a858:	4614      	mov	r4, r2
   1a85a:	d103      	bne.n	1a864 <z_time_slice+0x18>
}
   1a85c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   1a860:	f7ff bbca 	b.w	19ff8 <z_reset_time_slice>
	pending_current = NULL;
   1a864:	2500      	movs	r5, #0
   1a866:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   1a868:	4910      	ldr	r1, [pc, #64]	; (1a8ac <z_time_slice+0x60>)
   1a86a:	6809      	ldr	r1, [r1, #0]
   1a86c:	b1b9      	cbz	r1, 1a89e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   1a86e:	89d9      	ldrh	r1, [r3, #14]
   1a870:	297f      	cmp	r1, #127	; 0x7f
   1a872:	d814      	bhi.n	1a89e <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1a874:	490e      	ldr	r1, [pc, #56]	; (1a8b0 <z_time_slice+0x64>)
   1a876:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1a87a:	6809      	ldr	r1, [r1, #0]
   1a87c:	428d      	cmp	r5, r1
   1a87e:	db0e      	blt.n	1a89e <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   1a880:	490c      	ldr	r1, [pc, #48]	; (1a8b4 <z_time_slice+0x68>)
   1a882:	428b      	cmp	r3, r1
   1a884:	d00b      	beq.n	1a89e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   1a886:	6999      	ldr	r1, [r3, #24]
   1a888:	b949      	cbnz	r1, 1a89e <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   1a88a:	6911      	ldr	r1, [r2, #16]
   1a88c:	4281      	cmp	r1, r0
   1a88e:	dc03      	bgt.n	1a898 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   1a890:	4618      	mov	r0, r3
   1a892:	f7ff ff4d 	bl	1a730 <z_move_thread_to_end_of_prio_q>
   1a896:	e7e1      	b.n	1a85c <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   1a898:	1a09      	subs	r1, r1, r0
   1a89a:	6111      	str	r1, [r2, #16]
}
   1a89c:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   1a89e:	2300      	movs	r3, #0
   1a8a0:	6123      	str	r3, [r4, #16]
   1a8a2:	e7fb      	b.n	1a89c <z_time_slice+0x50>
   1a8a4:	20024e04 	.word	0x20024e04
   1a8a8:	20024e38 	.word	0x20024e38
   1a8ac:	20024e44 	.word	0x20024e44
   1a8b0:	20024e40 	.word	0x20024e40
   1a8b4:	20020c34 	.word	0x20020c34

0001a8b8 <z_thread_single_suspend>:
{
   1a8b8:	b570      	push	{r4, r5, r6, lr}
   1a8ba:	4604      	mov	r4, r0
   1a8bc:	3018      	adds	r0, #24
   1a8be:	f001 f921 	bl	1bb04 <z_abort_timeout>
	__asm__ volatile(
   1a8c2:	f04f 0320 	mov.w	r3, #32
   1a8c6:	f3ef 8611 	mrs	r6, BASEPRI
   1a8ca:	f383 8811 	msr	BASEPRI, r3
   1a8ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a8d2:	4825      	ldr	r0, [pc, #148]	; (1a968 <z_thread_single_suspend+0xb0>)
   1a8d4:	f000 fdd6 	bl	1b484 <z_spin_lock_valid>
   1a8d8:	b968      	cbnz	r0, 1a8f6 <z_thread_single_suspend+0x3e>
   1a8da:	234a      	movs	r3, #74	; 0x4a
   1a8dc:	4a23      	ldr	r2, [pc, #140]	; (1a96c <z_thread_single_suspend+0xb4>)
   1a8de:	4924      	ldr	r1, [pc, #144]	; (1a970 <z_thread_single_suspend+0xb8>)
   1a8e0:	4824      	ldr	r0, [pc, #144]	; (1a974 <z_thread_single_suspend+0xbc>)
   1a8e2:	f002 fa69 	bl	1cdb8 <printk>
   1a8e6:	4920      	ldr	r1, [pc, #128]	; (1a968 <z_thread_single_suspend+0xb0>)
   1a8e8:	4823      	ldr	r0, [pc, #140]	; (1a978 <z_thread_single_suspend+0xc0>)
   1a8ea:	f002 fa65 	bl	1cdb8 <printk>
   1a8ee:	214a      	movs	r1, #74	; 0x4a
   1a8f0:	481e      	ldr	r0, [pc, #120]	; (1a96c <z_thread_single_suspend+0xb4>)
   1a8f2:	f002 fa93 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a8f6:	481c      	ldr	r0, [pc, #112]	; (1a968 <z_thread_single_suspend+0xb0>)
   1a8f8:	f000 fde2 	bl	1b4c0 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   1a8fc:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1a900:	2b00      	cmp	r3, #0
   1a902:	da07      	bge.n	1a914 <z_thread_single_suspend+0x5c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1a904:	4621      	mov	r1, r4
   1a906:	481d      	ldr	r0, [pc, #116]	; (1a97c <z_thread_single_suspend+0xc4>)
   1a908:	f7ff fcf2 	bl	1a2f0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1a90c:	7b63      	ldrb	r3, [r4, #13]
   1a90e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a912:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1a914:	4d1a      	ldr	r5, [pc, #104]	; (1a980 <z_thread_single_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1a916:	7b63      	ldrb	r3, [r4, #13]
   1a918:	68a8      	ldr	r0, [r5, #8]
   1a91a:	f043 0310 	orr.w	r3, r3, #16
   1a91e:	7363      	strb	r3, [r4, #13]
   1a920:	1b03      	subs	r3, r0, r4
   1a922:	4258      	negs	r0, r3
   1a924:	4158      	adcs	r0, r3
   1a926:	f7ff fd67 	bl	1a3f8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a92a:	480f      	ldr	r0, [pc, #60]	; (1a968 <z_thread_single_suspend+0xb0>)
   1a92c:	f000 fdb8 	bl	1b4a0 <z_spin_unlock_valid>
   1a930:	b968      	cbnz	r0, 1a94e <z_thread_single_suspend+0x96>
   1a932:	235d      	movs	r3, #93	; 0x5d
   1a934:	4a0d      	ldr	r2, [pc, #52]	; (1a96c <z_thread_single_suspend+0xb4>)
   1a936:	4913      	ldr	r1, [pc, #76]	; (1a984 <z_thread_single_suspend+0xcc>)
   1a938:	480e      	ldr	r0, [pc, #56]	; (1a974 <z_thread_single_suspend+0xbc>)
   1a93a:	f002 fa3d 	bl	1cdb8 <printk>
   1a93e:	490a      	ldr	r1, [pc, #40]	; (1a968 <z_thread_single_suspend+0xb0>)
   1a940:	4811      	ldr	r0, [pc, #68]	; (1a988 <z_thread_single_suspend+0xd0>)
   1a942:	f002 fa39 	bl	1cdb8 <printk>
   1a946:	215d      	movs	r1, #93	; 0x5d
   1a948:	4808      	ldr	r0, [pc, #32]	; (1a96c <z_thread_single_suspend+0xb4>)
   1a94a:	f002 fa67 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1a94e:	f386 8811 	msr	BASEPRI, r6
   1a952:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1a956:	68ab      	ldr	r3, [r5, #8]
   1a958:	42a3      	cmp	r3, r4
   1a95a:	d103      	bne.n	1a964 <z_thread_single_suspend+0xac>
}
   1a95c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1a960:	f003 bf77 	b.w	1e852 <z_reschedule_unlocked>
}
   1a964:	bd70      	pop	{r4, r5, r6, pc}
   1a966:	bf00      	nop
   1a968:	20024e3c 	.word	0x20024e3c
   1a96c:	0001f904 	.word	0x0001f904
   1a970:	0001f923 	.word	0x0001f923
   1a974:	0001f722 	.word	0x0001f722
   1a978:	0001f938 	.word	0x0001f938
   1a97c:	20024e2c 	.word	0x20024e2c
   1a980:	20024e04 	.word	0x20024e04
   1a984:	0001f950 	.word	0x0001f950
   1a988:	0001f967 	.word	0x0001f967

0001a98c <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   1a98c:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1a98e:	b570      	push	{r4, r5, r6, lr}
   1a990:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   1a992:	b103      	cbz	r3, 1a996 <z_thread_single_abort+0xa>
		thread->fn_abort();
   1a994:	4798      	blx	r3
   1a996:	f104 0018 	add.w	r0, r4, #24
   1a99a:	f001 f8b3 	bl	1bb04 <z_abort_timeout>
	__asm__ volatile(
   1a99e:	f04f 0320 	mov.w	r3, #32
   1a9a2:	f3ef 8511 	mrs	r5, BASEPRI
   1a9a6:	f383 8811 	msr	BASEPRI, r3
   1a9aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a9ae:	482c      	ldr	r0, [pc, #176]	; (1aa60 <z_thread_single_abort+0xd4>)
   1a9b0:	f000 fd68 	bl	1b484 <z_spin_lock_valid>
   1a9b4:	b968      	cbnz	r0, 1a9d2 <z_thread_single_abort+0x46>
   1a9b6:	234a      	movs	r3, #74	; 0x4a
   1a9b8:	4a2a      	ldr	r2, [pc, #168]	; (1aa64 <z_thread_single_abort+0xd8>)
   1a9ba:	492b      	ldr	r1, [pc, #172]	; (1aa68 <z_thread_single_abort+0xdc>)
   1a9bc:	482b      	ldr	r0, [pc, #172]	; (1aa6c <z_thread_single_abort+0xe0>)
   1a9be:	f002 f9fb 	bl	1cdb8 <printk>
   1a9c2:	4927      	ldr	r1, [pc, #156]	; (1aa60 <z_thread_single_abort+0xd4>)
   1a9c4:	482a      	ldr	r0, [pc, #168]	; (1aa70 <z_thread_single_abort+0xe4>)
   1a9c6:	f002 f9f7 	bl	1cdb8 <printk>
   1a9ca:	214a      	movs	r1, #74	; 0x4a
   1a9cc:	4825      	ldr	r0, [pc, #148]	; (1aa64 <z_thread_single_abort+0xd8>)
   1a9ce:	f002 fa25 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a9d2:	4823      	ldr	r0, [pc, #140]	; (1aa60 <z_thread_single_abort+0xd4>)
   1a9d4:	f000 fd74 	bl	1b4c0 <z_spin_lock_set_owner>
		if (z_is_thread_ready(thread)) {
   1a9d8:	4620      	mov	r0, r4
   1a9da:	f003 ff1c 	bl	1e816 <z_is_thread_ready>
   1a9de:	4606      	mov	r6, r0
   1a9e0:	b368      	cbz	r0, 1aa3e <z_thread_single_abort+0xb2>
			if (z_is_thread_queued(thread)) {
   1a9e2:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1a9e6:	2b00      	cmp	r3, #0
   1a9e8:	da07      	bge.n	1a9fa <z_thread_single_abort+0x6e>
				_priq_run_remove(&_kernel.ready_q.runq,
   1a9ea:	4621      	mov	r1, r4
   1a9ec:	4821      	ldr	r0, [pc, #132]	; (1aa74 <z_thread_single_abort+0xe8>)
   1a9ee:	f7ff fc7f 	bl	1a2f0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1a9f2:	7b63      	ldrb	r3, [r4, #13]
   1a9f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a9f8:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1a9fa:	4b1f      	ldr	r3, [pc, #124]	; (1aa78 <z_thread_single_abort+0xec>)
   1a9fc:	6898      	ldr	r0, [r3, #8]
   1a9fe:	1b02      	subs	r2, r0, r4
   1aa00:	4250      	negs	r0, r2
   1aa02:	4150      	adcs	r0, r2
   1aa04:	f7ff fcf8 	bl	1a3f8 <update_cache>
		thread->base.thread_state |= mask;
   1aa08:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1aa0a:	4815      	ldr	r0, [pc, #84]	; (1aa60 <z_thread_single_abort+0xd4>)
   1aa0c:	f043 0308 	orr.w	r3, r3, #8
   1aa10:	7363      	strb	r3, [r4, #13]
   1aa12:	f000 fd45 	bl	1b4a0 <z_spin_unlock_valid>
   1aa16:	b968      	cbnz	r0, 1aa34 <z_thread_single_abort+0xa8>
   1aa18:	235d      	movs	r3, #93	; 0x5d
   1aa1a:	4a12      	ldr	r2, [pc, #72]	; (1aa64 <z_thread_single_abort+0xd8>)
   1aa1c:	4917      	ldr	r1, [pc, #92]	; (1aa7c <z_thread_single_abort+0xf0>)
   1aa1e:	4813      	ldr	r0, [pc, #76]	; (1aa6c <z_thread_single_abort+0xe0>)
   1aa20:	f002 f9ca 	bl	1cdb8 <printk>
   1aa24:	490e      	ldr	r1, [pc, #56]	; (1aa60 <z_thread_single_abort+0xd4>)
   1aa26:	4816      	ldr	r0, [pc, #88]	; (1aa80 <z_thread_single_abort+0xf4>)
   1aa28:	f002 f9c6 	bl	1cdb8 <printk>
   1aa2c:	215d      	movs	r1, #93	; 0x5d
   1aa2e:	480d      	ldr	r0, [pc, #52]	; (1aa64 <z_thread_single_abort+0xd8>)
   1aa30:	f002 f9f4 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1aa34:	f385 8811 	msr	BASEPRI, r5
   1aa38:	f3bf 8f6f 	isb	sy
}
   1aa3c:	bd70      	pop	{r4, r5, r6, pc}
			if (z_is_thread_pending(thread)) {
   1aa3e:	7b63      	ldrb	r3, [r4, #13]
   1aa40:	079b      	lsls	r3, r3, #30
   1aa42:	d5e1      	bpl.n	1aa08 <z_thread_single_abort+0x7c>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1aa44:	f104 0008 	add.w	r0, r4, #8
   1aa48:	f7ff fabe 	bl	19fc8 <pended_on.isra.17>
   1aa4c:	4621      	mov	r1, r4
   1aa4e:	f7ff fc4f 	bl	1a2f0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1aa52:	7b63      	ldrb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1aa54:	60a6      	str	r6, [r4, #8]
   1aa56:	f023 0302 	bic.w	r3, r3, #2
   1aa5a:	7363      	strb	r3, [r4, #13]
   1aa5c:	e7d4      	b.n	1aa08 <z_thread_single_abort+0x7c>
   1aa5e:	bf00      	nop
   1aa60:	20024e3c 	.word	0x20024e3c
   1aa64:	0001f904 	.word	0x0001f904
   1aa68:	0001f923 	.word	0x0001f923
   1aa6c:	0001f722 	.word	0x0001f722
   1aa70:	0001f938 	.word	0x0001f938
   1aa74:	20024e2c 	.word	0x20024e2c
   1aa78:	20024e04 	.word	0x20024e04
   1aa7c:	0001f950 	.word	0x0001f950
   1aa80:	0001f967 	.word	0x0001f967

0001aa84 <z_remove_thread_from_ready_q>:
{
   1aa84:	b538      	push	{r3, r4, r5, lr}
   1aa86:	4604      	mov	r4, r0
	__asm__ volatile(
   1aa88:	f04f 0320 	mov.w	r3, #32
   1aa8c:	f3ef 8511 	mrs	r5, BASEPRI
   1aa90:	f383 8811 	msr	BASEPRI, r3
   1aa94:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1aa98:	481f      	ldr	r0, [pc, #124]	; (1ab18 <z_remove_thread_from_ready_q+0x94>)
   1aa9a:	f000 fcf3 	bl	1b484 <z_spin_lock_valid>
   1aa9e:	b968      	cbnz	r0, 1aabc <z_remove_thread_from_ready_q+0x38>
   1aaa0:	234a      	movs	r3, #74	; 0x4a
   1aaa2:	4a1e      	ldr	r2, [pc, #120]	; (1ab1c <z_remove_thread_from_ready_q+0x98>)
   1aaa4:	491e      	ldr	r1, [pc, #120]	; (1ab20 <z_remove_thread_from_ready_q+0x9c>)
   1aaa6:	481f      	ldr	r0, [pc, #124]	; (1ab24 <z_remove_thread_from_ready_q+0xa0>)
   1aaa8:	f002 f986 	bl	1cdb8 <printk>
   1aaac:	491a      	ldr	r1, [pc, #104]	; (1ab18 <z_remove_thread_from_ready_q+0x94>)
   1aaae:	481e      	ldr	r0, [pc, #120]	; (1ab28 <z_remove_thread_from_ready_q+0xa4>)
   1aab0:	f002 f982 	bl	1cdb8 <printk>
   1aab4:	214a      	movs	r1, #74	; 0x4a
   1aab6:	4819      	ldr	r0, [pc, #100]	; (1ab1c <z_remove_thread_from_ready_q+0x98>)
   1aab8:	f002 f9b0 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1aabc:	4816      	ldr	r0, [pc, #88]	; (1ab18 <z_remove_thread_from_ready_q+0x94>)
   1aabe:	f000 fcff 	bl	1b4c0 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   1aac2:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1aac6:	2b00      	cmp	r3, #0
   1aac8:	da07      	bge.n	1aada <z_remove_thread_from_ready_q+0x56>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1aaca:	4621      	mov	r1, r4
   1aacc:	4817      	ldr	r0, [pc, #92]	; (1ab2c <z_remove_thread_from_ready_q+0xa8>)
   1aace:	f7ff fc0f 	bl	1a2f0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1aad2:	7b63      	ldrb	r3, [r4, #13]
   1aad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1aad8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1aada:	4b15      	ldr	r3, [pc, #84]	; (1ab30 <z_remove_thread_from_ready_q+0xac>)
   1aadc:	6898      	ldr	r0, [r3, #8]
   1aade:	1b03      	subs	r3, r0, r4
   1aae0:	4258      	negs	r0, r3
   1aae2:	4158      	adcs	r0, r3
   1aae4:	f7ff fc88 	bl	1a3f8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1aae8:	480b      	ldr	r0, [pc, #44]	; (1ab18 <z_remove_thread_from_ready_q+0x94>)
   1aaea:	f000 fcd9 	bl	1b4a0 <z_spin_unlock_valid>
   1aaee:	b968      	cbnz	r0, 1ab0c <z_remove_thread_from_ready_q+0x88>
   1aaf0:	235d      	movs	r3, #93	; 0x5d
   1aaf2:	4a0a      	ldr	r2, [pc, #40]	; (1ab1c <z_remove_thread_from_ready_q+0x98>)
   1aaf4:	490f      	ldr	r1, [pc, #60]	; (1ab34 <z_remove_thread_from_ready_q+0xb0>)
   1aaf6:	480b      	ldr	r0, [pc, #44]	; (1ab24 <z_remove_thread_from_ready_q+0xa0>)
   1aaf8:	f002 f95e 	bl	1cdb8 <printk>
   1aafc:	4906      	ldr	r1, [pc, #24]	; (1ab18 <z_remove_thread_from_ready_q+0x94>)
   1aafe:	480e      	ldr	r0, [pc, #56]	; (1ab38 <z_remove_thread_from_ready_q+0xb4>)
   1ab00:	f002 f95a 	bl	1cdb8 <printk>
   1ab04:	215d      	movs	r1, #93	; 0x5d
   1ab06:	4805      	ldr	r0, [pc, #20]	; (1ab1c <z_remove_thread_from_ready_q+0x98>)
   1ab08:	f002 f988 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1ab0c:	f385 8811 	msr	BASEPRI, r5
   1ab10:	f3bf 8f6f 	isb	sy
}
   1ab14:	bd38      	pop	{r3, r4, r5, pc}
   1ab16:	bf00      	nop
   1ab18:	20024e3c 	.word	0x20024e3c
   1ab1c:	0001f904 	.word	0x0001f904
   1ab20:	0001f923 	.word	0x0001f923
   1ab24:	0001f722 	.word	0x0001f722
   1ab28:	0001f938 	.word	0x0001f938
   1ab2c:	20024e2c 	.word	0x20024e2c
   1ab30:	20024e04 	.word	0x20024e04
   1ab34:	0001f950 	.word	0x0001f950
   1ab38:	0001f967 	.word	0x0001f967

0001ab3c <pend>:
{
   1ab3c:	b570      	push	{r4, r5, r6, lr}
   1ab3e:	4604      	mov	r4, r0
   1ab40:	460d      	mov	r5, r1
   1ab42:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   1ab44:	f7ff ff9e 	bl	1aa84 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   1ab48:	7b63      	ldrb	r3, [r4, #13]
   1ab4a:	f043 0302 	orr.w	r3, r3, #2
   1ab4e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1ab50:	b1fd      	cbz	r5, 1ab92 <pend+0x56>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1ab52:	4b2b      	ldr	r3, [pc, #172]	; (1ac00 <pend+0xc4>)
		thread->base.pended_on = wait_q;
   1ab54:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1ab56:	429c      	cmp	r4, r3
   1ab58:	d10b      	bne.n	1ab72 <pend+0x36>
   1ab5a:	492a      	ldr	r1, [pc, #168]	; (1ac04 <pend+0xc8>)
   1ab5c:	482a      	ldr	r0, [pc, #168]	; (1ac08 <pend+0xcc>)
   1ab5e:	f240 3302 	movw	r3, #770	; 0x302
   1ab62:	4a2a      	ldr	r2, [pc, #168]	; (1ac0c <pend+0xd0>)
   1ab64:	f002 f928 	bl	1cdb8 <printk>
   1ab68:	f240 3102 	movw	r1, #770	; 0x302
   1ab6c:	4827      	ldr	r0, [pc, #156]	; (1ac0c <pend+0xd0>)
   1ab6e:	f002 f955 	bl	1ce1c <assert_post_action>
	return list->head == list;
   1ab72:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ab74:	429d      	cmp	r5, r3
   1ab76:	d03b      	beq.n	1abf0 <pend+0xb4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ab78:	2b00      	cmp	r3, #0
   1ab7a:	d039      	beq.n	1abf0 <pend+0xb4>
	if (thread_1->base.prio < thread_2->base.prio) {
   1ab7c:	f994 200e 	ldrsb.w	r2, [r4, #14]
   1ab80:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1ab84:	4291      	cmp	r1, r2
   1ab86:	dd2d      	ble.n	1abe4 <pend+0xa8>
	node->prev = successor->prev;
   1ab88:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1ab8a:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1ab8e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1ab90:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   1ab92:	1c73      	adds	r3, r6, #1
   1ab94:	d033      	beq.n	1abfe <pend+0xc2>
		__ASSERT(timeout >= 0,
   1ab96:	2e00      	cmp	r6, #0
   1ab98:	da0e      	bge.n	1abb8 <pend+0x7c>
   1ab9a:	491d      	ldr	r1, [pc, #116]	; (1ac10 <pend+0xd4>)
   1ab9c:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   1aba0:	4a1a      	ldr	r2, [pc, #104]	; (1ac0c <pend+0xd0>)
   1aba2:	4819      	ldr	r0, [pc, #100]	; (1ac08 <pend+0xcc>)
   1aba4:	f002 f908 	bl	1cdb8 <printk>
   1aba8:	481a      	ldr	r0, [pc, #104]	; (1ac14 <pend+0xd8>)
   1abaa:	f002 f905 	bl	1cdb8 <printk>
   1abae:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
   1abb2:	4816      	ldr	r0, [pc, #88]	; (1ac0c <pend+0xd0>)
   1abb4:	f002 f932 	bl	1ce1c <assert_post_action>
   1abb8:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1abbc:	f240 30e7 	movw	r0, #999	; 0x3e7
   1abc0:	2100      	movs	r1, #0
   1abc2:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   1abc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1abca:	fbc5 0106 	smlal	r0, r1, r5, r6
   1abce:	2300      	movs	r3, #0
   1abd0:	f7f1 fb34 	bl	c23c <__aeabi_uldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1abd4:	4910      	ldr	r1, [pc, #64]	; (1ac18 <pend+0xdc>)
   1abd6:	1c42      	adds	r2, r0, #1
   1abd8:	f104 0018 	add.w	r0, r4, #24
}
   1abdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1abe0:	f000 beea 	b.w	1b9b8 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   1abe4:	6869      	ldr	r1, [r5, #4]
   1abe6:	428b      	cmp	r3, r1
   1abe8:	d002      	beq.n	1abf0 <pend+0xb4>
   1abea:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1abec:	2b00      	cmp	r3, #0
   1abee:	d1c7      	bne.n	1ab80 <pend+0x44>
	node->prev = list->tail;
   1abf0:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1abf2:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   1abf4:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1abf6:	686b      	ldr	r3, [r5, #4]
   1abf8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1abfa:	606c      	str	r4, [r5, #4]
   1abfc:	e7c9      	b.n	1ab92 <pend+0x56>
}
   1abfe:	bd70      	pop	{r4, r5, r6, pc}
   1ac00:	20020c34 	.word	0x20020c34
   1ac04:	000205a0 	.word	0x000205a0
   1ac08:	0001f722 	.word	0x0001f722
   1ac0c:	0002054f 	.word	0x0002054f
   1ac10:	00020519 	.word	0x00020519
   1ac14:	00020526 	.word	0x00020526
   1ac18:	0001a65d 	.word	0x0001a65d

0001ac1c <z_pend_curr_irqlock>:
{
   1ac1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ac1e:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   1ac20:	4d22      	ldr	r5, [pc, #136]	; (1acac <z_pend_curr_irqlock+0x90>)
	pending_current = _current;
   1ac22:	4c23      	ldr	r4, [pc, #140]	; (1acb0 <z_pend_curr_irqlock+0x94>)
	pend(_current, wait_q, timeout);
   1ac24:	68a8      	ldr	r0, [r5, #8]
   1ac26:	f7ff ff89 	bl	1ab3c <pend>
	pending_current = _current;
   1ac2a:	68ab      	ldr	r3, [r5, #8]
   1ac2c:	4630      	mov	r0, r6
   1ac2e:	6023      	str	r3, [r4, #0]
   1ac30:	f7f2 fdfc 	bl	d82c <arch_swap>
   1ac34:	4606      	mov	r6, r0
	__asm__ volatile(
   1ac36:	f04f 0320 	mov.w	r3, #32
   1ac3a:	f3ef 8711 	mrs	r7, BASEPRI
   1ac3e:	f383 8811 	msr	BASEPRI, r3
   1ac42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ac46:	481b      	ldr	r0, [pc, #108]	; (1acb4 <z_pend_curr_irqlock+0x98>)
   1ac48:	f000 fc1c 	bl	1b484 <z_spin_lock_valid>
   1ac4c:	b968      	cbnz	r0, 1ac6a <z_pend_curr_irqlock+0x4e>
   1ac4e:	234a      	movs	r3, #74	; 0x4a
   1ac50:	4a19      	ldr	r2, [pc, #100]	; (1acb8 <z_pend_curr_irqlock+0x9c>)
   1ac52:	491a      	ldr	r1, [pc, #104]	; (1acbc <z_pend_curr_irqlock+0xa0>)
   1ac54:	481a      	ldr	r0, [pc, #104]	; (1acc0 <z_pend_curr_irqlock+0xa4>)
   1ac56:	f002 f8af 	bl	1cdb8 <printk>
   1ac5a:	4916      	ldr	r1, [pc, #88]	; (1acb4 <z_pend_curr_irqlock+0x98>)
   1ac5c:	4819      	ldr	r0, [pc, #100]	; (1acc4 <z_pend_curr_irqlock+0xa8>)
   1ac5e:	f002 f8ab 	bl	1cdb8 <printk>
   1ac62:	214a      	movs	r1, #74	; 0x4a
   1ac64:	4814      	ldr	r0, [pc, #80]	; (1acb8 <z_pend_curr_irqlock+0x9c>)
   1ac66:	f002 f8d9 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1ac6a:	4812      	ldr	r0, [pc, #72]	; (1acb4 <z_pend_curr_irqlock+0x98>)
   1ac6c:	f000 fc28 	bl	1b4c0 <z_spin_lock_set_owner>
		if (pending_current == _current) {
   1ac70:	6823      	ldr	r3, [r4, #0]
   1ac72:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ac74:	480f      	ldr	r0, [pc, #60]	; (1acb4 <z_pend_curr_irqlock+0x98>)
   1ac76:	429a      	cmp	r2, r3
			pending_current = NULL;
   1ac78:	bf04      	itt	eq
   1ac7a:	2300      	moveq	r3, #0
   1ac7c:	6023      	streq	r3, [r4, #0]
   1ac7e:	f000 fc0f 	bl	1b4a0 <z_spin_unlock_valid>
   1ac82:	b968      	cbnz	r0, 1aca0 <z_pend_curr_irqlock+0x84>
   1ac84:	235d      	movs	r3, #93	; 0x5d
   1ac86:	4a0c      	ldr	r2, [pc, #48]	; (1acb8 <z_pend_curr_irqlock+0x9c>)
   1ac88:	490f      	ldr	r1, [pc, #60]	; (1acc8 <z_pend_curr_irqlock+0xac>)
   1ac8a:	480d      	ldr	r0, [pc, #52]	; (1acc0 <z_pend_curr_irqlock+0xa4>)
   1ac8c:	f002 f894 	bl	1cdb8 <printk>
   1ac90:	4908      	ldr	r1, [pc, #32]	; (1acb4 <z_pend_curr_irqlock+0x98>)
   1ac92:	480e      	ldr	r0, [pc, #56]	; (1accc <z_pend_curr_irqlock+0xb0>)
   1ac94:	f002 f890 	bl	1cdb8 <printk>
   1ac98:	215d      	movs	r1, #93	; 0x5d
   1ac9a:	4807      	ldr	r0, [pc, #28]	; (1acb8 <z_pend_curr_irqlock+0x9c>)
   1ac9c:	f002 f8be 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1aca0:	f387 8811 	msr	BASEPRI, r7
   1aca4:	f3bf 8f6f 	isb	sy
}
   1aca8:	4630      	mov	r0, r6
   1acaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1acac:	20024e04 	.word	0x20024e04
   1acb0:	20024e38 	.word	0x20024e38
   1acb4:	20024e3c 	.word	0x20024e3c
   1acb8:	0001f904 	.word	0x0001f904
   1acbc:	0001f923 	.word	0x0001f923
   1acc0:	0001f722 	.word	0x0001f722
   1acc4:	0001f938 	.word	0x0001f938
   1acc8:	0001f950 	.word	0x0001f950
   1accc:	0001f967 	.word	0x0001f967

0001acd0 <z_pend_curr>:
{
   1acd0:	b538      	push	{r3, r4, r5, lr}
   1acd2:	4604      	mov	r4, r0
   1acd4:	460d      	mov	r5, r1
   1acd6:	4611      	mov	r1, r2
	pending_current = _current;
   1acd8:	4a0e      	ldr	r2, [pc, #56]	; (1ad14 <z_pend_curr+0x44>)
   1acda:	6890      	ldr	r0, [r2, #8]
   1acdc:	4a0e      	ldr	r2, [pc, #56]	; (1ad18 <z_pend_curr+0x48>)
   1acde:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   1ace0:	461a      	mov	r2, r3
   1ace2:	f7ff ff2b 	bl	1ab3c <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ace6:	4620      	mov	r0, r4
   1ace8:	f000 fbda 	bl	1b4a0 <z_spin_unlock_valid>
   1acec:	b968      	cbnz	r0, 1ad0a <z_pend_curr+0x3a>
   1acee:	2374      	movs	r3, #116	; 0x74
   1acf0:	4a0a      	ldr	r2, [pc, #40]	; (1ad1c <z_pend_curr+0x4c>)
   1acf2:	490b      	ldr	r1, [pc, #44]	; (1ad20 <z_pend_curr+0x50>)
   1acf4:	480b      	ldr	r0, [pc, #44]	; (1ad24 <z_pend_curr+0x54>)
   1acf6:	f002 f85f 	bl	1cdb8 <printk>
   1acfa:	4621      	mov	r1, r4
   1acfc:	480a      	ldr	r0, [pc, #40]	; (1ad28 <z_pend_curr+0x58>)
   1acfe:	f002 f85b 	bl	1cdb8 <printk>
   1ad02:	2174      	movs	r1, #116	; 0x74
   1ad04:	4805      	ldr	r0, [pc, #20]	; (1ad1c <z_pend_curr+0x4c>)
   1ad06:	f002 f889 	bl	1ce1c <assert_post_action>
   1ad0a:	4628      	mov	r0, r5
}
   1ad0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1ad10:	f7f2 bd8c 	b.w	d82c <arch_swap>
   1ad14:	20024e04 	.word	0x20024e04
   1ad18:	20024e38 	.word	0x20024e38
   1ad1c:	0001f904 	.word	0x0001f904
   1ad20:	0001f950 	.word	0x0001f950
   1ad24:	0001f722 	.word	0x0001f722
   1ad28:	0001f967 	.word	0x0001f967

0001ad2c <z_set_prio>:
{
   1ad2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ad2e:	4604      	mov	r4, r0
   1ad30:	460d      	mov	r5, r1
	__asm__ volatile(
   1ad32:	f04f 0320 	mov.w	r3, #32
   1ad36:	f3ef 8611 	mrs	r6, BASEPRI
   1ad3a:	f383 8811 	msr	BASEPRI, r3
   1ad3e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ad42:	4835      	ldr	r0, [pc, #212]	; (1ae18 <z_set_prio+0xec>)
   1ad44:	f000 fb9e 	bl	1b484 <z_spin_lock_valid>
   1ad48:	b968      	cbnz	r0, 1ad66 <z_set_prio+0x3a>
   1ad4a:	234a      	movs	r3, #74	; 0x4a
   1ad4c:	4a33      	ldr	r2, [pc, #204]	; (1ae1c <z_set_prio+0xf0>)
   1ad4e:	4934      	ldr	r1, [pc, #208]	; (1ae20 <z_set_prio+0xf4>)
   1ad50:	4834      	ldr	r0, [pc, #208]	; (1ae24 <z_set_prio+0xf8>)
   1ad52:	f002 f831 	bl	1cdb8 <printk>
   1ad56:	4930      	ldr	r1, [pc, #192]	; (1ae18 <z_set_prio+0xec>)
   1ad58:	4833      	ldr	r0, [pc, #204]	; (1ae28 <z_set_prio+0xfc>)
   1ad5a:	f002 f82d 	bl	1cdb8 <printk>
   1ad5e:	214a      	movs	r1, #74	; 0x4a
   1ad60:	482e      	ldr	r0, [pc, #184]	; (1ae1c <z_set_prio+0xf0>)
   1ad62:	f002 f85b 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1ad66:	482c      	ldr	r0, [pc, #176]	; (1ae18 <z_set_prio+0xec>)
   1ad68:	f000 fbaa 	bl	1b4c0 <z_spin_lock_set_owner>
		need_sched = z_is_thread_ready(thread);
   1ad6c:	4620      	mov	r0, r4
   1ad6e:	f003 fd52 	bl	1e816 <z_is_thread_ready>
		if (need_sched) {
   1ad72:	b26d      	sxtb	r5, r5
   1ad74:	4607      	mov	r7, r0
   1ad76:	2800      	cmp	r0, #0
   1ad78:	d04c      	beq.n	1ae14 <z_set_prio+0xe8>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1ad7a:	4621      	mov	r1, r4
   1ad7c:	482b      	ldr	r0, [pc, #172]	; (1ae2c <z_set_prio+0x100>)
   1ad7e:	f7ff fab7 	bl	1a2f0 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1ad82:	4b2b      	ldr	r3, [pc, #172]	; (1ae30 <z_set_prio+0x104>)
				thread->base.prio = prio;
   1ad84:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1ad86:	429c      	cmp	r4, r3
   1ad88:	d10b      	bne.n	1ada2 <z_set_prio+0x76>
   1ad8a:	492a      	ldr	r1, [pc, #168]	; (1ae34 <z_set_prio+0x108>)
   1ad8c:	4825      	ldr	r0, [pc, #148]	; (1ae24 <z_set_prio+0xf8>)
   1ad8e:	f240 3302 	movw	r3, #770	; 0x302
   1ad92:	4a29      	ldr	r2, [pc, #164]	; (1ae38 <z_set_prio+0x10c>)
   1ad94:	f002 f810 	bl	1cdb8 <printk>
   1ad98:	f240 3102 	movw	r1, #770	; 0x302
   1ad9c:	4826      	ldr	r0, [pc, #152]	; (1ae38 <z_set_prio+0x10c>)
   1ad9e:	f002 f83d 	bl	1ce1c <assert_post_action>
	return list->head == list;
   1ada2:	4a26      	ldr	r2, [pc, #152]	; (1ae3c <z_set_prio+0x110>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ada4:	f102 0128 	add.w	r1, r2, #40	; 0x28
   1ada8:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   1adac:	428b      	cmp	r3, r1
   1adae:	d02b      	beq.n	1ae08 <z_set_prio+0xdc>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1adb0:	b353      	cbz	r3, 1ae08 <z_set_prio+0xdc>
	if (thread_1->base.prio < thread_2->base.prio) {
   1adb2:	f994 500e 	ldrsb.w	r5, [r4, #14]
   1adb6:	f993 c00e 	ldrsb.w	ip, [r3, #14]
   1adba:	45ac      	cmp	ip, r5
   1adbc:	dd1f      	ble.n	1adfe <z_set_prio+0xd2>
	node->prev = successor->prev;
   1adbe:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1adc0:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1adc4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1adc6:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1adc8:	2001      	movs	r0, #1
   1adca:	f7ff fb15 	bl	1a3f8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1adce:	4812      	ldr	r0, [pc, #72]	; (1ae18 <z_set_prio+0xec>)
   1add0:	f000 fb66 	bl	1b4a0 <z_spin_unlock_valid>
   1add4:	b968      	cbnz	r0, 1adf2 <z_set_prio+0xc6>
   1add6:	235d      	movs	r3, #93	; 0x5d
   1add8:	4a10      	ldr	r2, [pc, #64]	; (1ae1c <z_set_prio+0xf0>)
   1adda:	4919      	ldr	r1, [pc, #100]	; (1ae40 <z_set_prio+0x114>)
   1addc:	4811      	ldr	r0, [pc, #68]	; (1ae24 <z_set_prio+0xf8>)
   1adde:	f001 ffeb 	bl	1cdb8 <printk>
   1ade2:	490d      	ldr	r1, [pc, #52]	; (1ae18 <z_set_prio+0xec>)
   1ade4:	4817      	ldr	r0, [pc, #92]	; (1ae44 <z_set_prio+0x118>)
   1ade6:	f001 ffe7 	bl	1cdb8 <printk>
   1adea:	215d      	movs	r1, #93	; 0x5d
   1adec:	480b      	ldr	r0, [pc, #44]	; (1ae1c <z_set_prio+0xf0>)
   1adee:	f002 f815 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1adf2:	f386 8811 	msr	BASEPRI, r6
   1adf6:	f3bf 8f6f 	isb	sy
}
   1adfa:	4638      	mov	r0, r7
   1adfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1adfe:	4298      	cmp	r0, r3
   1ae00:	d002      	beq.n	1ae08 <z_set_prio+0xdc>
   1ae02:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ae04:	2b00      	cmp	r3, #0
   1ae06:	d1d6      	bne.n	1adb6 <z_set_prio+0x8a>
	node->prev = list->tail;
   1ae08:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   1ae0c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1ae0e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ae10:	62d4      	str	r4, [r2, #44]	; 0x2c
   1ae12:	e7d9      	b.n	1adc8 <z_set_prio+0x9c>
			thread->base.prio = prio;
   1ae14:	73a5      	strb	r5, [r4, #14]
   1ae16:	e7da      	b.n	1adce <z_set_prio+0xa2>
   1ae18:	20024e3c 	.word	0x20024e3c
   1ae1c:	0001f904 	.word	0x0001f904
   1ae20:	0001f923 	.word	0x0001f923
   1ae24:	0001f722 	.word	0x0001f722
   1ae28:	0001f938 	.word	0x0001f938
   1ae2c:	20024e2c 	.word	0x20024e2c
   1ae30:	20020c34 	.word	0x20020c34
   1ae34:	000205a0 	.word	0x000205a0
   1ae38:	0002054f 	.word	0x0002054f
   1ae3c:	20024e04 	.word	0x20024e04
   1ae40:	0001f950 	.word	0x0001f950
   1ae44:	0001f967 	.word	0x0001f967

0001ae48 <z_unpend_first_thread>:
{
   1ae48:	b538      	push	{r3, r4, r5, lr}
   1ae4a:	4604      	mov	r4, r0
	__asm__ volatile(
   1ae4c:	f04f 0320 	mov.w	r3, #32
   1ae50:	f3ef 8511 	mrs	r5, BASEPRI
   1ae54:	f383 8811 	msr	BASEPRI, r3
   1ae58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ae5c:	483b      	ldr	r0, [pc, #236]	; (1af4c <z_unpend_first_thread+0x104>)
   1ae5e:	f000 fb11 	bl	1b484 <z_spin_lock_valid>
   1ae62:	b968      	cbnz	r0, 1ae80 <z_unpend_first_thread+0x38>
   1ae64:	234a      	movs	r3, #74	; 0x4a
   1ae66:	4a3a      	ldr	r2, [pc, #232]	; (1af50 <z_unpend_first_thread+0x108>)
   1ae68:	493a      	ldr	r1, [pc, #232]	; (1af54 <z_unpend_first_thread+0x10c>)
   1ae6a:	483b      	ldr	r0, [pc, #236]	; (1af58 <z_unpend_first_thread+0x110>)
   1ae6c:	f001 ffa4 	bl	1cdb8 <printk>
   1ae70:	4936      	ldr	r1, [pc, #216]	; (1af4c <z_unpend_first_thread+0x104>)
   1ae72:	483a      	ldr	r0, [pc, #232]	; (1af5c <z_unpend_first_thread+0x114>)
   1ae74:	f001 ffa0 	bl	1cdb8 <printk>
   1ae78:	214a      	movs	r1, #74	; 0x4a
   1ae7a:	4835      	ldr	r0, [pc, #212]	; (1af50 <z_unpend_first_thread+0x108>)
   1ae7c:	f001 ffce 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1ae80:	4832      	ldr	r0, [pc, #200]	; (1af4c <z_unpend_first_thread+0x104>)
   1ae82:	f000 fb1d 	bl	1b4c0 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   1ae86:	4620      	mov	r0, r4
   1ae88:	f003 fced 	bl	1e866 <z_priq_dumb_best>
   1ae8c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ae8e:	482f      	ldr	r0, [pc, #188]	; (1af4c <z_unpend_first_thread+0x104>)
   1ae90:	f000 fb06 	bl	1b4a0 <z_spin_unlock_valid>
   1ae94:	b968      	cbnz	r0, 1aeb2 <z_unpend_first_thread+0x6a>
   1ae96:	235d      	movs	r3, #93	; 0x5d
   1ae98:	4a2d      	ldr	r2, [pc, #180]	; (1af50 <z_unpend_first_thread+0x108>)
   1ae9a:	4931      	ldr	r1, [pc, #196]	; (1af60 <z_unpend_first_thread+0x118>)
   1ae9c:	482e      	ldr	r0, [pc, #184]	; (1af58 <z_unpend_first_thread+0x110>)
   1ae9e:	f001 ff8b 	bl	1cdb8 <printk>
   1aea2:	492a      	ldr	r1, [pc, #168]	; (1af4c <z_unpend_first_thread+0x104>)
   1aea4:	482f      	ldr	r0, [pc, #188]	; (1af64 <z_unpend_first_thread+0x11c>)
   1aea6:	f001 ff87 	bl	1cdb8 <printk>
   1aeaa:	215d      	movs	r1, #93	; 0x5d
   1aeac:	4828      	ldr	r0, [pc, #160]	; (1af50 <z_unpend_first_thread+0x108>)
   1aeae:	f001 ffb5 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1aeb2:	f385 8811 	msr	BASEPRI, r5
   1aeb6:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   1aeba:	2c00      	cmp	r4, #0
   1aebc:	d043      	beq.n	1af46 <z_unpend_first_thread+0xfe>
	__asm__ volatile(
   1aebe:	f04f 0320 	mov.w	r3, #32
   1aec2:	f3ef 8511 	mrs	r5, BASEPRI
   1aec6:	f383 8811 	msr	BASEPRI, r3
   1aeca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1aece:	481f      	ldr	r0, [pc, #124]	; (1af4c <z_unpend_first_thread+0x104>)
   1aed0:	f000 fad8 	bl	1b484 <z_spin_lock_valid>
   1aed4:	b968      	cbnz	r0, 1aef2 <z_unpend_first_thread+0xaa>
   1aed6:	234a      	movs	r3, #74	; 0x4a
   1aed8:	4a1d      	ldr	r2, [pc, #116]	; (1af50 <z_unpend_first_thread+0x108>)
   1aeda:	491e      	ldr	r1, [pc, #120]	; (1af54 <z_unpend_first_thread+0x10c>)
   1aedc:	481e      	ldr	r0, [pc, #120]	; (1af58 <z_unpend_first_thread+0x110>)
   1aede:	f001 ff6b 	bl	1cdb8 <printk>
   1aee2:	491a      	ldr	r1, [pc, #104]	; (1af4c <z_unpend_first_thread+0x104>)
   1aee4:	481d      	ldr	r0, [pc, #116]	; (1af5c <z_unpend_first_thread+0x114>)
   1aee6:	f001 ff67 	bl	1cdb8 <printk>
   1aeea:	214a      	movs	r1, #74	; 0x4a
   1aeec:	4818      	ldr	r0, [pc, #96]	; (1af50 <z_unpend_first_thread+0x108>)
   1aeee:	f001 ff95 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1aef2:	4816      	ldr	r0, [pc, #88]	; (1af4c <z_unpend_first_thread+0x104>)
   1aef4:	f000 fae4 	bl	1b4c0 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1aef8:	f104 0008 	add.w	r0, r4, #8
   1aefc:	f7ff f864 	bl	19fc8 <pended_on.isra.17>
   1af00:	4621      	mov	r1, r4
   1af02:	f7ff f9f5 	bl	1a2f0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1af06:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1af08:	4810      	ldr	r0, [pc, #64]	; (1af4c <z_unpend_first_thread+0x104>)
   1af0a:	f023 0302 	bic.w	r3, r3, #2
   1af0e:	7363      	strb	r3, [r4, #13]
   1af10:	f000 fac6 	bl	1b4a0 <z_spin_unlock_valid>
   1af14:	b968      	cbnz	r0, 1af32 <z_unpend_first_thread+0xea>
   1af16:	235d      	movs	r3, #93	; 0x5d
   1af18:	4a0d      	ldr	r2, [pc, #52]	; (1af50 <z_unpend_first_thread+0x108>)
   1af1a:	4911      	ldr	r1, [pc, #68]	; (1af60 <z_unpend_first_thread+0x118>)
   1af1c:	480e      	ldr	r0, [pc, #56]	; (1af58 <z_unpend_first_thread+0x110>)
   1af1e:	f001 ff4b 	bl	1cdb8 <printk>
   1af22:	490a      	ldr	r1, [pc, #40]	; (1af4c <z_unpend_first_thread+0x104>)
   1af24:	480f      	ldr	r0, [pc, #60]	; (1af64 <z_unpend_first_thread+0x11c>)
   1af26:	f001 ff47 	bl	1cdb8 <printk>
   1af2a:	215d      	movs	r1, #93	; 0x5d
   1af2c:	4808      	ldr	r0, [pc, #32]	; (1af50 <z_unpend_first_thread+0x108>)
   1af2e:	f001 ff75 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1af32:	f385 8811 	msr	BASEPRI, r5
   1af36:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1af3a:	2300      	movs	r3, #0
	return z_abort_timeout(&thread->base.timeout);
   1af3c:	f104 0018 	add.w	r0, r4, #24
   1af40:	60a3      	str	r3, [r4, #8]
   1af42:	f000 fddf 	bl	1bb04 <z_abort_timeout>
}
   1af46:	4620      	mov	r0, r4
   1af48:	bd38      	pop	{r3, r4, r5, pc}
   1af4a:	bf00      	nop
   1af4c:	20024e3c 	.word	0x20024e3c
   1af50:	0001f904 	.word	0x0001f904
   1af54:	0001f923 	.word	0x0001f923
   1af58:	0001f722 	.word	0x0001f722
   1af5c:	0001f938 	.word	0x0001f938
   1af60:	0001f950 	.word	0x0001f950
   1af64:	0001f967 	.word	0x0001f967

0001af68 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1af68:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   1af6a:	4b04      	ldr	r3, [pc, #16]	; (1af7c <z_sched_init+0x14>)
   1af6c:	4608      	mov	r0, r1
   1af6e:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1af72:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1af76:	f7ff b855 	b.w	1a024 <k_sched_time_slice_set>
   1af7a:	bf00      	nop
   1af7c:	20024e04 	.word	0x20024e04

0001af80 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1af80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1af82:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1af86:	b173      	cbz	r3, 1afa6 <z_impl_k_yield+0x26>
   1af88:	4945      	ldr	r1, [pc, #276]	; (1b0a0 <z_impl_k_yield+0x120>)
   1af8a:	f240 430d 	movw	r3, #1037	; 0x40d
   1af8e:	4a45      	ldr	r2, [pc, #276]	; (1b0a4 <z_impl_k_yield+0x124>)
   1af90:	4845      	ldr	r0, [pc, #276]	; (1b0a8 <z_impl_k_yield+0x128>)
   1af92:	f001 ff11 	bl	1cdb8 <printk>
   1af96:	4845      	ldr	r0, [pc, #276]	; (1b0ac <z_impl_k_yield+0x12c>)
   1af98:	f001 ff0e 	bl	1cdb8 <printk>
   1af9c:	f240 410d 	movw	r1, #1037	; 0x40d
   1afa0:	4840      	ldr	r0, [pc, #256]	; (1b0a4 <z_impl_k_yield+0x124>)
   1afa2:	f001 ff3b 	bl	1ce1c <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   1afa6:	4c42      	ldr	r4, [pc, #264]	; (1b0b0 <z_impl_k_yield+0x130>)
   1afa8:	4e42      	ldr	r6, [pc, #264]	; (1b0b4 <z_impl_k_yield+0x134>)
   1afaa:	68a2      	ldr	r2, [r4, #8]
   1afac:	42b2      	cmp	r2, r6
   1afae:	d05f      	beq.n	1b070 <z_impl_k_yield+0xf0>
	__asm__ volatile(
   1afb0:	f04f 0320 	mov.w	r3, #32
   1afb4:	f3ef 8711 	mrs	r7, BASEPRI
   1afb8:	f383 8811 	msr	BASEPRI, r3
   1afbc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1afc0:	483d      	ldr	r0, [pc, #244]	; (1b0b8 <z_impl_k_yield+0x138>)
   1afc2:	f000 fa5f 	bl	1b484 <z_spin_lock_valid>
   1afc6:	b968      	cbnz	r0, 1afe4 <z_impl_k_yield+0x64>
   1afc8:	234a      	movs	r3, #74	; 0x4a
   1afca:	4a3c      	ldr	r2, [pc, #240]	; (1b0bc <z_impl_k_yield+0x13c>)
   1afcc:	493c      	ldr	r1, [pc, #240]	; (1b0c0 <z_impl_k_yield+0x140>)
   1afce:	4836      	ldr	r0, [pc, #216]	; (1b0a8 <z_impl_k_yield+0x128>)
   1afd0:	f001 fef2 	bl	1cdb8 <printk>
   1afd4:	4938      	ldr	r1, [pc, #224]	; (1b0b8 <z_impl_k_yield+0x138>)
   1afd6:	483b      	ldr	r0, [pc, #236]	; (1b0c4 <z_impl_k_yield+0x144>)
   1afd8:	f001 feee 	bl	1cdb8 <printk>
   1afdc:	214a      	movs	r1, #74	; 0x4a
   1afde:	4837      	ldr	r0, [pc, #220]	; (1b0bc <z_impl_k_yield+0x13c>)
   1afe0:	f001 ff1c 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1afe4:	4834      	ldr	r0, [pc, #208]	; (1b0b8 <z_impl_k_yield+0x138>)
   1afe6:	f000 fa6b 	bl	1b4c0 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   1afea:	68a1      	ldr	r1, [r4, #8]
   1afec:	4836      	ldr	r0, [pc, #216]	; (1b0c8 <z_impl_k_yield+0x148>)
   1afee:	f7ff f97f 	bl	1a2f0 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1aff2:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1aff4:	42b5      	cmp	r5, r6
   1aff6:	d10b      	bne.n	1b010 <z_impl_k_yield+0x90>
   1aff8:	4934      	ldr	r1, [pc, #208]	; (1b0cc <z_impl_k_yield+0x14c>)
   1affa:	482b      	ldr	r0, [pc, #172]	; (1b0a8 <z_impl_k_yield+0x128>)
   1affc:	f240 3302 	movw	r3, #770	; 0x302
   1b000:	4a28      	ldr	r2, [pc, #160]	; (1b0a4 <z_impl_k_yield+0x124>)
   1b002:	f001 fed9 	bl	1cdb8 <printk>
   1b006:	f240 3102 	movw	r1, #770	; 0x302
   1b00a:	4826      	ldr	r0, [pc, #152]	; (1b0a4 <z_impl_k_yield+0x124>)
   1b00c:	f001 ff06 	bl	1ce1c <assert_post_action>
	return list->head == list;
   1b010:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b014:	4a2c      	ldr	r2, [pc, #176]	; (1b0c8 <z_impl_k_yield+0x148>)
   1b016:	4293      	cmp	r3, r2
   1b018:	d03b      	beq.n	1b092 <z_impl_k_yield+0x112>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b01a:	2b00      	cmp	r3, #0
   1b01c:	d039      	beq.n	1b092 <z_impl_k_yield+0x112>
	if (thread_1->base.prio < thread_2->base.prio) {
   1b01e:	f995 000e 	ldrsb.w	r0, [r5, #14]
   1b022:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1b026:	4286      	cmp	r6, r0
   1b028:	dd2e      	ble.n	1b088 <z_impl_k_yield+0x108>
	node->prev = successor->prev;
   1b02a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b02c:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   1b030:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   1b032:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   1b034:	68a2      	ldr	r2, [r4, #8]
			update_cache(1);
   1b036:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   1b038:	7b53      	ldrb	r3, [r2, #13]
   1b03a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b03e:	7353      	strb	r3, [r2, #13]
   1b040:	f7ff f9da 	bl	1a3f8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b044:	481c      	ldr	r0, [pc, #112]	; (1b0b8 <z_impl_k_yield+0x138>)
   1b046:	f000 fa2b 	bl	1b4a0 <z_spin_unlock_valid>
   1b04a:	b968      	cbnz	r0, 1b068 <z_impl_k_yield+0xe8>
   1b04c:	235d      	movs	r3, #93	; 0x5d
   1b04e:	4a1b      	ldr	r2, [pc, #108]	; (1b0bc <z_impl_k_yield+0x13c>)
   1b050:	491f      	ldr	r1, [pc, #124]	; (1b0d0 <z_impl_k_yield+0x150>)
   1b052:	4815      	ldr	r0, [pc, #84]	; (1b0a8 <z_impl_k_yield+0x128>)
   1b054:	f001 feb0 	bl	1cdb8 <printk>
   1b058:	4917      	ldr	r1, [pc, #92]	; (1b0b8 <z_impl_k_yield+0x138>)
   1b05a:	481e      	ldr	r0, [pc, #120]	; (1b0d4 <z_impl_k_yield+0x154>)
   1b05c:	f001 feac 	bl	1cdb8 <printk>
   1b060:	215d      	movs	r1, #93	; 0x5d
   1b062:	4816      	ldr	r0, [pc, #88]	; (1b0bc <z_impl_k_yield+0x13c>)
   1b064:	f001 feda 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1b068:	f387 8811 	msr	BASEPRI, r7
   1b06c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1b070:	f04f 0320 	mov.w	r3, #32
   1b074:	f3ef 8011 	mrs	r0, BASEPRI
   1b078:	f383 8811 	msr	BASEPRI, r3
   1b07c:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   1b080:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1b084:	f7f2 bbd2 	b.w	d82c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1b088:	4299      	cmp	r1, r3
   1b08a:	d002      	beq.n	1b092 <z_impl_k_yield+0x112>
   1b08c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b08e:	2b00      	cmp	r3, #0
   1b090:	d1c7      	bne.n	1b022 <z_impl_k_yield+0xa2>
	node->prev = list->tail;
   1b092:	e9c5 2100 	strd	r2, r1, [r5]
	list->tail->next = node;
   1b096:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b098:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1b09a:	62e5      	str	r5, [r4, #44]	; 0x2c
   1b09c:	e7ca      	b.n	1b034 <z_impl_k_yield+0xb4>
   1b09e:	bf00      	nop
   1b0a0:	000204b7 	.word	0x000204b7
   1b0a4:	0002054f 	.word	0x0002054f
   1b0a8:	0001f722 	.word	0x0001f722
   1b0ac:	0001fdcc 	.word	0x0001fdcc
   1b0b0:	20024e04 	.word	0x20024e04
   1b0b4:	20020c34 	.word	0x20020c34
   1b0b8:	20024e3c 	.word	0x20024e3c
   1b0bc:	0001f904 	.word	0x0001f904
   1b0c0:	0001f923 	.word	0x0001f923
   1b0c4:	0001f938 	.word	0x0001f938
   1b0c8:	20024e2c 	.word	0x20024e2c
   1b0cc:	000205a0 	.word	0x000205a0
   1b0d0:	0001f950 	.word	0x0001f950
   1b0d4:	0001f967 	.word	0x0001f967

0001b0d8 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
{
   1b0d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b0da:	4604      	mov	r4, r0
   1b0dc:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	u32_t expected_wakeup_time;

	__ASSERT(!arch_is_in_isr(), "");
   1b0e0:	b173      	cbz	r3, 1b100 <z_tick_sleep+0x28>
   1b0e2:	493b      	ldr	r1, [pc, #236]	; (1b1d0 <z_tick_sleep+0xf8>)
   1b0e4:	f240 432b 	movw	r3, #1067	; 0x42b
   1b0e8:	4a3a      	ldr	r2, [pc, #232]	; (1b1d4 <z_tick_sleep+0xfc>)
   1b0ea:	483b      	ldr	r0, [pc, #236]	; (1b1d8 <z_tick_sleep+0x100>)
   1b0ec:	f001 fe64 	bl	1cdb8 <printk>
   1b0f0:	483a      	ldr	r0, [pc, #232]	; (1b1dc <z_tick_sleep+0x104>)
   1b0f2:	f001 fe61 	bl	1cdb8 <printk>
   1b0f6:	f240 412b 	movw	r1, #1067	; 0x42b
   1b0fa:	4836      	ldr	r0, [pc, #216]	; (1b1d4 <z_tick_sleep+0xfc>)
   1b0fc:	f001 fe8e 	bl	1ce1c <assert_post_action>

	K_DEBUG("thread %p for %d ticks\n", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1b100:	b924      	cbnz	r4, 1b10c <z_tick_sleep+0x34>
	z_impl_k_yield();
   1b102:	f7ff ff3d 	bl	1af80 <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
   1b106:	4620      	mov	r0, r4
   1b108:	b003      	add	sp, #12
   1b10a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
   1b10c:	f003 fc52 	bl	1e9b4 <z_tick_get_32>
	struct k_spinlock local_lock = {};
   1b110:	2300      	movs	r3, #0
	ticks += _TICK_ALIGN;
   1b112:	1c66      	adds	r6, r4, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   1b114:	1834      	adds	r4, r6, r0
	struct k_spinlock local_lock = {};
   1b116:	9301      	str	r3, [sp, #4]
   1b118:	f04f 0320 	mov.w	r3, #32
   1b11c:	f3ef 8711 	mrs	r7, BASEPRI
   1b120:	f383 8811 	msr	BASEPRI, r3
   1b124:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b128:	a801      	add	r0, sp, #4
   1b12a:	f000 f9ab 	bl	1b484 <z_spin_lock_valid>
   1b12e:	b968      	cbnz	r0, 1b14c <z_tick_sleep+0x74>
   1b130:	234a      	movs	r3, #74	; 0x4a
   1b132:	4a2b      	ldr	r2, [pc, #172]	; (1b1e0 <z_tick_sleep+0x108>)
   1b134:	492b      	ldr	r1, [pc, #172]	; (1b1e4 <z_tick_sleep+0x10c>)
   1b136:	4828      	ldr	r0, [pc, #160]	; (1b1d8 <z_tick_sleep+0x100>)
   1b138:	f001 fe3e 	bl	1cdb8 <printk>
   1b13c:	a901      	add	r1, sp, #4
   1b13e:	482a      	ldr	r0, [pc, #168]	; (1b1e8 <z_tick_sleep+0x110>)
   1b140:	f001 fe3a 	bl	1cdb8 <printk>
   1b144:	214a      	movs	r1, #74	; 0x4a
   1b146:	4826      	ldr	r0, [pc, #152]	; (1b1e0 <z_tick_sleep+0x108>)
   1b148:	f001 fe68 	bl	1ce1c <assert_post_action>
	pending_current = _current;
   1b14c:	4d27      	ldr	r5, [pc, #156]	; (1b1ec <z_tick_sleep+0x114>)
	z_spin_lock_set_owner(l);
   1b14e:	a801      	add	r0, sp, #4
   1b150:	f000 f9b6 	bl	1b4c0 <z_spin_lock_set_owner>
   1b154:	4b26      	ldr	r3, [pc, #152]	; (1b1f0 <z_tick_sleep+0x118>)
   1b156:	68a8      	ldr	r0, [r5, #8]
   1b158:	6018      	str	r0, [r3, #0]
	z_remove_thread_from_ready_q(_current);
   1b15a:	f7ff fc93 	bl	1aa84 <z_remove_thread_from_ready_q>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1b15e:	68a8      	ldr	r0, [r5, #8]
   1b160:	4632      	mov	r2, r6
   1b162:	3018      	adds	r0, #24
   1b164:	4923      	ldr	r1, [pc, #140]	; (1b1f4 <z_tick_sleep+0x11c>)
   1b166:	f000 fc27 	bl	1b9b8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1b16a:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b16c:	a801      	add	r0, sp, #4
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1b16e:	7b53      	ldrb	r3, [r2, #13]
   1b170:	f043 0310 	orr.w	r3, r3, #16
   1b174:	7353      	strb	r3, [r2, #13]
   1b176:	f000 f993 	bl	1b4a0 <z_spin_unlock_valid>
   1b17a:	b968      	cbnz	r0, 1b198 <z_tick_sleep+0xc0>
   1b17c:	2374      	movs	r3, #116	; 0x74
   1b17e:	4a18      	ldr	r2, [pc, #96]	; (1b1e0 <z_tick_sleep+0x108>)
   1b180:	491d      	ldr	r1, [pc, #116]	; (1b1f8 <z_tick_sleep+0x120>)
   1b182:	4815      	ldr	r0, [pc, #84]	; (1b1d8 <z_tick_sleep+0x100>)
   1b184:	f001 fe18 	bl	1cdb8 <printk>
   1b188:	a901      	add	r1, sp, #4
   1b18a:	481c      	ldr	r0, [pc, #112]	; (1b1fc <z_tick_sleep+0x124>)
   1b18c:	f001 fe14 	bl	1cdb8 <printk>
   1b190:	2174      	movs	r1, #116	; 0x74
   1b192:	4813      	ldr	r0, [pc, #76]	; (1b1e0 <z_tick_sleep+0x108>)
   1b194:	f001 fe42 	bl	1ce1c <assert_post_action>
   1b198:	4638      	mov	r0, r7
   1b19a:	f7f2 fb47 	bl	d82c <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   1b19e:	68ab      	ldr	r3, [r5, #8]
   1b1a0:	7b5b      	ldrb	r3, [r3, #13]
   1b1a2:	06db      	lsls	r3, r3, #27
   1b1a4:	d50e      	bpl.n	1b1c4 <z_tick_sleep+0xec>
   1b1a6:	4916      	ldr	r1, [pc, #88]	; (1b200 <z_tick_sleep+0x128>)
   1b1a8:	f44f 6389 	mov.w	r3, #1096	; 0x448
   1b1ac:	4a09      	ldr	r2, [pc, #36]	; (1b1d4 <z_tick_sleep+0xfc>)
   1b1ae:	480a      	ldr	r0, [pc, #40]	; (1b1d8 <z_tick_sleep+0x100>)
   1b1b0:	f001 fe02 	bl	1cdb8 <printk>
   1b1b4:	4809      	ldr	r0, [pc, #36]	; (1b1dc <z_tick_sleep+0x104>)
   1b1b6:	f001 fdff 	bl	1cdb8 <printk>
   1b1ba:	f44f 6189 	mov.w	r1, #1096	; 0x448
   1b1be:	4805      	ldr	r0, [pc, #20]	; (1b1d4 <z_tick_sleep+0xfc>)
   1b1c0:	f001 fe2c 	bl	1ce1c <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
   1b1c4:	f003 fbf6 	bl	1e9b4 <z_tick_get_32>
   1b1c8:	1a24      	subs	r4, r4, r0
   1b1ca:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   1b1ce:	e79a      	b.n	1b106 <z_tick_sleep+0x2e>
   1b1d0:	000204b7 	.word	0x000204b7
   1b1d4:	0002054f 	.word	0x0002054f
   1b1d8:	0001f722 	.word	0x0001f722
   1b1dc:	0001fdcc 	.word	0x0001fdcc
   1b1e0:	0001f904 	.word	0x0001f904
   1b1e4:	0001f923 	.word	0x0001f923
   1b1e8:	0001f938 	.word	0x0001f938
   1b1ec:	20024e04 	.word	0x20024e04
   1b1f0:	20024e38 	.word	0x20024e38
   1b1f4:	0001a65d 	.word	0x0001a65d
   1b1f8:	0001f950 	.word	0x0001f950
   1b1fc:	0001f967 	.word	0x0001f967
   1b200:	000205c1 	.word	0x000205c1

0001b204 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
   1b204:	b538      	push	{r3, r4, r5, lr}
   1b206:	4604      	mov	r4, r0
   1b208:	f3ef 8305 	mrs	r3, IPSR
	s32_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1b20c:	b173      	cbz	r3, 1b22c <z_impl_k_sleep+0x28>
   1b20e:	4916      	ldr	r1, [pc, #88]	; (1b268 <z_impl_k_sleep+0x64>)
   1b210:	f240 4357 	movw	r3, #1111	; 0x457
   1b214:	4a15      	ldr	r2, [pc, #84]	; (1b26c <z_impl_k_sleep+0x68>)
   1b216:	4816      	ldr	r0, [pc, #88]	; (1b270 <z_impl_k_sleep+0x6c>)
   1b218:	f001 fdce 	bl	1cdb8 <printk>
   1b21c:	4815      	ldr	r0, [pc, #84]	; (1b274 <z_impl_k_sleep+0x70>)
   1b21e:	f001 fdcb 	bl	1cdb8 <printk>
   1b222:	f240 4157 	movw	r1, #1111	; 0x457
   1b226:	4811      	ldr	r0, [pc, #68]	; (1b26c <z_impl_k_sleep+0x68>)
   1b228:	f001 fdf8 	bl	1ce1c <assert_post_action>

	if (ms == K_FOREVER) {
   1b22c:	1c63      	adds	r3, r4, #1
   1b22e:	d105      	bne.n	1b23c <z_impl_k_sleep+0x38>
		k_thread_suspend(_current);
   1b230:	4b11      	ldr	r3, [pc, #68]	; (1b278 <z_impl_k_sleep+0x74>)
   1b232:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1b234:	f000 fa82 	bl	1b73c <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   1b238:	4620      	mov	r0, r4
   1b23a:	bd38      	pop	{r3, r4, r5, pc}
   1b23c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1b240:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b244:	2100      	movs	r1, #0
   1b246:	2300      	movs	r3, #0
   1b248:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b24c:	fbe5 0104 	umlal	r0, r1, r5, r4
   1b250:	f7f0 fff4 	bl	c23c <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
   1b254:	f7ff ff40 	bl	1b0d8 <z_tick_sleep>
		} else {
			return (t * to_hz + off) / from_hz;
   1b258:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1b25c:	fb80 0103 	smull	r0, r1, r0, r3
   1b260:	0bc4      	lsrs	r4, r0, #15
   1b262:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1b266:	e7e7      	b.n	1b238 <z_impl_k_sleep+0x34>
   1b268:	000204b7 	.word	0x000204b7
   1b26c:	0002054f 	.word	0x0002054f
   1b270:	0001f722 	.word	0x0001f722
   1b274:	0001fdcc 	.word	0x0001fdcc
   1b278:	20024e04 	.word	0x20024e04

0001b27c <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   1b27c:	4b01      	ldr	r3, [pc, #4]	; (1b284 <z_impl_k_current_get+0x8>)
   1b27e:	6898      	ldr	r0, [r3, #8]
   1b280:	4770      	bx	lr
   1b282:	bf00      	nop
   1b284:	20024e04 	.word	0x20024e04

0001b288 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1b288:	b570      	push	{r4, r5, r6, lr}
   1b28a:	4604      	mov	r4, r0
   1b28c:	f04f 0320 	mov.w	r3, #32
   1b290:	f3ef 8611 	mrs	r6, BASEPRI
   1b294:	f383 8811 	msr	BASEPRI, r3
   1b298:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b29c:	481a      	ldr	r0, [pc, #104]	; (1b308 <z_impl_k_sem_give+0x80>)
   1b29e:	f000 f8f1 	bl	1b484 <z_spin_lock_valid>
   1b2a2:	b968      	cbnz	r0, 1b2c0 <z_impl_k_sem_give+0x38>
   1b2a4:	234a      	movs	r3, #74	; 0x4a
   1b2a6:	4a19      	ldr	r2, [pc, #100]	; (1b30c <z_impl_k_sem_give+0x84>)
   1b2a8:	4919      	ldr	r1, [pc, #100]	; (1b310 <z_impl_k_sem_give+0x88>)
   1b2aa:	481a      	ldr	r0, [pc, #104]	; (1b314 <z_impl_k_sem_give+0x8c>)
   1b2ac:	f001 fd84 	bl	1cdb8 <printk>
   1b2b0:	4915      	ldr	r1, [pc, #84]	; (1b308 <z_impl_k_sem_give+0x80>)
   1b2b2:	4819      	ldr	r0, [pc, #100]	; (1b318 <z_impl_k_sem_give+0x90>)
   1b2b4:	f001 fd80 	bl	1cdb8 <printk>
   1b2b8:	214a      	movs	r1, #74	; 0x4a
   1b2ba:	4814      	ldr	r0, [pc, #80]	; (1b30c <z_impl_k_sem_give+0x84>)
   1b2bc:	f001 fdae 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1b2c0:	4811      	ldr	r0, [pc, #68]	; (1b308 <z_impl_k_sem_give+0x80>)
   1b2c2:	f000 f8fd 	bl	1b4c0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   1b2c6:	4620      	mov	r0, r4
   1b2c8:	f7ff fdbe 	bl	1ae48 <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   1b2cc:	4605      	mov	r5, r0
   1b2ce:	b170      	cbz	r0, 1b2ee <z_impl_k_sem_give+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b2d0:	7b43      	ldrb	r3, [r0, #13]
   1b2d2:	06db      	lsls	r3, r3, #27
   1b2d4:	d103      	bne.n	1b2de <z_impl_k_sem_give+0x56>
	if (z_is_thread_ready(thread)) {
   1b2d6:	6983      	ldr	r3, [r0, #24]
   1b2d8:	b90b      	cbnz	r3, 1b2de <z_impl_k_sem_give+0x56>
		z_add_thread_to_ready_q(thread);
   1b2da:	f7ff f93f 	bl	1a55c <z_add_thread_to_ready_q>
   1b2de:	2300      	movs	r3, #0
   1b2e0:	66ab      	str	r3, [r5, #104]	; 0x68
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   1b2e2:	4631      	mov	r1, r6
}
   1b2e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   1b2e8:	4807      	ldr	r0, [pc, #28]	; (1b308 <z_impl_k_sem_give+0x80>)
   1b2ea:	f7fe bf4d 	b.w	1a188 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1b2ee:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1b2f2:	429a      	cmp	r2, r3
   1b2f4:	bf18      	it	ne
   1b2f6:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1b2f8:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1b2fa:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1b2fc:	f104 0010 	add.w	r0, r4, #16
   1b300:	f003 fbb3 	bl	1ea6a <z_handle_obj_poll_events>
   1b304:	e7ed      	b.n	1b2e2 <z_impl_k_sem_give+0x5a>
   1b306:	bf00      	nop
   1b308:	20024e48 	.word	0x20024e48
   1b30c:	0001f904 	.word	0x0001f904
   1b310:	0001f923 	.word	0x0001f923
   1b314:	0001f722 	.word	0x0001f722
   1b318:	0001f938 	.word	0x0001f938

0001b31c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   1b31c:	b570      	push	{r4, r5, r6, lr}
   1b31e:	4605      	mov	r5, r0
   1b320:	460e      	mov	r6, r1
   1b322:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");
   1b326:	b16b      	cbz	r3, 1b344 <z_impl_k_sem_take+0x28>
   1b328:	b161      	cbz	r1, 1b344 <z_impl_k_sem_take+0x28>
   1b32a:	4934      	ldr	r1, [pc, #208]	; (1b3fc <z_impl_k_sem_take+0xe0>)
   1b32c:	238c      	movs	r3, #140	; 0x8c
   1b32e:	4a34      	ldr	r2, [pc, #208]	; (1b400 <z_impl_k_sem_take+0xe4>)
   1b330:	4834      	ldr	r0, [pc, #208]	; (1b404 <z_impl_k_sem_take+0xe8>)
   1b332:	f001 fd41 	bl	1cdb8 <printk>
   1b336:	4834      	ldr	r0, [pc, #208]	; (1b408 <z_impl_k_sem_take+0xec>)
   1b338:	f001 fd3e 	bl	1cdb8 <printk>
   1b33c:	218c      	movs	r1, #140	; 0x8c
   1b33e:	4830      	ldr	r0, [pc, #192]	; (1b400 <z_impl_k_sem_take+0xe4>)
   1b340:	f001 fd6c 	bl	1ce1c <assert_post_action>
   1b344:	f04f 0320 	mov.w	r3, #32
   1b348:	f3ef 8411 	mrs	r4, BASEPRI
   1b34c:	f383 8811 	msr	BASEPRI, r3
   1b350:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b354:	482d      	ldr	r0, [pc, #180]	; (1b40c <z_impl_k_sem_take+0xf0>)
   1b356:	f000 f895 	bl	1b484 <z_spin_lock_valid>
   1b35a:	b968      	cbnz	r0, 1b378 <z_impl_k_sem_take+0x5c>
   1b35c:	234a      	movs	r3, #74	; 0x4a
   1b35e:	4a2c      	ldr	r2, [pc, #176]	; (1b410 <z_impl_k_sem_take+0xf4>)
   1b360:	492c      	ldr	r1, [pc, #176]	; (1b414 <z_impl_k_sem_take+0xf8>)
   1b362:	4828      	ldr	r0, [pc, #160]	; (1b404 <z_impl_k_sem_take+0xe8>)
   1b364:	f001 fd28 	bl	1cdb8 <printk>
   1b368:	4928      	ldr	r1, [pc, #160]	; (1b40c <z_impl_k_sem_take+0xf0>)
   1b36a:	482b      	ldr	r0, [pc, #172]	; (1b418 <z_impl_k_sem_take+0xfc>)
   1b36c:	f001 fd24 	bl	1cdb8 <printk>
   1b370:	214a      	movs	r1, #74	; 0x4a
   1b372:	4827      	ldr	r0, [pc, #156]	; (1b410 <z_impl_k_sem_take+0xf4>)
   1b374:	f001 fd52 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1b378:	4824      	ldr	r0, [pc, #144]	; (1b40c <z_impl_k_sem_take+0xf0>)
   1b37a:	f000 f8a1 	bl	1b4c0 <z_spin_lock_set_owner>

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   1b37e:	68ab      	ldr	r3, [r5, #8]
   1b380:	b1cb      	cbz	r3, 1b3b6 <z_impl_k_sem_take+0x9a>
		sem->count--;
   1b382:	3b01      	subs	r3, #1
   1b384:	60ab      	str	r3, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b386:	4821      	ldr	r0, [pc, #132]	; (1b40c <z_impl_k_sem_take+0xf0>)
   1b388:	f000 f88a 	bl	1b4a0 <z_spin_unlock_valid>
   1b38c:	b968      	cbnz	r0, 1b3aa <z_impl_k_sem_take+0x8e>
   1b38e:	235d      	movs	r3, #93	; 0x5d
   1b390:	4a1f      	ldr	r2, [pc, #124]	; (1b410 <z_impl_k_sem_take+0xf4>)
   1b392:	4922      	ldr	r1, [pc, #136]	; (1b41c <z_impl_k_sem_take+0x100>)
   1b394:	481b      	ldr	r0, [pc, #108]	; (1b404 <z_impl_k_sem_take+0xe8>)
   1b396:	f001 fd0f 	bl	1cdb8 <printk>
   1b39a:	491c      	ldr	r1, [pc, #112]	; (1b40c <z_impl_k_sem_take+0xf0>)
   1b39c:	4820      	ldr	r0, [pc, #128]	; (1b420 <z_impl_k_sem_take+0x104>)
   1b39e:	f001 fd0b 	bl	1cdb8 <printk>
   1b3a2:	215d      	movs	r1, #93	; 0x5d
   1b3a4:	481a      	ldr	r0, [pc, #104]	; (1b410 <z_impl_k_sem_take+0xf4>)
   1b3a6:	f001 fd39 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1b3aa:	f384 8811 	msr	BASEPRI, r4
   1b3ae:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1b3b2:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1b3b4:	bd70      	pop	{r4, r5, r6, pc}
	if (timeout == K_NO_WAIT) {
   1b3b6:	b9c6      	cbnz	r6, 1b3ea <z_impl_k_sem_take+0xce>
   1b3b8:	4814      	ldr	r0, [pc, #80]	; (1b40c <z_impl_k_sem_take+0xf0>)
   1b3ba:	f000 f871 	bl	1b4a0 <z_spin_unlock_valid>
   1b3be:	b968      	cbnz	r0, 1b3dc <z_impl_k_sem_take+0xc0>
   1b3c0:	235d      	movs	r3, #93	; 0x5d
   1b3c2:	4a13      	ldr	r2, [pc, #76]	; (1b410 <z_impl_k_sem_take+0xf4>)
   1b3c4:	4915      	ldr	r1, [pc, #84]	; (1b41c <z_impl_k_sem_take+0x100>)
   1b3c6:	480f      	ldr	r0, [pc, #60]	; (1b404 <z_impl_k_sem_take+0xe8>)
   1b3c8:	f001 fcf6 	bl	1cdb8 <printk>
   1b3cc:	490f      	ldr	r1, [pc, #60]	; (1b40c <z_impl_k_sem_take+0xf0>)
   1b3ce:	4814      	ldr	r0, [pc, #80]	; (1b420 <z_impl_k_sem_take+0x104>)
   1b3d0:	f001 fcf2 	bl	1cdb8 <printk>
   1b3d4:	215d      	movs	r1, #93	; 0x5d
   1b3d6:	480e      	ldr	r0, [pc, #56]	; (1b410 <z_impl_k_sem_take+0xf4>)
   1b3d8:	f001 fd20 	bl	1ce1c <assert_post_action>
   1b3dc:	f384 8811 	msr	BASEPRI, r4
   1b3e0:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1b3e4:	f06f 000f 	mvn.w	r0, #15
		goto out;
   1b3e8:	e7e4      	b.n	1b3b4 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1b3ea:	4633      	mov	r3, r6
   1b3ec:	462a      	mov	r2, r5
   1b3ee:	4621      	mov	r1, r4
}
   1b3f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1b3f4:	4805      	ldr	r0, [pc, #20]	; (1b40c <z_impl_k_sem_take+0xf0>)
   1b3f6:	f7ff bc6b 	b.w	1acd0 <z_pend_curr>
   1b3fa:	bf00      	nop
   1b3fc:	00020612 	.word	0x00020612
   1b400:	000205f9 	.word	0x000205f9
   1b404:	0001f722 	.word	0x0001f722
   1b408:	0001fdcc 	.word	0x0001fdcc
   1b40c:	20024e48 	.word	0x20024e48
   1b410:	0001f904 	.word	0x0001f904
   1b414:	0001f923 	.word	0x0001f923
   1b418:	0001f938 	.word	0x0001f938
   1b41c:	0001f950 	.word	0x0001f950
   1b420:	0001f967 	.word	0x0001f967

0001b424 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   1b424:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1b426:	4c08      	ldr	r4, [pc, #32]	; (1b448 <k_sys_work_q_init+0x24>)
   1b428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b42c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1b430:	4906      	ldr	r1, [pc, #24]	; (1b44c <k_sys_work_q_init+0x28>)
   1b432:	4620      	mov	r0, r4
   1b434:	f000 f9d6 	bl	1b7e4 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1b438:	4905      	ldr	r1, [pc, #20]	; (1b450 <k_sys_work_q_init+0x2c>)
   1b43a:	f104 0014 	add.w	r0, r4, #20
   1b43e:	f003 fa44 	bl	1e8ca <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1b442:	2000      	movs	r0, #0
   1b444:	bd10      	pop	{r4, pc}
   1b446:	bf00      	nop
   1b448:	20024e4c 	.word	0x20024e4c
   1b44c:	200291c8 	.word	0x200291c8
   1b450:	0002063e 	.word	0x0002063e

0001b454 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   1b454:	b530      	push	{r4, r5, lr}
   1b456:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b458:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   1b45a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b45c:	9504      	str	r5, [sp, #16]
   1b45e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1b460:	9503      	str	r5, [sp, #12]
   1b462:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1b464:	9502      	str	r5, [sp, #8]
   1b466:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1b468:	9501      	str	r5, [sp, #4]
   1b46a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1b46c:	9500      	str	r5, [sp, #0]
   1b46e:	f7f2 fab9 	bl	d9e4 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1b472:	4b03      	ldr	r3, [pc, #12]	; (1b480 <z_setup_new_thread+0x2c>)
   1b474:	689b      	ldr	r3, [r3, #8]
   1b476:	b103      	cbz	r3, 1b47a <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   1b478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1b47a:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   1b47c:	b007      	add	sp, #28
   1b47e:	bd30      	pop	{r4, r5, pc}
   1b480:	20024e04 	.word	0x20024e04

0001b484 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   1b484:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   1b486:	b138      	cbz	r0, 1b498 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
   1b488:	4b04      	ldr	r3, [pc, #16]	; (1b49c <z_spin_lock_valid+0x18>)
   1b48a:	f000 0003 	and.w	r0, r0, #3
   1b48e:	7d1b      	ldrb	r3, [r3, #20]
   1b490:	1ac0      	subs	r0, r0, r3
   1b492:	bf18      	it	ne
   1b494:	2001      	movne	r0, #1
   1b496:	4770      	bx	lr
			return false;
		}
	}
	return true;
   1b498:	2001      	movs	r0, #1
}
   1b49a:	4770      	bx	lr
   1b49c:	20024e04 	.word	0x20024e04

0001b4a0 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1b4a0:	4a06      	ldr	r2, [pc, #24]	; (1b4bc <z_spin_unlock_valid+0x1c>)
   1b4a2:	7d11      	ldrb	r1, [r2, #20]
   1b4a4:	6893      	ldr	r3, [r2, #8]
   1b4a6:	6802      	ldr	r2, [r0, #0]
   1b4a8:	430b      	orrs	r3, r1
   1b4aa:	429a      	cmp	r2, r3
   1b4ac:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   1b4b0:	bf06      	itte	eq
   1b4b2:	6003      	streq	r3, [r0, #0]
	return true;
   1b4b4:	2001      	moveq	r0, #1
		return false;
   1b4b6:	4618      	movne	r0, r3
}
   1b4b8:	4770      	bx	lr
   1b4ba:	bf00      	nop
   1b4bc:	20024e04 	.word	0x20024e04

0001b4c0 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   1b4c0:	4a02      	ldr	r2, [pc, #8]	; (1b4cc <z_spin_lock_set_owner+0xc>)
   1b4c2:	7d11      	ldrb	r1, [r2, #20]
   1b4c4:	6893      	ldr	r3, [r2, #8]
   1b4c6:	430b      	orrs	r3, r1
   1b4c8:	6003      	str	r3, [r0, #0]
}
   1b4ca:	4770      	bx	lr
   1b4cc:	20024e04 	.word	0x20024e04

0001b4d0 <z_impl_k_thread_start>:
{
   1b4d0:	b538      	push	{r3, r4, r5, lr}
   1b4d2:	4604      	mov	r4, r0
	__asm__ volatile(
   1b4d4:	f04f 0320 	mov.w	r3, #32
   1b4d8:	f3ef 8511 	mrs	r5, BASEPRI
   1b4dc:	f383 8811 	msr	BASEPRI, r3
   1b4e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b4e4:	481f      	ldr	r0, [pc, #124]	; (1b564 <z_impl_k_thread_start+0x94>)
   1b4e6:	f7ff ffcd 	bl	1b484 <z_spin_lock_valid>
   1b4ea:	b968      	cbnz	r0, 1b508 <z_impl_k_thread_start+0x38>
   1b4ec:	234a      	movs	r3, #74	; 0x4a
   1b4ee:	4a1e      	ldr	r2, [pc, #120]	; (1b568 <z_impl_k_thread_start+0x98>)
   1b4f0:	491e      	ldr	r1, [pc, #120]	; (1b56c <z_impl_k_thread_start+0x9c>)
   1b4f2:	481f      	ldr	r0, [pc, #124]	; (1b570 <z_impl_k_thread_start+0xa0>)
   1b4f4:	f001 fc60 	bl	1cdb8 <printk>
   1b4f8:	491a      	ldr	r1, [pc, #104]	; (1b564 <z_impl_k_thread_start+0x94>)
   1b4fa:	481e      	ldr	r0, [pc, #120]	; (1b574 <z_impl_k_thread_start+0xa4>)
   1b4fc:	f001 fc5c 	bl	1cdb8 <printk>
   1b500:	214a      	movs	r1, #74	; 0x4a
   1b502:	4819      	ldr	r0, [pc, #100]	; (1b568 <z_impl_k_thread_start+0x98>)
   1b504:	f001 fc8a 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1b508:	4816      	ldr	r0, [pc, #88]	; (1b564 <z_impl_k_thread_start+0x94>)
   1b50a:	f7ff ffd9 	bl	1b4c0 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   1b50e:	7b63      	ldrb	r3, [r4, #13]
   1b510:	075a      	lsls	r2, r3, #29
   1b512:	d416      	bmi.n	1b542 <z_impl_k_thread_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b514:	4813      	ldr	r0, [pc, #76]	; (1b564 <z_impl_k_thread_start+0x94>)
   1b516:	f7ff ffc3 	bl	1b4a0 <z_spin_unlock_valid>
   1b51a:	b968      	cbnz	r0, 1b538 <z_impl_k_thread_start+0x68>
   1b51c:	235d      	movs	r3, #93	; 0x5d
   1b51e:	4a12      	ldr	r2, [pc, #72]	; (1b568 <z_impl_k_thread_start+0x98>)
   1b520:	4915      	ldr	r1, [pc, #84]	; (1b578 <z_impl_k_thread_start+0xa8>)
   1b522:	4813      	ldr	r0, [pc, #76]	; (1b570 <z_impl_k_thread_start+0xa0>)
   1b524:	f001 fc48 	bl	1cdb8 <printk>
   1b528:	490e      	ldr	r1, [pc, #56]	; (1b564 <z_impl_k_thread_start+0x94>)
   1b52a:	4814      	ldr	r0, [pc, #80]	; (1b57c <z_impl_k_thread_start+0xac>)
   1b52c:	f001 fc44 	bl	1cdb8 <printk>
   1b530:	215d      	movs	r1, #93	; 0x5d
   1b532:	480d      	ldr	r0, [pc, #52]	; (1b568 <z_impl_k_thread_start+0x98>)
   1b534:	f001 fc72 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1b538:	f385 8811 	msr	BASEPRI, r5
   1b53c:	f3bf 8f6f 	isb	sy
}
   1b540:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b542:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b546:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b54a:	7362      	strb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b54c:	d104      	bne.n	1b558 <z_impl_k_thread_start+0x88>
	if (z_is_thread_ready(thread)) {
   1b54e:	69a3      	ldr	r3, [r4, #24]
   1b550:	b913      	cbnz	r3, 1b558 <z_impl_k_thread_start+0x88>
		z_add_thread_to_ready_q(thread);
   1b552:	4620      	mov	r0, r4
   1b554:	f7ff f802 	bl	1a55c <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   1b558:	4629      	mov	r1, r5
}
   1b55a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1b55e:	4801      	ldr	r0, [pc, #4]	; (1b564 <z_impl_k_thread_start+0x94>)
   1b560:	f7fe be12 	b.w	1a188 <z_reschedule>
   1b564:	20024f10 	.word	0x20024f10
   1b568:	0001f904 	.word	0x0001f904
   1b56c:	0001f923 	.word	0x0001f923
   1b570:	0001f722 	.word	0x0001f722
   1b574:	0001f938 	.word	0x0001f938
   1b578:	0001f950 	.word	0x0001f950
   1b57c:	0001f967 	.word	0x0001f967

0001b580 <z_impl_k_thread_create>:
{
   1b580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b584:	b086      	sub	sp, #24
   1b586:	4604      	mov	r4, r0
   1b588:	460e      	mov	r6, r1
   1b58a:	4617      	mov	r7, r2
   1b58c:	4698      	mov	r8, r3
   1b58e:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1b590:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   1b594:	b173      	cbz	r3, 1b5b4 <z_impl_k_thread_create+0x34>
   1b596:	491f      	ldr	r1, [pc, #124]	; (1b614 <z_impl_k_thread_create+0x94>)
   1b598:	f240 2357 	movw	r3, #599	; 0x257
   1b59c:	4a1e      	ldr	r2, [pc, #120]	; (1b618 <z_impl_k_thread_create+0x98>)
   1b59e:	481f      	ldr	r0, [pc, #124]	; (1b61c <z_impl_k_thread_create+0x9c>)
   1b5a0:	f001 fc0a 	bl	1cdb8 <printk>
   1b5a4:	481e      	ldr	r0, [pc, #120]	; (1b620 <z_impl_k_thread_create+0xa0>)
   1b5a6:	f001 fc07 	bl	1cdb8 <printk>
   1b5aa:	f240 2157 	movw	r1, #599	; 0x257
   1b5ae:	481a      	ldr	r0, [pc, #104]	; (1b618 <z_impl_k_thread_create+0x98>)
   1b5b0:	f001 fc34 	bl	1ce1c <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b5b4:	2300      	movs	r3, #0
   1b5b6:	9305      	str	r3, [sp, #20]
   1b5b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b5ba:	463a      	mov	r2, r7
   1b5bc:	9304      	str	r3, [sp, #16]
   1b5be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b5c0:	4631      	mov	r1, r6
   1b5c2:	9303      	str	r3, [sp, #12]
   1b5c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b5c6:	4620      	mov	r0, r4
   1b5c8:	9302      	str	r3, [sp, #8]
   1b5ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b5cc:	9301      	str	r3, [sp, #4]
   1b5ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b5d0:	9300      	str	r3, [sp, #0]
   1b5d2:	4643      	mov	r3, r8
   1b5d4:	f7ff ff3e 	bl	1b454 <z_setup_new_thread>
	if (delay != K_FOREVER) {
   1b5d8:	1c6b      	adds	r3, r5, #1
   1b5da:	d003      	beq.n	1b5e4 <z_impl_k_thread_create+0x64>
	if (delay == 0) {
   1b5dc:	b935      	cbnz	r5, 1b5ec <z_impl_k_thread_create+0x6c>
	z_impl_k_thread_start(thread);
   1b5de:	4620      	mov	r0, r4
   1b5e0:	f7ff ff76 	bl	1b4d0 <z_impl_k_thread_start>
}
   1b5e4:	4620      	mov	r0, r4
   1b5e6:	b006      	add	sp, #24
   1b5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
   1b5ec:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1b5f0:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b5f4:	2100      	movs	r1, #0
   1b5f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b5fa:	2300      	movs	r3, #0
   1b5fc:	fbe6 0105 	umlal	r0, r1, r6, r5
   1b600:	f7f0 fe1c 	bl	c23c <__aeabi_uldivmod>
   1b604:	4907      	ldr	r1, [pc, #28]	; (1b624 <z_impl_k_thread_create+0xa4>)
   1b606:	1c42      	adds	r2, r0, #1
   1b608:	f104 0018 	add.w	r0, r4, #24
   1b60c:	f000 f9d4 	bl	1b9b8 <z_add_timeout>
   1b610:	e7e8      	b.n	1b5e4 <z_impl_k_thread_create+0x64>
   1b612:	bf00      	nop
   1b614:	000204b7 	.word	0x000204b7
   1b618:	00020647 	.word	0x00020647
   1b61c:	0001f722 	.word	0x0001f722
   1b620:	00020663 	.word	0x00020663
   1b624:	0001a65d 	.word	0x0001a65d

0001b628 <z_init_static_threads>:
{
   1b628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1b62c:	4f3c      	ldr	r7, [pc, #240]	; (1b720 <z_init_static_threads+0xf8>)
   1b62e:	4d3d      	ldr	r5, [pc, #244]	; (1b724 <z_init_static_threads+0xfc>)
   1b630:	463e      	mov	r6, r7
   1b632:	f8df 8100 	ldr.w	r8, [pc, #256]	; 1b734 <z_init_static_threads+0x10c>
{
   1b636:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   1b638:	42bd      	cmp	r5, r7
   1b63a:	d90e      	bls.n	1b65a <z_init_static_threads+0x32>
   1b63c:	493a      	ldr	r1, [pc, #232]	; (1b728 <z_init_static_threads+0x100>)
   1b63e:	f240 23e7 	movw	r3, #743	; 0x2e7
   1b642:	4642      	mov	r2, r8
   1b644:	4839      	ldr	r0, [pc, #228]	; (1b72c <z_init_static_threads+0x104>)
   1b646:	f001 fbb7 	bl	1cdb8 <printk>
   1b64a:	4839      	ldr	r0, [pc, #228]	; (1b730 <z_init_static_threads+0x108>)
   1b64c:	f001 fbb4 	bl	1cdb8 <printk>
   1b650:	f240 21e7 	movw	r1, #743	; 0x2e7
   1b654:	4640      	mov	r0, r8
   1b656:	f001 fbe1 	bl	1ce1c <assert_post_action>
   1b65a:	42b5      	cmp	r5, r6
   1b65c:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1b660:	d31f      	bcc.n	1b6a2 <z_init_static_threads+0x7a>
	k_sched_lock();
   1b662:	f7fe fdcd 	bl	1a200 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1b666:	4c2f      	ldr	r4, [pc, #188]	; (1b724 <z_init_static_threads+0xfc>)
   1b668:	4d32      	ldr	r5, [pc, #200]	; (1b734 <z_init_static_threads+0x10c>)
   1b66a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 1b728 <z_init_static_threads+0x100>
   1b66e:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 1b72c <z_init_static_threads+0x104>
   1b672:	42b4      	cmp	r4, r6
   1b674:	d90e      	bls.n	1b694 <z_init_static_threads+0x6c>
   1b676:	4641      	mov	r1, r8
   1b678:	f240 3306 	movw	r3, #774	; 0x306
   1b67c:	462a      	mov	r2, r5
   1b67e:	4648      	mov	r0, r9
   1b680:	f001 fb9a 	bl	1cdb8 <printk>
   1b684:	482a      	ldr	r0, [pc, #168]	; (1b730 <z_init_static_threads+0x108>)
   1b686:	f001 fb97 	bl	1cdb8 <printk>
   1b68a:	f240 3106 	movw	r1, #774	; 0x306
   1b68e:	4628      	mov	r0, r5
   1b690:	f001 fbc4 	bl	1ce1c <assert_post_action>
   1b694:	42b4      	cmp	r4, r6
   1b696:	d321      	bcc.n	1b6dc <z_init_static_threads+0xb4>
}
   1b698:	b007      	add	sp, #28
   1b69a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1b69e:	f7fe bee1 	b.w	1a464 <k_sched_unlock>
		z_setup_new_thread(
   1b6a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1b6a6:	9305      	str	r3, [sp, #20]
   1b6a8:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1b6ac:	9304      	str	r3, [sp, #16]
   1b6ae:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1b6b2:	9303      	str	r3, [sp, #12]
   1b6b4:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1b6b8:	9302      	str	r3, [sp, #8]
   1b6ba:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1b6be:	9301      	str	r3, [sp, #4]
   1b6c0:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1b6c4:	9300      	str	r3, [sp, #0]
   1b6c6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1b6ca:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1b6ce:	f7ff fec1 	bl	1b454 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1b6d2:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1b6d6:	64dd      	str	r5, [r3, #76]	; 0x4c
   1b6d8:	4625      	mov	r5, r4
   1b6da:	e7ad      	b.n	1b638 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_FOREVER) {
   1b6dc:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   1b6e0:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
   1b6e4:	d006      	beq.n	1b6f4 <z_init_static_threads+0xcc>
			schedule_new_thread(thread_data->init_thread,
   1b6e6:	6827      	ldr	r7, [r4, #0]
	if (delay == 0) {
   1b6e8:	f1bc 0f00 	cmp.w	ip, #0
   1b6ec:	d104      	bne.n	1b6f8 <z_init_static_threads+0xd0>
   1b6ee:	4638      	mov	r0, r7
   1b6f0:	f7ff feee 	bl	1b4d0 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1b6f4:	3430      	adds	r4, #48	; 0x30
   1b6f6:	e7bc      	b.n	1b672 <z_init_static_threads+0x4a>
   1b6f8:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   1b6fc:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b700:	2100      	movs	r1, #0
   1b702:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b706:	2300      	movs	r3, #0
   1b708:	fbee 010c 	umlal	r0, r1, lr, ip
   1b70c:	f7f0 fd96 	bl	c23c <__aeabi_uldivmod>
   1b710:	4909      	ldr	r1, [pc, #36]	; (1b738 <z_init_static_threads+0x110>)
   1b712:	1c42      	adds	r2, r0, #1
   1b714:	f107 0018 	add.w	r0, r7, #24
   1b718:	f000 f94e 	bl	1b9b8 <z_add_timeout>
   1b71c:	e7ea      	b.n	1b6f4 <z_init_static_threads+0xcc>
   1b71e:	bf00      	nop
   1b720:	2002c540 	.word	0x2002c540
   1b724:	2002c540 	.word	0x2002c540
   1b728:	00020688 	.word	0x00020688
   1b72c:	0001f722 	.word	0x0001f722
   1b730:	000203aa 	.word	0x000203aa
   1b734:	00020647 	.word	0x00020647
   1b738:	0001a65d 	.word	0x0001a65d

0001b73c <z_impl_k_thread_suspend>:
{
   1b73c:	b538      	push	{r3, r4, r5, lr}
   1b73e:	4605      	mov	r5, r0
	__asm__ volatile(
   1b740:	f04f 0320 	mov.w	r3, #32
   1b744:	f3ef 8411 	mrs	r4, BASEPRI
   1b748:	f383 8811 	msr	BASEPRI, r3
   1b74c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b750:	481c      	ldr	r0, [pc, #112]	; (1b7c4 <z_impl_k_thread_suspend+0x88>)
   1b752:	f7ff fe97 	bl	1b484 <z_spin_lock_valid>
   1b756:	b968      	cbnz	r0, 1b774 <z_impl_k_thread_suspend+0x38>
   1b758:	234a      	movs	r3, #74	; 0x4a
   1b75a:	4a1b      	ldr	r2, [pc, #108]	; (1b7c8 <z_impl_k_thread_suspend+0x8c>)
   1b75c:	491b      	ldr	r1, [pc, #108]	; (1b7cc <z_impl_k_thread_suspend+0x90>)
   1b75e:	481c      	ldr	r0, [pc, #112]	; (1b7d0 <z_impl_k_thread_suspend+0x94>)
   1b760:	f001 fb2a 	bl	1cdb8 <printk>
   1b764:	4917      	ldr	r1, [pc, #92]	; (1b7c4 <z_impl_k_thread_suspend+0x88>)
   1b766:	481b      	ldr	r0, [pc, #108]	; (1b7d4 <z_impl_k_thread_suspend+0x98>)
   1b768:	f001 fb26 	bl	1cdb8 <printk>
   1b76c:	214a      	movs	r1, #74	; 0x4a
   1b76e:	4816      	ldr	r0, [pc, #88]	; (1b7c8 <z_impl_k_thread_suspend+0x8c>)
   1b770:	f001 fb54 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1b774:	4813      	ldr	r0, [pc, #76]	; (1b7c4 <z_impl_k_thread_suspend+0x88>)
   1b776:	f7ff fea3 	bl	1b4c0 <z_spin_lock_set_owner>
	z_thread_single_suspend(thread);
   1b77a:	4628      	mov	r0, r5
   1b77c:	f7ff f89c 	bl	1a8b8 <z_thread_single_suspend>
	if (thread == _current) {
   1b780:	4b15      	ldr	r3, [pc, #84]	; (1b7d8 <z_impl_k_thread_suspend+0x9c>)
   1b782:	689b      	ldr	r3, [r3, #8]
   1b784:	42ab      	cmp	r3, r5
   1b786:	d105      	bne.n	1b794 <z_impl_k_thread_suspend+0x58>
		z_reschedule(&lock, key);
   1b788:	4621      	mov	r1, r4
}
   1b78a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   1b78e:	480d      	ldr	r0, [pc, #52]	; (1b7c4 <z_impl_k_thread_suspend+0x88>)
   1b790:	f7fe bcfa 	b.w	1a188 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b794:	480b      	ldr	r0, [pc, #44]	; (1b7c4 <z_impl_k_thread_suspend+0x88>)
   1b796:	f7ff fe83 	bl	1b4a0 <z_spin_unlock_valid>
   1b79a:	b968      	cbnz	r0, 1b7b8 <z_impl_k_thread_suspend+0x7c>
   1b79c:	235d      	movs	r3, #93	; 0x5d
   1b79e:	4a0a      	ldr	r2, [pc, #40]	; (1b7c8 <z_impl_k_thread_suspend+0x8c>)
   1b7a0:	490e      	ldr	r1, [pc, #56]	; (1b7dc <z_impl_k_thread_suspend+0xa0>)
   1b7a2:	480b      	ldr	r0, [pc, #44]	; (1b7d0 <z_impl_k_thread_suspend+0x94>)
   1b7a4:	f001 fb08 	bl	1cdb8 <printk>
   1b7a8:	4906      	ldr	r1, [pc, #24]	; (1b7c4 <z_impl_k_thread_suspend+0x88>)
   1b7aa:	480d      	ldr	r0, [pc, #52]	; (1b7e0 <z_impl_k_thread_suspend+0xa4>)
   1b7ac:	f001 fb04 	bl	1cdb8 <printk>
   1b7b0:	215d      	movs	r1, #93	; 0x5d
   1b7b2:	4805      	ldr	r0, [pc, #20]	; (1b7c8 <z_impl_k_thread_suspend+0x8c>)
   1b7b4:	f001 fb32 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1b7b8:	f384 8811 	msr	BASEPRI, r4
   1b7bc:	f3bf 8f6f 	isb	sy
}
   1b7c0:	bd38      	pop	{r3, r4, r5, pc}
   1b7c2:	bf00      	nop
   1b7c4:	20024f10 	.word	0x20024f10
   1b7c8:	0001f904 	.word	0x0001f904
   1b7cc:	0001f923 	.word	0x0001f923
   1b7d0:	0001f722 	.word	0x0001f722
   1b7d4:	0001f938 	.word	0x0001f938
   1b7d8:	20024e04 	.word	0x20024e04
   1b7dc:	0001f950 	.word	0x0001f950
   1b7e0:	0001f967 	.word	0x0001f967

0001b7e4 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1b7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b7e8:	4605      	mov	r5, r0
   1b7ea:	b086      	sub	sp, #24
   1b7ec:	460e      	mov	r6, r1
   1b7ee:	4617      	mov	r7, r2
   1b7f0:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   1b7f2:	f003 f802 	bl	1e7fa <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1b7f6:	f105 0414 	add.w	r4, r5, #20
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1b7fa:	2000      	movs	r0, #0
   1b7fc:	4b09      	ldr	r3, [pc, #36]	; (1b824 <k_work_q_start+0x40>)
   1b7fe:	e9cd 0004 	strd	r0, r0, [sp, #16]
   1b802:	e9cd 0802 	strd	r0, r8, [sp, #8]
   1b806:	e9cd 5000 	strd	r5, r0, [sp]
   1b80a:	463a      	mov	r2, r7
   1b80c:	4631      	mov	r1, r6
   1b80e:	4620      	mov	r0, r4
   1b810:	f7ff feb6 	bl	1b580 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1b814:	4620      	mov	r0, r4
   1b816:	4904      	ldr	r1, [pc, #16]	; (1b828 <k_work_q_start+0x44>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1b818:	b006      	add	sp, #24
   1b81a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b81e:	f003 b854 	b.w	1e8ca <z_impl_k_thread_name_set>
   1b822:	bf00      	nop
   1b824:	0001cde7 	.word	0x0001cde7
   1b828:	000206b5 	.word	0x000206b5

0001b82c <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   s32_t delay)
{
   1b82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b830:	4606      	mov	r6, r0
   1b832:	460d      	mov	r5, r1
   1b834:	4690      	mov	r8, r2
	__asm__ volatile(
   1b836:	f04f 0320 	mov.w	r3, #32
   1b83a:	f3ef 8711 	mrs	r7, BASEPRI
   1b83e:	f383 8811 	msr	BASEPRI, r3
   1b842:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b846:	4837      	ldr	r0, [pc, #220]	; (1b924 <k_delayed_work_submit_to_queue+0xf8>)
   1b848:	f7ff fe1c 	bl	1b484 <z_spin_lock_valid>
   1b84c:	b968      	cbnz	r0, 1b86a <k_delayed_work_submit_to_queue+0x3e>
   1b84e:	234a      	movs	r3, #74	; 0x4a
   1b850:	4a35      	ldr	r2, [pc, #212]	; (1b928 <k_delayed_work_submit_to_queue+0xfc>)
   1b852:	4936      	ldr	r1, [pc, #216]	; (1b92c <k_delayed_work_submit_to_queue+0x100>)
   1b854:	4836      	ldr	r0, [pc, #216]	; (1b930 <k_delayed_work_submit_to_queue+0x104>)
   1b856:	f001 faaf 	bl	1cdb8 <printk>
   1b85a:	4932      	ldr	r1, [pc, #200]	; (1b924 <k_delayed_work_submit_to_queue+0xf8>)
   1b85c:	4835      	ldr	r0, [pc, #212]	; (1b934 <k_delayed_work_submit_to_queue+0x108>)
   1b85e:	f001 faab 	bl	1cdb8 <printk>
   1b862:	214a      	movs	r1, #74	; 0x4a
   1b864:	4830      	ldr	r0, [pc, #192]	; (1b928 <k_delayed_work_submit_to_queue+0xfc>)
   1b866:	f001 fad9 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1b86a:	482e      	ldr	r0, [pc, #184]	; (1b924 <k_delayed_work_submit_to_queue+0xf8>)
   1b86c:	f7ff fe28 	bl	1b4c0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   1b870:	69ec      	ldr	r4, [r5, #28]
   1b872:	b1ec      	cbz	r4, 1b8b0 <k_delayed_work_submit_to_queue+0x84>
   1b874:	42b4      	cmp	r4, r6
   1b876:	d152      	bne.n	1b91e <k_delayed_work_submit_to_queue+0xf2>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   1b878:	4628      	mov	r0, r5
   1b87a:	f003 f851 	bl	1e920 <work_cancel>
		if (err < 0) {
   1b87e:	1e04      	subs	r4, r0, #0
   1b880:	da18      	bge.n	1b8b4 <k_delayed_work_submit_to_queue+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b882:	4828      	ldr	r0, [pc, #160]	; (1b924 <k_delayed_work_submit_to_queue+0xf8>)
   1b884:	f7ff fe0c 	bl	1b4a0 <z_spin_unlock_valid>
   1b888:	b968      	cbnz	r0, 1b8a6 <k_delayed_work_submit_to_queue+0x7a>
   1b88a:	235d      	movs	r3, #93	; 0x5d
   1b88c:	4a26      	ldr	r2, [pc, #152]	; (1b928 <k_delayed_work_submit_to_queue+0xfc>)
   1b88e:	492a      	ldr	r1, [pc, #168]	; (1b938 <k_delayed_work_submit_to_queue+0x10c>)
   1b890:	4827      	ldr	r0, [pc, #156]	; (1b930 <k_delayed_work_submit_to_queue+0x104>)
   1b892:	f001 fa91 	bl	1cdb8 <printk>
   1b896:	4923      	ldr	r1, [pc, #140]	; (1b924 <k_delayed_work_submit_to_queue+0xf8>)
   1b898:	4828      	ldr	r0, [pc, #160]	; (1b93c <k_delayed_work_submit_to_queue+0x110>)
   1b89a:	f001 fa8d 	bl	1cdb8 <printk>
   1b89e:	215d      	movs	r1, #93	; 0x5d
   1b8a0:	4821      	ldr	r0, [pc, #132]	; (1b928 <k_delayed_work_submit_to_queue+0xfc>)
   1b8a2:	f001 fabb 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1b8a6:	f387 8811 	msr	BASEPRI, r7
   1b8aa:	f3bf 8f6f 	isb	sy
	z_add_timeout(&work->timeout, work_timeout,
		     _TICK_ALIGN + k_ms_to_ticks_ceil32(delay));

done:
	k_spin_unlock(&lock, key);
	return err;
   1b8ae:	e020      	b.n	1b8f2 <k_delayed_work_submit_to_queue+0xc6>
	if (work->work_q == work_q) {
   1b8b0:	2e00      	cmp	r6, #0
   1b8b2:	d0e1      	beq.n	1b878 <k_delayed_work_submit_to_queue+0x4c>
	work->work_q = work_q;
   1b8b4:	61ee      	str	r6, [r5, #28]
	if (delay == 0) {
   1b8b6:	f1b8 0f00 	cmp.w	r8, #0
   1b8ba:	d11d      	bne.n	1b8f8 <k_delayed_work_submit_to_queue+0xcc>
   1b8bc:	4819      	ldr	r0, [pc, #100]	; (1b924 <k_delayed_work_submit_to_queue+0xf8>)
   1b8be:	f7ff fdef 	bl	1b4a0 <z_spin_unlock_valid>
   1b8c2:	b968      	cbnz	r0, 1b8e0 <k_delayed_work_submit_to_queue+0xb4>
   1b8c4:	235d      	movs	r3, #93	; 0x5d
   1b8c6:	4a18      	ldr	r2, [pc, #96]	; (1b928 <k_delayed_work_submit_to_queue+0xfc>)
   1b8c8:	491b      	ldr	r1, [pc, #108]	; (1b938 <k_delayed_work_submit_to_queue+0x10c>)
   1b8ca:	4819      	ldr	r0, [pc, #100]	; (1b930 <k_delayed_work_submit_to_queue+0x104>)
   1b8cc:	f001 fa74 	bl	1cdb8 <printk>
   1b8d0:	4914      	ldr	r1, [pc, #80]	; (1b924 <k_delayed_work_submit_to_queue+0xf8>)
   1b8d2:	481a      	ldr	r0, [pc, #104]	; (1b93c <k_delayed_work_submit_to_queue+0x110>)
   1b8d4:	f001 fa70 	bl	1cdb8 <printk>
   1b8d8:	215d      	movs	r1, #93	; 0x5d
   1b8da:	4813      	ldr	r0, [pc, #76]	; (1b928 <k_delayed_work_submit_to_queue+0xfc>)
   1b8dc:	f001 fa9e 	bl	1ce1c <assert_post_action>
   1b8e0:	f387 8811 	msr	BASEPRI, r7
   1b8e4:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1b8e8:	4629      	mov	r1, r5
   1b8ea:	4630      	mov	r0, r6
   1b8ec:	f002 ffff 	bl	1e8ee <k_work_submit_to_queue>
		return 0;
   1b8f0:	2400      	movs	r4, #0
}
   1b8f2:	4620      	mov	r0, r4
   1b8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b8f8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1b8fc:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b900:	2100      	movs	r1, #0
   1b902:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b906:	2300      	movs	r3, #0
   1b908:	fbe6 0108 	umlal	r0, r1, r6, r8
   1b90c:	f7f0 fc96 	bl	c23c <__aeabi_uldivmod>
	z_add_timeout(&work->timeout, work_timeout,
   1b910:	490b      	ldr	r1, [pc, #44]	; (1b940 <k_delayed_work_submit_to_queue+0x114>)
   1b912:	1c42      	adds	r2, r0, #1
   1b914:	f105 000c 	add.w	r0, r5, #12
   1b918:	f000 f84e 	bl	1b9b8 <z_add_timeout>
   1b91c:	e7b1      	b.n	1b882 <k_delayed_work_submit_to_queue+0x56>
		err = -EADDRINUSE;
   1b91e:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   1b922:	e7ae      	b.n	1b882 <k_delayed_work_submit_to_queue+0x56>
   1b924:	20024f14 	.word	0x20024f14
   1b928:	0001f904 	.word	0x0001f904
   1b92c:	0001f923 	.word	0x0001f923
   1b930:	0001f722 	.word	0x0001f722
   1b934:	0001f938 	.word	0x0001f938
   1b938:	0001f950 	.word	0x0001f950
   1b93c:	0001f967 	.word	0x0001f967
   1b940:	0001e917 	.word	0x0001e917

0001b944 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   1b944:	4b03      	ldr	r3, [pc, #12]	; (1b954 <elapsed+0x10>)
   1b946:	681b      	ldr	r3, [r3, #0]
   1b948:	b90b      	cbnz	r3, 1b94e <elapsed+0xa>
   1b94a:	f7f1 bebf 	b.w	d6cc <z_clock_elapsed>
}
   1b94e:	2000      	movs	r0, #0
   1b950:	4770      	bx	lr
   1b952:	bf00      	nop
   1b954:	20024f18 	.word	0x20024f18

0001b958 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b958:	6803      	ldr	r3, [r0, #0]
   1b95a:	b140      	cbz	r0, 1b96e <remove_timeout+0x16>
   1b95c:	4a07      	ldr	r2, [pc, #28]	; (1b97c <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   1b95e:	6852      	ldr	r2, [r2, #4]
   1b960:	4290      	cmp	r0, r2
   1b962:	d004      	beq.n	1b96e <remove_timeout+0x16>
	if (next(t) != NULL) {
   1b964:	b11b      	cbz	r3, 1b96e <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   1b966:	689a      	ldr	r2, [r3, #8]
   1b968:	6881      	ldr	r1, [r0, #8]
   1b96a:	440a      	add	r2, r1
   1b96c:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   1b96e:	6842      	ldr	r2, [r0, #4]
   1b970:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1b972:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1b974:	2300      	movs	r3, #0
	node->prev = NULL;
   1b976:	e9c0 3300 	strd	r3, r3, [r0]
}
   1b97a:	4770      	bx	lr
   1b97c:	2002c474 	.word	0x2002c474

0001b980 <next_timeout>:
	return list->head == list;
   1b980:	4b0b      	ldr	r3, [pc, #44]	; (1b9b0 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   1b982:	b510      	push	{r4, lr}
   1b984:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b986:	429c      	cmp	r4, r3
   1b988:	bf08      	it	eq
   1b98a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   1b98c:	f7ff ffda 	bl	1b944 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1b990:	b154      	cbz	r4, 1b9a8 <next_timeout+0x28>
   1b992:	68a3      	ldr	r3, [r4, #8]
   1b994:	1a18      	subs	r0, r3, r0
   1b996:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1b99a:	4b06      	ldr	r3, [pc, #24]	; (1b9b4 <next_timeout+0x34>)
   1b99c:	691b      	ldr	r3, [r3, #16]
   1b99e:	b113      	cbz	r3, 1b9a6 <next_timeout+0x26>
   1b9a0:	4298      	cmp	r0, r3
   1b9a2:	bfa8      	it	ge
   1b9a4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1b9a6:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1b9a8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1b9ac:	e7f5      	b.n	1b99a <next_timeout+0x1a>
   1b9ae:	bf00      	nop
   1b9b0:	2002c474 	.word	0x2002c474
   1b9b4:	20024e04 	.word	0x20024e04

0001b9b8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   1b9b8:	6803      	ldr	r3, [r0, #0]
{
   1b9ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b9be:	4604      	mov	r4, r0
   1b9c0:	460e      	mov	r6, r1
   1b9c2:	4615      	mov	r5, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   1b9c4:	b163      	cbz	r3, 1b9e0 <z_add_timeout+0x28>
   1b9c6:	4943      	ldr	r1, [pc, #268]	; (1bad4 <z_add_timeout+0x11c>)
   1b9c8:	2358      	movs	r3, #88	; 0x58
   1b9ca:	4a43      	ldr	r2, [pc, #268]	; (1bad8 <z_add_timeout+0x120>)
   1b9cc:	4843      	ldr	r0, [pc, #268]	; (1badc <z_add_timeout+0x124>)
   1b9ce:	f001 f9f3 	bl	1cdb8 <printk>
   1b9d2:	4843      	ldr	r0, [pc, #268]	; (1bae0 <z_add_timeout+0x128>)
   1b9d4:	f001 f9f0 	bl	1cdb8 <printk>
   1b9d8:	2158      	movs	r1, #88	; 0x58
   1b9da:	483f      	ldr	r0, [pc, #252]	; (1bad8 <z_add_timeout+0x120>)
   1b9dc:	f001 fa1e 	bl	1ce1c <assert_post_action>
	to->fn = fn;
	ticks = MAX(1, ticks);
   1b9e0:	2d01      	cmp	r5, #1
   1b9e2:	bfb8      	it	lt
   1b9e4:	2501      	movlt	r5, #1
	to->fn = fn;
   1b9e6:	60e6      	str	r6, [r4, #12]
	__asm__ volatile(
   1b9e8:	f04f 0320 	mov.w	r3, #32
   1b9ec:	f3ef 8811 	mrs	r8, BASEPRI
   1b9f0:	f383 8811 	msr	BASEPRI, r3
   1b9f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b9f8:	483a      	ldr	r0, [pc, #232]	; (1bae4 <z_add_timeout+0x12c>)
   1b9fa:	f7ff fd43 	bl	1b484 <z_spin_lock_valid>
   1b9fe:	b968      	cbnz	r0, 1ba1c <z_add_timeout+0x64>
   1ba00:	234a      	movs	r3, #74	; 0x4a
   1ba02:	4a39      	ldr	r2, [pc, #228]	; (1bae8 <z_add_timeout+0x130>)
   1ba04:	4939      	ldr	r1, [pc, #228]	; (1baec <z_add_timeout+0x134>)
   1ba06:	4835      	ldr	r0, [pc, #212]	; (1badc <z_add_timeout+0x124>)
   1ba08:	f001 f9d6 	bl	1cdb8 <printk>
   1ba0c:	4935      	ldr	r1, [pc, #212]	; (1bae4 <z_add_timeout+0x12c>)
   1ba0e:	4838      	ldr	r0, [pc, #224]	; (1baf0 <z_add_timeout+0x138>)
   1ba10:	f001 f9d2 	bl	1cdb8 <printk>
   1ba14:	214a      	movs	r1, #74	; 0x4a
   1ba16:	4834      	ldr	r0, [pc, #208]	; (1bae8 <z_add_timeout+0x130>)
   1ba18:	f001 fa00 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1ba1c:	4831      	ldr	r0, [pc, #196]	; (1bae4 <z_add_timeout+0x12c>)
   1ba1e:	f7ff fd4f 	bl	1b4c0 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1ba22:	f7ff ff8f 	bl	1b944 <elapsed>
   1ba26:	4428      	add	r0, r5
	return list->head == list;
   1ba28:	4d32      	ldr	r5, [pc, #200]	; (1baf4 <z_add_timeout+0x13c>)
   1ba2a:	60a0      	str	r0, [r4, #8]
   1ba2c:	682e      	ldr	r6, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ba2e:	42ae      	cmp	r6, r5
   1ba30:	d005      	beq.n	1ba3e <z_add_timeout+0x86>
		for (t = first(); t != NULL; t = next(t)) {
			__ASSERT(t->dticks >= 0, "");
   1ba32:	4f29      	ldr	r7, [pc, #164]	; (1bad8 <z_add_timeout+0x120>)
   1ba34:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 1bb00 <z_add_timeout+0x148>
   1ba38:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 1badc <z_add_timeout+0x124>
		for (t = first(); t != NULL; t = next(t)) {
   1ba3c:	b936      	cbnz	r6, 1ba4c <z_add_timeout+0x94>
	node->prev = list->tail;
   1ba3e:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1ba40:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   1ba42:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1ba44:	686b      	ldr	r3, [r5, #4]
   1ba46:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ba48:	606c      	str	r4, [r5, #4]
   1ba4a:	e01a      	b.n	1ba82 <z_add_timeout+0xca>
			__ASSERT(t->dticks >= 0, "");
   1ba4c:	68b3      	ldr	r3, [r6, #8]
   1ba4e:	2b00      	cmp	r3, #0
   1ba50:	da0c      	bge.n	1ba6c <z_add_timeout+0xb4>
   1ba52:	4649      	mov	r1, r9
   1ba54:	2361      	movs	r3, #97	; 0x61
   1ba56:	463a      	mov	r2, r7
   1ba58:	4650      	mov	r0, sl
   1ba5a:	f001 f9ad 	bl	1cdb8 <printk>
   1ba5e:	4820      	ldr	r0, [pc, #128]	; (1bae0 <z_add_timeout+0x128>)
   1ba60:	f001 f9aa 	bl	1cdb8 <printk>
   1ba64:	2161      	movs	r1, #97	; 0x61
   1ba66:	4638      	mov	r0, r7
   1ba68:	f001 f9d8 	bl	1ce1c <assert_post_action>

			if (t->dticks > to->dticks) {
   1ba6c:	68b2      	ldr	r2, [r6, #8]
   1ba6e:	68a3      	ldr	r3, [r4, #8]
   1ba70:	429a      	cmp	r2, r3
   1ba72:	dd28      	ble.n	1bac6 <z_add_timeout+0x10e>
				t->dticks -= to->dticks;
   1ba74:	1ad3      	subs	r3, r2, r3
   1ba76:	60b3      	str	r3, [r6, #8]
	node->prev = successor->prev;
   1ba78:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1ba7a:	e9c4 6300 	strd	r6, r3, [r4]
	successor->prev->next = node;
   1ba7e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1ba80:	6074      	str	r4, [r6, #4]
	return list->head == list;
   1ba82:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ba84:	42ab      	cmp	r3, r5
   1ba86:	d006      	beq.n	1ba96 <z_add_timeout+0xde>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1ba88:	429c      	cmp	r4, r3
   1ba8a:	d104      	bne.n	1ba96 <z_add_timeout+0xde>
			z_clock_set_timeout(next_timeout(), false);
   1ba8c:	f7ff ff78 	bl	1b980 <next_timeout>
   1ba90:	2100      	movs	r1, #0
   1ba92:	f7f1 fd8d 	bl	d5b0 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ba96:	4813      	ldr	r0, [pc, #76]	; (1bae4 <z_add_timeout+0x12c>)
   1ba98:	f7ff fd02 	bl	1b4a0 <z_spin_unlock_valid>
   1ba9c:	b968      	cbnz	r0, 1baba <z_add_timeout+0x102>
   1ba9e:	235d      	movs	r3, #93	; 0x5d
   1baa0:	4a11      	ldr	r2, [pc, #68]	; (1bae8 <z_add_timeout+0x130>)
   1baa2:	4915      	ldr	r1, [pc, #84]	; (1baf8 <z_add_timeout+0x140>)
   1baa4:	480d      	ldr	r0, [pc, #52]	; (1badc <z_add_timeout+0x124>)
   1baa6:	f001 f987 	bl	1cdb8 <printk>
   1baaa:	490e      	ldr	r1, [pc, #56]	; (1bae4 <z_add_timeout+0x12c>)
   1baac:	4813      	ldr	r0, [pc, #76]	; (1bafc <z_add_timeout+0x144>)
   1baae:	f001 f983 	bl	1cdb8 <printk>
   1bab2:	215d      	movs	r1, #93	; 0x5d
   1bab4:	480c      	ldr	r0, [pc, #48]	; (1bae8 <z_add_timeout+0x130>)
   1bab6:	f001 f9b1 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1baba:	f388 8811 	msr	BASEPRI, r8
   1babe:	f3bf 8f6f 	isb	sy
		}
	}
}
   1bac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			to->dticks -= t->dticks;
   1bac6:	1a9b      	subs	r3, r3, r2
   1bac8:	60a3      	str	r3, [r4, #8]
	return (node == list->tail) ? NULL : node->next;
   1baca:	686b      	ldr	r3, [r5, #4]
   1bacc:	429e      	cmp	r6, r3
   1bace:	d0b6      	beq.n	1ba3e <z_add_timeout+0x86>
   1bad0:	6836      	ldr	r6, [r6, #0]
   1bad2:	e7b3      	b.n	1ba3c <z_add_timeout+0x84>
   1bad4:	000206dc 	.word	0x000206dc
   1bad8:	000206bf 	.word	0x000206bf
   1badc:	0001f722 	.word	0x0001f722
   1bae0:	0001fdcc 	.word	0x0001fdcc
   1bae4:	20024f1c 	.word	0x20024f1c
   1bae8:	0001f904 	.word	0x0001f904
   1baec:	0001f923 	.word	0x0001f923
   1baf0:	0001f938 	.word	0x0001f938
   1baf4:	2002c474 	.word	0x2002c474
   1baf8:	0001f950 	.word	0x0001f950
   1bafc:	0001f967 	.word	0x0001f967
   1bb00:	000206fc 	.word	0x000206fc

0001bb04 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   1bb04:	b538      	push	{r3, r4, r5, lr}
   1bb06:	4604      	mov	r4, r0
	__asm__ volatile(
   1bb08:	f04f 0320 	mov.w	r3, #32
   1bb0c:	f3ef 8511 	mrs	r5, BASEPRI
   1bb10:	f383 8811 	msr	BASEPRI, r3
   1bb14:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bb18:	481a      	ldr	r0, [pc, #104]	; (1bb84 <z_abort_timeout+0x80>)
   1bb1a:	f7ff fcb3 	bl	1b484 <z_spin_lock_valid>
   1bb1e:	b968      	cbnz	r0, 1bb3c <z_abort_timeout+0x38>
   1bb20:	234a      	movs	r3, #74	; 0x4a
   1bb22:	4a19      	ldr	r2, [pc, #100]	; (1bb88 <z_abort_timeout+0x84>)
   1bb24:	4919      	ldr	r1, [pc, #100]	; (1bb8c <z_abort_timeout+0x88>)
   1bb26:	481a      	ldr	r0, [pc, #104]	; (1bb90 <z_abort_timeout+0x8c>)
   1bb28:	f001 f946 	bl	1cdb8 <printk>
   1bb2c:	4915      	ldr	r1, [pc, #84]	; (1bb84 <z_abort_timeout+0x80>)
   1bb2e:	4819      	ldr	r0, [pc, #100]	; (1bb94 <z_abort_timeout+0x90>)
   1bb30:	f001 f942 	bl	1cdb8 <printk>
   1bb34:	214a      	movs	r1, #74	; 0x4a
   1bb36:	4814      	ldr	r0, [pc, #80]	; (1bb88 <z_abort_timeout+0x84>)
   1bb38:	f001 f970 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1bb3c:	4811      	ldr	r0, [pc, #68]	; (1bb84 <z_abort_timeout+0x80>)
   1bb3e:	f7ff fcbf 	bl	1b4c0 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   1bb42:	6823      	ldr	r3, [r4, #0]
   1bb44:	b1db      	cbz	r3, 1bb7e <z_abort_timeout+0x7a>
			remove_timeout(to);
   1bb46:	4620      	mov	r0, r4
   1bb48:	f7ff ff06 	bl	1b958 <remove_timeout>
			ret = 0;
   1bb4c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bb4e:	480d      	ldr	r0, [pc, #52]	; (1bb84 <z_abort_timeout+0x80>)
   1bb50:	f7ff fca6 	bl	1b4a0 <z_spin_unlock_valid>
   1bb54:	b968      	cbnz	r0, 1bb72 <z_abort_timeout+0x6e>
   1bb56:	235d      	movs	r3, #93	; 0x5d
   1bb58:	4a0b      	ldr	r2, [pc, #44]	; (1bb88 <z_abort_timeout+0x84>)
   1bb5a:	490f      	ldr	r1, [pc, #60]	; (1bb98 <z_abort_timeout+0x94>)
   1bb5c:	480c      	ldr	r0, [pc, #48]	; (1bb90 <z_abort_timeout+0x8c>)
   1bb5e:	f001 f92b 	bl	1cdb8 <printk>
   1bb62:	4908      	ldr	r1, [pc, #32]	; (1bb84 <z_abort_timeout+0x80>)
   1bb64:	480d      	ldr	r0, [pc, #52]	; (1bb9c <z_abort_timeout+0x98>)
   1bb66:	f001 f927 	bl	1cdb8 <printk>
   1bb6a:	215d      	movs	r1, #93	; 0x5d
   1bb6c:	4806      	ldr	r0, [pc, #24]	; (1bb88 <z_abort_timeout+0x84>)
   1bb6e:	f001 f955 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1bb72:	f385 8811 	msr	BASEPRI, r5
   1bb76:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   1bb7a:	4620      	mov	r0, r4
   1bb7c:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   1bb7e:	f06f 0415 	mvn.w	r4, #21
   1bb82:	e7e4      	b.n	1bb4e <z_abort_timeout+0x4a>
   1bb84:	20024f1c 	.word	0x20024f1c
   1bb88:	0001f904 	.word	0x0001f904
   1bb8c:	0001f923 	.word	0x0001f923
   1bb90:	0001f722 	.word	0x0001f722
   1bb94:	0001f938 	.word	0x0001f938
   1bb98:	0001f950 	.word	0x0001f950
   1bb9c:	0001f967 	.word	0x0001f967

0001bba0 <z_get_next_timeout_expiry>:

	return ticks - elapsed();
}

s32_t z_get_next_timeout_expiry(void)
{
   1bba0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1bba2:	f04f 0320 	mov.w	r3, #32
   1bba6:	f3ef 8511 	mrs	r5, BASEPRI
   1bbaa:	f383 8811 	msr	BASEPRI, r3
   1bbae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bbb2:	4818      	ldr	r0, [pc, #96]	; (1bc14 <z_get_next_timeout_expiry+0x74>)
   1bbb4:	f7ff fc66 	bl	1b484 <z_spin_lock_valid>
   1bbb8:	b968      	cbnz	r0, 1bbd6 <z_get_next_timeout_expiry+0x36>
   1bbba:	234a      	movs	r3, #74	; 0x4a
   1bbbc:	4a16      	ldr	r2, [pc, #88]	; (1bc18 <z_get_next_timeout_expiry+0x78>)
   1bbbe:	4917      	ldr	r1, [pc, #92]	; (1bc1c <z_get_next_timeout_expiry+0x7c>)
   1bbc0:	4817      	ldr	r0, [pc, #92]	; (1bc20 <z_get_next_timeout_expiry+0x80>)
   1bbc2:	f001 f8f9 	bl	1cdb8 <printk>
   1bbc6:	4913      	ldr	r1, [pc, #76]	; (1bc14 <z_get_next_timeout_expiry+0x74>)
   1bbc8:	4816      	ldr	r0, [pc, #88]	; (1bc24 <z_get_next_timeout_expiry+0x84>)
   1bbca:	f001 f8f5 	bl	1cdb8 <printk>
   1bbce:	214a      	movs	r1, #74	; 0x4a
   1bbd0:	4811      	ldr	r0, [pc, #68]	; (1bc18 <z_get_next_timeout_expiry+0x78>)
   1bbd2:	f001 f923 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1bbd6:	480f      	ldr	r0, [pc, #60]	; (1bc14 <z_get_next_timeout_expiry+0x74>)
   1bbd8:	f7ff fc72 	bl	1b4c0 <z_spin_lock_set_owner>
	s32_t ret = K_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   1bbdc:	f7ff fed0 	bl	1b980 <next_timeout>
   1bbe0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bbe2:	480c      	ldr	r0, [pc, #48]	; (1bc14 <z_get_next_timeout_expiry+0x74>)
   1bbe4:	f7ff fc5c 	bl	1b4a0 <z_spin_unlock_valid>
   1bbe8:	b968      	cbnz	r0, 1bc06 <z_get_next_timeout_expiry+0x66>
   1bbea:	235d      	movs	r3, #93	; 0x5d
   1bbec:	4a0a      	ldr	r2, [pc, #40]	; (1bc18 <z_get_next_timeout_expiry+0x78>)
   1bbee:	490e      	ldr	r1, [pc, #56]	; (1bc28 <z_get_next_timeout_expiry+0x88>)
   1bbf0:	480b      	ldr	r0, [pc, #44]	; (1bc20 <z_get_next_timeout_expiry+0x80>)
   1bbf2:	f001 f8e1 	bl	1cdb8 <printk>
   1bbf6:	4907      	ldr	r1, [pc, #28]	; (1bc14 <z_get_next_timeout_expiry+0x74>)
   1bbf8:	480c      	ldr	r0, [pc, #48]	; (1bc2c <z_get_next_timeout_expiry+0x8c>)
   1bbfa:	f001 f8dd 	bl	1cdb8 <printk>
   1bbfe:	215d      	movs	r1, #93	; 0x5d
   1bc00:	4805      	ldr	r0, [pc, #20]	; (1bc18 <z_get_next_timeout_expiry+0x78>)
   1bc02:	f001 f90b 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1bc06:	f385 8811 	msr	BASEPRI, r5
   1bc0a:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   1bc0e:	4620      	mov	r0, r4
   1bc10:	bd38      	pop	{r3, r4, r5, pc}
   1bc12:	bf00      	nop
   1bc14:	20024f1c 	.word	0x20024f1c
   1bc18:	0001f904 	.word	0x0001f904
   1bc1c:	0001f923 	.word	0x0001f923
   1bc20:	0001f722 	.word	0x0001f722
   1bc24:	0001f938 	.word	0x0001f938
   1bc28:	0001f950 	.word	0x0001f950
   1bc2c:	0001f967 	.word	0x0001f967

0001bc30 <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
   1bc30:	b570      	push	{r4, r5, r6, lr}
   1bc32:	4604      	mov	r4, r0
   1bc34:	460e      	mov	r6, r1
	__asm__ volatile(
   1bc36:	f04f 0320 	mov.w	r3, #32
   1bc3a:	f3ef 8511 	mrs	r5, BASEPRI
   1bc3e:	f383 8811 	msr	BASEPRI, r3
   1bc42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bc46:	481b      	ldr	r0, [pc, #108]	; (1bcb4 <z_set_timeout_expiry+0x84>)
   1bc48:	f7ff fc1c 	bl	1b484 <z_spin_lock_valid>
   1bc4c:	b968      	cbnz	r0, 1bc6a <z_set_timeout_expiry+0x3a>
   1bc4e:	234a      	movs	r3, #74	; 0x4a
   1bc50:	4a19      	ldr	r2, [pc, #100]	; (1bcb8 <z_set_timeout_expiry+0x88>)
   1bc52:	491a      	ldr	r1, [pc, #104]	; (1bcbc <z_set_timeout_expiry+0x8c>)
   1bc54:	481a      	ldr	r0, [pc, #104]	; (1bcc0 <z_set_timeout_expiry+0x90>)
   1bc56:	f001 f8af 	bl	1cdb8 <printk>
   1bc5a:	4916      	ldr	r1, [pc, #88]	; (1bcb4 <z_set_timeout_expiry+0x84>)
   1bc5c:	4819      	ldr	r0, [pc, #100]	; (1bcc4 <z_set_timeout_expiry+0x94>)
   1bc5e:	f001 f8ab 	bl	1cdb8 <printk>
   1bc62:	214a      	movs	r1, #74	; 0x4a
   1bc64:	4814      	ldr	r0, [pc, #80]	; (1bcb8 <z_set_timeout_expiry+0x88>)
   1bc66:	f001 f8d9 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1bc6a:	4812      	ldr	r0, [pc, #72]	; (1bcb4 <z_set_timeout_expiry+0x84>)
   1bc6c:	f7ff fc28 	bl	1b4c0 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next = next_timeout();
   1bc70:	f7ff fe86 	bl	1b980 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1bc74:	2801      	cmp	r0, #1
   1bc76:	dd05      	ble.n	1bc84 <z_set_timeout_expiry+0x54>
   1bc78:	42a0      	cmp	r0, r4
   1bc7a:	dd03      	ble.n	1bc84 <z_set_timeout_expiry+0x54>
			z_clock_set_timeout(ticks, idle);
   1bc7c:	4631      	mov	r1, r6
   1bc7e:	4620      	mov	r0, r4
   1bc80:	f7f1 fc96 	bl	d5b0 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bc84:	480b      	ldr	r0, [pc, #44]	; (1bcb4 <z_set_timeout_expiry+0x84>)
   1bc86:	f7ff fc0b 	bl	1b4a0 <z_spin_unlock_valid>
   1bc8a:	b968      	cbnz	r0, 1bca8 <z_set_timeout_expiry+0x78>
   1bc8c:	235d      	movs	r3, #93	; 0x5d
   1bc8e:	4a0a      	ldr	r2, [pc, #40]	; (1bcb8 <z_set_timeout_expiry+0x88>)
   1bc90:	490d      	ldr	r1, [pc, #52]	; (1bcc8 <z_set_timeout_expiry+0x98>)
   1bc92:	480b      	ldr	r0, [pc, #44]	; (1bcc0 <z_set_timeout_expiry+0x90>)
   1bc94:	f001 f890 	bl	1cdb8 <printk>
   1bc98:	4906      	ldr	r1, [pc, #24]	; (1bcb4 <z_set_timeout_expiry+0x84>)
   1bc9a:	480c      	ldr	r0, [pc, #48]	; (1bccc <z_set_timeout_expiry+0x9c>)
   1bc9c:	f001 f88c 	bl	1cdb8 <printk>
   1bca0:	215d      	movs	r1, #93	; 0x5d
   1bca2:	4805      	ldr	r0, [pc, #20]	; (1bcb8 <z_set_timeout_expiry+0x88>)
   1bca4:	f001 f8ba 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1bca8:	f385 8811 	msr	BASEPRI, r5
   1bcac:	f3bf 8f6f 	isb	sy
		}
	}
}
   1bcb0:	bd70      	pop	{r4, r5, r6, pc}
   1bcb2:	bf00      	nop
   1bcb4:	20024f1c 	.word	0x20024f1c
   1bcb8:	0001f904 	.word	0x0001f904
   1bcbc:	0001f923 	.word	0x0001f923
   1bcc0:	0001f722 	.word	0x0001f722
   1bcc4:	0001f938 	.word	0x0001f938
   1bcc8:	0001f950 	.word	0x0001f950
   1bccc:	0001f967 	.word	0x0001f967

0001bcd0 <z_clock_announce>:

void z_clock_announce(s32_t ticks)
{
   1bcd0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   1bcd4:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1bcd6:	f7fe fdb9 	bl	1a84c <z_time_slice>
	__asm__ volatile(
   1bcda:	f04f 0320 	mov.w	r3, #32
   1bcde:	f3ef 8511 	mrs	r5, BASEPRI
   1bce2:	f383 8811 	msr	BASEPRI, r3
   1bce6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bcea:	4848      	ldr	r0, [pc, #288]	; (1be0c <z_clock_announce+0x13c>)
   1bcec:	f7ff fbca 	bl	1b484 <z_spin_lock_valid>
   1bcf0:	b968      	cbnz	r0, 1bd0e <z_clock_announce+0x3e>
   1bcf2:	234a      	movs	r3, #74	; 0x4a
   1bcf4:	4a46      	ldr	r2, [pc, #280]	; (1be10 <z_clock_announce+0x140>)
   1bcf6:	4947      	ldr	r1, [pc, #284]	; (1be14 <z_clock_announce+0x144>)
   1bcf8:	4847      	ldr	r0, [pc, #284]	; (1be18 <z_clock_announce+0x148>)
   1bcfa:	f001 f85d 	bl	1cdb8 <printk>
   1bcfe:	4943      	ldr	r1, [pc, #268]	; (1be0c <z_clock_announce+0x13c>)
   1bd00:	4846      	ldr	r0, [pc, #280]	; (1be1c <z_clock_announce+0x14c>)
   1bd02:	f001 f859 	bl	1cdb8 <printk>
   1bd06:	214a      	movs	r1, #74	; 0x4a
   1bd08:	4841      	ldr	r0, [pc, #260]	; (1be10 <z_clock_announce+0x140>)
   1bd0a:	f001 f887 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1bd0e:	4f44      	ldr	r7, [pc, #272]	; (1be20 <z_clock_announce+0x150>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1bd10:	4e44      	ldr	r6, [pc, #272]	; (1be24 <z_clock_announce+0x154>)
   1bd12:	46b9      	mov	r9, r7
   1bd14:	483d      	ldr	r0, [pc, #244]	; (1be0c <z_clock_announce+0x13c>)
	return list->head == list;
   1bd16:	f8df 8118 	ldr.w	r8, [pc, #280]	; 1be30 <z_clock_announce+0x160>
   1bd1a:	f7ff fbd1 	bl	1b4c0 <z_spin_lock_set_owner>
   1bd1e:	6034      	str	r4, [r6, #0]
   1bd20:	f8d8 4000 	ldr.w	r4, [r8]
   1bd24:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bd26:	4544      	cmp	r4, r8
   1bd28:	e9d7 bc00 	ldrd	fp, ip, [r7]
   1bd2c:	d005      	beq.n	1bd3a <z_clock_announce+0x6a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1bd2e:	b124      	cbz	r4, 1bd3a <z_clock_announce+0x6a>
   1bd30:	68a3      	ldr	r3, [r4, #8]
   1bd32:	4293      	cmp	r3, r2
   1bd34:	dd26      	ble.n	1bd84 <z_clock_announce+0xb4>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1bd36:	1a9b      	subs	r3, r3, r2
   1bd38:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   1bd3a:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1bd3c:	eb1b 0002 	adds.w	r0, fp, r2
   1bd40:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   1bd44:	e9c9 0100 	strd	r0, r1, [r9]
	announce_remaining = 0;
   1bd48:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   1bd4a:	f7ff fe19 	bl	1b980 <next_timeout>
   1bd4e:	4621      	mov	r1, r4
   1bd50:	f7f1 fc2e 	bl	d5b0 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bd54:	482d      	ldr	r0, [pc, #180]	; (1be0c <z_clock_announce+0x13c>)
   1bd56:	f7ff fba3 	bl	1b4a0 <z_spin_unlock_valid>
   1bd5a:	b968      	cbnz	r0, 1bd78 <z_clock_announce+0xa8>
   1bd5c:	235d      	movs	r3, #93	; 0x5d
   1bd5e:	4a2c      	ldr	r2, [pc, #176]	; (1be10 <z_clock_announce+0x140>)
   1bd60:	4931      	ldr	r1, [pc, #196]	; (1be28 <z_clock_announce+0x158>)
   1bd62:	482d      	ldr	r0, [pc, #180]	; (1be18 <z_clock_announce+0x148>)
   1bd64:	f001 f828 	bl	1cdb8 <printk>
   1bd68:	4928      	ldr	r1, [pc, #160]	; (1be0c <z_clock_announce+0x13c>)
   1bd6a:	4830      	ldr	r0, [pc, #192]	; (1be2c <z_clock_announce+0x15c>)
   1bd6c:	f001 f824 	bl	1cdb8 <printk>
   1bd70:	215d      	movs	r1, #93	; 0x5d
   1bd72:	4827      	ldr	r0, [pc, #156]	; (1be10 <z_clock_announce+0x140>)
   1bd74:	f001 f852 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1bd78:	f385 8811 	msr	BASEPRI, r5
   1bd7c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1bd80:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   1bd84:	eb1b 0003 	adds.w	r0, fp, r3
   1bd88:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   1bd8c:	1ad3      	subs	r3, r2, r3
   1bd8e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1bd90:	2300      	movs	r3, #0
		curr_tick += dt;
   1bd92:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   1bd96:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   1bd98:	4620      	mov	r0, r4
   1bd9a:	f7ff fddd 	bl	1b958 <remove_timeout>
   1bd9e:	481b      	ldr	r0, [pc, #108]	; (1be0c <z_clock_announce+0x13c>)
   1bda0:	f7ff fb7e 	bl	1b4a0 <z_spin_unlock_valid>
   1bda4:	b968      	cbnz	r0, 1bdc2 <z_clock_announce+0xf2>
   1bda6:	235d      	movs	r3, #93	; 0x5d
   1bda8:	4a19      	ldr	r2, [pc, #100]	; (1be10 <z_clock_announce+0x140>)
   1bdaa:	491f      	ldr	r1, [pc, #124]	; (1be28 <z_clock_announce+0x158>)
   1bdac:	481a      	ldr	r0, [pc, #104]	; (1be18 <z_clock_announce+0x148>)
   1bdae:	f001 f803 	bl	1cdb8 <printk>
   1bdb2:	4916      	ldr	r1, [pc, #88]	; (1be0c <z_clock_announce+0x13c>)
   1bdb4:	481d      	ldr	r0, [pc, #116]	; (1be2c <z_clock_announce+0x15c>)
   1bdb6:	f000 ffff 	bl	1cdb8 <printk>
   1bdba:	215d      	movs	r1, #93	; 0x5d
   1bdbc:	4814      	ldr	r0, [pc, #80]	; (1be10 <z_clock_announce+0x140>)
   1bdbe:	f001 f82d 	bl	1ce1c <assert_post_action>
   1bdc2:	f385 8811 	msr	BASEPRI, r5
   1bdc6:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1bdca:	68e3      	ldr	r3, [r4, #12]
   1bdcc:	4620      	mov	r0, r4
   1bdce:	4798      	blx	r3
	__asm__ volatile(
   1bdd0:	f04f 0320 	mov.w	r3, #32
   1bdd4:	f3ef 8511 	mrs	r5, BASEPRI
   1bdd8:	f383 8811 	msr	BASEPRI, r3
   1bddc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bde0:	480a      	ldr	r0, [pc, #40]	; (1be0c <z_clock_announce+0x13c>)
   1bde2:	f7ff fb4f 	bl	1b484 <z_spin_lock_valid>
   1bde6:	b968      	cbnz	r0, 1be04 <z_clock_announce+0x134>
   1bde8:	234a      	movs	r3, #74	; 0x4a
   1bdea:	4a09      	ldr	r2, [pc, #36]	; (1be10 <z_clock_announce+0x140>)
   1bdec:	4909      	ldr	r1, [pc, #36]	; (1be14 <z_clock_announce+0x144>)
   1bdee:	480a      	ldr	r0, [pc, #40]	; (1be18 <z_clock_announce+0x148>)
   1bdf0:	f000 ffe2 	bl	1cdb8 <printk>
   1bdf4:	4905      	ldr	r1, [pc, #20]	; (1be0c <z_clock_announce+0x13c>)
   1bdf6:	4809      	ldr	r0, [pc, #36]	; (1be1c <z_clock_announce+0x14c>)
   1bdf8:	f000 ffde 	bl	1cdb8 <printk>
   1bdfc:	214a      	movs	r1, #74	; 0x4a
   1bdfe:	4804      	ldr	r0, [pc, #16]	; (1be10 <z_clock_announce+0x140>)
   1be00:	f001 f80c 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1be04:	4801      	ldr	r0, [pc, #4]	; (1be0c <z_clock_announce+0x13c>)
   1be06:	f7ff fb5b 	bl	1b4c0 <z_spin_lock_set_owner>
	return k;
   1be0a:	e789      	b.n	1bd20 <z_clock_announce+0x50>
   1be0c:	20024f1c 	.word	0x20024f1c
   1be10:	0001f904 	.word	0x0001f904
   1be14:	0001f923 	.word	0x0001f923
   1be18:	0001f722 	.word	0x0001f722
   1be1c:	0001f938 	.word	0x0001f938
   1be20:	20020000 	.word	0x20020000
   1be24:	20024f18 	.word	0x20024f18
   1be28:	0001f950 	.word	0x0001f950
   1be2c:	0001f967 	.word	0x0001f967
   1be30:	2002c474 	.word	0x2002c474

0001be34 <z_tick_get>:

s64_t z_tick_get(void)
{
   1be34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1be38:	f04f 0320 	mov.w	r3, #32
   1be3c:	f3ef 8611 	mrs	r6, BASEPRI
   1be40:	f383 8811 	msr	BASEPRI, r3
   1be44:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1be48:	481b      	ldr	r0, [pc, #108]	; (1beb8 <z_tick_get+0x84>)
   1be4a:	f7ff fb1b 	bl	1b484 <z_spin_lock_valid>
   1be4e:	b968      	cbnz	r0, 1be6c <z_tick_get+0x38>
   1be50:	234a      	movs	r3, #74	; 0x4a
   1be52:	4a1a      	ldr	r2, [pc, #104]	; (1bebc <z_tick_get+0x88>)
   1be54:	491a      	ldr	r1, [pc, #104]	; (1bec0 <z_tick_get+0x8c>)
   1be56:	481b      	ldr	r0, [pc, #108]	; (1bec4 <z_tick_get+0x90>)
   1be58:	f000 ffae 	bl	1cdb8 <printk>
   1be5c:	4916      	ldr	r1, [pc, #88]	; (1beb8 <z_tick_get+0x84>)
   1be5e:	481a      	ldr	r0, [pc, #104]	; (1bec8 <z_tick_get+0x94>)
   1be60:	f000 ffaa 	bl	1cdb8 <printk>
   1be64:	214a      	movs	r1, #74	; 0x4a
   1be66:	4815      	ldr	r0, [pc, #84]	; (1bebc <z_tick_get+0x88>)
   1be68:	f000 ffd8 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1be6c:	4812      	ldr	r0, [pc, #72]	; (1beb8 <z_tick_get+0x84>)
   1be6e:	f7ff fb27 	bl	1b4c0 <z_spin_lock_set_owner>
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1be72:	f7f1 fc2b 	bl	d6cc <z_clock_elapsed>
   1be76:	4b15      	ldr	r3, [pc, #84]	; (1becc <z_tick_get+0x98>)
   1be78:	e9d3 4500 	ldrd	r4, r5, [r3]
   1be7c:	1827      	adds	r7, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1be7e:	480e      	ldr	r0, [pc, #56]	; (1beb8 <z_tick_get+0x84>)
   1be80:	f145 0800 	adc.w	r8, r5, #0
   1be84:	f7ff fb0c 	bl	1b4a0 <z_spin_unlock_valid>
   1be88:	b968      	cbnz	r0, 1bea6 <z_tick_get+0x72>
   1be8a:	235d      	movs	r3, #93	; 0x5d
   1be8c:	4a0b      	ldr	r2, [pc, #44]	; (1bebc <z_tick_get+0x88>)
   1be8e:	4910      	ldr	r1, [pc, #64]	; (1bed0 <z_tick_get+0x9c>)
   1be90:	480c      	ldr	r0, [pc, #48]	; (1bec4 <z_tick_get+0x90>)
   1be92:	f000 ff91 	bl	1cdb8 <printk>
   1be96:	4908      	ldr	r1, [pc, #32]	; (1beb8 <z_tick_get+0x84>)
   1be98:	480e      	ldr	r0, [pc, #56]	; (1bed4 <z_tick_get+0xa0>)
   1be9a:	f000 ff8d 	bl	1cdb8 <printk>
   1be9e:	215d      	movs	r1, #93	; 0x5d
   1bea0:	4806      	ldr	r0, [pc, #24]	; (1bebc <z_tick_get+0x88>)
   1bea2:	f000 ffbb 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1bea6:	f386 8811 	msr	BASEPRI, r6
   1beaa:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1beae:	4638      	mov	r0, r7
   1beb0:	4641      	mov	r1, r8
   1beb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1beb6:	bf00      	nop
   1beb8:	20024f1c 	.word	0x20024f1c
   1bebc:	0001f904 	.word	0x0001f904
   1bec0:	0001f923 	.word	0x0001f923
   1bec4:	0001f722 	.word	0x0001f722
   1bec8:	0001f938 	.word	0x0001f938
   1becc:	20020000 	.word	0x20020000
   1bed0:	0001f950 	.word	0x0001f950
   1bed4:	0001f967 	.word	0x0001f967

0001bed8 <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   1bed8:	6a02      	ldr	r2, [r0, #32]
{
   1beda:	b538      	push	{r3, r4, r5, lr}
	if (timer->period > 0) {
   1bedc:	2a00      	cmp	r2, #0
{
   1bede:	4604      	mov	r4, r0
	if (timer->period > 0) {
   1bee0:	dd02      	ble.n	1bee8 <z_timer_expiration_handler+0x10>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bee2:	490e      	ldr	r1, [pc, #56]	; (1bf1c <z_timer_expiration_handler+0x44>)
   1bee4:	f7ff fd68 	bl	1b9b8 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1bee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1beea:	3301      	adds	r3, #1
   1beec:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1beee:	69a3      	ldr	r3, [r4, #24]
   1bef0:	b10b      	cbz	r3, 1bef6 <z_timer_expiration_handler+0x1e>
		timer->expiry_fn(timer);
   1bef2:	4620      	mov	r0, r4
   1bef4:	4798      	blx	r3
	return list->head == list;
   1bef6:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1befa:	42a5      	cmp	r5, r4
   1befc:	d00d      	beq.n	1bf1a <z_timer_expiration_handler+0x42>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1befe:	b165      	cbz	r5, 1bf1a <z_timer_expiration_handler+0x42>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1bf00:	4628      	mov	r0, r5
   1bf02:	f7fe f8ef 	bl	1a0e4 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1bf06:	7b6b      	ldrb	r3, [r5, #13]
   1bf08:	06db      	lsls	r3, r3, #27
   1bf0a:	d104      	bne.n	1bf16 <z_timer_expiration_handler+0x3e>
	if (z_is_thread_ready(thread)) {
   1bf0c:	69ab      	ldr	r3, [r5, #24]
   1bf0e:	b913      	cbnz	r3, 1bf16 <z_timer_expiration_handler+0x3e>
		z_add_thread_to_ready_q(thread);
   1bf10:	4628      	mov	r0, r5
   1bf12:	f7fe fb23 	bl	1a55c <z_add_thread_to_ready_q>
   1bf16:	2300      	movs	r3, #0
   1bf18:	66ab      	str	r3, [r5, #104]	; 0x68

	z_ready_thread(thread);

	arch_thread_return_value_set(thread, 0);
}
   1bf1a:	bd38      	pop	{r3, r4, r5, pc}
   1bf1c:	0001bed9 	.word	0x0001bed9

0001bf20 <z_impl_k_timer_start>:
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   1bf20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	__ASSERT(duration >= 0 && period >= 0 &&
   1bf24:	f1b1 0900 	subs.w	r9, r1, #0
{
   1bf28:	4604      	mov	r4, r0
   1bf2a:	4615      	mov	r5, r2
	__ASSERT(duration >= 0 && period >= 0 &&
   1bf2c:	db04      	blt.n	1bf38 <z_impl_k_timer_start+0x18>
   1bf2e:	2a00      	cmp	r2, #0
   1bf30:	db02      	blt.n	1bf38 <z_impl_k_timer_start+0x18>
   1bf32:	ea59 0302 	orrs.w	r3, r9, r2
   1bf36:	d10c      	bne.n	1bf52 <z_impl_k_timer_start+0x32>
   1bf38:	491a      	ldr	r1, [pc, #104]	; (1bfa4 <z_impl_k_timer_start+0x84>)
   1bf3a:	236f      	movs	r3, #111	; 0x6f
   1bf3c:	4a1a      	ldr	r2, [pc, #104]	; (1bfa8 <z_impl_k_timer_start+0x88>)
   1bf3e:	481b      	ldr	r0, [pc, #108]	; (1bfac <z_impl_k_timer_start+0x8c>)
   1bf40:	f000 ff3a 	bl	1cdb8 <printk>
   1bf44:	481a      	ldr	r0, [pc, #104]	; (1bfb0 <z_impl_k_timer_start+0x90>)
   1bf46:	f000 ff37 	bl	1cdb8 <printk>
   1bf4a:	216f      	movs	r1, #111	; 0x6f
   1bf4c:	4816      	ldr	r0, [pc, #88]	; (1bfa8 <z_impl_k_timer_start+0x88>)
   1bf4e:	f000 ff65 	bl	1ce1c <assert_post_action>
   1bf52:	f240 36e7 	movw	r6, #999	; 0x3e7
   1bf56:	2700      	movs	r7, #0
   1bf58:	f44f 4800 	mov.w	r8, #32768	; 0x8000
   1bf5c:	4630      	mov	r0, r6
   1bf5e:	4639      	mov	r1, r7
   1bf60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bf64:	2300      	movs	r3, #0
   1bf66:	fbe8 0105 	umlal	r0, r1, r8, r5
   1bf6a:	f7f0 f967 	bl	c23c <__aeabi_uldivmod>
   1bf6e:	4639      	mov	r1, r7
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = k_ms_to_ticks_ceil32(period);
   1bf70:	9000      	str	r0, [sp, #0]
   1bf72:	4630      	mov	r0, r6
   1bf74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bf78:	2300      	movs	r3, #0
   1bf7a:	fbe8 0109 	umlal	r0, r1, r8, r9
   1bf7e:	f7f0 f95d 	bl	c23c <__aeabi_uldivmod>
	duration_in_ticks = k_ms_to_ticks_ceil32(duration);
   1bf82:	9001      	str	r0, [sp, #4]

	(void)z_abort_timeout(&timer->timeout);
   1bf84:	4620      	mov	r0, r4
   1bf86:	f7ff fdbd 	bl	1bb04 <z_abort_timeout>
	timer->period = period_in_ticks;
   1bf8a:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0U;
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bf8c:	4620      	mov	r0, r4
	timer->period = period_in_ticks;
   1bf8e:	6223      	str	r3, [r4, #32]
	timer->status = 0U;
   1bf90:	2300      	movs	r3, #0
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bf92:	9a01      	ldr	r2, [sp, #4]
   1bf94:	4907      	ldr	r1, [pc, #28]	; (1bfb4 <z_impl_k_timer_start+0x94>)
	timer->status = 0U;
   1bf96:	6263      	str	r3, [r4, #36]	; 0x24
		     duration_in_ticks);
}
   1bf98:	b003      	add	sp, #12
   1bf9a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bf9e:	f7ff bd0b 	b.w	1b9b8 <z_add_timeout>
   1bfa2:	bf00      	nop
   1bfa4:	00020726 	.word	0x00020726
   1bfa8:	0002070b 	.word	0x0002070b
   1bfac:	0001f722 	.word	0x0001f722
   1bfb0:	00020765 	.word	0x00020765
   1bfb4:	0001bed9 	.word	0x0001bed9

0001bfb8 <k_poll_poller_cb>:

	return events_registered;
}

static int k_poll_poller_cb(struct k_poll_event *event, u32_t state)
{
   1bfb8:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   1bfba:	6883      	ldr	r3, [r0, #8]
{
   1bfbc:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   1bfbe:	685c      	ldr	r4, [r3, #4]

	__ASSERT(thread != NULL, "poller should have a thread\n");
   1bfc0:	b964      	cbnz	r4, 1bfdc <k_poll_poller_cb+0x24>
   1bfc2:	4915      	ldr	r1, [pc, #84]	; (1c018 <k_poll_poller_cb+0x60>)
   1bfc4:	23e0      	movs	r3, #224	; 0xe0
   1bfc6:	4a15      	ldr	r2, [pc, #84]	; (1c01c <k_poll_poller_cb+0x64>)
   1bfc8:	4815      	ldr	r0, [pc, #84]	; (1c020 <k_poll_poller_cb+0x68>)
   1bfca:	f000 fef5 	bl	1cdb8 <printk>
   1bfce:	4815      	ldr	r0, [pc, #84]	; (1c024 <k_poll_poller_cb+0x6c>)
   1bfd0:	f000 fef2 	bl	1cdb8 <printk>
   1bfd4:	21e0      	movs	r1, #224	; 0xe0
   1bfd6:	4811      	ldr	r0, [pc, #68]	; (1c01c <k_poll_poller_cb+0x64>)
   1bfd8:	f000 ff20 	bl	1ce1c <assert_post_action>

	if (!z_is_thread_pending(thread)) {
   1bfdc:	7b63      	ldrb	r3, [r4, #13]
   1bfde:	079a      	lsls	r2, r3, #30
   1bfe0:	d401      	bmi.n	1bfe6 <k_poll_poller_cb+0x2e>
		return 0;
   1bfe2:	2000      	movs	r0, #0
	}

	z_ready_thread(thread);

	return 0;
}
   1bfe4:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   1bfe6:	6a23      	ldr	r3, [r4, #32]
   1bfe8:	3302      	adds	r3, #2
   1bfea:	d012      	beq.n	1c012 <k_poll_poller_cb+0x5a>
	z_unpend_thread(thread);
   1bfec:	4620      	mov	r0, r4
   1bfee:	f7fe f9ad 	bl	1a34c <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1bff2:	2d08      	cmp	r5, #8
   1bff4:	bf0c      	ite	eq
   1bff6:	f06f 0303 	mvneq.w	r3, #3
   1bffa:	2300      	movne	r3, #0
   1bffc:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1bffe:	7b63      	ldrb	r3, [r4, #13]
   1c000:	06db      	lsls	r3, r3, #27
   1c002:	d1ee      	bne.n	1bfe2 <k_poll_poller_cb+0x2a>
	if (!z_is_thread_ready(thread)) {
   1c004:	69a5      	ldr	r5, [r4, #24]
   1c006:	2d00      	cmp	r5, #0
   1c008:	d1eb      	bne.n	1bfe2 <k_poll_poller_cb+0x2a>
		z_add_thread_to_ready_q(thread);
   1c00a:	4620      	mov	r0, r4
   1c00c:	f7fe faa6 	bl	1a55c <z_add_thread_to_ready_q>
	return 0;
   1c010:	e7e7      	b.n	1bfe2 <k_poll_poller_cb+0x2a>
		return -EAGAIN;
   1c012:	f06f 000a 	mvn.w	r0, #10
   1c016:	e7e5      	b.n	1bfe4 <k_poll_poller_cb+0x2c>
   1c018:	000208e2 	.word	0x000208e2
   1c01c:	000208c8 	.word	0x000208c8
   1c020:	0001f722 	.word	0x0001f722
   1c024:	000208f8 	.word	0x000208f8

0001c028 <clear_event_registrations>:
{
   1c028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c02c:	2414      	movs	r4, #20
   1c02e:	4680      	mov	r8, r0
   1c030:	4617      	mov	r7, r2
	while (num_events--) {
   1c032:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   1c036:	4d48      	ldr	r5, [pc, #288]	; (1c158 <clear_event_registrations+0x130>)
   1c038:	f8df 9158 	ldr.w	r9, [pc, #344]	; 1c194 <clear_event_registrations+0x16c>
   1c03c:	4e47      	ldr	r6, [pc, #284]	; (1c15c <clear_event_registrations+0x134>)
	while (num_events--) {
   1c03e:	4544      	cmp	r4, r8
   1c040:	d101      	bne.n	1c046 <clear_event_registrations+0x1e>
}
   1c042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   1c046:	2300      	movs	r3, #0
   1c048:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   1c04c:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1c050:	f003 030f 	and.w	r3, r3, #15
   1c054:	2b04      	cmp	r3, #4
   1c056:	d83d      	bhi.n	1c0d4 <clear_event_registrations+0xac>
   1c058:	e8df f003 	tbb	[pc, r3]
   1c05c:	3c032d49 	.word	0x3c032d49
   1c060:	1e          	.byte	0x1e
   1c061:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1c062:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c066:	b963      	cbnz	r3, 1c082 <clear_event_registrations+0x5a>
   1c068:	493d      	ldr	r1, [pc, #244]	; (1c160 <clear_event_registrations+0x138>)
   1c06a:	2396      	movs	r3, #150	; 0x96
   1c06c:	462a      	mov	r2, r5
   1c06e:	4630      	mov	r0, r6
   1c070:	f000 fea2 	bl	1cdb8 <printk>
   1c074:	483b      	ldr	r0, [pc, #236]	; (1c164 <clear_event_registrations+0x13c>)
   1c076:	f000 fe9f 	bl	1cdb8 <printk>
   1c07a:	2196      	movs	r1, #150	; 0x96
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1c07c:	4628      	mov	r0, r5
   1c07e:	f000 fecd 	bl	1ce1c <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   1c082:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1c086:	b393      	cbz	r3, 1c0ee <clear_event_registrations+0xc6>
	node->prev->next = node->next;
   1c088:	f854 2c10 	ldr.w	r2, [r4, #-16]
   1c08c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1c08e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c090:	2300      	movs	r3, #0
	node->prev = NULL;
   1c092:	e944 3305 	strd	r3, r3, [r4, #-20]
   1c096:	e02a      	b.n	1c0ee <clear_event_registrations+0xc6>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1c098:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c09c:	2b00      	cmp	r3, #0
   1c09e:	d1f0      	bne.n	1c082 <clear_event_registrations+0x5a>
   1c0a0:	4931      	ldr	r1, [pc, #196]	; (1c168 <clear_event_registrations+0x140>)
   1c0a2:	239a      	movs	r3, #154	; 0x9a
   1c0a4:	462a      	mov	r2, r5
   1c0a6:	4630      	mov	r0, r6
   1c0a8:	f000 fe86 	bl	1cdb8 <printk>
   1c0ac:	482f      	ldr	r0, [pc, #188]	; (1c16c <clear_event_registrations+0x144>)
   1c0ae:	f000 fe83 	bl	1cdb8 <printk>
   1c0b2:	219a      	movs	r1, #154	; 0x9a
   1c0b4:	e7e2      	b.n	1c07c <clear_event_registrations+0x54>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1c0b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c0ba:	2b00      	cmp	r3, #0
   1c0bc:	d1e1      	bne.n	1c082 <clear_event_registrations+0x5a>
   1c0be:	492c      	ldr	r1, [pc, #176]	; (1c170 <clear_event_registrations+0x148>)
   1c0c0:	239e      	movs	r3, #158	; 0x9e
   1c0c2:	462a      	mov	r2, r5
   1c0c4:	4630      	mov	r0, r6
   1c0c6:	f000 fe77 	bl	1cdb8 <printk>
   1c0ca:	482a      	ldr	r0, [pc, #168]	; (1c174 <clear_event_registrations+0x14c>)
   1c0cc:	f000 fe74 	bl	1cdb8 <printk>
   1c0d0:	219e      	movs	r1, #158	; 0x9e
   1c0d2:	e7d3      	b.n	1c07c <clear_event_registrations+0x54>
		__ASSERT(false, "invalid event type\n");
   1c0d4:	4649      	mov	r1, r9
   1c0d6:	23a5      	movs	r3, #165	; 0xa5
   1c0d8:	462a      	mov	r2, r5
   1c0da:	4630      	mov	r0, r6
   1c0dc:	f000 fe6c 	bl	1cdb8 <printk>
   1c0e0:	4825      	ldr	r0, [pc, #148]	; (1c178 <clear_event_registrations+0x150>)
   1c0e2:	f000 fe69 	bl	1cdb8 <printk>
   1c0e6:	21a5      	movs	r1, #165	; 0xa5
   1c0e8:	4628      	mov	r0, r5
   1c0ea:	f000 fe97 	bl	1ce1c <assert_post_action>
   1c0ee:	4823      	ldr	r0, [pc, #140]	; (1c17c <clear_event_registrations+0x154>)
   1c0f0:	f7ff f9d6 	bl	1b4a0 <z_spin_unlock_valid>
   1c0f4:	b968      	cbnz	r0, 1c112 <clear_event_registrations+0xea>
   1c0f6:	235d      	movs	r3, #93	; 0x5d
   1c0f8:	4a21      	ldr	r2, [pc, #132]	; (1c180 <clear_event_registrations+0x158>)
   1c0fa:	4922      	ldr	r1, [pc, #136]	; (1c184 <clear_event_registrations+0x15c>)
   1c0fc:	4630      	mov	r0, r6
   1c0fe:	f000 fe5b 	bl	1cdb8 <printk>
   1c102:	491e      	ldr	r1, [pc, #120]	; (1c17c <clear_event_registrations+0x154>)
   1c104:	4820      	ldr	r0, [pc, #128]	; (1c188 <clear_event_registrations+0x160>)
   1c106:	f000 fe57 	bl	1cdb8 <printk>
   1c10a:	215d      	movs	r1, #93	; 0x5d
   1c10c:	481c      	ldr	r0, [pc, #112]	; (1c180 <clear_event_registrations+0x158>)
   1c10e:	f000 fe85 	bl	1ce1c <assert_post_action>
   1c112:	f387 8811 	msr	BASEPRI, r7
   1c116:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1c11a:	f04f 0320 	mov.w	r3, #32
   1c11e:	f3ef 8711 	mrs	r7, BASEPRI
   1c122:	f383 8811 	msr	BASEPRI, r3
   1c126:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c12a:	4814      	ldr	r0, [pc, #80]	; (1c17c <clear_event_registrations+0x154>)
   1c12c:	f7ff f9aa 	bl	1b484 <z_spin_lock_valid>
   1c130:	b968      	cbnz	r0, 1c14e <clear_event_registrations+0x126>
   1c132:	234a      	movs	r3, #74	; 0x4a
   1c134:	4a12      	ldr	r2, [pc, #72]	; (1c180 <clear_event_registrations+0x158>)
   1c136:	4915      	ldr	r1, [pc, #84]	; (1c18c <clear_event_registrations+0x164>)
   1c138:	4630      	mov	r0, r6
   1c13a:	f000 fe3d 	bl	1cdb8 <printk>
   1c13e:	490f      	ldr	r1, [pc, #60]	; (1c17c <clear_event_registrations+0x154>)
   1c140:	4813      	ldr	r0, [pc, #76]	; (1c190 <clear_event_registrations+0x168>)
   1c142:	f000 fe39 	bl	1cdb8 <printk>
   1c146:	214a      	movs	r1, #74	; 0x4a
   1c148:	480d      	ldr	r0, [pc, #52]	; (1c180 <clear_event_registrations+0x158>)
   1c14a:	f000 fe67 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1c14e:	480b      	ldr	r0, [pc, #44]	; (1c17c <clear_event_registrations+0x154>)
   1c150:	f7ff f9b6 	bl	1b4c0 <z_spin_lock_set_owner>
	return k;
   1c154:	3c14      	subs	r4, #20
   1c156:	e772      	b.n	1c03e <clear_event_registrations+0x16>
   1c158:	000208c8 	.word	0x000208c8
   1c15c:	0001f722 	.word	0x0001f722
   1c160:	0002077b 	.word	0x0002077b
   1c164:	00020795 	.word	0x00020795
   1c168:	000207aa 	.word	0x000207aa
   1c16c:	000207c6 	.word	0x000207c6
   1c170:	000207d7 	.word	0x000207d7
   1c174:	000207f4 	.word	0x000207f4
   1c178:	0002080b 	.word	0x0002080b
   1c17c:	20024f20 	.word	0x20024f20
   1c180:	0001f904 	.word	0x0001f904
   1c184:	0001f950 	.word	0x0001f950
   1c188:	0001f967 	.word	0x0001f967
   1c18c:	0001f923 	.word	0x0001f923
   1c190:	0001f938 	.word	0x0001f938
   1c194:	00020517 	.word	0x00020517

0001c198 <register_events>:
{
   1c198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1c19c:	2700      	movs	r7, #0
{
   1c19e:	468a      	mov	sl, r1
   1c1a0:	4615      	mov	r5, r2
   1c1a2:	4604      	mov	r4, r0
	int events_registered = 0;
   1c1a4:	46b9      	mov	r9, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c1a6:	4e69      	ldr	r6, [pc, #420]	; (1c34c <register_events+0x1b4>)
   1c1a8:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 1c38c <register_events+0x1f4>
{
   1c1ac:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   1c1ae:	4557      	cmp	r7, sl
   1c1b0:	db03      	blt.n	1c1ba <register_events+0x22>
}
   1c1b2:	4648      	mov	r0, r9
   1c1b4:	b003      	add	sp, #12
   1c1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c1ba:	f04f 0320 	mov.w	r3, #32
   1c1be:	f3ef 8b11 	mrs	fp, BASEPRI
   1c1c2:	f383 8811 	msr	BASEPRI, r3
   1c1c6:	f3bf 8f6f 	isb	sy
   1c1ca:	4630      	mov	r0, r6
   1c1cc:	f7ff f95a 	bl	1b484 <z_spin_lock_valid>
   1c1d0:	b968      	cbnz	r0, 1c1ee <register_events+0x56>
   1c1d2:	234a      	movs	r3, #74	; 0x4a
   1c1d4:	4642      	mov	r2, r8
   1c1d6:	495e      	ldr	r1, [pc, #376]	; (1c350 <register_events+0x1b8>)
   1c1d8:	485e      	ldr	r0, [pc, #376]	; (1c354 <register_events+0x1bc>)
   1c1da:	f000 fded 	bl	1cdb8 <printk>
   1c1de:	4631      	mov	r1, r6
   1c1e0:	485d      	ldr	r0, [pc, #372]	; (1c358 <register_events+0x1c0>)
   1c1e2:	f000 fde9 	bl	1cdb8 <printk>
   1c1e6:	214a      	movs	r1, #74	; 0x4a
   1c1e8:	4640      	mov	r0, r8
   1c1ea:	f000 fe17 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1c1ee:	4630      	mov	r0, r6
   1c1f0:	f7ff f966 	bl	1b4c0 <z_spin_lock_set_owner>
	switch (event->type) {
   1c1f4:	7b63      	ldrb	r3, [r4, #13]
   1c1f6:	f003 030f 	and.w	r3, r3, #15
   1c1fa:	2b04      	cmp	r3, #4
   1c1fc:	d844      	bhi.n	1c288 <register_events+0xf0>
   1c1fe:	e8df f003 	tbb	[pc, r3]
   1c202:	3d2d      	.short	0x3d2d
   1c204:	4303      	.short	0x4303
   1c206:	2a          	.byte	0x2a
   1c207:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0) {
   1c208:	6923      	ldr	r3, [r4, #16]
   1c20a:	689b      	ldr	r3, [r3, #8]
   1c20c:	b333      	cbz	r3, 1c25c <register_events+0xc4>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1c20e:	2202      	movs	r2, #2
	event->poller = NULL;
   1c210:	2100      	movs	r1, #0
	event->state |= state;
   1c212:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
   1c214:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   1c216:	f3c3 3004 	ubfx	r0, r3, #12, #5
   1c21a:	4302      	orrs	r2, r0
   1c21c:	f362 3310 	bfi	r3, r2, #12, #5
   1c220:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   1c222:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c224:	4630      	mov	r0, r6
   1c226:	f7ff f93b 	bl	1b4a0 <z_spin_unlock_valid>
   1c22a:	b968      	cbnz	r0, 1c248 <register_events+0xb0>
   1c22c:	235d      	movs	r3, #93	; 0x5d
   1c22e:	4642      	mov	r2, r8
   1c230:	494a      	ldr	r1, [pc, #296]	; (1c35c <register_events+0x1c4>)
   1c232:	4848      	ldr	r0, [pc, #288]	; (1c354 <register_events+0x1bc>)
   1c234:	f000 fdc0 	bl	1cdb8 <printk>
   1c238:	4631      	mov	r1, r6
   1c23a:	4849      	ldr	r0, [pc, #292]	; (1c360 <register_events+0x1c8>)
   1c23c:	f000 fdbc 	bl	1cdb8 <printk>
   1c240:	215d      	movs	r1, #93	; 0x5d
   1c242:	4640      	mov	r0, r8
   1c244:	f000 fdea 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1c248:	f38b 8811 	msr	BASEPRI, fp
   1c24c:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1c250:	3701      	adds	r7, #1
   1c252:	3414      	adds	r4, #20
   1c254:	e7ab      	b.n	1c1ae <register_events+0x16>
		if (!k_queue_is_empty(event->queue)) {
   1c256:	6923      	ldr	r3, [r4, #16]
   1c258:	681b      	ldr	r3, [r3, #0]
   1c25a:	bb33      	cbnz	r3, 1c2aa <register_events+0x112>
		} else if (!just_check && poller->is_polling) {
   1c25c:	9b01      	ldr	r3, [sp, #4]
   1c25e:	2b00      	cmp	r3, #0
   1c260:	d1e0      	bne.n	1c224 <register_events+0x8c>
   1c262:	782b      	ldrb	r3, [r5, #0]
   1c264:	2b00      	cmp	r3, #0
   1c266:	d0dd      	beq.n	1c224 <register_events+0x8c>
	switch (event->type) {
   1c268:	7b63      	ldrb	r3, [r4, #13]
   1c26a:	f003 030f 	and.w	r3, r3, #15
   1c26e:	2b04      	cmp	r3, #4
   1c270:	d85d      	bhi.n	1c32e <register_events+0x196>
   1c272:	e8df f003 	tbb	[pc, r3]
   1c276:	4931      	.short	0x4931
   1c278:	5c1c      	.short	0x5c1c
   1c27a:	35          	.byte	0x35
   1c27b:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   1c27c:	6923      	ldr	r3, [r4, #16]
   1c27e:	689b      	ldr	r3, [r3, #8]
   1c280:	2b00      	cmp	r3, #0
   1c282:	d0eb      	beq.n	1c25c <register_events+0xc4>
			*state = K_POLL_STATE_SIGNALED;
   1c284:	2201      	movs	r2, #1
   1c286:	e7c3      	b.n	1c210 <register_events+0x78>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   1c288:	2350      	movs	r3, #80	; 0x50
   1c28a:	4a36      	ldr	r2, [pc, #216]	; (1c364 <register_events+0x1cc>)
   1c28c:	4936      	ldr	r1, [pc, #216]	; (1c368 <register_events+0x1d0>)
   1c28e:	4831      	ldr	r0, [pc, #196]	; (1c354 <register_events+0x1bc>)
   1c290:	f000 fd92 	bl	1cdb8 <printk>
   1c294:	7b61      	ldrb	r1, [r4, #13]
   1c296:	4835      	ldr	r0, [pc, #212]	; (1c36c <register_events+0x1d4>)
   1c298:	f001 010f 	and.w	r1, r1, #15
   1c29c:	f000 fd8c 	bl	1cdb8 <printk>
   1c2a0:	2150      	movs	r1, #80	; 0x50
   1c2a2:	4830      	ldr	r0, [pc, #192]	; (1c364 <register_events+0x1cc>)
   1c2a4:	f000 fdba 	bl	1ce1c <assert_post_action>
		break;
   1c2a8:	e7d8      	b.n	1c25c <register_events+0xc4>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1c2aa:	2204      	movs	r2, #4
   1c2ac:	e7b0      	b.n	1c210 <register_events+0x78>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1c2ae:	6923      	ldr	r3, [r4, #16]
   1c2b0:	b963      	cbnz	r3, 1c2cc <register_events+0x134>
   1c2b2:	492f      	ldr	r1, [pc, #188]	; (1c370 <register_events+0x1d8>)
   1c2b4:	2375      	movs	r3, #117	; 0x75
   1c2b6:	4a2b      	ldr	r2, [pc, #172]	; (1c364 <register_events+0x1cc>)
   1c2b8:	4826      	ldr	r0, [pc, #152]	; (1c354 <register_events+0x1bc>)
   1c2ba:	f000 fd7d 	bl	1cdb8 <printk>
   1c2be:	482d      	ldr	r0, [pc, #180]	; (1c374 <register_events+0x1dc>)
   1c2c0:	f000 fd7a 	bl	1cdb8 <printk>
   1c2c4:	2175      	movs	r1, #117	; 0x75
   1c2c6:	4827      	ldr	r0, [pc, #156]	; (1c364 <register_events+0x1cc>)
   1c2c8:	f000 fda8 	bl	1ce1c <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   1c2cc:	462a      	mov	r2, r5
   1c2ce:	4621      	mov	r1, r4
   1c2d0:	6920      	ldr	r0, [r4, #16]
   1c2d2:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   1c2d4:	f002 fb9b 	bl	1ea0e <add_event>
	event->poller = poller;
   1c2d8:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   1c2da:	f109 0901 	add.w	r9, r9, #1
   1c2de:	e7a1      	b.n	1c224 <register_events+0x8c>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1c2e0:	6923      	ldr	r3, [r4, #16]
   1c2e2:	b963      	cbnz	r3, 1c2fe <register_events+0x166>
   1c2e4:	4924      	ldr	r1, [pc, #144]	; (1c378 <register_events+0x1e0>)
   1c2e6:	2379      	movs	r3, #121	; 0x79
   1c2e8:	4a1e      	ldr	r2, [pc, #120]	; (1c364 <register_events+0x1cc>)
   1c2ea:	481a      	ldr	r0, [pc, #104]	; (1c354 <register_events+0x1bc>)
   1c2ec:	f000 fd64 	bl	1cdb8 <printk>
   1c2f0:	4822      	ldr	r0, [pc, #136]	; (1c37c <register_events+0x1e4>)
   1c2f2:	f000 fd61 	bl	1cdb8 <printk>
   1c2f6:	2179      	movs	r1, #121	; 0x79
   1c2f8:	481a      	ldr	r0, [pc, #104]	; (1c364 <register_events+0x1cc>)
   1c2fa:	f000 fd8f 	bl	1ce1c <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   1c2fe:	6920      	ldr	r0, [r4, #16]
   1c300:	462a      	mov	r2, r5
   1c302:	4621      	mov	r1, r4
   1c304:	300c      	adds	r0, #12
   1c306:	e7e5      	b.n	1c2d4 <register_events+0x13c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1c308:	6923      	ldr	r3, [r4, #16]
   1c30a:	b963      	cbnz	r3, 1c326 <register_events+0x18e>
   1c30c:	491c      	ldr	r1, [pc, #112]	; (1c380 <register_events+0x1e8>)
   1c30e:	237d      	movs	r3, #125	; 0x7d
   1c310:	4a14      	ldr	r2, [pc, #80]	; (1c364 <register_events+0x1cc>)
   1c312:	4810      	ldr	r0, [pc, #64]	; (1c354 <register_events+0x1bc>)
   1c314:	f000 fd50 	bl	1cdb8 <printk>
   1c318:	481a      	ldr	r0, [pc, #104]	; (1c384 <register_events+0x1ec>)
   1c31a:	f000 fd4d 	bl	1cdb8 <printk>
   1c31e:	217d      	movs	r1, #125	; 0x7d
   1c320:	4810      	ldr	r0, [pc, #64]	; (1c364 <register_events+0x1cc>)
   1c322:	f000 fd7b 	bl	1ce1c <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   1c326:	462a      	mov	r2, r5
   1c328:	4621      	mov	r1, r4
   1c32a:	6920      	ldr	r0, [r4, #16]
   1c32c:	e7d2      	b.n	1c2d4 <register_events+0x13c>
		__ASSERT(false, "invalid event type\n");
   1c32e:	2384      	movs	r3, #132	; 0x84
   1c330:	4a0c      	ldr	r2, [pc, #48]	; (1c364 <register_events+0x1cc>)
   1c332:	490d      	ldr	r1, [pc, #52]	; (1c368 <register_events+0x1d0>)
   1c334:	4807      	ldr	r0, [pc, #28]	; (1c354 <register_events+0x1bc>)
   1c336:	f000 fd3f 	bl	1cdb8 <printk>
   1c33a:	4813      	ldr	r0, [pc, #76]	; (1c388 <register_events+0x1f0>)
   1c33c:	f000 fd3c 	bl	1cdb8 <printk>
   1c340:	2184      	movs	r1, #132	; 0x84
   1c342:	4808      	ldr	r0, [pc, #32]	; (1c364 <register_events+0x1cc>)
   1c344:	f000 fd6a 	bl	1ce1c <assert_post_action>
		break;
   1c348:	e7c6      	b.n	1c2d8 <register_events+0x140>
   1c34a:	bf00      	nop
   1c34c:	20024f20 	.word	0x20024f20
   1c350:	0001f923 	.word	0x0001f923
   1c354:	0001f722 	.word	0x0001f722
   1c358:	0001f938 	.word	0x0001f938
   1c35c:	0001f950 	.word	0x0001f950
   1c360:	0001f967 	.word	0x0001f967
   1c364:	000208c8 	.word	0x000208c8
   1c368:	00020517 	.word	0x00020517
   1c36c:	00020917 	.word	0x00020917
   1c370:	0002077b 	.word	0x0002077b
   1c374:	00020795 	.word	0x00020795
   1c378:	000207aa 	.word	0x000207aa
   1c37c:	000207c6 	.word	0x000207c6
   1c380:	000207d7 	.word	0x000207d7
   1c384:	000207f4 	.word	0x000207f4
   1c388:	0002080b 	.word	0x0002080b
   1c38c:	0001f904 	.word	0x0001f904

0001c390 <k_poll_event_init>:
{
   1c390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c392:	4604      	mov	r4, r0
   1c394:	460f      	mov	r7, r1
   1c396:	461d      	mov	r5, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   1c398:	4616      	mov	r6, r2
   1c39a:	b162      	cbz	r2, 1c3b6 <k_poll_event_init+0x26>
   1c39c:	491c      	ldr	r1, [pc, #112]	; (1c410 <k_poll_event_init+0x80>)
   1c39e:	232a      	movs	r3, #42	; 0x2a
   1c3a0:	4a1c      	ldr	r2, [pc, #112]	; (1c414 <k_poll_event_init+0x84>)
   1c3a2:	481d      	ldr	r0, [pc, #116]	; (1c418 <k_poll_event_init+0x88>)
   1c3a4:	f000 fd08 	bl	1cdb8 <printk>
   1c3a8:	481c      	ldr	r0, [pc, #112]	; (1c41c <k_poll_event_init+0x8c>)
   1c3aa:	f000 fd05 	bl	1cdb8 <printk>
   1c3ae:	212a      	movs	r1, #42	; 0x2a
   1c3b0:	4818      	ldr	r0, [pc, #96]	; (1c414 <k_poll_event_init+0x84>)
   1c3b2:	f000 fd33 	bl	1ce1c <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   1c3b6:	2f0f      	cmp	r7, #15
   1c3b8:	d90c      	bls.n	1c3d4 <k_poll_event_init+0x44>
   1c3ba:	4919      	ldr	r1, [pc, #100]	; (1c420 <k_poll_event_init+0x90>)
   1c3bc:	232b      	movs	r3, #43	; 0x2b
   1c3be:	4a15      	ldr	r2, [pc, #84]	; (1c414 <k_poll_event_init+0x84>)
   1c3c0:	4815      	ldr	r0, [pc, #84]	; (1c418 <k_poll_event_init+0x88>)
   1c3c2:	f000 fcf9 	bl	1cdb8 <printk>
   1c3c6:	4817      	ldr	r0, [pc, #92]	; (1c424 <k_poll_event_init+0x94>)
   1c3c8:	f000 fcf6 	bl	1cdb8 <printk>
   1c3cc:	212b      	movs	r1, #43	; 0x2b
   1c3ce:	4811      	ldr	r0, [pc, #68]	; (1c414 <k_poll_event_init+0x84>)
   1c3d0:	f000 fd24 	bl	1ce1c <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   1c3d4:	b965      	cbnz	r5, 1c3f0 <k_poll_event_init+0x60>
   1c3d6:	4914      	ldr	r1, [pc, #80]	; (1c428 <k_poll_event_init+0x98>)
   1c3d8:	232c      	movs	r3, #44	; 0x2c
   1c3da:	4a0e      	ldr	r2, [pc, #56]	; (1c414 <k_poll_event_init+0x84>)
   1c3dc:	480e      	ldr	r0, [pc, #56]	; (1c418 <k_poll_event_init+0x88>)
   1c3de:	f000 fceb 	bl	1cdb8 <printk>
   1c3e2:	4812      	ldr	r0, [pc, #72]	; (1c42c <k_poll_event_init+0x9c>)
   1c3e4:	f000 fce8 	bl	1cdb8 <printk>
   1c3e8:	212c      	movs	r1, #44	; 0x2c
   1c3ea:	480a      	ldr	r0, [pc, #40]	; (1c414 <k_poll_event_init+0x84>)
   1c3ec:	f000 fd16 	bl	1ce1c <assert_post_action>
	event->type = type;
   1c3f0:	7b63      	ldrb	r3, [r4, #13]
   1c3f2:	f367 0303 	bfi	r3, r7, #0, #4
   1c3f6:	7363      	strb	r3, [r4, #13]
	event->mode = mode;
   1c3f8:	7ba3      	ldrb	r3, [r4, #14]
   1c3fa:	f366 0341 	bfi	r3, r6, #1, #1
   1c3fe:	73a3      	strb	r3, [r4, #14]
	event->poller = NULL;
   1c400:	2300      	movs	r3, #0
	event->state = K_POLL_STATE_NOT_READY;
   1c402:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   1c404:	60a3      	str	r3, [r4, #8]
	event->state = K_POLL_STATE_NOT_READY;
   1c406:	4b0a      	ldr	r3, [pc, #40]	; (1c430 <k_poll_event_init+0xa0>)
   1c408:	4013      	ands	r3, r2
	event->obj = obj;
   1c40a:	e9c4 3503 	strd	r3, r5, [r4, #12]
}
   1c40e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c410:	00020821 	.word	0x00020821
   1c414:	000208c8 	.word	0x000208c8
   1c418:	0001f722 	.word	0x0001f722
   1c41c:	00020841 	.word	0x00020841
   1c420:	00020867 	.word	0x00020867
   1c424:	0002088b 	.word	0x0002088b
   1c428:	0002089b 	.word	0x0002089b
   1c42c:	000208ae 	.word	0x000208ae
   1c430:	00020fff 	.word	0x00020fff

0001c434 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   1c434:	2301      	movs	r3, #1
{
   1c436:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c438:	b087      	sub	sp, #28
	struct _poller poller = { .is_polling = true,
   1c43a:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   1c43e:	4b70      	ldr	r3, [pc, #448]	; (1c600 <z_impl_k_poll+0x1cc>)
{
   1c440:	4604      	mov	r4, r0
	struct _poller poller = { .is_polling = true,
   1c442:	689b      	ldr	r3, [r3, #8]
{
   1c444:	460d      	mov	r5, r1
	struct _poller poller = { .is_polling = true,
   1c446:	9304      	str	r3, [sp, #16]
   1c448:	4b6e      	ldr	r3, [pc, #440]	; (1c604 <z_impl_k_poll+0x1d0>)
{
   1c44a:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   1c44c:	9305      	str	r3, [sp, #20]
   1c44e:	f3ef 8305 	mrs	r3, IPSR
				  .cb         = k_poll_poller_cb };

	__ASSERT(!arch_is_in_isr(), "");
   1c452:	b163      	cbz	r3, 1c46e <z_impl_k_poll+0x3a>
   1c454:	496c      	ldr	r1, [pc, #432]	; (1c608 <z_impl_k_poll+0x1d4>)
   1c456:	23ff      	movs	r3, #255	; 0xff
   1c458:	4a6c      	ldr	r2, [pc, #432]	; (1c60c <z_impl_k_poll+0x1d8>)
   1c45a:	486d      	ldr	r0, [pc, #436]	; (1c610 <z_impl_k_poll+0x1dc>)
   1c45c:	f000 fcac 	bl	1cdb8 <printk>
   1c460:	486c      	ldr	r0, [pc, #432]	; (1c614 <z_impl_k_poll+0x1e0>)
   1c462:	f000 fca9 	bl	1cdb8 <printk>
   1c466:	21ff      	movs	r1, #255	; 0xff
   1c468:	4868      	ldr	r0, [pc, #416]	; (1c60c <z_impl_k_poll+0x1d8>)
   1c46a:	f000 fcd7 	bl	1ce1c <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   1c46e:	b974      	cbnz	r4, 1c48e <z_impl_k_poll+0x5a>
   1c470:	4969      	ldr	r1, [pc, #420]	; (1c618 <z_impl_k_poll+0x1e4>)
   1c472:	f44f 7380 	mov.w	r3, #256	; 0x100
   1c476:	4a65      	ldr	r2, [pc, #404]	; (1c60c <z_impl_k_poll+0x1d8>)
   1c478:	4865      	ldr	r0, [pc, #404]	; (1c610 <z_impl_k_poll+0x1dc>)
   1c47a:	f000 fc9d 	bl	1cdb8 <printk>
   1c47e:	4867      	ldr	r0, [pc, #412]	; (1c61c <z_impl_k_poll+0x1e8>)
   1c480:	f000 fc9a 	bl	1cdb8 <printk>
   1c484:	f44f 7180 	mov.w	r1, #256	; 0x100
   1c488:	4860      	ldr	r0, [pc, #384]	; (1c60c <z_impl_k_poll+0x1d8>)
   1c48a:	f000 fcc7 	bl	1ce1c <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   1c48e:	2d00      	cmp	r5, #0
   1c490:	da0e      	bge.n	1c4b0 <z_impl_k_poll+0x7c>
   1c492:	4963      	ldr	r1, [pc, #396]	; (1c620 <z_impl_k_poll+0x1ec>)
   1c494:	f240 1301 	movw	r3, #257	; 0x101
   1c498:	4a5c      	ldr	r2, [pc, #368]	; (1c60c <z_impl_k_poll+0x1d8>)
   1c49a:	485d      	ldr	r0, [pc, #372]	; (1c610 <z_impl_k_poll+0x1dc>)
   1c49c:	f000 fc8c 	bl	1cdb8 <printk>
   1c4a0:	4860      	ldr	r0, [pc, #384]	; (1c624 <z_impl_k_poll+0x1f0>)
   1c4a2:	f000 fc89 	bl	1cdb8 <printk>
   1c4a6:	f240 1101 	movw	r1, #257	; 0x101
   1c4aa:	4858      	ldr	r0, [pc, #352]	; (1c60c <z_impl_k_poll+0x1d8>)
   1c4ac:	f000 fcb6 	bl	1ce1c <assert_post_action>

	events_registered = register_events(events, num_events, &poller,
   1c4b0:	fab6 f386 	clz	r3, r6
   1c4b4:	aa03      	add	r2, sp, #12
   1c4b6:	095b      	lsrs	r3, r3, #5
   1c4b8:	4629      	mov	r1, r5
   1c4ba:	4620      	mov	r0, r4
   1c4bc:	f7ff fe6c 	bl	1c198 <register_events>
   1c4c0:	4607      	mov	r7, r0
	__asm__ volatile(
   1c4c2:	f04f 0320 	mov.w	r3, #32
   1c4c6:	f3ef 8511 	mrs	r5, BASEPRI
   1c4ca:	f383 8811 	msr	BASEPRI, r3
   1c4ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c4d2:	4855      	ldr	r0, [pc, #340]	; (1c628 <z_impl_k_poll+0x1f4>)
   1c4d4:	f7fe ffd6 	bl	1b484 <z_spin_lock_valid>
   1c4d8:	b968      	cbnz	r0, 1c4f6 <z_impl_k_poll+0xc2>
   1c4da:	234a      	movs	r3, #74	; 0x4a
   1c4dc:	4a53      	ldr	r2, [pc, #332]	; (1c62c <z_impl_k_poll+0x1f8>)
   1c4de:	4954      	ldr	r1, [pc, #336]	; (1c630 <z_impl_k_poll+0x1fc>)
   1c4e0:	484b      	ldr	r0, [pc, #300]	; (1c610 <z_impl_k_poll+0x1dc>)
   1c4e2:	f000 fc69 	bl	1cdb8 <printk>
   1c4e6:	4950      	ldr	r1, [pc, #320]	; (1c628 <z_impl_k_poll+0x1f4>)
   1c4e8:	4852      	ldr	r0, [pc, #328]	; (1c634 <z_impl_k_poll+0x200>)
   1c4ea:	f000 fc65 	bl	1cdb8 <printk>
   1c4ee:	214a      	movs	r1, #74	; 0x4a
   1c4f0:	484e      	ldr	r0, [pc, #312]	; (1c62c <z_impl_k_poll+0x1f8>)
   1c4f2:	f000 fc93 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1c4f6:	484c      	ldr	r0, [pc, #304]	; (1c628 <z_impl_k_poll+0x1f4>)
   1c4f8:	f7fe ffe2 	bl	1b4c0 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   1c4fc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1c500:	b9f3      	cbnz	r3, 1c540 <z_impl_k_poll+0x10c>
		clear_event_registrations(events, events_registered, key);
   1c502:	4620      	mov	r0, r4
   1c504:	462a      	mov	r2, r5
   1c506:	4639      	mov	r1, r7
   1c508:	f7ff fd8e 	bl	1c028 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c50c:	4846      	ldr	r0, [pc, #280]	; (1c628 <z_impl_k_poll+0x1f4>)
   1c50e:	f7fe ffc7 	bl	1b4a0 <z_spin_unlock_valid>
   1c512:	b968      	cbnz	r0, 1c530 <z_impl_k_poll+0xfc>
   1c514:	235d      	movs	r3, #93	; 0x5d
   1c516:	4a45      	ldr	r2, [pc, #276]	; (1c62c <z_impl_k_poll+0x1f8>)
   1c518:	4947      	ldr	r1, [pc, #284]	; (1c638 <z_impl_k_poll+0x204>)
   1c51a:	483d      	ldr	r0, [pc, #244]	; (1c610 <z_impl_k_poll+0x1dc>)
   1c51c:	f000 fc4c 	bl	1cdb8 <printk>
   1c520:	4941      	ldr	r1, [pc, #260]	; (1c628 <z_impl_k_poll+0x1f4>)
   1c522:	4846      	ldr	r0, [pc, #280]	; (1c63c <z_impl_k_poll+0x208>)
   1c524:	f000 fc48 	bl	1cdb8 <printk>
   1c528:	215d      	movs	r1, #93	; 0x5d
   1c52a:	4840      	ldr	r0, [pc, #256]	; (1c62c <z_impl_k_poll+0x1f8>)
   1c52c:	f000 fc76 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1c530:	f385 8811 	msr	BASEPRI, r5
   1c534:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		return 0;
   1c538:	2500      	movs	r5, #0
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   1c53a:	4628      	mov	r0, r5
   1c53c:	b007      	add	sp, #28
   1c53e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	poller.is_polling = false;
   1c540:	2300      	movs	r3, #0
   1c542:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   1c546:	b9c6      	cbnz	r6, 1c57a <z_impl_k_poll+0x146>
   1c548:	4837      	ldr	r0, [pc, #220]	; (1c628 <z_impl_k_poll+0x1f4>)
   1c54a:	f7fe ffa9 	bl	1b4a0 <z_spin_unlock_valid>
   1c54e:	b968      	cbnz	r0, 1c56c <z_impl_k_poll+0x138>
   1c550:	235d      	movs	r3, #93	; 0x5d
   1c552:	4a36      	ldr	r2, [pc, #216]	; (1c62c <z_impl_k_poll+0x1f8>)
   1c554:	4938      	ldr	r1, [pc, #224]	; (1c638 <z_impl_k_poll+0x204>)
   1c556:	482e      	ldr	r0, [pc, #184]	; (1c610 <z_impl_k_poll+0x1dc>)
   1c558:	f000 fc2e 	bl	1cdb8 <printk>
   1c55c:	4932      	ldr	r1, [pc, #200]	; (1c628 <z_impl_k_poll+0x1f4>)
   1c55e:	4837      	ldr	r0, [pc, #220]	; (1c63c <z_impl_k_poll+0x208>)
   1c560:	f000 fc2a 	bl	1cdb8 <printk>
   1c564:	215d      	movs	r1, #93	; 0x5d
   1c566:	4831      	ldr	r0, [pc, #196]	; (1c62c <z_impl_k_poll+0x1f8>)
   1c568:	f000 fc58 	bl	1ce1c <assert_post_action>
   1c56c:	f385 8811 	msr	BASEPRI, r5
   1c570:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1c574:	f06f 050a 	mvn.w	r5, #10
   1c578:	e7df      	b.n	1c53a <z_impl_k_poll+0x106>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1c57a:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c57c:	4629      	mov	r1, r5
   1c57e:	4633      	mov	r3, r6
   1c580:	4829      	ldr	r0, [pc, #164]	; (1c628 <z_impl_k_poll+0x1f4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1c582:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c586:	f7fe fba3 	bl	1acd0 <z_pend_curr>
   1c58a:	4605      	mov	r5, r0
	__asm__ volatile(
   1c58c:	f04f 0320 	mov.w	r3, #32
   1c590:	f3ef 8611 	mrs	r6, BASEPRI
   1c594:	f383 8811 	msr	BASEPRI, r3
   1c598:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c59c:	4822      	ldr	r0, [pc, #136]	; (1c628 <z_impl_k_poll+0x1f4>)
   1c59e:	f7fe ff71 	bl	1b484 <z_spin_lock_valid>
   1c5a2:	b968      	cbnz	r0, 1c5c0 <z_impl_k_poll+0x18c>
   1c5a4:	234a      	movs	r3, #74	; 0x4a
   1c5a6:	4a21      	ldr	r2, [pc, #132]	; (1c62c <z_impl_k_poll+0x1f8>)
   1c5a8:	4921      	ldr	r1, [pc, #132]	; (1c630 <z_impl_k_poll+0x1fc>)
   1c5aa:	4819      	ldr	r0, [pc, #100]	; (1c610 <z_impl_k_poll+0x1dc>)
   1c5ac:	f000 fc04 	bl	1cdb8 <printk>
   1c5b0:	491d      	ldr	r1, [pc, #116]	; (1c628 <z_impl_k_poll+0x1f4>)
   1c5b2:	4820      	ldr	r0, [pc, #128]	; (1c634 <z_impl_k_poll+0x200>)
   1c5b4:	f000 fc00 	bl	1cdb8 <printk>
   1c5b8:	214a      	movs	r1, #74	; 0x4a
   1c5ba:	481c      	ldr	r0, [pc, #112]	; (1c62c <z_impl_k_poll+0x1f8>)
   1c5bc:	f000 fc2e 	bl	1ce1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1c5c0:	4819      	ldr	r0, [pc, #100]	; (1c628 <z_impl_k_poll+0x1f4>)
   1c5c2:	f7fe ff7d 	bl	1b4c0 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   1c5c6:	4620      	mov	r0, r4
   1c5c8:	4632      	mov	r2, r6
   1c5ca:	4639      	mov	r1, r7
   1c5cc:	f7ff fd2c 	bl	1c028 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c5d0:	4815      	ldr	r0, [pc, #84]	; (1c628 <z_impl_k_poll+0x1f4>)
   1c5d2:	f7fe ff65 	bl	1b4a0 <z_spin_unlock_valid>
   1c5d6:	b968      	cbnz	r0, 1c5f4 <z_impl_k_poll+0x1c0>
   1c5d8:	235d      	movs	r3, #93	; 0x5d
   1c5da:	4a14      	ldr	r2, [pc, #80]	; (1c62c <z_impl_k_poll+0x1f8>)
   1c5dc:	4916      	ldr	r1, [pc, #88]	; (1c638 <z_impl_k_poll+0x204>)
   1c5de:	480c      	ldr	r0, [pc, #48]	; (1c610 <z_impl_k_poll+0x1dc>)
   1c5e0:	f000 fbea 	bl	1cdb8 <printk>
   1c5e4:	4910      	ldr	r1, [pc, #64]	; (1c628 <z_impl_k_poll+0x1f4>)
   1c5e6:	4815      	ldr	r0, [pc, #84]	; (1c63c <z_impl_k_poll+0x208>)
   1c5e8:	f000 fbe6 	bl	1cdb8 <printk>
   1c5ec:	215d      	movs	r1, #93	; 0x5d
   1c5ee:	480f      	ldr	r0, [pc, #60]	; (1c62c <z_impl_k_poll+0x1f8>)
   1c5f0:	f000 fc14 	bl	1ce1c <assert_post_action>
	__asm__ volatile(
   1c5f4:	f386 8811 	msr	BASEPRI, r6
   1c5f8:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1c5fc:	e79d      	b.n	1c53a <z_impl_k_poll+0x106>
   1c5fe:	bf00      	nop
   1c600:	20024e04 	.word	0x20024e04
   1c604:	0001bfb9 	.word	0x0001bfb9
   1c608:	000204b7 	.word	0x000204b7
   1c60c:	000208c8 	.word	0x000208c8
   1c610:	0001f722 	.word	0x0001f722
   1c614:	0001fdcc 	.word	0x0001fdcc
   1c618:	00020934 	.word	0x00020934
   1c61c:	0002094a 	.word	0x0002094a
   1c620:	00020959 	.word	0x00020959
   1c624:	00020969 	.word	0x00020969
   1c628:	20024f20 	.word	0x20024f20
   1c62c:	0001f904 	.word	0x0001f904
   1c630:	0001f923 	.word	0x0001f923
   1c634:	0001f938 	.word	0x0001f938
   1c638:	0001f950 	.word	0x0001f950
   1c63c:	0001f967 	.word	0x0001f967

0001c640 <message_post>:
static int message_post(struct coap_resource *resource, struct coap_packet *request, struct sockaddr *addr, socklen_t addr_len) {
   1c640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c644:	460d      	mov	r5, r1
   1c646:	b087      	sub	sp, #28
	coap_endpoint *coap = resource->user_data;
   1c648:	6986      	ldr	r6, [r0, #24]
	const u8_t *payload = coap_packet_get_payload(request, &payload_len);
   1c64a:	f10d 0116 	add.w	r1, sp, #22
   1c64e:	4628      	mov	r0, r5
static int message_post(struct coap_resource *resource, struct coap_packet *request, struct sockaddr *addr, socklen_t addr_len) {
   1c650:	461f      	mov	r7, r3
   1c652:	4614      	mov	r4, r2
	const u8_t *payload = coap_packet_get_payload(request, &payload_len);
   1c654:	f000 fe93 	bl	1d37e <coap_packet_get_payload>
	u8_t *buf = k_calloc(payload_len + 1, 1);
   1c658:	2101      	movs	r1, #1
	const u8_t *payload = coap_packet_get_payload(request, &payload_len);
   1c65a:	4681      	mov	r9, r0
	u8_t *buf = k_calloc(payload_len + 1, 1);
   1c65c:	f8bd 0016 	ldrh.w	r0, [sp, #22]
   1c660:	4408      	add	r0, r1
   1c662:	f002 f8a5 	bl	1e7b0 <k_calloc>
   1c666:	4680      	mov	r8, r0
	memcpy(buf, payload, payload_len);
   1c668:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1c66c:	4649      	mov	r1, r9
   1c66e:	f001 f8f5 	bl	1d85c <memcpy>
	k_free(buf);
   1c672:	4640      	mov	r0, r8
   1c674:	f002 f897 	bl	1e7a6 <k_free>
	int err = coap_endpoint_respond(coap, request, COAP_RESPONSE_CODE_CREATED, NULL, 0, addr, addr_len);
   1c678:	e9cd 4701 	strd	r4, r7, [sp, #4]
   1c67c:	2400      	movs	r4, #0
   1c67e:	2241      	movs	r2, #65	; 0x41
   1c680:	9400      	str	r4, [sp, #0]
   1c682:	4623      	mov	r3, r4
   1c684:	4629      	mov	r1, r5
   1c686:	4630      	mov	r0, r6
   1c688:	f000 f8a8 	bl	1c7dc <coap_endpoint_respond>
}
   1c68c:	4620      	mov	r0, r4
   1c68e:	b007      	add	sp, #28
   1c690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001c694 <free_inflight_packet>:
static void free_inflight_packet(coap_endpoint *ep, inflight_packet *inflight) {
   1c694:	b570      	push	{r4, r5, r6, lr}
   1c696:	4604      	mov	r4, r0
	k_free(inflight->packet.data);
   1c698:	6848      	ldr	r0, [r1, #4]
static void free_inflight_packet(coap_endpoint *ep, inflight_packet *inflight) {
   1c69a:	460d      	mov	r5, r1
	k_free(inflight->packet.data);
   1c69c:	f002 f883 	bl	1e7a6 <k_free>
	for (int i = 0; i < ep->inflight_packets_len; i++) {
   1c6a0:	2200      	movs	r2, #0
		if (&ep->inflight_packets[i] == inflight) {
   1c6a2:	2144      	movs	r1, #68	; 0x44
	for (int i = 0; i < ep->inflight_packets_len; i++) {
   1c6a4:	68e3      	ldr	r3, [r4, #12]
   1c6a6:	4293      	cmp	r3, r2
   1c6a8:	d00c      	beq.n	1c6c4 <free_inflight_packet+0x30>
		if (&ep->inflight_packets[i] == inflight) {
   1c6aa:	68a0      	ldr	r0, [r4, #8]
   1c6ac:	fb01 0602 	mla	r6, r1, r2, r0
   1c6b0:	42b5      	cmp	r5, r6
   1c6b2:	d108      	bne.n	1c6c6 <free_inflight_packet+0x32>
			ep->inflight_packets_len--;
   1c6b4:	3b01      	subs	r3, #1
			ep->inflight_packets[i] = ep->inflight_packets[ep->inflight_packets_len];
   1c6b6:	fb01 0103 	mla	r1, r1, r3, r0
			ep->inflight_packets_len--;
   1c6ba:	60e3      	str	r3, [r4, #12]
			ep->inflight_packets[i] = ep->inflight_packets[ep->inflight_packets_len];
   1c6bc:	2244      	movs	r2, #68	; 0x44
   1c6be:	4628      	mov	r0, r5
   1c6c0:	f001 f8cc 	bl	1d85c <memcpy>
}
   1c6c4:	bd70      	pop	{r4, r5, r6, pc}
	for (int i = 0; i < ep->inflight_packets_len; i++) {
   1c6c6:	3201      	adds	r2, #1
   1c6c8:	e7ed      	b.n	1c6a6 <free_inflight_packet+0x12>

0001c6ca <is_request>:
static bool is_request(const struct coap_packet *p) {
   1c6ca:	b508      	push	{r3, lr}
	u8_t code = coap_header_get_code(p);
   1c6cc:	f000 fe22 	bl	1d314 <coap_header_get_code>
	return (code & COAP_CODE_CLASS_MASK) == 0 && code != COAP_CODE_EMPTY;
   1c6d0:	f010 0fe0 	tst.w	r0, #224	; 0xe0
   1c6d4:	d103      	bne.n	1c6de <is_request+0x14>
   1c6d6:	3000      	adds	r0, #0
   1c6d8:	bf18      	it	ne
   1c6da:	2001      	movne	r0, #1
}
   1c6dc:	bd08      	pop	{r3, pc}
	return (code & COAP_CODE_CLASS_MASK) == 0 && code != COAP_CODE_EMPTY;
   1c6de:	2000      	movs	r0, #0
   1c6e0:	e7fc      	b.n	1c6dc <is_request+0x12>

0001c6e2 <coap_endpoint_acknowledge>:

int coap_endpoint_acknowledge(coap_endpoint *ep, struct coap_packet *packet, struct sockaddr *addr, socklen_t addr_len) {
   1c6e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c6e6:	4606      	mov	r6, r0
   1c6e8:	b08c      	sub	sp, #48	; 0x30
	if (coap_header_get_type(packet) != COAP_TYPE_CON) {
   1c6ea:	4608      	mov	r0, r1
int coap_endpoint_acknowledge(coap_endpoint *ep, struct coap_packet *packet, struct sockaddr *addr, socklen_t addr_len) {
   1c6ec:	460d      	mov	r5, r1
   1c6ee:	4617      	mov	r7, r2
   1c6f0:	4698      	mov	r8, r3
	if (coap_header_get_type(packet) != COAP_TYPE_CON) {
   1c6f2:	f000 fdf4 	bl	1d2de <coap_header_get_type>
   1c6f6:	4604      	mov	r4, r0
   1c6f8:	b118      	cbz	r0, 1c702 <coap_endpoint_acknowledge+0x20>
		return 0;
   1c6fa:	2000      	movs	r0, #0
		LOG_ERR("sendto: %d", errno);
		return -errno;
	}

	return 0;
}
   1c6fc:	b00c      	add	sp, #48	; 0x30
   1c6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	int err = coap_packet_init(&ack, data, sizeof(data), 1, COAP_TYPE_ACK, 0, NULL, COAP_CODE_EMPTY, coap_header_get_id(packet));
   1c702:	4628      	mov	r0, r5
   1c704:	f000 fe33 	bl	1d36e <coap_header_get_id>
   1c708:	2302      	movs	r3, #2
   1c70a:	e9cd 4003 	strd	r4, r0, [sp, #12]
   1c70e:	9300      	str	r3, [sp, #0]
   1c710:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1c714:	2301      	movs	r3, #1
   1c716:	2204      	movs	r2, #4
   1c718:	a907      	add	r1, sp, #28
   1c71a:	a808      	add	r0, sp, #32
   1c71c:	f000 fc8c 	bl	1d038 <coap_packet_init>
	if (err < 0) {
   1c720:	2800      	cmp	r0, #0
   1c722:	dbeb      	blt.n	1c6fc <coap_endpoint_acknowledge+0x1a>
	if (sendto(ep->sock, ack.data, ack.offset, 0, addr, addr_len) < 0) {
   1c724:	f8cd 8000 	str.w	r8, [sp]
   1c728:	463b      	mov	r3, r7
   1c72a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   1c72e:	9908      	ldr	r1, [sp, #32]
   1c730:	6830      	ldr	r0, [r6, #0]
   1c732:	f7f0 f803 	bl	c73c <sendto.constprop.1>
   1c736:	2800      	cmp	r0, #0
   1c738:	dadf      	bge.n	1c6fa <coap_endpoint_acknowledge+0x18>
   1c73a:	f7fc fcdb 	bl	190f4 <z_impl_z_errno>
		return -errno;
   1c73e:	6800      	ldr	r0, [r0, #0]
   1c740:	4240      	negs	r0, r0
   1c742:	e7db      	b.n	1c6fc <coap_endpoint_acknowledge+0x1a>

0001c744 <post_handler>:
void post_handler(void *p, int err, struct coap_packet *response) {
   1c744:	b538      	push	{r3, r4, r5, lr}
   1c746:	4604      	mov	r4, r0
   1c748:	4615      	mov	r5, r2
	if (err) {
   1c74a:	b129      	cbz	r1, 1c758 <post_handler+0x14>
		data->ret = err;
   1c74c:	61c1      	str	r1, [r0, #28]
	z_impl_k_sem_give(sem);
   1c74e:	1d20      	adds	r0, r4, #4
}
   1c750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1c754:	f7fe bd98 	b.w	1b288 <z_impl_k_sem_give>
		data->ret = coap_header_get_code(response);
   1c758:	4610      	mov	r0, r2
   1c75a:	f000 fddb 	bl	1d314 <coap_header_get_code>
		err = coap_endpoint_acknowledge(data->ep, response, data->addr, data->addr_len);
   1c75e:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
		data->ret = coap_header_get_code(response);
   1c762:	61e0      	str	r0, [r4, #28]
		err = coap_endpoint_acknowledge(data->ep, response, data->addr, data->addr_len);
   1c764:	4629      	mov	r1, r5
   1c766:	6820      	ldr	r0, [r4, #0]
   1c768:	f7ff ffbb 	bl	1c6e2 <coap_endpoint_acknowledge>
		if (err != 0) {
   1c76c:	e7ef      	b.n	1c74e <post_handler+0xa>

0001c76e <coap_endpoint_reset>:

int coap_endpoint_reset(coap_endpoint *ep, struct coap_packet *packet, struct sockaddr *addr, socklen_t addr_len) {
   1c76e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c770:	4605      	mov	r5, r0
   1c772:	b08d      	sub	sp, #52	; 0x34
	if (coap_header_get_type(packet) == COAP_TYPE_ACK || coap_header_get_type(packet) == COAP_TYPE_RESET) {
   1c774:	4608      	mov	r0, r1
int coap_endpoint_reset(coap_endpoint *ep, struct coap_packet *packet, struct sockaddr *addr, socklen_t addr_len) {
   1c776:	460c      	mov	r4, r1
   1c778:	4616      	mov	r6, r2
   1c77a:	461f      	mov	r7, r3
	if (coap_header_get_type(packet) == COAP_TYPE_ACK || coap_header_get_type(packet) == COAP_TYPE_RESET) {
   1c77c:	f000 fdaf 	bl	1d2de <coap_header_get_type>
   1c780:	2802      	cmp	r0, #2
   1c782:	d103      	bne.n	1c78c <coap_endpoint_reset+0x1e>
		LOG_ERR("coap_endpoint_reset must not be called for ACK or RESET packets");
		return -EINVAL;
   1c784:	f06f 0015 	mvn.w	r0, #21
		LOG_ERR("sendto: %d", errno);
		return -errno;
	}

	return 0;
}
   1c788:	b00d      	add	sp, #52	; 0x34
   1c78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (coap_header_get_type(packet) == COAP_TYPE_ACK || coap_header_get_type(packet) == COAP_TYPE_RESET) {
   1c78c:	4620      	mov	r0, r4
   1c78e:	f000 fda6 	bl	1d2de <coap_header_get_type>
   1c792:	2803      	cmp	r0, #3
   1c794:	d0f6      	beq.n	1c784 <coap_endpoint_reset+0x16>
	int err = coap_packet_init(&reset, data, sizeof(data), 1, COAP_TYPE_RESET, 0, NULL, COAP_CODE_EMPTY, coap_header_get_id(packet));
   1c796:	4620      	mov	r0, r4
   1c798:	f000 fde9 	bl	1d36e <coap_header_get_id>
   1c79c:	2400      	movs	r4, #0
   1c79e:	2303      	movs	r3, #3
   1c7a0:	9004      	str	r0, [sp, #16]
   1c7a2:	9300      	str	r3, [sp, #0]
   1c7a4:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1c7a8:	9401      	str	r4, [sp, #4]
   1c7aa:	2301      	movs	r3, #1
   1c7ac:	2204      	movs	r2, #4
   1c7ae:	a907      	add	r1, sp, #28
   1c7b0:	a808      	add	r0, sp, #32
   1c7b2:	f000 fc41 	bl	1d038 <coap_packet_init>
	if (err < 0) {
   1c7b6:	2800      	cmp	r0, #0
   1c7b8:	dbe6      	blt.n	1c788 <coap_endpoint_reset+0x1a>
	if (sendto(ep->sock, reset.data, reset.offset, 0, addr, addr_len) < 0) {
   1c7ba:	9700      	str	r7, [sp, #0]
   1c7bc:	4633      	mov	r3, r6
   1c7be:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   1c7c2:	9908      	ldr	r1, [sp, #32]
   1c7c4:	6828      	ldr	r0, [r5, #0]
   1c7c6:	f7ef ffb9 	bl	c73c <sendto.constprop.1>
   1c7ca:	42a0      	cmp	r0, r4
   1c7cc:	da04      	bge.n	1c7d8 <coap_endpoint_reset+0x6a>
   1c7ce:	f7fc fc91 	bl	190f4 <z_impl_z_errno>
		return -errno;
   1c7d2:	6800      	ldr	r0, [r0, #0]
   1c7d4:	4240      	negs	r0, r0
   1c7d6:	e7d7      	b.n	1c788 <coap_endpoint_reset+0x1a>
	return 0;
   1c7d8:	4620      	mov	r0, r4
   1c7da:	e7d5      	b.n	1c788 <coap_endpoint_reset+0x1a>

0001c7dc <coap_endpoint_respond>:

int coap_endpoint_respond(coap_endpoint *ep, struct coap_packet *request, enum coap_response_code code, u8_t *payload, u16_t payload_len, struct sockaddr *addr, socklen_t addr_len) {
   1c7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c7e0:	4681      	mov	r9, r0
   1c7e2:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
	struct coap_packet response;
	u8_t data[MAX_COAP_MSG_LEN];
	u8_t type = COAP_TYPE_ACK;
	if (coap_header_get_type(request) == COAP_TYPE_NON_CON) {
   1c7e6:	4608      	mov	r0, r1
int coap_endpoint_respond(coap_endpoint *ep, struct coap_packet *request, enum coap_response_code code, u8_t *payload, u16_t payload_len, struct sockaddr *addr, socklen_t addr_len) {
   1c7e8:	4693      	mov	fp, r2
   1c7ea:	460d      	mov	r5, r1
   1c7ec:	461e      	mov	r6, r3
   1c7ee:	f8bd 7258 	ldrh.w	r7, [sp, #600]	; 0x258
	if (coap_header_get_type(request) == COAP_TYPE_NON_CON) {
   1c7f2:	f000 fd74 	bl	1d2de <coap_header_get_type>
		type = COAP_TYPE_NON_CON;
	}
	u8_t token[8];
	int err = coap_packet_init(&response, data, sizeof(data), 1, type, coap_header_get_token(request, token), token, code, coap_header_get_id(request));
   1c7f6:	f10d 0818 	add.w	r8, sp, #24
	u8_t type = COAP_TYPE_ACK;
   1c7fa:	2801      	cmp	r0, #1
	if (coap_header_get_type(request) == COAP_TYPE_NON_CON) {
   1c7fc:	4604      	mov	r4, r0
	int err = coap_packet_init(&response, data, sizeof(data), 1, type, coap_header_get_token(request, token), token, code, coap_header_get_id(request));
   1c7fe:	4641      	mov	r1, r8
   1c800:	4628      	mov	r0, r5
	u8_t type = COAP_TYPE_ACK;
   1c802:	bf18      	it	ne
   1c804:	2402      	movne	r4, #2
	int err = coap_packet_init(&response, data, sizeof(data), 1, type, coap_header_get_token(request, token), token, code, coap_header_get_id(request));
   1c806:	f000 fd71 	bl	1d2ec <coap_header_get_token>
   1c80a:	4682      	mov	sl, r0
   1c80c:	4628      	mov	r0, r5
   1c80e:	f000 fdae 	bl	1d36e <coap_header_get_id>
   1c812:	e9cd a801 	strd	sl, r8, [sp, #4]
   1c816:	e9cd b003 	strd	fp, r0, [sp, #12]
   1c81a:	9400      	str	r4, [sp, #0]
   1c81c:	2301      	movs	r3, #1
   1c81e:	f44f 7200 	mov.w	r2, #512	; 0x200
   1c822:	a90c      	add	r1, sp, #48	; 0x30
   1c824:	a808      	add	r0, sp, #32
   1c826:	f000 fc07 	bl	1d038 <coap_packet_init>
	if (err < 0) {
   1c82a:	2800      	cmp	r0, #0
   1c82c:	db0d      	blt.n	1c84a <coap_endpoint_respond+0x6e>
		LOG_ERR("coap_packet_init: %d", err);
		return err;
	}

	if (payload != NULL && payload_len > 0) {
   1c82e:	b986      	cbnz	r6, 1c852 <coap_endpoint_respond+0x76>
			LOG_ERR("coap_packet_append_payload: %d", err);
			return err;
		}
	}

	if (sendto(ep->sock, response.data, response.offset, 0, addr, addr_len) < 0) {
   1c830:	9b98      	ldr	r3, [sp, #608]	; 0x260
   1c832:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   1c836:	9300      	str	r3, [sp, #0]
   1c838:	9908      	ldr	r1, [sp, #32]
   1c83a:	9b97      	ldr	r3, [sp, #604]	; 0x25c
   1c83c:	f8d9 0000 	ldr.w	r0, [r9]
   1c840:	f7ef ff7c 	bl	c73c <sendto.constprop.1>
   1c844:	2800      	cmp	r0, #0
   1c846:	db13      	blt.n	1c870 <coap_endpoint_respond+0x94>
		LOG_ERR("sendto: %d", errno);
		return -errno;
	}

	return 0;
   1c848:	2000      	movs	r0, #0
}
   1c84a:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
   1c84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (payload != NULL && payload_len > 0) {
   1c852:	2f00      	cmp	r7, #0
   1c854:	d0ec      	beq.n	1c830 <coap_endpoint_respond+0x54>
		err = coap_packet_append_payload_marker(&response);
   1c856:	a808      	add	r0, sp, #32
   1c858:	f000 fcc8 	bl	1d1ec <coap_packet_append_payload_marker>
		if (err < 0) {
   1c85c:	2800      	cmp	r0, #0
   1c85e:	dbf4      	blt.n	1c84a <coap_endpoint_respond+0x6e>
		err = coap_packet_append_payload(&response, payload, payload_len);
   1c860:	463a      	mov	r2, r7
   1c862:	4631      	mov	r1, r6
   1c864:	a808      	add	r0, sp, #32
   1c866:	f000 fccb 	bl	1d200 <coap_packet_append_payload>
		if (err < 0) {
   1c86a:	2800      	cmp	r0, #0
   1c86c:	dae0      	bge.n	1c830 <coap_endpoint_respond+0x54>
   1c86e:	e7ec      	b.n	1c84a <coap_endpoint_respond+0x6e>
   1c870:	f7fc fc40 	bl	190f4 <z_impl_z_errno>
		return -errno;
   1c874:	6800      	ldr	r0, [r0, #0]
   1c876:	4240      	negs	r0, r0
   1c878:	e7e7      	b.n	1c84a <coap_endpoint_respond+0x6e>

0001c87a <get_bit_ptr>:
{
   1c87a:	b570      	push	{r4, r5, r6, lr}
   1c87c:	250c      	movs	r5, #12
   1c87e:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   1c880:	f990 000b 	ldrsb.w	r0, [r0, #11]
   1c884:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
   1c886:	4288      	cmp	r0, r1
	*word = &bitarray[bn / 32];
   1c888:	4610      	mov	r0, r2
   1c88a:	eb06 0405 	add.w	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
   1c88e:	bfb8      	it	lt
   1c890:	5974      	ldrlt	r4, [r6, r5]
	*word = &bitarray[bn / 32];
   1c892:	2a00      	cmp	r2, #0
   1c894:	bfb8      	it	lt
   1c896:	f102 001f 	addlt.w	r0, r2, #31
   1c89a:	1140      	asrs	r0, r0, #5
   1c89c:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   1c8a0:	6019      	str	r1, [r3, #0]
}
   1c8a2:	f002 001f 	and.w	r0, r2, #31
   1c8a6:	bd70      	pop	{r4, r5, r6, pc}

0001c8a8 <pool_irq_lock.isra.2.part.3>:
	__asm__ volatile(
   1c8a8:	f04f 0320 	mov.w	r3, #32
   1c8ac:	f3ef 8011 	mrs	r0, BASEPRI
   1c8b0:	f383 8811 	msr	BASEPRI, r3
   1c8b4:	f3bf 8f6f 	isb	sy
}
   1c8b8:	4770      	bx	lr

0001c8ba <pool_irq_unlock.isra.4>:
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c8ba:	07c3      	lsls	r3, r0, #31
   1c8bc:	d503      	bpl.n	1c8c6 <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   1c8be:	f381 8811 	msr	BASEPRI, r1
   1c8c2:	f3bf 8f6f 	isb	sy
}
   1c8c6:	4770      	bx	lr

0001c8c8 <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
   1c8c8:	23ff      	movs	r3, #255	; 0xff
{
   1c8ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1c8ce:	6846      	ldr	r6, [r0, #4]
	p->max_inline_level = -1;
   1c8d0:	72c3      	strb	r3, [r0, #11]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1c8d2:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
   1c8d4:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
   1c8d6:	f04f 090c 	mov.w	r9, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1c8da:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1c8dc:	6801      	ldr	r1, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1c8de:	fb06 fc07 	mul.w	ip, r6, r7
	for (i = 0; i < p->n_levels; i++) {
   1c8e2:	f890 800a 	ldrb.w	r8, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1c8e6:	4461      	add	r1, ip
	for (i = 0; i < p->n_levels; i++) {
   1c8e8:	4598      	cmp	r8, r3
   1c8ea:	dc05      	bgt.n	1c8f8 <z_sys_mem_pool_base_init+0x30>
   1c8ec:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   1c8ee:	4619      	mov	r1, r3
   1c8f0:	428f      	cmp	r7, r1
   1c8f2:	dc20      	bgt.n	1c936 <z_sys_mem_pool_base_init+0x6e>
}
   1c8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   1c8f8:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
   1c8fc:	fb09 fe03 	mul.w	lr, r9, r3
   1c900:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   1c904:	2d20      	cmp	r5, #32
		sys_dlist_init(&p->levels[i].free_list);
   1c906:	eb0a 040e 	add.w	r4, sl, lr
   1c90a:	f104 0b04 	add.w	fp, r4, #4
	list->tail = (sys_dnode_t *)list;
   1c90e:	e9c4 bb01 	strd	fp, fp, [r4, #4]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   1c912:	d805      	bhi.n	1c920 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   1c914:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
   1c916:	0892      	lsrs	r2, r2, #2
   1c918:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
   1c91c:	3301      	adds	r3, #1
   1c91e:	e7e3      	b.n	1c8e8 <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
   1c920:	f115 041f 	adds.w	r4, r5, #31
   1c924:	bf48      	it	mi
   1c926:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
   1c92a:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
   1c92c:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
   1c930:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   1c934:	e7ef      	b.n	1c916 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
   1c936:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   1c938:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   1c93a:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
   1c93e:	18ec      	adds	r4, r5, r3
	node->next = list;
   1c940:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
   1c944:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   1c946:	3101      	adds	r1, #1
   1c948:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
   1c94a:	6895      	ldr	r5, [r2, #8]
   1c94c:	4433      	add	r3, r6
   1c94e:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1c950:	6094      	str	r4, [r2, #8]
   1c952:	e7cd      	b.n	1c8f0 <z_sys_mem_pool_base_init+0x28>

0001c954 <z_sys_mem_pool_block_alloc>:
{
   1c954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c958:	b087      	sub	sp, #28
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1c95a:	7a84      	ldrb	r4, [r0, #10]
{
   1c95c:	af00      	add	r7, sp, #0
   1c95e:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1c962:	00a3      	lsls	r3, r4, #2
   1c964:	3307      	adds	r3, #7
   1c966:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1c96a:	ebad 0d03 	sub.w	sp, sp, r3
   1c96e:	46ea      	mov	sl, sp
	lsizes[0] = p->max_sz;
   1c970:	4653      	mov	r3, sl
   1c972:	6842      	ldr	r2, [r0, #4]
{
   1c974:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   1c976:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   1c97a:	2200      	movs	r2, #0
   1c97c:	4294      	cmp	r4, r2
   1c97e:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   1c982:	dd09      	ble.n	1c998 <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   1c984:	b122      	cbz	r2, 1c990 <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1c986:	6818      	ldr	r0, [r3, #0]
   1c988:	0880      	lsrs	r0, r0, #2
   1c98a:	f020 0003 	bic.w	r0, r0, #3
   1c98e:	6058      	str	r0, [r3, #4]
		if (lsizes[i] < size) {
   1c990:	f853 0f04 	ldr.w	r0, [r3, #4]!
   1c994:	4288      	cmp	r0, r1
   1c996:	d208      	bcs.n	1c9aa <z_sys_mem_pool_block_alloc+0x56>
	if (alloc_l < 0) {
   1c998:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   1c99c:	d107      	bne.n	1c9ae <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   1c99e:	2300      	movs	r3, #0
   1c9a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1c9a2:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
   1c9a4:	f06f 000b 	mvn.w	r0, #11
   1c9a8:	e02c      	b.n	1ca04 <z_sys_mem_pool_block_alloc+0xb0>
	for (i = 0; i < p->n_levels; i++) {
   1c9aa:	3201      	adds	r2, #1
   1c9ac:	e7e6      	b.n	1c97c <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c9ae:	7c28      	ldrb	r0, [r5, #16]
   1c9b0:	f010 0001 	ands.w	r0, r0, #1
   1c9b4:	d001      	beq.n	1c9ba <z_sys_mem_pool_block_alloc+0x66>
   1c9b6:	f7ff ff77 	bl	1c8a8 <pool_irq_lock.isra.2.part.3>
   1c9ba:	230c      	movs	r3, #12
	key = pool_irq_lock(p);
   1c9bc:	4680      	mov	r8, r0
	block = sys_dlist_get(&p->levels[l].free_list);
   1c9be:	464e      	mov	r6, r9
   1c9c0:	68ea      	ldr	r2, [r5, #12]
   1c9c2:	fb03 2309 	mla	r3, r3, r9, r2
	return list->head == list;
   1c9c6:	461a      	mov	r2, r3
   1c9c8:	f852 4f04 	ldr.w	r4, [r2, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1c9cc:	4294      	cmp	r4, r2
   1c9ce:	d11d      	bne.n	1ca0c <z_sys_mem_pool_block_alloc+0xb8>
	for (i = alloc_l; i >= 0; i--) {
   1c9d0:	3e01      	subs	r6, #1
   1c9d2:	1c72      	adds	r2, r6, #1
   1c9d4:	f1a3 030c 	sub.w	r3, r3, #12
   1c9d8:	d1f5      	bne.n	1c9c6 <z_sys_mem_pool_block_alloc+0x72>
   1c9da:	2400      	movs	r4, #0
	pool_irq_unlock(p, key);
   1c9dc:	4641      	mov	r1, r8
   1c9de:	7c28      	ldrb	r0, [r5, #16]
   1c9e0:	f7ff ff6b 	bl	1c8ba <pool_irq_unlock.isra.4>
	*data_p = data;
   1c9e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1c9e6:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   1c9e8:	2c00      	cmp	r4, #0
   1c9ea:	d0db      	beq.n	1c9a4 <z_sys_mem_pool_block_alloc+0x50>
	*level_p = alloc_l;
   1c9ec:	68bb      	ldr	r3, [r7, #8]
	return 0;
   1c9ee:	2000      	movs	r0, #0
	*level_p = alloc_l;
   1c9f0:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c9f4:	682b      	ldr	r3, [r5, #0]
   1c9f6:	1ae4      	subs	r4, r4, r3
   1c9f8:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   1c9fc:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   1ca00:	687b      	ldr	r3, [r7, #4]
   1ca02:	601c      	str	r4, [r3, #0]
}
   1ca04:	371c      	adds	r7, #28
   1ca06:	46bd      	mov	sp, r7
   1ca08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	node->prev->next = node->next;
   1ca0c:	e9d4 3200 	ldrd	r3, r2, [r4]
   1ca10:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1ca12:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1ca14:	2300      	movs	r3, #0
	node->prev = NULL;
   1ca16:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1ca1a:	682b      	ldr	r3, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
   1ca1c:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1ca20:	1ae2      	subs	r2, r4, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   1ca22:	f107 0b14 	add.w	fp, r7, #20
   1ca26:	fb92 f2f1 	sdiv	r2, r2, r1
   1ca2a:	465b      	mov	r3, fp
   1ca2c:	4631      	mov	r1, r6
   1ca2e:	4628      	mov	r0, r5
   1ca30:	f7ff ff23 	bl	1c87a <get_bit_ptr>
	*word |= (1<<bit);
   1ca34:	2201      	movs	r2, #1
   1ca36:	6979      	ldr	r1, [r7, #20]
   1ca38:	fa02 f000 	lsl.w	r0, r2, r0
   1ca3c:	680b      	ldr	r3, [r1, #0]
   1ca3e:	603a      	str	r2, [r7, #0]
   1ca40:	4303      	orrs	r3, r0
   1ca42:	600b      	str	r3, [r1, #0]
			for (from_l = i; from_l < alloc_l; from_l++) {
   1ca44:	454e      	cmp	r6, r9
   1ca46:	dac9      	bge.n	1c9dc <z_sys_mem_pool_block_alloc+0x88>
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1ca48:	682a      	ldr	r2, [r5, #0]
   1ca4a:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
   1ca4e:	1aa2      	subs	r2, r4, r2
   1ca50:	fb92 f2f3 	sdiv	r2, r2, r3
	set_alloc_bit(p, l + 1, 4*bn);
   1ca54:	3601      	adds	r6, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   1ca56:	465b      	mov	r3, fp
   1ca58:	0092      	lsls	r2, r2, #2
   1ca5a:	4631      	mov	r1, r6
   1ca5c:	4628      	mov	r0, r5
   1ca5e:	f7ff ff0c 	bl	1c87a <get_bit_ptr>
	*word |= (1<<bit);
   1ca62:	697a      	ldr	r2, [r7, #20]
   1ca64:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1ca66:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   1ca68:	fa03 f000 	lsl.w	r0, r3, r0
   1ca6c:	6813      	ldr	r3, [r2, #0]
   1ca6e:	4303      	orrs	r3, r0
   1ca70:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1ca72:	230c      	movs	r3, #12
   1ca74:	2203      	movs	r2, #3
   1ca76:	fb03 1106 	mla	r1, r3, r6, r1
		int lsz = lsizes[l + 1];
   1ca7a:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1ca7e:	f101 0e04 	add.w	lr, r1, #4
   1ca82:	1823      	adds	r3, r4, r0
   1ca84:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
   1ca86:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   1ca88:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
   1ca8c:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1ca8e:	688a      	ldr	r2, [r1, #8]
   1ca90:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   1ca92:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
   1ca94:	608b      	str	r3, [r1, #8]
   1ca96:	3a01      	subs	r2, #1
   1ca98:	4403      	add	r3, r0
   1ca9a:	60fa      	str	r2, [r7, #12]
   1ca9c:	d1f3      	bne.n	1ca86 <z_sys_mem_pool_block_alloc+0x132>
				pool_irq_unlock(p, key);
   1ca9e:	4641      	mov	r1, r8
   1caa0:	7c28      	ldrb	r0, [r5, #16]
   1caa2:	f7ff ff0a 	bl	1c8ba <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1caa6:	7c2b      	ldrb	r3, [r5, #16]
   1caa8:	07db      	lsls	r3, r3, #31
   1caaa:	d503      	bpl.n	1cab4 <z_sys_mem_pool_block_alloc+0x160>
   1caac:	f7ff fefc 	bl	1c8a8 <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   1cab0:	4680      	mov	r8, r0
   1cab2:	e7c7      	b.n	1ca44 <z_sys_mem_pool_block_alloc+0xf0>
		return 0;
   1cab4:	68f8      	ldr	r0, [r7, #12]
   1cab6:	e7fb      	b.n	1cab0 <z_sys_mem_pool_block_alloc+0x15c>

0001cab8 <arch_printk_char_out>:
}
   1cab8:	2000      	movs	r0, #0
   1caba:	4770      	bx	lr

0001cabc <print_err>:
{
   1cabc:	b570      	push	{r4, r5, r6, lr}
   1cabe:	460d      	mov	r5, r1
   1cac0:	4604      	mov	r4, r0
	out('E', ctx);
   1cac2:	2045      	movs	r0, #69	; 0x45
   1cac4:	47a0      	blx	r4
	out('R', ctx);
   1cac6:	4629      	mov	r1, r5
   1cac8:	2052      	movs	r0, #82	; 0x52
   1caca:	47a0      	blx	r4
	out('R', ctx);
   1cacc:	4629      	mov	r1, r5
   1cace:	4623      	mov	r3, r4
}
   1cad0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   1cad4:	2052      	movs	r0, #82	; 0x52
   1cad6:	4718      	bx	r3

0001cad8 <z_vprintk>:
{
   1cad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   1cadc:	f04f 0800 	mov.w	r8, #0
{
   1cae0:	4606      	mov	r6, r0
   1cae2:	460f      	mov	r7, r1
	int min_width = -1;
   1cae4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   1cae8:	46c1      	mov	r9, r8
{
   1caea:	b08b      	sub	sp, #44	; 0x2c
   1caec:	461c      	mov	r4, r3
	while (*fmt) {
   1caee:	1e53      	subs	r3, r2, #1
   1caf0:	9302      	str	r3, [sp, #8]
			might_format = 0;
   1caf2:	2500      	movs	r5, #0
					break;
   1caf4:	e005      	b.n	1cb02 <z_vprintk+0x2a>
		if (!might_format) {
   1caf6:	b96d      	cbnz	r5, 1cb14 <z_vprintk+0x3c>
			if (*fmt != '%') {
   1caf8:	2825      	cmp	r0, #37	; 0x25
   1cafa:	f000 814f 	beq.w	1cd9c <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
   1cafe:	4639      	mov	r1, r7
   1cb00:	47b0      	blx	r6
	while (*fmt) {
   1cb02:	9b02      	ldr	r3, [sp, #8]
   1cb04:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1cb08:	9302      	str	r3, [sp, #8]
   1cb0a:	2800      	cmp	r0, #0
   1cb0c:	d1f3      	bne.n	1caf6 <z_vprintk+0x1e>
}
   1cb0e:	b00b      	add	sp, #44	; 0x2c
   1cb10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   1cb14:	2864      	cmp	r0, #100	; 0x64
   1cb16:	d06e      	beq.n	1cbf6 <z_vprintk+0x11e>
   1cb18:	d81a      	bhi.n	1cb50 <z_vprintk+0x78>
   1cb1a:	2839      	cmp	r0, #57	; 0x39
   1cb1c:	d80a      	bhi.n	1cb34 <z_vprintk+0x5c>
   1cb1e:	2831      	cmp	r0, #49	; 0x31
   1cb20:	d260      	bcs.n	1cbe4 <z_vprintk+0x10c>
   1cb22:	282d      	cmp	r0, #45	; 0x2d
   1cb24:	f000 8140 	beq.w	1cda8 <z_vprintk+0x2d0>
   1cb28:	2830      	cmp	r0, #48	; 0x30
   1cb2a:	d04c      	beq.n	1cbc6 <z_vprintk+0xee>
   1cb2c:	2825      	cmp	r0, #37	; 0x25
   1cb2e:	d107      	bne.n	1cb40 <z_vprintk+0x68>
				out((int)'%', ctx);
   1cb30:	4639      	mov	r1, r7
   1cb32:	e00b      	b.n	1cb4c <z_vprintk+0x74>
			switch (*fmt) {
   1cb34:	2858      	cmp	r0, #88	; 0x58
   1cb36:	f000 80bb 	beq.w	1ccb0 <z_vprintk+0x1d8>
   1cb3a:	2863      	cmp	r0, #99	; 0x63
   1cb3c:	f000 812a 	beq.w	1cd94 <z_vprintk+0x2bc>
					out((int)'%', ctx);
   1cb40:	4639      	mov	r1, r7
   1cb42:	2025      	movs	r0, #37	; 0x25
   1cb44:	47b0      	blx	r6
					out((int)*fmt, ctx);
   1cb46:	4639      	mov	r1, r7
   1cb48:	9b02      	ldr	r3, [sp, #8]
   1cb4a:	7818      	ldrb	r0, [r3, #0]
   1cb4c:	47b0      	blx	r6
   1cb4e:	e7d0      	b.n	1caf2 <z_vprintk+0x1a>
			switch (*fmt) {
   1cb50:	2870      	cmp	r0, #112	; 0x70
   1cb52:	f000 80a3 	beq.w	1cc9c <z_vprintk+0x1c4>
   1cb56:	d811      	bhi.n	1cb7c <z_vprintk+0xa4>
   1cb58:	2869      	cmp	r0, #105	; 0x69
   1cb5a:	d04c      	beq.n	1cbf6 <z_vprintk+0x11e>
   1cb5c:	286c      	cmp	r0, #108	; 0x6c
   1cb5e:	d105      	bne.n	1cb6c <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
   1cb60:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1cb64:	d12a      	bne.n	1cbbc <z_vprintk+0xe4>
					length_mod = 'L';
   1cb66:	f04f 084c 	mov.w	r8, #76	; 0x4c
   1cb6a:	e7ca      	b.n	1cb02 <z_vprintk+0x2a>
			switch (*fmt) {
   1cb6c:	2868      	cmp	r0, #104	; 0x68
   1cb6e:	d1e7      	bne.n	1cb40 <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
   1cb70:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   1cb74:	d122      	bne.n	1cbbc <z_vprintk+0xe4>
					length_mod = 'H';
   1cb76:	f04f 0848 	mov.w	r8, #72	; 0x48
   1cb7a:	e7c2      	b.n	1cb02 <z_vprintk+0x2a>
			switch (*fmt) {
   1cb7c:	2875      	cmp	r0, #117	; 0x75
   1cb7e:	d071      	beq.n	1cc64 <z_vprintk+0x18c>
   1cb80:	d818      	bhi.n	1cbb4 <z_vprintk+0xdc>
   1cb82:	2873      	cmp	r0, #115	; 0x73
   1cb84:	d1dc      	bne.n	1cb40 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   1cb86:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
   1cb8a:	46ab      	mov	fp, r5
   1cb8c:	465b      	mov	r3, fp
   1cb8e:	f81b 0b01 	ldrb.w	r0, [fp], #1
   1cb92:	2800      	cmp	r0, #0
   1cb94:	f040 80fb 	bne.w	1cd8e <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
   1cb98:	f1b9 0f03 	cmp.w	r9, #3
   1cb9c:	f040 810a 	bne.w	1cdb4 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
   1cba0:	1b5d      	subs	r5, r3, r5
   1cba2:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
   1cba6:	2d00      	cmp	r5, #0
   1cba8:	dda3      	ble.n	1caf2 <z_vprintk+0x1a>
						out(' ', ctx);
   1cbaa:	4639      	mov	r1, r7
   1cbac:	2020      	movs	r0, #32
   1cbae:	47b0      	blx	r6
   1cbb0:	3d01      	subs	r5, #1
   1cbb2:	e7f8      	b.n	1cba6 <z_vprintk+0xce>
			switch (*fmt) {
   1cbb4:	2878      	cmp	r0, #120	; 0x78
   1cbb6:	d07b      	beq.n	1ccb0 <z_vprintk+0x1d8>
   1cbb8:	287a      	cmp	r0, #122	; 0x7a
   1cbba:	d1c1      	bne.n	1cb40 <z_vprintk+0x68>
				} else if (length_mod == 0) {
   1cbbc:	f1b8 0f00 	cmp.w	r8, #0
   1cbc0:	d1be      	bne.n	1cb40 <z_vprintk+0x68>
   1cbc2:	4680      	mov	r8, r0
   1cbc4:	e79d      	b.n	1cb02 <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
   1cbc6:	f1ba 0f00 	cmp.w	sl, #0
   1cbca:	da0e      	bge.n	1cbea <z_vprintk+0x112>
   1cbcc:	f1b9 0f00 	cmp.w	r9, #0
   1cbd0:	f000 80ed 	beq.w	1cdae <z_vprintk+0x2d6>
					min_width = *fmt - '0';
   1cbd4:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   1cbd8:	f1b9 0f00 	cmp.w	r9, #0
   1cbdc:	bf08      	it	eq
   1cbde:	f04f 0902 	moveq.w	r9, #2
   1cbe2:	e78e      	b.n	1cb02 <z_vprintk+0x2a>
				if (min_width < 0) {
   1cbe4:	f1ba 0f00 	cmp.w	sl, #0
   1cbe8:	dbf4      	blt.n	1cbd4 <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
   1cbea:	230a      	movs	r3, #10
   1cbec:	fb03 0a0a 	mla	sl, r3, sl, r0
   1cbf0:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   1cbf4:	e7f0      	b.n	1cbd8 <z_vprintk+0x100>
				if (length_mod == 'z') {
   1cbf6:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   1cbfa:	d102      	bne.n	1cc02 <z_vprintk+0x12a>
					d = va_arg(ap, int);
   1cbfc:	f854 5b04 	ldr.w	r5, [r4], #4
   1cc00:	e01f      	b.n	1cc42 <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
   1cc02:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1cc06:	d0f9      	beq.n	1cbfc <z_vprintk+0x124>
				} else if (length_mod == 'L') {
   1cc08:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1cc0c:	d1f6      	bne.n	1cbfc <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
   1cc0e:	3407      	adds	r4, #7
   1cc10:	f024 0407 	bic.w	r4, r4, #7
   1cc14:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
   1cc18:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
   1cc1c:	9106      	str	r1, [sp, #24]
   1cc1e:	f143 0100 	adc.w	r1, r3, #0
   1cc22:	9107      	str	r1, [sp, #28]
   1cc24:	2100      	movs	r1, #0
   1cc26:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   1cc2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cc2e:	4561      	cmp	r1, ip
   1cc30:	bf08      	it	eq
   1cc32:	4558      	cmpeq	r0, fp
   1cc34:	d204      	bcs.n	1cc40 <z_vprintk+0x168>
						print_err(out, ctx);
   1cc36:	4639      	mov	r1, r7
   1cc38:	4630      	mov	r0, r6
   1cc3a:	f7ff ff3f 	bl	1cabc <print_err>
						break;
   1cc3e:	e758      	b.n	1caf2 <z_vprintk+0x1a>
					d = lld;
   1cc40:	4615      	mov	r5, r2
				if (d < 0) {
   1cc42:	2d00      	cmp	r5, #0
   1cc44:	da05      	bge.n	1cc52 <z_vprintk+0x17a>
					out((int)'-', ctx);
   1cc46:	4639      	mov	r1, r7
   1cc48:	202d      	movs	r0, #45	; 0x2d
   1cc4a:	47b0      	blx	r6
					d = -d;
   1cc4c:	426d      	negs	r5, r5
					min_width--;
   1cc4e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
   1cc52:	464b      	mov	r3, r9
   1cc54:	462a      	mov	r2, r5
   1cc56:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   1cc5a:	4639      	mov	r1, r7
   1cc5c:	4630      	mov	r0, r6
   1cc5e:	f7f0 f9ed 	bl	d03c <_printk_dec_ulong>
				break;
   1cc62:	e746      	b.n	1caf2 <z_vprintk+0x1a>
				if (length_mod == 'z') {
   1cc64:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   1cc68:	d102      	bne.n	1cc70 <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
   1cc6a:	f854 2b04 	ldr.w	r2, [r4], #4
   1cc6e:	e011      	b.n	1cc94 <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
   1cc70:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1cc74:	d0f9      	beq.n	1cc6a <z_vprintk+0x192>
				} else if (length_mod == 'L') {
   1cc76:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1cc7a:	d1f6      	bne.n	1cc6a <z_vprintk+0x192>
					if (llu > ~0UL) {
   1cc7c:	2100      	movs	r1, #0
   1cc7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
   1cc82:	3407      	adds	r4, #7
   1cc84:	f024 0407 	bic.w	r4, r4, #7
   1cc88:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   1cc8c:	4299      	cmp	r1, r3
   1cc8e:	bf08      	it	eq
   1cc90:	4290      	cmpeq	r0, r2
   1cc92:	d3d0      	bcc.n	1cc36 <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
   1cc94:	f8cd a000 	str.w	sl, [sp]
   1cc98:	464b      	mov	r3, r9
   1cc9a:	e7de      	b.n	1cc5a <z_vprintk+0x182>
				out('0', ctx);
   1cc9c:	4639      	mov	r1, r7
   1cc9e:	2030      	movs	r0, #48	; 0x30
   1cca0:	47b0      	blx	r6
				out('x', ctx);
   1cca2:	4639      	mov	r1, r7
   1cca4:	2078      	movs	r0, #120	; 0x78
   1cca6:	47b0      	blx	r6
					min_width = 8;
   1cca8:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
   1ccac:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
   1ccb0:	9b02      	ldr	r3, [sp, #8]
   1ccb2:	781b      	ldrb	r3, [r3, #0]
   1ccb4:	2b70      	cmp	r3, #112	; 0x70
   1ccb6:	d104      	bne.n	1ccc2 <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
   1ccb8:	f854 3b04 	ldr.w	r3, [r4], #4
   1ccbc:	9304      	str	r3, [sp, #16]
   1ccbe:	2300      	movs	r3, #0
   1ccc0:	e00d      	b.n	1ccde <z_vprintk+0x206>
				} else if (length_mod == 'l') {
   1ccc2:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1ccc6:	d0f7      	beq.n	1ccb8 <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
   1ccc8:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1cccc:	d1f4      	bne.n	1ccb8 <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
   1ccce:	3407      	adds	r4, #7
   1ccd0:	f024 0307 	bic.w	r3, r4, #7
   1ccd4:	461c      	mov	r4, r3
   1ccd6:	f854 2b08 	ldr.w	r2, [r4], #8
   1ccda:	685b      	ldr	r3, [r3, #4]
   1ccdc:	9204      	str	r2, [sp, #16]
	int digits = 0;
   1ccde:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   1cce0:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
   1cce2:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
   1cce6:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
   1cce8:	9105      	str	r1, [sp, #20]
		shift -= 4;
   1ccea:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
   1ccee:	9804      	ldr	r0, [sp, #16]
   1ccf0:	f1cb 0c20 	rsb	ip, fp, #32
   1ccf4:	f1ab 0120 	sub.w	r1, fp, #32
   1ccf8:	fa20 f00b 	lsr.w	r0, r0, fp
   1ccfc:	fa03 fc0c 	lsl.w	ip, r3, ip
   1cd00:	ea40 000c 	orr.w	r0, r0, ip
   1cd04:	fa23 f101 	lsr.w	r1, r3, r1
   1cd08:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   1cd0a:	f010 000f 	ands.w	r0, r0, #15
   1cd0e:	d106      	bne.n	1cd1e <z_vprintk+0x246>
   1cd10:	9905      	ldr	r1, [sp, #20]
   1cd12:	b911      	cbnz	r1, 1cd1a <z_vprintk+0x242>
   1cd14:	f1bb 0f00 	cmp.w	fp, #0
   1cd18:	d122      	bne.n	1cd60 <z_vprintk+0x288>
			nibble += nibble > 9 ? 87 : 48;
   1cd1a:	2130      	movs	r1, #48	; 0x30
   1cd1c:	e003      	b.n	1cd26 <z_vprintk+0x24e>
   1cd1e:	2809      	cmp	r0, #9
   1cd20:	bf8c      	ite	hi
   1cd22:	2157      	movhi	r1, #87	; 0x57
   1cd24:	2130      	movls	r1, #48	; 0x30
   1cd26:	4408      	add	r0, r1
			out((int)nibble, ctx);
   1cd28:	b240      	sxtb	r0, r0
   1cd2a:	4639      	mov	r1, r7
   1cd2c:	9308      	str	r3, [sp, #32]
   1cd2e:	9205      	str	r2, [sp, #20]
   1cd30:	47b0      	blx	r6
			digits++;
   1cd32:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
   1cd34:	9a05      	ldr	r2, [sp, #20]
			digits++;
   1cd36:	3301      	adds	r3, #1
   1cd38:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   1cd3a:	9b08      	ldr	r3, [sp, #32]
   1cd3c:	f1bb 0f00 	cmp.w	fp, #0
   1cd40:	d123      	bne.n	1cd8a <z_vprintk+0x2b2>
	if (padding == PAD_SPACE_AFTER) {
   1cd42:	f1b9 0f03 	cmp.w	r9, #3
   1cd46:	f47f aed4 	bne.w	1caf2 <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
   1cd4a:	9b03      	ldr	r3, [sp, #12]
   1cd4c:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
   1cd50:	2d00      	cmp	r5, #0
   1cd52:	f77f aece 	ble.w	1caf2 <z_vprintk+0x1a>
			out(' ', ctx);
   1cd56:	4639      	mov	r1, r7
   1cd58:	2020      	movs	r0, #32
   1cd5a:	47b0      	blx	r6
   1cd5c:	3d01      	subs	r5, #1
   1cd5e:	e7f7      	b.n	1cd50 <z_vprintk+0x278>
		if (remaining-- <= min_width) {
   1cd60:	1e51      	subs	r1, r2, #1
   1cd62:	4592      	cmp	sl, r2
   1cd64:	9108      	str	r1, [sp, #32]
   1cd66:	db07      	blt.n	1cd78 <z_vprintk+0x2a0>
			if (padding == PAD_ZERO_BEFORE) {
   1cd68:	f1b9 0f01 	cmp.w	r9, #1
   1cd6c:	d106      	bne.n	1cd7c <z_vprintk+0x2a4>
				out('0', ctx);
   1cd6e:	4639      	mov	r1, r7
   1cd70:	2030      	movs	r0, #48	; 0x30
   1cd72:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   1cd74:	47b0      	blx	r6
   1cd76:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
   1cd78:	9a08      	ldr	r2, [sp, #32]
   1cd7a:	e7b6      	b.n	1ccea <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
   1cd7c:	f1b9 0f02 	cmp.w	r9, #2
   1cd80:	d1fa      	bne.n	1cd78 <z_vprintk+0x2a0>
   1cd82:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   1cd84:	4639      	mov	r1, r7
   1cd86:	2020      	movs	r0, #32
   1cd88:	e7f4      	b.n	1cd74 <z_vprintk+0x29c>
			found_largest_digit = 1;
   1cd8a:	9505      	str	r5, [sp, #20]
   1cd8c:	e7ad      	b.n	1ccea <z_vprintk+0x212>
					out((int)(*s++), ctx);
   1cd8e:	4639      	mov	r1, r7
   1cd90:	47b0      	blx	r6
   1cd92:	e6fb      	b.n	1cb8c <z_vprintk+0xb4>
				out(c, ctx);
   1cd94:	4639      	mov	r1, r7
   1cd96:	f854 0b04 	ldr.w	r0, [r4], #4
   1cd9a:	e6d7      	b.n	1cb4c <z_vprintk+0x74>
				length_mod = 0;
   1cd9c:	46a8      	mov	r8, r5
				padding = PAD_NONE;
   1cd9e:	46a9      	mov	r9, r5
				min_width = -1;
   1cda0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
   1cda4:	2501      	movs	r5, #1
   1cda6:	e6ac      	b.n	1cb02 <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
   1cda8:	f04f 0903 	mov.w	r9, #3
   1cdac:	e6a9      	b.n	1cb02 <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
   1cdae:	f04f 0901 	mov.w	r9, #1
   1cdb2:	e6a6      	b.n	1cb02 <z_vprintk+0x2a>
			might_format = 0;
   1cdb4:	4605      	mov	r5, r0
		++fmt;
   1cdb6:	e6a4      	b.n	1cb02 <z_vprintk+0x2a>

0001cdb8 <printk>:
{
   1cdb8:	b40f      	push	{r0, r1, r2, r3}
   1cdba:	b507      	push	{r0, r1, r2, lr}
   1cdbc:	a904      	add	r1, sp, #16
   1cdbe:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1cdc2:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1cdc4:	f7f0 f986 	bl	d0d4 <vprintk>
}
   1cdc8:	b003      	add	sp, #12
   1cdca:	f85d eb04 	ldr.w	lr, [sp], #4
   1cdce:	b004      	add	sp, #16
   1cdd0:	4770      	bx	lr

0001cdd2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1cdd2:	4604      	mov	r4, r0
   1cdd4:	b508      	push	{r3, lr}
   1cdd6:	4608      	mov	r0, r1
   1cdd8:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1cdda:	461a      	mov	r2, r3
   1cddc:	47a0      	blx	r4
	return z_impl_k_current_get();
   1cdde:	f7fe fa4d 	bl	1b27c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1cde2:	f7f1 f81f 	bl	de24 <z_impl_k_thread_abort>

0001cde6 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1cde6:	b510      	push	{r4, lr}
   1cde8:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   1cdea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1cdee:	4620      	mov	r0, r4
   1cdf0:	f7fd f80a 	bl	19e08 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   1cdf4:	4603      	mov	r3, r0
   1cdf6:	2800      	cmp	r0, #0
   1cdf8:	d0f7      	beq.n	1cdea <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   1cdfa:	6842      	ldr	r2, [r0, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1cdfc:	3308      	adds	r3, #8
   1cdfe:	e8d3 1fef 	ldaex	r1, [r3]
   1ce02:	f021 0c01 	bic.w	ip, r1, #1
   1ce06:	e8c3 cfee 	stlex	lr, ip, [r3]
   1ce0a:	f1be 0f00 	cmp.w	lr, #0
   1ce0e:	d1f6      	bne.n	1cdfe <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1ce10:	07cb      	lsls	r3, r1, #31
   1ce12:	d500      	bpl.n	1ce16 <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1ce14:	4790      	blx	r2
	z_impl_k_yield();
   1ce16:	f7fe f8b3 	bl	1af80 <z_impl_k_yield>
   1ce1a:	e7e6      	b.n	1cdea <z_work_q_main+0x4>

0001ce1c <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   1ce1c:	4040      	eors	r0, r0
   1ce1e:	f380 8811 	msr	BASEPRI, r0
   1ce22:	f04f 0004 	mov.w	r0, #4
   1ce26:	df02      	svc	2
}
   1ce28:	4770      	bx	lr

0001ce2a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1ce2a:	4770      	bx	lr

0001ce2c <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
   1ce2c:	f7fc b910 	b.w	19050 <SystemInit>

0001ce30 <append_u8>:
{
   1ce30:	b510      	push	{r4, lr}
	if (!cpkt) {
   1ce32:	b158      	cbz	r0, 1ce4c <append_u8+0x1c>
	if (cpkt->max_len - cpkt->offset < 1) {
   1ce34:	8883      	ldrh	r3, [r0, #4]
   1ce36:	88c2      	ldrh	r2, [r0, #6]
   1ce38:	1ad2      	subs	r2, r2, r3
   1ce3a:	2a00      	cmp	r2, #0
	cpkt->data[cpkt->offset++] = data;
   1ce3c:	bfc3      	ittte	gt
   1ce3e:	1c5c      	addgt	r4, r3, #1
   1ce40:	6802      	ldrgt	r2, [r0, #0]
   1ce42:	8084      	strhgt	r4, [r0, #4]
		return false;
   1ce44:	2000      	movle	r0, #0
	return true;
   1ce46:	bfc4      	itt	gt
   1ce48:	2001      	movgt	r0, #1
	cpkt->data[cpkt->offset++] = data;
   1ce4a:	54d1      	strbgt	r1, [r2, r3]
}
   1ce4c:	bd10      	pop	{r4, pc}

0001ce4e <append_be16>:
{
   1ce4e:	b510      	push	{r4, lr}
	if (!cpkt) {
   1ce50:	b178      	cbz	r0, 1ce72 <append_be16+0x24>
	if (cpkt->max_len - cpkt->offset < 2) {
   1ce52:	8883      	ldrh	r3, [r0, #4]
   1ce54:	88c2      	ldrh	r2, [r0, #6]
   1ce56:	1ad2      	subs	r2, r2, r3
   1ce58:	2a01      	cmp	r2, #1
   1ce5a:	dd0b      	ble.n	1ce74 <append_be16+0x26>
	cpkt->data[cpkt->offset++] = data >> 8;
   1ce5c:	6802      	ldr	r2, [r0, #0]
   1ce5e:	1c5c      	adds	r4, r3, #1
   1ce60:	8084      	strh	r4, [r0, #4]
   1ce62:	0a0c      	lsrs	r4, r1, #8
   1ce64:	54d4      	strb	r4, [r2, r3]
	cpkt->data[cpkt->offset++] = (u8_t) data;
   1ce66:	8883      	ldrh	r3, [r0, #4]
   1ce68:	6802      	ldr	r2, [r0, #0]
   1ce6a:	1c5c      	adds	r4, r3, #1
   1ce6c:	8084      	strh	r4, [r0, #4]
	return true;
   1ce6e:	2001      	movs	r0, #1
	cpkt->data[cpkt->offset++] = (u8_t) data;
   1ce70:	54d1      	strb	r1, [r2, r3]
}
   1ce72:	bd10      	pop	{r4, pc}
		return false;
   1ce74:	2000      	movs	r0, #0
   1ce76:	e7fc      	b.n	1ce72 <append_be16+0x24>

0001ce78 <decode_delta>:
{
   1ce78:	b570      	push	{r4, r5, r6, lr}
   1ce7a:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   1ce7e:	9d06      	ldr	r5, [sp, #24]
	if (opt == COAP_OPTION_EXT_13) {
   1ce80:	2c0d      	cmp	r4, #13
   1ce82:	d111      	bne.n	1cea8 <decode_delta+0x30>
		*hdr_len = 1U;
   1ce84:	2401      	movs	r4, #1
   1ce86:	802c      	strh	r4, [r5, #0]
	if (max_len - offset < 1) {
   1ce88:	1a5c      	subs	r4, r3, r1
   1ce8a:	2c00      	cmp	r4, #0
   1ce8c:	dc02      	bgt.n	1ce94 <decode_delta+0x1c>
			return -EINVAL;
   1ce8e:	f06f 0015 	mvn.w	r0, #21
}
   1ce92:	bd70      	pop	{r4, r5, r6, pc}
	*value = data[offset++];
   1ce94:	1c4d      	adds	r5, r1, #1
   1ce96:	b2ad      	uxth	r5, r5
   1ce98:	5c44      	ldrb	r4, [r0, r1]
		if (ret < 0) {
   1ce9a:	1b58      	subs	r0, r3, r5
	*pos = offset;
   1ce9c:	8015      	strh	r5, [r2, #0]
		if (ret < 0) {
   1ce9e:	d4f6      	bmi.n	1ce8e <decode_delta+0x16>
		opt = val + COAP_OPTION_EXT_13;
   1cea0:	340d      	adds	r4, #13
	*opt_ext = opt;
   1cea2:	9b05      	ldr	r3, [sp, #20]
   1cea4:	801c      	strh	r4, [r3, #0]
	return ret;
   1cea6:	e7f4      	b.n	1ce92 <decode_delta+0x1a>
	} else if (opt == COAP_OPTION_EXT_14) {
   1cea8:	2c0e      	cmp	r4, #14
   1ceaa:	d113      	bne.n	1ced4 <decode_delta+0x5c>
		*hdr_len = 2U;
   1ceac:	2402      	movs	r4, #2
   1ceae:	802c      	strh	r4, [r5, #0]
	if (max_len - offset < 2) {
   1ceb0:	1a5c      	subs	r4, r3, r1
   1ceb2:	2c01      	cmp	r4, #1
   1ceb4:	ddeb      	ble.n	1ce8e <decode_delta+0x16>
	*value = data[offset++] << 8;
   1ceb6:	5c46      	ldrb	r6, [r0, r1]
	*value |= data[offset++];
   1ceb8:	1c8d      	adds	r5, r1, #2
	*value = data[offset++] << 8;
   1ceba:	3101      	adds	r1, #1
	*value |= data[offset++];
   1cebc:	b289      	uxth	r1, r1
   1cebe:	5c44      	ldrb	r4, [r0, r1]
   1cec0:	b2ad      	uxth	r5, r5
		if (ret < 0) {
   1cec2:	1b58      	subs	r0, r3, r5
	*value |= data[offset++];
   1cec4:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
	*pos = offset;
   1cec8:	8015      	strh	r5, [r2, #0]
		if (ret < 0) {
   1ceca:	d4e0      	bmi.n	1ce8e <decode_delta+0x16>
		opt = val + COAP_OPTION_EXT_269;
   1cecc:	f204 140d 	addw	r4, r4, #269	; 0x10d
   1ced0:	b2a4      	uxth	r4, r4
   1ced2:	e7e6      	b.n	1cea2 <decode_delta+0x2a>
	} else if (opt == COAP_OPTION_EXT_15) {
   1ced4:	2c0f      	cmp	r4, #15
   1ced6:	d0da      	beq.n	1ce8e <decode_delta+0x16>
	int ret = 0;
   1ced8:	2000      	movs	r0, #0
   1ceda:	e7e2      	b.n	1cea2 <decode_delta+0x2a>

0001cedc <append>:
{
   1cedc:	b538      	push	{r3, r4, r5, lr}
   1cede:	4615      	mov	r5, r2
	if (!cpkt || !data) {
   1cee0:	4604      	mov	r4, r0
   1cee2:	b170      	cbz	r0, 1cf02 <append+0x26>
   1cee4:	b169      	cbz	r1, 1cf02 <append+0x26>
	if (cpkt->max_len - cpkt->offset < len) {
   1cee6:	8880      	ldrh	r0, [r0, #4]
   1cee8:	88e3      	ldrh	r3, [r4, #6]
   1ceea:	1a1b      	subs	r3, r3, r0
   1ceec:	4293      	cmp	r3, r2
   1ceee:	db08      	blt.n	1cf02 <append+0x26>
	memcpy(cpkt->data + cpkt->offset, data, len);
   1cef0:	6823      	ldr	r3, [r4, #0]
   1cef2:	4418      	add	r0, r3
   1cef4:	f000 fcb2 	bl	1d85c <memcpy>
	return true;
   1cef8:	2001      	movs	r0, #1
	cpkt->offset += len;
   1cefa:	88a3      	ldrh	r3, [r4, #4]
   1cefc:	441d      	add	r5, r3
   1cefe:	80a5      	strh	r5, [r4, #4]
}
   1cf00:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1cf02:	2000      	movs	r0, #0
   1cf04:	e7fc      	b.n	1cf00 <append+0x24>

0001cf06 <parse_option>:
{
   1cf06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max_len - offset < 1) {
   1cf0a:	1a5f      	subs	r7, r3, r1
{
   1cf0c:	b086      	sub	sp, #24
	if (max_len - offset < 1) {
   1cf0e:	2f00      	cmp	r7, #0
{
   1cf10:	4681      	mov	r9, r0
   1cf12:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   1cf16:	4616      	mov	r6, r2
   1cf18:	461d      	mov	r5, r3
   1cf1a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
	if (max_len - offset < 1) {
   1cf1e:	dd13      	ble.n	1cf48 <parse_option+0x42>
	*value = data[offset++];
   1cf20:	f101 0c01 	add.w	ip, r1, #1
   1cf24:	fa1f fc8c 	uxth.w	ip, ip
   1cf28:	5c47      	ldrb	r7, [r0, r1]
	if (r < 0) {
   1cf2a:	ebb3 010c 	subs.w	r1, r3, ip
	*pos = offset;
   1cf2e:	f8a2 c000 	strh.w	ip, [r2]
	if (r < 0) {
   1cf32:	d40b      	bmi.n	1cf4c <parse_option+0x46>
	*opt_len += 1U;
   1cf34:	f8b4 c000 	ldrh.w	ip, [r4]
	if (opt == COAP_MARKER) {
   1cf38:	2fff      	cmp	r7, #255	; 0xff
	*opt_len += 1U;
   1cf3a:	f10c 0c01 	add.w	ip, ip, #1
   1cf3e:	f8a4 c000 	strh.w	ip, [r4]
	if (opt == COAP_MARKER) {
   1cf42:	d107      	bne.n	1cf54 <parse_option+0x4e>
		return r > 0 ? 0 : -EINVAL;
   1cf44:	2900      	cmp	r1, #0
   1cf46:	d13a      	bne.n	1cfbe <parse_option+0xb8>
   1cf48:	f06f 0115 	mvn.w	r1, #21
}
   1cf4c:	4608      	mov	r0, r1
   1cf4e:	b006      	add	sp, #24
   1cf50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (opt & 0xF0) >> 4;
   1cf54:	ea4f 1c17 	mov.w	ip, r7, lsr #4
	delta = option_header_get_delta(opt);
   1cf58:	fa1f fe8c 	uxth.w	lr, ip
	len = option_header_get_len(opt);
   1cf5c:	f007 070f 	and.w	r7, r7, #15
	delta = option_header_get_delta(opt);
   1cf60:	f8ad e014 	strh.w	lr, [sp, #20]
	len = option_header_get_len(opt);
   1cf64:	f8ad 7016 	strh.w	r7, [sp, #22]
	if (r == 0 && delta > COAP_OPTION_NO_EXT) {
   1cf68:	bb59      	cbnz	r1, 1cfc2 <parse_option+0xbc>
   1cf6a:	f1bc 0f0c 	cmp.w	ip, #12
   1cf6e:	d8eb      	bhi.n	1cf48 <parse_option+0x42>
	if (len > COAP_OPTION_NO_EXT) {
   1cf70:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1cf74:	2b0c      	cmp	r3, #12
   1cf76:	d913      	bls.n	1cfa0 <parse_option+0x9a>
		r = decode_delta(data, *pos, pos, max_len,
   1cf78:	f10d 0212 	add.w	r2, sp, #18
   1cf7c:	9202      	str	r2, [sp, #8]
   1cf7e:	f10d 0216 	add.w	r2, sp, #22
   1cf82:	e9cd 3200 	strd	r3, r2, [sp]
   1cf86:	8831      	ldrh	r1, [r6, #0]
   1cf88:	462b      	mov	r3, r5
   1cf8a:	4632      	mov	r2, r6
   1cf8c:	4648      	mov	r0, r9
   1cf8e:	f7ff ff73 	bl	1ce78 <decode_delta>
		if (r < 0) {
   1cf92:	1e01      	subs	r1, r0, #0
   1cf94:	dbd8      	blt.n	1cf48 <parse_option+0x42>
		*opt_len += hdr_len;
   1cf96:	8823      	ldrh	r3, [r4, #0]
   1cf98:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1cf9c:	4413      	add	r3, r2
   1cf9e:	8023      	strh	r3, [r4, #0]
	*opt_delta += delta;
   1cfa0:	f8ba 3000 	ldrh.w	r3, [sl]
   1cfa4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
	*opt_len += len;
   1cfa8:	f8bd 7016 	ldrh.w	r7, [sp, #22]
	*opt_delta += delta;
   1cfac:	4413      	add	r3, r2
   1cfae:	f8aa 3000 	strh.w	r3, [sl]
	*opt_len += len;
   1cfb2:	8823      	ldrh	r3, [r4, #0]
   1cfb4:	443b      	add	r3, r7
   1cfb6:	8023      	strh	r3, [r4, #0]
	if (r == 0) {
   1cfb8:	b9e1      	cbnz	r1, 1cff4 <parse_option+0xee>
		if (len == 0U) {
   1cfba:	2f00      	cmp	r7, #0
   1cfbc:	d1c4      	bne.n	1cf48 <parse_option+0x42>
			return r;
   1cfbe:	2100      	movs	r1, #0
   1cfc0:	e7c4      	b.n	1cf4c <parse_option+0x46>
	if (delta > COAP_OPTION_NO_EXT) {
   1cfc2:	f1bc 0f0c 	cmp.w	ip, #12
   1cfc6:	d9d3      	bls.n	1cf70 <parse_option+0x6a>
		r = decode_delta(data, *pos, pos, max_len,
   1cfc8:	f10d 0112 	add.w	r1, sp, #18
   1cfcc:	9102      	str	r1, [sp, #8]
   1cfce:	a905      	add	r1, sp, #20
   1cfd0:	e9cd e100 	strd	lr, r1, [sp]
   1cfd4:	8811      	ldrh	r1, [r2, #0]
   1cfd6:	f7ff ff4f 	bl	1ce78 <decode_delta>
		if ((r < 0) || (r == 0 && len > COAP_OPTION_NO_EXT)) {
   1cfda:	1e01      	subs	r1, r0, #0
   1cfdc:	dbb4      	blt.n	1cf48 <parse_option+0x42>
   1cfde:	d103      	bne.n	1cfe8 <parse_option+0xe2>
   1cfe0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1cfe4:	2b0c      	cmp	r3, #12
   1cfe6:	d8af      	bhi.n	1cf48 <parse_option+0x42>
		*opt_len += hdr_len;
   1cfe8:	8823      	ldrh	r3, [r4, #0]
   1cfea:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1cfee:	4413      	add	r3, r2
   1cff0:	8023      	strh	r3, [r4, #0]
   1cff2:	e7bd      	b.n	1cf70 <parse_option+0x6a>
	if (option) {
   1cff4:	f1b8 0f00 	cmp.w	r8, #0
   1cff8:	d018      	beq.n	1d02c <parse_option+0x126>
		if (len > sizeof(option->value)) {
   1cffa:	2f0c      	cmp	r7, #12
   1cffc:	d8a4      	bhi.n	1cf48 <parse_option+0x42>
		option->delta = *opt_delta;
   1cffe:	f8ba 3000 	ldrh.w	r3, [sl]
		option->len = len;
   1d002:	f888 7002 	strb.w	r7, [r8, #2]
		option->delta = *opt_delta;
   1d006:	f8a8 3000 	strh.w	r3, [r8]
		r = read(data, *pos, pos, max_len, len, &option->value[0]);
   1d00a:	8834      	ldrh	r4, [r6, #0]
   1d00c:	f108 0003 	add.w	r0, r8, #3
	if (max_len - offset < len) {
   1d010:	1b2b      	subs	r3, r5, r4
   1d012:	42bb      	cmp	r3, r7
   1d014:	db98      	blt.n	1cf48 <parse_option+0x42>
	memcpy(value, data + offset, len);
   1d016:	eb09 0104 	add.w	r1, r9, r4
   1d01a:	463a      	mov	r2, r7
   1d01c:	f000 fc1e 	bl	1d85c <memcpy>
	offset += len;
   1d020:	1939      	adds	r1, r7, r4
   1d022:	b289      	uxth	r1, r1
	*pos = offset;
   1d024:	8031      	strh	r1, [r6, #0]
		if (r < 0) {
   1d026:	1a69      	subs	r1, r5, r1
   1d028:	d590      	bpl.n	1cf4c <parse_option+0x46>
   1d02a:	e78d      	b.n	1cf48 <parse_option+0x42>
		*pos += len;
   1d02c:	8831      	ldrh	r1, [r6, #0]
   1d02e:	4439      	add	r1, r7
   1d030:	b289      	uxth	r1, r1
   1d032:	8031      	strh	r1, [r6, #0]
		r = max_len - *pos;
   1d034:	1a69      	subs	r1, r5, r1
   1d036:	e789      	b.n	1cf4c <parse_option+0x46>

0001d038 <coap_packet_init>:
{
   1d038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d03c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1d03e:	4689      	mov	r9, r1
   1d040:	4615      	mov	r5, r2
   1d042:	4698      	mov	r8, r3
   1d044:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
	if (!cpkt || !data || !max_len) {
   1d048:	4604      	mov	r4, r0
   1d04a:	b918      	cbnz	r0, 1d054 <coap_packet_init+0x1c>
		return -EINVAL;
   1d04c:	f06f 0015 	mvn.w	r0, #21
}
   1d050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!cpkt || !data || !max_len) {
   1d054:	2900      	cmp	r1, #0
   1d056:	d0f9      	beq.n	1d04c <coap_packet_init+0x14>
   1d058:	2a00      	cmp	r2, #0
   1d05a:	d0f7      	beq.n	1d04c <coap_packet_init+0x14>
	memset(cpkt, 0, sizeof(*cpkt));
   1d05c:	2210      	movs	r2, #16
   1d05e:	2100      	movs	r1, #0
   1d060:	f000 fc26 	bl	1d8b0 <memset>
	cpkt->offset = 0U;
   1d064:	2200      	movs	r2, #0
	hdr |= (type & 0x3) << 4;
   1d066:	f89d 1020 	ldrb.w	r1, [sp, #32]
	cpkt->max_len = max_len;
   1d06a:	80e5      	strh	r5, [r4, #6]
	hdr |= (type & 0x3) << 4;
   1d06c:	0109      	lsls	r1, r1, #4
	hdr |= tokenlen & 0xF;
   1d06e:	b275      	sxtb	r5, r6
	hdr |= (type & 0x3) << 4;
   1d070:	f001 0130 	and.w	r1, r1, #48	; 0x30
   1d074:	ea41 1188 	orr.w	r1, r1, r8, lsl #6
	hdr |= tokenlen & 0xF;
   1d078:	f005 030f 	and.w	r3, r5, #15
   1d07c:	4319      	orrs	r1, r3
	cpkt->data = data;
   1d07e:	f8c4 9000 	str.w	r9, [r4]
	cpkt->offset = 0U;
   1d082:	80a2      	strh	r2, [r4, #4]
	cpkt->delta = 0U;
   1d084:	81a2      	strh	r2, [r4, #12]
	res = append_u8(cpkt, hdr);
   1d086:	b2c9      	uxtb	r1, r1
   1d088:	4620      	mov	r0, r4
   1d08a:	f7ff fed1 	bl	1ce30 <append_u8>
	if (!res) {
   1d08e:	2800      	cmp	r0, #0
   1d090:	d0dc      	beq.n	1d04c <coap_packet_init+0x14>
	res = append_u8(cpkt, code);
   1d092:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
   1d096:	4620      	mov	r0, r4
   1d098:	f7ff feca 	bl	1ce30 <append_u8>
	if (!res) {
   1d09c:	2800      	cmp	r0, #0
   1d09e:	d0d5      	beq.n	1d04c <coap_packet_init+0x14>
	res = append_be16(cpkt, id);
   1d0a0:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
   1d0a4:	4620      	mov	r0, r4
   1d0a6:	f7ff fed2 	bl	1ce4e <append_be16>
	if (!res) {
   1d0aa:	2800      	cmp	r0, #0
   1d0ac:	d0ce      	beq.n	1d04c <coap_packet_init+0x14>
	if (token && tokenlen) {
   1d0ae:	b91f      	cbnz	r7, 1d0b8 <coap_packet_init+0x80>
	cpkt->hdr_len = 1 + 1 + 2 + tokenlen;
   1d0b0:	3504      	adds	r5, #4
   1d0b2:	7225      	strb	r5, [r4, #8]
	return 0;
   1d0b4:	2000      	movs	r0, #0
   1d0b6:	e7cb      	b.n	1d050 <coap_packet_init+0x18>
	if (token && tokenlen) {
   1d0b8:	2e00      	cmp	r6, #0
   1d0ba:	d0f9      	beq.n	1d0b0 <coap_packet_init+0x78>
		res = append(cpkt, token, tokenlen);
   1d0bc:	4632      	mov	r2, r6
   1d0be:	4639      	mov	r1, r7
   1d0c0:	4620      	mov	r0, r4
   1d0c2:	f7ff ff0b 	bl	1cedc <append>
		if (!res) {
   1d0c6:	2800      	cmp	r0, #0
   1d0c8:	d1f2      	bne.n	1d0b0 <coap_packet_init+0x78>
   1d0ca:	e7bf      	b.n	1d04c <coap_packet_init+0x14>

0001d0cc <coap_packet_append_option>:
{
   1d0cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d0d0:	460f      	mov	r7, r1
   1d0d2:	4692      	mov	sl, r2
   1d0d4:	461c      	mov	r4, r3
	if (!cpkt) {
   1d0d6:	4606      	mov	r6, r0
   1d0d8:	b918      	cbnz	r0, 1d0e2 <coap_packet_append_option+0x16>
		return -EINVAL;
   1d0da:	f06f 0015 	mvn.w	r0, #21
}
   1d0de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (len && !value) {
   1d0e2:	b10b      	cbz	r3, 1d0e8 <coap_packet_append_option+0x1c>
   1d0e4:	2a00      	cmp	r2, #0
   1d0e6:	d0f8      	beq.n	1d0da <coap_packet_append_option+0xe>
	if (code < cpkt->delta) {
   1d0e8:	89b3      	ldrh	r3, [r6, #12]
   1d0ea:	42bb      	cmp	r3, r7
   1d0ec:	d8f5      	bhi.n	1d0da <coap_packet_append_option+0xe>
	if (cpkt->opt_len) {
   1d0ee:	8972      	ldrh	r2, [r6, #10]
   1d0f0:	b11a      	cbz	r2, 1d0fa <coap_packet_append_option+0x2e>
		code = (code == cpkt->delta) ? 0 : code - cpkt->delta;
   1d0f2:	42bb      	cmp	r3, r7
   1d0f4:	d034      	beq.n	1d160 <coap_packet_append_option+0x94>
   1d0f6:	1aff      	subs	r7, r7, r3
   1d0f8:	b2bf      	uxth	r7, r7
	if (num < COAP_OPTION_EXT_13) {
   1d0fa:	2f0c      	cmp	r7, #12
   1d0fc:	d832      	bhi.n	1d164 <coap_packet_append_option+0x98>
		*ext = 0U;
   1d0fe:	f04f 0b00 	mov.w	fp, #0
		return 0;
   1d102:	46d9      	mov	r9, fp
		*opt = num;
   1d104:	b2fb      	uxtb	r3, r7
	if (num < COAP_OPTION_EXT_13) {
   1d106:	2c0c      	cmp	r4, #12
   1d108:	d842      	bhi.n	1d190 <coap_packet_append_option+0xc4>
		*ext = 0U;
   1d10a:	2500      	movs	r5, #0
		return 0;
   1d10c:	46a8      	mov	r8, r5
		*opt = num;
   1d10e:	b2e1      	uxtb	r1, r4
	*opt |= (len & 0xF);
   1d110:	ea41 1103 	orr.w	r1, r1, r3, lsl #4
	res = append_u8(cpkt, opt);
   1d114:	b2c9      	uxtb	r1, r1
   1d116:	4630      	mov	r0, r6
   1d118:	f7ff fe8a 	bl	1ce30 <append_u8>
	if (!res) {
   1d11c:	2800      	cmp	r0, #0
   1d11e:	d0dc      	beq.n	1d0da <coap_packet_append_option+0xe>
	if (delta_size == 1U) {
   1d120:	f1b9 0f01 	cmp.w	r9, #1
   1d124:	d146      	bne.n	1d1b4 <coap_packet_append_option+0xe8>
		res = append_u8(cpkt, (u8_t)delta_ext);
   1d126:	fa5f f18b 	uxtb.w	r1, fp
   1d12a:	4630      	mov	r0, r6
   1d12c:	f7ff fe80 	bl	1ce30 <append_u8>
		if (!res) {
   1d130:	2800      	cmp	r0, #0
   1d132:	d0d2      	beq.n	1d0da <coap_packet_append_option+0xe>
	if (len_size == 1U) {
   1d134:	f1b8 0f01 	cmp.w	r8, #1
   1d138:	d105      	bne.n	1d146 <coap_packet_append_option+0x7a>
		res = append_u8(cpkt, (u8_t)len_ext);
   1d13a:	b2e9      	uxtb	r1, r5
   1d13c:	4630      	mov	r0, r6
   1d13e:	f7ff fe77 	bl	1ce30 <append_u8>
		if (!res) {
   1d142:	2800      	cmp	r0, #0
   1d144:	d0c9      	beq.n	1d0da <coap_packet_append_option+0xe>
	if (len && value) {
   1d146:	2c00      	cmp	r4, #0
   1d148:	d145      	bne.n	1d1d6 <coap_packet_append_option+0x10a>
	return  (1 + delta_size + len_size + len);
   1d14a:	3401      	adds	r4, #1
	cpkt->opt_len += r;
   1d14c:	8973      	ldrh	r3, [r6, #10]
	return  (1 + delta_size + len_size + len);
   1d14e:	444c      	add	r4, r9
   1d150:	4444      	add	r4, r8
	cpkt->opt_len += r;
   1d152:	441c      	add	r4, r3
	cpkt->delta += code;
   1d154:	89b3      	ldrh	r3, [r6, #12]
	cpkt->opt_len += r;
   1d156:	8174      	strh	r4, [r6, #10]
	cpkt->delta += code;
   1d158:	441f      	add	r7, r3
   1d15a:	81b7      	strh	r7, [r6, #12]
	return 0;
   1d15c:	2000      	movs	r0, #0
   1d15e:	e7be      	b.n	1d0de <coap_packet_append_option+0x12>
		code = (code == cpkt->delta) ? 0 : code - cpkt->delta;
   1d160:	2700      	movs	r7, #0
   1d162:	e7cc      	b.n	1d0fe <coap_packet_append_option+0x32>
	} else if (num < COAP_OPTION_EXT_269) {
   1d164:	f5b7 7f86 	cmp.w	r7, #268	; 0x10c
   1d168:	fa0f fb87 	sxth.w	fp, r7
   1d16c:	d807      	bhi.n	1d17e <coap_packet_append_option+0xb2>
		*ext = num - COAP_OPTION_EXT_13;
   1d16e:	f1ab 0b0d 	sub.w	fp, fp, #13
   1d172:	fa1f fb8b 	uxth.w	fp, fp
		*opt = COAP_OPTION_EXT_13;
   1d176:	230d      	movs	r3, #13
		return 1;
   1d178:	f04f 0901 	mov.w	r9, #1
   1d17c:	e7c3      	b.n	1d106 <coap_packet_append_option+0x3a>
	*ext = num - COAP_OPTION_EXT_269;
   1d17e:	f46f 7186 	mvn.w	r1, #268	; 0x10c
   1d182:	448b      	add	fp, r1
   1d184:	fa1f fb8b 	uxth.w	fp, fp
	*opt = COAP_OPTION_EXT_14;
   1d188:	230e      	movs	r3, #14
	return 2;
   1d18a:	f04f 0902 	mov.w	r9, #2
   1d18e:	e7ba      	b.n	1d106 <coap_packet_append_option+0x3a>
	} else if (num < COAP_OPTION_EXT_269) {
   1d190:	f5b4 7f86 	cmp.w	r4, #268	; 0x10c
   1d194:	b225      	sxth	r5, r4
   1d196:	d805      	bhi.n	1d1a4 <coap_packet_append_option+0xd8>
		*ext = num - COAP_OPTION_EXT_13;
   1d198:	3d0d      	subs	r5, #13
   1d19a:	b2ad      	uxth	r5, r5
		*opt = COAP_OPTION_EXT_13;
   1d19c:	210d      	movs	r1, #13
		return 1;
   1d19e:	f04f 0801 	mov.w	r8, #1
   1d1a2:	e7b5      	b.n	1d110 <coap_packet_append_option+0x44>
	*ext = num - COAP_OPTION_EXT_269;
   1d1a4:	f46f 7286 	mvn.w	r2, #268	; 0x10c
   1d1a8:	4415      	add	r5, r2
   1d1aa:	b2ad      	uxth	r5, r5
	*opt = COAP_OPTION_EXT_14;
   1d1ac:	210e      	movs	r1, #14
	return 2;
   1d1ae:	f04f 0802 	mov.w	r8, #2
   1d1b2:	e7ad      	b.n	1d110 <coap_packet_append_option+0x44>
	} else if (delta_size == 2U) {
   1d1b4:	f1b9 0f02 	cmp.w	r9, #2
   1d1b8:	d1bc      	bne.n	1d134 <coap_packet_append_option+0x68>
		res = append_be16(cpkt, delta_ext);
   1d1ba:	4659      	mov	r1, fp
   1d1bc:	4630      	mov	r0, r6
   1d1be:	f7ff fe46 	bl	1ce4e <append_be16>
		if (!res) {
   1d1c2:	2800      	cmp	r0, #0
   1d1c4:	d089      	beq.n	1d0da <coap_packet_append_option+0xe>
	if (len_size == 1U) {
   1d1c6:	f1b8 0f01 	cmp.w	r8, #1
   1d1ca:	d0b6      	beq.n	1d13a <coap_packet_append_option+0x6e>
		res = append_be16(cpkt, len_ext);
   1d1cc:	4629      	mov	r1, r5
   1d1ce:	4630      	mov	r0, r6
   1d1d0:	f7ff fe3d 	bl	1ce4e <append_be16>
   1d1d4:	e7b5      	b.n	1d142 <coap_packet_append_option+0x76>
	if (len && value) {
   1d1d6:	f1ba 0f00 	cmp.w	sl, #0
   1d1da:	d0b6      	beq.n	1d14a <coap_packet_append_option+0x7e>
		res = append(cpkt, value, len);
   1d1dc:	4622      	mov	r2, r4
   1d1de:	4651      	mov	r1, sl
   1d1e0:	4630      	mov	r0, r6
   1d1e2:	f7ff fe7b 	bl	1cedc <append>
		if (!res) {
   1d1e6:	2800      	cmp	r0, #0
   1d1e8:	d1af      	bne.n	1d14a <coap_packet_append_option+0x7e>
   1d1ea:	e776      	b.n	1d0da <coap_packet_append_option+0xe>

0001d1ec <coap_packet_append_payload_marker>:
{
   1d1ec:	b508      	push	{r3, lr}
	return append_u8(cpkt, COAP_MARKER) ? 0 : -EINVAL;
   1d1ee:	21ff      	movs	r1, #255	; 0xff
   1d1f0:	f7ff fe1e 	bl	1ce30 <append_u8>
   1d1f4:	2800      	cmp	r0, #0
}
   1d1f6:	bf0c      	ite	eq
   1d1f8:	f06f 0015 	mvneq.w	r0, #21
   1d1fc:	2000      	movne	r0, #0
   1d1fe:	bd08      	pop	{r3, pc}

0001d200 <coap_packet_append_payload>:
{
   1d200:	b538      	push	{r3, r4, r5, lr}
   1d202:	4615      	mov	r5, r2
	if (!cpkt || !data) {
   1d204:	4604      	mov	r4, r0
   1d206:	b170      	cbz	r0, 1d226 <coap_packet_append_payload+0x26>
   1d208:	b169      	cbz	r1, 1d226 <coap_packet_append_payload+0x26>
	if (cpkt->max_len - cpkt->offset < len) {
   1d20a:	8880      	ldrh	r0, [r0, #4]
   1d20c:	88e3      	ldrh	r3, [r4, #6]
   1d20e:	1a1b      	subs	r3, r3, r0
   1d210:	4293      	cmp	r3, r2
   1d212:	db08      	blt.n	1d226 <coap_packet_append_payload+0x26>
	memcpy(cpkt->data + cpkt->offset, data, len);
   1d214:	6823      	ldr	r3, [r4, #0]
   1d216:	4418      	add	r0, r3
   1d218:	f000 fb20 	bl	1d85c <memcpy>
	return append(cpkt, payload, payload_len) ? 0 : -EINVAL;
   1d21c:	2000      	movs	r0, #0
	cpkt->offset += len;
   1d21e:	88a3      	ldrh	r3, [r4, #4]
   1d220:	441d      	add	r5, r3
   1d222:	80a5      	strh	r5, [r4, #4]
}
   1d224:	bd38      	pop	{r3, r4, r5, pc}
	return append(cpkt, payload, payload_len) ? 0 : -EINVAL;
   1d226:	f06f 0015 	mvn.w	r0, #21
   1d22a:	e7fb      	b.n	1d224 <coap_packet_append_payload+0x24>

0001d22c <coap_packet_parse>:
{
   1d22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d230:	b086      	sub	sp, #24
   1d232:	4688      	mov	r8, r1
   1d234:	4617      	mov	r7, r2
   1d236:	461d      	mov	r5, r3
   1d238:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
	if (!cpkt || !data) {
   1d23c:	4604      	mov	r4, r0
   1d23e:	b920      	cbnz	r0, 1d24a <coap_packet_parse+0x1e>
		return -EINVAL;
   1d240:	f06f 0015 	mvn.w	r0, #21
}
   1d244:	b006      	add	sp, #24
   1d246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!cpkt || !data) {
   1d24a:	2900      	cmp	r1, #0
   1d24c:	d0f8      	beq.n	1d240 <coap_packet_parse+0x14>
	if (len < BASIC_HEADER_SIZE) {
   1d24e:	2a03      	cmp	r2, #3
   1d250:	d9f6      	bls.n	1d240 <coap_packet_parse+0x14>
	if (options) {
   1d252:	b123      	cbz	r3, 1d25e <coap_packet_parse+0x32>
		memset(options, 0, opt_num * sizeof(struct coap_option));
   1d254:	0132      	lsls	r2, r6, #4
   1d256:	2100      	movs	r1, #0
   1d258:	4618      	mov	r0, r3
   1d25a:	f000 fb29 	bl	1d8b0 <memset>
	cpkt->offset = 0U;
   1d25e:	2000      	movs	r0, #0
	cpkt->data = data;
   1d260:	f8c4 8000 	str.w	r8, [r4]
	cpkt->offset = 0U;
   1d264:	80a0      	strh	r0, [r4, #4]
	cpkt->max_len = len;
   1d266:	80e7      	strh	r7, [r4, #6]
	cpkt->opt_len = 0U;
   1d268:	8160      	strh	r0, [r4, #10]
	cpkt->hdr_len = 0U;
   1d26a:	7220      	strb	r0, [r4, #8]
	cpkt->delta = 0U;
   1d26c:	81a0      	strh	r0, [r4, #12]
	tkl = cpkt->data[0] & 0x0f;
   1d26e:	f898 3000 	ldrb.w	r3, [r8]
   1d272:	f003 030f 	and.w	r3, r3, #15
	if (tkl > 8) {
   1d276:	2b08      	cmp	r3, #8
   1d278:	d8e2      	bhi.n	1d240 <coap_packet_parse+0x14>
	cpkt->hdr_len = BASIC_HEADER_SIZE + tkl;
   1d27a:	3304      	adds	r3, #4
   1d27c:	7223      	strb	r3, [r4, #8]
	if (cpkt->hdr_len > len) {
   1d27e:	b29b      	uxth	r3, r3
   1d280:	42bb      	cmp	r3, r7
   1d282:	d8dd      	bhi.n	1d240 <coap_packet_parse+0x14>
	cpkt->offset = cpkt->hdr_len;
   1d284:	80a3      	strh	r3, [r4, #4]
	if (cpkt->hdr_len == len) {
   1d286:	d0dd      	beq.n	1d244 <coap_packet_parse+0x18>
	num = 0U;
   1d288:	4607      	mov	r7, r0
	offset = cpkt->offset;
   1d28a:	f8ad 3014 	strh.w	r3, [sp, #20]
	opt_len = 0U;
   1d28e:	f8ad 0012 	strh.w	r0, [sp, #18]
	delta = 0U;
   1d292:	f8ad 0016 	strh.w	r0, [sp, #22]
		ret = parse_option(cpkt->data, offset, &offset, cpkt->max_len,
   1d296:	f10d 0812 	add.w	r8, sp, #18
		option = num < opt_num ? &options[num++] : NULL;
   1d29a:	42b7      	cmp	r7, r6
   1d29c:	bf2c      	ite	cs
   1d29e:	2300      	movcs	r3, #0
   1d2a0:	eb05 1307 	addcc.w	r3, r5, r7, lsl #4
		ret = parse_option(cpkt->data, offset, &offset, cpkt->max_len,
   1d2a4:	e9cd 8301 	strd	r8, r3, [sp, #4]
   1d2a8:	f10d 0316 	add.w	r3, sp, #22
		option = num < opt_num ? &options[num++] : NULL;
   1d2ac:	bf38      	it	cc
   1d2ae:	1c7a      	addcc	r2, r7, #1
		ret = parse_option(cpkt->data, offset, &offset, cpkt->max_len,
   1d2b0:	9300      	str	r3, [sp, #0]
		option = num < opt_num ? &options[num++] : NULL;
   1d2b2:	bf38      	it	cc
   1d2b4:	b2d7      	uxtbcc	r7, r2
		ret = parse_option(cpkt->data, offset, &offset, cpkt->max_len,
   1d2b6:	88e3      	ldrh	r3, [r4, #6]
   1d2b8:	aa05      	add	r2, sp, #20
   1d2ba:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   1d2be:	6820      	ldr	r0, [r4, #0]
   1d2c0:	f7ff fe21 	bl	1cf06 <parse_option>
		if (ret < 0) {
   1d2c4:	2800      	cmp	r0, #0
   1d2c6:	dbbd      	blt.n	1d244 <coap_packet_parse+0x18>
		} else if (ret == 0) {
   1d2c8:	d1e7      	bne.n	1d29a <coap_packet_parse+0x6e>
	cpkt->opt_len = opt_len;
   1d2ca:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1d2ce:	8163      	strh	r3, [r4, #10]
	cpkt->delta = delta;
   1d2d0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1d2d4:	81a3      	strh	r3, [r4, #12]
	cpkt->offset = offset;
   1d2d6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1d2da:	80a3      	strh	r3, [r4, #4]
	return 0;
   1d2dc:	e7b2      	b.n	1d244 <coap_packet_parse+0x18>

0001d2de <coap_header_get_type>:
	if (!cpkt || !cpkt->data) {
   1d2de:	b120      	cbz	r0, 1d2ea <coap_header_get_type+0xc>
   1d2e0:	6800      	ldr	r0, [r0, #0]
   1d2e2:	b110      	cbz	r0, 1d2ea <coap_header_get_type+0xc>
	return (cpkt->data[0] & 0x30) >> 4;
   1d2e4:	7800      	ldrb	r0, [r0, #0]
   1d2e6:	f3c0 1001 	ubfx	r0, r0, #4, #2
}
   1d2ea:	4770      	bx	lr

0001d2ec <coap_header_get_token>:
{
   1d2ec:	b510      	push	{r4, lr}
   1d2ee:	460b      	mov	r3, r1
	if (!cpkt || !cpkt->data) {
   1d2f0:	b160      	cbz	r0, 1d30c <coap_header_get_token+0x20>
   1d2f2:	6801      	ldr	r1, [r0, #0]
   1d2f4:	b161      	cbz	r1, 1d310 <coap_header_get_token+0x24>
	tkl = cpkt->data[0] & 0x0f;
   1d2f6:	780c      	ldrb	r4, [r1, #0]
	if (tkl) {
   1d2f8:	f014 040f 	ands.w	r4, r4, #15
   1d2fc:	d004      	beq.n	1d308 <coap_header_get_token+0x1c>
		memcpy(token, cpkt->data + BASIC_HEADER_SIZE, tkl);
   1d2fe:	4622      	mov	r2, r4
   1d300:	3104      	adds	r1, #4
   1d302:	4618      	mov	r0, r3
   1d304:	f000 faaa 	bl	1d85c <memcpy>
}
   1d308:	4620      	mov	r0, r4
   1d30a:	bd10      	pop	{r4, pc}
		return 0;
   1d30c:	4604      	mov	r4, r0
   1d30e:	e7fb      	b.n	1d308 <coap_header_get_token+0x1c>
   1d310:	460c      	mov	r4, r1
   1d312:	e7f9      	b.n	1d308 <coap_header_get_token+0x1c>

0001d314 <coap_header_get_code>:
	if (!cpkt || !cpkt->data) {
   1d314:	b308      	cbz	r0, 1d35a <coap_header_get_code+0x46>
   1d316:	6800      	ldr	r0, [r0, #0]
   1d318:	b1f8      	cbz	r0, 1d35a <coap_header_get_code+0x46>
	return cpkt->data[1];
   1d31a:	7840      	ldrb	r0, [r0, #1]
	switch (code) {
   1d31c:	2886      	cmp	r0, #134	; 0x86
   1d31e:	d80d      	bhi.n	1d33c <coap_header_get_code+0x28>
   1d320:	2880      	cmp	r0, #128	; 0x80
   1d322:	d21a      	bcs.n	1d35a <coap_header_get_code+0x46>
   1d324:	2845      	cmp	r0, #69	; 0x45
   1d326:	d805      	bhi.n	1d334 <coap_header_get_code+0x20>
   1d328:	2840      	cmp	r0, #64	; 0x40
   1d32a:	d216      	bcs.n	1d35a <coap_header_get_code+0x46>
		return COAP_CODE_EMPTY;
   1d32c:	2805      	cmp	r0, #5
   1d32e:	bf28      	it	cs
   1d330:	2000      	movcs	r0, #0
   1d332:	4770      	bx	lr
   1d334:	285f      	cmp	r0, #95	; 0x5f
   1d336:	bf18      	it	ne
   1d338:	2000      	movne	r0, #0
   1d33a:	4770      	bx	lr
	switch (code) {
   1d33c:	288d      	cmp	r0, #141	; 0x8d
   1d33e:	d803      	bhi.n	1d348 <coap_header_get_code+0x34>
   1d340:	288c      	cmp	r0, #140	; 0x8c
   1d342:	d20a      	bcs.n	1d35a <coap_header_get_code+0x46>
		return COAP_CODE_EMPTY;
   1d344:	2888      	cmp	r0, #136	; 0x88
   1d346:	e7f6      	b.n	1d336 <coap_header_get_code+0x22>
	switch (code) {
   1d348:	288f      	cmp	r0, #143	; 0x8f
   1d34a:	d006      	beq.n	1d35a <coap_header_get_code+0x46>
   1d34c:	d304      	bcc.n	1d358 <coap_header_get_code+0x44>
   1d34e:	f100 0360 	add.w	r3, r0, #96	; 0x60
   1d352:	b2db      	uxtb	r3, r3
		return COAP_CODE_EMPTY;
   1d354:	2b06      	cmp	r3, #6
   1d356:	e7ea      	b.n	1d32e <coap_header_get_code+0x1a>
   1d358:	2000      	movs	r0, #0
}
   1d35a:	4770      	bx	lr

0001d35c <is_request>:
{
   1d35c:	b508      	push	{r3, lr}
	u8_t code = coap_header_get_code(cpkt);
   1d35e:	f7ff ffd9 	bl	1d314 <coap_header_get_code>
	return !(code & ~COAP_REQUEST_MASK);
   1d362:	f030 0307 	bics.w	r3, r0, #7
}
   1d366:	bf0c      	ite	eq
   1d368:	2001      	moveq	r0, #1
   1d36a:	2000      	movne	r0, #0
   1d36c:	bd08      	pop	{r3, pc}

0001d36e <coap_header_get_id>:
	if (!cpkt || !cpkt->data) {
   1d36e:	b128      	cbz	r0, 1d37c <coap_header_get_id+0xe>
   1d370:	6800      	ldr	r0, [r0, #0]
   1d372:	b118      	cbz	r0, 1d37c <coap_header_get_id+0xe>
	return (cpkt->data[2] << 8) | cpkt->data[3];
   1d374:	7883      	ldrb	r3, [r0, #2]
   1d376:	78c0      	ldrb	r0, [r0, #3]
   1d378:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
   1d37c:	4770      	bx	lr

0001d37e <coap_packet_get_payload>:
{
   1d37e:	b510      	push	{r4, lr}
	if (!cpkt || !len) {
   1d380:	b908      	cbnz	r0, 1d386 <coap_packet_get_payload+0x8>
		return NULL;
   1d382:	2000      	movs	r0, #0
}
   1d384:	bd10      	pop	{r4, pc}
	if (!cpkt || !len) {
   1d386:	2900      	cmp	r1, #0
   1d388:	d0fb      	beq.n	1d382 <coap_packet_get_payload+0x4>
	payload_len = cpkt->max_len - cpkt->hdr_len - cpkt->opt_len;
   1d38a:	7a02      	ldrb	r2, [r0, #8]
   1d38c:	8944      	ldrh	r4, [r0, #10]
   1d38e:	88c3      	ldrh	r3, [r0, #6]
   1d390:	4422      	add	r2, r4
   1d392:	1a9b      	subs	r3, r3, r2
	if (payload_len > 0) {
   1d394:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
	return !(*len) ? NULL :
   1d398:	2b00      	cmp	r3, #0
   1d39a:	800a      	strh	r2, [r1, #0]
   1d39c:	ddf1      	ble.n	1d382 <coap_packet_get_payload+0x4>
		cpkt->data + cpkt->hdr_len + cpkt->opt_len;
   1d39e:	7a03      	ldrb	r3, [r0, #8]
   1d3a0:	8942      	ldrh	r2, [r0, #10]
	return !(*len) ? NULL :
   1d3a2:	6800      	ldr	r0, [r0, #0]
		cpkt->data + cpkt->hdr_len + cpkt->opt_len;
   1d3a4:	4413      	add	r3, r2
	return !(*len) ? NULL :
   1d3a6:	4418      	add	r0, r3
   1d3a8:	e7ec      	b.n	1d384 <coap_packet_get_payload+0x6>

0001d3aa <coap_handle_request>:
{
   1d3aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d3ae:	b085      	sub	sp, #20
   1d3b0:	469a      	mov	sl, r3
   1d3b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d3b4:	4680      	mov	r8, r0
   1d3b6:	9300      	str	r3, [sp, #0]
   1d3b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d3ba:	460c      	mov	r4, r1
   1d3bc:	4691      	mov	r9, r2
   1d3be:	9301      	str	r3, [sp, #4]
	if (!is_request(cpkt)) {
   1d3c0:	f7ff ffcc 	bl	1d35c <is_request>
   1d3c4:	bb50      	cbnz	r0, 1d41c <coap_handle_request+0x72>
}
   1d3c6:	b005      	add	sp, #20
   1d3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (options[i].delta != COAP_OPTION_URI_PATH) {
   1d3cc:	f836 2c03 	ldrh.w	r2, [r6, #-3]
   1d3d0:	2a0b      	cmp	r2, #11
   1d3d2:	d113      	bne.n	1d3fc <coap_handle_request+0x52>
		if (options[i].len != strlen(path[j])) {
   1d3d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
   1d3d8:	9103      	str	r1, [sp, #12]
   1d3da:	9202      	str	r2, [sp, #8]
   1d3dc:	f000 fa0c 	bl	1d7f8 <strlen>
   1d3e0:	9a02      	ldr	r2, [sp, #8]
   1d3e2:	4282      	cmp	r2, r0
   1d3e4:	d119      	bne.n	1d41a <coap_handle_request+0x70>
		if (memcmp(options[i].value, path[j], options[i].len)) {
   1d3e6:	9903      	ldr	r1, [sp, #12]
   1d3e8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
   1d3ec:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
   1d3f0:	4630      	mov	r0, r6
   1d3f2:	f000 fa23 	bl	1d83c <memcmp>
   1d3f6:	b980      	cbnz	r0, 1d41a <coap_handle_request+0x70>
		j++;
   1d3f8:	3701      	adds	r7, #1
   1d3fa:	b2ff      	uxtb	r7, r7
   1d3fc:	3501      	adds	r5, #1
   1d3fe:	3610      	adds	r6, #16
   1d400:	b239      	sxth	r1, r7
	for (i = 0U; i < opt_num && path[j]; i++) {
   1d402:	4555      	cmp	r5, sl
   1d404:	b2ea      	uxtb	r2, r5
   1d406:	f85b 0021 	ldr.w	r0, [fp, r1, lsl #2]
   1d40a:	d004      	beq.n	1d416 <coap_handle_request+0x6c>
   1d40c:	2800      	cmp	r0, #0
   1d40e:	d1dd      	bne.n	1d3cc <coap_handle_request+0x22>
   1d410:	eb09 1505 	add.w	r5, r9, r5, lsl #4
   1d414:	e013      	b.n	1d43e <coap_handle_request+0x94>
	if (path[j]) {
   1d416:	2800      	cmp	r0, #0
   1d418:	d0fa      	beq.n	1d410 <coap_handle_request+0x66>
	for (resource = resources; resource && resource->path; resource++) {
   1d41a:	3428      	adds	r4, #40	; 0x28
   1d41c:	b364      	cbz	r4, 1d478 <coap_handle_request+0xce>
   1d41e:	f8d4 b014 	ldr.w	fp, [r4, #20]
   1d422:	f1bb 0f00 	cmp.w	fp, #0
   1d426:	d027      	beq.n	1d478 <coap_handle_request+0xce>
   1d428:	2500      	movs	r5, #0
   1d42a:	f109 0603 	add.w	r6, r9, #3
	u8_t j = 0U;
   1d42e:	462f      	mov	r7, r5
   1d430:	e7e6      	b.n	1d400 <coap_handle_request+0x56>
		if (options[i].delta == COAP_OPTION_URI_PATH) {
   1d432:	f835 3b10 	ldrh.w	r3, [r5], #16
   1d436:	2b0b      	cmp	r3, #11
   1d438:	d0ef      	beq.n	1d41a <coap_handle_request+0x70>
	for (; i < opt_num; i++) {
   1d43a:	3201      	adds	r2, #1
   1d43c:	b2d2      	uxtb	r2, r2
   1d43e:	4592      	cmp	sl, r2
   1d440:	d8f7      	bhi.n	1d432 <coap_handle_request+0x88>
		code = coap_header_get_code(cpkt);
   1d442:	4640      	mov	r0, r8
   1d444:	f7ff ff66 	bl	1d314 <coap_header_get_code>
	switch (code) {
   1d448:	3801      	subs	r0, #1
   1d44a:	2803      	cmp	r0, #3
   1d44c:	d817      	bhi.n	1d47e <coap_handle_request+0xd4>
   1d44e:	e8df f000 	tbb	[pc, r0]
   1d452:	0d02      	.short	0x0d02
   1d454:	110f      	.short	0x110f
		return resource->get;
   1d456:	6825      	ldr	r5, [r4, #0]
		if (!method) {
   1d458:	b18d      	cbz	r5, 1d47e <coap_handle_request+0xd4>
		return method(resource, cpkt, addr, addr_len);
   1d45a:	e9dd 2300 	ldrd	r2, r3, [sp]
   1d45e:	4641      	mov	r1, r8
   1d460:	4620      	mov	r0, r4
   1d462:	46ac      	mov	ip, r5
}
   1d464:	b005      	add	sp, #20
   1d466:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return method(resource, cpkt, addr, addr_len);
   1d46a:	4760      	bx	ip
		return resource->post;
   1d46c:	6865      	ldr	r5, [r4, #4]
   1d46e:	e7f3      	b.n	1d458 <coap_handle_request+0xae>
		return resource->put;
   1d470:	68a5      	ldr	r5, [r4, #8]
   1d472:	e7f1      	b.n	1d458 <coap_handle_request+0xae>
		return resource->del;
   1d474:	68e5      	ldr	r5, [r4, #12]
   1d476:	e7ef      	b.n	1d458 <coap_handle_request+0xae>
	return -ENOENT;
   1d478:	f06f 0001 	mvn.w	r0, #1
   1d47c:	e7a3      	b.n	1d3c6 <coap_handle_request+0x1c>
			return -EPERM;
   1d47e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d482:	e7a0      	b.n	1d3c6 <coap_handle_request+0x1c>

0001d484 <clkstarted_handle>:
{
   1d484:	b538      	push	{r3, r4, r5, lr}
	sub_data->started = true;
   1d486:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   1d488:	6883      	ldr	r3, [r0, #8]
{
   1d48a:	4605      	mov	r5, r0
	sub_data->started = true;
   1d48c:	fb04 3401 	mla	r4, r4, r1, r3
   1d490:	2301      	movs	r3, #1
   1d492:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   1d494:	f04f 0320 	mov.w	r3, #32
   1d498:	f3ef 8111 	mrs	r1, BASEPRI
   1d49c:	f383 8811 	msr	BASEPRI, r3
   1d4a0:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1d4a4:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1d4a6:	b12b      	cbz	r3, 1d4b4 <clkstarted_handle+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d4a8:	6860      	ldr	r0, [r4, #4]
   1d4aa:	681a      	ldr	r2, [r3, #0]
   1d4ac:	4283      	cmp	r3, r0
	list->head = node;
   1d4ae:	6022      	str	r2, [r4, #0]
	list->tail = node;
   1d4b0:	bf08      	it	eq
   1d4b2:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
   1d4b4:	f381 8811 	msr	BASEPRI, r1
   1d4b8:	f3bf 8f6f 	isb	sy
	while ((async_data = list_get(&sub_data->list)) != NULL) {
   1d4bc:	b903      	cbnz	r3, 1d4c0 <clkstarted_handle+0x3c>
}
   1d4be:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   1d4c0:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   1d4c4:	4628      	mov	r0, r5
   1d4c6:	4790      	blx	r2
   1d4c8:	e7e4      	b.n	1d494 <clkstarted_handle+0x10>

0001d4ca <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   1d4ca:	2200      	movs	r2, #0
   1d4cc:	f7ef bea4 	b.w	d218 <clock_async_start>

0001d4d0 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1d4d0:	4770      	bx	lr

0001d4d2 <z_irq_spurious>:
	z_arm_reserved();
   1d4d2:	f7f0 bb11 	b.w	daf8 <z_arm_bus_fault>

0001d4d6 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1d4d6:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1d4d8:	f383 880b 	msr	PSPLIM, r3
}
   1d4dc:	4770      	bx	lr

0001d4de <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1d4de:	f7fb be0f 	b.w	19100 <z_fatal_error>

0001d4e2 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1d4e2:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   1d4e4:	6800      	ldr	r0, [r0, #0]
   1d4e6:	f7fb be0b 	b.w	19100 <z_fatal_error>

0001d4ea <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1d4ea:	b508      	push	{r3, lr}
	handler();
   1d4ec:	f7f0 fb0e 	bl	db0c <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   1d4f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   1d4f4:	f7f0 b98c 	b.w	d810 <z_arm_exc_exit>

0001d4f8 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   1d4f8:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   1d4fa:	2100      	movs	r1, #0
   1d4fc:	a801      	add	r0, sp, #4
   1d4fe:	f7f0 fea7 	bl	e250 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   1d502:	b003      	add	sp, #12
   1d504:	f85d fb04 	ldr.w	pc, [sp], #4

0001d508 <mpu_configure_region>:
{
   1d508:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
   1d50a:	680b      	ldr	r3, [r1, #0]
{
   1d50c:	b085      	sub	sp, #20
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   1d50e:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
   1d510:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1d514:	890d      	ldrh	r5, [r1, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1d516:	3c01      	subs	r4, #1
	region_conf.base = new_region->start;
   1d518:	9300      	str	r3, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   1d51a:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1d51c:	f023 031f 	bic.w	r3, r3, #31
   1d520:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   1d522:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   1d526:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1d52a:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   1d52e:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
   1d530:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1d534:	9303      	str	r3, [sp, #12]
   1d536:	4604      	mov	r4, r0
   1d538:	d805      	bhi.n	1d546 <mpu_configure_region+0x3e>
	region_init(index, region_conf);
   1d53a:	4669      	mov	r1, sp
   1d53c:	f7f0 fcda 	bl	def4 <region_init>
}
   1d540:	4620      	mov	r0, r4
   1d542:	b005      	add	sp, #20
   1d544:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1d546:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
   1d54a:	e7f9      	b.n	1d540 <mpu_configure_region+0x38>

0001d54c <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1d54c:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   1d550:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1d554:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   1d556:	bf08      	it	eq
   1d558:	f06f 0015 	mvneq.w	r0, #21
   1d55c:	4770      	bx	lr

0001d55e <atoi>:

#include <stdlib.h>
#include <ctype.h>

int atoi(const char *s)
{
   1d55e:	b530      	push	{r4, r5, lr}
	int n = 0;
	int neg = 0;

	while (isspace(*s)) {
   1d560:	7802      	ldrb	r2, [r0, #0]
   1d562:	4603      	mov	r3, r0
   1d564:	2a20      	cmp	r2, #32
   1d566:	f100 0001 	add.w	r0, r0, #1
   1d56a:	d0f9      	beq.n	1d560 <atoi+0x2>
   1d56c:	f1a2 0109 	sub.w	r1, r2, #9
   1d570:	2904      	cmp	r1, #4
   1d572:	d9f5      	bls.n	1d560 <atoi+0x2>
		s++;
	}
	switch (*s) {
   1d574:	2a2b      	cmp	r2, #43	; 0x2b
   1d576:	d008      	beq.n	1d58a <atoi+0x2c>
	case '-':
		neg = 1;
		s++;
   1d578:	2a2d      	cmp	r2, #45	; 0x2d
   1d57a:	bf0a      	itet	eq
   1d57c:	4603      	moveq	r3, r0
   1d57e:	2100      	movne	r1, #0
   1d580:	2101      	moveq	r1, #1
   1d582:	3b01      	subs	r3, #1
	int neg = 0;
   1d584:	2000      	movs	r0, #0
	case '+':
		s++;
	}
	/* Compute n as a negative number to avoid overflow on INT_MIN */
	while (isdigit(*s)) {
		n = 10*n - (*s++ - '0');
   1d586:	250a      	movs	r5, #10
   1d588:	e006      	b.n	1d598 <atoi+0x3a>
		s++;
   1d58a:	4603      	mov	r3, r0
	int neg = 0;
   1d58c:	2100      	movs	r1, #0
   1d58e:	e7f8      	b.n	1d582 <atoi+0x24>
		n = 10*n - (*s++ - '0');
   1d590:	f1c2 0230 	rsb	r2, r2, #48	; 0x30
   1d594:	fb05 2000 	mla	r0, r5, r0, r2
	while (isdigit(*s)) {
   1d598:	f813 2f01 	ldrb.w	r2, [r3, #1]!
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1d59c:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   1d5a0:	2c09      	cmp	r4, #9
   1d5a2:	d9f5      	bls.n	1d590 <atoi+0x32>
	}
	return neg ? n : -n;
   1d5a4:	b901      	cbnz	r1, 1d5a8 <atoi+0x4a>
   1d5a6:	4240      	negs	r0, r0
}
   1d5a8:	bd30      	pop	{r4, r5, pc}

0001d5aa <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1d5aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d5ae:	4684      	mov	ip, r0
   1d5b0:	460f      	mov	r7, r1
	register const char *s = nptr;
   1d5b2:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1d5b4:	462c      	mov	r4, r5
   1d5b6:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1d5ba:	2b20      	cmp	r3, #32
   1d5bc:	d036      	beq.n	1d62c <strtol+0x82>
   1d5be:	f1a3 0109 	sub.w	r1, r3, #9
   1d5c2:	2904      	cmp	r1, #4
   1d5c4:	d932      	bls.n	1d62c <strtol+0x82>
	} while (isspace(c));
	if (c == '-') {
   1d5c6:	2b2d      	cmp	r3, #45	; 0x2d
   1d5c8:	d132      	bne.n	1d630 <strtol+0x86>
		neg = 1;
   1d5ca:	2101      	movs	r1, #1
		c = *s++;
   1d5cc:	786b      	ldrb	r3, [r5, #1]
   1d5ce:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1d5d0:	2a00      	cmp	r2, #0
   1d5d2:	d05c      	beq.n	1d68e <strtol+0xe4>
   1d5d4:	2a10      	cmp	r2, #16
   1d5d6:	d109      	bne.n	1d5ec <strtol+0x42>
   1d5d8:	2b30      	cmp	r3, #48	; 0x30
   1d5da:	d107      	bne.n	1d5ec <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1d5dc:	7823      	ldrb	r3, [r4, #0]
   1d5de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1d5e2:	2b58      	cmp	r3, #88	; 0x58
   1d5e4:	d14e      	bne.n	1d684 <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
   1d5e6:	2210      	movs	r2, #16
		c = s[1];
   1d5e8:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1d5ea:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1d5ec:	2900      	cmp	r1, #0
   1d5ee:	bf14      	ite	ne
   1d5f0:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
   1d5f4:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1d5f8:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   1d5fa:	fbb8 fef2 	udiv	lr, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
   1d5fe:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1d600:	fb02 891e 	mls	r9, r2, lr, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1d604:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1d608:	2d09      	cmp	r5, #9
   1d60a:	d817      	bhi.n	1d63c <strtol+0x92>
			c -= '0';
   1d60c:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1d60e:	429a      	cmp	r2, r3
   1d610:	dd24      	ble.n	1d65c <strtol+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1d612:	1c75      	adds	r5, r6, #1
   1d614:	d007      	beq.n	1d626 <strtol+0x7c>
   1d616:	4570      	cmp	r0, lr
   1d618:	d81d      	bhi.n	1d656 <strtol+0xac>
   1d61a:	d101      	bne.n	1d620 <strtol+0x76>
   1d61c:	454b      	cmp	r3, r9
   1d61e:	dc1a      	bgt.n	1d656 <strtol+0xac>
			any = -1;
		} else {
			any = 1;
   1d620:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1d622:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1d626:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1d62a:	e7eb      	b.n	1d604 <strtol+0x5a>
{
   1d62c:	4625      	mov	r5, r4
   1d62e:	e7c1      	b.n	1d5b4 <strtol+0xa>
	} else if (c == '+') {
   1d630:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1d632:	bf04      	itt	eq
   1d634:	1cac      	addeq	r4, r5, #2
   1d636:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   1d638:	2100      	movs	r1, #0
   1d63a:	e7c9      	b.n	1d5d0 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1d63c:	f043 0520 	orr.w	r5, r3, #32
   1d640:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1d642:	2d19      	cmp	r5, #25
   1d644:	d80a      	bhi.n	1d65c <strtol+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1d646:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1d64a:	2d1a      	cmp	r5, #26
   1d64c:	bf34      	ite	cc
   1d64e:	2537      	movcc	r5, #55	; 0x37
   1d650:	2557      	movcs	r5, #87	; 0x57
   1d652:	1b5b      	subs	r3, r3, r5
   1d654:	e7db      	b.n	1d60e <strtol+0x64>
			any = -1;
   1d656:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1d65a:	e7e4      	b.n	1d626 <strtol+0x7c>
		}
	}

	if (any < 0) {
   1d65c:	1c73      	adds	r3, r6, #1
   1d65e:	d107      	bne.n	1d670 <strtol+0xc6>
   1d660:	f7fb fd48 	bl	190f4 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1d664:	2326      	movs	r3, #38	; 0x26
   1d666:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1d668:	4640      	mov	r0, r8
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1d66a:	b937      	cbnz	r7, 1d67a <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1d66c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1d670:	b101      	cbz	r1, 1d674 <strtol+0xca>
		acc = -acc;
   1d672:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1d674:	2f00      	cmp	r7, #0
   1d676:	d0f9      	beq.n	1d66c <strtol+0xc2>
		*endptr = (char *)(any ? s - 1 : nptr);
   1d678:	b10e      	cbz	r6, 1d67e <strtol+0xd4>
   1d67a:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   1d67e:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   1d682:	e7f3      	b.n	1d66c <strtol+0xc2>
	if (base == 0) {
   1d684:	2330      	movs	r3, #48	; 0x30
   1d686:	2a00      	cmp	r2, #0
   1d688:	d1b0      	bne.n	1d5ec <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1d68a:	2208      	movs	r2, #8
   1d68c:	e7ae      	b.n	1d5ec <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1d68e:	2b30      	cmp	r3, #48	; 0x30
   1d690:	d0a4      	beq.n	1d5dc <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1d692:	220a      	movs	r2, #10
   1d694:	e7aa      	b.n	1d5ec <strtol+0x42>

0001d696 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   1d696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d69a:	4684      	mov	ip, r0
   1d69c:	460f      	mov	r7, r1
	register const char *s = nptr;
   1d69e:	4605      	mov	r5, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   1d6a0:	462c      	mov	r4, r5
   1d6a2:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1d6a6:	2b20      	cmp	r3, #32
   1d6a8:	d035      	beq.n	1d716 <strtoul+0x80>
   1d6aa:	f1a3 0109 	sub.w	r1, r3, #9
   1d6ae:	2904      	cmp	r1, #4
   1d6b0:	d931      	bls.n	1d716 <strtoul+0x80>
	} while (isspace(c));
	if (c == '-') {
   1d6b2:	2b2d      	cmp	r3, #45	; 0x2d
   1d6b4:	d131      	bne.n	1d71a <strtoul+0x84>
		neg = 1;
   1d6b6:	f04f 0e01 	mov.w	lr, #1
		c = *s++;
   1d6ba:	786b      	ldrb	r3, [r5, #1]
   1d6bc:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1d6be:	2a00      	cmp	r2, #0
   1d6c0:	d05e      	beq.n	1d780 <strtoul+0xea>
   1d6c2:	2a10      	cmp	r2, #16
   1d6c4:	d109      	bne.n	1d6da <strtoul+0x44>
   1d6c6:	2b30      	cmp	r3, #48	; 0x30
   1d6c8:	d107      	bne.n	1d6da <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1d6ca:	7823      	ldrb	r3, [r4, #0]
   1d6cc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1d6d0:	2b58      	cmp	r3, #88	; 0x58
   1d6d2:	d150      	bne.n	1d776 <strtoul+0xe0>
		c = s[1];
		s += 2;
		base = 16;
   1d6d4:	2210      	movs	r2, #16
		c = s[1];
   1d6d6:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1d6d8:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   1d6da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d6de:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1d6e2:	2600      	movs	r6, #0
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   1d6e4:	fb02 f801 	mul.w	r8, r2, r1
	for (acc = 0, any = 0;; c = *s++) {
   1d6e8:	4630      	mov	r0, r6
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   1d6ea:	ea6f 0808 	mvn.w	r8, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1d6ee:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1d6f2:	2d09      	cmp	r5, #9
   1d6f4:	d818      	bhi.n	1d728 <strtoul+0x92>
			c -= '0';
   1d6f6:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1d6f8:	429a      	cmp	r2, r3
   1d6fa:	dd25      	ble.n	1d748 <strtoul+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1d6fc:	2e00      	cmp	r6, #0
   1d6fe:	db20      	blt.n	1d742 <strtoul+0xac>
   1d700:	4288      	cmp	r0, r1
   1d702:	d81e      	bhi.n	1d742 <strtoul+0xac>
   1d704:	d101      	bne.n	1d70a <strtoul+0x74>
   1d706:	4543      	cmp	r3, r8
   1d708:	dc1b      	bgt.n	1d742 <strtoul+0xac>
			any = -1;
		} else {
			any = 1;
   1d70a:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1d70c:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1d710:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1d714:	e7eb      	b.n	1d6ee <strtoul+0x58>
{
   1d716:	4625      	mov	r5, r4
   1d718:	e7c2      	b.n	1d6a0 <strtoul+0xa>
	} else if (c == '+') {
   1d71a:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1d71c:	bf04      	itt	eq
   1d71e:	1cac      	addeq	r4, r5, #2
   1d720:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   1d722:	f04f 0e00 	mov.w	lr, #0
   1d726:	e7ca      	b.n	1d6be <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1d728:	f043 0520 	orr.w	r5, r3, #32
   1d72c:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1d72e:	2d19      	cmp	r5, #25
   1d730:	d80a      	bhi.n	1d748 <strtoul+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1d732:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1d736:	2d1a      	cmp	r5, #26
   1d738:	bf34      	ite	cc
   1d73a:	2537      	movcc	r5, #55	; 0x37
   1d73c:	2557      	movcs	r5, #87	; 0x57
   1d73e:	1b5b      	subs	r3, r3, r5
   1d740:	e7da      	b.n	1d6f8 <strtoul+0x62>
			any = -1;
   1d742:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1d746:	e7e3      	b.n	1d710 <strtoul+0x7a>
		}
	}
	if (any < 0) {
   1d748:	2e00      	cmp	r6, #0
   1d74a:	da08      	bge.n	1d75e <strtoul+0xc8>
   1d74c:	f7fb fcd2 	bl	190f4 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   1d750:	2326      	movs	r3, #38	; 0x26
   1d752:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   1d754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   1d758:	b947      	cbnz	r7, 1d76c <strtoul+0xd6>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1d75a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   1d75e:	f1be 0f00 	cmp.w	lr, #0
   1d762:	d000      	beq.n	1d766 <strtoul+0xd0>
		acc = -acc;
   1d764:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1d766:	2f00      	cmp	r7, #0
   1d768:	d0f7      	beq.n	1d75a <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   1d76a:	b10e      	cbz	r6, 1d770 <strtoul+0xda>
   1d76c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   1d770:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   1d774:	e7f1      	b.n	1d75a <strtoul+0xc4>
	if (base == 0) {
   1d776:	2330      	movs	r3, #48	; 0x30
   1d778:	2a00      	cmp	r2, #0
   1d77a:	d1ae      	bne.n	1d6da <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   1d77c:	2208      	movs	r2, #8
   1d77e:	e7ac      	b.n	1d6da <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   1d780:	2b30      	cmp	r3, #48	; 0x30
   1d782:	d0a2      	beq.n	1d6ca <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   1d784:	220a      	movs	r2, #10
   1d786:	e7a8      	b.n	1d6da <strtoul+0x44>

0001d788 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   1d788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   1d78c:	780f      	ldrb	r7, [r1, #0]
{
   1d78e:	4605      	mov	r5, r0
	if (c != 0) {
   1d790:	b187      	cbz	r7, 1d7b4 <strstr+0x2c>
	c = *find++;
   1d792:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   1d794:	4620      	mov	r0, r4
   1d796:	f000 f82f 	bl	1d7f8 <strlen>
   1d79a:	4680      	mov	r8, r0
		do {
			do {
				sc = *s++;
   1d79c:	462e      	mov	r6, r5
   1d79e:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   1d7a2:	b163      	cbz	r3, 1d7be <strstr+0x36>
					return NULL;
				}
			} while (sc != c);
   1d7a4:	429f      	cmp	r7, r3
   1d7a6:	d108      	bne.n	1d7ba <strstr+0x32>
		} while (strncmp(s, find, len) != 0);
   1d7a8:	4642      	mov	r2, r8
   1d7aa:	4621      	mov	r1, r4
   1d7ac:	4630      	mov	r0, r6
   1d7ae:	f000 f836 	bl	1d81e <strncmp>
   1d7b2:	b910      	cbnz	r0, 1d7ba <strstr+0x32>
	s--;
	}
	return (char *)s;
}
   1d7b4:	4628      	mov	r0, r5
   1d7b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   1d7ba:	4635      	mov	r5, r6
   1d7bc:	e7ee      	b.n	1d79c <strstr+0x14>
					return NULL;
   1d7be:	461d      	mov	r5, r3
   1d7c0:	e7f8      	b.n	1d7b4 <strstr+0x2c>

0001d7c2 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   1d7c2:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   1d7c4:	7802      	ldrb	r2, [r0, #0]
   1d7c6:	4603      	mov	r3, r0
   1d7c8:	428a      	cmp	r2, r1
   1d7ca:	f100 0001 	add.w	r0, r0, #1
   1d7ce:	d004      	beq.n	1d7da <strchr+0x18>
   1d7d0:	2a00      	cmp	r2, #0
   1d7d2:	d1f7      	bne.n	1d7c4 <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   1d7d4:	2900      	cmp	r1, #0
   1d7d6:	bf18      	it	ne
   1d7d8:	2300      	movne	r3, #0
}
   1d7da:	4618      	mov	r0, r3
   1d7dc:	4770      	bx	lr

0001d7de <strrchr>:
 * @return pointer to last instance of found byte, or NULL if not found
 */

char *strrchr(const char *s, int c)
{
	char *match = NULL;
   1d7de:	2300      	movs	r3, #0
{
   1d7e0:	b510      	push	{r4, lr}

	do {
		if (*s == (char)c) {
   1d7e2:	b2c9      	uxtb	r1, r1
   1d7e4:	4604      	mov	r4, r0
   1d7e6:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d7ea:	428a      	cmp	r2, r1
   1d7ec:	bf08      	it	eq
   1d7ee:	4623      	moveq	r3, r4
			match = (char *)s;
		}
	} while (*s++);
   1d7f0:	2a00      	cmp	r2, #0
   1d7f2:	d1f7      	bne.n	1d7e4 <strrchr+0x6>

	return match;
}
   1d7f4:	4618      	mov	r0, r3
   1d7f6:	bd10      	pop	{r4, pc}

0001d7f8 <strlen>:
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
	size_t n = 0;
   1d7f8:	2300      	movs	r3, #0

	while (*s != '\0') {
   1d7fa:	5cc2      	ldrb	r2, [r0, r3]
   1d7fc:	b90a      	cbnz	r2, 1d802 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1d7fe:	4618      	mov	r0, r3
   1d800:	4770      	bx	lr
		n++;
   1d802:	3301      	adds	r3, #1
   1d804:	e7f9      	b.n	1d7fa <strlen+0x2>

0001d806 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1d806:	3801      	subs	r0, #1
   1d808:	3901      	subs	r1, #1
   1d80a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1d80e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1d812:	4293      	cmp	r3, r2
   1d814:	d101      	bne.n	1d81a <strcmp+0x14>
   1d816:	2b00      	cmp	r3, #0
   1d818:	d1f7      	bne.n	1d80a <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1d81a:	1a98      	subs	r0, r3, r2
   1d81c:	4770      	bx	lr

0001d81e <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1d81e:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1d820:	2400      	movs	r4, #0
   1d822:	42a2      	cmp	r2, r4
   1d824:	d008      	beq.n	1d838 <strncmp+0x1a>
   1d826:	5d03      	ldrb	r3, [r0, r4]
   1d828:	5d0d      	ldrb	r5, [r1, r4]
   1d82a:	42ab      	cmp	r3, r5
   1d82c:	d102      	bne.n	1d834 <strncmp+0x16>
   1d82e:	3401      	adds	r4, #1
   1d830:	2b00      	cmp	r3, #0
   1d832:	d1f6      	bne.n	1d822 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1d834:	1b58      	subs	r0, r3, r5
   1d836:	e000      	b.n	1d83a <strncmp+0x1c>
   1d838:	2000      	movs	r0, #0
}
   1d83a:	bd30      	pop	{r4, r5, pc}

0001d83c <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1d83c:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1d83e:	b15a      	cbz	r2, 1d858 <memcmp+0x1c>
   1d840:	3901      	subs	r1, #1
   1d842:	1884      	adds	r4, r0, r2
   1d844:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d848:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1d84c:	42a0      	cmp	r0, r4
   1d84e:	d001      	beq.n	1d854 <memcmp+0x18>
   1d850:	429a      	cmp	r2, r3
   1d852:	d0f7      	beq.n	1d844 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1d854:	1ad0      	subs	r0, r2, r3
}
   1d856:	bd10      	pop	{r4, pc}
		return 0;
   1d858:	4610      	mov	r0, r2
   1d85a:	e7fc      	b.n	1d856 <memcmp+0x1a>

0001d85c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1d85c:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1d85e:	ea81 0400 	eor.w	r4, r1, r0
   1d862:	07a5      	lsls	r5, r4, #30
   1d864:	4603      	mov	r3, r0
   1d866:	d00b      	beq.n	1d880 <memcpy+0x24>
   1d868:	3b01      	subs	r3, #1
   1d86a:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1d86c:	4291      	cmp	r1, r2
   1d86e:	d11a      	bne.n	1d8a6 <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1d870:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1d872:	2a00      	cmp	r2, #0
   1d874:	d0fc      	beq.n	1d870 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1d876:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1d87a:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1d87c:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   1d880:	079c      	lsls	r4, r3, #30
   1d882:	d1f6      	bne.n	1d872 <memcpy+0x16>
   1d884:	0895      	lsrs	r5, r2, #2
   1d886:	00ac      	lsls	r4, r5, #2
   1d888:	1f1e      	subs	r6, r3, #4
   1d88a:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1d88c:	42b9      	cmp	r1, r7
   1d88e:	d105      	bne.n	1d89c <memcpy+0x40>
   1d890:	f06f 0603 	mvn.w	r6, #3
   1d894:	4423      	add	r3, r4
   1d896:	fb06 2205 	mla	r2, r6, r5, r2
   1d89a:	e7e5      	b.n	1d868 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1d89c:	f851 cb04 	ldr.w	ip, [r1], #4
   1d8a0:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
   1d8a4:	e7f2      	b.n	1d88c <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
   1d8a6:	f811 4b01 	ldrb.w	r4, [r1], #1
   1d8aa:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1d8ae:	e7dd      	b.n	1d86c <memcpy+0x10>

0001d8b0 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1d8b0:	4603      	mov	r3, r0
{
   1d8b2:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   1d8b4:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1d8b6:	079c      	lsls	r4, r3, #30
   1d8b8:	d110      	bne.n	1d8dc <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1d8ba:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1d8be:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1d8c2:	0894      	lsrs	r4, r2, #2
   1d8c4:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   1d8c8:	42b3      	cmp	r3, r6
   1d8ca:	d10d      	bne.n	1d8e8 <memset+0x38>
   1d8cc:	f06f 0503 	mvn.w	r5, #3
   1d8d0:	fb05 2404 	mla	r4, r5, r4, r2
   1d8d4:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1d8d6:	42a3      	cmp	r3, r4
   1d8d8:	d109      	bne.n	1d8ee <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1d8da:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1d8dc:	2a00      	cmp	r2, #0
   1d8de:	d0fc      	beq.n	1d8da <memset+0x2a>
		*(d_byte++) = c_byte;
   1d8e0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1d8e4:	3a01      	subs	r2, #1
   1d8e6:	e7e6      	b.n	1d8b6 <memset+0x6>
		*(d_word++) = c_word;
   1d8e8:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   1d8ec:	e7ec      	b.n	1d8c8 <memset+0x18>
		*(d_byte++) = c_byte;
   1d8ee:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1d8f2:	e7f0      	b.n	1d8d6 <memset+0x26>

0001d8f4 <_to_x>:
{
   1d8f4:	4603      	mov	r3, r0
   1d8f6:	b5f0      	push	{r4, r5, r6, r7, lr}
		unsigned int d = n % base;
   1d8f8:	fbb1 f7f2 	udiv	r7, r1, r2
   1d8fc:	fb02 1517 	mls	r5, r2, r7, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1d900:	2d09      	cmp	r5, #9
   1d902:	bf8c      	ite	hi
   1d904:	2627      	movhi	r6, #39	; 0x27
   1d906:	2600      	movls	r6, #0
   1d908:	461c      	mov	r4, r3
   1d90a:	3530      	adds	r5, #48	; 0x30
   1d90c:	4435      	add	r5, r6
	} while (n);
   1d90e:	4291      	cmp	r1, r2
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1d910:	f804 5b01 	strb.w	r5, [r4], #1
	} while (n);
   1d914:	d206      	bcs.n	1d924 <_to_x+0x30>
	*buf = 0;
   1d916:	2200      	movs	r2, #0
   1d918:	7022      	strb	r2, [r4, #0]
	len = buf - start;
   1d91a:	1a24      	subs	r4, r4, r0
	for (buf--; buf > start; buf--, start++) {
   1d91c:	4283      	cmp	r3, r0
   1d91e:	d804      	bhi.n	1d92a <_to_x+0x36>
}
   1d920:	4620      	mov	r0, r4
   1d922:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n /= base;
   1d924:	4639      	mov	r1, r7
   1d926:	4623      	mov	r3, r4
   1d928:	e7e6      	b.n	1d8f8 <_to_x+0x4>
		char tmp = *buf;
   1d92a:	781a      	ldrb	r2, [r3, #0]
		*buf = *start;
   1d92c:	7801      	ldrb	r1, [r0, #0]
   1d92e:	f803 1901 	strb.w	r1, [r3], #-1
		*start = tmp;
   1d932:	f800 2b01 	strb.w	r2, [r0], #1
   1d936:	e7f1      	b.n	1d91c <_to_x+0x28>

0001d938 <_rlrshift>:
	*v = (*v & 1) + (*v >> 1);
   1d938:	2100      	movs	r1, #0
{
   1d93a:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
   1d93c:	e9d0 6500 	ldrd	r6, r5, [r0]
   1d940:	0872      	lsrs	r2, r6, #1
   1d942:	f006 0301 	and.w	r3, r6, #1
   1d946:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   1d94a:	189b      	adds	r3, r3, r2
   1d94c:	ea4f 0455 	mov.w	r4, r5, lsr #1
   1d950:	eb44 0101 	adc.w	r1, r4, r1
   1d954:	e9c0 3100 	strd	r3, r1, [r0]
}
   1d958:	bd70      	pop	{r4, r5, r6, pc}

0001d95a <_ldiv5>:
{
   1d95a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint64_t rem = *v, quot = 0U, q;
   1d95e:	e9d0 3200 	ldrd	r3, r2, [r0]
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d962:	2705      	movs	r7, #5
	rem += 2U;
   1d964:	3302      	adds	r3, #2
   1d966:	f142 0200 	adc.w	r2, r2, #0
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d96a:	fbb2 fef7 	udiv	lr, r2, r7
   1d96e:	f04f 0c00 	mov.w	ip, #0
		rem -= q * 5U;
   1d972:	fb07 f10e 	mul.w	r1, r7, lr
   1d976:	ebb3 060c 	subs.w	r6, r3, ip
   1d97a:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
   1d97e:	08f2      	lsrs	r2, r6, #3
   1d980:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d984:	fbb2 f1f7 	udiv	r1, r2, r7
   1d988:	00ca      	lsls	r2, r1, #3
		quot += q;
   1d98a:	eb1c 0802 	adds.w	r8, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d98e:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
   1d992:	eb4e 0903 	adc.w	r9, lr, r3
		rem -= q * 5U;
   1d996:	fba2 2307 	umull	r2, r3, r2, r7
   1d99a:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d99c:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
   1d9a0:	eb18 0403 	adds.w	r4, r8, r3
   1d9a4:	f149 0500 	adc.w	r5, r9, #0
	*v = quot;
   1d9a8:	e9c0 4500 	strd	r4, r5, [r0]
}
   1d9ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001d9b0 <_get_digit>:
	if (*digit_count > 0) {
   1d9b0:	680b      	ldr	r3, [r1, #0]
{
   1d9b2:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   1d9b4:	2b00      	cmp	r3, #0
   1d9b6:	dd10      	ble.n	1d9da <_get_digit+0x2a>
		*digit_count -= 1;
   1d9b8:	3b01      	subs	r3, #1
   1d9ba:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
   1d9bc:	210a      	movs	r1, #10
   1d9be:	6802      	ldr	r2, [r0, #0]
   1d9c0:	6844      	ldr	r4, [r0, #4]
   1d9c2:	fba2 5601 	umull	r5, r6, r2, r1
   1d9c6:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   1d9ca:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   1d9ce:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   1d9d2:	0f31      	lsrs	r1, r6, #28
   1d9d4:	3130      	adds	r1, #48	; 0x30
}
   1d9d6:	4608      	mov	r0, r1
   1d9d8:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   1d9da:	2130      	movs	r1, #48	; 0x30
   1d9dc:	e7fb      	b.n	1d9d6 <_get_digit+0x26>

0001d9de <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   1d9de:	684b      	ldr	r3, [r1, #4]
   1d9e0:	2b01      	cmp	r3, #1
   1d9e2:	dd07      	ble.n	1d9f4 <sprintf_out+0x16>
		*(p->ptr) = c;
   1d9e4:	680b      	ldr	r3, [r1, #0]
   1d9e6:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   1d9e8:	680b      	ldr	r3, [r1, #0]
   1d9ea:	3301      	adds	r3, #1
   1d9ec:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   1d9ee:	684b      	ldr	r3, [r1, #4]
   1d9f0:	3b01      	subs	r3, #1
   1d9f2:	604b      	str	r3, [r1, #4]
}
   1d9f4:	2000      	movs	r0, #0
   1d9f6:	4770      	bx	lr

0001d9f8 <fixed_data_unref>:

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   1d9f8:	4770      	bx	lr

0001d9fa <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   1d9fa:	b508      	push	{r3, lr}
	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
   1d9fc:	f000 f8de 	bl	1dbbc <net_pkt_init>

	net_context_init();
   1da00:	f7f1 fa16 	bl	ee30 <net_context_init>
	net_if_init();
   1da04:	f7f1 f9ea 	bl	eddc <net_if_init>
	net_tc_rx_init();
   1da08:	f7f1 fa34 	bl	ee74 <net_tc_rx_init>
	net_if_post_init();
   1da0c:	f7f1 f9fc 	bl	ee08 <net_if_post_init>
	net_coap_init();
   1da10:	f7ef fb8e 	bl	d130 <net_coap_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   1da14:	2000      	movs	r0, #0
   1da16:	bd08      	pop	{r3, pc}

0001da18 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   1da18:	b110      	cbz	r0, 1da20 <net_if_l2+0x8>
   1da1a:	6800      	ldr	r0, [r0, #0]
   1da1c:	b100      	cbz	r0, 1da20 <net_if_l2+0x8>
	return iface->if_dev->l2;
   1da1e:	6840      	ldr	r0, [r0, #4]
}
   1da20:	4770      	bx	lr

0001da22 <l2_flags_get>:
{
   1da22:	b510      	push	{r4, lr}
   1da24:	4602      	mov	r2, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   1da26:	f7ff fff7 	bl	1da18 <net_if_l2>
   1da2a:	b128      	cbz	r0, 1da38 <l2_flags_get+0x16>
   1da2c:	68c3      	ldr	r3, [r0, #12]
   1da2e:	b11b      	cbz	r3, 1da38 <l2_flags_get+0x16>
}
   1da30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   1da34:	4610      	mov	r0, r2
   1da36:	4718      	bx	r3
}
   1da38:	2000      	movs	r0, #0
   1da3a:	bd10      	pop	{r4, pc}

0001da3c <z_impl_net_addr_pton>:
#endif /* CONFIG_USERSPACE */

int z_impl_net_addr_pton(sa_family_t family, const char *src,
			 void *dst)
{
	if (family == AF_INET) {
   1da3c:	2801      	cmp	r0, #1
{
   1da3e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1da42:	460c      	mov	r4, r1
   1da44:	4616      	mov	r6, r2
	if (family == AF_INET) {
   1da46:	d128      	bne.n	1da9a <z_impl_net_addr_pton+0x5e>
		struct in_addr *addr = (struct in_addr *)dst;
		size_t i, len;

		len = strlen(src);
   1da48:	4608      	mov	r0, r1
   1da4a:	f7ff fed5 	bl	1d7f8 <strlen>
		for (i = 0; i < len; i++) {
   1da4e:	4623      	mov	r3, r4
   1da50:	4420      	add	r0, r4
   1da52:	4298      	cmp	r0, r3
   1da54:	d114      	bne.n	1da80 <z_impl_net_addr_pton+0x44>
			    src[i] != '.') {
				return -EINVAL;
			}
		}

		(void)memset(addr, 0, sizeof(struct in_addr));
   1da56:	4630      	mov	r0, r6
   1da58:	2204      	movs	r2, #4
   1da5a:	2100      	movs	r1, #0
   1da5c:	f7ff ff28 	bl	1d8b0 <memset>

		for (i = 0; i < sizeof(struct in_addr); i++) {
   1da60:	1e75      	subs	r5, r6, #1
   1da62:	3603      	adds	r6, #3
			char *endptr;

			addr->s4_addr[i] = strtol(src, &endptr, 10);
   1da64:	4620      	mov	r0, r4
   1da66:	220a      	movs	r2, #10
   1da68:	a901      	add	r1, sp, #4
   1da6a:	f7ff fd9e 	bl	1d5aa <strtol>

			src = ++endptr;
   1da6e:	9c01      	ldr	r4, [sp, #4]
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   1da70:	f805 0f01 	strb.w	r0, [r5, #1]!
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1da74:	42b5      	cmp	r5, r6
			src = ++endptr;
   1da76:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1da7a:	d1f3      	bne.n	1da64 <z_impl_net_addr_pton+0x28>
		}
	} else {
		return -EINVAL;
	}

	return 0;
   1da7c:	2000      	movs	r0, #0
   1da7e:	e009      	b.n	1da94 <z_impl_net_addr_pton+0x58>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1da80:	f813 2b01 	ldrb.w	r2, [r3], #1
   1da84:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1da88:	2909      	cmp	r1, #9
   1da8a:	d9e2      	bls.n	1da52 <z_impl_net_addr_pton+0x16>
   1da8c:	2a2e      	cmp	r2, #46	; 0x2e
   1da8e:	d0e0      	beq.n	1da52 <z_impl_net_addr_pton+0x16>
				return -EINVAL;
   1da90:	f06f 0015 	mvn.w	r0, #21
}
   1da94:	b003      	add	sp, #12
   1da96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (family == AF_INET6) {
   1da9a:	2802      	cmp	r0, #2
   1da9c:	d1f8      	bne.n	1da90 <z_impl_net_addr_pton+0x54>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1da9e:	212e      	movs	r1, #46	; 0x2e
   1daa0:	4620      	mov	r0, r4
   1daa2:	f7ff fe8e 	bl	1d7c2 <strchr>
		if (*src == ':') {
   1daa6:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1daa8:	2800      	cmp	r0, #0
   1daaa:	bf14      	ite	ne
   1daac:	2706      	movne	r7, #6
   1daae:	2708      	moveq	r7, #8
		if (*src == ':') {
   1dab0:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
   1dab2:	bf08      	it	eq
   1dab4:	3401      	addeq	r4, #1
		len = strlen(src);
   1dab6:	4620      	mov	r0, r4
   1dab8:	f7ff fe9e 	bl	1d7f8 <strlen>
		for (i = 0; i < len; i++) {
   1dabc:	2300      	movs	r3, #0
   1dabe:	4283      	cmp	r3, r0
   1dac0:	db21      	blt.n	1db06 <z_impl_net_addr_pton+0xca>
		for (i = 0; i < expected_groups; i++) {
   1dac2:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   1dac4:	46a9      	mov	r9, r5
			if (!src || *src == '\0') {
   1dac6:	2c00      	cmp	r4, #0
   1dac8:	d0e2      	beq.n	1da90 <z_impl_net_addr_pton+0x54>
   1daca:	7823      	ldrb	r3, [r4, #0]
   1dacc:	2b00      	cmp	r3, #0
   1dace:	d0df      	beq.n	1da90 <z_impl_net_addr_pton+0x54>
			if (*src != ':') {
   1dad0:	2b3a      	cmp	r3, #58	; 0x3a
   1dad2:	d02d      	beq.n	1db30 <z_impl_net_addr_pton+0xf4>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   1dad4:	2210      	movs	r2, #16
   1dad6:	2100      	movs	r1, #0
   1dad8:	4620      	mov	r0, r4
   1dada:	f7ff fd66 	bl	1d5aa <strtol>
   1dade:	2210      	movs	r2, #16
   1dae0:	4680      	mov	r8, r0
   1dae2:	2100      	movs	r1, #0
   1dae4:	4620      	mov	r0, r4
   1dae6:	f7ff fd60 	bl	1d5aa <strtol>
   1daea:	f3c8 2807 	ubfx	r8, r8, #8, #8
   1daee:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
   1daf2:	f826 8015 	strh.w	r8, [r6, r5, lsl #1]
				src = strchr(src, ':');
   1daf6:	213a      	movs	r1, #58	; 0x3a
   1daf8:	4620      	mov	r0, r4
   1dafa:	f7ff fe62 	bl	1d7c2 <strchr>
				if (src) {
   1dafe:	4604      	mov	r4, r0
   1db00:	b178      	cbz	r0, 1db22 <z_impl_net_addr_pton+0xe6>
			src++;
   1db02:	3401      	adds	r4, #1
   1db04:	e010      	b.n	1db28 <z_impl_net_addr_pton+0xec>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1db06:	5ce2      	ldrb	r2, [r4, r3]
   1db08:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1db0c:	290a      	cmp	r1, #10
   1db0e:	d906      	bls.n	1db1e <z_impl_net_addr_pton+0xe2>
   1db10:	f022 0120 	bic.w	r1, r2, #32
   1db14:	3941      	subs	r1, #65	; 0x41
   1db16:	2905      	cmp	r1, #5
   1db18:	d901      	bls.n	1db1e <z_impl_net_addr_pton+0xe2>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1db1a:	2a2e      	cmp	r2, #46	; 0x2e
   1db1c:	d1b8      	bne.n	1da90 <z_impl_net_addr_pton+0x54>
		for (i = 0; i < len; i++) {
   1db1e:	3301      	adds	r3, #1
   1db20:	e7cd      	b.n	1dabe <z_impl_net_addr_pton+0x82>
					if (i < expected_groups - 1) {
   1db22:	1e7b      	subs	r3, r7, #1
   1db24:	42ab      	cmp	r3, r5
   1db26:	dcb3      	bgt.n	1da90 <z_impl_net_addr_pton+0x54>
		for (i = 0; i < expected_groups; i++) {
   1db28:	3501      	adds	r5, #1
   1db2a:	42af      	cmp	r7, r5
   1db2c:	dccb      	bgt.n	1dac6 <z_impl_net_addr_pton+0x8a>
   1db2e:	e013      	b.n	1db58 <z_impl_net_addr_pton+0x11c>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   1db30:	eb06 0345 	add.w	r3, r6, r5, lsl #1
   1db34:	f806 9015 	strb.w	r9, [r6, r5, lsl #1]
   1db38:	f883 9001 	strb.w	r9, [r3, #1]
			for (; i < expected_groups; i++) {
   1db3c:	3501      	adds	r5, #1
   1db3e:	42af      	cmp	r7, r5
   1db40:	dcf6      	bgt.n	1db30 <z_impl_net_addr_pton+0xf4>
			tmp = strrchr(src, ':');
   1db42:	213a      	movs	r1, #58	; 0x3a
   1db44:	4620      	mov	r0, r4
   1db46:	f7ff fe4a 	bl	1d7de <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1db4a:	42a0      	cmp	r0, r4
   1db4c:	d11f      	bne.n	1db8e <z_impl_net_addr_pton+0x152>
   1db4e:	2f06      	cmp	r7, #6
   1db50:	d001      	beq.n	1db56 <z_impl_net_addr_pton+0x11a>
   1db52:	7863      	ldrb	r3, [r4, #1]
   1db54:	bb63      	cbnz	r3, 1dbb0 <z_impl_net_addr_pton+0x174>
				src++;
   1db56:	3401      	adds	r4, #1
		if (expected_groups == 6) {
   1db58:	2f06      	cmp	r7, #6
   1db5a:	d18f      	bne.n	1da7c <z_impl_net_addr_pton+0x40>
			for (i = 0; i < 4; i++) {
   1db5c:	2500      	movs	r5, #0
   1db5e:	360c      	adds	r6, #12
				if (!src || !*src) {
   1db60:	2c00      	cmp	r4, #0
   1db62:	d095      	beq.n	1da90 <z_impl_net_addr_pton+0x54>
   1db64:	7823      	ldrb	r3, [r4, #0]
   1db66:	2b00      	cmp	r3, #0
   1db68:	d092      	beq.n	1da90 <z_impl_net_addr_pton+0x54>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1db6a:	220a      	movs	r2, #10
   1db6c:	2100      	movs	r1, #0
   1db6e:	4620      	mov	r0, r4
   1db70:	f7ff fd1b 	bl	1d5aa <strtol>
				src = strchr(src, '.');
   1db74:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1db76:	f806 0b01 	strb.w	r0, [r6], #1
				src = strchr(src, '.');
   1db7a:	4620      	mov	r0, r4
   1db7c:	f7ff fe21 	bl	1d7c2 <strchr>
				if (src) {
   1db80:	4604      	mov	r4, r0
   1db82:	b1b8      	cbz	r0, 1dbb4 <z_impl_net_addr_pton+0x178>
					src++;
   1db84:	3401      	adds	r4, #1
			for (i = 0; i < 4; i++) {
   1db86:	3501      	adds	r5, #1
   1db88:	2d04      	cmp	r5, #4
   1db8a:	d1e9      	bne.n	1db60 <z_impl_net_addr_pton+0x124>
   1db8c:	e776      	b.n	1da7c <z_impl_net_addr_pton+0x40>
			if (expected_groups == 6) {
   1db8e:	2f06      	cmp	r7, #6
   1db90:	d100      	bne.n	1db94 <z_impl_net_addr_pton+0x158>
				tmp--;
   1db92:	3801      	subs	r0, #1
			i = expected_groups - 1;
   1db94:	1e7d      	subs	r5, r7, #1
   1db96:	3001      	adds	r0, #1
				if (*tmp == ':') {
   1db98:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
   1db9c:	2b3a      	cmp	r3, #58	; 0x3a
					i--;
   1db9e:	bf08      	it	eq
   1dba0:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
				if (i < 0) {
   1dba4:	2d00      	cmp	r5, #0
   1dba6:	f6ff af73 	blt.w	1da90 <z_impl_net_addr_pton+0x54>
			} while (tmp-- != src);
   1dbaa:	42a0      	cmp	r0, r4
   1dbac:	d1f4      	bne.n	1db98 <z_impl_net_addr_pton+0x15c>
   1dbae:	e7a8      	b.n	1db02 <z_impl_net_addr_pton+0xc6>
   1dbb0:	4620      	mov	r0, r4
   1dbb2:	e7ef      	b.n	1db94 <z_impl_net_addr_pton+0x158>
					if (i < 3) {
   1dbb4:	2d03      	cmp	r5, #3
   1dbb6:	f47f af6b 	bne.w	1da90 <z_impl_net_addr_pton+0x54>
   1dbba:	e7e4      	b.n	1db86 <z_impl_net_addr_pton+0x14a>

0001dbbc <net_pkt_init>:
		(size_t)(k_mem_slab_num_free_get(&tx_pkts) *
			 sizeof(struct net_pkt)),
		get_frees(&rx_bufs), get_size(&rx_bufs),
		get_frees(&tx_bufs), get_size(&tx_bufs));
#endif
}
   1dbbc:	4770      	bx	lr

0001dbbe <gpio_nrfx_write>:
{
   1dbbe:	b510      	push	{r4, lr}
	return port->config->config_info;
   1dbc0:	6804      	ldr	r4, [r0, #0]
   1dbc2:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1dbc4:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1dbc6:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1dbc8:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1dbca:	69c0      	ldr	r0, [r0, #28]
   1dbcc:	d103      	bne.n	1dbd6 <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   1dbce:	4058      	eors	r0, r3
}


NRF_STATIC_INLINE void nrf_gpio_port_out_write(NRF_GPIO_Type * p_reg, uint32_t value)
{
    p_reg->OUT = value;
   1dbd0:	6060      	str	r0, [r4, #4]
}
   1dbd2:	2000      	movs	r0, #0
   1dbd4:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   1dbd6:	3300      	adds	r3, #0
   1dbd8:	f04f 0101 	mov.w	r1, #1
   1dbdc:	bf18      	it	ne
   1dbde:	2301      	movne	r3, #1
   1dbe0:	40d0      	lsrs	r0, r2
   1dbe2:	f000 0001 	and.w	r0, r0, #1
   1dbe6:	4091      	lsls	r1, r2
   1dbe8:	4283      	cmp	r3, r0
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   1dbea:	bf14      	ite	ne
   1dbec:	60a1      	strne	r1, [r4, #8]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   1dbee:	60e1      	streq	r1, [r4, #12]
   1dbf0:	e7ef      	b.n	1dbd2 <gpio_nrfx_write+0x14>

0001dbf2 <gpio_nrfx_read>:
{
   1dbf2:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   1dbf4:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1dbf6:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1dbf8:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1dbfa:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1dbfc:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1dbfe:	2901      	cmp	r1, #1
    return p_reg->DIR;
   1dc00:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   1dc02:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   1dc04:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1dc06:	ea80 0004 	eor.w	r0, r0, r4
   1dc0a:	ea84 0405 	eor.w	r4, r4, r5
   1dc0e:	ea04 0406 	and.w	r4, r4, r6
   1dc12:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   1dc16:	bf1c      	itt	ne
   1dc18:	40d0      	lsrne	r0, r2
   1dc1a:	f000 0001 	andne.w	r0, r0, #1
   1dc1e:	6018      	str	r0, [r3, #0]
}
   1dc20:	2000      	movs	r0, #0
   1dc22:	bd70      	pop	{r4, r5, r6, pc}

0001dc24 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1dc24:	2901      	cmp	r1, #1
{
   1dc26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   1dc2a:	bf18      	it	ne
   1dc2c:	b2d4      	uxtbne	r4, r2
{
   1dc2e:	4606      	mov	r6, r0
		to_pin   = pin;
   1dc30:	bf12      	itee	ne
   1dc32:	4625      	movne	r5, r4
		to_pin   = 31U;
   1dc34:	251f      	moveq	r5, #31
		from_pin = 0U;
   1dc36:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   1dc38:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   1dc3c:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1dc3e:	42ac      	cmp	r4, r5
   1dc40:	d902      	bls.n	1dc48 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   1dc42:	2000      	movs	r0, #0
}
   1dc44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   1dc48:	68fb      	ldr	r3, [r7, #12]
   1dc4a:	fa08 f204 	lsl.w	r2, r8, r4
   1dc4e:	ea23 0302 	bic.w	r3, r3, r2
   1dc52:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1dc54:	4621      	mov	r1, r4
   1dc56:	4630      	mov	r0, r6
   1dc58:	f7f1 fa16 	bl	f088 <gpiote_pin_int_cfg>
		if (res != 0) {
   1dc5c:	2800      	cmp	r0, #0
   1dc5e:	d1f1      	bne.n	1dc44 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1dc60:	3401      	adds	r4, #1
   1dc62:	b2e4      	uxtb	r4, r4
   1dc64:	e7eb      	b.n	1dc3e <gpio_nrfx_pin_disable_callback+0x1a>

0001dc66 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1dc66:	2901      	cmp	r1, #1
{
   1dc68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   1dc6c:	bf18      	it	ne
   1dc6e:	b2d4      	uxtbne	r4, r2
{
   1dc70:	4606      	mov	r6, r0
		to_pin   = pin;
   1dc72:	bf12      	itee	ne
   1dc74:	4625      	movne	r5, r4
		to_pin   = 31U;
   1dc76:	251f      	moveq	r5, #31
		from_pin = 0U;
   1dc78:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   1dc7a:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   1dc7e:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1dc80:	42ac      	cmp	r4, r5
   1dc82:	d902      	bls.n	1dc8a <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   1dc84:	2000      	movs	r0, #0
}
   1dc86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   1dc8a:	68fb      	ldr	r3, [r7, #12]
   1dc8c:	fa08 f204 	lsl.w	r2, r8, r4
   1dc90:	4313      	orrs	r3, r2
   1dc92:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1dc94:	4621      	mov	r1, r4
   1dc96:	4630      	mov	r0, r6
   1dc98:	f7f1 f9f6 	bl	f088 <gpiote_pin_int_cfg>
		if (res != 0) {
   1dc9c:	2800      	cmp	r0, #0
   1dc9e:	d1f2      	bne.n	1dc86 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1dca0:	3401      	adds	r4, #1
   1dca2:	b2e4      	uxtb	r4, r4
   1dca4:	e7ec      	b.n	1dc80 <gpio_nrfx_pin_enable_callback+0x1a>

0001dca6 <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   1dca6:	2000      	movs	r0, #0
   1dca8:	4770      	bx	lr

0001dcaa <z_errno>:
   1dcaa:	f7fb ba23 	b.w	190f4 <z_impl_z_errno>

0001dcae <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1dcae:	4668      	mov	r0, sp
   1dcb0:	f020 0107 	bic.w	r1, r0, #7
   1dcb4:	468d      	mov	sp, r1
   1dcb6:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   1dcb8:	f7f5 fafa 	bl	132b0 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1dcbc:	f7ef fe84 	bl	d9c8 <_arch_isr_direct_pm>
   1dcc0:	f7ef fda6 	bl	d810 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1dcc4:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1dcc8:	4685      	mov	sp, r0
   1dcca:	4770      	bx	lr

0001dccc <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   1dccc:	4668      	mov	r0, sp
   1dcce:	f020 0107 	bic.w	r1, r0, #7
   1dcd2:	468d      	mov	sp, r1
   1dcd4:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   1dcd6:	f7f5 fee3 	bl	13aa0 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1dcda:	f7ef fe75 	bl	d9c8 <_arch_isr_direct_pm>
   1dcde:	f7ef fd97 	bl	d810 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   1dce2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1dce6:	4685      	mov	sp, r0
   1dce8:	4770      	bx	lr

0001dcea <trace_task_create>:
{
   1dcea:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   1dcec:	201d      	movs	r0, #29
   1dcee:	2200      	movs	r2, #0
   1dcf0:	2106      	movs	r1, #6
   1dcf2:	f7ef fe37 	bl	d964 <z_arm_irq_priority_set>
}
   1dcf6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   1dcfa:	201d      	movs	r0, #29
   1dcfc:	f7ef be22 	b.w	d944 <arch_irq_enable>

0001dd00 <read_task_create>:
{
   1dd00:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   1dd02:	201c      	movs	r0, #28
   1dd04:	2200      	movs	r2, #0
   1dd06:	2106      	movs	r1, #6
   1dd08:	f7ef fe2c 	bl	d964 <z_arm_irq_priority_set>
}
   1dd0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   1dd10:	201c      	movs	r0, #28
   1dd12:	f7ef be17 	b.w	d944 <arch_irq_enable>

0001dd16 <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   1dd16:	2000      	movs	r0, #0
   1dd18:	4770      	bx	lr

0001dd1a <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   1dd1a:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   1dd1e:	bf18      	it	ne
   1dd20:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   1dd22:	0782      	lsls	r2, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   1dd24:	bf48      	it	mi
   1dd26:	f043 0308 	orrmi.w	r3, r3, #8
}
   1dd2a:	4618      	mov	r0, r3
   1dd2c:	4770      	bx	lr

0001dd2e <z_to_nrf_family>:
	switch (z_family) {
   1dd2e:	2803      	cmp	r0, #3
   1dd30:	d00f      	beq.n	1dd52 <z_to_nrf_family+0x24>
   1dd32:	d808      	bhi.n	1dd46 <z_to_nrf_family+0x18>
   1dd34:	2801      	cmp	r0, #1
   1dd36:	d00e      	beq.n	1dd56 <z_to_nrf_family+0x28>
   1dd38:	2802      	cmp	r0, #2
		return -EAFNOSUPPORT;
   1dd3a:	bf08      	it	eq
   1dd3c:	200a      	moveq	r0, #10
   1dd3e:	bf18      	it	ne
   1dd40:	f06f 002e 	mvnne.w	r0, #46	; 0x2e
   1dd44:	4770      	bx	lr
	switch (z_family) {
   1dd46:	2866      	cmp	r0, #102	; 0x66
   1dd48:	d006      	beq.n	1dd58 <z_to_nrf_family+0x2a>
   1dd4a:	2867      	cmp	r0, #103	; 0x67
		return -EAFNOSUPPORT;
   1dd4c:	bf08      	it	eq
   1dd4e:	2001      	moveq	r0, #1
   1dd50:	e7f5      	b.n	1dd3e <z_to_nrf_family+0x10>
		return NRF_AF_PACKET;
   1dd52:	2005      	movs	r0, #5
   1dd54:	4770      	bx	lr
		return NRF_AF_INET;
   1dd56:	2002      	movs	r0, #2
}
   1dd58:	4770      	bx	lr

0001dd5a <z_to_nrf_protocol>:
	switch (proto) {
   1dd5a:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   1dd5e:	d01d      	beq.n	1dd9c <z_to_nrf_protocol+0x42>
   1dd60:	dc08      	bgt.n	1dd74 <z_to_nrf_protocol+0x1a>
   1dd62:	2806      	cmp	r0, #6
   1dd64:	d01d      	beq.n	1dda2 <z_to_nrf_protocol+0x48>
   1dd66:	2811      	cmp	r0, #17
   1dd68:	d01d      	beq.n	1dda6 <z_to_nrf_protocol+0x4c>
   1dd6a:	2800      	cmp	r0, #0
		return -EPROTONOSUPPORT;
   1dd6c:	bf18      	it	ne
   1dd6e:	f06f 002a 	mvnne.w	r0, #42	; 0x2a
   1dd72:	4770      	bx	lr
	switch (proto) {
   1dd74:	f240 2301 	movw	r3, #513	; 0x201
   1dd78:	4298      	cmp	r0, r3
   1dd7a:	d015      	beq.n	1dda8 <z_to_nrf_protocol+0x4e>
   1dd7c:	dc06      	bgt.n	1dd8c <z_to_nrf_protocol+0x32>
   1dd7e:	f240 1311 	movw	r3, #273	; 0x111
   1dd82:	4298      	cmp	r0, r3
		return -EPROTONOSUPPORT;
   1dd84:	bf08      	it	eq
   1dd86:	f44f 7087 	moveq.w	r0, #270	; 0x10e
   1dd8a:	e7ef      	b.n	1dd6c <z_to_nrf_protocol+0x12>
	switch (proto) {
   1dd8c:	f240 2302 	movw	r3, #514	; 0x202
   1dd90:	4298      	cmp	r0, r3
   1dd92:	d009      	beq.n	1dda8 <z_to_nrf_protocol+0x4e>
   1dd94:	f240 2303 	movw	r3, #515	; 0x203
   1dd98:	4298      	cmp	r0, r3
   1dd9a:	e7e7      	b.n	1dd6c <z_to_nrf_protocol+0x12>
		return NRF_SPROTO_TLS1v2;
   1dd9c:	f44f 7082 	mov.w	r0, #260	; 0x104
   1dda0:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   1dda2:	2001      	movs	r0, #1
   1dda4:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   1dda6:	2002      	movs	r0, #2
}
   1dda8:	4770      	bx	lr

0001ddaa <nrf91_bsdlib_socket_offload_init>:
}
   1ddaa:	2000      	movs	r0, #0
   1ddac:	4770      	bx	lr

0001ddae <z_errno>:
   1ddae:	f7fb b9a1 	b.w	190f4 <z_impl_z_errno>

0001ddb2 <nrf91_socket_offload_freeaddrinfo>:
{
   1ddb2:	b538      	push	{r3, r4, r5, lr}
   1ddb4:	4604      	mov	r4, r0
	while (next != NULL) {
   1ddb6:	b904      	cbnz	r4, 1ddba <nrf91_socket_offload_freeaddrinfo+0x8>
}
   1ddb8:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   1ddba:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   1ddbc:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   1ddbe:	f000 fcf2 	bl	1e7a6 <k_free>
		k_free(this);
   1ddc2:	4620      	mov	r0, r4
   1ddc4:	f000 fcef 	bl	1e7a6 <k_free>
		next = next->ai_next;
   1ddc8:	462c      	mov	r4, r5
   1ddca:	e7f4      	b.n	1ddb6 <nrf91_socket_offload_freeaddrinfo+0x4>

0001ddcc <z_to_nrf_addrinfo_hints>:
{
   1ddcc:	b538      	push	{r3, r4, r5, lr}
   1ddce:	460c      	mov	r4, r1
   1ddd0:	4605      	mov	r5, r0
	memset(nrf_out, 0, sizeof(struct nrf_addrinfo));
   1ddd2:	2220      	movs	r2, #32
   1ddd4:	2100      	movs	r1, #0
   1ddd6:	4620      	mov	r0, r4
   1ddd8:	f7ff fd6a 	bl	1d8b0 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   1dddc:	2300      	movs	r3, #0
   1ddde:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1dde0:	68ab      	ldr	r3, [r5, #8]
	switch (socktype) {
   1dde2:	2b03      	cmp	r3, #3
   1dde4:	d003      	beq.n	1ddee <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   1dde6:	2b04      	cmp	r3, #4
   1dde8:	bf08      	it	eq
   1ddea:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1ddee:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   1ddf0:	88a8      	ldrh	r0, [r5, #4]
   1ddf2:	f7ff ff9c 	bl	1dd2e <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1ddf6:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
   1ddfa:	d00b      	beq.n	1de14 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   1ddfc:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1ddfe:	68e8      	ldr	r0, [r5, #12]
   1de00:	f7ff ffab 	bl	1dd5a <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1de04:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1de08:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1de0a:	d003      	beq.n	1de14 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   1de0c:	69a8      	ldr	r0, [r5, #24]
   1de0e:	b108      	cbz	r0, 1de14 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   1de10:	61a0      	str	r0, [r4, #24]
	return 0;
   1de12:	2000      	movs	r0, #0
}
   1de14:	bd38      	pop	{r3, r4, r5, pc}

0001de16 <nrf91_socket_offload_send>:
{
   1de16:	b570      	push	{r4, r5, r6, lr}
   1de18:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1de1a:	4618      	mov	r0, r3
{
   1de1c:	4615      	mov	r5, r2
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1de1e:	f7ff ff7c 	bl	1dd1a <z_to_nrf_flags>
   1de22:	462a      	mov	r2, r5
   1de24:	4603      	mov	r3, r0
   1de26:	4620      	mov	r0, r4
}
   1de28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1de2c:	f7f7 bb8c 	b.w	15548 <nrf_send>

0001de30 <nrf91_socket_offload_recv>:
{
   1de30:	b570      	push	{r4, r5, r6, lr}
   1de32:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1de34:	4618      	mov	r0, r3
{
   1de36:	4615      	mov	r5, r2
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1de38:	f7ff ff6f 	bl	1dd1a <z_to_nrf_flags>
   1de3c:	462a      	mov	r2, r5
   1de3e:	4603      	mov	r3, r0
   1de40:	4620      	mov	r0, r4
}
   1de42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1de46:	f7f7 bbb5 	b.w	155b4 <nrf_recv>

0001de4a <nrf91_socket_offload_getsockopt>:
{
   1de4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1de4e:	461d      	mov	r5, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   1de50:	2300      	movs	r3, #0
{
   1de52:	b086      	sub	sp, #24
   1de54:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   1de58:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1de5c:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   1de60:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   1de64:	4607      	mov	r7, r0
   1de66:	460c      	mov	r4, r1
   1de68:	4616      	mov	r6, r2
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1de6a:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   1de6c:	d002      	beq.n	1de74 <nrf91_socket_offload_getsockopt+0x2a>
   1de6e:	dc2b      	bgt.n	1dec8 <nrf91_socket_offload_getsockopt+0x7e>
   1de70:	2901      	cmp	r1, #1
   1de72:	d13d      	bne.n	1def0 <nrf91_socket_offload_getsockopt+0xa6>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   1de74:	aa02      	add	r2, sp, #8
   1de76:	4631      	mov	r1, r6
   1de78:	4620      	mov	r0, r4
   1de7a:	f7f1 fcfb 	bl	f874 <z_to_nrf_optname>
   1de7e:	2800      	cmp	r0, #0
   1de80:	db36      	blt.n	1def0 <nrf91_socket_offload_getsockopt+0xa6>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   1de82:	2c01      	cmp	r4, #1
   1de84:	d128      	bne.n	1ded8 <nrf91_socket_offload_getsockopt+0x8e>
   1de86:	2e14      	cmp	r6, #20
   1de88:	d126      	bne.n	1ded8 <nrf91_socket_offload_getsockopt+0x8e>
		nrf_optlen = sizeof(struct nrf_timeval);
   1de8a:	2308      	movs	r3, #8
   1de8c:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   1de8e:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1de90:	aa03      	add	r2, sp, #12
   1de92:	9200      	str	r2, [sp, #0]
   1de94:	4638      	mov	r0, r7
   1de96:	9a02      	ldr	r2, [sp, #8]
   1de98:	4621      	mov	r1, r4
   1de9a:	f7f7 fc0b 	bl	156b4 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   1de9e:	4607      	mov	r7, r0
   1dea0:	b970      	cbnz	r0, 1dec0 <nrf91_socket_offload_getsockopt+0x76>
   1dea2:	b16d      	cbz	r5, 1dec0 <nrf91_socket_offload_getsockopt+0x76>
		*optlen = nrf_optlen;
   1dea4:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   1dea6:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   1dea8:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   1deac:	d108      	bne.n	1dec0 <nrf91_socket_offload_getsockopt+0x76>
			if (optname == SO_ERROR) {
   1deae:	2e04      	cmp	r6, #4
   1deb0:	d114      	bne.n	1dedc <nrf91_socket_offload_getsockopt+0x92>
				bsd_os_errno_set(*(int *)optval);
   1deb2:	6828      	ldr	r0, [r5, #0]
   1deb4:	f7f1 fbf8 	bl	f6a8 <bsd_os_errno_set>
				*(int *)optval = errno;
   1deb8:	f7ff ff79 	bl	1ddae <z_errno>
   1debc:	6803      	ldr	r3, [r0, #0]
   1debe:	602b      	str	r3, [r5, #0]
}
   1dec0:	4638      	mov	r0, r7
   1dec2:	b006      	add	sp, #24
   1dec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1dec8:	f240 2302 	movw	r3, #514	; 0x202
   1decc:	4299      	cmp	r1, r3
   1dece:	d0d1      	beq.n	1de74 <nrf91_socket_offload_getsockopt+0x2a>
   1ded0:	f240 2303 	movw	r3, #515	; 0x203
   1ded4:	4299      	cmp	r1, r3
   1ded6:	e7cc      	b.n	1de72 <nrf91_socket_offload_getsockopt+0x28>
   1ded8:	462b      	mov	r3, r5
   1deda:	e7d9      	b.n	1de90 <nrf91_socket_offload_getsockopt+0x46>
			} else if (optname == SO_RCVTIMEO) {
   1dedc:	2e14      	cmp	r6, #20
   1dede:	d1ef      	bne.n	1dec0 <nrf91_socket_offload_getsockopt+0x76>
				((struct timeval *)optval)->tv_sec =
   1dee0:	9b04      	ldr	r3, [sp, #16]
   1dee2:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   1dee4:	9b05      	ldr	r3, [sp, #20]
   1dee6:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   1dee8:	2308      	movs	r3, #8
   1deea:	f8c8 3000 	str.w	r3, [r8]
   1deee:	e7e7      	b.n	1dec0 <nrf91_socket_offload_getsockopt+0x76>
	errno = ENOPROTOOPT;
   1def0:	f7ff ff5d 	bl	1ddae <z_errno>
   1def4:	232a      	movs	r3, #42	; 0x2a
	return retval;
   1def6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	errno = ENOPROTOOPT;
   1defa:	6003      	str	r3, [r0, #0]
	return retval;
   1defc:	e7e0      	b.n	1dec0 <nrf91_socket_offload_getsockopt+0x76>

0001defe <nrf91_socket_offload_poll>:
{
   1defe:	b5f0      	push	{r4, r5, r6, r7, lr}
   1df00:	b091      	sub	sp, #68	; 0x44
   1df02:	4605      	mov	r5, r0
   1df04:	460c      	mov	r4, r1
   1df06:	4616      	mov	r6, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   1df08:	2100      	movs	r1, #0
   1df0a:	2240      	movs	r2, #64	; 0x40
   1df0c:	4668      	mov	r0, sp
   1df0e:	f7ff fccf 	bl	1d8b0 <memset>
	for (int i = 0; i < nfds; i++) {
   1df12:	466a      	mov	r2, sp
   1df14:	2100      	movs	r1, #0
		if (fds[i].events & POLLIN) {
   1df16:	1d2f      	adds	r7, r5, #4
	for (int i = 0; i < nfds; i++) {
   1df18:	42a1      	cmp	r1, r4
   1df1a:	db0c      	blt.n	1df36 <nrf91_socket_offload_poll+0x38>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   1df1c:	4632      	mov	r2, r6
   1df1e:	4621      	mov	r1, r4
   1df20:	4668      	mov	r0, sp
   1df22:	f7f7 fbe7 	bl	156f4 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   1df26:	2200      	movs	r2, #0
   1df28:	462b      	mov	r3, r5
		fds[i].revents = 0;
   1df2a:	4616      	mov	r6, r2
			fds[i].revents |= POLLIN;
   1df2c:	2701      	movs	r7, #1
	for (int i = 0; i < nfds; i++) {
   1df2e:	42a2      	cmp	r2, r4
   1df30:	db1a      	blt.n	1df68 <nrf91_socket_offload_poll+0x6a>
}
   1df32:	b011      	add	sp, #68	; 0x44
   1df34:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   1df36:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   1df3a:	f837 0031 	ldrh.w	r0, [r7, r1, lsl #3]
		tmp[i].handle = fds[i].fd;
   1df3e:	6013      	str	r3, [r2, #0]
		if (fds[i].events & POLLIN) {
   1df40:	07c3      	lsls	r3, r0, #31
			tmp[i].requested |= NRF_POLLIN;
   1df42:	bf48      	it	mi
   1df44:	8893      	ldrhmi	r3, [r2, #4]
	for (int i = 0; i < nfds; i++) {
   1df46:	f101 0101 	add.w	r1, r1, #1
			tmp[i].requested |= NRF_POLLIN;
   1df4a:	bf44      	itt	mi
   1df4c:	f043 0301 	orrmi.w	r3, r3, #1
   1df50:	8093      	strhmi	r3, [r2, #4]
		if (fds[i].events & POLLOUT) {
   1df52:	0743      	lsls	r3, r0, #29
			tmp[i].requested |= NRF_POLLOUT;
   1df54:	bf48      	it	mi
   1df56:	8893      	ldrhmi	r3, [r2, #4]
   1df58:	f102 0208 	add.w	r2, r2, #8
   1df5c:	bf44      	itt	mi
   1df5e:	f043 0302 	orrmi.w	r3, r3, #2
   1df62:	f822 3c04 	strhmi.w	r3, [r2, #-4]
   1df66:	e7d7      	b.n	1df18 <nrf91_socket_offload_poll+0x1a>
		if (tmp[i].returned & NRF_POLLIN) {
   1df68:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   1df6c:	88c9      	ldrh	r1, [r1, #6]
		fds[i].revents = 0;
   1df6e:	80de      	strh	r6, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   1df70:	07cd      	lsls	r5, r1, #31
			fds[i].revents |= POLLIN;
   1df72:	bf48      	it	mi
   1df74:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   1df76:	078d      	lsls	r5, r1, #30
			fds[i].revents |= POLLOUT;
   1df78:	bf48      	it	mi
   1df7a:	88dd      	ldrhmi	r5, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   1df7c:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   1df80:	bf44      	itt	mi
   1df82:	f045 0504 	orrmi.w	r5, r5, #4
   1df86:	80dd      	strhmi	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   1df88:	074d      	lsls	r5, r1, #29
			fds[i].revents |= POLLERR;
   1df8a:	bf48      	it	mi
   1df8c:	88dd      	ldrhmi	r5, [r3, #6]
   1df8e:	f103 0308 	add.w	r3, r3, #8
   1df92:	bf44      	itt	mi
   1df94:	f045 0508 	orrmi.w	r5, r5, #8
   1df98:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   1df9c:	06cd      	lsls	r5, r1, #27
			fds[i].revents |= POLLNVAL;
   1df9e:	bf42      	ittt	mi
   1dfa0:	f833 5c02 	ldrhmi.w	r5, [r3, #-2]
   1dfa4:	f045 0520 	orrmi.w	r5, r5, #32
   1dfa8:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   1dfac:	0709      	lsls	r1, r1, #28
			fds[i].revents |= POLLHUP;
   1dfae:	bf42      	ittt	mi
   1dfb0:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   1dfb4:	f041 0110 	orrmi.w	r1, r1, #16
   1dfb8:	f823 1c02 	strhmi.w	r1, [r3, #-2]
   1dfbc:	e7b7      	b.n	1df2e <nrf91_socket_offload_poll+0x30>

0001dfbe <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   1dfbe:	f7f7 bb25 	b.w	1560c <nrf_listen>

0001dfc2 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   1dfc2:	f7f7 ba97 	b.w	154f4 <nrf_close>

0001dfc6 <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   1dfc6:	2903      	cmp	r1, #3
{
   1dfc8:	b508      	push	{r3, lr}
	switch (cmd) {
   1dfca:	d00b      	beq.n	1dfe4 <nrf91_socket_offload_fcntl+0x1e>
   1dfcc:	2904      	cmp	r1, #4
   1dfce:	d111      	bne.n	1dff4 <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   1dfd0:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   1dfd2:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   1dfd6:	d10d      	bne.n	1dff4 <nrf91_socket_offload_fcntl+0x2e>
}
   1dfd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1dfdc:	1392      	asrs	r2, r2, #14
   1dfde:	2101      	movs	r1, #1
   1dfe0:	f7f7 bb8a 	b.w	156f8 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   1dfe4:	2200      	movs	r2, #0
   1dfe6:	2102      	movs	r1, #2
   1dfe8:	f7f7 fb86 	bl	156f8 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   1dfec:	0380      	lsls	r0, r0, #14
   1dfee:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   1dff2:	bd08      	pop	{r3, pc}
	errno = EINVAL;
   1dff4:	f7ff fedb 	bl	1ddae <z_errno>
   1dff8:	2316      	movs	r3, #22
   1dffa:	6003      	str	r3, [r0, #0]
	return retval;
   1dffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e000:	e7f7      	b.n	1dff2 <nrf91_socket_offload_fcntl+0x2c>

0001e002 <nrf91_socket_offload_recvfrom>:
{
   1e002:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e004:	4605      	mov	r5, r0
   1e006:	b08d      	sub	sp, #52	; 0x34
   1e008:	4618      	mov	r0, r3
   1e00a:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   1e00e:	4617      	mov	r7, r2
	if (from == NULL) {
   1e010:	f7ff fe83 	bl	1dd1a <z_to_nrf_flags>
   1e014:	4603      	mov	r3, r0
   1e016:	b94c      	cbnz	r4, 1e02c <nrf91_socket_offload_recvfrom+0x2a>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1e018:	4628      	mov	r0, r5
   1e01a:	e9cd 4400 	strd	r4, r4, [sp]
   1e01e:	463a      	mov	r2, r7
   1e020:	f7f7 faac 	bl	1557c <nrf_recvfrom>
   1e024:	4605      	mov	r5, r0
}
   1e026:	4628      	mov	r0, r5
   1e028:	b00d      	add	sp, #52	; 0x34
   1e02a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   1e02c:	2224      	movs	r2, #36	; 0x24
   1e02e:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1e030:	aa02      	add	r2, sp, #8
   1e032:	9201      	str	r2, [sp, #4]
   1e034:	aa03      	add	r2, sp, #12
   1e036:	9200      	str	r2, [sp, #0]
   1e038:	4628      	mov	r0, r5
   1e03a:	463a      	mov	r2, r7
   1e03c:	f7f7 fa9e 	bl	1557c <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   1e040:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1e042:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   1e044:	2b02      	cmp	r3, #2
   1e046:	d109      	bne.n	1e05c <nrf91_socket_offload_recvfrom+0x5a>
	ptr->sin_port = nrf_in->sin_port;
   1e048:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1e04c:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1e04e:	2301      	movs	r3, #1
   1e050:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1e052:	9b06      	ldr	r3, [sp, #24]
   1e054:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   1e056:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   1e058:	6033      	str	r3, [r6, #0]
	return retval;
   1e05a:	e7e4      	b.n	1e026 <nrf91_socket_offload_recvfrom+0x24>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   1e05c:	2b0a      	cmp	r3, #10
   1e05e:	d1e2      	bne.n	1e026 <nrf91_socket_offload_recvfrom+0x24>
	ptr->sin6_port = nrf_in->sin6_port;
   1e060:	f8bd 3014 	ldrh.w	r3, [sp, #20]
	ptr->sin6_family = AF_INET6;
   1e064:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   1e066:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   1e068:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e06a:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   1e06c:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e070:	a907      	add	r1, sp, #28
   1e072:	f7ff fbf3 	bl	1d85c <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1e076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e078:	7523      	strb	r3, [r4, #20]
			*fromlen = sizeof(struct sockaddr_in6);
   1e07a:	2318      	movs	r3, #24
   1e07c:	e7ec      	b.n	1e058 <nrf91_socket_offload_recvfrom+0x56>

0001e07e <nrf91_socket_offload_connect>:
{
   1e07e:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   1e080:	880b      	ldrh	r3, [r1, #0]
{
   1e082:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   1e084:	2b01      	cmp	r3, #1
{
   1e086:	4606      	mov	r6, r0
   1e088:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   1e08a:	d10e      	bne.n	1e0aa <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   1e08c:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e08e:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1e090:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   1e094:	2302      	movs	r3, #2
   1e096:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e098:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e09a:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e09e:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   1e0a0:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1e0a2:	f7f7 faa1 	bl	155e8 <nrf_connect>
}
   1e0a6:	b00a      	add	sp, #40	; 0x28
   1e0a8:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   1e0aa:	2b02      	cmp	r3, #2
   1e0ac:	d112      	bne.n	1e0d4 <nrf91_socket_offload_connect+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   1e0ae:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e0b0:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1e0b2:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   1e0b6:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1e0b8:	2210      	movs	r2, #16
   1e0ba:	3104      	adds	r1, #4
   1e0bc:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   1e0be:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e0c0:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1e0c4:	f7ff fbca 	bl	1d85c <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1e0c8:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1e0ca:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1e0cc:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1e0ce:	a901      	add	r1, sp, #4
   1e0d0:	4630      	mov	r0, r6
   1e0d2:	e7e6      	b.n	1e0a2 <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   1e0d4:	f7f7 fa88 	bl	155e8 <nrf_connect>
		if (retval < 0) {
   1e0d8:	2800      	cmp	r0, #0
   1e0da:	dae4      	bge.n	1e0a6 <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   1e0dc:	f7ff fe67 	bl	1ddae <z_errno>
   1e0e0:	2323      	movs	r3, #35	; 0x23
   1e0e2:	6003      	str	r3, [r0, #0]
   1e0e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e0e8:	e7dd      	b.n	1e0a6 <nrf91_socket_offload_connect+0x28>

0001e0ea <nrf91_socket_offload_socket>:
{
   1e0ea:	b510      	push	{r4, lr}
	family = z_to_nrf_family(family);
   1e0ec:	b280      	uxth	r0, r0
   1e0ee:	f7ff fe1e 	bl	1dd2e <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1e0f2:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
	family = z_to_nrf_family(family);
   1e0f6:	4604      	mov	r4, r0
	if (family == -EAFNOSUPPORT) {
   1e0f8:	d106      	bne.n	1e108 <nrf91_socket_offload_socket+0x1e>
		errno = EAFNOSUPPORT;
   1e0fa:	f7ff fe58 	bl	1ddae <z_errno>
   1e0fe:	232f      	movs	r3, #47	; 0x2f
		errno = EPROTONOSUPPORT;
   1e100:	6003      	str	r3, [r0, #0]
}
   1e102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e106:	bd10      	pop	{r4, pc}
	switch (socktype) {
   1e108:	2903      	cmp	r1, #3
   1e10a:	d003      	beq.n	1e114 <nrf91_socket_offload_socket+0x2a>
		return NRF_SOCK_MGMT;
   1e10c:	2904      	cmp	r1, #4
   1e10e:	bf08      	it	eq
   1e110:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   1e114:	4610      	mov	r0, r2
   1e116:	f7ff fe20 	bl	1dd5a <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   1e11a:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	proto = z_to_nrf_protocol(proto);
   1e11e:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   1e120:	d103      	bne.n	1e12a <nrf91_socket_offload_socket+0x40>
		errno = EPROTONOSUPPORT;
   1e122:	f7ff fe44 	bl	1ddae <z_errno>
   1e126:	232b      	movs	r3, #43	; 0x2b
   1e128:	e7ea      	b.n	1e100 <nrf91_socket_offload_socket+0x16>
	retval = nrf_socket(family, type, proto);
   1e12a:	4620      	mov	r0, r4
}
   1e12c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   1e130:	f7f7 b9ce 	b.w	154d0 <nrf_socket>

0001e134 <nrf91_socket_offload_accept>:
{
   1e134:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   1e136:	2708      	movs	r7, #8
{
   1e138:	b085      	sub	sp, #20
   1e13a:	460c      	mov	r4, r1
   1e13c:	4616      	mov	r6, r2
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   1e13e:	eb0d 0107 	add.w	r1, sp, r7
   1e142:	aa01      	add	r2, sp, #4
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   1e144:	9701      	str	r7, [sp, #4]
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   1e146:	f7f7 fa71 	bl	1562c <nrf_accept>
	if (retval < 0) {
   1e14a:	1e05      	subs	r5, r0, #0
   1e14c:	db23      	blt.n	1e196 <nrf91_socket_offload_accept+0x62>
	if (nrf_addr.sa_family == NRF_AF_INET) {
   1e14e:	9b03      	ldr	r3, [sp, #12]
   1e150:	2b02      	cmp	r3, #2
   1e152:	d10a      	bne.n	1e16a <nrf91_socket_offload_accept+0x36>
	ptr->sin_port = nrf_in->sin_port;
   1e154:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		*addrlen = sizeof(struct sockaddr_in);
   1e158:	6037      	str	r7, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   1e15a:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1e15c:	2301      	movs	r3, #1
   1e15e:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1e160:	9b05      	ldr	r3, [sp, #20]
   1e162:	6063      	str	r3, [r4, #4]
}
   1e164:	4628      	mov	r0, r5
   1e166:	b005      	add	sp, #20
   1e168:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (nrf_addr.sa_family == NRF_AF_INET6) {
   1e16a:	2b0a      	cmp	r3, #10
   1e16c:	d10f      	bne.n	1e18e <nrf91_socket_offload_accept+0x5a>
		*addrlen = sizeof(struct sockaddr_in6);
   1e16e:	2318      	movs	r3, #24
   1e170:	6033      	str	r3, [r6, #0]
	ptr->sin6_port = nrf_in->sin6_port;
   1e172:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	ptr->sin6_family = AF_INET6;
   1e176:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   1e178:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   1e17a:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e17c:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   1e17e:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e182:	a906      	add	r1, sp, #24
   1e184:	f7ff fb6a 	bl	1d85c <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1e188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e18a:	7523      	strb	r3, [r4, #20]
   1e18c:	e7ea      	b.n	1e164 <nrf91_socket_offload_accept+0x30>
	errno = ENOTSUP;
   1e18e:	f7ff fe0e 	bl	1ddae <z_errno>
   1e192:	2323      	movs	r3, #35	; 0x23
   1e194:	6003      	str	r3, [r0, #0]
		return -1;
   1e196:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1e19a:	e7e3      	b.n	1e164 <nrf91_socket_offload_accept+0x30>

0001e19c <nrf91_socket_offload_getaddrinfo>:
{
   1e19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e1a0:	4614      	mov	r4, r2
   1e1a2:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   1e1a4:	2100      	movs	r1, #0
{
   1e1a6:	b093      	sub	sp, #76	; 0x4c
   1e1a8:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1e1aa:	2220      	movs	r2, #32
   1e1ac:	a802      	add	r0, sp, #8
{
   1e1ae:	4698      	mov	r8, r3
	struct nrf_addrinfo *nrf_res = NULL;
   1e1b0:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1e1b2:	f7ff fb7d 	bl	1d8b0 <memset>
	if (hints != NULL) {
   1e1b6:	b194      	cbz	r4, 1e1de <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   1e1b8:	a902      	add	r1, sp, #8
   1e1ba:	4620      	mov	r0, r4
   1e1bc:	f7ff fe06 	bl	1ddcc <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   1e1c0:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
   1e1c4:	f000 80bf 	beq.w	1e346 <nrf91_socket_offload_getaddrinfo+0x1aa>
		} else if (error == -EAFNOSUPPORT) {
   1e1c8:	302f      	adds	r0, #47	; 0x2f
   1e1ca:	f000 80bf 	beq.w	1e34c <nrf91_socket_offload_getaddrinfo+0x1b0>
		if (hints->ai_next != NULL) {
   1e1ce:	69e0      	ldr	r0, [r4, #28]
   1e1d0:	b120      	cbz	r0, 1e1dc <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   1e1d2:	ac0a      	add	r4, sp, #40	; 0x28
   1e1d4:	4621      	mov	r1, r4
   1e1d6:	f7ff fdf9 	bl	1ddcc <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   1e1da:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   1e1dc:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   1e1de:	4631      	mov	r1, r6
   1e1e0:	4628      	mov	r0, r5
   1e1e2:	ab01      	add	r3, sp, #4
   1e1e4:	4622      	mov	r2, r4
   1e1e6:	f7f7 fa81 	bl	156ec <nrf_getaddrinfo>
	*res = NULL;
   1e1ea:	2700      	movs	r7, #0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   1e1ec:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   1e1ee:	f8c8 7000 	str.w	r7, [r8]
		return AF_INET6;
   1e1f2:	f04f 0902 	mov.w	r9, #2
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1e1f6:	4605      	mov	r5, r0
   1e1f8:	2800      	cmp	r0, #0
   1e1fa:	d04a      	beq.n	1e292 <nrf91_socket_offload_getaddrinfo+0xf6>
		nrf91_socket_offload_freeaddrinfo(*res);
   1e1fc:	f8d8 0000 	ldr.w	r0, [r8]
   1e200:	f7ff fdd7 	bl	1ddb2 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   1e204:	2300      	movs	r3, #0
   1e206:	f8c8 3000 	str.w	r3, [r8]
   1e20a:	e044      	b.n	1e296 <nrf91_socket_offload_getaddrinfo+0xfa>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   1e20c:	2020      	movs	r0, #32
   1e20e:	f7fb fa6f 	bl	196f0 <k_malloc>
		if (next_z_res == NULL) {
   1e212:	4604      	mov	r4, r0
   1e214:	2800      	cmp	r0, #0
   1e216:	f000 8091 	beq.w	1e33c <nrf91_socket_offload_getaddrinfo+0x1a0>
	family = nrf_to_z_family(nrf_in->ai_family);
   1e21a:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1e21c:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   1e21e:	2a05      	cmp	r2, #5
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   1e220:	e9c0 5506 	strd	r5, r5, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   1e224:	6005      	str	r5, [r0, #0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1e226:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   1e228:	d03c      	beq.n	1e2a4 <nrf91_socket_offload_getaddrinfo+0x108>
   1e22a:	dc09      	bgt.n	1e240 <nrf91_socket_offload_getaddrinfo+0xa4>
   1e22c:	2a01      	cmp	r2, #1
   1e22e:	d03b      	beq.n	1e2a8 <nrf91_socket_offload_getaddrinfo+0x10c>
   1e230:	2a02      	cmp	r2, #2
   1e232:	d03b      	beq.n	1e2ac <nrf91_socket_offload_getaddrinfo+0x110>
			k_free(next_z_res);
   1e234:	4620      	mov	r0, r4
   1e236:	f000 fab6 	bl	1e7a6 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   1e23a:	f06f 0508 	mvn.w	r5, #8
   1e23e:	e7dd      	b.n	1e1fc <nrf91_socket_offload_getaddrinfo+0x60>
	switch (nrf_family) {
   1e240:	2a0a      	cmp	r2, #10
   1e242:	d035      	beq.n	1e2b0 <nrf91_socket_offload_getaddrinfo+0x114>
   1e244:	2a66      	cmp	r2, #102	; 0x66
   1e246:	d1f5      	bne.n	1e234 <nrf91_socket_offload_getaddrinfo+0x98>
		return AF_LTE;
   1e248:	4613      	mov	r3, r2
	z_out->ai_family = family;
   1e24a:	6063      	str	r3, [r4, #4]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1e24c:	68f3      	ldr	r3, [r6, #12]
	switch (proto) {
   1e24e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1e252:	d04e      	beq.n	1e2f2 <nrf91_socket_offload_getaddrinfo+0x156>
   1e254:	dc2e      	bgt.n	1e2b4 <nrf91_socket_offload_getaddrinfo+0x118>
   1e256:	2b01      	cmp	r3, #1
   1e258:	d050      	beq.n	1e2fc <nrf91_socket_offload_getaddrinfo+0x160>
   1e25a:	2b02      	cmp	r3, #2
   1e25c:	d04c      	beq.n	1e2f8 <nrf91_socket_offload_getaddrinfo+0x15c>
   1e25e:	2b00      	cmp	r3, #0
   1e260:	d130      	bne.n	1e2c4 <nrf91_socket_offload_getaddrinfo+0x128>
	if (nrf_in->ai_family == NRF_AF_INET) {
   1e262:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1e264:	60e3      	str	r3, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   1e266:	d14b      	bne.n	1e300 <nrf91_socket_offload_getaddrinfo+0x164>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   1e268:	2008      	movs	r0, #8
   1e26a:	f7fb fa41 	bl	196f0 <k_malloc>
   1e26e:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   1e270:	2800      	cmp	r0, #0
   1e272:	d060      	beq.n	1e336 <nrf91_socket_offload_getaddrinfo+0x19a>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   1e274:	2308      	movs	r3, #8
   1e276:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   1e278:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   1e27a:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1e27c:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   1e27e:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   1e280:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1e282:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   1e284:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   1e286:	2f00      	cmp	r7, #0
   1e288:	d15b      	bne.n	1e342 <nrf91_socket_offload_getaddrinfo+0x1a6>
			*res = next_z_res;
   1e28a:	f8c8 4000 	str.w	r4, [r8]
		next_nrf_res = next_nrf_res->ai_next;
   1e28e:	4627      	mov	r7, r4
   1e290:	69f6      	ldr	r6, [r6, #28]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1e292:	2e00      	cmp	r6, #0
   1e294:	d1ba      	bne.n	1e20c <nrf91_socket_offload_getaddrinfo+0x70>
	nrf_freeaddrinfo(nrf_res);
   1e296:	9801      	ldr	r0, [sp, #4]
   1e298:	f7f7 fa2a 	bl	156f0 <nrf_freeaddrinfo>
}
   1e29c:	4628      	mov	r0, r5
   1e29e:	b013      	add	sp, #76	; 0x4c
   1e2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return AF_PACKET;
   1e2a4:	2303      	movs	r3, #3
   1e2a6:	e7d0      	b.n	1e24a <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_LOCAL;
   1e2a8:	2367      	movs	r3, #103	; 0x67
   1e2aa:	e7ce      	b.n	1e24a <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_INET;
   1e2ac:	2301      	movs	r3, #1
   1e2ae:	e7cc      	b.n	1e24a <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_INET6;
   1e2b0:	2302      	movs	r3, #2
   1e2b2:	e7ca      	b.n	1e24a <nrf91_socket_offload_getaddrinfo+0xae>
	switch (proto) {
   1e2b4:	f240 2101 	movw	r1, #513	; 0x201
   1e2b8:	428b      	cmp	r3, r1
   1e2ba:	d0d2      	beq.n	1e262 <nrf91_socket_offload_getaddrinfo+0xc6>
   1e2bc:	dc0d      	bgt.n	1e2da <nrf91_socket_offload_getaddrinfo+0x13e>
   1e2be:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1e2c2:	d013      	beq.n	1e2ec <nrf91_socket_offload_getaddrinfo+0x150>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1e2c4:	f06f 032a 	mvn.w	r3, #42	; 0x2a
   1e2c8:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   1e2ca:	2300      	movs	r3, #0
   1e2cc:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   1e2ce:	4620      	mov	r0, r4
   1e2d0:	f000 fa69 	bl	1e7a6 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   1e2d4:	f06f 0506 	mvn.w	r5, #6
   1e2d8:	e790      	b.n	1e1fc <nrf91_socket_offload_getaddrinfo+0x60>
	switch (proto) {
   1e2da:	f240 2102 	movw	r1, #514	; 0x202
   1e2de:	428b      	cmp	r3, r1
   1e2e0:	d0bf      	beq.n	1e262 <nrf91_socket_offload_getaddrinfo+0xc6>
   1e2e2:	f240 2103 	movw	r1, #515	; 0x203
   1e2e6:	428b      	cmp	r3, r1
   1e2e8:	d0bb      	beq.n	1e262 <nrf91_socket_offload_getaddrinfo+0xc6>
   1e2ea:	e7eb      	b.n	1e2c4 <nrf91_socket_offload_getaddrinfo+0x128>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1e2ec:	f240 1311 	movw	r3, #273	; 0x111
   1e2f0:	e7b7      	b.n	1e262 <nrf91_socket_offload_getaddrinfo+0xc6>
   1e2f2:	f44f 7381 	mov.w	r3, #258	; 0x102
   1e2f6:	e7b4      	b.n	1e262 <nrf91_socket_offload_getaddrinfo+0xc6>
   1e2f8:	2311      	movs	r3, #17
   1e2fa:	e7b2      	b.n	1e262 <nrf91_socket_offload_getaddrinfo+0xc6>
   1e2fc:	2306      	movs	r3, #6
   1e2fe:	e7b0      	b.n	1e262 <nrf91_socket_offload_getaddrinfo+0xc6>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   1e300:	2a0a      	cmp	r2, #10
   1e302:	d1e4      	bne.n	1e2ce <nrf91_socket_offload_getaddrinfo+0x132>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1e304:	2018      	movs	r0, #24
   1e306:	f7fb f9f3 	bl	196f0 <k_malloc>
   1e30a:	4682      	mov	sl, r0
   1e30c:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   1e30e:	b190      	cbz	r0, 1e336 <nrf91_socket_offload_getaddrinfo+0x19a>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1e310:	2318      	movs	r3, #24
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e312:	2210      	movs	r2, #16
			(const struct nrf_sockaddr_in6 *)nrf_in->ai_addr);
   1e314:	f8d6 b014 	ldr.w	fp, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1e318:	6123      	str	r3, [r4, #16]
	ptr->sin6_port = nrf_in->sin6_port;
   1e31a:	f8bb 3008 	ldrh.w	r3, [fp, #8]
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e31e:	eb0b 0102 	add.w	r1, fp, r2
	ptr->sin6_port = nrf_in->sin6_port;
   1e322:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   1e324:	f820 9b04 	strh.w	r9, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e328:	f7ff fa98 	bl	1d85c <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1e32c:	f8db 3020 	ldr.w	r3, [fp, #32]
   1e330:	f88a 3014 	strb.w	r3, [sl, #20]
		} else if (error == -EAFNOSUPPORT) {
   1e334:	e7a7      	b.n	1e286 <nrf91_socket_offload_getaddrinfo+0xea>
			k_free(next_z_res);
   1e336:	4620      	mov	r0, r4
   1e338:	f000 fa35 	bl	1e7a6 <k_free>
			retval = DNS_EAI_MEMORY;
   1e33c:	f06f 0509 	mvn.w	r5, #9
   1e340:	e75c      	b.n	1e1fc <nrf91_socket_offload_getaddrinfo+0x60>
			latest_z_res->ai_next = next_z_res;
   1e342:	61fc      	str	r4, [r7, #28]
   1e344:	e7a3      	b.n	1e28e <nrf91_socket_offload_getaddrinfo+0xf2>
			return DNS_EAI_SOCKTYPE;
   1e346:	f06f 0506 	mvn.w	r5, #6
   1e34a:	e7a7      	b.n	1e29c <nrf91_socket_offload_getaddrinfo+0x100>
			return DNS_EAI_ADDRFAMILY;
   1e34c:	f06f 0508 	mvn.w	r5, #8
   1e350:	e7a4      	b.n	1e29c <nrf91_socket_offload_getaddrinfo+0x100>

0001e352 <nrf91_socket_offload_setsockopt>:
{
   1e352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   1e356:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   1e35a:	b086      	sub	sp, #24
   1e35c:	4680      	mov	r8, r0
   1e35e:	460c      	mov	r4, r1
   1e360:	4617      	mov	r7, r2
   1e362:	461d      	mov	r5, r3
   1e364:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	switch (z_in_level) {
   1e366:	d002      	beq.n	1e36e <nrf91_socket_offload_setsockopt+0x1c>
   1e368:	dc1c      	bgt.n	1e3a4 <nrf91_socket_offload_setsockopt+0x52>
   1e36a:	2901      	cmp	r1, #1
   1e36c:	d122      	bne.n	1e3b4 <nrf91_socket_offload_setsockopt+0x62>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   1e36e:	aa03      	add	r2, sp, #12
   1e370:	4639      	mov	r1, r7
   1e372:	4620      	mov	r0, r4
   1e374:	f7f1 fa7e 	bl	f874 <z_to_nrf_optname>
   1e378:	2800      	cmp	r0, #0
   1e37a:	db1b      	blt.n	1e3b4 <nrf91_socket_offload_setsockopt+0x62>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   1e37c:	2c01      	cmp	r4, #1
   1e37e:	d107      	bne.n	1e390 <nrf91_socket_offload_setsockopt+0x3e>
   1e380:	2f14      	cmp	r7, #20
   1e382:	d105      	bne.n	1e390 <nrf91_socket_offload_setsockopt+0x3e>
		nrf_optlen = sizeof(struct nrf_timeval);
   1e384:	2608      	movs	r6, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   1e386:	682b      	ldr	r3, [r5, #0]
   1e388:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1e38a:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   1e38c:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1e38e:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1e390:	9600      	str	r6, [sp, #0]
   1e392:	462b      	mov	r3, r5
   1e394:	9a03      	ldr	r2, [sp, #12]
   1e396:	4621      	mov	r1, r4
   1e398:	4640      	mov	r0, r8
   1e39a:	f7f7 f96f 	bl	1567c <nrf_setsockopt>
}
   1e39e:	b006      	add	sp, #24
   1e3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1e3a4:	f240 2302 	movw	r3, #514	; 0x202
   1e3a8:	4299      	cmp	r1, r3
   1e3aa:	d0e0      	beq.n	1e36e <nrf91_socket_offload_setsockopt+0x1c>
   1e3ac:	f240 2303 	movw	r3, #515	; 0x203
   1e3b0:	4299      	cmp	r1, r3
   1e3b2:	e7db      	b.n	1e36c <nrf91_socket_offload_setsockopt+0x1a>
	errno = ENOPROTOOPT;
   1e3b4:	f7ff fcfb 	bl	1ddae <z_errno>
   1e3b8:	232a      	movs	r3, #42	; 0x2a
   1e3ba:	6003      	str	r3, [r0, #0]
   1e3bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e3c0:	e7ed      	b.n	1e39e <nrf91_socket_offload_setsockopt+0x4c>

0001e3c2 <nrf91_socket_offload_sendto>:
{
   1e3c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e3c6:	b08d      	sub	sp, #52	; 0x34
   1e3c8:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1e3ca:	4605      	mov	r5, r0
   1e3cc:	460e      	mov	r6, r1
   1e3ce:	4617      	mov	r7, r2
   1e3d0:	4698      	mov	r8, r3
	if (to == NULL) {
   1e3d2:	b96c      	cbnz	r4, 1e3f0 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1e3d4:	4618      	mov	r0, r3
   1e3d6:	f7ff fca0 	bl	1dd1a <z_to_nrf_flags>
   1e3da:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1e3de:	4603      	mov	r3, r0
   1e3e0:	463a      	mov	r2, r7
   1e3e2:	4631      	mov	r1, r6
   1e3e4:	4628      	mov	r0, r5
   1e3e6:	f7f7 f893 	bl	15510 <nrf_sendto>
}
   1e3ea:	b00d      	add	sp, #52	; 0x34
   1e3ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   1e3f0:	8823      	ldrh	r3, [r4, #0]
   1e3f2:	2b01      	cmp	r3, #1
   1e3f4:	d110      	bne.n	1e418 <nrf91_socket_offload_sendto+0x56>
	nrf_out->sin_port = ptr->sin_port;
   1e3f6:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e3f8:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   1e3fa:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   1e3fe:	2302      	movs	r3, #2
   1e400:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e402:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1e404:	4640      	mov	r0, r8
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e406:	f88d 100c 	strb.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e40a:	9306      	str	r3, [sp, #24]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1e40c:	f7ff fc85 	bl	1dd1a <z_to_nrf_flags>
   1e410:	9101      	str	r1, [sp, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1e412:	ab03      	add	r3, sp, #12
   1e414:	9300      	str	r3, [sp, #0]
   1e416:	e7e2      	b.n	1e3de <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   1e418:	2b02      	cmp	r3, #2
   1e41a:	d115      	bne.n	1e448 <nrf91_socket_offload_sendto+0x86>
	nrf_out->sin6_port = ptr->sin6_port;
   1e41c:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e41e:	f04f 0924 	mov.w	r9, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1e422:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin6_family = NRF_AF_INET6;
   1e426:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1e428:	2210      	movs	r2, #16
   1e42a:	1d21      	adds	r1, r4, #4
   1e42c:	a807      	add	r0, sp, #28
	nrf_out->sin6_family = NRF_AF_INET6;
   1e42e:	9304      	str	r3, [sp, #16]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e430:	f88d 900c 	strb.w	r9, [sp, #12]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1e434:	f7ff fa12 	bl	1d85c <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1e438:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1e43a:	4640      	mov	r0, r8
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1e43c:	930b      	str	r3, [sp, #44]	; 0x2c
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1e43e:	f7ff fc6c 	bl	1dd1a <z_to_nrf_flags>
   1e442:	f8cd 9004 	str.w	r9, [sp, #4]
   1e446:	e7e4      	b.n	1e412 <nrf91_socket_offload_sendto+0x50>
	errno = ENOTSUP;
   1e448:	f7ff fcb1 	bl	1ddae <z_errno>
   1e44c:	2323      	movs	r3, #35	; 0x23
   1e44e:	6003      	str	r3, [r0, #0]
	return retval;
   1e450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e454:	e7c9      	b.n	1e3ea <nrf91_socket_offload_sendto+0x28>

0001e456 <nrf91_socket_offload_bind>:
{
   1e456:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   1e458:	880b      	ldrh	r3, [r1, #0]
{
   1e45a:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   1e45c:	2b01      	cmp	r3, #1
{
   1e45e:	4606      	mov	r6, r0
   1e460:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   1e462:	d10e      	bne.n	1e482 <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   1e464:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e466:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1e468:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   1e46c:	2302      	movs	r3, #2
   1e46e:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e470:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e472:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e476:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   1e478:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1e47a:	f7f7 f8ed 	bl	15658 <nrf_bind>
}
   1e47e:	b00a      	add	sp, #40	; 0x28
   1e480:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   1e482:	2b02      	cmp	r3, #2
   1e484:	d112      	bne.n	1e4ac <nrf91_socket_offload_bind+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   1e486:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e488:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1e48a:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   1e48e:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1e490:	2210      	movs	r2, #16
   1e492:	3104      	adds	r1, #4
   1e494:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   1e496:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e498:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1e49c:	f7ff f9de 	bl	1d85c <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1e4a0:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1e4a2:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1e4a4:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1e4a6:	a901      	add	r1, sp, #4
   1e4a8:	4630      	mov	r0, r6
   1e4aa:	e7e6      	b.n	1e47a <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   1e4ac:	f7ff fc7f 	bl	1ddae <z_errno>
   1e4b0:	2323      	movs	r3, #35	; 0x23
   1e4b2:	6003      	str	r3, [r0, #0]
   1e4b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e4b8:	e7e1      	b.n	1e47e <nrf91_socket_offload_bind+0x28>

0001e4ba <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   1e4ba:	ea40 0301 	orr.w	r3, r0, r1
   1e4be:	f033 030f 	bics.w	r3, r3, #15
   1e4c2:	d101      	bne.n	1e4c8 <dk_set_leds_state+0xe>
   1e4c4:	f7f1 ba4a 	b.w	f95c <dk_set_leds_state.part.7>
}
   1e4c8:	f06f 0015 	mvn.w	r0, #21
   1e4cc:	4770      	bx	lr

0001e4ce <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   1e4ce:	280d      	cmp	r0, #13
   1e4d0:	d004      	beq.n	1e4dc <is_lfcr+0xe>
   1e4d2:	f1a0 030a 	sub.w	r3, r0, #10
   1e4d6:	4258      	negs	r0, r3
   1e4d8:	4158      	adcs	r0, r3
   1e4da:	4770      	bx	lr
		return true;
   1e4dc:	2001      	movs	r0, #1
}
   1e4de:	4770      	bx	lr

0001e4e0 <skip_command_prefix>:
{
   1e4e0:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   1e4e2:	6802      	ldr	r2, [r0, #0]
{
   1e4e4:	4601      	mov	r1, r0
	*cmd += sizeof("AT") - 1;
   1e4e6:	1c93      	adds	r3, r2, #2
   1e4e8:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   1e4ea:	7894      	ldrb	r4, [r2, #2]
   1e4ec:	4620      	mov	r0, r4
   1e4ee:	f7ff ffee 	bl	1e4ce <is_lfcr>
   1e4f2:	b910      	cbnz	r0, 1e4fa <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e4f4:	b10c      	cbz	r4, 1e4fa <skip_command_prefix+0x1a>
	(*cmd)++;
   1e4f6:	3203      	adds	r2, #3
   1e4f8:	600a      	str	r2, [r1, #0]
}
   1e4fa:	bd10      	pop	{r4, pc}

0001e4fc <is_valid_notification_char>:
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
}

static inline int toupper(int chr)
{
	return (int)((chr >= (int)'a' && chr <=
   1e4fc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1e500:	2b19      	cmp	r3, #25
   1e502:	bf98      	it	ls
   1e504:	3820      	subls	r0, #32
	if ((chr >= 'A') && (chr <= 'Z')) {
   1e506:	3841      	subs	r0, #65	; 0x41
   1e508:	b2c0      	uxtb	r0, r0
}
   1e50a:	2819      	cmp	r0, #25
   1e50c:	bf8c      	ite	hi
   1e50e:	2000      	movhi	r0, #0
   1e510:	2001      	movls	r0, #1
   1e512:	4770      	bx	lr

0001e514 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   1e514:	b510      	push	{r4, lr}
   1e516:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   1e518:	f7ff f96e 	bl	1d7f8 <strlen>
   1e51c:	2801      	cmp	r0, #1
   1e51e:	d91e      	bls.n	1e55e <is_command+0x4a>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   1e520:	7823      	ldrb	r3, [r4, #0]
   1e522:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1e526:	2a19      	cmp	r2, #25
   1e528:	bf98      	it	ls
   1e52a:	3b20      	subls	r3, #32
   1e52c:	2b41      	cmp	r3, #65	; 0x41
   1e52e:	d116      	bne.n	1e55e <is_command+0x4a>
   1e530:	7863      	ldrb	r3, [r4, #1]
   1e532:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1e536:	2a19      	cmp	r2, #25
   1e538:	bf98      	it	ls
   1e53a:	3b20      	subls	r3, #32
   1e53c:	2b54      	cmp	r3, #84	; 0x54
   1e53e:	d10e      	bne.n	1e55e <is_command+0x4a>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1e540:	78a2      	ldrb	r2, [r4, #2]
   1e542:	2a25      	cmp	r2, #37	; 0x25
   1e544:	d00d      	beq.n	1e562 <is_command+0x4e>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   1e546:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   1e54a:	2b23      	cmp	r3, #35	; 0x23
   1e54c:	d009      	beq.n	1e562 <is_command+0x4e>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   1e54e:	4610      	mov	r0, r2
   1e550:	f7ff ffbd 	bl	1e4ce <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   1e554:	b910      	cbnz	r0, 1e55c <is_command+0x48>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e556:	fab2 f082 	clz	r0, r2
   1e55a:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   1e55c:	bd10      	pop	{r4, pc}
		return false;
   1e55e:	2000      	movs	r0, #0
   1e560:	e7fc      	b.n	1e55c <is_command+0x48>
		return true;
   1e562:	2001      	movs	r0, #1
   1e564:	e7fa      	b.n	1e55c <is_command+0x48>

0001e566 <at_params_list_init>:
{
   1e566:	b538      	push	{r3, r4, r5, lr}
   1e568:	460d      	mov	r5, r1
	if (list == NULL) {
   1e56a:	4604      	mov	r4, r0
   1e56c:	b140      	cbz	r0, 1e580 <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   1e56e:	210c      	movs	r1, #12
   1e570:	4628      	mov	r0, r5
   1e572:	f000 f91d 	bl	1e7b0 <k_calloc>
   1e576:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   1e578:	b128      	cbz	r0, 1e586 <at_params_list_init+0x20>
	return 0;
   1e57a:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   1e57c:	6025      	str	r5, [r4, #0]
}
   1e57e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1e580:	f06f 0015 	mvn.w	r0, #21
   1e584:	e7fb      	b.n	1e57e <at_params_list_init+0x18>
		return -ENOMEM;
   1e586:	f06f 000b 	mvn.w	r0, #11
   1e58a:	e7f8      	b.n	1e57e <at_params_list_init+0x18>

0001e58c <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   1e58c:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   1e58e:	4604      	mov	r4, r0
   1e590:	b148      	cbz	r0, 1e5a6 <at_params_list_free+0x1a>
   1e592:	6843      	ldr	r3, [r0, #4]
   1e594:	b13b      	cbz	r3, 1e5a6 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   1e596:	2500      	movs	r5, #0
	at_params_list_clear(list);
   1e598:	f7f2 f954 	bl	10844 <at_params_list_clear>
	list->param_count = 0;
   1e59c:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   1e59e:	6860      	ldr	r0, [r4, #4]
   1e5a0:	f000 f901 	bl	1e7a6 <k_free>
	list->params = NULL;
   1e5a4:	6065      	str	r5, [r4, #4]
}
   1e5a6:	bd38      	pop	{r3, r4, r5, pc}

0001e5a8 <at_params_short_put>:

int at_params_short_put(const struct at_param_list *list, size_t index,
			u16_t value)
{
   1e5a8:	b538      	push	{r3, r4, r5, lr}
   1e5aa:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   1e5ac:	b910      	cbnz	r0, 1e5b4 <at_params_short_put+0xc>
		return -EINVAL;
   1e5ae:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_SHORT;
	param->value.int_val = (u32_t)(value & USHRT_MAX);
	return 0;
}
   1e5b2:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   1e5b4:	6843      	ldr	r3, [r0, #4]
   1e5b6:	2b00      	cmp	r3, #0
   1e5b8:	d0f9      	beq.n	1e5ae <at_params_short_put+0x6>
	struct at_param *param = at_params_get(list, index);
   1e5ba:	f7f2 f8d7 	bl	1076c <at_params_get>
	if (param == NULL) {
   1e5be:	4604      	mov	r4, r0
   1e5c0:	2800      	cmp	r0, #0
   1e5c2:	d0f4      	beq.n	1e5ae <at_params_short_put+0x6>
	at_param_clear(param);
   1e5c4:	f7f2 f91c 	bl	10800 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   1e5c8:	2301      	movs	r3, #1
	param->value.int_val = (u32_t)(value & USHRT_MAX);
   1e5ca:	60a5      	str	r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   1e5cc:	7023      	strb	r3, [r4, #0]
	return 0;
   1e5ce:	2000      	movs	r0, #0
   1e5d0:	e7ef      	b.n	1e5b2 <at_params_short_put+0xa>

0001e5d2 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   1e5d2:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   1e5d4:	b910      	cbnz	r0, 1e5dc <at_params_empty_put+0xa>
		return -EINVAL;
   1e5d6:	f06f 0015 	mvn.w	r0, #21

	param->type = AT_PARAM_TYPE_EMPTY;
	param->value.int_val = 0;

	return 0;
}
   1e5da:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   1e5dc:	6843      	ldr	r3, [r0, #4]
   1e5de:	2b00      	cmp	r3, #0
   1e5e0:	d0f9      	beq.n	1e5d6 <at_params_empty_put+0x4>
	struct at_param *param = at_params_get(list, index);
   1e5e2:	f7f2 f8c3 	bl	1076c <at_params_get>
	if (param == NULL) {
   1e5e6:	4604      	mov	r4, r0
   1e5e8:	2800      	cmp	r0, #0
   1e5ea:	d0f4      	beq.n	1e5d6 <at_params_empty_put+0x4>
	at_param_clear(param);
   1e5ec:	f7f2 f908 	bl	10800 <at_param_clear>
	param->type = AT_PARAM_TYPE_EMPTY;
   1e5f0:	2305      	movs	r3, #5
	param->value.int_val = 0;
   1e5f2:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   1e5f4:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   1e5f6:	60a0      	str	r0, [r4, #8]
	return 0;
   1e5f8:	e7ef      	b.n	1e5da <at_params_empty_put+0x8>

0001e5fa <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      u32_t value)
{
   1e5fa:	b538      	push	{r3, r4, r5, lr}
   1e5fc:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   1e5fe:	b910      	cbnz	r0, 1e606 <at_params_int_put+0xc>
		return -EINVAL;
   1e600:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   1e604:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   1e606:	6843      	ldr	r3, [r0, #4]
   1e608:	2b00      	cmp	r3, #0
   1e60a:	d0f9      	beq.n	1e600 <at_params_int_put+0x6>
	struct at_param *param = at_params_get(list, index);
   1e60c:	f7f2 f8ae 	bl	1076c <at_params_get>
	if (param == NULL) {
   1e610:	4604      	mov	r4, r0
   1e612:	2800      	cmp	r0, #0
   1e614:	d0f4      	beq.n	1e600 <at_params_int_put+0x6>
	at_param_clear(param);
   1e616:	f7f2 f8f3 	bl	10800 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   1e61a:	2302      	movs	r3, #2
	param->value.int_val = value;
   1e61c:	60a5      	str	r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   1e61e:	7023      	strb	r3, [r4, #0]
	return 0;
   1e620:	2000      	movs	r0, #0
   1e622:	e7ef      	b.n	1e604 <at_params_int_put+0xa>

0001e624 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   1e624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e626:	4616      	mov	r6, r2
   1e628:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   1e62a:	b910      	cbnz	r0, 1e632 <at_params_string_put+0xe>
		return -EINVAL;
   1e62c:	f06f 0015 	mvn.w	r0, #21
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val = param_value;

	return 0;
}
   1e630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   1e632:	6843      	ldr	r3, [r0, #4]
   1e634:	2b00      	cmp	r3, #0
   1e636:	d0f9      	beq.n	1e62c <at_params_string_put+0x8>
   1e638:	2a00      	cmp	r2, #0
   1e63a:	d0f7      	beq.n	1e62c <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   1e63c:	f7f2 f896 	bl	1076c <at_params_get>
	if (param == NULL) {
   1e640:	4604      	mov	r4, r0
   1e642:	2800      	cmp	r0, #0
   1e644:	d0f2      	beq.n	1e62c <at_params_string_put+0x8>
	char *param_value = (char *)k_malloc(str_len + 1);
   1e646:	1c68      	adds	r0, r5, #1
   1e648:	f7fb f852 	bl	196f0 <k_malloc>
	if (param_value == NULL) {
   1e64c:	4607      	mov	r7, r0
   1e64e:	b160      	cbz	r0, 1e66a <at_params_string_put+0x46>
	memcpy(param_value, str, str_len);
   1e650:	462a      	mov	r2, r5
   1e652:	4631      	mov	r1, r6
   1e654:	f7ff f902 	bl	1d85c <memcpy>
	at_param_clear(param);
   1e658:	4620      	mov	r0, r4
   1e65a:	f7f2 f8d1 	bl	10800 <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   1e65e:	2303      	movs	r3, #3
	param->size = str_len;
   1e660:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   1e662:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   1e664:	60a7      	str	r7, [r4, #8]
	return 0;
   1e666:	2000      	movs	r0, #0
   1e668:	e7e2      	b.n	1e630 <at_params_string_put+0xc>
		return -ENOMEM;
   1e66a:	f06f 000b 	mvn.w	r0, #11
   1e66e:	e7df      	b.n	1e630 <at_params_string_put+0xc>

0001e670 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const u32_t *array, size_t array_len)
{
   1e670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e672:	4616      	mov	r6, r2
   1e674:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   1e676:	b910      	cbnz	r0, 1e67e <at_params_array_put+0xe>
		return -EINVAL;
   1e678:	f06f 0015 	mvn.w	r0, #21
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
	param->value.array_val = param_value;

	return 0;
}
   1e67c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || array == NULL) {
   1e67e:	6843      	ldr	r3, [r0, #4]
   1e680:	2b00      	cmp	r3, #0
   1e682:	d0f9      	beq.n	1e678 <at_params_array_put+0x8>
   1e684:	2a00      	cmp	r2, #0
   1e686:	d0f7      	beq.n	1e678 <at_params_array_put+0x8>
	struct at_param *param = at_params_get(list, index);
   1e688:	f7f2 f870 	bl	1076c <at_params_get>
	if (param == NULL) {
   1e68c:	4604      	mov	r4, r0
   1e68e:	2800      	cmp	r0, #0
   1e690:	d0f2      	beq.n	1e678 <at_params_array_put+0x8>
	u32_t *param_value = (u32_t *)k_malloc(array_len);
   1e692:	4628      	mov	r0, r5
   1e694:	f7fb f82c 	bl	196f0 <k_malloc>
	if (param_value == NULL) {
   1e698:	4607      	mov	r7, r0
   1e69a:	b160      	cbz	r0, 1e6b6 <at_params_array_put+0x46>
	memcpy(param_value, array, array_len);
   1e69c:	462a      	mov	r2, r5
   1e69e:	4631      	mov	r1, r6
   1e6a0:	f7ff f8dc 	bl	1d85c <memcpy>
	at_param_clear(param);
   1e6a4:	4620      	mov	r0, r4
   1e6a6:	f7f2 f8ab 	bl	10800 <at_param_clear>
	param->type = AT_PARAM_TYPE_ARRAY;
   1e6aa:	2304      	movs	r3, #4
	param->size = array_len;
   1e6ac:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   1e6ae:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   1e6b0:	60a7      	str	r7, [r4, #8]
	return 0;
   1e6b2:	2000      	movs	r0, #0
   1e6b4:	e7e2      	b.n	1e67c <at_params_array_put+0xc>
		return -ENOMEM;
   1e6b6:	f06f 000b 	mvn.w	r0, #11
   1e6ba:	e7df      	b.n	1e67c <at_params_array_put+0xc>

0001e6bc <at_params_int_get>:
	return 0;
}

int at_params_int_get(const struct at_param_list *list, size_t index,
		      u32_t *value)
{
   1e6bc:	b510      	push	{r4, lr}
   1e6be:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   1e6c0:	b910      	cbnz	r0, 1e6c8 <at_params_int_get+0xc>
		return -EINVAL;
   1e6c2:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = param->value.int_val;
	return 0;
}
   1e6c6:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   1e6c8:	6843      	ldr	r3, [r0, #4]
   1e6ca:	2b00      	cmp	r3, #0
   1e6cc:	d0f9      	beq.n	1e6c2 <at_params_int_get+0x6>
   1e6ce:	2a00      	cmp	r2, #0
   1e6d0:	d0f7      	beq.n	1e6c2 <at_params_int_get+0x6>
	struct at_param *param = at_params_get(list, index);
   1e6d2:	f7f2 f84b 	bl	1076c <at_params_get>
	if (param == NULL) {
   1e6d6:	2800      	cmp	r0, #0
   1e6d8:	d0f3      	beq.n	1e6c2 <at_params_int_get+0x6>
	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   1e6da:	7803      	ldrb	r3, [r0, #0]
   1e6dc:	3b01      	subs	r3, #1
   1e6de:	2b01      	cmp	r3, #1
   1e6e0:	d8ef      	bhi.n	1e6c2 <at_params_int_get+0x6>
	*value = param->value.int_val;
   1e6e2:	6883      	ldr	r3, [r0, #8]
	return 0;
   1e6e4:	2000      	movs	r0, #0
	*value = param->value.int_val;
   1e6e6:	6023      	str	r3, [r4, #0]
	return 0;
   1e6e8:	e7ed      	b.n	1e6c6 <at_params_int_get+0xa>

0001e6ea <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   1e6ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e6ec:	4616      	mov	r6, r2
   1e6ee:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   1e6f0:	b910      	cbnz	r0, 1e6f8 <at_params_string_get+0xe>
	    value == NULL || len == NULL) {
		return -EINVAL;
   1e6f2:	f06f 0015 	mvn.w	r0, #21

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
}
   1e6f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL ||
   1e6f8:	6843      	ldr	r3, [r0, #4]
   1e6fa:	2b00      	cmp	r3, #0
   1e6fc:	d0f9      	beq.n	1e6f2 <at_params_string_get+0x8>
   1e6fe:	2a00      	cmp	r2, #0
   1e700:	d0f7      	beq.n	1e6f2 <at_params_string_get+0x8>
	    value == NULL || len == NULL) {
   1e702:	2c00      	cmp	r4, #0
   1e704:	d0f5      	beq.n	1e6f2 <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   1e706:	f7f2 f831 	bl	1076c <at_params_get>
	if (param == NULL) {
   1e70a:	4607      	mov	r7, r0
   1e70c:	2800      	cmp	r0, #0
   1e70e:	d0f0      	beq.n	1e6f2 <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   1e710:	7803      	ldrb	r3, [r0, #0]
   1e712:	2b03      	cmp	r3, #3
   1e714:	d1ed      	bne.n	1e6f2 <at_params_string_get+0x8>
	size_t param_len = at_param_size(param);
   1e716:	f7f2 f84b 	bl	107b0 <at_param_size>
	if (*len < param_len) {
   1e71a:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   1e71c:	4605      	mov	r5, r0
	if (*len < param_len) {
   1e71e:	4283      	cmp	r3, r0
   1e720:	d307      	bcc.n	1e732 <at_params_string_get+0x48>
	memcpy(value, param->value.str_val, param_len);
   1e722:	4602      	mov	r2, r0
   1e724:	68b9      	ldr	r1, [r7, #8]
   1e726:	4630      	mov	r0, r6
   1e728:	f7ff f898 	bl	1d85c <memcpy>
	*len = param_len;
   1e72c:	6025      	str	r5, [r4, #0]
	return 0;
   1e72e:	2000      	movs	r0, #0
   1e730:	e7e1      	b.n	1e6f6 <at_params_string_get+0xc>
		return -ENOMEM;
   1e732:	f06f 000b 	mvn.w	r0, #11
   1e736:	e7de      	b.n	1e6f6 <at_params_string_get+0xc>

0001e738 <response_is_valid.part.0>:
static bool response_is_valid(const char *response, size_t response_len,
   1e738:	b570      	push	{r4, r5, r6, lr}
   1e73a:	4606      	mov	r6, r0
	if ((response_len < strlen(check)) ||
   1e73c:	4610      	mov	r0, r2
static bool response_is_valid(const char *response, size_t response_len,
   1e73e:	460d      	mov	r5, r1
   1e740:	4614      	mov	r4, r2
	if ((response_len < strlen(check)) ||
   1e742:	f7ff f859 	bl	1d7f8 <strlen>
   1e746:	42a8      	cmp	r0, r5
   1e748:	d808      	bhi.n	1e75c <response_is_valid.part.0+0x24>
	    (memcmp(response, check, response_len) != 0)) {
   1e74a:	462a      	mov	r2, r5
   1e74c:	4621      	mov	r1, r4
   1e74e:	4630      	mov	r0, r6
   1e750:	f7ff f874 	bl	1d83c <memcmp>
	if ((response_len < strlen(check)) ||
   1e754:	fab0 f080 	clz	r0, r0
   1e758:	0940      	lsrs	r0, r0, #5
}
   1e75a:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   1e75c:	2000      	movs	r0, #0
   1e75e:	e7fc      	b.n	1e75a <response_is_valid.part.0+0x22>

0001e760 <w_lte_lc_init_and_connect>:
{
   1e760:	b508      	push	{r3, lr}
	ret = w_lte_lc_init();
   1e762:	f7f2 f8a5 	bl	108b0 <w_lte_lc_init>
	if (ret) {
   1e766:	b918      	cbnz	r0, 1e770 <w_lte_lc_init_and_connect+0x10>
}
   1e768:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return w_lte_lc_connect();
   1e76c:	f7f2 b924 	b.w	109b8 <w_lte_lc_connect>
}
   1e770:	bd08      	pop	{r3, pc}

0001e772 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1e772:	b508      	push	{r3, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
   1e774:	2000      	movs	r0, #0
   1e776:	f7ef fb37 	bl	dde8 <sys_arch_reboot>

0001e77a <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   1e77a:	f7fe bea9 	b.w	1d4d0 <z_clock_idle_exit>

0001e77e <k_mem_pool_malloc>:
{
   1e77e:	b513      	push	{r0, r1, r4, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1e780:	2404      	movs	r4, #4
   1e782:	190a      	adds	r2, r1, r4
   1e784:	d204      	bcs.n	1e790 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   1e786:	2300      	movs	r3, #0
   1e788:	4669      	mov	r1, sp
   1e78a:	f7fa feeb 	bl	19564 <k_mem_pool_alloc>
   1e78e:	b110      	cbz	r0, 1e796 <k_mem_pool_malloc+0x18>
		return NULL;
   1e790:	2000      	movs	r0, #0
}
   1e792:	b002      	add	sp, #8
   1e794:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   1e796:	4622      	mov	r2, r4
   1e798:	a901      	add	r1, sp, #4
   1e79a:	9800      	ldr	r0, [sp, #0]
   1e79c:	f7ff f85e 	bl	1d85c <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   1e7a0:	9800      	ldr	r0, [sp, #0]
   1e7a2:	3004      	adds	r0, #4
   1e7a4:	e7f5      	b.n	1e792 <k_mem_pool_malloc+0x14>

0001e7a6 <k_free>:
	if (ptr != NULL) {
   1e7a6:	b110      	cbz	r0, 1e7ae <k_free+0x8>
		k_mem_pool_free_id(ptr);
   1e7a8:	3804      	subs	r0, #4
   1e7aa:	f7fa bf43 	b.w	19634 <k_mem_pool_free_id>
}
   1e7ae:	4770      	bx	lr

0001e7b0 <k_calloc>:
{
   1e7b0:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   1e7b2:	fba0 4501 	umull	r4, r5, r0, r1
   1e7b6:	b935      	cbnz	r5, 1e7c6 <k_calloc+0x16>
	ret = k_malloc(bounds);
   1e7b8:	4620      	mov	r0, r4
   1e7ba:	f7fa ff99 	bl	196f0 <k_malloc>
	if (ret != NULL) {
   1e7be:	4606      	mov	r6, r0
   1e7c0:	b918      	cbnz	r0, 1e7ca <k_calloc+0x1a>
}
   1e7c2:	4630      	mov	r0, r6
   1e7c4:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1e7c6:	2600      	movs	r6, #0
   1e7c8:	e7fb      	b.n	1e7c2 <k_calloc+0x12>
		(void)memset(ret, 0, bounds);
   1e7ca:	4622      	mov	r2, r4
   1e7cc:	4629      	mov	r1, r5
   1e7ce:	f7ff f86f 	bl	1d8b0 <memset>
   1e7d2:	e7f6      	b.n	1e7c2 <k_calloc+0x12>

0001e7d4 <z_impl_k_mutex_init>:
{
   1e7d4:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1e7d6:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
   1e7d8:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   1e7dc:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   1e7e0:	4770      	bx	lr

0001e7e2 <z_queue_node_peek>:
{
   1e7e2:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   1e7e4:	4604      	mov	r4, r0
   1e7e6:	b130      	cbz	r0, 1e7f6 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e7e8:	6802      	ldr	r2, [r0, #0]
   1e7ea:	0793      	lsls	r3, r2, #30
   1e7ec:	d003      	beq.n	1e7f6 <z_queue_node_peek+0x14>
		ret = anode->data;
   1e7ee:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1e7f0:	b109      	cbz	r1, 1e7f6 <z_queue_node_peek+0x14>
			k_free(anode);
   1e7f2:	f7ff ffd8 	bl	1e7a6 <k_free>
}
   1e7f6:	4620      	mov	r0, r4
   1e7f8:	bd10      	pop	{r4, pc}

0001e7fa <z_impl_k_queue_init>:
	list->head = NULL;
   1e7fa:	2300      	movs	r3, #0
	list->tail = NULL;
   1e7fc:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   1e800:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   1e802:	f100 030c 	add.w	r3, r0, #12
   1e806:	e9c0 3303 	strd	r3, r3, [r0, #12]
}
   1e80a:	4770      	bx	lr

0001e80c <k_queue_append>:
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   1e80c:	460a      	mov	r2, r1
   1e80e:	2300      	movs	r3, #0
   1e810:	6841      	ldr	r1, [r0, #4]
   1e812:	f7fb ba71 	b.w	19cf8 <queue_insert>

0001e816 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1e816:	7b43      	ldrb	r3, [r0, #13]
   1e818:	06db      	lsls	r3, r3, #27
   1e81a:	bf03      	ittte	eq
   1e81c:	6980      	ldreq	r0, [r0, #24]
   1e81e:	fab0 f080 	clzeq	r0, r0
   1e822:	0940      	lsreq	r0, r0, #5
   1e824:	2000      	movne	r0, #0
}
   1e826:	4770      	bx	lr

0001e828 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   1e828:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1e82c:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1e830:	4298      	cmp	r0, r3
   1e832:	bfac      	ite	ge
   1e834:	2000      	movge	r0, #0
   1e836:	2001      	movlt	r0, #1
   1e838:	4770      	bx	lr

0001e83a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1e83a:	4603      	mov	r3, r0
   1e83c:	b920      	cbnz	r0, 1e848 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1e83e:	f3ef 8205 	mrs	r2, IPSR
   1e842:	b90a      	cbnz	r2, 1e848 <z_reschedule_irqlock+0xe>
   1e844:	f7ee bff2 	b.w	d82c <arch_swap>
   1e848:	f383 8811 	msr	BASEPRI, r3
   1e84c:	f3bf 8f6f 	isb	sy
}
   1e850:	4770      	bx	lr

0001e852 <z_reschedule_unlocked>:
	__asm__ volatile(
   1e852:	f04f 0320 	mov.w	r3, #32
   1e856:	f3ef 8011 	mrs	r0, BASEPRI
   1e85a:	f383 8811 	msr	BASEPRI, r3
   1e85e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1e862:	f7ff bfea 	b.w	1e83a <z_reschedule_irqlock>

0001e866 <z_priq_dumb_best>:
	return list->head == list;
   1e866:	6803      	ldr	r3, [r0, #0]
}
   1e868:	4298      	cmp	r0, r3
   1e86a:	bf14      	ite	ne
   1e86c:	4618      	movne	r0, r3
   1e86e:	2000      	moveq	r0, #0
   1e870:	4770      	bx	lr

0001e872 <z_unpend_all>:
{
   1e872:	b570      	push	{r4, r5, r6, lr}
   1e874:	4606      	mov	r6, r0
	int need_sched = 0;
   1e876:	2500      	movs	r5, #0
   1e878:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e87a:	42a6      	cmp	r6, r4
   1e87c:	d000      	beq.n	1e880 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1e87e:	b90c      	cbnz	r4, 1e884 <z_unpend_all+0x12>
}
   1e880:	4628      	mov	r0, r5
   1e882:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(thread);
   1e884:	4620      	mov	r0, r4
   1e886:	f7fb fd61 	bl	1a34c <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   1e88a:	4620      	mov	r0, r4
   1e88c:	f7ff ffc3 	bl	1e816 <z_is_thread_ready>
		need_sched = 1;
   1e890:	2501      	movs	r5, #1
   1e892:	2800      	cmp	r0, #0
   1e894:	d0f0      	beq.n	1e878 <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   1e896:	4620      	mov	r0, r4
   1e898:	f7fb fe60 	bl	1a55c <z_add_thread_to_ready_q>
   1e89c:	e7ec      	b.n	1e878 <z_unpend_all+0x6>

0001e89e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   1e89e:	b15a      	cbz	r2, 1e8b8 <z_impl_k_sem_init+0x1a>
   1e8a0:	428a      	cmp	r2, r1
   1e8a2:	d309      	bcc.n	1e8b8 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1e8a4:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1e8a8:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1e8ac:	e9c0 0000 	strd	r0, r0, [r0]
   1e8b0:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1e8b4:	2000      	movs	r0, #0
   1e8b6:	4770      	bx	lr
		return -EINVAL;
   1e8b8:	f06f 0015 	mvn.w	r0, #21
}
   1e8bc:	4770      	bx	lr

0001e8be <k_is_in_isr>:
   1e8be:	f3ef 8005 	mrs	r0, IPSR
}
   1e8c2:	3000      	adds	r0, #0
   1e8c4:	bf18      	it	ne
   1e8c6:	2001      	movne	r0, #1
   1e8c8:	4770      	bx	lr

0001e8ca <z_impl_k_thread_name_set>:
}
   1e8ca:	f06f 0046 	mvn.w	r0, #70	; 0x46
   1e8ce:	4770      	bx	lr

0001e8d0 <z_new_thread_init>:
{
   1e8d0:	b510      	push	{r4, lr}
	thread_base->user_options = (u8_t)options;
   1e8d2:	9c02      	ldr	r4, [sp, #8]
	thread_base->prio = priority;
   1e8d4:	7383      	strb	r3, [r0, #14]
	thread_base->user_options = (u8_t)options;
   1e8d6:	7304      	strb	r4, [r0, #12]
	thread_base->sched_locked = 0U;
   1e8d8:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   1e8da:	2404      	movs	r4, #4
	thread_base->sched_locked = 0U;
   1e8dc:	73c3      	strb	r3, [r0, #15]
	thread_base->thread_state = (u8_t)initial_state;
   1e8de:	7344      	strb	r4, [r0, #13]
	node->prev = NULL;
   1e8e0:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
   1e8e4:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
   1e8e8:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
   1e8ec:	bd10      	pop	{r4, pc}

0001e8ee <k_work_submit_to_queue>:
{
   1e8ee:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e8f0:	f101 0308 	add.w	r3, r1, #8
   1e8f4:	e8d3 2fef 	ldaex	r2, [r3]
   1e8f8:	f042 0c01 	orr.w	ip, r2, #1
   1e8fc:	e8c3 cfee 	stlex	lr, ip, [r3]
   1e900:	f1be 0f00 	cmp.w	lr, #0
   1e904:	d1f6      	bne.n	1e8f4 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1e906:	07d3      	lsls	r3, r2, #31
   1e908:	d403      	bmi.n	1e912 <k_work_submit_to_queue+0x24>
}
   1e90a:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1e90e:	f7ff bf7d 	b.w	1e80c <k_queue_append>
}
   1e912:	f85d fb04 	ldr.w	pc, [sp], #4

0001e916 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   1e916:	f1a0 010c 	sub.w	r1, r0, #12
   1e91a:	6900      	ldr	r0, [r0, #16]
   1e91c:	f7ff bfe7 	b.w	1e8ee <k_work_submit_to_queue>

0001e920 <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   1e920:	69c3      	ldr	r3, [r0, #28]
{
   1e922:	b570      	push	{r4, r5, r6, lr}
   1e924:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   1e926:	2b00      	cmp	r3, #0
   1e928:	d039      	beq.n	1e99e <work_cancel+0x7e>
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   1e92a:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e92e:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   1e932:	07db      	lsls	r3, r3, #31
   1e934:	d52f      	bpl.n	1e996 <work_cancel+0x76>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1e936:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   1e938:	69c2      	ldr	r2, [r0, #28]
   1e93a:	6813      	ldr	r3, [r2, #0]
   1e93c:	b913      	cbnz	r3, 1e944 <work_cancel+0x24>
			return -EINVAL;
   1e93e:	f06f 0015 	mvn.w	r0, #21
}
   1e942:	bd70      	pop	{r4, r5, r6, pc}
   1e944:	429c      	cmp	r4, r3
   1e946:	d121      	bne.n	1e98c <work_cancel+0x6c>
Z_GENLIST_REMOVE(sflist, sfnode)
   1e948:	6823      	ldr	r3, [r4, #0]
   1e94a:	6856      	ldr	r6, [r2, #4]
   1e94c:	f023 0003 	bic.w	r0, r3, #3
   1e950:	b991      	cbnz	r1, 1e978 <work_cancel+0x58>
   1e952:	42b4      	cmp	r4, r6
	list->head = node;
   1e954:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1e956:	d100      	bne.n	1e95a <work_cancel+0x3a>
	list->tail = node;
   1e958:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e95a:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e95c:	f003 0303 	and.w	r3, r3, #3
   1e960:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   1e962:	2000      	movs	r0, #0
   1e964:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e966:	e8d5 3fef 	ldaex	r3, [r5]
   1e96a:	f023 0301 	bic.w	r3, r3, #1
   1e96e:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1e972:	2a00      	cmp	r2, #0
   1e974:	d0e5      	beq.n	1e942 <work_cancel+0x22>
   1e976:	e7f6      	b.n	1e966 <work_cancel+0x46>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e978:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1e97a:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e97c:	f003 0303 	and.w	r3, r3, #3
   1e980:	ea43 0300 	orr.w	r3, r3, r0
   1e984:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1e986:	bf08      	it	eq
   1e988:	6051      	streq	r1, [r2, #4]
   1e98a:	e7e6      	b.n	1e95a <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e98c:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1e98e:	4619      	mov	r1, r3
   1e990:	f020 0303 	bic.w	r3, r0, #3
   1e994:	e7d2      	b.n	1e93c <work_cancel+0x1c>
		(void)z_abort_timeout(&work->timeout);
   1e996:	300c      	adds	r0, #12
   1e998:	f7fd f8b4 	bl	1bb04 <z_abort_timeout>
   1e99c:	e7e1      	b.n	1e962 <work_cancel+0x42>
		return -EAGAIN;
   1e99e:	f06f 000a 	mvn.w	r0, #10
   1e9a2:	e7ce      	b.n	1e942 <work_cancel+0x22>

0001e9a4 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1e9a4:	2300      	movs	r3, #0
   1e9a6:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   1e9aa:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   1e9ae:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   1e9b0:	61c3      	str	r3, [r0, #28]
}
   1e9b2:	4770      	bx	lr

0001e9b4 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   1e9b4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   1e9b6:	f7fd fa3d 	bl	1be34 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   1e9ba:	bd08      	pop	{r3, pc}

0001e9bc <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   1e9bc:	b510      	push	{r4, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
   1e9be:	f7fd fa39 	bl	1be34 <z_tick_get>
			return (t * to_hz + off) / from_hz;
   1e9c2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1e9c6:	fba0 2304 	umull	r2, r3, r0, r4
   1e9ca:	fb04 3301 	mla	r3, r4, r1, r3
   1e9ce:	0bd0      	lsrs	r0, r2, #15
}
   1e9d0:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1e9d4:	0bd9      	lsrs	r1, r3, #15
   1e9d6:	bd10      	pop	{r4, pc}

0001e9d8 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   1e9d8:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   1e9da:	6884      	ldr	r4, [r0, #8]
{
   1e9dc:	4605      	mov	r5, r0
   1e9de:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   1e9e0:	b19c      	cbz	r4, 1ea0a <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   1e9e2:	68a3      	ldr	r3, [r4, #8]
   1e9e4:	b95b      	cbnz	r3, 1e9fe <signal_poll_event+0x26>
	int retcode = 0;
   1e9e6:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   1e9e8:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1e9ea:	2300      	movs	r3, #0
   1e9ec:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   1e9ee:	68eb      	ldr	r3, [r5, #12]
   1e9f0:	f3c3 3204 	ubfx	r2, r3, #12, #5
   1e9f4:	4316      	orrs	r6, r2
   1e9f6:	f366 3310 	bfi	r3, r6, #12, #5
   1e9fa:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   1e9fc:	e004      	b.n	1ea08 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   1e9fe:	4798      	blx	r3
		poller->is_polling = false;
   1ea00:	2300      	movs	r3, #0
		if (retcode < 0) {
   1ea02:	2800      	cmp	r0, #0
		poller->is_polling = false;
   1ea04:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   1ea06:	daf0      	bge.n	1e9ea <signal_poll_event+0x12>
}
   1ea08:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   1ea0a:	4620      	mov	r0, r4
   1ea0c:	e7ed      	b.n	1e9ea <signal_poll_event+0x12>

0001ea0e <add_event>:
{
   1ea0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ea10:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1ea12:	e9d0 2300 	ldrd	r2, r3, [r0]
   1ea16:	4290      	cmp	r0, r2
   1ea18:	4604      	mov	r4, r0
   1ea1a:	460d      	mov	r5, r1
   1ea1c:	d106      	bne.n	1ea2c <add_event+0x1e>
	node->prev = list->tail;
   1ea1e:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1ea20:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   1ea22:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   1ea24:	6863      	ldr	r3, [r4, #4]
   1ea26:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1ea28:	6065      	str	r5, [r4, #4]
}
   1ea2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1ea2c:	2b00      	cmp	r3, #0
   1ea2e:	d0f6      	beq.n	1ea1e <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   1ea30:	689b      	ldr	r3, [r3, #8]
   1ea32:	6879      	ldr	r1, [r7, #4]
   1ea34:	6858      	ldr	r0, [r3, #4]
   1ea36:	f7ff fef7 	bl	1e828 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   1ea3a:	2800      	cmp	r0, #0
   1ea3c:	d1ef      	bne.n	1ea1e <add_event+0x10>
	return list->head == list;
   1ea3e:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ea40:	42b4      	cmp	r4, r6
   1ea42:	d0ec      	beq.n	1ea1e <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1ea44:	2e00      	cmp	r6, #0
   1ea46:	d0ea      	beq.n	1ea1e <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   1ea48:	68b3      	ldr	r3, [r6, #8]
   1ea4a:	6878      	ldr	r0, [r7, #4]
   1ea4c:	6859      	ldr	r1, [r3, #4]
   1ea4e:	f7ff feeb 	bl	1e828 <z_is_t1_higher_prio_than_t2>
   1ea52:	b128      	cbz	r0, 1ea60 <add_event+0x52>
	node->prev = successor->prev;
   1ea54:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1ea56:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   1ea5a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1ea5c:	6075      	str	r5, [r6, #4]
			return;
   1ea5e:	e7e4      	b.n	1ea2a <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1ea60:	6863      	ldr	r3, [r4, #4]
   1ea62:	429e      	cmp	r6, r3
   1ea64:	d0db      	beq.n	1ea1e <add_event+0x10>
   1ea66:	6836      	ldr	r6, [r6, #0]
   1ea68:	e7ec      	b.n	1ea44 <add_event+0x36>

0001ea6a <z_handle_obj_poll_events>:
	return list->head == list;
   1ea6a:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1ea6c:	4298      	cmp	r0, r3
   1ea6e:	d009      	beq.n	1ea84 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1ea70:	e9d3 2000 	ldrd	r2, r0, [r3]
   1ea74:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   1ea76:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   1ea78:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   1ea7a:	4618      	mov	r0, r3
	node->prev = NULL;
   1ea7c:	e9c3 2200 	strd	r2, r2, [r3]
   1ea80:	f7ff bfaa 	b.w	1e9d8 <signal_poll_event>
	}
}
   1ea84:	4770      	bx	lr

0001ea86 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   1ea86:	4770      	bx	lr
