
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_table>:
    c000:	20025da0 	.word	0x20025da0
    c004:	0000dbf9 	.word	0x0000dbf9
    c008:	0001ba95 	.word	0x0001ba95
    c00c:	0000da19 	.word	0x0000da19
    c010:	0000da19 	.word	0x0000da19
    c014:	0000da19 	.word	0x0000da19
    c018:	0000da19 	.word	0x0000da19
    c01c:	0000da19 	.word	0x0000da19
    c020:	0000da19 	.word	0x0000da19
    c024:	0000da19 	.word	0x0000da19
    c028:	0000da19 	.word	0x0000da19
    c02c:	0000d8d9 	.word	0x0000d8d9
    c030:	0000da19 	.word	0x0000da19
    c034:	0000da19 	.word	0x0000da19
    c038:	0000d829 	.word	0x0000d829
    c03c:	0001ba85 	.word	0x0001ba85

0000c040 <_irq_vector_table>:
    c040:	0000dbb9 0000dbb9 0000dbb9 0000dbb9     ................
    c050:	0000dbb9 0000dbb9 0000dbb9 0000dbb9     ................
    c060:	0000dbb9 0000dbb9 0000dbb9 0000dbb9     ................
    c070:	0000dbb9 0000dbb9 0000dbb9 0000dbb9     ................
    c080:	0000dbb9 0000dbb9 0000dbb9 0000dbb9     ................
    c090:	0000dbb9 0000dbb9 0000dbb9 0000dbb9     ................
    c0a0:	0000dbb9 0000dbb9 0000dbb9 0000dbb9     ................
    c0b0:	0000f84d 0001c3d9 0000dbb9 0000dbb9     M...............
    c0c0:	0000dbb9 0000dbb9 0000dbb9 0000dbb9     ................
    c0d0:	0000dbb9 0000dbb9 0000dbb9 0000dbb9     ................
    c0e0:	0000dbb9 0000dbb9 0001c3f7 0000dbb9     ................
    c0f0:	0000dbb9 0000dbb9 0000dbb9 0000dbb9     ................
    c100:	0000dbb9 0000dbb9 0000dbb9 0000dbb9     ................
    c110:	0000dbb9 0000dbb9 0000dbb9 0000dbb9     ................
    c120:	0000dbb9 0000dbb9 0000dbb9 0000dbb9     ................
    c130:	0000dbb9 0000dbb9 0000dbb9 0000dbb9     ................
    c140:	0000dbb9                                ....

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	000132d4 00000001 0000c000 0000c000     .2..............
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c23c <__aeabi_uldivmod>:
    c23c:	b953      	cbnz	r3, c254 <__aeabi_uldivmod+0x18>
    c23e:	b94a      	cbnz	r2, c254 <__aeabi_uldivmod+0x18>
    c240:	2900      	cmp	r1, #0
    c242:	bf08      	it	eq
    c244:	2800      	cmpeq	r0, #0
    c246:	bf1c      	itt	ne
    c248:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c24c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c250:	f000 b970 	b.w	c534 <__aeabi_idiv0>
    c254:	f1ad 0c08 	sub.w	ip, sp, #8
    c258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c25c:	f000 f806 	bl	c26c <__udivmoddi4>
    c260:	f8dd e004 	ldr.w	lr, [sp, #4]
    c264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c268:	b004      	add	sp, #16
    c26a:	4770      	bx	lr

0000c26c <__udivmoddi4>:
    c26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c270:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c272:	4604      	mov	r4, r0
    c274:	4689      	mov	r9, r1
    c276:	2b00      	cmp	r3, #0
    c278:	f040 8083 	bne.w	c382 <__udivmoddi4+0x116>
    c27c:	428a      	cmp	r2, r1
    c27e:	4615      	mov	r5, r2
    c280:	d945      	bls.n	c30e <__udivmoddi4+0xa2>
    c282:	fab2 f282 	clz	r2, r2
    c286:	b14a      	cbz	r2, c29c <__udivmoddi4+0x30>
    c288:	f1c2 0720 	rsb	r7, r2, #32
    c28c:	fa01 f302 	lsl.w	r3, r1, r2
    c290:	4095      	lsls	r5, r2
    c292:	4094      	lsls	r4, r2
    c294:	fa20 f707 	lsr.w	r7, r0, r7
    c298:	ea47 0903 	orr.w	r9, r7, r3
    c29c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c2a0:	0c23      	lsrs	r3, r4, #16
    c2a2:	fa1f f885 	uxth.w	r8, r5
    c2a6:	fbb9 fcfe 	udiv	ip, r9, lr
    c2aa:	fb0e 991c 	mls	r9, lr, ip, r9
    c2ae:	fb0c f108 	mul.w	r1, ip, r8
    c2b2:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
    c2b6:	4299      	cmp	r1, r3
    c2b8:	d90a      	bls.n	c2d0 <__udivmoddi4+0x64>
    c2ba:	18eb      	adds	r3, r5, r3
    c2bc:	bf2c      	ite	cs
    c2be:	2001      	movcs	r0, #1
    c2c0:	2000      	movcc	r0, #0
    c2c2:	4299      	cmp	r1, r3
    c2c4:	d902      	bls.n	c2cc <__udivmoddi4+0x60>
    c2c6:	2800      	cmp	r0, #0
    c2c8:	f000 811d 	beq.w	c506 <__udivmoddi4+0x29a>
    c2cc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c2d0:	1a59      	subs	r1, r3, r1
    c2d2:	b2a3      	uxth	r3, r4
    c2d4:	fbb1 f0fe 	udiv	r0, r1, lr
    c2d8:	fb0e 1110 	mls	r1, lr, r0, r1
    c2dc:	fb00 f808 	mul.w	r8, r0, r8
    c2e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c2e4:	45a0      	cmp	r8, r4
    c2e6:	d905      	bls.n	c2f4 <__udivmoddi4+0x88>
    c2e8:	192c      	adds	r4, r5, r4
    c2ea:	d202      	bcs.n	c2f2 <__udivmoddi4+0x86>
    c2ec:	45a0      	cmp	r8, r4
    c2ee:	f200 810e 	bhi.w	c50e <__udivmoddi4+0x2a2>
    c2f2:	3801      	subs	r0, #1
    c2f4:	eba4 0408 	sub.w	r4, r4, r8
    c2f8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c2fc:	2700      	movs	r7, #0
    c2fe:	b11e      	cbz	r6, c308 <__udivmoddi4+0x9c>
    c300:	40d4      	lsrs	r4, r2
    c302:	2300      	movs	r3, #0
    c304:	e9c6 4300 	strd	r4, r3, [r6]
    c308:	4639      	mov	r1, r7
    c30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c30e:	2a00      	cmp	r2, #0
    c310:	d051      	beq.n	c3b6 <__udivmoddi4+0x14a>
    c312:	fab2 f282 	clz	r2, r2
    c316:	2a00      	cmp	r2, #0
    c318:	f040 80af 	bne.w	c47a <__udivmoddi4+0x20e>
    c31c:	1b49      	subs	r1, r1, r5
    c31e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c322:	fa1f f885 	uxth.w	r8, r5
    c326:	2701      	movs	r7, #1
    c328:	0c23      	lsrs	r3, r4, #16
    c32a:	fbb1 fcfe 	udiv	ip, r1, lr
    c32e:	fb0e 111c 	mls	r1, lr, ip, r1
    c332:	fb08 f00c 	mul.w	r0, r8, ip
    c336:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c33a:	4298      	cmp	r0, r3
    c33c:	d90a      	bls.n	c354 <__udivmoddi4+0xe8>
    c33e:	18eb      	adds	r3, r5, r3
    c340:	bf2c      	ite	cs
    c342:	2101      	movcs	r1, #1
    c344:	2100      	movcc	r1, #0
    c346:	4298      	cmp	r0, r3
    c348:	d902      	bls.n	c350 <__udivmoddi4+0xe4>
    c34a:	2900      	cmp	r1, #0
    c34c:	f000 80d7 	beq.w	c4fe <__udivmoddi4+0x292>
    c350:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c354:	1a19      	subs	r1, r3, r0
    c356:	b2a3      	uxth	r3, r4
    c358:	fbb1 f0fe 	udiv	r0, r1, lr
    c35c:	fb0e 1110 	mls	r1, lr, r0, r1
    c360:	fb08 f800 	mul.w	r8, r8, r0
    c364:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c368:	45a0      	cmp	r8, r4
    c36a:	d905      	bls.n	c378 <__udivmoddi4+0x10c>
    c36c:	192c      	adds	r4, r5, r4
    c36e:	d202      	bcs.n	c376 <__udivmoddi4+0x10a>
    c370:	45a0      	cmp	r8, r4
    c372:	f200 80c1 	bhi.w	c4f8 <__udivmoddi4+0x28c>
    c376:	3801      	subs	r0, #1
    c378:	eba4 0408 	sub.w	r4, r4, r8
    c37c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c380:	e7bd      	b.n	c2fe <__udivmoddi4+0x92>
    c382:	428b      	cmp	r3, r1
    c384:	d908      	bls.n	c398 <__udivmoddi4+0x12c>
    c386:	2e00      	cmp	r6, #0
    c388:	d074      	beq.n	c474 <__udivmoddi4+0x208>
    c38a:	2700      	movs	r7, #0
    c38c:	e9c6 0100 	strd	r0, r1, [r6]
    c390:	4638      	mov	r0, r7
    c392:	4639      	mov	r1, r7
    c394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c398:	fab3 f783 	clz	r7, r3
    c39c:	b967      	cbnz	r7, c3b8 <__udivmoddi4+0x14c>
    c39e:	428b      	cmp	r3, r1
    c3a0:	f0c0 80a4 	bcc.w	c4ec <__udivmoddi4+0x280>
    c3a4:	4282      	cmp	r2, r0
    c3a6:	f240 80a1 	bls.w	c4ec <__udivmoddi4+0x280>
    c3aa:	4638      	mov	r0, r7
    c3ac:	2e00      	cmp	r6, #0
    c3ae:	d0ab      	beq.n	c308 <__udivmoddi4+0x9c>
    c3b0:	e9c6 4900 	strd	r4, r9, [r6]
    c3b4:	e7a8      	b.n	c308 <__udivmoddi4+0x9c>
    c3b6:	deff      	udf	#255	; 0xff
    c3b8:	f1c7 0520 	rsb	r5, r7, #32
    c3bc:	40bb      	lsls	r3, r7
    c3be:	fa02 fc07 	lsl.w	ip, r2, r7
    c3c2:	fa01 f407 	lsl.w	r4, r1, r7
    c3c6:	40ea      	lsrs	r2, r5
    c3c8:	fa20 f805 	lsr.w	r8, r0, r5
    c3cc:	40e9      	lsrs	r1, r5
    c3ce:	fa00 fe07 	lsl.w	lr, r0, r7
    c3d2:	431a      	orrs	r2, r3
    c3d4:	ea48 0404 	orr.w	r4, r8, r4
    c3d8:	ea4f 4812 	mov.w	r8, r2, lsr #16
    c3dc:	0c20      	lsrs	r0, r4, #16
    c3de:	fa1f f982 	uxth.w	r9, r2
    c3e2:	fbb1 faf8 	udiv	sl, r1, r8
    c3e6:	fb08 111a 	mls	r1, r8, sl, r1
    c3ea:	fb0a fb09 	mul.w	fp, sl, r9
    c3ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    c3f2:	458b      	cmp	fp, r1
    c3f4:	d90a      	bls.n	c40c <__udivmoddi4+0x1a0>
    c3f6:	1851      	adds	r1, r2, r1
    c3f8:	bf2c      	ite	cs
    c3fa:	2301      	movcs	r3, #1
    c3fc:	2300      	movcc	r3, #0
    c3fe:	458b      	cmp	fp, r1
    c400:	d902      	bls.n	c408 <__udivmoddi4+0x19c>
    c402:	2b00      	cmp	r3, #0
    c404:	f000 8088 	beq.w	c518 <__udivmoddi4+0x2ac>
    c408:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    c40c:	eba1 010b 	sub.w	r1, r1, fp
    c410:	b2a4      	uxth	r4, r4
    c412:	fbb1 f0f8 	udiv	r0, r1, r8
    c416:	fb08 1110 	mls	r1, r8, r0, r1
    c41a:	fb00 f909 	mul.w	r9, r0, r9
    c41e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
    c422:	4589      	cmp	r9, r1
    c424:	d904      	bls.n	c430 <__udivmoddi4+0x1c4>
    c426:	1851      	adds	r1, r2, r1
    c428:	d201      	bcs.n	c42e <__udivmoddi4+0x1c2>
    c42a:	4589      	cmp	r9, r1
    c42c:	d87b      	bhi.n	c526 <__udivmoddi4+0x2ba>
    c42e:	3801      	subs	r0, #1
    c430:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    c434:	eba1 0109 	sub.w	r1, r1, r9
    c438:	fba0 890c 	umull	r8, r9, r0, ip
    c43c:	4549      	cmp	r1, r9
    c43e:	4644      	mov	r4, r8
    c440:	464b      	mov	r3, r9
    c442:	d302      	bcc.n	c44a <__udivmoddi4+0x1de>
    c444:	d106      	bne.n	c454 <__udivmoddi4+0x1e8>
    c446:	45c6      	cmp	lr, r8
    c448:	d204      	bcs.n	c454 <__udivmoddi4+0x1e8>
    c44a:	3801      	subs	r0, #1
    c44c:	ebb8 040c 	subs.w	r4, r8, ip
    c450:	eb69 0302 	sbc.w	r3, r9, r2
    c454:	2e00      	cmp	r6, #0
    c456:	d05d      	beq.n	c514 <__udivmoddi4+0x2a8>
    c458:	ebbe 0204 	subs.w	r2, lr, r4
    c45c:	eb61 0103 	sbc.w	r1, r1, r3
    c460:	fa01 f505 	lsl.w	r5, r1, r5
    c464:	fa22 f307 	lsr.w	r3, r2, r7
    c468:	40f9      	lsrs	r1, r7
    c46a:	2700      	movs	r7, #0
    c46c:	431d      	orrs	r5, r3
    c46e:	e9c6 5100 	strd	r5, r1, [r6]
    c472:	e749      	b.n	c308 <__udivmoddi4+0x9c>
    c474:	4637      	mov	r7, r6
    c476:	4630      	mov	r0, r6
    c478:	e746      	b.n	c308 <__udivmoddi4+0x9c>
    c47a:	f1c2 0020 	rsb	r0, r2, #32
    c47e:	4095      	lsls	r5, r2
    c480:	fa01 f702 	lsl.w	r7, r1, r2
    c484:	fa21 f300 	lsr.w	r3, r1, r0
    c488:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c48c:	fa24 f100 	lsr.w	r1, r4, r0
    c490:	fa1f f885 	uxth.w	r8, r5
    c494:	4094      	lsls	r4, r2
    c496:	4339      	orrs	r1, r7
    c498:	fbb3 f0fe 	udiv	r0, r3, lr
    c49c:	0c0f      	lsrs	r7, r1, #16
    c49e:	fb0e 3310 	mls	r3, lr, r0, r3
    c4a2:	fb00 fc08 	mul.w	ip, r0, r8
    c4a6:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
    c4aa:	459c      	cmp	ip, r3
    c4ac:	d907      	bls.n	c4be <__udivmoddi4+0x252>
    c4ae:	18eb      	adds	r3, r5, r3
    c4b0:	bf2c      	ite	cs
    c4b2:	2701      	movcs	r7, #1
    c4b4:	2700      	movcc	r7, #0
    c4b6:	459c      	cmp	ip, r3
    c4b8:	d900      	bls.n	c4bc <__udivmoddi4+0x250>
    c4ba:	b38f      	cbz	r7, c520 <__udivmoddi4+0x2b4>
    c4bc:	3801      	subs	r0, #1
    c4be:	eba3 030c 	sub.w	r3, r3, ip
    c4c2:	b289      	uxth	r1, r1
    c4c4:	fbb3 f7fe 	udiv	r7, r3, lr
    c4c8:	fb0e 3317 	mls	r3, lr, r7, r3
    c4cc:	fb07 fc08 	mul.w	ip, r7, r8
    c4d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c4d4:	458c      	cmp	ip, r1
    c4d6:	d904      	bls.n	c4e2 <__udivmoddi4+0x276>
    c4d8:	1869      	adds	r1, r5, r1
    c4da:	d201      	bcs.n	c4e0 <__udivmoddi4+0x274>
    c4dc:	458c      	cmp	ip, r1
    c4de:	d825      	bhi.n	c52c <__udivmoddi4+0x2c0>
    c4e0:	3f01      	subs	r7, #1
    c4e2:	eba1 010c 	sub.w	r1, r1, ip
    c4e6:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
    c4ea:	e71d      	b.n	c328 <__udivmoddi4+0xbc>
    c4ec:	1a84      	subs	r4, r0, r2
    c4ee:	eb61 0303 	sbc.w	r3, r1, r3
    c4f2:	2001      	movs	r0, #1
    c4f4:	4699      	mov	r9, r3
    c4f6:	e759      	b.n	c3ac <__udivmoddi4+0x140>
    c4f8:	3802      	subs	r0, #2
    c4fa:	442c      	add	r4, r5
    c4fc:	e73c      	b.n	c378 <__udivmoddi4+0x10c>
    c4fe:	f1ac 0c02 	sub.w	ip, ip, #2
    c502:	442b      	add	r3, r5
    c504:	e726      	b.n	c354 <__udivmoddi4+0xe8>
    c506:	f1ac 0c02 	sub.w	ip, ip, #2
    c50a:	442b      	add	r3, r5
    c50c:	e6e0      	b.n	c2d0 <__udivmoddi4+0x64>
    c50e:	3802      	subs	r0, #2
    c510:	442c      	add	r4, r5
    c512:	e6ef      	b.n	c2f4 <__udivmoddi4+0x88>
    c514:	4637      	mov	r7, r6
    c516:	e6f7      	b.n	c308 <__udivmoddi4+0x9c>
    c518:	f1aa 0a02 	sub.w	sl, sl, #2
    c51c:	4411      	add	r1, r2
    c51e:	e775      	b.n	c40c <__udivmoddi4+0x1a0>
    c520:	3802      	subs	r0, #2
    c522:	442b      	add	r3, r5
    c524:	e7cb      	b.n	c4be <__udivmoddi4+0x252>
    c526:	3802      	subs	r0, #2
    c528:	4411      	add	r1, r2
    c52a:	e781      	b.n	c430 <__udivmoddi4+0x1c4>
    c52c:	3f02      	subs	r7, #2
    c52e:	4429      	add	r1, r5
    c530:	e7d7      	b.n	c4e2 <__udivmoddi4+0x276>
    c532:	bf00      	nop

0000c534 <__aeabi_idiv0>:
    c534:	4770      	bx	lr
    c536:	bf00      	nop

0000c538 <bsd_recoverable_error_handler>:
#if defined(CONFIG_BSD_LIBRARY)

/**@brief Recoverable BSD library error. */
void bsd_recoverable_error_handler(uint32_t err)
{
	printk("bsdlib recoverable error: %u\n", (unsigned int)err);
    c538:	4601      	mov	r1, r0
    c53a:	4801      	ldr	r0, [pc, #4]	; (c540 <bsd_recoverable_error_handler+0x8>)
    c53c:	f00e bc4b 	b.w	1add6 <printk>
    c540:	0001decc 	.word	0x0001decc

0000c544 <main>:
}



void main(void)
{
    c544:	b508      	push	{r3, lr}

	LOG_INF("---- Starting CoAP example ----");
    c546:	f04f 0100 	mov.w	r1, #0
    c54a:	2303      	movs	r3, #3
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    c54c:	4a0c      	ldr	r2, [pc, #48]	; (c580 <main+0x3c>)
    c54e:	f363 0107 	bfi	r1, r3, #0, #8
    c552:	4b0c      	ldr	r3, [pc, #48]	; (c584 <main+0x40>)
    c554:	480c      	ldr	r0, [pc, #48]	; (c588 <main+0x44>)
    c556:	1a9b      	subs	r3, r3, r2
    c558:	08db      	lsrs	r3, r3, #3
    c55a:	f363 118f 	bfi	r1, r3, #6, #10
    c55e:	f00e fcb2 	bl	1aec6 <log_0>
		printk("LTE Link Connecting ...\n");
    c562:	480a      	ldr	r0, [pc, #40]	; (c58c <main+0x48>)
    c564:	f00e fc37 	bl	1add6 <printk>
		err = lte_lc_init_and_connect();
    c568:	f010 fcb6 	bl	1ced8 <lte_lc_init_and_connect>
		printk("LTE Link Connected!\n");
    c56c:	4808      	ldr	r0, [pc, #32]	; (c590 <main+0x4c>)
    c56e:	f00e fc32 	bl	1add6 <printk>

	modem_configure();

	coap_start_thread();
    c572:	f000 f9d3 	bl	c91c <coap_start_thread>
	if (z_syscall_trap()) {
		return (s32_t) arch_syscall_invoke1(*(uintptr_t *)&ms, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(ms);
    c576:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    c57a:	f00d fda5 	bl	1a0c8 <z_impl_k_sleep>
    c57e:	e7fa      	b.n	c576 <main+0x32>
    c580:	0001d954 	.word	0x0001d954
    c584:	0001d954 	.word	0x0001d954
    c588:	0001deea 	.word	0x0001deea
    c58c:	0001df0a 	.word	0x0001df0a
    c590:	0001df23 	.word	0x0001df23

0000c594 <client_get_send>:
	return 0;
}

/**@brief Send CoAP GET request. */
 int client_get_send(void)
{
    c594:	b530      	push	{r4, r5, lr}
	int err;
	struct coap_packet request;

	next_token++;
    c596:	4d24      	ldr	r5, [pc, #144]	; (c628 <client_get_send+0x94>)
{
    c598:	b08b      	sub	sp, #44	; 0x2c
	next_token++;
    c59a:	882b      	ldrh	r3, [r5, #0]
    c59c:	3301      	adds	r3, #1
    c59e:	802b      	strh	r3, [r5, #0]

	err = coap_packet_init(&request, coap_buf, sizeof(coap_buf),
    c5a0:	f000 ff46 	bl	d430 <coap_next_id>
    c5a4:	2301      	movs	r3, #1
    c5a6:	2202      	movs	r2, #2
    c5a8:	9004      	str	r0, [sp, #16]
    c5aa:	e9cd 3200 	strd	r3, r2, [sp]
    c5ae:	e9cd 5302 	strd	r5, r3, [sp, #8]
    c5b2:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    c5b6:	491d      	ldr	r1, [pc, #116]	; (c62c <client_get_send+0x98>)
    c5b8:	a806      	add	r0, sp, #24
    c5ba:	f00f f86c 	bl	1b696 <coap_packet_init>
			       APP_COAP_VERSION, COAP_TYPE_NON_CON,
			       sizeof(next_token), (u8_t *)&next_token,
			       COAP_METHOD_GET, coap_next_id());
	if (err < 0) {
    c5be:	1e04      	subs	r4, r0, #0
    c5c0:	da06      	bge.n	c5d0 <client_get_send+0x3c>
		printk("Failed to create CoAP request, %d\n", err);
    c5c2:	4621      	mov	r1, r4
    c5c4:	481a      	ldr	r0, [pc, #104]	; (c630 <client_get_send+0x9c>)

	err = coap_packet_append_option(&request, COAP_OPTION_URI_PATH,
					(u8_t *)CONFIG_COAP_DOWN_RESOURCE,
					strlen(CONFIG_COAP_DOWN_RESOURCE));
	if (err < 0) {
		printk("Failed to encode CoAP option, %d\n", err);
    c5c6:	f00e fc06 	bl	1add6 <printk>
	}

	printk("CoAP request sent: token 0x%04x\n", next_token);

	return 0;
}
    c5ca:	4620      	mov	r0, r4
    c5cc:	b00b      	add	sp, #44	; 0x2c
    c5ce:	bd30      	pop	{r4, r5, pc}
					strlen(CONFIG_COAP_DOWN_RESOURCE));
    c5d0:	4818      	ldr	r0, [pc, #96]	; (c634 <client_get_send+0xa0>)
    c5d2:	f00f fbed 	bl	1bdb0 <strlen>
	err = coap_packet_append_option(&request, COAP_OPTION_URI_PATH,
    c5d6:	4a17      	ldr	r2, [pc, #92]	; (c634 <client_get_send+0xa0>)
    c5d8:	b283      	uxth	r3, r0
    c5da:	210b      	movs	r1, #11
    c5dc:	a806      	add	r0, sp, #24
    c5de:	f00f f8a4 	bl	1b72a <coap_packet_append_option>
	if (err < 0) {
    c5e2:	1e04      	subs	r4, r0, #0
    c5e4:	da02      	bge.n	c5ec <client_get_send+0x58>
		printk("Failed to encode CoAP option, %d\n", err);
    c5e6:	4621      	mov	r1, r4
    c5e8:	4813      	ldr	r0, [pc, #76]	; (c638 <client_get_send+0xa4>)
    c5ea:	e7ec      	b.n	c5c6 <client_get_send+0x32>
			   int flags)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->send);

	return socket_ops->send(sock, buf, len, flags);
    c5ec:	4b13      	ldr	r3, [pc, #76]	; (c63c <client_get_send+0xa8>)
    c5ee:	4814      	ldr	r0, [pc, #80]	; (c640 <client_get_send+0xac>)
    c5f0:	681b      	ldr	r3, [r3, #0]
    c5f2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    c5f6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    c5f8:	9906      	ldr	r1, [sp, #24]
    c5fa:	2300      	movs	r3, #0
    c5fc:	6800      	ldr	r0, [r0, #0]
    c5fe:	47a0      	blx	r4
	if (err < 0) {
    c600:	2800      	cmp	r0, #0
    c602:	da0a      	bge.n	c61a <client_get_send+0x86>
		printk("Failed to send CoAP request, %d\n", errno);
    c604:	f00e f8ac 	bl	1a760 <z_errno>
    c608:	6801      	ldr	r1, [r0, #0]
    c60a:	480e      	ldr	r0, [pc, #56]	; (c644 <client_get_send+0xb0>)
    c60c:	f00e fbe3 	bl	1add6 <printk>
		return -errno;
    c610:	f00e f8a6 	bl	1a760 <z_errno>
    c614:	6804      	ldr	r4, [r0, #0]
    c616:	4264      	negs	r4, r4
    c618:	e7d7      	b.n	c5ca <client_get_send+0x36>
	printk("CoAP request sent: token 0x%04x\n", next_token);
    c61a:	8829      	ldrh	r1, [r5, #0]
    c61c:	480a      	ldr	r0, [pc, #40]	; (c648 <client_get_send+0xb4>)
    c61e:	f00e fbda 	bl	1add6 <printk>
	return 0;
    c622:	2400      	movs	r4, #0
    c624:	e7d1      	b.n	c5ca <client_get_send+0x36>
    c626:	bf00      	nop
    c628:	20021e00 	.word	0x20021e00
    c62c:	20021e26 	.word	0x20021e26
    c630:	0001df46 	.word	0x0001df46
    c634:	0001df69 	.word	0x0001df69
    c638:	0001df76 	.word	0x0001df76
    c63c:	2002020c 	.word	0x2002020c
    c640:	200200c0 	.word	0x200200c0
    c644:	0001df98 	.word	0x0001df98
    c648:	0001dfb9 	.word	0x0001dfb9

0000c64c <coap_thread>:
                    COAP_THREAD_PRIORITY, 0, K_NO_WAIT);

}

static void coap_thread(void *blank1, void *blank2, void *blank3)
{
    c64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct addrinfo hints = {
    c650:	2401      	movs	r4, #1
    c652:	2702      	movs	r7, #2
{
    c654:	b095      	sub	sp, #84	; 0x54
	struct addrinfo hints = {
    c656:	f10d 0930 	add.w	r9, sp, #48	; 0x30
			      struct addrinfo **res)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->getaddrinfo);

	return socket_ops->getaddrinfo(node, service, hints, res);
    c65a:	4e93      	ldr	r6, [pc, #588]	; (c8a8 <coap_thread+0x25c>)
    c65c:	2220      	movs	r2, #32
    c65e:	2100      	movs	r1, #0
    c660:	4648      	mov	r0, r9
    c662:	f00f fc01 	bl	1be68 <memset>
    c666:	6833      	ldr	r3, [r6, #0]
    c668:	2100      	movs	r1, #0
    c66a:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    c66c:	e9cd 470d 	strd	r4, r7, [sp, #52]	; 0x34
    c670:	ab06      	add	r3, sp, #24
    c672:	464a      	mov	r2, r9
    c674:	488d      	ldr	r0, [pc, #564]	; (c8ac <coap_thread+0x260>)
    c676:	47a8      	blx	r5
	if (err != 0) {
    c678:	4601      	mov	r1, r0
    c67a:	b140      	cbz	r0, c68e <coap_thread+0x42>
		printk("ERROR: getaddrinfo failed %d\n", err);
    c67c:	488c      	ldr	r0, [pc, #560]	; (c8b0 <coap_thread+0x264>)
    c67e:	f00e fbaa 	bl	1add6 <printk>
	s64_t next_msg_time = APP_COAP_SEND_INTERVAL_MS;
	int err, received;

	if (server_resolve() != 0) {
		printk("Failed to resolve server name\n");
    c682:	488c      	ldr	r0, [pc, #560]	; (c8b4 <coap_thread+0x268>)
		return;
	}

	if (client_init() != 0) {
		printk("Failed to initialize CoAP client\n");
    c684:	f00e fba7 	bl	1add6 <printk>
			break;
		}
	}

	(void)close(sock);
}
    c688:	b015      	add	sp, #84	; 0x54
    c68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (result == NULL) {
    c68e:	9b06      	ldr	r3, [sp, #24]
    c690:	b91b      	cbnz	r3, c69a <coap_thread+0x4e>
		printk("ERROR: Address not found\n");
    c692:	4889      	ldr	r0, [pc, #548]	; (c8b8 <coap_thread+0x26c>)
    c694:	f00e fb9f 	bl	1add6 <printk>
		return -ENOENT;
    c698:	e7f3      	b.n	c682 <coap_thread+0x36>
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
    c69a:	695b      	ldr	r3, [r3, #20]
	server4->sin_addr.s_addr =
    c69c:	4d87      	ldr	r5, [pc, #540]	; (c8bc <coap_thread+0x270>)
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
    c69e:	685b      	ldr	r3, [r3, #4]
	server4->sin_family = AF_INET;
    c6a0:	802c      	strh	r4, [r5, #0]
	server4->sin_addr.s_addr =
    c6a2:	606b      	str	r3, [r5, #4]
	server4->sin_port = htons(CONFIG_COAP_SERVER_PORT);
    c6a4:	f243 3316 	movw	r3, #13078	; 0x3316
    c6a8:	806b      	strh	r3, [r5, #2]
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
    c6aa:	2310      	movs	r3, #16
    c6ac:	aa08      	add	r2, sp, #32
    c6ae:	1d29      	adds	r1, r5, #4
    c6b0:	4620      	mov	r0, r4
    c6b2:	f002 fcab 	bl	f00c <z_impl_net_addr_ntop>
	printk("IPv4 Address found %s\n", ipv4_addr);
    c6b6:	a908      	add	r1, sp, #32
    c6b8:	4881      	ldr	r0, [pc, #516]	; (c8c0 <coap_thread+0x274>)
    c6ba:	f00e fb8c 	bl	1add6 <printk>
static inline void freeaddrinfo(struct addrinfo *res)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->freeaddrinfo);

	return socket_ops->freeaddrinfo(res);
    c6be:	6833      	ldr	r3, [r6, #0]
    c6c0:	9806      	ldr	r0, [sp, #24]
    c6c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c6c4:	4798      	blx	r3
	return socket_ops->socket(family, type, proto);
    c6c6:	6833      	ldr	r3, [r6, #0]
    c6c8:	2211      	movs	r2, #17
    c6ca:	681b      	ldr	r3, [r3, #0]
    c6cc:	4639      	mov	r1, r7
    c6ce:	4620      	mov	r0, r4
    c6d0:	4798      	blx	r3
	sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    c6d2:	4b7c      	ldr	r3, [pc, #496]	; (c8c4 <coap_thread+0x278>)
	if (sock < 0) {
    c6d4:	2800      	cmp	r0, #0
	sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    c6d6:	6018      	str	r0, [r3, #0]
	if (sock < 0) {
    c6d8:	4698      	mov	r8, r3
    c6da:	da0c      	bge.n	c6f6 <coap_thread+0xaa>
		printk("Failed to create CoAP socket: %d.\n", errno);
    c6dc:	f00e f840 	bl	1a760 <z_errno>
    c6e0:	6801      	ldr	r1, [r0, #0]
    c6e2:	4879      	ldr	r0, [pc, #484]	; (c8c8 <coap_thread+0x27c>)
		printk("Connect failed : %d\n", errno);
    c6e4:	f00e fb77 	bl	1add6 <printk>
		return -errno;
    c6e8:	f00e f83a 	bl	1a760 <z_errno>
    c6ec:	6803      	ldr	r3, [r0, #0]
    c6ee:	425b      	negs	r3, r3
	if (client_init() != 0) {
    c6f0:	b1b3      	cbz	r3, c720 <coap_thread+0xd4>
		printk("Failed to initialize CoAP client\n");
    c6f2:	4876      	ldr	r0, [pc, #472]	; (c8cc <coap_thread+0x280>)
    c6f4:	e7c6      	b.n	c684 <coap_thread+0x38>
	return socket_ops->connect(sock, addr, addrlen);
    c6f6:	6833      	ldr	r3, [r6, #0]
    c6f8:	2208      	movs	r2, #8
    c6fa:	695b      	ldr	r3, [r3, #20]
    c6fc:	4629      	mov	r1, r5
    c6fe:	4798      	blx	r3
	if (err < 0) {
    c700:	2800      	cmp	r0, #0
    c702:	da04      	bge.n	c70e <coap_thread+0xc2>
		printk("Connect failed : %d\n", errno);
    c704:	f00e f82c 	bl	1a760 <z_errno>
    c708:	6801      	ldr	r1, [r0, #0]
    c70a:	4871      	ldr	r0, [pc, #452]	; (c8d0 <coap_thread+0x284>)
    c70c:	e7ea      	b.n	c6e4 <coap_thread+0x98>
	fds.fd = sock;
    c70e:	4b71      	ldr	r3, [pc, #452]	; (c8d4 <coap_thread+0x288>)
    c710:	f8d8 2000 	ldr.w	r2, [r8]
	fds.events = POLLIN;
    c714:	809c      	strh	r4, [r3, #4]
	fds.fd = sock;
    c716:	601a      	str	r2, [r3, #0]
	next_token = sys_rand32_get();
    c718:	f002 fd52 	bl	f1c0 <sys_rand32_get>
    c71c:	4b6e      	ldr	r3, [pc, #440]	; (c8d8 <coap_thread+0x28c>)
    c71e:	8018      	strh	r0, [r3, #0]
	connected = true;
    c720:	2301      	movs	r3, #1
    c722:	4f6e      	ldr	r7, [pc, #440]	; (c8dc <coap_thread+0x290>)
	printk("CoAP connected!\n");
    c724:	486e      	ldr	r0, [pc, #440]	; (c8e0 <coap_thread+0x294>)
	connected = true;
    c726:	703b      	strb	r3, [r7, #0]
	printk("CoAP connected!\n");
    c728:	f00e fb55 	bl	1add6 <printk>
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_GET);
		return (s64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_get();
    c72c:	f010 fe56 	bl	1d3dc <z_impl_k_uptime_get>
			next_msg_time += APP_COAP_SEND_INTERVAL_MS;
    c730:	f04f 0b00 	mov.w	fp, #0
    c734:	4604      	mov	r4, r0
    c736:	460d      	mov	r5, r1
    c738:	f010 fe50 	bl	1d3dc <z_impl_k_uptime_get>
		if (k_uptime_get() >= next_msg_time) {
    c73c:	42a0      	cmp	r0, r4
    c73e:	eb71 0305 	sbcs.w	r3, r1, r5
    c742:	db12      	blt.n	c76a <coap_thread+0x11e>
			if (client_get_send() != 0) {
    c744:	f7ff ff26 	bl	c594 <client_get_send>
    c748:	b150      	cbz	r0, c760 <coap_thread+0x114>
				printk("Failed to send GET request, exit...\n");
    c74a:	4866      	ldr	r0, [pc, #408]	; (c8e4 <coap_thread+0x298>)
				printk("Socket error, exit...\n");
    c74c:	f00e fb43 	bl	1add6 <printk>
				connected = false;
    c750:	2300      	movs	r3, #0
    c752:	703b      	strb	r3, [r7, #0]
	return socket_ops->close(sock);
    c754:	6833      	ldr	r3, [r6, #0]
    c756:	f8d8 0000 	ldr.w	r0, [r8]
    c75a:	685b      	ldr	r3, [r3, #4]
    c75c:	4798      	blx	r3
    c75e:	e793      	b.n	c688 <coap_thread+0x3c>
			next_msg_time += APP_COAP_SEND_INTERVAL_MS;
    c760:	f241 3388 	movw	r3, #5000	; 0x1388
    c764:	18e4      	adds	r4, r4, r3
    c766:	eb45 050b 	adc.w	r5, r5, fp
    c76a:	f010 fe37 	bl	1d3dc <z_impl_k_uptime_get>
		err = wait(remaining);
    c76e:	1a23      	subs	r3, r4, r0
    c770:	9302      	str	r3, [sp, #8]
    c772:	eb65 0301 	sbc.w	r3, r5, r1
    c776:	9303      	str	r3, [sp, #12]
    c778:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c77c:	2a00      	cmp	r2, #0
    c77e:	f173 0300 	sbcs.w	r3, r3, #0
    c782:	bfbe      	ittt	lt
    c784:	2200      	movlt	r2, #0
    c786:	2300      	movlt	r3, #0
    c788:	e9cd 2302 	strdlt	r2, r3, [sp, #8]
	return socket_ops->poll(fds, nfds, timeout);
    c78c:	6833      	ldr	r3, [r6, #0]
    c78e:	9a02      	ldr	r2, [sp, #8]
    c790:	699b      	ldr	r3, [r3, #24]
    c792:	2101      	movs	r1, #1
    c794:	484f      	ldr	r0, [pc, #316]	; (c8d4 <coap_thread+0x288>)
    c796:	4798      	blx	r3
	if (ret < 0) {
    c798:	2800      	cmp	r0, #0
    c79a:	da20      	bge.n	c7de <coap_thread+0x192>
		printk("poll error: %d\n", errno);
    c79c:	f00d ffe0 	bl	1a760 <z_errno>
    c7a0:	6801      	ldr	r1, [r0, #0]
    c7a2:	4851      	ldr	r0, [pc, #324]	; (c8e8 <coap_thread+0x29c>)
    c7a4:	f00e fb17 	bl	1add6 <printk>
		return -errno;
    c7a8:	f00d ffda 	bl	1a760 <z_errno>
    c7ac:	6803      	ldr	r3, [r0, #0]
    c7ae:	425b      	negs	r3, r3
		if (err < 0) {
    c7b0:	2b00      	cmp	r3, #0
    c7b2:	db25      	blt.n	c800 <coap_thread+0x1b4>
	return socket_ops->recv(sock, buf, max_len, flags);
    c7b4:	6833      	ldr	r3, [r6, #0]
    c7b6:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    c7ba:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
    c7be:	494b      	ldr	r1, [pc, #300]	; (c8ec <coap_thread+0x2a0>)
    c7c0:	2340      	movs	r3, #64	; 0x40
    c7c2:	f8d8 0000 	ldr.w	r0, [r8]
    c7c6:	47d0      	blx	sl
		if (received < 0) {
    c7c8:	1e02      	subs	r2, r0, #0
    c7ca:	da23      	bge.n	c814 <coap_thread+0x1c8>
			if (errno == EAGAIN || errno == EWOULDBLOCK) {
    c7cc:	f00d ffc8 	bl	1a760 <z_errno>
    c7d0:	6803      	ldr	r3, [r0, #0]
    c7d2:	2b0b      	cmp	r3, #11
    c7d4:	d117      	bne.n	c806 <coap_thread+0x1ba>
				printk("socket EAGAIN\n");
    c7d6:	4846      	ldr	r0, [pc, #280]	; (c8f0 <coap_thread+0x2a4>)
			printk("Empty datagram\n");
    c7d8:	f00e fafd 	bl	1add6 <printk>
			continue;
    c7dc:	e7ac      	b.n	c738 <coap_thread+0xec>
	if (ret == 0) {
    c7de:	d0ab      	beq.n	c738 <coap_thread+0xec>
	if ((fds.revents & POLLERR) == POLLERR) {
    c7e0:	4b3c      	ldr	r3, [pc, #240]	; (c8d4 <coap_thread+0x288>)
    c7e2:	88db      	ldrh	r3, [r3, #6]
    c7e4:	0719      	lsls	r1, r3, #28
    c7e6:	d504      	bpl.n	c7f2 <coap_thread+0x1a6>
		printk("wait: POLLERR\n");
    c7e8:	4842      	ldr	r0, [pc, #264]	; (c8f4 <coap_thread+0x2a8>)
		printk("wait: POLLNVAL\n");
    c7ea:	f00e faf4 	bl	1add6 <printk>
			printk("Poll error, exit...\n");
    c7ee:	4842      	ldr	r0, [pc, #264]	; (c8f8 <coap_thread+0x2ac>)
    c7f0:	e7ac      	b.n	c74c <coap_thread+0x100>
	if ((fds.revents & POLLNVAL) == POLLNVAL) {
    c7f2:	069a      	lsls	r2, r3, #26
    c7f4:	d501      	bpl.n	c7fa <coap_thread+0x1ae>
		printk("wait: POLLNVAL\n");
    c7f6:	4841      	ldr	r0, [pc, #260]	; (c8fc <coap_thread+0x2b0>)
    c7f8:	e7f7      	b.n	c7ea <coap_thread+0x19e>
	if ((fds.revents & POLLIN) != POLLIN) {
    c7fa:	07db      	lsls	r3, r3, #31
    c7fc:	d4da      	bmi.n	c7b4 <coap_thread+0x168>
    c7fe:	e79b      	b.n	c738 <coap_thread+0xec>
			if (err == -EAGAIN) {
    c800:	330b      	adds	r3, #11
    c802:	d1f4      	bne.n	c7ee <coap_thread+0x1a2>
    c804:	e798      	b.n	c738 <coap_thread+0xec>
			if (errno == EAGAIN || errno == EWOULDBLOCK) {
    c806:	f00d ffab 	bl	1a760 <z_errno>
    c80a:	6803      	ldr	r3, [r0, #0]
    c80c:	2b0b      	cmp	r3, #11
    c80e:	d0e2      	beq.n	c7d6 <coap_thread+0x18a>
				printk("Socket error, exit...\n");
    c810:	483b      	ldr	r0, [pc, #236]	; (c900 <coap_thread+0x2b4>)
    c812:	e79b      	b.n	c74c <coap_thread+0x100>
		if (received == 0) {
    c814:	d101      	bne.n	c81a <coap_thread+0x1ce>
			printk("Empty datagram\n");
    c816:	483b      	ldr	r0, [pc, #236]	; (c904 <coap_thread+0x2b8>)
    c818:	e7de      	b.n	c7d8 <coap_thread+0x18c>
	err = coap_packet_parse(&reply, buf, received, NULL, 0);
    c81a:	f04f 0a00 	mov.w	sl, #0
    c81e:	4933      	ldr	r1, [pc, #204]	; (c8ec <coap_thread+0x2a0>)
    c820:	f8cd a000 	str.w	sl, [sp]
    c824:	4653      	mov	r3, sl
    c826:	b292      	uxth	r2, r2
    c828:	a808      	add	r0, sp, #32
    c82a:	f00f f80e 	bl	1b84a <coap_packet_parse>
	if (err < 0) {
    c82e:	1e01      	subs	r1, r0, #0
    c830:	da08      	bge.n	c844 <coap_thread+0x1f8>
		printk("Malformed response received: %d\n", err);
    c832:	4835      	ldr	r0, [pc, #212]	; (c908 <coap_thread+0x2bc>)
    c834:	f00e facf 	bl	1add6 <printk>
			printk("Invalid response, exit...\n");
    c838:	4834      	ldr	r0, [pc, #208]	; (c90c <coap_thread+0x2c0>)
    c83a:	f00e facc 	bl	1add6 <printk>
			connected = false;
    c83e:	f887 a000 	strb.w	sl, [r7]
			break;
    c842:	e787      	b.n	c754 <coap_thread+0x108>
	payload = coap_packet_get_payload(&reply, &payload_len);
    c844:	f10d 0116 	add.w	r1, sp, #22
    c848:	a808      	add	r0, sp, #32
    c84a:	f00f f88f 	bl	1b96c <coap_packet_get_payload>
	token_len = coap_header_get_token(&reply, token);
    c84e:	a906      	add	r1, sp, #24
	payload = coap_packet_get_payload(&reply, &payload_len);
    c850:	4682      	mov	sl, r0
	token_len = coap_header_get_token(&reply, token);
    c852:	a808      	add	r0, sp, #32
    c854:	f00f f852 	bl	1b8fc <coap_header_get_token>
	if ((token_len != sizeof(next_token)) &&
    c858:	2802      	cmp	r0, #2
    c85a:	d00d      	beq.n	c878 <coap_thread+0x22c>
	    (memcmp(&next_token, token, sizeof(next_token)) != 0)) {
    c85c:	2202      	movs	r2, #2
    c85e:	a906      	add	r1, sp, #24
    c860:	481d      	ldr	r0, [pc, #116]	; (c8d8 <coap_thread+0x28c>)
    c862:	f00f fac7 	bl	1bdf4 <memcmp>
	if ((token_len != sizeof(next_token)) &&
    c866:	b138      	cbz	r0, c878 <coap_thread+0x22c>
		printk("Invalid token received: 0x%02x%02x\n",
    c868:	f89d 2018 	ldrb.w	r2, [sp, #24]
    c86c:	f89d 1019 	ldrb.w	r1, [sp, #25]
    c870:	4827      	ldr	r0, [pc, #156]	; (c910 <coap_thread+0x2c4>)
    c872:	f00e fab0 	bl	1add6 <printk>
		if (err < 0) {
    c876:	e75f      	b.n	c738 <coap_thread+0xec>
	snprintf(temp_buf, MAX(payload_len, sizeof(temp_buf)), "%s", payload);
    c878:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    c87c:	4653      	mov	r3, sl
    c87e:	2910      	cmp	r1, #16
    c880:	bf38      	it	cc
    c882:	2110      	movcc	r1, #16
    c884:	4a23      	ldr	r2, [pc, #140]	; (c914 <coap_thread+0x2c8>)
    c886:	4648      	mov	r0, r9
    c888:	f002 fb66 	bl	ef58 <snprintf>
	       coap_header_get_code(&reply), token[1], token[0], temp_buf);
    c88c:	a808      	add	r0, sp, #32
    c88e:	f00f f849 	bl	1b924 <coap_header_get_code>
	printk("CoAP response: code: 0x%x, token 0x%02x%02x, payload: %s\n",
    c892:	f8cd 9000 	str.w	r9, [sp]
    c896:	4601      	mov	r1, r0
    c898:	f89d 3018 	ldrb.w	r3, [sp, #24]
    c89c:	f89d 2019 	ldrb.w	r2, [sp, #25]
    c8a0:	481d      	ldr	r0, [pc, #116]	; (c918 <coap_thread+0x2cc>)
    c8a2:	f00e fa98 	bl	1add6 <printk>
		if (err < 0) {
    c8a6:	e747      	b.n	c738 <coap_thread+0xec>
    c8a8:	2002020c 	.word	0x2002020c
    c8ac:	0001dff8 	.word	0x0001dff8
    c8b0:	0001e010 	.word	0x0001e010
    c8b4:	0001e05f 	.word	0x0001e05f
    c8b8:	0001e02e 	.word	0x0001e02e
    c8bc:	20021e02 	.word	0x20021e02
    c8c0:	0001e048 	.word	0x0001e048
    c8c4:	200200c0 	.word	0x200200c0
    c8c8:	0001e07e 	.word	0x0001e07e
    c8cc:	0001e0b6 	.word	0x0001e0b6
    c8d0:	0001e0a1 	.word	0x0001e0a1
    c8d4:	200200b8 	.word	0x200200b8
    c8d8:	20021e00 	.word	0x20021e00
    c8dc:	20022326 	.word	0x20022326
    c8e0:	0001e0d8 	.word	0x0001e0d8
    c8e4:	0001e0e9 	.word	0x0001e0e9
    c8e8:	0001e10e 	.word	0x0001e10e
    c8ec:	20021e26 	.word	0x20021e26
    c8f0:	0001e152 	.word	0x0001e152
    c8f4:	0001e11e 	.word	0x0001e11e
    c8f8:	0001e13d 	.word	0x0001e13d
    c8fc:	0001e12d 	.word	0x0001e12d
    c900:	0001e161 	.word	0x0001e161
    c904:	0001e178 	.word	0x0001e178
    c908:	0001e188 	.word	0x0001e188
    c90c:	0001e1a9 	.word	0x0001e1a9
    c910:	0001e1c4 	.word	0x0001e1c4
    c914:	0001e1e8 	.word	0x0001e1e8
    c918:	0001e1eb 	.word	0x0001e1eb

0000c91c <coap_start_thread>:
void coap_start_thread() {
    c91c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    printk("--- starting CoAP thread ---\n");
    c91e:	480a      	ldr	r0, [pc, #40]	; (c948 <coap_start_thread+0x2c>)
    c920:	f00e fa59 	bl	1add6 <printk>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    c924:	2300      	movs	r3, #0
    c926:	2208      	movs	r2, #8
    c928:	e9cd 3304 	strd	r3, r3, [sp, #16]
    c92c:	e9cd 3202 	strd	r3, r2, [sp, #8]
    c930:	e9cd 3300 	strd	r3, r3, [sp]
    c934:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    c938:	4b04      	ldr	r3, [pc, #16]	; (c94c <coap_start_thread+0x30>)
    c93a:	4905      	ldr	r1, [pc, #20]	; (c950 <coap_start_thread+0x34>)
    c93c:	4805      	ldr	r0, [pc, #20]	; (c954 <coap_start_thread+0x38>)
    c93e:	f00d fc97 	bl	1a270 <z_impl_k_thread_create>
}
    c942:	b007      	add	sp, #28
    c944:	f85d fb04 	ldr.w	pc, [sp], #4
    c948:	0001dfda 	.word	0x0001dfda
    c94c:	0000c64d 	.word	0x0000c64d
    c950:	200234a0 	.word	0x200234a0
    c954:	20020008 	.word	0x20020008

0000c958 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    c958:	680b      	ldr	r3, [r1, #0]
    c95a:	3301      	adds	r3, #1
    c95c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    c95e:	4b01      	ldr	r3, [pc, #4]	; (c964 <char_out+0xc>)
    c960:	681b      	ldr	r3, [r3, #0]
    c962:	4718      	bx	r3
    c964:	200284f0 	.word	0x200284f0

0000c968 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    c968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c96c:	b085      	sub	sp, #20
    c96e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    c970:	469b      	mov	fp, r3
    c972:	2c01      	cmp	r4, #1
    c974:	bfb8      	it	lt
    c976:	2401      	movlt	r4, #1
    c978:	2b01      	cmp	r3, #1
    c97a:	bf0c      	ite	eq
    c97c:	2330      	moveq	r3, #48	; 0x30
    c97e:	2320      	movne	r3, #32
    c980:	4616      	mov	r6, r2
    c982:	4682      	mov	sl, r0
    c984:	4688      	mov	r8, r1
    c986:	2501      	movs	r5, #1
    c988:	270a      	movs	r7, #10
    c98a:	2200      	movs	r2, #0
    c98c:	f8df 906c 	ldr.w	r9, [pc, #108]	; c9fc <_printk_dec_ulong+0x94>
    c990:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    c992:	fbb6 f3f9 	udiv	r3, r6, r9
    c996:	9301      	str	r3, [sp, #4]
    c998:	b90a      	cbnz	r2, c99e <_printk_dec_ulong+0x36>
    c99a:	45b1      	cmp	r9, r6
    c99c:	d81c      	bhi.n	c9d8 <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    c99e:	9b01      	ldr	r3, [sp, #4]
    c9a0:	4641      	mov	r1, r8
    c9a2:	f103 0030 	add.w	r0, r3, #48	; 0x30
    c9a6:	47d0      	blx	sl
			found_largest_digit = 1;
    c9a8:	2201      	movs	r2, #1
			digits++;
    c9aa:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    c9ac:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    c9ae:	3f01      	subs	r7, #1
		remainder %= pos;
    c9b0:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
    c9b4:	230a      	movs	r3, #10
	while (pos >= 10) {
    c9b6:	2f01      	cmp	r7, #1
		pos /= 10;
    c9b8:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    c9bc:	d1e9      	bne.n	c992 <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
    c9be:	4641      	mov	r1, r8
    c9c0:	f106 0030 	add.w	r0, r6, #48	; 0x30
    c9c4:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    c9c6:	f1bb 0f03 	cmp.w	fp, #3
    c9ca:	d102      	bne.n	c9d2 <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
    c9cc:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
    c9ce:	2c00      	cmp	r4, #0
    c9d0:	dc0e      	bgt.n	c9f0 <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
    c9d2:	b005      	add	sp, #20
    c9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    c9d8:	42bc      	cmp	r4, r7
    c9da:	dbe7      	blt.n	c9ac <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    c9dc:	f1bb 0f02 	cmp.w	fp, #2
    c9e0:	d8e4      	bhi.n	c9ac <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    c9e2:	4641      	mov	r1, r8
    c9e4:	9802      	ldr	r0, [sp, #8]
    c9e6:	9203      	str	r2, [sp, #12]
			digits++;
    c9e8:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    c9ea:	47d0      	blx	sl
			digits++;
    c9ec:	9a03      	ldr	r2, [sp, #12]
    c9ee:	e7dd      	b.n	c9ac <_printk_dec_ulong+0x44>
			out(' ', ctx);
    c9f0:	4641      	mov	r1, r8
    c9f2:	2020      	movs	r0, #32
    c9f4:	47d0      	blx	sl
    c9f6:	3c01      	subs	r4, #1
    c9f8:	e7e9      	b.n	c9ce <_printk_dec_ulong+0x66>
    c9fa:	bf00      	nop
    c9fc:	3b9aca00 	.word	0x3b9aca00

0000ca00 <__printk_hook_install>:
	_char_out = fn;
    ca00:	4b01      	ldr	r3, [pc, #4]	; (ca08 <__printk_hook_install+0x8>)
    ca02:	6018      	str	r0, [r3, #0]
}
    ca04:	4770      	bx	lr
    ca06:	bf00      	nop
    ca08:	200284f0 	.word	0x200284f0

0000ca0c <vprintk>:
	struct out_context ctx = { 0 };
    ca0c:	2300      	movs	r3, #0
{
    ca0e:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
    ca10:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    ca12:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    ca14:	4803      	ldr	r0, [pc, #12]	; (ca24 <vprintk+0x18>)
    ca16:	460b      	mov	r3, r1
    ca18:	a901      	add	r1, sp, #4
    ca1a:	f00e f86c 	bl	1aaf6 <z_vprintk>
}
    ca1e:	b003      	add	sp, #12
    ca20:	f85d fb04 	ldr.w	pc, [sp], #4
    ca24:	0000c959 	.word	0x0000c959

0000ca28 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    ca28:	f04f 0220 	mov.w	r2, #32
    ca2c:	f3ef 8311 	mrs	r3, BASEPRI
    ca30:	f382 8811 	msr	BASEPRI, r2
    ca34:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    ca38:	2101      	movs	r1, #1
    ca3a:	4a04      	ldr	r2, [pc, #16]	; (ca4c <nordicsemi_nrf91_init+0x24>)
    ca3c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    ca40:	f383 8811 	msr	BASEPRI, r3
    ca44:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    ca48:	2000      	movs	r0, #0
    ca4a:	4770      	bx	lr
    ca4c:	40039000 	.word	0x40039000

0000ca50 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    ca50:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    ca52:	2200      	movs	r2, #0
{
    ca54:	b087      	sub	sp, #28
		k_timer_init(&log_process_thread_timer,
    ca56:	490d      	ldr	r1, [pc, #52]	; (ca8c <enable_logger+0x3c>)
    ca58:	480d      	ldr	r0, [pc, #52]	; (ca90 <enable_logger+0x40>)
    ca5a:	f010 fccd 	bl	1d3f8 <k_timer_init>
    ca5e:	2400      	movs	r4, #0
    ca60:	230e      	movs	r3, #14
    ca62:	4d0c      	ldr	r5, [pc, #48]	; (ca94 <enable_logger+0x44>)
    ca64:	e9cd 4302 	strd	r4, r3, [sp, #8]
    ca68:	e9cd 4404 	strd	r4, r4, [sp, #16]
    ca6c:	e9cd 4400 	strd	r4, r4, [sp]
    ca70:	4b09      	ldr	r3, [pc, #36]	; (ca98 <enable_logger+0x48>)
    ca72:	f44f 7240 	mov.w	r2, #768	; 0x300
    ca76:	4909      	ldr	r1, [pc, #36]	; (ca9c <enable_logger+0x4c>)
    ca78:	4628      	mov	r0, r5
    ca7a:	f00d fbf9 	bl	1a270 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    ca7e:	4908      	ldr	r1, [pc, #32]	; (caa0 <enable_logger+0x50>)
    ca80:	4628      	mov	r0, r5
    ca82:	f010 fc53 	bl	1d32c <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    ca86:	4620      	mov	r0, r4
    ca88:	b007      	add	sp, #28
    ca8a:	bd30      	pop	{r4, r5, pc}
    ca8c:	0000caa5 	.word	0x0000caa5
    ca90:	200200d8 	.word	0x200200d8
    ca94:	20020120 	.word	0x20020120
    ca98:	0000ce65 	.word	0x0000ce65
    ca9c:	200244a0 	.word	0x200244a0
    caa0:	0001e239 	.word	0x0001e239

0000caa4 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    caa4:	4801      	ldr	r0, [pc, #4]	; (caac <log_process_thread_timer_expiry_fn+0x8>)
    caa6:	f00d bb3d 	b.w	1a124 <z_impl_k_sem_give>
    caaa:	bf00      	nop
    caac:	2002864c 	.word	0x2002864c

0000cab0 <log_core_init>:
{
    cab0:	b508      	push	{r3, lr}
		log_msg_pool_init();
    cab2:	f000 fa33 	bl	cf1c <log_msg_pool_init>
		log_list_init(&list);
    cab6:	4809      	ldr	r0, [pc, #36]	; (cadc <log_core_init+0x2c>)
    cab8:	f00e f9c2 	bl	1ae40 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    cabc:	2304      	movs	r3, #4
    cabe:	2234      	movs	r2, #52	; 0x34
    cac0:	4907      	ldr	r1, [pc, #28]	; (cae0 <log_core_init+0x30>)
    cac2:	4808      	ldr	r0, [pc, #32]	; (cae4 <log_core_init+0x34>)
    cac4:	f010 fa13 	bl	1ceee <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    cac8:	4b07      	ldr	r3, [pc, #28]	; (cae8 <log_core_init+0x38>)
    caca:	4a08      	ldr	r2, [pc, #32]	; (caec <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
    cacc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
    cad0:	601a      	str	r2, [r3, #0]
}
    cad2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    cad6:	f000 bc61 	b.w	d39c <log_output_timestamp_freq_set>
    cada:	bf00      	nop
    cadc:	200200d0 	.word	0x200200d0
    cae0:	20026ae0 	.word	0x20026ae0
    cae4:	20020104 	.word	0x20020104
    cae8:	200284f4 	.word	0x200284f4
    caec:	0001ae7f 	.word	0x0001ae7f

0000caf0 <dropped_notify>:
{
    caf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    caf2:	2500      	movs	r5, #0
    caf4:	4b0c      	ldr	r3, [pc, #48]	; (cb28 <dropped_notify+0x38>)
    caf6:	e8d3 7fef 	ldaex	r7, [r3]
    cafa:	e8c3 5fe2 	stlex	r2, r5, [r3]
    cafe:	2a00      	cmp	r2, #0
    cb00:	d1f9      	bne.n	caf6 <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    cb02:	4c0a      	ldr	r4, [pc, #40]	; (cb2c <dropped_notify+0x3c>)
    cb04:	4e0a      	ldr	r6, [pc, #40]	; (cb30 <dropped_notify+0x40>)
    cb06:	1b36      	subs	r6, r6, r4
    cb08:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    cb0a:	42b5      	cmp	r5, r6
    cb0c:	db00      	blt.n	cb10 <dropped_notify+0x20>
}
    cb0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    cb10:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    cb12:	795b      	ldrb	r3, [r3, #5]
    cb14:	b12b      	cbz	r3, cb22 <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
    cb16:	6823      	ldr	r3, [r4, #0]
    cb18:	68db      	ldr	r3, [r3, #12]
    cb1a:	b113      	cbz	r3, cb22 <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
    cb1c:	4639      	mov	r1, r7
    cb1e:	4620      	mov	r0, r4
    cb20:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    cb22:	3501      	adds	r5, #1
    cb24:	3410      	adds	r4, #16
    cb26:	e7f0      	b.n	cb0a <dropped_notify+0x1a>
    cb28:	200200c8 	.word	0x200200c8
    cb2c:	0001d9ec 	.word	0x0001d9ec
    cb30:	0001d9fc 	.word	0x0001d9fc

0000cb34 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    cb34:	4b04      	ldr	r3, [pc, #16]	; (cb48 <log_dropped+0x14>)
    cb36:	e8d3 2fef 	ldaex	r2, [r3]
    cb3a:	3201      	adds	r2, #1
    cb3c:	e8c3 2fe1 	stlex	r1, r2, [r3]
    cb40:	2900      	cmp	r1, #0
    cb42:	d1f8      	bne.n	cb36 <log_dropped+0x2>
}
    cb44:	4770      	bx	lr
    cb46:	bf00      	nop
    cb48:	200200c8 	.word	0x200200c8

0000cb4c <log_source_name_get>:
    cb4c:	4a04      	ldr	r2, [pc, #16]	; (cb60 <log_source_name_get+0x14>)
    cb4e:	4b05      	ldr	r3, [pc, #20]	; (cb64 <log_source_name_get+0x18>)
    cb50:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    cb52:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    cb56:	bf34      	ite	cc
    cb58:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    cb5c:	2000      	movcs	r0, #0
}
    cb5e:	4770      	bx	lr
    cb60:	0001d954 	.word	0x0001d954
    cb64:	0001d9ec 	.word	0x0001d9ec

0000cb68 <log_backend_enable>:
	id += backend - log_backend_get(0);
    cb68:	4b09      	ldr	r3, [pc, #36]	; (cb90 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    cb6a:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    cb6c:	1ac3      	subs	r3, r0, r3
    cb6e:	111b      	asrs	r3, r3, #4
    cb70:	3301      	adds	r3, #1
{
    cb72:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    cb74:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
    cb76:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
    cb78:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    cb7a:	4c06      	ldr	r4, [pc, #24]	; (cb94 <log_backend_enable+0x2c>)
    cb7c:	715a      	strb	r2, [r3, #5]
    cb7e:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
    cb80:	6019      	str	r1, [r3, #0]
    cb82:	b912      	cbnz	r2, cb8a <log_backend_enable+0x22>
    cb84:	4804      	ldr	r0, [pc, #16]	; (cb98 <log_backend_enable+0x30>)
    cb86:	f00d facd 	bl	1a124 <z_impl_k_sem_give>
	backend_attached = true;
    cb8a:	2301      	movs	r3, #1
    cb8c:	7023      	strb	r3, [r4, #0]
}
    cb8e:	bd10      	pop	{r4, pc}
    cb90:	0001d9ec 	.word	0x0001d9ec
    cb94:	20022327 	.word	0x20022327
    cb98:	2002864c 	.word	0x2002864c

0000cb9c <log_init>:
{
    cb9c:	b570      	push	{r4, r5, r6, lr}
    cb9e:	4b0f      	ldr	r3, [pc, #60]	; (cbdc <log_init+0x40>)
    cba0:	e8d3 5fef 	ldaex	r5, [r3]
    cba4:	1c6a      	adds	r2, r5, #1
    cba6:	e8c3 2fe1 	stlex	r1, r2, [r3]
    cbaa:	2900      	cmp	r1, #0
    cbac:	d1f8      	bne.n	cba0 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    cbae:	b92d      	cbnz	r5, cbbc <log_init+0x20>
	return __log_backends_end - __log_backends_start;
    cbb0:	4c0b      	ldr	r4, [pc, #44]	; (cbe0 <log_init+0x44>)
    cbb2:	4e0c      	ldr	r6, [pc, #48]	; (cbe4 <log_init+0x48>)
    cbb4:	1b36      	subs	r6, r6, r4
    cbb6:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    cbb8:	42b5      	cmp	r5, r6
    cbba:	db00      	blt.n	cbbe <log_init+0x22>
}
    cbbc:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    cbbe:	7b23      	ldrb	r3, [r4, #12]
    cbc0:	b143      	cbz	r3, cbd4 <log_init+0x38>
			if (backend->api->init != NULL) {
    cbc2:	6823      	ldr	r3, [r4, #0]
    cbc4:	695b      	ldr	r3, [r3, #20]
    cbc6:	b103      	cbz	r3, cbca <log_init+0x2e>
				backend->api->init();
    cbc8:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    cbca:	2204      	movs	r2, #4
    cbcc:	2100      	movs	r1, #0
    cbce:	4620      	mov	r0, r4
    cbd0:	f7ff ffca 	bl	cb68 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    cbd4:	3501      	adds	r5, #1
    cbd6:	3410      	adds	r4, #16
    cbd8:	e7ee      	b.n	cbb8 <log_init+0x1c>
    cbda:	bf00      	nop
    cbdc:	200200cc 	.word	0x200200cc
    cbe0:	0001d9ec 	.word	0x0001d9ec
    cbe4:	0001d9fc 	.word	0x0001d9fc

0000cbe8 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    cbe8:	4b14      	ldr	r3, [pc, #80]	; (cc3c <log_strdup+0x54>)
{
    cbea:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
    cbec:	4298      	cmp	r0, r3
{
    cbee:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    cbf0:	d302      	bcc.n	cbf8 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    cbf2:	4b13      	ldr	r3, [pc, #76]	; (cc40 <log_strdup+0x58>)
    cbf4:	4298      	cmp	r0, r3
    cbf6:	d31b      	bcc.n	cc30 <log_strdup+0x48>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    cbf8:	2200      	movs	r2, #0
    cbfa:	a901      	add	r1, sp, #4
    cbfc:	4811      	ldr	r0, [pc, #68]	; (cc44 <log_strdup+0x5c>)
    cbfe:	f00c fcbb 	bl	19578 <k_mem_slab_alloc>
	if (err != 0) {
    cc02:	4605      	mov	r5, r0
    cc04:	b9b8      	cbnz	r0, cc36 <log_strdup+0x4e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    cc06:	2201      	movs	r2, #1
    cc08:	9b01      	ldr	r3, [sp, #4]
    cc0a:	e8d3 1fef 	ldaex	r1, [r3]
    cc0e:	e8c3 2fe0 	stlex	r0, r2, [r3]
    cc12:	2800      	cmp	r0, #0
    cc14:	d1f9      	bne.n	cc0a <log_strdup+0x22>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    cc16:	9801      	ldr	r0, [sp, #4]
    cc18:	4621      	mov	r1, r4
    cc1a:	222d      	movs	r2, #45	; 0x2d
    cc1c:	3004      	adds	r0, #4
    cc1e:	f00f f8a6 	bl	1bd6e <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    cc22:	237e      	movs	r3, #126	; 0x7e
    cc24:	9c01      	ldr	r4, [sp, #4]
    cc26:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    cc2a:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	return dup->buf;
    cc2e:	3404      	adds	r4, #4
}
    cc30:	4620      	mov	r0, r4
    cc32:	b003      	add	sp, #12
    cc34:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    cc36:	4c04      	ldr	r4, [pc, #16]	; (cc48 <log_strdup+0x60>)
    cc38:	e7fa      	b.n	cc30 <log_strdup+0x48>
    cc3a:	bf00      	nop
    cc3c:	0001d668 	.word	0x0001d668
    cc40:	0001f0a8 	.word	0x0001f0a8
    cc44:	20020104 	.word	0x20020104
    cc48:	0001e241 	.word	0x0001e241

0000cc4c <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
    cc4c:	b148      	cbz	r0, cc62 <log_is_strdup+0x16>
    cc4e:	4b05      	ldr	r3, [pc, #20]	; (cc64 <log_is_strdup+0x18>)
    cc50:	4298      	cmp	r0, r3
    cc52:	d305      	bcc.n	cc60 <log_is_strdup+0x14>
    cc54:	33d0      	adds	r3, #208	; 0xd0
    cc56:	4298      	cmp	r0, r3
    cc58:	bf2c      	ite	cs
    cc5a:	2000      	movcs	r0, #0
    cc5c:	2001      	movcc	r0, #1
    cc5e:	4770      	bx	lr
    cc60:	2000      	movs	r0, #0
}
    cc62:	4770      	bx	lr
    cc64:	20026ae0 	.word	0x20026ae0

0000cc68 <z_impl_log_process>:
{
    cc68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    cc6c:	4b44      	ldr	r3, [pc, #272]	; (cd80 <z_impl_log_process+0x118>)
{
    cc6e:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    cc70:	781b      	ldrb	r3, [r3, #0]
    cc72:	b903      	cbnz	r3, cc76 <z_impl_log_process+0xe>
    cc74:	b340      	cbz	r0, ccc8 <z_impl_log_process+0x60>
	__asm__ volatile(
    cc76:	f04f 0320 	mov.w	r3, #32
    cc7a:	f3ef 8611 	mrs	r6, BASEPRI
    cc7e:	f383 8811 	msr	BASEPRI, r3
    cc82:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    cc86:	483f      	ldr	r0, [pc, #252]	; (cd84 <z_impl_log_process+0x11c>)
    cc88:	f00e f8ea 	bl	1ae60 <log_list_head_get>
    cc8c:	4604      	mov	r4, r0
	__asm__ volatile(
    cc8e:	f386 8811 	msr	BASEPRI, r6
    cc92:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    cc96:	b158      	cbz	r0, ccb0 <z_impl_log_process+0x48>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    cc98:	4b3b      	ldr	r3, [pc, #236]	; (cd88 <z_impl_log_process+0x120>)
    cc9a:	e8d3 2fef 	ldaex	r2, [r3]
    cc9e:	3a01      	subs	r2, #1
    cca0:	e8c3 2fe1 	stlex	r1, r2, [r3]
    cca4:	2900      	cmp	r1, #0
    cca6:	d1f8      	bne.n	cc9a <z_impl_log_process+0x32>
	if (!bypass) {
    cca8:	b18d      	cbz	r5, ccce <z_impl_log_process+0x66>
	log_msg_put(msg);
    ccaa:	4620      	mov	r0, r4
    ccac:	f00e f9e5 	bl	1b07a <log_msg_put>
	if (!bypass && dropped_cnt) {
    ccb0:	b925      	cbnz	r5, ccbc <z_impl_log_process+0x54>
    ccb2:	4b36      	ldr	r3, [pc, #216]	; (cd8c <z_impl_log_process+0x124>)
    ccb4:	681b      	ldr	r3, [r3, #0]
    ccb6:	b10b      	cbz	r3, ccbc <z_impl_log_process+0x54>
		dropped_notify();
    ccb8:	f7ff ff1a 	bl	caf0 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    ccbc:	4831      	ldr	r0, [pc, #196]	; (cd84 <z_impl_log_process+0x11c>)
    ccbe:	f00e f8cd 	bl	1ae5c <log_list_head_peek>
    ccc2:	1c05      	adds	r5, r0, #0
    ccc4:	bf18      	it	ne
    ccc6:	2501      	movne	r5, #1
}
    ccc8:	4628      	mov	r0, r5
    ccca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    ccce:	4b30      	ldr	r3, [pc, #192]	; (cd90 <z_impl_log_process+0x128>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    ccd0:	781b      	ldrb	r3, [r3, #0]
    ccd2:	b9ab      	cbnz	r3, cd00 <z_impl_log_process+0x98>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    ccd4:	7a23      	ldrb	r3, [r4, #8]
	if (!log_msg_is_std(msg)) {
    ccd6:	07db      	lsls	r3, r3, #31
    ccd8:	d412      	bmi.n	cd00 <z_impl_log_process+0x98>
	msg_str = log_msg_str_get(msg);
    ccda:	f00e f9dd 	bl	1b098 <log_msg_str_get>
    ccde:	4681      	mov	r9, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    cce0:	4620      	mov	r0, r4
    cce2:	f00e f9aa 	bl	1b03a <log_msg_nargs_get>
    cce6:	4601      	mov	r1, r0
    cce8:	4648      	mov	r0, r9
    ccea:	f00e f8cc 	bl	1ae86 <z_log_get_s_mask>
    ccee:	4607      	mov	r7, r0
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    ccf0:	4b28      	ldr	r3, [pc, #160]	; (cd94 <z_impl_log_process+0x12c>)
				LOG_ERR(ERR_MSG, idx, msg_str);
    ccf2:	4a29      	ldr	r2, [pc, #164]	; (cd98 <z_impl_log_process+0x130>)
    ccf4:	f8df b0b8 	ldr.w	fp, [pc, #184]	; cdb0 <z_impl_log_process+0x148>
    ccf8:	1a9b      	subs	r3, r3, r2
    ccfa:	f3c3 0ac9 	ubfx	sl, r3, #3, #10
	while (mask) {
    ccfe:	b937      	cbnz	r7, cd0e <z_impl_log_process+0xa6>
    cd00:	4e26      	ldr	r6, [pc, #152]	; (cd9c <z_impl_log_process+0x134>)
    cd02:	4f27      	ldr	r7, [pc, #156]	; (cda0 <z_impl_log_process+0x138>)
    cd04:	f04f 0800 	mov.w	r8, #0
    cd08:	1bbf      	subs	r7, r7, r6
    cd0a:	113f      	asrs	r7, r7, #4
    cd0c:	e034      	b.n	cd78 <z_impl_log_process+0x110>
		idx = 31 - __builtin_clz(mask);
    cd0e:	fab7 f687 	clz	r6, r7
    cd12:	f1c6 061f 	rsb	r6, r6, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    cd16:	4631      	mov	r1, r6
    cd18:	4620      	mov	r0, r4
    cd1a:	f00e f991 	bl	1b040 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    cd1e:	4b21      	ldr	r3, [pc, #132]	; (cda4 <z_impl_log_process+0x13c>)
		str = (const char *)log_msg_arg_get(msg, idx);
    cd20:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    cd22:	4298      	cmp	r0, r3
    cd24:	d302      	bcc.n	cd2c <z_impl_log_process+0xc4>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    cd26:	4b20      	ldr	r3, [pc, #128]	; (cda8 <z_impl_log_process+0x140>)
    cd28:	4298      	cmp	r0, r3
    cd2a:	d314      	bcc.n	cd56 <z_impl_log_process+0xee>
    cd2c:	4610      	mov	r0, r2
    cd2e:	f7ff ff8d 	bl	cc4c <log_is_strdup>
    cd32:	b980      	cbnz	r0, cd56 <z_impl_log_process+0xee>
    cd34:	4b1d      	ldr	r3, [pc, #116]	; (cdac <z_impl_log_process+0x144>)
    cd36:	429a      	cmp	r2, r3
    cd38:	d00d      	beq.n	cd56 <z_impl_log_process+0xee>
				LOG_ERR(ERR_MSG, idx, msg_str);
    cd3a:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    cd3e:	f043 0301 	orr.w	r3, r3, #1
    cd42:	f363 0807 	bfi	r8, r3, #0, #8
    cd46:	f36a 188f 	bfi	r8, sl, #6, #10
    cd4a:	4643      	mov	r3, r8
    cd4c:	464a      	mov	r2, r9
    cd4e:	4631      	mov	r1, r6
    cd50:	4658      	mov	r0, fp
    cd52:	f00e f8d9 	bl	1af08 <log_2>
		mask &= ~BIT(idx);
    cd56:	2301      	movs	r3, #1
    cd58:	fa03 f606 	lsl.w	r6, r3, r6
    cd5c:	ea27 0706 	bic.w	r7, r7, r6
    cd60:	e7cd      	b.n	ccfe <z_impl_log_process+0x96>
	return backend->cb->active;
    cd62:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    cd64:	795b      	ldrb	r3, [r3, #5]
    cd66:	b123      	cbz	r3, cd72 <z_impl_log_process+0x10a>
	backend->api->put(backend, msg);
    cd68:	6833      	ldr	r3, [r6, #0]
    cd6a:	4621      	mov	r1, r4
    cd6c:	681b      	ldr	r3, [r3, #0]
    cd6e:	4630      	mov	r0, r6
    cd70:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    cd72:	f108 0801 	add.w	r8, r8, #1
    cd76:	3610      	adds	r6, #16
    cd78:	45b8      	cmp	r8, r7
    cd7a:	dbf2      	blt.n	cd62 <z_impl_log_process+0xfa>
    cd7c:	e795      	b.n	ccaa <z_impl_log_process+0x42>
    cd7e:	bf00      	nop
    cd80:	20022327 	.word	0x20022327
    cd84:	200200d0 	.word	0x200200d0
    cd88:	200200c4 	.word	0x200200c4
    cd8c:	200200c8 	.word	0x200200c8
    cd90:	20022328 	.word	0x20022328
    cd94:	0001d994 	.word	0x0001d994
    cd98:	0001d954 	.word	0x0001d954
    cd9c:	0001d9ec 	.word	0x0001d9ec
    cda0:	0001d9fc 	.word	0x0001d9fc
    cda4:	0001d668 	.word	0x0001d668
    cda8:	0001f0a8 	.word	0x0001f0a8
    cdac:	0001e241 	.word	0x0001e241
    cdb0:	0001e25f 	.word	0x0001e25f

0000cdb4 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    cdb4:	4b24      	ldr	r3, [pc, #144]	; (ce48 <msg_finalize+0x94>)
{
    cdb6:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    cdb8:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    cdba:	8141      	strh	r1, [r0, #10]
{
    cdbc:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    cdbe:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    cdc0:	4c22      	ldr	r4, [pc, #136]	; (ce4c <msg_finalize+0x98>)
    cdc2:	60e8      	str	r0, [r5, #12]
    cdc4:	e8d4 3fef 	ldaex	r3, [r4]
    cdc8:	3301      	adds	r3, #1
    cdca:	e8c4 3fe2 	stlex	r2, r3, [r4]
    cdce:	2a00      	cmp	r2, #0
    cdd0:	d1f8      	bne.n	cdc4 <msg_finalize+0x10>
	__asm__ volatile(
    cdd2:	f04f 0320 	mov.w	r3, #32
    cdd6:	f3ef 8611 	mrs	r6, BASEPRI
    cdda:	f383 8811 	msr	BASEPRI, r3
    cdde:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    cde2:	481b      	ldr	r0, [pc, #108]	; (ce50 <msg_finalize+0x9c>)
    cde4:	4629      	mov	r1, r5
    cde6:	f00e f82f 	bl	1ae48 <log_list_add_tail>
	__asm__ volatile(
    cdea:	f386 8811 	msr	BASEPRI, r6
    cdee:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    cdf2:	4b18      	ldr	r3, [pc, #96]	; (ce54 <msg_finalize+0xa0>)
    cdf4:	781a      	ldrb	r2, [r3, #0]
    cdf6:	b17a      	cbz	r2, ce18 <msg_finalize+0x64>
	__asm__ volatile(
    cdf8:	f04f 0320 	mov.w	r3, #32
    cdfc:	f3ef 8411 	mrs	r4, BASEPRI
    ce00:	f383 8811 	msr	BASEPRI, r3
    ce04:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    ce08:	2000      	movs	r0, #0
    ce0a:	f7ff ff2d 	bl	cc68 <z_impl_log_process>
	__asm__ volatile(
    ce0e:	f384 8811 	msr	BASEPRI, r4
    ce12:	f3bf 8f6f 	isb	sy
}
    ce16:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    ce18:	490f      	ldr	r1, [pc, #60]	; (ce58 <msg_finalize+0xa4>)
    ce1a:	6823      	ldr	r3, [r4, #0]
    ce1c:	6809      	ldr	r1, [r1, #0]
    ce1e:	2900      	cmp	r1, #0
    ce20:	d0f9      	beq.n	ce16 <msg_finalize+0x62>
    ce22:	2b01      	cmp	r3, #1
    ce24:	d106      	bne.n	ce34 <msg_finalize+0x80>
}
    ce26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_timer_start(timer, duration, period);
    ce2a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ce2e:	480b      	ldr	r0, [pc, #44]	; (ce5c <msg_finalize+0xa8>)
    ce30:	f00d bc00 	b.w	1a634 <z_impl_k_timer_start>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    ce34:	2b0a      	cmp	r3, #10
    ce36:	d1ee      	bne.n	ce16 <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
    ce38:	4808      	ldr	r0, [pc, #32]	; (ce5c <msg_finalize+0xa8>)
    ce3a:	f010 fae9 	bl	1d410 <z_impl_k_timer_stop>
}
    ce3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_sem_give(sem);
    ce42:	4807      	ldr	r0, [pc, #28]	; (ce60 <msg_finalize+0xac>)
    ce44:	f00d b96e 	b.w	1a124 <z_impl_k_sem_give>
    ce48:	200284f4 	.word	0x200284f4
    ce4c:	200200c4 	.word	0x200200c4
    ce50:	200200d0 	.word	0x200200d0
    ce54:	20022328 	.word	0x20022328
    ce58:	200201d0 	.word	0x200201d0
    ce5c:	200200d8 	.word	0x200200d8
    ce60:	2002864c 	.word	0x2002864c

0000ce64 <log_process_thread_func>:
{
    ce64:	b508      	push	{r3, lr}
	log_init();
    ce66:	f7ff fe99 	bl	cb9c <log_init>
	return z_impl_k_current_get();
    ce6a:	f00d f955 	bl	1a118 <z_impl_k_current_get>
	proc_tid = process_tid;
    ce6e:	4b0b      	ldr	r3, [pc, #44]	; (ce9c <log_process_thread_func+0x38>)
    ce70:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    ce72:	b130      	cbz	r0, ce82 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    ce74:	4b0a      	ldr	r3, [pc, #40]	; (cea0 <log_process_thread_func+0x3c>)
	    process_tid &&
    ce76:	681b      	ldr	r3, [r3, #0]
    ce78:	2b09      	cmp	r3, #9
    ce7a:	dd02      	ble.n	ce82 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    ce7c:	4809      	ldr	r0, [pc, #36]	; (cea4 <log_process_thread_func+0x40>)
    ce7e:	f00d f951 	bl	1a124 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    ce82:	4c08      	ldr	r4, [pc, #32]	; (cea4 <log_process_thread_func+0x40>)
    ce84:	2000      	movs	r0, #0
    ce86:	f7ff feef 	bl	cc68 <z_impl_log_process>
		if (log_process(false) == false) {
    ce8a:	2800      	cmp	r0, #0
    ce8c:	d1fa      	bne.n	ce84 <log_process_thread_func+0x20>
    ce8e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ce92:	4620      	mov	r0, r4
    ce94:	f00d f972 	bl	1a17c <z_impl_k_sem_take>
    ce98:	e7f4      	b.n	ce84 <log_process_thread_func+0x20>
    ce9a:	bf00      	nop
    ce9c:	200201d0 	.word	0x200201d0
    cea0:	200200c4 	.word	0x200200c4
    cea4:	2002864c 	.word	0x2002864c

0000cea8 <z_impl_log_panic>:
{
    cea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    ceaa:	4f0e      	ldr	r7, [pc, #56]	; (cee4 <z_impl_log_panic+0x3c>)
    ceac:	783d      	ldrb	r5, [r7, #0]
    ceae:	b975      	cbnz	r5, cece <z_impl_log_panic+0x26>
	log_init();
    ceb0:	f7ff fe74 	bl	cb9c <log_init>
	return __log_backends_end - __log_backends_start;
    ceb4:	4c0c      	ldr	r4, [pc, #48]	; (cee8 <z_impl_log_panic+0x40>)
    ceb6:	4e0d      	ldr	r6, [pc, #52]	; (ceec <z_impl_log_panic+0x44>)
    ceb8:	1b36      	subs	r6, r6, r4
    ceba:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    cebc:	42b5      	cmp	r5, r6
    cebe:	db07      	blt.n	ced0 <z_impl_log_panic+0x28>
    cec0:	2000      	movs	r0, #0
    cec2:	f7ff fed1 	bl	cc68 <z_impl_log_process>
		while (log_process(false) == true) {
    cec6:	2800      	cmp	r0, #0
    cec8:	d1fa      	bne.n	cec0 <z_impl_log_panic+0x18>
	panic_mode = true;
    ceca:	2301      	movs	r3, #1
    cecc:	703b      	strb	r3, [r7, #0]
}
    cece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    ced0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    ced2:	795b      	ldrb	r3, [r3, #5]
    ced4:	b11b      	cbz	r3, cede <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    ced6:	6823      	ldr	r3, [r4, #0]
    ced8:	4620      	mov	r0, r4
    ceda:	691b      	ldr	r3, [r3, #16]
    cedc:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    cede:	3501      	adds	r5, #1
    cee0:	3410      	adds	r4, #16
    cee2:	e7eb      	b.n	cebc <z_impl_log_panic+0x14>
    cee4:	20022328 	.word	0x20022328
    cee8:	0001d9ec 	.word	0x0001d9ec
    ceec:	0001d9fc 	.word	0x0001d9fc

0000cef0 <log_free>:
{
    cef0:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    cef2:	3804      	subs	r0, #4
    cef4:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    cef6:	e8d0 3fef 	ldaex	r3, [r0]
    cefa:	1e5a      	subs	r2, r3, #1
    cefc:	e8c0 2fe1 	stlex	r1, r2, [r0]
    cf00:	2900      	cmp	r1, #0
    cf02:	d1f8      	bne.n	cef6 <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
    cf04:	2b01      	cmp	r3, #1
    cf06:	d103      	bne.n	cf10 <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    cf08:	a901      	add	r1, sp, #4
    cf0a:	4803      	ldr	r0, [pc, #12]	; (cf18 <log_free+0x28>)
    cf0c:	f00c fb60 	bl	195d0 <k_mem_slab_free>
}
    cf10:	b003      	add	sp, #12
    cf12:	f85d fb04 	ldr.w	pc, [sp], #4
    cf16:	bf00      	nop
    cf18:	20020104 	.word	0x20020104

0000cf1c <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    cf1c:	2320      	movs	r3, #32
    cf1e:	4902      	ldr	r1, [pc, #8]	; (cf28 <log_msg_pool_init+0xc>)
    cf20:	461a      	mov	r2, r3
    cf22:	4802      	ldr	r0, [pc, #8]	; (cf2c <log_msg_pool_init+0x10>)
    cf24:	f00f bfe3 	b.w	1ceee <k_mem_slab_init>
    cf28:	20026bb0 	.word	0x20026bb0
    cf2c:	200201d4 	.word	0x200201d4

0000cf30 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
    cf30:	2300      	movs	r3, #0
{
    cf32:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    cf34:	4d09      	ldr	r5, [pc, #36]	; (cf5c <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    cf36:	9301      	str	r3, [sp, #4]
    cf38:	2001      	movs	r0, #1
    cf3a:	f7ff fe95 	bl	cc68 <z_impl_log_process>
    cf3e:	4604      	mov	r4, r0
			log_dropped();
    cf40:	f7ff fdf8 	bl	cb34 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    cf44:	2200      	movs	r2, #0
    cf46:	a901      	add	r1, sp, #4
    cf48:	4628      	mov	r0, r5
    cf4a:	f00c fb15 	bl	19578 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    cf4e:	b108      	cbz	r0, cf54 <log_msg_no_space_handle+0x24>
    cf50:	2c00      	cmp	r4, #0
    cf52:	d1f1      	bne.n	cf38 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    cf54:	9801      	ldr	r0, [sp, #4]
    cf56:	b003      	add	sp, #12
    cf58:	bd30      	pop	{r4, r5, pc}
    cf5a:	bf00      	nop
    cf5c:	200201d4 	.word	0x200201d4

0000cf60 <log_msg_chunk_alloc>:
{
    cf60:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    cf62:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    cf64:	a901      	add	r1, sp, #4
    cf66:	4806      	ldr	r0, [pc, #24]	; (cf80 <log_msg_chunk_alloc+0x20>)
	union log_msg_chunk *msg = NULL;
    cf68:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    cf6a:	f00c fb05 	bl	19578 <k_mem_slab_alloc>
	if (err != 0) {
    cf6e:	b110      	cbz	r0, cf76 <log_msg_chunk_alloc+0x16>
		msg = log_msg_no_space_handle();
    cf70:	f7ff ffde 	bl	cf30 <log_msg_no_space_handle>
    cf74:	9001      	str	r0, [sp, #4]
}
    cf76:	9801      	ldr	r0, [sp, #4]
    cf78:	b003      	add	sp, #12
    cf7a:	f85d fb04 	ldr.w	pc, [sp], #4
    cf7e:	bf00      	nop
    cf80:	200201d4 	.word	0x200201d4

0000cf84 <msg_free>:
{
    cf84:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf86:	7a04      	ldrb	r4, [r0, #8]
	}
}

u32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    cf88:	7a46      	ldrb	r6, [r0, #9]
{
    cf8a:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
    cf8c:	f014 0401 	ands.w	r4, r4, #1
{
    cf90:	9001      	str	r0, [sp, #4]
	return msg->hdr.params.std.nargs;
    cf92:	ea4f 1616 	mov.w	r6, r6, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    cf96:	d00e      	beq.n	cfb6 <msg_free+0x32>
	if (msg->hdr.params.generic.ext == 1) {
    cf98:	9b01      	ldr	r3, [sp, #4]
    cf9a:	7a1a      	ldrb	r2, [r3, #8]
    cf9c:	0792      	lsls	r2, r2, #30
    cf9e:	d504      	bpl.n	cfaa <msg_free+0x26>
		cont_free(msg->payload.ext.next);
    cfa0:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    cfa2:	4c18      	ldr	r4, [pc, #96]	; (d004 <msg_free+0x80>)
    cfa4:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    cfa6:	9b03      	ldr	r3, [sp, #12]
    cfa8:	bb2b      	cbnz	r3, cff6 <msg_free+0x72>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    cfaa:	a901      	add	r1, sp, #4
    cfac:	4815      	ldr	r0, [pc, #84]	; (d004 <msg_free+0x80>)
    cfae:	f00c fb0f 	bl	195d0 <k_mem_slab_free>
}
    cfb2:	b005      	add	sp, #20
    cfb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (log_msg_is_std(msg) && nargs) {
    cfb6:	2e00      	cmp	r6, #0
    cfb8:	d0ee      	beq.n	cf98 <msg_free+0x14>
		for (i = 0; i < nargs; i++) {
    cfba:	4625      	mov	r5, r4
    cfbc:	e017      	b.n	cfee <msg_free+0x6a>
			void *buf = (void *)log_msg_arg_get(msg, i);
    cfbe:	4629      	mov	r1, r5
    cfc0:	f00e f83e 	bl	1b040 <log_msg_arg_get>
    cfc4:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    cfc6:	f7ff fe41 	bl	cc4c <log_is_strdup>
    cfca:	b178      	cbz	r0, cfec <msg_free+0x68>
				if (smask == 0) {
    cfcc:	b93c      	cbnz	r4, cfde <msg_free+0x5a>
					smask = z_log_get_s_mask(
    cfce:	9b01      	ldr	r3, [sp, #4]
    cfd0:	4631      	mov	r1, r6
    cfd2:	6918      	ldr	r0, [r3, #16]
    cfd4:	f00d ff57 	bl	1ae86 <z_log_get_s_mask>
					if (smask == 0) {
    cfd8:	4604      	mov	r4, r0
    cfda:	2800      	cmp	r0, #0
    cfdc:	d0dc      	beq.n	cf98 <msg_free+0x14>
				if (smask & BIT(i)) {
    cfde:	fa24 f305 	lsr.w	r3, r4, r5
    cfe2:	07db      	lsls	r3, r3, #31
    cfe4:	d502      	bpl.n	cfec <msg_free+0x68>
					log_free(buf);
    cfe6:	4638      	mov	r0, r7
    cfe8:	f7ff ff82 	bl	cef0 <log_free>
		for (i = 0; i < nargs; i++) {
    cfec:	3501      	adds	r5, #1
    cfee:	42ae      	cmp	r6, r5
    cff0:	9801      	ldr	r0, [sp, #4]
    cff2:	d8e4      	bhi.n	cfbe <msg_free+0x3a>
    cff4:	e7d0      	b.n	cf98 <msg_free+0x14>
		next = cont->next;
    cff6:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    cff8:	a903      	add	r1, sp, #12
    cffa:	4620      	mov	r0, r4
    cffc:	f00c fae8 	bl	195d0 <k_mem_slab_free>
		cont = next;
    d000:	9503      	str	r5, [sp, #12]
    d002:	e7d0      	b.n	cfa6 <msg_free+0x22>
    d004:	200201d4 	.word	0x200201d4

0000d008 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    d008:	b40e      	push	{r1, r2, r3}
    d00a:	b503      	push	{r0, r1, lr}
    d00c:	ab03      	add	r3, sp, #12
    d00e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    d012:	4601      	mov	r1, r0
    d014:	4804      	ldr	r0, [pc, #16]	; (d028 <print_formatted+0x20>)
	va_start(args, fmt);
    d016:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    d018:	f00d fd6d 	bl	1aaf6 <z_vprintk>
#endif
	va_end(args);

	return length;
}
    d01c:	2000      	movs	r0, #0
    d01e:	b002      	add	sp, #8
    d020:	f85d eb04 	ldr.w	lr, [sp], #4
    d024:	b003      	add	sp, #12
    d026:	4770      	bx	lr
    d028:	0001b441 	.word	0x0001b441

0000d02c <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
    d02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    d030:	f011 0402 	ands.w	r4, r1, #2
{
    d034:	b085      	sub	sp, #20
    d036:	4606      	mov	r6, r0
    d038:	4690      	mov	r8, r2
    d03a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    d03e:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    d042:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    d046:	d007      	beq.n	d058 <prefix_print+0x2c>
	if (!format) {
    d048:	f011 0f44 	tst.w	r1, #68	; 0x44
    d04c:	d137      	bne.n	d0be <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    d04e:	461a      	mov	r2, r3
    d050:	4932      	ldr	r1, [pc, #200]	; (d11c <prefix_print+0xf0>)
    d052:	f7ff ffd9 	bl	d008 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    d056:	4604      	mov	r4, r0
	if (color) {
    d058:	f1b9 0f00 	cmp.w	r9, #0
    d05c:	d00a      	beq.n	d074 <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
    d05e:	4b30      	ldr	r3, [pc, #192]	; (d120 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
    d060:	4930      	ldr	r1, [pc, #192]	; (d124 <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
    d062:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    d066:	4b30      	ldr	r3, [pc, #192]	; (d128 <prefix_print+0xfc>)
    d068:	4630      	mov	r0, r6
    d06a:	2a00      	cmp	r2, #0
    d06c:	bf08      	it	eq
    d06e:	461a      	moveq	r2, r3
    d070:	f7ff ffca 	bl	d008 <print_formatted>
	if (level_on) {
    d074:	b13d      	cbz	r5, d086 <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    d076:	4b2d      	ldr	r3, [pc, #180]	; (d12c <prefix_print+0x100>)
    d078:	492d      	ldr	r1, [pc, #180]	; (d130 <prefix_print+0x104>)
    d07a:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    d07e:	4630      	mov	r0, r6
    d080:	f7ff ffc2 	bl	d008 <print_formatted>
    d084:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    d086:	f1b8 0f00 	cmp.w	r8, #0
    d08a:	d044      	beq.n	d116 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    d08c:	2301      	movs	r3, #1
    d08e:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    d092:	4b28      	ldr	r3, [pc, #160]	; (d134 <prefix_print+0x108>)
    d094:	f017 0f10 	tst.w	r7, #16
    d098:	4f27      	ldr	r7, [pc, #156]	; (d138 <prefix_print+0x10c>)
    d09a:	bf18      	it	ne
    d09c:	461f      	movne	r7, r3
    d09e:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    d0a2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    d0a6:	f7ff fd51 	bl	cb4c <log_source_name_get>
    d0aa:	4639      	mov	r1, r7
    d0ac:	4602      	mov	r2, r0
    d0ae:	4630      	mov	r0, r6
    d0b0:	f7ff ffaa 	bl	d008 <print_formatted>
    d0b4:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    d0b6:	4420      	add	r0, r4
    d0b8:	b005      	add	sp, #20
    d0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    d0be:	4a1f      	ldr	r2, [pc, #124]	; (d13c <prefix_print+0x110>)
    d0c0:	6811      	ldr	r1, [r2, #0]
    d0c2:	b331      	cbz	r1, d112 <prefix_print+0xe6>
		timestamp /= timestamp_div;
    d0c4:	4a1e      	ldr	r2, [pc, #120]	; (d140 <prefix_print+0x114>)
    d0c6:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    d0ca:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
    d0cc:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
    d0d0:	fbb3 f3f4 	udiv	r3, r3, r4
		seconds = timestamp / freq;
    d0d4:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    d0d8:	fbb4 f2fe 	udiv	r2, r4, lr
    d0dc:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    d0e0:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    d0e4:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    d0e8:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
    d0ec:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    d0f0:	fb01 441b 	mls	r4, r1, fp, r4
    d0f4:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    d0f8:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    d0fc:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    d100:	e9cd b101 	strd	fp, r1, [sp, #4]
    d104:	fb0a e113 	mls	r1, sl, r3, lr
    d108:	9100      	str	r1, [sp, #0]
    d10a:	490e      	ldr	r1, [pc, #56]	; (d144 <prefix_print+0x118>)
    d10c:	f7ff ff7c 	bl	d008 <print_formatted>
    d110:	e7a1      	b.n	d056 <prefix_print+0x2a>
		length = 0;
    d112:	4608      	mov	r0, r1
    d114:	e79f      	b.n	d056 <prefix_print+0x2a>
	total += print_formatted(log_output,
    d116:	4f08      	ldr	r7, [pc, #32]	; (d138 <prefix_print+0x10c>)
    d118:	e7c1      	b.n	d09e <prefix_print+0x72>
    d11a:	bf00      	nop
    d11c:	0001e2dc 	.word	0x0001e2dc
    d120:	0001da14 	.word	0x0001da14
    d124:	0001e1e8 	.word	0x0001e1e8
    d128:	0001e2ce 	.word	0x0001e2ce
    d12c:	0001da28 	.word	0x0001da28
    d130:	0001e301 	.word	0x0001e301
    d134:	0001e2d8 	.word	0x0001e2d8
    d138:	0001e2d3 	.word	0x0001e2d3
    d13c:	200201f0 	.word	0x200201f0
    d140:	200201f4 	.word	0x200201f4
    d144:	0001e2e5 	.word	0x0001e2e5

0000d148 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
    d148:	b538      	push	{r3, r4, r5, lr}
    d14a:	460c      	mov	r4, r1
	if (color) {
    d14c:	07e1      	lsls	r1, r4, #31
{
    d14e:	4605      	mov	r5, r0
	if (color) {
    d150:	d503      	bpl.n	d15a <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
    d152:	4a08      	ldr	r2, [pc, #32]	; (d174 <postfix_print+0x2c>)
    d154:	4908      	ldr	r1, [pc, #32]	; (d178 <postfix_print+0x30>)
    d156:	f7ff ff57 	bl	d008 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    d15a:	06e2      	lsls	r2, r4, #27
    d15c:	d408      	bmi.n	d170 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    d15e:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    d160:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    d162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
    d166:	bf4c      	ite	mi
    d168:	4904      	ldrmi	r1, [pc, #16]	; (d17c <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    d16a:	4905      	ldrpl	r1, [pc, #20]	; (d180 <postfix_print+0x38>)
    d16c:	f7ff bf4c 	b.w	d008 <print_formatted>
}
    d170:	bd38      	pop	{r3, r4, r5, pc}
    d172:	bf00      	nop
    d174:	0001e2ce 	.word	0x0001e2ce
    d178:	0001e1e8 	.word	0x0001e1e8
    d17c:	0001eb73 	.word	0x0001eb73
    d180:	0001eb72 	.word	0x0001eb72

0000d184 <hexdump_line_print>:
{
    d184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d188:	4698      	mov	r8, r3
    d18a:	9b08      	ldr	r3, [sp, #32]
    d18c:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    d18e:	06dd      	lsls	r5, r3, #27
{
    d190:	460e      	mov	r6, r1
    d192:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    d194:	d405      	bmi.n	d1a2 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    d196:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    d198:	bf4c      	ite	mi
    d19a:	4929      	ldrmi	r1, [pc, #164]	; (d240 <hexdump_line_print+0xbc>)
		print_formatted(ctx, "\r\n");
    d19c:	4929      	ldrpl	r1, [pc, #164]	; (d244 <hexdump_line_print+0xc0>)
    d19e:	f7ff ff33 	bl	d008 <print_formatted>
{
    d1a2:	2500      	movs	r5, #0
		print_formatted(log_output, " ");
    d1a4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d24c <hexdump_line_print+0xc8>
	for (int i = 0; i < prefix_offset; i++) {
    d1a8:	4545      	cmp	r5, r8
    d1aa:	db2a      	blt.n	d202 <hexdump_line_print+0x7e>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    d1ac:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
    d1ae:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d250 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%02x ", data[i]);
    d1b2:	f8df 90a0 	ldr.w	r9, [pc, #160]	; d254 <hexdump_line_print+0xd0>
			print_formatted(log_output, " ");
    d1b6:	f8df a094 	ldr.w	sl, [pc, #148]	; d24c <hexdump_line_print+0xc8>
		if (i < length) {
    d1ba:	42bd      	cmp	r5, r7
    d1bc:	d22e      	bcs.n	d21c <hexdump_line_print+0x98>
			print_formatted(log_output, "%02x ", data[i]);
    d1be:	5d72      	ldrb	r2, [r6, r5]
    d1c0:	4649      	mov	r1, r9
    d1c2:	4620      	mov	r0, r4
    d1c4:	f7ff ff20 	bl	d008 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    d1c8:	3501      	adds	r5, #1
    d1ca:	2d10      	cmp	r5, #16
    d1cc:	d11f      	bne.n	d20e <hexdump_line_print+0x8a>
	print_formatted(log_output, "|");
    d1ce:	491e      	ldr	r1, [pc, #120]	; (d248 <hexdump_line_print+0xc4>)
    d1d0:	4620      	mov	r0, r4
    d1d2:	f7ff ff19 	bl	d008 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    d1d6:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
    d1d8:	f8df 8070 	ldr.w	r8, [pc, #112]	; d24c <hexdump_line_print+0xc8>
			print_formatted(log_output, "%c",
    d1dc:	f8df 9078 	ldr.w	r9, [pc, #120]	; d258 <hexdump_line_print+0xd4>
		if (i < length) {
    d1e0:	42af      	cmp	r7, r5
    d1e2:	d927      	bls.n	d234 <hexdump_line_print+0xb0>
			      isprint((int)c) ? c : '.');
    d1e4:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    d1e6:	4649      	mov	r1, r9
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    d1e8:	f1a2 0320 	sub.w	r3, r2, #32
    d1ec:	2b5f      	cmp	r3, #95	; 0x5f
    d1ee:	bf28      	it	cs
    d1f0:	222e      	movcs	r2, #46	; 0x2e
    d1f2:	4620      	mov	r0, r4
    d1f4:	f7ff ff08 	bl	d008 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    d1f8:	3501      	adds	r5, #1
    d1fa:	2d10      	cmp	r5, #16
    d1fc:	d113      	bne.n	d226 <hexdump_line_print+0xa2>
}
    d1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    d202:	4649      	mov	r1, r9
    d204:	4620      	mov	r0, r4
    d206:	f7ff feff 	bl	d008 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    d20a:	3501      	adds	r5, #1
    d20c:	e7cc      	b.n	d1a8 <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
    d20e:	076a      	lsls	r2, r5, #29
    d210:	d1d3      	bne.n	d1ba <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
    d212:	4651      	mov	r1, sl
    d214:	4620      	mov	r0, r4
    d216:	f7ff fef7 	bl	d008 <print_formatted>
    d21a:	e7ce      	b.n	d1ba <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
    d21c:	4641      	mov	r1, r8
    d21e:	4620      	mov	r0, r4
    d220:	f7ff fef2 	bl	d008 <print_formatted>
    d224:	e7d0      	b.n	d1c8 <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
    d226:	076b      	lsls	r3, r5, #29
    d228:	d1da      	bne.n	d1e0 <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
    d22a:	4641      	mov	r1, r8
    d22c:	4620      	mov	r0, r4
    d22e:	f7ff feeb 	bl	d008 <print_formatted>
    d232:	e7d5      	b.n	d1e0 <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
    d234:	4641      	mov	r1, r8
    d236:	4620      	mov	r0, r4
    d238:	f7ff fee6 	bl	d008 <print_formatted>
    d23c:	e7dc      	b.n	d1f8 <hexdump_line_print+0x74>
    d23e:	bf00      	nop
    d240:	0001eb73 	.word	0x0001eb73
    d244:	0001eb72 	.word	0x0001eb72
    d248:	0001e29f 	.word	0x0001e29f
    d24c:	0001e29d 	.word	0x0001e29d
    d250:	0001e29b 	.word	0x0001e29b
    d254:	0001e295 	.word	0x0001e295
    d258:	0001e2a1 	.word	0x0001e2a1

0000d25c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    d25c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    d260:	7a8b      	ldrb	r3, [r1, #10]
    d262:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    d264:	f013 0407 	ands.w	r4, r3, #7
{
    d268:	b08a      	sub	sp, #40	; 0x28
    d26a:	4605      	mov	r5, r0
    d26c:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    d26e:	7a0a      	ldrb	r2, [r1, #8]
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    d270:	d01c      	beq.n	d2ac <log_output_msg_process+0x50>
    d272:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
    d274:	8949      	ldrh	r1, [r1, #10]
    d276:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    d27a:	0989      	lsrs	r1, r1, #6
    d27c:	9102      	str	r1, [sp, #8]
    d27e:	e9cd 4300 	strd	r4, r3, [sp]
    d282:	f002 0201 	and.w	r2, r2, #1
    d286:	68f3      	ldr	r3, [r6, #12]
    d288:	4639      	mov	r1, r7
    d28a:	f7ff fecf 	bl	d02c <prefix_print>
    d28e:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    d290:	7a33      	ldrb	r3, [r6, #8]
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    d292:	07da      	lsls	r2, r3, #31
    d294:	d40c      	bmi.n	d2b0 <log_output_msg_process+0x54>
		std_print(msg, log_output);
    d296:	4629      	mov	r1, r5
    d298:	4630      	mov	r0, r6
    d29a:	f00d ff67 	bl	1b16c <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    d29e:	b34c      	cbz	r4, d2f4 <log_output_msg_process+0x98>
		postfix_print(log_output, flags, level);
    d2a0:	4622      	mov	r2, r4
    d2a2:	4639      	mov	r1, r7
    d2a4:	4628      	mov	r0, r5
    d2a6:	f7ff ff4f 	bl	d148 <postfix_print>
    d2aa:	e023      	b.n	d2f4 <log_output_msg_process+0x98>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    d2ac:	46a1      	mov	r9, r4
    d2ae:	e7ef      	b.n	d290 <log_output_msg_process+0x34>
	} else if (raw_string) {
    d2b0:	bb34      	cbnz	r4, d300 <log_output_msg_process+0xa4>
	size_t offset = 0;
    d2b2:	4627      	mov	r7, r4
		length = log_output->size;
    d2b4:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    d2b6:	aa06      	add	r2, sp, #24
		length = log_output->size;
    d2b8:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    d2ba:	68a9      	ldr	r1, [r5, #8]
    d2bc:	463b      	mov	r3, r7
    d2be:	4630      	mov	r0, r6
    d2c0:	f00d ff40 	bl	1b144 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    d2c4:	9a06      	ldr	r2, [sp, #24]
    d2c6:	686b      	ldr	r3, [r5, #4]
    d2c8:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    d2ca:	b13a      	cbz	r2, d2dc <log_output_msg_process+0x80>
			eol = (log_output->buf[length - 1] == '\n');
    d2cc:	68ab      	ldr	r3, [r5, #8]
    d2ce:	4413      	add	r3, r2
    d2d0:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    d2d4:	f1a4 030a 	sub.w	r3, r4, #10
    d2d8:	425c      	negs	r4, r3
    d2da:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    d2dc:	4628      	mov	r0, r5
    d2de:	f00e f8a2 	bl	1b426 <log_output_flush>
		offset += length;
    d2e2:	9b06      	ldr	r3, [sp, #24]
    d2e4:	441f      	add	r7, r3
	} while (length > 0);
    d2e6:	2b00      	cmp	r3, #0
    d2e8:	d1e4      	bne.n	d2b4 <log_output_msg_process+0x58>
	if (eol) {
    d2ea:	b11c      	cbz	r4, d2f4 <log_output_msg_process+0x98>
		print_formatted(log_output, "\r");
    d2ec:	4914      	ldr	r1, [pc, #80]	; (d340 <log_output_msg_process+0xe4>)
    d2ee:	4628      	mov	r0, r5
    d2f0:	f7ff fe8a 	bl	d008 <print_formatted>
	}

	log_output_flush(log_output);
    d2f4:	4628      	mov	r0, r5
    d2f6:	f00e f896 	bl	1b426 <log_output_flush>
}
    d2fa:	b00a      	add	sp, #40	; 0x28
    d2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    d300:	4630      	mov	r0, r6
    d302:	f00d fec9 	bl	1b098 <log_msg_str_get>
    d306:	490f      	ldr	r1, [pc, #60]	; (d344 <log_output_msg_process+0xe8>)
    d308:	4602      	mov	r2, r0
    d30a:	4628      	mov	r0, r5
    d30c:	f7ff fe7c 	bl	d008 <print_formatted>
	u32_t offset = 0U;
    d310:	f04f 0800 	mov.w	r8, #0
		length = sizeof(buf);
    d314:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    d318:	aa05      	add	r2, sp, #20
    d31a:	4643      	mov	r3, r8
    d31c:	a906      	add	r1, sp, #24
    d31e:	4630      	mov	r0, r6
		length = sizeof(buf);
    d320:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    d324:	f00d ff0e 	bl	1b144 <log_msg_hexdump_data_get>
		if (length) {
    d328:	9a05      	ldr	r2, [sp, #20]
    d32a:	2a00      	cmp	r2, #0
    d32c:	d0b8      	beq.n	d2a0 <log_output_msg_process+0x44>
			hexdump_line_print(log_output, buf, length,
    d32e:	464b      	mov	r3, r9
    d330:	9700      	str	r7, [sp, #0]
    d332:	a906      	add	r1, sp, #24
    d334:	4628      	mov	r0, r5
    d336:	f7ff ff25 	bl	d184 <hexdump_line_print>
			offset += length;
    d33a:	9b05      	ldr	r3, [sp, #20]
    d33c:	4498      	add	r8, r3
    d33e:	e7eb      	b.n	d318 <log_output_msg_process+0xbc>
    d340:	0001e2a4 	.word	0x0001e2a4
    d344:	0001e1e8 	.word	0x0001e1e8

0000d348 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
    d348:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    d34a:	e9d0 4300 	ldrd	r4, r3, [r0]
    d34e:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    d350:	f242 730f 	movw	r3, #9999	; 0x270f
    d354:	428b      	cmp	r3, r1
    d356:	bf28      	it	cs
    d358:	460b      	movcs	r3, r1
    d35a:	4a0d      	ldr	r2, [pc, #52]	; (d390 <log_output_dropped_process+0x48>)
    d35c:	2105      	movs	r1, #5
    d35e:	4668      	mov	r0, sp
    d360:	f001 fdfa 	bl	ef58 <snprintf>
    d364:	4606      	mov	r6, r0

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    d366:	462b      	mov	r3, r5
    d368:	4620      	mov	r0, r4
    d36a:	220b      	movs	r2, #11
    d36c:	4909      	ldr	r1, [pc, #36]	; (d394 <log_output_dropped_process+0x4c>)
    d36e:	f00d fef0 	bl	1b152 <buffer_write>
	buffer_write(outf, buf, len, dev);
    d372:	462b      	mov	r3, r5
    d374:	4632      	mov	r2, r6
    d376:	4669      	mov	r1, sp
    d378:	4620      	mov	r0, r4
    d37a:	f00d feea 	bl	1b152 <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
    d37e:	462b      	mov	r3, r5
    d380:	221b      	movs	r2, #27
    d382:	4905      	ldr	r1, [pc, #20]	; (d398 <log_output_dropped_process+0x50>)
    d384:	4620      	mov	r0, r4
    d386:	f00d fee4 	bl	1b152 <buffer_write>
}
    d38a:	b002      	add	sp, #8
    d38c:	bd70      	pop	{r4, r5, r6, pc}
    d38e:	bf00      	nop
    d390:	0001eb47 	.word	0x0001eb47
    d394:	0001e2c2 	.word	0x0001e2c2
    d398:	0001e2a6 	.word	0x0001e2a6

0000d39c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    d39c:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    d39e:	2100      	movs	r1, #0
	timestamp_div = 1U;
    d3a0:	4a07      	ldr	r2, [pc, #28]	; (d3c0 <log_output_timestamp_freq_set+0x24>)
{
    d3a2:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    d3a4:	4c07      	ldr	r4, [pc, #28]	; (d3c4 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    d3a6:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    d3a8:	42a0      	cmp	r0, r4
    d3aa:	d804      	bhi.n	d3b6 <log_output_timestamp_freq_set+0x1a>
    d3ac:	b101      	cbz	r1, d3b0 <log_output_timestamp_freq_set+0x14>
    d3ae:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    d3b0:	4b05      	ldr	r3, [pc, #20]	; (d3c8 <log_output_timestamp_freq_set+0x2c>)
    d3b2:	6018      	str	r0, [r3, #0]
}
    d3b4:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    d3b6:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    d3b8:	005b      	lsls	r3, r3, #1
    d3ba:	2101      	movs	r1, #1
    d3bc:	e7f4      	b.n	d3a8 <log_output_timestamp_freq_set+0xc>
    d3be:	bf00      	nop
    d3c0:	200201f4 	.word	0x200201f4
    d3c4:	000f4240 	.word	0x000f4240
    d3c8:	200201f0 	.word	0x200201f0

0000d3cc <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    d3cc:	4801      	ldr	r0, [pc, #4]	; (d3d4 <panic+0x8>)
    d3ce:	f00e b82a 	b.w	1b426 <log_output_flush>
    d3d2:	bf00      	nop
    d3d4:	0001da54 	.word	0x0001da54

0000d3d8 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, u32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    d3d8:	4801      	ldr	r0, [pc, #4]	; (d3e0 <dropped+0x8>)
    d3da:	f7ff bfb5 	b.w	d348 <log_output_dropped_process>
    d3de:	bf00      	nop
    d3e0:	0001da54 	.word	0x0001da54

0000d3e4 <log_backend_uart_init>:

	log_backend_std_put(&log_output, flag, msg);
}

static void log_backend_uart_init(void)
{
    d3e4:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    d3e6:	4803      	ldr	r0, [pc, #12]	; (d3f4 <log_backend_uart_init+0x10>)
    d3e8:	f00b ff2c 	bl	19244 <z_impl_device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    d3ec:	4b02      	ldr	r3, [pc, #8]	; (d3f8 <log_backend_uart_init+0x14>)
    d3ee:	6058      	str	r0, [r3, #4]

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);

	log_output_ctx_set(&log_output, dev);
}
    d3f0:	bd08      	pop	{r3, pc}
    d3f2:	bf00      	nop
    d3f4:	0001e327 	.word	0x0001e327
    d3f8:	20020200 	.word	0x20020200

0000d3fc <put>:
{
    d3fc:	b510      	push	{r4, lr}
    d3fe:	460c      	mov	r4, r1
	log_msg_get(msg);
    d400:	4608      	mov	r0, r1
    d402:	f00d fe11 	bl	1b028 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    d406:	4621      	mov	r1, r4
    d408:	4804      	ldr	r0, [pc, #16]	; (d41c <put+0x20>)
    d40a:	220f      	movs	r2, #15
    d40c:	f7ff ff26 	bl	d25c <log_output_msg_process>
	log_msg_put(msg);
    d410:	4620      	mov	r0, r4
}
    d412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d416:	f00d be30 	b.w	1b07a <log_msg_put>
    d41a:	bf00      	nop
    d41c:	0001da54 	.word	0x0001da54

0000d420 <net_coap_init>:
 * use and should therefore not be exposed to applications.
 *
 * @return N/A
 */
void net_coap_init(void)
{
    d420:	b508      	push	{r3, lr}
	/* Initialize message_id to a random number */
	message_id = (u16_t)sys_rand32_get();
    d422:	f001 fecd 	bl	f1c0 <sys_rand32_get>
    d426:	4b01      	ldr	r3, [pc, #4]	; (d42c <net_coap_init+0xc>)
    d428:	8018      	strh	r0, [r3, #0]
}
    d42a:	bd08      	pop	{r3, pc}
    d42c:	20021e1a 	.word	0x20021e1a

0000d430 <coap_next_id>:

u16_t coap_next_id(void)
{
	return message_id++;
    d430:	4b02      	ldr	r3, [pc, #8]	; (d43c <coap_next_id+0xc>)
    d432:	8818      	ldrh	r0, [r3, #0]
    d434:	1c42      	adds	r2, r0, #1
    d436:	801a      	strh	r2, [r3, #0]
}
    d438:	4770      	bx	lr
    d43a:	bf00      	nop
    d43c:	20021e1a 	.word	0x20021e1a

0000d440 <socket_offload_register>:
void socket_offload_register(const struct socket_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(socket_ops == NULL);

	socket_ops = ops;
    d440:	4b01      	ldr	r3, [pc, #4]	; (d448 <socket_offload_register+0x8>)
    d442:	6018      	str	r0, [r3, #0]
}
    d444:	4770      	bx	lr
    d446:	bf00      	nop
    d448:	2002020c 	.word	0x2002020c

0000d44c <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    d44c:	280a      	cmp	r0, #10
{
    d44e:	b538      	push	{r3, r4, r5, lr}
    d450:	4604      	mov	r4, r0
    d452:	4d07      	ldr	r5, [pc, #28]	; (d470 <console_out+0x24>)
	if ('\n' == c) {
    d454:	d104      	bne.n	d460 <console_out+0x14>
    d456:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    d458:	6843      	ldr	r3, [r0, #4]
    d45a:	210d      	movs	r1, #13
    d45c:	685b      	ldr	r3, [r3, #4]
    d45e:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    d460:	6828      	ldr	r0, [r5, #0]
    d462:	6843      	ldr	r3, [r0, #4]
    d464:	b2e1      	uxtb	r1, r4
    d466:	685b      	ldr	r3, [r3, #4]
    d468:	4798      	blx	r3

	return c;
}
    d46a:	4620      	mov	r0, r4
    d46c:	bd38      	pop	{r3, r4, r5, pc}
    d46e:	bf00      	nop
    d470:	20020210 	.word	0x20020210

0000d474 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    d474:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    d476:	4c04      	ldr	r4, [pc, #16]	; (d488 <uart_console_hook_install+0x14>)
    d478:	4620      	mov	r0, r4
    d47a:	f001 fd67 	bl	ef4c <__stdout_hook_install>
	__printk_hook_install(console_out);
    d47e:	4620      	mov	r0, r4
}
    d480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    d484:	f7ff babc 	b.w	ca00 <__printk_hook_install>
    d488:	0000d44d 	.word	0x0000d44d

0000d48c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    d48c:	b508      	push	{r3, lr}
    d48e:	4804      	ldr	r0, [pc, #16]	; (d4a0 <uart_console_init+0x14>)
    d490:	f00b fed8 	bl	19244 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    d494:	4b03      	ldr	r3, [pc, #12]	; (d4a4 <uart_console_init+0x18>)
    d496:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    d498:	f7ff ffec 	bl	d474 <uart_console_hook_install>

	return 0;
}
    d49c:	2000      	movs	r0, #0
    d49e:	bd08      	pop	{r3, pc}
    d4a0:	0001e327 	.word	0x0001e327
    d4a4:	20020210 	.word	0x20020210

0000d4a8 <clock_async_start>:

static const struct nrf_clock_control_sub_config *get_sub_config(
					struct device *dev,
					enum clock_control_nrf_type type)
{
	const struct nrf_clock_control_config *config =
    d4a8:	6803      	ldr	r3, [r0, #0]
}

static int clock_async_start(struct device *dev,
			     clock_control_subsys_t subsys,
			     struct clock_control_async_data *data)
{
    d4aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int key;
	u8_t ref;

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
	config = get_sub_config(dev, type);
	clk_data = get_sub_data(dev, type);
    d4ae:	f8d0 c008 	ldr.w	ip, [r0, #8]
{
    d4b2:	4605      	mov	r5, r0
	const struct nrf_clock_control_config *config =
    d4b4:	689f      	ldr	r7, [r3, #8]
	return &config->subsys[type];
    d4b6:	b2ce      	uxtb	r6, r1
			((data != NULL) && (data->cb != NULL)));

	/* if node is in the list it means that it is scheduled for
	 * the second time.
	 */
	if ((data != NULL)
    d4b8:	b14a      	cbz	r2, d4ce <clock_async_start+0x26>
	sys_snode_t *item = sys_slist_peek_head(list);
    d4ba:	230c      	movs	r3, #12
    d4bc:	4373      	muls	r3, r6
    d4be:	f85c 3003 	ldr.w	r3, [ip, r3]
		if (item == node) {
    d4c2:	429a      	cmp	r2, r3
    d4c4:	d05b      	beq.n	d57e <clock_async_start+0xd6>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    d4c6:	b113      	cbz	r3, d4ce <clock_async_start+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d4c8:	681b      	ldr	r3, [r3, #0]
	} while (item);
    d4ca:	2b00      	cmp	r3, #0
    d4cc:	d1f9      	bne.n	d4c2 <clock_async_start+0x1a>
	__asm__ volatile(
    d4ce:	f04f 0320 	mov.w	r3, #32
    d4d2:	f3ef 8011 	mrs	r0, BASEPRI
    d4d6:	f383 8811 	msr	BASEPRI, r3
    d4da:	f3bf 8f6f 	isb	sy
	    && is_in_list(&clk_data->list, &data->node)) {
		return -EBUSY;
	}

	key = irq_lock();
	ref = ++clk_data->ref;
    d4de:	210c      	movs	r1, #12
    d4e0:	4371      	muls	r1, r6
    d4e2:	eb0c 0301 	add.w	r3, ip, r1
    d4e6:	7a1c      	ldrb	r4, [r3, #8]
    d4e8:	3401      	adds	r4, #1
    d4ea:	b2e4      	uxtb	r4, r4
    d4ec:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
    d4ee:	f380 8811 	msr	BASEPRI, r0
    d4f2:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(clk_data->ref > 0);
	irq_unlock(key);

	if (data) {
    d4f6:	b322      	cbz	r2, d542 <clock_async_start+0x9a>
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    d4f8:	f04f 0e03 	mov.w	lr, #3
    d4fc:	4822      	ldr	r0, [pc, #136]	; (d588 <clock_async_start+0xe0>)
    d4fe:	f8c0 e308 	str.w	lr, [r0, #776]	; 0x308
		bool already_started;

		clock_irqs_disable();
		already_started = clk_data->started;
    d502:	7a58      	ldrb	r0, [r3, #9]
		if (!already_started) {
    d504:	b9a0      	cbnz	r0, d530 <clock_async_start+0x88>
	__asm__ volatile(
    d506:	f04f 0e20 	mov.w	lr, #32
    d50a:	f3ef 8811 	mrs	r8, BASEPRI
    d50e:	f38e 8811 	msr	BASEPRI, lr
    d512:	f3bf 8f6f 	isb	sy
	parent->next = child;
    d516:	6010      	str	r0, [r2, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    d518:	f8d3 e004 	ldr.w	lr, [r3, #4]
    d51c:	f1be 0f00 	cmp.w	lr, #0
    d520:	d120      	bne.n	d564 <clock_async_start+0xbc>
	list->tail = node;
    d522:	605a      	str	r2, [r3, #4]
	list->head = node;
    d524:	f84c 2001 	str.w	r2, [ip, r1]
	__asm__ volatile(
    d528:	f388 8811 	msr	BASEPRI, r8
    d52c:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    d530:	2103      	movs	r1, #3
    d532:	4b15      	ldr	r3, [pc, #84]	; (d588 <clock_async_start+0xe0>)
    d534:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
			list_append(&clk_data->list, &data->node);
		}
		clock_irqs_enable();

		if (already_started) {
    d538:	b118      	cbz	r0, d542 <clock_async_start+0x9a>
			data->cb(dev, data->user_data);
    d53a:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
    d53e:	4628      	mov	r0, r5
    d540:	4798      	blx	r3
		}
	}

	if (ref == 1) {
    d542:	2c01      	cmp	r4, #1
    d544:	d10c      	bne.n	d560 <clock_async_start+0xb8>
		bool do_start;

		do_start =  (config->start_handler) ?
    d546:	ea4f 1806 	mov.w	r8, r6, lsl #4
    d54a:	f857 3008 	ldr.w	r3, [r7, r8]
				config->start_handler(dev) : true;
    d54e:	b96b      	cbnz	r3, d56c <clock_async_start+0xc4>
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_clock_task_trigger(NRF_CLOCK_Type * p_reg, nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d550:	2201      	movs	r2, #1
			if (IS_ENABLED(CONFIG_NRF52_ANOMALY_132_WORKAROUND) &&
			    (subsys == CLOCK_CONTROL_NRF_SUBSYS_LF)) {
				anomaly_132_workaround();
			}

			nrf_clock_task_trigger(NRF_CLOCK,
    d552:	4447      	add	r7, r8
    d554:	7abb      	ldrb	r3, [r7, #10]
    d556:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d55a:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
    d55e:	601a      	str	r2, [r3, #0]
			 */
			clkstarted_handle(dev, type);
		}
	}

	return 0;
    d560:	2000      	movs	r0, #0
    d562:	e00e      	b.n	d582 <clock_async_start+0xda>
	parent->next = child;
    d564:	f8ce 2000 	str.w	r2, [lr]
	list->tail = node;
    d568:	605a      	str	r2, [r3, #4]
    d56a:	e7dd      	b.n	d528 <clock_async_start+0x80>
				config->start_handler(dev) : true;
    d56c:	4628      	mov	r0, r5
    d56e:	4798      	blx	r3
    d570:	2800      	cmp	r0, #0
    d572:	d1ed      	bne.n	d550 <clock_async_start+0xa8>
			clkstarted_handle(dev, type);
    d574:	4631      	mov	r1, r6
    d576:	4628      	mov	r0, r5
    d578:	f00e fa5e 	bl	1ba38 <clkstarted_handle>
    d57c:	e7f0      	b.n	d560 <clock_async_start+0xb8>
		return -EBUSY;
    d57e:	f06f 000f 	mvn.w	r0, #15
}
    d582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d586:	bf00      	nop
    d588:	40005000 	.word	0x40005000

0000d58c <clk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int clk_init(struct device *dev)
{
    d58c:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    d58e:	2200      	movs	r2, #0
{
    d590:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    d592:	2101      	movs	r1, #1
    d594:	2005      	movs	r0, #5
    d596:	f000 f9bf 	bl	d918 <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    d59a:	2005      	movs	r0, #5
    d59c:	f000 f9ac 	bl	d8f8 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    d5a0:	2202      	movs	r2, #2
    d5a2:	4b07      	ldr	r3, [pc, #28]	; (d5c0 <clk_init+0x34>)
	list->head = NULL;
    d5a4:	2000      	movs	r0, #0
    d5a6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    d5aa:	2203      	movs	r2, #3
    d5ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	clock_irqs_enable();

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		sys_slist_init(&(get_sub_data(dev, i)->list));
    d5b0:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
    d5b2:	e9c3 0000 	strd	r0, r0, [r3]
    d5b6:	68a3      	ldr	r3, [r4, #8]
    d5b8:	e9c3 0003 	strd	r0, r0, [r3, #12]
	}

	return 0;
}
    d5bc:	bd10      	pop	{r4, pc}
    d5be:	bf00      	nop
    d5c0:	40005000 	.word	0x40005000

0000d5c4 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    d5c4:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    d5c6:	4b10      	ldr	r3, [pc, #64]	; (d608 <nrf_power_clock_isr+0x44>)
    d5c8:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    d5ca:	b162      	cbz	r2, d5e6 <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
    d5cc:	4a0f      	ldr	r2, [pc, #60]	; (d60c <nrf_power_clock_isr+0x48>)
    d5ce:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    d5d2:	07d1      	lsls	r1, r2, #31
    d5d4:	d507      	bpl.n	d5e6 <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d5d6:	2200      	movs	r2, #0
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    d5d8:	480d      	ldr	r0, [pc, #52]	; (d610 <nrf_power_clock_isr+0x4c>)
    d5da:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    d5dc:	6883      	ldr	r3, [r0, #8]
    d5de:	7a59      	ldrb	r1, [r3, #9]
    d5e0:	b909      	cbnz	r1, d5e6 <nrf_power_clock_isr+0x22>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    d5e2:	f00e fa29 	bl	1ba38 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    d5e6:	4b0b      	ldr	r3, [pc, #44]	; (d614 <nrf_power_clock_isr+0x50>)
    d5e8:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    d5ea:	b162      	cbz	r2, d606 <nrf_power_clock_isr+0x42>
    return p_reg->INTENSET & mask;
    d5ec:	4a07      	ldr	r2, [pc, #28]	; (d60c <nrf_power_clock_isr+0x48>)
    d5ee:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    d5f2:	0792      	lsls	r2, r2, #30
    d5f4:	d507      	bpl.n	d606 <nrf_power_clock_isr+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d5f6:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(dev);
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    d5f8:	2101      	movs	r1, #1
    d5fa:	601a      	str	r2, [r3, #0]
    d5fc:	4804      	ldr	r0, [pc, #16]	; (d610 <nrf_power_clock_isr+0x4c>)
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    d5fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    d602:	f00e ba19 	b.w	1ba38 <clkstarted_handle>
}
    d606:	bd08      	pop	{r3, pc}
    d608:	40005100 	.word	0x40005100
    d60c:	40005000 	.word	0x40005000
    d610:	20028560 	.word	0x20028560
    d614:	40005104 	.word	0x40005104

0000d618 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    d618:	2200      	movs	r2, #0
    d61a:	4b0d      	ldr	r3, [pc, #52]	; (d650 <rtc1_nrf_isr+0x38>)
    d61c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    d620:	f04f 0220 	mov.w	r2, #32
    d624:	f3ef 8111 	mrs	r1, BASEPRI
    d628:	f382 8811 	msr	BASEPRI, r2
    d62c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    d630:	4a08      	ldr	r2, [pc, #32]	; (d654 <rtc1_nrf_isr+0x3c>)
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    d632:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    d636:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    d638:	1ac0      	subs	r0, r0, r3
    d63a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    d63e:	4403      	add	r3, r0
    d640:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    d642:	f381 8811 	msr	BASEPRI, r1
    d646:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    d64a:	f00c bf5b 	b.w	1a504 <z_clock_announce>
    d64e:	bf00      	nop
    d650:	40015000 	.word	0x40015000
    d654:	2002022c 	.word	0x2002022c

0000d658 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    d658:	b570      	push	{r4, r5, r6, lr}
    d65a:	4815      	ldr	r0, [pc, #84]	; (d6b0 <z_clock_driver_init+0x58>)
    d65c:	f00b fdf2 	bl	19244 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL);
	if (!clock) {
    d660:	b310      	cbz	r0, d6a8 <z_clock_driver_init+0x50>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    d662:	6843      	ldr	r3, [r0, #4]
    d664:	2101      	movs	r1, #1
    d666:	681b      	ldr	r3, [r3, #0]
    d668:	4798      	blx	r3
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    d66a:	2400      	movs	r4, #0
    p_reg->CC[ch] = cc_val;
    d66c:	2601      	movs	r6, #1
    p_reg->INTENSET = mask;
    d66e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d672:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    d676:	4d0f      	ldr	r5, [pc, #60]	; (d6b4 <z_clock_driver_init+0x5c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    d678:	4631      	mov	r1, r6
    d67a:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    d67e:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    d682:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d686:	4b0c      	ldr	r3, [pc, #48]	; (d6b8 <z_clock_driver_init+0x60>)
    d688:	2015      	movs	r0, #21
    d68a:	601c      	str	r4, [r3, #0]
    d68c:	4b0b      	ldr	r3, [pc, #44]	; (d6bc <z_clock_driver_init+0x64>)
    d68e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    d692:	4622      	mov	r2, r4
    d694:	f000 f940 	bl	d918 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    d698:	2015      	movs	r0, #21
    d69a:	f000 f92d 	bl	d8f8 <arch_irq_enable>

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    d69e:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    d6a0:	4b07      	ldr	r3, [pc, #28]	; (d6c0 <z_clock_driver_init+0x68>)
    d6a2:	601e      	str	r6, [r3, #0]
    d6a4:	602e      	str	r6, [r5, #0]
}
    d6a6:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    d6a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d6ac:	e7fb      	b.n	d6a6 <z_clock_driver_init+0x4e>
    d6ae:	bf00      	nop
    d6b0:	0001e345 	.word	0x0001e345
    d6b4:	40015000 	.word	0x40015000
    d6b8:	40015140 	.word	0x40015140
    d6bc:	e000e100 	.word	0xe000e100
    d6c0:	40015008 	.word	0x40015008

0000d6c4 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    d6c4:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    d6c6:	4c25      	ldr	r4, [pc, #148]	; (d75c <z_clock_set_timeout+0x98>)
    d6c8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    d6cc:	bf08      	it	eq
    d6ce:	4620      	moveq	r0, r4
	__asm__ volatile(
    d6d0:	f04f 0320 	mov.w	r3, #32
    d6d4:	f3ef 8511 	mrs	r5, BASEPRI
    d6d8:	f383 8811 	msr	BASEPRI, r3
    d6dc:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    d6e0:	4b1f      	ldr	r3, [pc, #124]	; (d760 <z_clock_set_timeout+0x9c>)
    d6e2:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
    d6e6:	4b1f      	ldr	r3, [pc, #124]	; (d764 <z_clock_set_timeout+0xa0>)
    d6e8:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
    d6ea:	1aca      	subs	r2, r1, r3
    d6ec:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    d6f0:	0212      	lsls	r2, r2, #8
    d6f2:	d41a      	bmi.n	d72a <z_clock_set_timeout+0x66>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    d6f4:	1e42      	subs	r2, r0, #1
    d6f6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    d6fa:	42a2      	cmp	r2, r4
    d6fc:	bfa8      	it	ge
    d6fe:	4622      	movge	r2, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    d700:	1c70      	adds	r0, r6, #1
    d702:	4410      	add	r0, r2
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    d704:	42a0      	cmp	r0, r4
    d706:	bf94      	ite	ls
    d708:	1818      	addls	r0, r3, r0
    d70a:	1918      	addhi	r0, r3, r4
	return (a - b) & COUNTER_MAX;
    d70c:	1a41      	subs	r1, r0, r1
    d70e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    d712:	4a13      	ldr	r2, [pc, #76]	; (d760 <z_clock_set_timeout+0x9c>)
    d714:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    d718:	2902      	cmp	r1, #2
    p_reg->CC[ch] = cc_val;
    d71a:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    d71e:	d906      	bls.n	d72e <z_clock_set_timeout+0x6a>
	__asm__ volatile(
    d720:	f385 8811 	msr	BASEPRI, r5
    d724:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    d728:	bd70      	pop	{r4, r5, r6, pc}
		ticks = 0;
    d72a:	2200      	movs	r2, #0
    d72c:	e7e8      	b.n	d700 <z_clock_set_timeout+0x3c>
     return p_reg->COUNTER;
    d72e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    d732:	490d      	ldr	r1, [pc, #52]	; (d768 <z_clock_set_timeout+0xa4>)
	return (a - b) & COUNTER_MAX;
    d734:	1ac3      	subs	r3, r0, r3
    d736:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    d73a:	1e5c      	subs	r4, r3, #1
    d73c:	428c      	cmp	r4, r1
    d73e:	d905      	bls.n	d74c <z_clock_set_timeout+0x88>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d740:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    d744:	4b09      	ldr	r3, [pc, #36]	; (d76c <z_clock_set_timeout+0xa8>)
    d746:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    d74a:	e7e9      	b.n	d720 <z_clock_set_timeout+0x5c>
		} else if (dt == 1) {
    d74c:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
    d74e:	bf02      	ittt	eq
    d750:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    d752:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    d756:	f8c2 0540 	streq.w	r0, [r2, #1344]	; 0x540
    d75a:	e7e1      	b.n	d720 <z_clock_set_timeout+0x5c>
    d75c:	00fffffe 	.word	0x00fffffe
    d760:	40015000 	.word	0x40015000
    d764:	2002022c 	.word	0x2002022c
    d768:	007ffffe 	.word	0x007ffffe
    d76c:	e000e100 	.word	0xe000e100

0000d770 <z_clock_elapsed>:
	__asm__ volatile(
    d770:	f04f 0220 	mov.w	r2, #32
    d774:	f3ef 8311 	mrs	r3, BASEPRI
    d778:	f382 8811 	msr	BASEPRI, r2
    d77c:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    d780:	4a06      	ldr	r2, [pc, #24]	; (d79c <z_clock_elapsed+0x2c>)
    d782:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    d786:	4a06      	ldr	r2, [pc, #24]	; (d7a0 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    d788:	6812      	ldr	r2, [r2, #0]
    d78a:	1a80      	subs	r0, r0, r2
    d78c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    d790:	f383 8811 	msr	BASEPRI, r3
    d794:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    d798:	4770      	bx	lr
    d79a:	bf00      	nop
    d79c:	40015000 	.word	0x40015000
    d7a0:	2002022c 	.word	0x2002022c

0000d7a4 <z_timer_cycle_get_32>:
	__asm__ volatile(
    d7a4:	f04f 0320 	mov.w	r3, #32
    d7a8:	f3ef 8211 	mrs	r2, BASEPRI
    d7ac:	f383 8811 	msr	BASEPRI, r3
    d7b0:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    d7b4:	4906      	ldr	r1, [pc, #24]	; (d7d0 <z_timer_cycle_get_32+0x2c>)
    d7b6:	4b07      	ldr	r3, [pc, #28]	; (d7d4 <z_timer_cycle_get_32+0x30>)
    d7b8:	6808      	ldr	r0, [r1, #0]
    d7ba:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    d7be:	f382 8811 	msr	BASEPRI, r2
    d7c2:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    d7c6:	1a1b      	subs	r3, r3, r0
    d7c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    d7cc:	4418      	add	r0, r3
    d7ce:	4770      	bx	lr
    d7d0:	2002022c 	.word	0x2002022c
    d7d4:	40015000 	.word	0x40015000

0000d7d8 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    d7d8:	4804      	ldr	r0, [pc, #16]	; (d7ec <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    d7da:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    d7dc:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    d7de:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    d7e0:	d003      	beq.n	d7ea <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    d7e2:	4903      	ldr	r1, [pc, #12]	; (d7f0 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    d7e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    d7e8:	600a      	str	r2, [r1, #0]

0000d7ea <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    d7ea:	4770      	bx	lr
    ldr r0, =_kernel
    d7ec:	20021cfc 	.word	0x20021cfc
    ldr r1, =_SCS_ICSR
    d7f0:	e000ed04 	.word	0xe000ed04

0000d7f4 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    d7f4:	4a09      	ldr	r2, [pc, #36]	; (d81c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    d7f6:	490a      	ldr	r1, [pc, #40]	; (d820 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    d7f8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    d7fa:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    d7fc:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    d7fe:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    d800:	4908      	ldr	r1, [pc, #32]	; (d824 <arch_swap+0x30>)
    d802:	684b      	ldr	r3, [r1, #4]
    d804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    d808:	604b      	str	r3, [r1, #4]
    d80a:	2300      	movs	r3, #0
    d80c:	f383 8811 	msr	BASEPRI, r3
    d810:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    d814:	6893      	ldr	r3, [r2, #8]
}
    d816:	6e98      	ldr	r0, [r3, #104]	; 0x68
    d818:	4770      	bx	lr
    d81a:	bf00      	nop
    d81c:	20021cfc 	.word	0x20021cfc
    d820:	0001deb4 	.word	0x0001deb4
    d824:	e000ed00 	.word	0xe000ed00

0000d828 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    d828:	4929      	ldr	r1, [pc, #164]	; (d8d0 <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    d82a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    d82c:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    d830:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    d832:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    d836:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
    d83a:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    d83e:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
    d842:	d004      	beq.n	d84e <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
    d844:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
    d848:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
    d84c:	e007      	b.n	d85e <out_fp_endif>

0000d84e <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
    d84e:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
    d852:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
    d856:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
    d85a:	f050 0004 	orrs.w	r0, r0, #4

0000d85e <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
    d85e:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    d862:	2020      	movs	r0, #32
    msr BASEPRI, r0
    d864:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    d868:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    d86c:	4f19      	ldr	r7, [pc, #100]	; (d8d4 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    d86e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    d872:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    d874:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    d876:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    d878:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    d87a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    d87c:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    d87e:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
    d882:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
    d886:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
    d88a:	d105      	bne.n	d898 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    d88c:	2300      	movs	r3, #0
    vmsr fpscr, r3
    d88e:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    d892:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
    d896:	e005      	b.n	d8a4 <in_fp_endif>

0000d898 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
    d898:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
    d89c:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
    d8a0:	ec90 8a10 	vldmia	r0, {s16-s31}

0000d8a4 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    d8a4:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
    d8a8:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    d8ac:	f383 8814 	msr	CONTROL, r3
    isb
    d8b0:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    d8b4:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    d8b6:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    d8b8:	f00e f8f3 	bl	1baa2 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    d8bc:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    d8c0:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    d8c4:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    d8c8:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    d8cc:	4770      	bx	lr
    d8ce:	0000      	.short	0x0000
    ldr r1, =_kernel
    d8d0:	20021cfc 	.word	0x20021cfc
    ldr v4, =_SCS_ICSR
    d8d4:	e000ed04 	.word	0xe000ed04

0000d8d8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    d8d8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    d8dc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    d8de:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    d8e2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    d8e6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    d8e8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    d8ec:	2902      	cmp	r1, #2
    beq _oops
    d8ee:	d0ff      	beq.n	d8f0 <_oops>

0000d8f0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    d8f0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    d8f2:	f00e f8cb 	bl	1ba8c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    d8f6:	bd01      	pop	{r0, pc}

0000d8f8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    d8f8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    d8fa:	2b00      	cmp	r3, #0
    d8fc:	db08      	blt.n	d910 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d8fe:	2201      	movs	r2, #1
    d900:	f000 001f 	and.w	r0, r0, #31
    d904:	fa02 f000 	lsl.w	r0, r2, r0
    d908:	4a02      	ldr	r2, [pc, #8]	; (d914 <arch_irq_enable+0x1c>)
    d90a:	095b      	lsrs	r3, r3, #5
    d90c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    d910:	4770      	bx	lr
    d912:	bf00      	nop
    d914:	e000e100 	.word	0xe000e100

0000d918 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    d918:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    d91a:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    d91c:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d920:	bfa8      	it	ge
    d922:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    d926:	ea4f 1141 	mov.w	r1, r1, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d92a:	bfb8      	it	lt
    d92c:	4b05      	ldrlt	r3, [pc, #20]	; (d944 <z_arm_irq_priority_set+0x2c>)
    d92e:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d930:	bfab      	itete	ge
    d932:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d936:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d93a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d93e:	5419      	strblt	r1, [r3, r0]
}
    d940:	4770      	bx	lr
    d942:	bf00      	nop
    d944:	e000ed14 	.word	0xe000ed14

0000d948 <_arch_isr_direct_pm>:
	z_arm_reserved();
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    d948:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    d94a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    d94c:	4b04      	ldr	r3, [pc, #16]	; (d960 <_arch_isr_direct_pm+0x18>)
    d94e:	6a18      	ldr	r0, [r3, #32]
    d950:	b118      	cbz	r0, d95a <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    d952:	2200      	movs	r2, #0
    d954:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    d956:	f00f fac8 	bl	1ceea <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    d95a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    d95c:	bd08      	pop	{r3, pc}
    d95e:	bf00      	nop
    d960:	20021cfc 	.word	0x20021cfc

0000d964 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
    d964:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d966:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
    d968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
    d96a:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    d96c:	9300      	str	r3, [sp, #0]
    d96e:	9b09      	ldr	r3, [sp, #36]	; 0x24
	stackEnd = pStackMem + stackSize;
    d970:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    d972:	f00f fce0 	bl	1d336 <z_new_thread_init>
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    d976:	4a0c      	ldr	r2, [pc, #48]	; (d9a8 <arch_new_thread+0x44>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    d978:	f1a4 0320 	sub.w	r3, r4, #32
    d97c:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    d980:	f022 0201 	bic.w	r2, r2, #1
    d984:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    d986:	9a06      	ldr	r2, [sp, #24]
	pInitCtx->basic.a1 = (u32_t)pEntry;
    d988:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    d98a:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    d98c:	9a07      	ldr	r2, [sp, #28]
    d98e:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    d990:	9a08      	ldr	r2, [sp, #32]
    d992:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
    d994:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    d998:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    d99a:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    d99c:	2300      	movs	r3, #0
    d99e:	666b      	str	r3, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
    d9a0:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    d9a4:	b002      	add	sp, #8
    d9a6:	bd70      	pop	{r4, r5, r6, pc}
    d9a8:	0001adf1 	.word	0x0001adf1

0000d9ac <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    d9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d9b0:	461f      	mov	r7, r3
    d9b2:	4606      	mov	r6, r0
    d9b4:	460c      	mov	r4, r1
    d9b6:	4690      	mov	r8, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    d9b8:	2300      	movs	r3, #0
    d9ba:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    d9be:	f3ef 8514 	mrs	r5, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    d9c2:	f025 0504 	bic.w	r5, r5, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    d9c6:	f385 8814 	msr	CONTROL, r5
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    d9ca:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    d9ce:	f000 fc19 	bl	e204 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    d9d2:	4b0a      	ldr	r3, [pc, #40]	; (d9fc <arch_switch_to_main_thread+0x50>)
	start_of_main_stack =
    d9d4:	4444      	add	r4, r8
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    d9d6:	4630      	mov	r0, r6
	_current = main_thread;
    d9d8:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    d9da:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    d9de:	f00e f860 	bl	1baa2 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    d9e2:	4638      	mov	r0, r7
    d9e4:	f384 8809 	msr	PSP, r4
    d9e8:	2100      	movs	r1, #0
    d9ea:	b663      	cpsie	if
    d9ec:	f381 8811 	msr	BASEPRI, r1
    d9f0:	f3bf 8f6f 	isb	sy
    d9f4:	2200      	movs	r2, #0
    d9f6:	2300      	movs	r3, #0
    d9f8:	f00d f9fa 	bl	1adf0 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    d9fc:	20021cfc 	.word	0x20021cfc

0000da00 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    da00:	4901      	ldr	r1, [pc, #4]	; (da08 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    da02:	2210      	movs	r2, #16
	str r2, [r1]
    da04:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    da06:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    da08:	e000ed10 	.word	0xe000ed10

0000da0c <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    da0c:	4040      	eors	r0, r0
	msr BASEPRI, r0
    da0e:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    da12:	bf30      	wfi

	bx lr
    da14:	4770      	bx	lr
    da16:	bf00      	nop

0000da18 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
    da18:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    da1c:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    da20:	4672      	mov	r2, lr

	push {r0, lr}
    da22:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
    da24:	f000 fab0 	bl	df88 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    da28:	bd01      	pop	{r0, pc}
    da2a:	bf00      	nop

0000da2c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    da2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    da30:	4681      	mov	r9, r0
    da32:	b08a      	sub	sp, #40	; 0x28

	if (esf != NULL) {
    da34:	460c      	mov	r4, r1
    da36:	2900      	cmp	r1, #0
    da38:	d07a      	beq.n	db30 <z_arm_fatal_error+0x104>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    da3a:	2201      	movs	r2, #1
    da3c:	f04f 0300 	mov.w	r3, #0
    da40:	4d3f      	ldr	r5, [pc, #252]	; (db40 <z_arm_fatal_error+0x114>)
    da42:	f362 0307 	bfi	r3, r2, #0, #8
    da46:	4a3f      	ldr	r2, [pc, #252]	; (db44 <z_arm_fatal_error+0x118>)
    da48:	483f      	ldr	r0, [pc, #252]	; (db48 <z_arm_fatal_error+0x11c>)
    da4a:	1aad      	subs	r5, r5, r2
    da4c:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    da50:	f365 138f 	bfi	r3, r5, #6, #10
    da54:	f8ad 3000 	strh.w	r3, [sp]
    da58:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    da5c:	6809      	ldr	r1, [r1, #0]
    da5e:	f00d fa6b 	bl	1af38 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    da62:	2201      	movs	r2, #1
    da64:	f04f 0300 	mov.w	r3, #0
    da68:	f362 0307 	bfi	r3, r2, #0, #8
    da6c:	f365 138f 	bfi	r3, r5, #6, #10
    da70:	f8ad 3000 	strh.w	r3, [sp]
    da74:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    da78:	68e1      	ldr	r1, [r4, #12]
    da7a:	4834      	ldr	r0, [pc, #208]	; (db4c <z_arm_fatal_error+0x120>)
    da7c:	f00d fa5c 	bl	1af38 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    da80:	2301      	movs	r3, #1
    da82:	f04f 0200 	mov.w	r2, #0
    da86:	f363 0207 	bfi	r2, r3, #0, #8
    da8a:	f365 128f 	bfi	r2, r5, #6, #10
    da8e:	69e1      	ldr	r1, [r4, #28]
    da90:	482f      	ldr	r0, [pc, #188]	; (db50 <z_arm_fatal_error+0x124>)
    da92:	f00d fa25 	bl	1aee0 <log_1>
	for (int i = 0; i < 16; i += 4) {
    da96:	4627      	mov	r7, r4
    da98:	2600      	movs	r6, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    da9a:	f8df a0c0 	ldr.w	sl, [pc, #192]	; db5c <z_arm_fatal_error+0x130>
    da9e:	edd7 7a08 	vldr	s15, [r7, #32]
    daa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    daa6:	edcd 7a03 	vstr	s15, [sp, #12]
    daaa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
    daae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    dab2:	edcd 7a05 	vstr	s15, [sp, #20]
    dab6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    daba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    dabe:	edcd 7a07 	vstr	s15, [sp, #28]
    dac2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    dac6:	2208      	movs	r2, #8
    dac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    dacc:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    dad0:	f043 0301 	orr.w	r3, r3, #1
    dad4:	f363 0807 	bfi	r8, r3, #0, #8
    dad8:	1c73      	adds	r3, r6, #1
    dada:	9304      	str	r3, [sp, #16]
    dadc:	1cb3      	adds	r3, r6, #2
    dade:	9306      	str	r3, [sp, #24]
    dae0:	f365 188f 	bfi	r8, r5, #6, #10
    dae4:	1cf3      	adds	r3, r6, #3
    dae6:	9602      	str	r6, [sp, #8]
    dae8:	9308      	str	r3, [sp, #32]
    daea:	eb0d 0102 	add.w	r1, sp, r2
    daee:	4643      	mov	r3, r8
    daf0:	4650      	mov	r0, sl
	for (int i = 0; i < 16; i += 4) {
    daf2:	3604      	adds	r6, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    daf4:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
    daf8:	f00d fa39 	bl	1af6e <log_n>
	for (int i = 0; i < 16; i += 4) {
    dafc:	2e10      	cmp	r6, #16
    dafe:	f107 0710 	add.w	r7, r7, #16
    db02:	d1cc      	bne.n	da9e <z_arm_fatal_error+0x72>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
    db04:	2301      	movs	r3, #1
    db06:	f04f 0200 	mov.w	r2, #0
    db0a:	f363 0207 	bfi	r2, r3, #0, #8
    db0e:	f365 128f 	bfi	r2, r5, #6, #10
    db12:	6e21      	ldr	r1, [r4, #96]	; 0x60
    db14:	480f      	ldr	r0, [pc, #60]	; (db54 <z_arm_fatal_error+0x128>)
    db16:	f00d f9e3 	bl	1aee0 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    db1a:	f04f 0200 	mov.w	r2, #0
    db1e:	2301      	movs	r3, #1
    db20:	f363 0207 	bfi	r2, r3, #0, #8
    db24:	f365 128f 	bfi	r2, r5, #6, #10
    db28:	69a1      	ldr	r1, [r4, #24]
    db2a:	480b      	ldr	r0, [pc, #44]	; (db58 <z_arm_fatal_error+0x12c>)
    db2c:	f00d f9d8 	bl	1aee0 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    db30:	4621      	mov	r1, r4
    db32:	4648      	mov	r0, r9
    db34:	f00b fbb2 	bl	1929c <z_fatal_error>
}
    db38:	b00a      	add	sp, #40	; 0x28
    db3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    db3e:	bf00      	nop
    db40:	0001d9cc 	.word	0x0001d9cc
    db44:	0001d954 	.word	0x0001d954
    db48:	0001e36f 	.word	0x0001e36f
    db4c:	0001e39e 	.word	0x0001e39e
    db50:	0001e3cd 	.word	0x0001e3cd
    db54:	0001e41f 	.word	0x0001e41f
    db58:	0001e42e 	.word	0x0001e42e
    db5c:	0001e3dc 	.word	0x0001e3dc

0000db60 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    db60:	bf30      	wfi
    b z_SysNmiOnReset
    db62:	f7ff bffd 	b.w	db60 <z_SysNmiOnReset>
    db66:	bf00      	nop

0000db68 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    db68:	4a11      	ldr	r2, [pc, #68]	; (dbb0 <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    db6a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    db6c:	4b11      	ldr	r3, [pc, #68]	; (dbb4 <z_arm_prep_c+0x4c>)
    db6e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    db72:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    db74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    db78:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    db7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    db80:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    db84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    db88:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    db8c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    db90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    db94:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    db98:	2300      	movs	r3, #0
    db9a:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    db9e:	f00b fbfd 	bl	1939c <z_bss_zero>
	z_data_copy();
    dba2:	f00b fc05 	bl	193b0 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    dba6:	f000 fafb 	bl	e1a0 <z_arm_int_lib_init>
	z_cstart();
    dbaa:	f00b fc3f 	bl	1942c <z_cstart>
    dbae:	bf00      	nop
    dbb0:	0000c000 	.word	0x0000c000
    dbb4:	e000ed00 	.word	0xe000ed00

0000dbb8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    dbb8:	b501      	push	{r0, lr}
      * FIXME: Remove the Cortex-M conditional compilation checks for `cpsid i`
      *        and `cpsie i` after the Cortex-R port is updated to support
      *        interrupt nesting.  For more details, refer to the issue #21758.
      */
#if defined(CONFIG_CPU_CORTEX_M)
	cpsid i  /* PRIMASK = 1 */
    dbba:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    dbbc:	4a0b      	ldr	r2, [pc, #44]	; (dbec <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    dbbe:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    dbc0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    dbc2:	bf1e      	ittt	ne
	movne	r1, #0
    dbc4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    dbc6:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    dbc8:	f00f f98f 	blne	1ceea <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    dbcc:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    dbce:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    dbd2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    dbd6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    dbda:	4905      	ldr	r1, [pc, #20]	; (dbf0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    dbdc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    dbde:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    dbe0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    dbe2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    dbe6:	4903      	ldr	r1, [pc, #12]	; (dbf4 <_isr_wrapper+0x3c>)
	bx r1
    dbe8:	4708      	bx	r1
    dbea:	0000      	.short	0x0000
	ldr r2, =_kernel
    dbec:	20021cfc 	.word	0x20021cfc
	ldr r1, =_sw_isr_table
    dbf0:	0001d668 	.word	0x0001d668
	ldr r1, =z_arm_int_exit
    dbf4:	0000d7d9 	.word	0x0000d7d9

0000dbf8 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    dbf8:	f00d f920 	bl	1ae3c <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    dbfc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    dbfe:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    dc02:	4808      	ldr	r0, [pc, #32]	; (dc24 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    dc04:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    dc08:	1840      	adds	r0, r0, r1
    msr PSP, r0
    dc0a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    dc0e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    dc12:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    dc14:	4308      	orrs	r0, r1
    msr CONTROL, r0
    dc16:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    dc1a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    dc1e:	f7ff ffa3 	bl	db68 <z_arm_prep_c>
    dc22:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    dc24:	20025ee0 	.word	0x20025ee0

0000dc28 <usage_fault.isra.2>:
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    dc28:	2301      	movs	r3, #1
    dc2a:	f04f 0100 	mov.w	r1, #0
static u32_t usage_fault(const z_arch_esf_t *esf)
    dc2e:	b510      	push	{r4, lr}
	PR_FAULT_INFO("***** USAGE FAULT *****");
    dc30:	f363 0107 	bfi	r1, r3, #0, #8
    dc34:	4c3a      	ldr	r4, [pc, #232]	; (dd20 <usage_fault.isra.2+0xf8>)
    dc36:	4b3b      	ldr	r3, [pc, #236]	; (dd24 <usage_fault.isra.2+0xfc>)
    dc38:	483b      	ldr	r0, [pc, #236]	; (dd28 <usage_fault.isra.2+0x100>)
    dc3a:	1ae4      	subs	r4, r4, r3
    dc3c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    dc40:	f364 118f 	bfi	r1, r4, #6, #10
    dc44:	f00d f93f 	bl	1aec6 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    dc48:	4b38      	ldr	r3, [pc, #224]	; (dd2c <usage_fault.isra.2+0x104>)
    dc4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dc4c:	0199      	lsls	r1, r3, #6
    dc4e:	d509      	bpl.n	dc64 <usage_fault.isra.2+0x3c>
		PR_FAULT_INFO("  Division by zero");
    dc50:	f04f 0100 	mov.w	r1, #0
    dc54:	2301      	movs	r3, #1
    dc56:	f363 0107 	bfi	r1, r3, #0, #8
    dc5a:	f364 118f 	bfi	r1, r4, #6, #10
    dc5e:	4834      	ldr	r0, [pc, #208]	; (dd30 <usage_fault.isra.2+0x108>)
    dc60:	f00d f931 	bl	1aec6 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    dc64:	4b31      	ldr	r3, [pc, #196]	; (dd2c <usage_fault.isra.2+0x104>)
    dc66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dc68:	01da      	lsls	r2, r3, #7
    dc6a:	d509      	bpl.n	dc80 <usage_fault.isra.2+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
    dc6c:	f04f 0100 	mov.w	r1, #0
    dc70:	2301      	movs	r3, #1
    dc72:	f363 0107 	bfi	r1, r3, #0, #8
    dc76:	f364 118f 	bfi	r1, r4, #6, #10
    dc7a:	482e      	ldr	r0, [pc, #184]	; (dd34 <usage_fault.isra.2+0x10c>)
    dc7c:	f00d f923 	bl	1aec6 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    dc80:	4b2a      	ldr	r3, [pc, #168]	; (dd2c <usage_fault.isra.2+0x104>)
    dc82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dc84:	02db      	lsls	r3, r3, #11
    dc86:	d509      	bpl.n	dc9c <usage_fault.isra.2+0x74>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    dc88:	f04f 0100 	mov.w	r1, #0
    dc8c:	2301      	movs	r3, #1
    dc8e:	f363 0107 	bfi	r1, r3, #0, #8
    dc92:	f364 118f 	bfi	r1, r4, #6, #10
    dc96:	4828      	ldr	r0, [pc, #160]	; (dd38 <usage_fault.isra.2+0x110>)
    dc98:	f00d f915 	bl	1aec6 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    dc9c:	4b23      	ldr	r3, [pc, #140]	; (dd2c <usage_fault.isra.2+0x104>)
    dc9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dca0:	0318      	lsls	r0, r3, #12
    dca2:	d509      	bpl.n	dcb8 <usage_fault.isra.2+0x90>
		PR_FAULT_INFO("  No coprocessor instructions");
    dca4:	f04f 0100 	mov.w	r1, #0
    dca8:	2301      	movs	r3, #1
    dcaa:	f363 0107 	bfi	r1, r3, #0, #8
    dcae:	f364 118f 	bfi	r1, r4, #6, #10
    dcb2:	4822      	ldr	r0, [pc, #136]	; (dd3c <usage_fault.isra.2+0x114>)
    dcb4:	f00d f907 	bl	1aec6 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    dcb8:	4b1c      	ldr	r3, [pc, #112]	; (dd2c <usage_fault.isra.2+0x104>)
    dcba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dcbc:	0359      	lsls	r1, r3, #13
    dcbe:	d509      	bpl.n	dcd4 <usage_fault.isra.2+0xac>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    dcc0:	f04f 0100 	mov.w	r1, #0
    dcc4:	2301      	movs	r3, #1
    dcc6:	f363 0107 	bfi	r1, r3, #0, #8
    dcca:	f364 118f 	bfi	r1, r4, #6, #10
    dcce:	481c      	ldr	r0, [pc, #112]	; (dd40 <usage_fault.isra.2+0x118>)
    dcd0:	f00d f8f9 	bl	1aec6 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    dcd4:	4b15      	ldr	r3, [pc, #84]	; (dd2c <usage_fault.isra.2+0x104>)
    dcd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dcd8:	039a      	lsls	r2, r3, #14
    dcda:	d509      	bpl.n	dcf0 <usage_fault.isra.2+0xc8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    dcdc:	f04f 0100 	mov.w	r1, #0
    dce0:	2301      	movs	r3, #1
    dce2:	f363 0107 	bfi	r1, r3, #0, #8
    dce6:	f364 118f 	bfi	r1, r4, #6, #10
    dcea:	4816      	ldr	r0, [pc, #88]	; (dd44 <usage_fault.isra.2+0x11c>)
    dcec:	f00d f8eb 	bl	1aec6 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    dcf0:	4b0e      	ldr	r3, [pc, #56]	; (dd2c <usage_fault.isra.2+0x104>)
    dcf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dcf4:	03db      	lsls	r3, r3, #15
    dcf6:	d509      	bpl.n	dd0c <usage_fault.isra.2+0xe4>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    dcf8:	f04f 0100 	mov.w	r1, #0
    dcfc:	2301      	movs	r3, #1
    dcfe:	f363 0107 	bfi	r1, r3, #0, #8
    dd02:	f364 118f 	bfi	r1, r4, #6, #10
    dd06:	4810      	ldr	r0, [pc, #64]	; (dd48 <usage_fault.isra.2+0x120>)
    dd08:	f00d f8dd 	bl	1aec6 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    dd0c:	4a07      	ldr	r2, [pc, #28]	; (dd2c <usage_fault.isra.2+0x104>)

	return reason;
}
    dd0e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    dd10:	6a93      	ldr	r3, [r2, #40]	; 0x28
    dd12:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    dd16:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    dd1a:	6293      	str	r3, [r2, #40]	; 0x28
}
    dd1c:	bd10      	pop	{r4, pc}
    dd1e:	bf00      	nop
    dd20:	0001d9cc 	.word	0x0001d9cc
    dd24:	0001d954 	.word	0x0001d954
    dd28:	0001e5bc 	.word	0x0001e5bc
    dd2c:	e000ed00 	.word	0xe000ed00
    dd30:	0001e5d4 	.word	0x0001e5d4
    dd34:	0001e5e7 	.word	0x0001e5e7
    dd38:	0001e601 	.word	0x0001e601
    dd3c:	0001e62b 	.word	0x0001e62b
    dd40:	0001e649 	.word	0x0001e649
    dd44:	0001e66e 	.word	0x0001e66e
    dd48:	0001e688 	.word	0x0001e688

0000dd4c <mem_manage_fault.isra.4>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    dd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
    dd4e:	2301      	movs	r3, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    dd50:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    dd52:	f04f 0100 	mov.w	r1, #0
    dd56:	4c37      	ldr	r4, [pc, #220]	; (de34 <mem_manage_fault.isra.4+0xe8>)
    dd58:	f363 0107 	bfi	r1, r3, #0, #8
    dd5c:	4b36      	ldr	r3, [pc, #216]	; (de38 <mem_manage_fault.isra.4+0xec>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    dd5e:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    dd60:	1ae4      	subs	r4, r4, r3
    dd62:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    dd66:	f364 118f 	bfi	r1, r4, #6, #10
    dd6a:	4834      	ldr	r0, [pc, #208]	; (de3c <mem_manage_fault.isra.4+0xf0>)
    dd6c:	f00d f8ab 	bl	1aec6 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    dd70:	4b33      	ldr	r3, [pc, #204]	; (de40 <mem_manage_fault.isra.4+0xf4>)
    dd72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dd74:	06d9      	lsls	r1, r3, #27
    dd76:	d509      	bpl.n	dd8c <mem_manage_fault.isra.4+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    dd78:	f04f 0100 	mov.w	r1, #0
    dd7c:	2301      	movs	r3, #1
    dd7e:	f363 0107 	bfi	r1, r3, #0, #8
    dd82:	f364 118f 	bfi	r1, r4, #6, #10
    dd86:	482f      	ldr	r0, [pc, #188]	; (de44 <mem_manage_fault.isra.4+0xf8>)
    dd88:	f00d f89d 	bl	1aec6 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    dd8c:	4b2c      	ldr	r3, [pc, #176]	; (de40 <mem_manage_fault.isra.4+0xf4>)
    dd8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dd90:	071a      	lsls	r2, r3, #28
    dd92:	d509      	bpl.n	dda8 <mem_manage_fault.isra.4+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    dd94:	f04f 0100 	mov.w	r1, #0
    dd98:	2301      	movs	r3, #1
    dd9a:	f363 0107 	bfi	r1, r3, #0, #8
    dd9e:	f364 118f 	bfi	r1, r4, #6, #10
    dda2:	4829      	ldr	r0, [pc, #164]	; (de48 <mem_manage_fault.isra.4+0xfc>)
    dda4:	f00d f88f 	bl	1aec6 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    dda8:	4d25      	ldr	r5, [pc, #148]	; (de40 <mem_manage_fault.isra.4+0xf4>)
    ddaa:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ddac:	079b      	lsls	r3, r3, #30
    ddae:	d51c      	bpl.n	ddea <mem_manage_fault.isra.4+0x9e>
		PR_FAULT_INFO("  Data Access Violation");
    ddb0:	2301      	movs	r3, #1
    ddb2:	f04f 0100 	mov.w	r1, #0
    ddb6:	f363 0107 	bfi	r1, r3, #0, #8
    ddba:	f364 118f 	bfi	r1, r4, #6, #10
    ddbe:	4823      	ldr	r0, [pc, #140]	; (de4c <mem_manage_fault.isra.4+0x100>)
    ddc0:	f00d f881 	bl	1aec6 <log_0>
		mmfar = SCB->MMFAR;
    ddc4:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    ddc6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ddc8:	0618      	lsls	r0, r3, #24
    ddca:	d50e      	bpl.n	ddea <mem_manage_fault.isra.4+0x9e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    ddcc:	f04f 0200 	mov.w	r2, #0
    ddd0:	2301      	movs	r3, #1
    ddd2:	f363 0207 	bfi	r2, r3, #0, #8
    ddd6:	f364 128f 	bfi	r2, r4, #6, #10
    ddda:	481d      	ldr	r0, [pc, #116]	; (de50 <mem_manage_fault.isra.4+0x104>)
    dddc:	f00d f880 	bl	1aee0 <log_1>
			if (from_hard_fault) {
    dde0:	b11f      	cbz	r7, ddea <mem_manage_fault.isra.4+0x9e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    dde2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dde4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    dde8:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    ddea:	4b15      	ldr	r3, [pc, #84]	; (de40 <mem_manage_fault.isra.4+0xf4>)
    ddec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ddee:	07da      	lsls	r2, r3, #31
    ddf0:	d509      	bpl.n	de06 <mem_manage_fault.isra.4+0xba>
		PR_FAULT_INFO("  Instruction Access Violation");
    ddf2:	f04f 0100 	mov.w	r1, #0
    ddf6:	2301      	movs	r3, #1
    ddf8:	f363 0107 	bfi	r1, r3, #0, #8
    ddfc:	f364 118f 	bfi	r1, r4, #6, #10
    de00:	4814      	ldr	r0, [pc, #80]	; (de54 <mem_manage_fault.isra.4+0x108>)
    de02:	f00d f860 	bl	1aec6 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    de06:	4b0e      	ldr	r3, [pc, #56]	; (de40 <mem_manage_fault.isra.4+0xf4>)
    de08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    de0a:	069b      	lsls	r3, r3, #26
    de0c:	d509      	bpl.n	de22 <mem_manage_fault.isra.4+0xd6>
		PR_FAULT_INFO(
    de0e:	f04f 0100 	mov.w	r1, #0
    de12:	2301      	movs	r3, #1
    de14:	f363 0107 	bfi	r1, r3, #0, #8
    de18:	f364 118f 	bfi	r1, r4, #6, #10
    de1c:	480e      	ldr	r0, [pc, #56]	; (de58 <mem_manage_fault.isra.4+0x10c>)
    de1e:	f00d f852 	bl	1aec6 <log_0>
	*recoverable = memory_fault_recoverable(esf);
    de22:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    de24:	4b06      	ldr	r3, [pc, #24]	; (de40 <mem_manage_fault.isra.4+0xf4>)
    de26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    de28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    de2a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    de2e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    de30:	7030      	strb	r0, [r6, #0]
}
    de32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    de34:	0001d9cc 	.word	0x0001d9cc
    de38:	0001d954 	.word	0x0001d954
    de3c:	0001e4e4 	.word	0x0001e4e4
    de40:	e000ed00 	.word	0xe000ed00
    de44:	0001e4fa 	.word	0x0001e4fa
    de48:	0001e52d 	.word	0x0001e52d
    de4c:	0001e540 	.word	0x0001e540
    de50:	0001e558 	.word	0x0001e558
    de54:	0001e56e 	.word	0x0001e56e
    de58:	0001e58d 	.word	0x0001e58d

0000de5c <bus_fault.isra.5>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    de5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** BUS FAULT *****");
    de5e:	2301      	movs	r3, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    de60:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    de62:	f04f 0100 	mov.w	r1, #0
    de66:	4c3d      	ldr	r4, [pc, #244]	; (df5c <bus_fault.isra.5+0x100>)
    de68:	f363 0107 	bfi	r1, r3, #0, #8
    de6c:	4b3c      	ldr	r3, [pc, #240]	; (df60 <bus_fault.isra.5+0x104>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    de6e:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    de70:	1ae4      	subs	r4, r4, r3
    de72:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    de76:	f364 118f 	bfi	r1, r4, #6, #10
    de7a:	483a      	ldr	r0, [pc, #232]	; (df64 <bus_fault.isra.5+0x108>)
    de7c:	f00d f823 	bl	1aec6 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    de80:	4b39      	ldr	r3, [pc, #228]	; (df68 <bus_fault.isra.5+0x10c>)
    de82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    de84:	04d9      	lsls	r1, r3, #19
    de86:	d509      	bpl.n	de9c <bus_fault.isra.5+0x40>
		PR_FAULT_INFO("  Stacking error");
    de88:	f04f 0100 	mov.w	r1, #0
    de8c:	2301      	movs	r3, #1
    de8e:	f363 0107 	bfi	r1, r3, #0, #8
    de92:	f364 118f 	bfi	r1, r4, #6, #10
    de96:	4835      	ldr	r0, [pc, #212]	; (df6c <bus_fault.isra.5+0x110>)
    de98:	f00d f815 	bl	1aec6 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    de9c:	4b32      	ldr	r3, [pc, #200]	; (df68 <bus_fault.isra.5+0x10c>)
    de9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dea0:	051a      	lsls	r2, r3, #20
    dea2:	d509      	bpl.n	deb8 <bus_fault.isra.5+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    dea4:	f04f 0100 	mov.w	r1, #0
    dea8:	2301      	movs	r3, #1
    deaa:	f363 0107 	bfi	r1, r3, #0, #8
    deae:	f364 118f 	bfi	r1, r4, #6, #10
    deb2:	482f      	ldr	r0, [pc, #188]	; (df70 <bus_fault.isra.5+0x114>)
    deb4:	f00d f807 	bl	1aec6 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    deb8:	4d2b      	ldr	r5, [pc, #172]	; (df68 <bus_fault.isra.5+0x10c>)
    deba:	6aab      	ldr	r3, [r5, #40]	; 0x28
    debc:	059b      	lsls	r3, r3, #22
    debe:	d51c      	bpl.n	defa <bus_fault.isra.5+0x9e>
		PR_FAULT_INFO("  Precise data bus error");
    dec0:	2301      	movs	r3, #1
    dec2:	f04f 0100 	mov.w	r1, #0
    dec6:	f363 0107 	bfi	r1, r3, #0, #8
    deca:	f364 118f 	bfi	r1, r4, #6, #10
    dece:	4829      	ldr	r0, [pc, #164]	; (df74 <bus_fault.isra.5+0x118>)
    ded0:	f00c fff9 	bl	1aec6 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    ded4:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    ded6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ded8:	0418      	lsls	r0, r3, #16
    deda:	d50e      	bpl.n	defa <bus_fault.isra.5+0x9e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    dedc:	f04f 0200 	mov.w	r2, #0
    dee0:	2301      	movs	r3, #1
    dee2:	f363 0207 	bfi	r2, r3, #0, #8
    dee6:	f364 128f 	bfi	r2, r4, #6, #10
    deea:	4823      	ldr	r0, [pc, #140]	; (df78 <bus_fault.isra.5+0x11c>)
    deec:	f00c fff8 	bl	1aee0 <log_1>
			if (from_hard_fault) {
    def0:	b11f      	cbz	r7, defa <bus_fault.isra.5+0x9e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    def2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    def4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    def8:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    defa:	4b1b      	ldr	r3, [pc, #108]	; (df68 <bus_fault.isra.5+0x10c>)
    defc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    defe:	0559      	lsls	r1, r3, #21
    df00:	d509      	bpl.n	df16 <bus_fault.isra.5+0xba>
		PR_FAULT_INFO("  Imprecise data bus error");
    df02:	f04f 0100 	mov.w	r1, #0
    df06:	2301      	movs	r3, #1
    df08:	f363 0107 	bfi	r1, r3, #0, #8
    df0c:	f364 118f 	bfi	r1, r4, #6, #10
    df10:	481a      	ldr	r0, [pc, #104]	; (df7c <bus_fault.isra.5+0x120>)
    df12:	f00c ffd8 	bl	1aec6 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    df16:	4b14      	ldr	r3, [pc, #80]	; (df68 <bus_fault.isra.5+0x10c>)
    df18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    df1a:	05d2      	lsls	r2, r2, #23
    df1c:	d511      	bpl.n	df42 <bus_fault.isra.5+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
    df1e:	f04f 0100 	mov.w	r1, #0
    df22:	2301      	movs	r3, #1
    df24:	4816      	ldr	r0, [pc, #88]	; (df80 <bus_fault.isra.5+0x124>)
    df26:	f363 0107 	bfi	r1, r3, #0, #8
    df2a:	f364 118f 	bfi	r1, r4, #6, #10
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    df2e:	f00c ffca 	bl	1aec6 <log_0>
	*recoverable = memory_fault_recoverable(esf);
    df32:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    df34:	4a0c      	ldr	r2, [pc, #48]	; (df68 <bus_fault.isra.5+0x10c>)
    df36:	6a93      	ldr	r3, [r2, #40]	; 0x28
    df38:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    df3c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    df3e:	7030      	strb	r0, [r6, #0]
}
    df40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    df42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    df44:	049b      	lsls	r3, r3, #18
    df46:	d5f4      	bpl.n	df32 <bus_fault.isra.5+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    df48:	f04f 0100 	mov.w	r1, #0
    df4c:	2301      	movs	r3, #1
    df4e:	f363 0107 	bfi	r1, r3, #0, #8
    df52:	f364 118f 	bfi	r1, r4, #6, #10
    df56:	480b      	ldr	r0, [pc, #44]	; (df84 <bus_fault.isra.5+0x128>)
    df58:	e7e9      	b.n	df2e <bus_fault.isra.5+0xd2>
    df5a:	bf00      	nop
    df5c:	0001d9cc 	.word	0x0001d9cc
    df60:	0001d954 	.word	0x0001d954
    df64:	0001e45c 	.word	0x0001e45c
    df68:	e000ed00 	.word	0xe000ed00
    df6c:	0001e472 	.word	0x0001e472
    df70:	0001e52d 	.word	0x0001e52d
    df74:	0001e483 	.word	0x0001e483
    df78:	0001e49c 	.word	0x0001e49c
    df7c:	0001e4b1 	.word	0x0001e4b1
    df80:	0001e4cc 	.word	0x0001e4cc
    df84:	0001e58d 	.word	0x0001e58d

0000df88 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    df88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    df8c:	4b69      	ldr	r3, [pc, #420]	; (e134 <z_arm_fault+0x1ac>)
{
    df8e:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    df90:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    df94:	4606      	mov	r6, r0
    df96:	4689      	mov	r9, r1
    df98:	4614      	mov	r4, r2
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    df9a:	f3c8 0708 	ubfx	r7, r8, #0, #9
    df9e:	2500      	movs	r5, #0
    dfa0:	f385 8811 	msr	BASEPRI, r5
    dfa4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    dfa8:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    dfac:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    dfb0:	d128      	bne.n	e004 <z_arm_fault+0x7c>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    dfb2:	07d0      	lsls	r0, r2, #31
    dfb4:	d426      	bmi.n	e004 <z_arm_fault+0x7c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    dfb6:	0651      	lsls	r1, r2, #25
    dfb8:	d403      	bmi.n	dfc2 <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    dfba:	0722      	lsls	r2, r4, #28
    dfbc:	d412      	bmi.n	dfe4 <z_arm_fault+0x5c>
			*nested_exc = true;
    dfbe:	2501      	movs	r5, #1
    dfc0:	e012      	b.n	dfe8 <z_arm_fault+0x60>
		PR_FAULT_INFO("Exception occurred in Secure State");
    dfc2:	2301      	movs	r3, #1
    dfc4:	f04f 0100 	mov.w	r1, #0
    dfc8:	4a5b      	ldr	r2, [pc, #364]	; (e138 <z_arm_fault+0x1b0>)
    dfca:	f363 0107 	bfi	r1, r3, #0, #8
    dfce:	4b5b      	ldr	r3, [pc, #364]	; (e13c <z_arm_fault+0x1b4>)
    dfd0:	485b      	ldr	r0, [pc, #364]	; (e140 <z_arm_fault+0x1b8>)
    dfd2:	1a9b      	subs	r3, r3, r2
    dfd4:	08db      	lsrs	r3, r3, #3
    dfd6:	f363 118f 	bfi	r1, r3, #6, #10
    dfda:	f00c ff74 	bl	1aec6 <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    dfde:	f014 0504 	ands.w	r5, r4, #4
    dfe2:	d001      	beq.n	dfe8 <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)psp;
    dfe4:	464e      	mov	r6, r9
	*nested_exc = false;
    dfe6:	2500      	movs	r5, #0
	*recoverable = false;
    dfe8:	2300      	movs	r3, #0
    dfea:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    dfee:	1efb      	subs	r3, r7, #3
    dff0:	2b09      	cmp	r3, #9
    dff2:	f200 8082 	bhi.w	e0fa <z_arm_fault+0x172>
    dff6:	e8df f003 	tbb	[pc, r3]
    dffa:	6b07      	.short	0x6b07
    dffc:	80804e6f 	.word	0x80804e6f
    e000:	73808080 	.word	0x73808080
		return NULL;
    e004:	462e      	mov	r6, r5
    e006:	e7ef      	b.n	dfe8 <z_arm_fault+0x60>
	PR_FAULT_INFO("***** HARD FAULT *****");
    e008:	2301      	movs	r3, #1
    e00a:	f04f 0100 	mov.w	r1, #0
	*recoverable = false;
    e00e:	f04f 0800 	mov.w	r8, #0
	PR_FAULT_INFO("***** HARD FAULT *****");
    e012:	f363 0107 	bfi	r1, r3, #0, #8
    e016:	4f49      	ldr	r7, [pc, #292]	; (e13c <z_arm_fault+0x1b4>)
    e018:	4b47      	ldr	r3, [pc, #284]	; (e138 <z_arm_fault+0x1b0>)
    e01a:	484a      	ldr	r0, [pc, #296]	; (e144 <z_arm_fault+0x1bc>)
    e01c:	1aff      	subs	r7, r7, r3
    e01e:	f3c7 07c9 	ubfx	r7, r7, #3, #10
    e022:	f367 118f 	bfi	r1, r7, #6, #10
    e026:	f00c ff4e 	bl	1aec6 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    e02a:	4b42      	ldr	r3, [pc, #264]	; (e134 <z_arm_fault+0x1ac>)
	*recoverable = false;
    e02c:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    e030:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    e032:	f014 0402 	ands.w	r4, r4, #2
    e036:	d00b      	beq.n	e050 <z_arm_fault+0xc8>
		PR_EXC("  Bus fault on vector table read");
    e038:	f04f 0100 	mov.w	r1, #0
    e03c:	2301      	movs	r3, #1
    e03e:	4842      	ldr	r0, [pc, #264]	; (e148 <z_arm_fault+0x1c0>)
    e040:	f363 0107 	bfi	r1, r3, #0, #8
    e044:	f367 118f 	bfi	r1, r7, #6, #10
	PR_FAULT_INFO(
    e048:	f00c ff3d 	bl	1aec6 <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    e04c:	2400      	movs	r4, #0
    e04e:	e025      	b.n	e09c <z_arm_fault+0x114>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    e050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    e052:	005b      	lsls	r3, r3, #1
    e054:	d522      	bpl.n	e09c <z_arm_fault+0x114>
		PR_EXC("  Fault escalation (see below)");
    e056:	2301      	movs	r3, #1
    e058:	f04f 0100 	mov.w	r1, #0
    e05c:	f363 0107 	bfi	r1, r3, #0, #8
    e060:	f367 118f 	bfi	r1, r7, #6, #10
    e064:	4839      	ldr	r0, [pc, #228]	; (e14c <z_arm_fault+0x1c4>)
    e066:	f00c ff2e 	bl	1aec6 <log_0>
		if (SCB_MMFSR != 0) {
    e06a:	4b39      	ldr	r3, [pc, #228]	; (e150 <z_arm_fault+0x1c8>)
    e06c:	781b      	ldrb	r3, [r3, #0]
    e06e:	b12b      	cbz	r3, e07c <z_arm_fault+0xf4>
			reason = mem_manage_fault(esf, 1, recoverable);
    e070:	2001      	movs	r0, #1
    e072:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    e076:	f7ff fe69 	bl	dd4c <mem_manage_fault.isra.4>
    e07a:	e00e      	b.n	e09a <z_arm_fault+0x112>
		} else if (SCB_BFSR != 0) {
    e07c:	4b35      	ldr	r3, [pc, #212]	; (e154 <z_arm_fault+0x1cc>)
    e07e:	781b      	ldrb	r3, [r3, #0]
    e080:	b12b      	cbz	r3, e08e <z_arm_fault+0x106>
			reason = bus_fault(esf, 1, recoverable);
    e082:	2001      	movs	r0, #1
    e084:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    e088:	f7ff fee8 	bl	de5c <bus_fault.isra.5>
    e08c:	e005      	b.n	e09a <z_arm_fault+0x112>
		} else if (SCB_UFSR != 0) {
    e08e:	4b32      	ldr	r3, [pc, #200]	; (e158 <z_arm_fault+0x1d0>)
    e090:	881b      	ldrh	r3, [r3, #0]
    e092:	b29b      	uxth	r3, r3
    e094:	b113      	cbz	r3, e09c <z_arm_fault+0x114>
			reason = usage_fault(esf);
    e096:	f7ff fdc7 	bl	dc28 <usage_fault.isra.2>
    e09a:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    e09c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e0a0:	b99b      	cbnz	r3, e0ca <z_arm_fault+0x142>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    e0a2:	2268      	movs	r2, #104	; 0x68
    e0a4:	4631      	mov	r1, r6
    e0a6:	a802      	add	r0, sp, #8
    e0a8:	f00d feb4 	bl	1be14 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    e0ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e0ae:	2d00      	cmp	r5, #0
    e0b0:	d03a      	beq.n	e128 <z_arm_fault+0x1a0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    e0b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
    e0b6:	b922      	cbnz	r2, e0c2 <z_arm_fault+0x13a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    e0b8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    e0bc:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    e0c0:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    e0c2:	a902      	add	r1, sp, #8
    e0c4:	4620      	mov	r0, r4
    e0c6:	f7ff fcb1 	bl	da2c <z_arm_fatal_error>
}
    e0ca:	b01d      	add	sp, #116	; 0x74
    e0cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    e0d0:	f10d 0107 	add.w	r1, sp, #7
    e0d4:	2000      	movs	r0, #0
    e0d6:	e7ce      	b.n	e076 <z_arm_fault+0xee>
		reason = bus_fault(esf, 0, recoverable);
    e0d8:	f10d 0107 	add.w	r1, sp, #7
    e0dc:	2000      	movs	r0, #0
    e0de:	e7d3      	b.n	e088 <z_arm_fault+0x100>
	PR_FAULT_INFO(
    e0e0:	2301      	movs	r3, #1
    e0e2:	f04f 0100 	mov.w	r1, #0
    e0e6:	4a14      	ldr	r2, [pc, #80]	; (e138 <z_arm_fault+0x1b0>)
    e0e8:	f363 0107 	bfi	r1, r3, #0, #8
    e0ec:	4b13      	ldr	r3, [pc, #76]	; (e13c <z_arm_fault+0x1b4>)
    e0ee:	481b      	ldr	r0, [pc, #108]	; (e15c <z_arm_fault+0x1d4>)
    e0f0:	1a9b      	subs	r3, r3, r2
    e0f2:	08db      	lsrs	r3, r3, #3
    e0f4:	f363 118f 	bfi	r1, r3, #6, #10
    e0f8:	e7a6      	b.n	e048 <z_arm_fault+0xc0>
	PR_FAULT_INFO("***** %s %d) *****",
    e0fa:	2201      	movs	r2, #1
    e0fc:	f04f 0300 	mov.w	r3, #0
    e100:	490e      	ldr	r1, [pc, #56]	; (e13c <z_arm_fault+0x1b4>)
    e102:	f362 0307 	bfi	r3, r2, #0, #8
    e106:	4a0c      	ldr	r2, [pc, #48]	; (e138 <z_arm_fault+0x1b0>)
    e108:	4815      	ldr	r0, [pc, #84]	; (e160 <z_arm_fault+0x1d8>)
    e10a:	1a89      	subs	r1, r1, r2
    e10c:	08c9      	lsrs	r1, r1, #3
    e10e:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    e112:	f361 138f 	bfi	r3, r1, #6, #10
    e116:	f1a7 0210 	sub.w	r2, r7, #16
    e11a:	4912      	ldr	r1, [pc, #72]	; (e164 <z_arm_fault+0x1dc>)
    e11c:	bf18      	it	ne
    e11e:	4601      	movne	r1, r0
    e120:	4811      	ldr	r0, [pc, #68]	; (e168 <z_arm_fault+0x1e0>)
    e122:	f00c fef1 	bl	1af08 <log_2>
    e126:	e791      	b.n	e04c <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    e128:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    e12c:	f023 0301 	bic.w	r3, r3, #1
    e130:	e7c6      	b.n	e0c0 <z_arm_fault+0x138>
    e132:	bf00      	nop
    e134:	e000ed00 	.word	0xe000ed00
    e138:	0001d954 	.word	0x0001d954
    e13c:	0001d9cc 	.word	0x0001d9cc
    e140:	0001e6b3 	.word	0x0001e6b3
    e144:	0001e6d6 	.word	0x0001e6d6
    e148:	0001e6ed 	.word	0x0001e6ed
    e14c:	0001e70e 	.word	0x0001e70e
    e150:	e000ed28 	.word	0xe000ed28
    e154:	e000ed29 	.word	0xe000ed29
    e158:	e000ed2a 	.word	0xe000ed2a
    e15c:	0001e72d 	.word	0x0001e72d
    e160:	0001e778 	.word	0x0001e778
    e164:	0001e763 	.word	0x0001e763
    e168:	0001e791 	.word	0x0001e791

0000e16c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    e16c:	4a02      	ldr	r2, [pc, #8]	; (e178 <z_arm_fault_init+0xc>)
    e16e:	6953      	ldr	r3, [r2, #20]
    e170:	f043 0310 	orr.w	r3, r3, #16
    e174:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    e176:	4770      	bx	lr
    e178:	e000ed00 	.word	0xe000ed00

0000e17c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    e17c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    e180:	4905      	ldr	r1, [pc, #20]	; (e198 <sys_arch_reboot+0x1c>)
    e182:	4b06      	ldr	r3, [pc, #24]	; (e19c <sys_arch_reboot+0x20>)
    e184:	68ca      	ldr	r2, [r1, #12]
    e186:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    e18a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    e18c:	60cb      	str	r3, [r1, #12]
    e18e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    e192:	bf00      	nop
    e194:	e7fd      	b.n	e192 <sys_arch_reboot+0x16>
    e196:	bf00      	nop
    e198:	e000ed00 	.word	0xe000ed00
    e19c:	05fa0004 	.word	0x05fa0004

0000e1a0 <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
    e1a0:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e1a2:	2120      	movs	r1, #32
    e1a4:	4803      	ldr	r0, [pc, #12]	; (e1b4 <z_arm_int_lib_init+0x14>)
    e1a6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    e1a8:	3301      	adds	r3, #1
    e1aa:	2b41      	cmp	r3, #65	; 0x41
    e1ac:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    e1b0:	d1f9      	bne.n	e1a6 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    e1b2:	4770      	bx	lr
    e1b4:	e000e100 	.word	0xe000e100

0000e1b8 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    e1b8:	b538      	push	{r3, r4, r5, lr}
    e1ba:	4605      	mov	r5, r0
	__asm__ volatile(
    e1bc:	f04f 0320 	mov.w	r3, #32
    e1c0:	f3ef 8411 	mrs	r4, BASEPRI
    e1c4:	f383 8811 	msr	BASEPRI, r3
    e1c8:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    e1cc:	f00b fdce 	bl	19d6c <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    e1d0:	4b0a      	ldr	r3, [pc, #40]	; (e1fc <z_impl_k_thread_abort+0x44>)
    e1d2:	689b      	ldr	r3, [r3, #8]
    e1d4:	42ab      	cmp	r3, r5
    e1d6:	d10b      	bne.n	e1f0 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    e1d8:	4b09      	ldr	r3, [pc, #36]	; (e200 <z_impl_k_thread_abort+0x48>)
    e1da:	685a      	ldr	r2, [r3, #4]
    e1dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
    e1e0:	b912      	cbnz	r2, e1e8 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    e1e2:	4620      	mov	r0, r4
    e1e4:	f7ff fb06 	bl	d7f4 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    e1e8:	685a      	ldr	r2, [r3, #4]
    e1ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    e1ee:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    e1f0:	4620      	mov	r0, r4
}
    e1f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    e1f6:	f00e bfd5 	b.w	1d1a4 <z_reschedule_irqlock>
    e1fa:	bf00      	nop
    e1fc:	20021cfc 	.word	0x20021cfc
    e200:	e000ed00 	.word	0xe000ed00

0000e204 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    e204:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    e206:	4b0e      	ldr	r3, [pc, #56]	; (e240 <z_arm_configure_static_mpu_regions+0x3c>)
{
    e208:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    e20a:	9302      	str	r3, [sp, #8]
    e20c:	4b0d      	ldr	r3, [pc, #52]	; (e244 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e20e:	4c0e      	ldr	r4, [pc, #56]	; (e248 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    e210:	9303      	str	r3, [sp, #12]
    e212:	4b0e      	ldr	r3, [pc, #56]	; (e24c <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e214:	4a0e      	ldr	r2, [pc, #56]	; (e250 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    e216:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    e218:	ab02      	add	r3, sp, #8
    e21a:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e21c:	a801      	add	r0, sp, #4
    e21e:	4623      	mov	r3, r4
    e220:	2101      	movs	r1, #1
    e222:	f000 f951 	bl	e4c8 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    e226:	2300      	movs	r3, #0
    e228:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    e22a:	4b0a      	ldr	r3, [pc, #40]	; (e254 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e22c:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    e22e:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e230:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    e232:	9305      	str	r3, [sp, #20]
    e234:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e236:	f000 f951 	bl	e4dc <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    e23a:	b008      	add	sp, #32
    e23c:	bd10      	pop	{r4, pc}
    e23e:	bf00      	nop
    e240:	20020000 	.word	0x20020000
    e244:	00000000 	.word	0x00000000
    e248:	20040000 	.word	0x20040000
    e24c:	00010006 	.word	0x00010006
    e250:	20020000 	.word	0x20020000
    e254:	20020000 	.word	0x20020000

0000e258 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    e258:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e25a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    e25c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e25e:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    e262:	f004 031f 	and.w	r3, r4, #31
    e266:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e268:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e26a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e26c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    e270:	4904      	ldr	r1, [pc, #16]	; (e284 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e272:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    e276:	f043 0301 	orr.w	r3, r3, #1
    e27a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    e27c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    e27e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    e280:	bd10      	pop	{r4, pc}
    e282:	bf00      	nop
    e284:	e000ed90 	.word	0xe000ed90

0000e288 <region_allocate_and_init.part.0>:
#include <arm_mpu_v8_internal.h>
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const u8_t index,
    e288:	b508      	push	{r3, lr}
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e28a:	f04f 0200 	mov.w	r2, #0
    e28e:	2301      	movs	r3, #1
    e290:	4907      	ldr	r1, [pc, #28]	; (e2b0 <region_allocate_and_init.part.0+0x28>)
    e292:	f363 0207 	bfi	r2, r3, #0, #8
    e296:	4b07      	ldr	r3, [pc, #28]	; (e2b4 <region_allocate_and_init.part.0+0x2c>)
    e298:	1a5b      	subs	r3, r3, r1
    e29a:	08db      	lsrs	r3, r3, #3
    e29c:	4601      	mov	r1, r0
    e29e:	f363 128f 	bfi	r2, r3, #6, #10
    e2a2:	4805      	ldr	r0, [pc, #20]	; (e2b8 <region_allocate_and_init.part.0+0x30>)
    e2a4:	f00c fe1c 	bl	1aee0 <log_1>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    e2a8:	f06f 0015 	mvn.w	r0, #21
    e2ac:	bd08      	pop	{r3, pc}
    e2ae:	bf00      	nop
    e2b0:	0001d954 	.word	0x0001d954
    e2b4:	0001d9bc 	.word	0x0001d9bc
    e2b8:	0001e7ee 	.word	0x0001e7ee

0000e2bc <mpu_configure_regions_and_partition.constprop.2>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    e2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e2c0:	4607      	mov	r7, r0
    e2c2:	4688      	mov	r8, r1
    e2c4:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    e2c6:	2600      	movs	r6, #0
	MPU->RNR = index;
    e2c8:	4d5e      	ldr	r5, [pc, #376]	; (e444 <mpu_configure_regions_and_partition.constprop.2+0x188>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    e2ca:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    e2cc:	4546      	cmp	r6, r8
    e2ce:	da3d      	bge.n	e34c <mpu_configure_regions_and_partition.constprop.2+0x90>
		if (regions[i]->size == 0U) {
    e2d0:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
    e2d4:	f8d3 9004 	ldr.w	r9, [r3, #4]
    e2d8:	f1b9 0f00 	cmp.w	r9, #0
    e2dc:	d059      	beq.n	e392 <mpu_configure_regions_and_partition.constprop.2+0xd6>
		&&
    e2de:	f1b9 0f1f 	cmp.w	r9, #31
    e2e2:	d922      	bls.n	e32a <mpu_configure_regions_and_partition.constprop.2+0x6e>
		&&
    e2e4:	f019 0f1f 	tst.w	r9, #31
    e2e8:	d11f      	bne.n	e32a <mpu_configure_regions_and_partition.constprop.2+0x6e>
		((part->start &
    e2ea:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    e2ee:	f01a 0f1f 	tst.w	sl, #31
    e2f2:	d11a      	bne.n	e32a <mpu_configure_regions_and_partition.constprop.2+0x6e>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e2f4:	4650      	mov	r0, sl
    e2f6:	f00d fbff 	bl	1baf8 <arm_cmse_mpu_region_get>
    e2fa:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e2fc:	eb09 000a 	add.w	r0, r9, sl
    e300:	3801      	subs	r0, #1
    e302:	f00d fbf9 	bl	1baf8 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e306:	4583      	cmp	fp, r0
    e308:	d024      	beq.n	e354 <mpu_configure_regions_and_partition.constprop.2+0x98>
	return -EINVAL;
    e30a:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    e30e:	2301      	movs	r3, #1
    e310:	f04f 0200 	mov.w	r2, #0
    e314:	494c      	ldr	r1, [pc, #304]	; (e448 <mpu_configure_regions_and_partition.constprop.2+0x18c>)
    e316:	f363 0207 	bfi	r2, r3, #0, #8
    e31a:	4b4c      	ldr	r3, [pc, #304]	; (e44c <mpu_configure_regions_and_partition.constprop.2+0x190>)
    e31c:	484c      	ldr	r0, [pc, #304]	; (e450 <mpu_configure_regions_and_partition.constprop.2+0x194>)
    e31e:	1a5b      	subs	r3, r3, r1
    e320:	08db      	lsrs	r3, r3, #3
    e322:	f363 128f 	bfi	r2, r3, #6, #10
    e326:	4659      	mov	r1, fp
    e328:	e00c      	b.n	e344 <mpu_configure_regions_and_partition.constprop.2+0x88>
			LOG_ERR("Partition %u: sanity check failed.", i);
    e32a:	2301      	movs	r3, #1
    e32c:	f04f 0200 	mov.w	r2, #0
    e330:	4945      	ldr	r1, [pc, #276]	; (e448 <mpu_configure_regions_and_partition.constprop.2+0x18c>)
    e332:	f363 0207 	bfi	r2, r3, #0, #8
    e336:	4b45      	ldr	r3, [pc, #276]	; (e44c <mpu_configure_regions_and_partition.constprop.2+0x190>)
    e338:	4846      	ldr	r0, [pc, #280]	; (e454 <mpu_configure_regions_and_partition.constprop.2+0x198>)
    e33a:	1a5b      	subs	r3, r3, r1
    e33c:	4631      	mov	r1, r6
    e33e:	08db      	lsrs	r3, r3, #3
    e340:	f363 128f 	bfi	r2, r3, #6, #10
			LOG_ERR("Invalid underlying region index %u",
    e344:	f00c fdcc 	bl	1aee0 <log_1>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    e348:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    e34c:	4620      	mov	r0, r4
    e34e:	b005      	add	sp, #20
    e350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    e354:	f11b 0f16 	cmn.w	fp, #22
    e358:	d0d9      	beq.n	e30e <mpu_configure_regions_and_partition.constprop.2+0x52>
			(u_reg_index > (reg_index - 1))) {
    e35a:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    e35c:	455b      	cmp	r3, fp
    e35e:	dbd6      	blt.n	e30e <mpu_configure_regions_and_partition.constprop.2+0x52>
	MPU->RNR = index;
    e360:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e364:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
    e366:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e36a:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e36c:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e370:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e374:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e378:	e9d1 3200 	ldrd	r3, r2, [r1]
    e37c:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    e37e:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e380:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
    e384:	d118      	bne.n	e3b8 <mpu_configure_regions_and_partition.constprop.2+0xfc>
    e386:	45ca      	cmp	sl, r9
    e388:	d105      	bne.n	e396 <mpu_configure_regions_and_partition.constprop.2+0xda>
			mpu_configure_region(u_reg_index, regions[i]);
    e38a:	fa5f f08b 	uxtb.w	r0, fp
    e38e:	f00d fb90 	bl	1bab2 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    e392:	3601      	adds	r6, #1
    e394:	e79a      	b.n	e2cc <mpu_configure_regions_and_partition.constprop.2+0x10>
	MPU->RNR = index;
    e396:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e39a:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    e39c:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e3a0:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    e3a4:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e3a6:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    e3a8:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    e3aa:	f00d fb82 	bl	1bab2 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e3ae:	f110 0f16 	cmn.w	r0, #22
    e3b2:	d0c9      	beq.n	e348 <mpu_configure_regions_and_partition.constprop.2+0x8c>
			reg_index++;
    e3b4:	1c44      	adds	r4, r0, #1
    e3b6:	e7ec      	b.n	e392 <mpu_configure_regions_and_partition.constprop.2+0xd6>
	MPU->RNR = index;
    e3b8:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e3bc:	692a      	ldr	r2, [r5, #16]
    e3be:	3b01      	subs	r3, #1
    e3c0:	f023 031f 	bic.w	r3, r3, #31
    e3c4:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e3c8:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    e3ca:	45ca      	cmp	sl, r9
    e3cc:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e3ce:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    e3d0:	d0eb      	beq.n	e3aa <mpu_configure_regions_and_partition.constprop.2+0xee>
				mpu_configure_region(reg_index, regions[i]);
    e3d2:	f00d fb6e 	bl	1bab2 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e3d6:	f110 0f16 	cmn.w	r0, #22
    e3da:	d0b5      	beq.n	e348 <mpu_configure_regions_and_partition.constprop.2+0x8c>
	MPU->RNR = index;
    e3dc:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    e3e0:	68ea      	ldr	r2, [r5, #12]
    e3e2:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    e3e6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
    e3ea:	f362 0304 	bfi	r3, r2, #0, #5
    e3ee:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e3f2:	692b      	ldr	r3, [r5, #16]
    e3f4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e3f8:	085b      	lsrs	r3, r3, #1
    e3fa:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
    e3fe:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e402:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    e406:	e9d3 1300 	ldrd	r1, r3, [r3]
    e40a:	440b      	add	r3, r1
    e40c:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    e40e:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    e412:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
    e414:	4453      	add	r3, sl
    e416:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
    e41a:	b2e4      	uxtb	r4, r4
			REGION_LIMIT_ADDR((regions[i]->start +
    e41c:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    e420:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
    e422:	9303      	str	r3, [sp, #12]
    e424:	d908      	bls.n	e438 <mpu_configure_regions_and_partition.constprop.2+0x17c>
    e426:	4620      	mov	r0, r4
    e428:	f7ff ff2e 	bl	e288 <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
    e42c:	f110 0f16 	cmn.w	r0, #22
    e430:	4604      	mov	r4, r0
    e432:	d089      	beq.n	e348 <mpu_configure_regions_and_partition.constprop.2+0x8c>
			reg_index++;
    e434:	3401      	adds	r4, #1
    e436:	e7ac      	b.n	e392 <mpu_configure_regions_and_partition.constprop.2+0xd6>
	region_init(index, region_conf);
    e438:	4669      	mov	r1, sp
    e43a:	4620      	mov	r0, r4
    e43c:	f7ff ff0c 	bl	e258 <region_init>
			if (reg_index == -EINVAL) {
    e440:	e7f8      	b.n	e434 <mpu_configure_regions_and_partition.constprop.2+0x178>
    e442:	bf00      	nop
    e444:	e000ed90 	.word	0xe000ed90
    e448:	0001d954 	.word	0x0001d954
    e44c:	0001d9bc 	.word	0x0001d9bc
    e450:	0001e7cb 	.word	0x0001e7cb
    e454:	0001e7a8 	.word	0x0001e7a8

0000e458 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    e458:	2205      	movs	r2, #5
    e45a:	4b03      	ldr	r3, [pc, #12]	; (e468 <arm_core_mpu_enable+0x10>)
    e45c:	605a      	str	r2, [r3, #4]
    e45e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e462:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    e466:	4770      	bx	lr
    e468:	e000ed90 	.word	0xe000ed90

0000e46c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    e46c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    e470:	2200      	movs	r2, #0
    e472:	4b01      	ldr	r3, [pc, #4]	; (e478 <arm_core_mpu_disable+0xc>)
    e474:	605a      	str	r2, [r3, #4]
}
    e476:	4770      	bx	lr
    e478:	e000ed90 	.word	0xe000ed90

0000e47c <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    e47c:	b570      	push	{r4, r5, r6, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    e47e:	4d0e      	ldr	r5, [pc, #56]	; (e4b8 <arm_mpu_init+0x3c>)
    e480:	682e      	ldr	r6, [r5, #0]
    e482:	2e10      	cmp	r6, #16
    e484:	d815      	bhi.n	e4b2 <arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e486:	2400      	movs	r4, #0
	arm_core_mpu_disable();
    e488:	f7ff fff0 	bl	e46c <arm_core_mpu_disable>
	MPU->MAIR0 =
    e48c:	4b0b      	ldr	r3, [pc, #44]	; (e4bc <arm_mpu_init+0x40>)
    e48e:	4a0c      	ldr	r2, [pc, #48]	; (e4c0 <arm_mpu_init+0x44>)
    e490:	631a      	str	r2, [r3, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e492:	42a6      	cmp	r6, r4
    e494:	d105      	bne.n	e4a2 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    e496:	4b0b      	ldr	r3, [pc, #44]	; (e4c4 <arm_mpu_init+0x48>)
    e498:	701e      	strb	r6, [r3, #0]


	arm_core_mpu_enable();
    e49a:	f7ff ffdd 	bl	e458 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    e49e:	2000      	movs	r0, #0
}
    e4a0:	bd70      	pop	{r4, r5, r6, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    e4a2:	6869      	ldr	r1, [r5, #4]
    e4a4:	4620      	mov	r0, r4
    e4a6:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    e4aa:	f7ff fed5 	bl	e258 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e4ae:	3401      	adds	r4, #1
    e4b0:	e7ef      	b.n	e492 <arm_mpu_init+0x16>
		return -1;
    e4b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e4b6:	e7f3      	b.n	e4a0 <arm_mpu_init+0x24>
    e4b8:	0001da98 	.word	0x0001da98
    e4bc:	e000ed90 	.word	0xe000ed90
    e4c0:	0044ffaa 	.word	0x0044ffaa
    e4c4:	2002232a 	.word	0x2002232a

0000e4c8 <arm_core_mpu_configure_static_mpu_regions>:
{
    e4c8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    e4ca:	4c03      	ldr	r4, [pc, #12]	; (e4d8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    e4cc:	7822      	ldrb	r2, [r4, #0]
    e4ce:	f7ff fef5 	bl	e2bc <mpu_configure_regions_and_partition.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    e4d2:	7020      	strb	r0, [r4, #0]
}
    e4d4:	bd10      	pop	{r4, pc}
    e4d6:	bf00      	nop
    e4d8:	2002232a 	.word	0x2002232a

0000e4dc <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    e4dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e4e0:	4c25      	ldr	r4, [pc, #148]	; (e578 <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>)
    e4e2:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e4e4:	4680      	mov	r8, r0
    e4e6:	2700      	movs	r7, #0
    e4e8:	46a1      	mov	r9, r4
	attr->rbar = MPU->RBAR &
    e4ea:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
    e4ee:	4d23      	ldr	r5, [pc, #140]	; (e57c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e4f0:	4557      	cmp	r7, sl
    e4f2:	da1a      	bge.n	e52a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    e4f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    e4f8:	9301      	str	r3, [sp, #4]
    e4fa:	2b00      	cmp	r3, #0
    e4fc:	d036      	beq.n	e56c <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    e4fe:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e502:	4608      	mov	r0, r1
    e504:	9100      	str	r1, [sp, #0]
    e506:	f00d faf7 	bl	1baf8 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e50a:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e50e:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e510:	1858      	adds	r0, r3, r1
    e512:	3801      	subs	r0, #1
    e514:	f00d faf0 	bl	1baf8 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e518:	4286      	cmp	r6, r0
    e51a:	4a19      	ldr	r2, [pc, #100]	; (e580 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
    e51c:	d008      	beq.n	e530 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    e51e:	2314      	movs	r3, #20
    e520:	435f      	muls	r7, r3
    e522:	f06f 0315 	mvn.w	r3, #21
    e526:	f849 3007 	str.w	r3, [r9, r7]
}
    e52a:	b003      	add	sp, #12
    e52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    e530:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
    e534:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    e536:	d0f8      	beq.n	e52a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    e538:	7813      	ldrb	r3, [r2, #0]
    e53a:	42b3      	cmp	r3, r6
    e53c:	ddf5      	ble.n	e52a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    e53e:	fb0b 9307 	mla	r3, fp, r7, r9
	MPU->RNR = index;
    e542:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
    e544:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
    e546:	68e8      	ldr	r0, [r5, #12]
    e548:	7b19      	ldrb	r1, [r3, #12]
    e54a:	f360 0104 	bfi	r1, r0, #0, #5
    e54e:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e550:	6929      	ldr	r1, [r5, #16]
    e552:	7b18      	ldrb	r0, [r3, #12]
    e554:	0849      	lsrs	r1, r1, #1
    e556:	f361 1047 	bfi	r0, r1, #5, #3
    e55a:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    e55c:	68eb      	ldr	r3, [r5, #12]
    e55e:	f023 031f 	bic.w	r3, r3, #31
    e562:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    e564:	692b      	ldr	r3, [r5, #16]
    e566:	f023 031f 	bic.w	r3, r3, #31
    e56a:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e56c:	3701      	adds	r7, #1
    e56e:	3414      	adds	r4, #20
    e570:	f108 080c 	add.w	r8, r8, #12
    e574:	e7bc      	b.n	e4f0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
    e576:	bf00      	nop
    e578:	20020230 	.word	0x20020230
    e57c:	e000ed90 	.word	0xe000ed90
    e580:	2002232a 	.word	0x2002232a

0000e584 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    e584:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
    e586:	4b0c      	ldr	r3, [pc, #48]	; (e5b8 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    e588:	460e      	mov	r6, r1
    e58a:	781c      	ldrb	r4, [r3, #0]
    e58c:	4605      	mov	r5, r0
    e58e:	4623      	mov	r3, r4
  mpu->RLAR = 0U;
    e590:	2100      	movs	r1, #0
  mpu->RNR = rnr;
    e592:	4a0a      	ldr	r2, [pc, #40]	; (e5bc <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    e594:	2b0f      	cmp	r3, #15
    e596:	dd0b      	ble.n	e5b0 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>
#if defined(CONFIG_MPU_GAP_FILLING)
	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
    e598:	4909      	ldr	r1, [pc, #36]	; (e5c0 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    e59a:	f851 0b04 	ldr.w	r0, [r1], #4
    e59e:	f7ff fe5b 	bl	e258 <region_init>

	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */
	mpu_reg_index = mpu_configure_regions_and_partition(dynamic_regions,
    e5a2:	4622      	mov	r2, r4
    e5a4:	4631      	mov	r1, r6
    e5a6:	4628      	mov	r0, r5
}
    e5a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e5ac:	f7ff be86 	b.w	e2bc <mpu_configure_regions_and_partition.constprop.2>
    e5b0:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    e5b2:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    e5b4:	3301      	adds	r3, #1
    e5b6:	e7ed      	b.n	e594 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
    e5b8:	2002232a 	.word	0x2002232a
    e5bc:	e000ed90 	.word	0xe000ed90
    e5c0:	20020230 	.word	0x20020230

0000e5c4 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
    e5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e5c8:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
    e5ca:	2300      	movs	r3, #0
{
    e5cc:	b0a3      	sub	sp, #140	; 0x8c
    e5ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
	count = 0;
    e5d2:	9301      	str	r3, [sp, #4]

	while ((c = *format++)) {
    e5d4:	4613      	mov	r3, r2
    e5d6:	f813 0b01 	ldrb.w	r0, [r3], #1
    e5da:	9308      	str	r3, [sp, #32]
    e5dc:	b158      	cbz	r0, e5f6 <z_prf+0x32>
		if (c != '%') {
    e5de:	2825      	cmp	r0, #37	; 0x25
    e5e0:	f000 8085 	beq.w	e6ee <z_prf+0x12a>
			PUTC(c);
    e5e4:	9903      	ldr	r1, [sp, #12]
    e5e6:	9b02      	ldr	r3, [sp, #8]
    e5e8:	4798      	blx	r3
    e5ea:	3001      	adds	r0, #1
    e5ec:	f040 841a 	bne.w	ee24 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3c4>
    e5f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e5f4:	9301      	str	r3, [sp, #4]
		}
	}
	return count;

#undef PUTC
}
    e5f6:	9801      	ldr	r0, [sp, #4]
    e5f8:	b023      	add	sp, #140	; 0x8c
    e5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
    e5fe:	2c23      	cmp	r4, #35	; 0x23
    e600:	d06c      	beq.n	e6dc <z_prf+0x118>
    e602:	d861      	bhi.n	e6c8 <z_prf+0x104>
    e604:	2c00      	cmp	r4, #0
    e606:	d0f6      	beq.n	e5f6 <z_prf+0x32>
					fspace = true;
    e608:	2c20      	cmp	r4, #32
    e60a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e60c:	bf08      	it	eq
    e60e:	2301      	moveq	r3, #1
    e610:	930e      	str	r3, [sp, #56]	; 0x38
					fminus = true;
    e612:	f8cd 8020 	str.w	r8, [sp, #32]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    e616:	f8dd 8020 	ldr.w	r8, [sp, #32]
    e61a:	48b7      	ldr	r0, [pc, #732]	; (e8f8 <z_prf+0x334>)
    e61c:	f818 4b01 	ldrb.w	r4, [r8], #1
    e620:	4621      	mov	r1, r4
    e622:	f00d fbb7 	bl	1bd94 <strchr>
    e626:	2800      	cmp	r0, #0
    e628:	d1e9      	bne.n	e5fe <z_prf+0x3a>
			if (c == '*') {
    e62a:	2c2a      	cmp	r4, #42	; 0x2a
    e62c:	d166      	bne.n	e6fc <z_prf+0x138>
				width = va_arg(vargs, int);
    e62e:	f856 3b04 	ldr.w	r3, [r6], #4
				c = *format++;
    e632:	f898 4000 	ldrb.w	r4, [r8]
				if (width < 0) {
    e636:	2b00      	cmp	r3, #0
				width = va_arg(vargs, int);
    e638:	9309      	str	r3, [sp, #36]	; 0x24
					width = -width;
    e63a:	bfbf      	itttt	lt
    e63c:	425b      	neglt	r3, r3
    e63e:	9309      	strlt	r3, [sp, #36]	; 0x24
					fminus = true;
    e640:	2301      	movlt	r3, #1
    e642:	930f      	strlt	r3, [sp, #60]	; 0x3c
				c = *format++;
    e644:	9b08      	ldr	r3, [sp, #32]
    e646:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
    e64a:	2c2e      	cmp	r4, #46	; 0x2e
    e64c:	d17b      	bne.n	e746 <z_prf+0x182>
				if (c == '*') {
    e64e:	f898 3000 	ldrb.w	r3, [r8]
    e652:	2b2a      	cmp	r3, #42	; 0x2a
    e654:	d174      	bne.n	e740 <z_prf+0x17c>
					precision = va_arg(vargs, int);
    e656:	f856 5b04 	ldr.w	r5, [r6], #4
				c = *format++;
    e65a:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
    e65e:	f818 4b01 	ldrb.w	r4, [r8], #1
			if (strchr("hlz", c) != NULL) {
    e662:	4621      	mov	r1, r4
    e664:	48a5      	ldr	r0, [pc, #660]	; (e8fc <z_prf+0x338>)
    e666:	4627      	mov	r7, r4
    e668:	f00d fb94 	bl	1bd94 <strchr>
    e66c:	2800      	cmp	r0, #0
    e66e:	d06d      	beq.n	e74c <z_prf+0x188>
				c = *format++;
    e670:	4643      	mov	r3, r8
    e672:	f813 4b01 	ldrb.w	r4, [r3], #1
				} else if (i == 'h' && c == 'h') {
    e676:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
    e678:	9308      	str	r3, [sp, #32]
				} else if (i == 'h' && c == 'h') {
    e67a:	d107      	bne.n	e68c <z_prf+0xc8>
    e67c:	2c68      	cmp	r4, #104	; 0x68
    e67e:	d105      	bne.n	e68c <z_prf+0xc8>
					i = 'H';
    e680:	2748      	movs	r7, #72	; 0x48
					c = *format++;
    e682:	f108 0302 	add.w	r3, r8, #2
    e686:	f898 4001 	ldrb.w	r4, [r8, #1]
    e68a:	9308      	str	r3, [sp, #32]
			switch (c) {
    e68c:	2c67      	cmp	r4, #103	; 0x67
    e68e:	d87b      	bhi.n	e788 <z_prf+0x1c4>
    e690:	2c65      	cmp	r4, #101	; 0x65
    e692:	f080 8135 	bcs.w	e900 <z_prf+0x33c>
    e696:	2c47      	cmp	r4, #71	; 0x47
    e698:	d85c      	bhi.n	e754 <z_prf+0x190>
    e69a:	2c45      	cmp	r4, #69	; 0x45
    e69c:	f080 8130 	bcs.w	e900 <z_prf+0x33c>
    e6a0:	2c00      	cmp	r4, #0
    e6a2:	d0a8      	beq.n	e5f6 <z_prf+0x32>
    e6a4:	2c25      	cmp	r4, #37	; 0x25
    e6a6:	f000 83b9 	beq.w	ee1c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3bc>
				PUTC('%');
    e6aa:	9903      	ldr	r1, [sp, #12]
    e6ac:	2025      	movs	r0, #37	; 0x25
    e6ae:	9b02      	ldr	r3, [sp, #8]
    e6b0:	4798      	blx	r3
    e6b2:	3001      	adds	r0, #1
    e6b4:	d09c      	beq.n	e5f0 <z_prf+0x2c>
				PUTC(c);
    e6b6:	9903      	ldr	r1, [sp, #12]
    e6b8:	4620      	mov	r0, r4
    e6ba:	9b02      	ldr	r3, [sp, #8]
    e6bc:	4798      	blx	r3
    e6be:	3001      	adds	r0, #1
    e6c0:	d096      	beq.n	e5f0 <z_prf+0x2c>
				count += 2;
    e6c2:	9b01      	ldr	r3, [sp, #4]
    e6c4:	3302      	adds	r3, #2
    e6c6:	e3af      	b.n	ee28 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3c8>
				switch (c) {
    e6c8:	2c2d      	cmp	r4, #45	; 0x2d
    e6ca:	d00a      	beq.n	e6e2 <z_prf+0x11e>
    e6cc:	2c30      	cmp	r4, #48	; 0x30
    e6ce:	d00b      	beq.n	e6e8 <z_prf+0x124>
					fplus = true;
    e6d0:	2c2b      	cmp	r4, #43	; 0x2b
    e6d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e6d4:	bf08      	it	eq
    e6d6:	2301      	moveq	r3, #1
    e6d8:	930b      	str	r3, [sp, #44]	; 0x2c
    e6da:	e79a      	b.n	e612 <z_prf+0x4e>
					falt = true;
    e6dc:	f04f 0b01 	mov.w	fp, #1
    e6e0:	e797      	b.n	e612 <z_prf+0x4e>
					fminus = true;
    e6e2:	2301      	movs	r3, #1
    e6e4:	930f      	str	r3, [sp, #60]	; 0x3c
    e6e6:	e794      	b.n	e612 <z_prf+0x4e>
					fzero = true;
    e6e8:	2301      	movs	r3, #1
    e6ea:	930a      	str	r3, [sp, #40]	; 0x28
    e6ec:	e791      	b.n	e612 <z_prf+0x4e>
			fminus = fplus = fspace = falt = fzero = false;
    e6ee:	2300      	movs	r3, #0
    e6f0:	930a      	str	r3, [sp, #40]	; 0x28
    e6f2:	930e      	str	r3, [sp, #56]	; 0x38
    e6f4:	930b      	str	r3, [sp, #44]	; 0x2c
    e6f6:	930f      	str	r3, [sp, #60]	; 0x3c
    e6f8:	469b      	mov	fp, r3
    e6fa:	e78c      	b.n	e616 <z_prf+0x52>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    e6fc:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
    e700:	2b09      	cmp	r3, #9
				width = 0;
    e702:	9009      	str	r0, [sp, #36]	; 0x24
			} else if (!isdigit(c)) {
    e704:	d8a1      	bhi.n	e64a <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    e706:	220a      	movs	r2, #10
	while (isdigit(*p)) {
    e708:	f8dd 8020 	ldr.w	r8, [sp, #32]
    e70c:	f818 4b01 	ldrb.w	r4, [r8], #1
    e710:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    e714:	2b09      	cmp	r3, #9
    e716:	d898      	bhi.n	e64a <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    e718:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e71a:	fb02 4403 	mla	r4, r2, r3, r4
    e71e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    e722:	e9cd 8308 	strd	r8, r3, [sp, #32]
    e726:	e7ef      	b.n	e708 <z_prf+0x144>
    e728:	4690      	mov	r8, r2
    e72a:	fb01 3505 	mla	r5, r1, r5, r3
    e72e:	3d30      	subs	r5, #48	; 0x30
	while (isdigit(*p)) {
    e730:	4642      	mov	r2, r8
    e732:	f812 3b01 	ldrb.w	r3, [r2], #1
    e736:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    e73a:	2809      	cmp	r0, #9
    e73c:	d9f4      	bls.n	e728 <z_prf+0x164>
    e73e:	e78e      	b.n	e65e <z_prf+0x9a>
	int i = 0;
    e740:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
    e742:	210a      	movs	r1, #10
    e744:	e7f4      	b.n	e730 <z_prf+0x16c>
			precision = -1;
    e746:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    e74a:	e78a      	b.n	e662 <z_prf+0x9e>
    e74c:	f8cd 8020 	str.w	r8, [sp, #32]
			i = 0;
    e750:	4607      	mov	r7, r0
    e752:	e79b      	b.n	e68c <z_prf+0xc8>
			switch (c) {
    e754:	2c63      	cmp	r4, #99	; 0x63
    e756:	d059      	beq.n	e80c <z_prf+0x248>
    e758:	d820      	bhi.n	e79c <z_prf+0x1d8>
    e75a:	2c58      	cmp	r4, #88	; 0x58
    e75c:	d1a5      	bne.n	e6aa <z_prf+0xe6>
				if (c == 'o') {
    e75e:	2c6f      	cmp	r4, #111	; 0x6f
    e760:	f106 0904 	add.w	r9, r6, #4
    e764:	6831      	ldr	r1, [r6, #0]
    e766:	f040 8328 	bne.w	edba <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x35a>
	if (alt_form) {
    e76a:	f1bb 0f00 	cmp.w	fp, #0
    e76e:	f000 8317 	beq.w	eda0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x340>
		*buf++ = '0';
    e772:	2330      	movs	r3, #48	; 0x30
    e774:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		if (!value) {
    e778:	2900      	cmp	r1, #0
    e77a:	f040 831b 	bne.w	edb4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x354>
			*buf++ = 0;
    e77e:	f88d 106d 	strb.w	r1, [sp, #109]	; 0x6d
			prefix = 0;
    e782:	460f      	mov	r7, r1
			return 1;
    e784:	2601      	movs	r6, #1
    e786:	e025      	b.n	e7d4 <z_prf+0x210>
			switch (c) {
    e788:	2c70      	cmp	r4, #112	; 0x70
    e78a:	f000 82f5 	beq.w	ed78 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x318>
    e78e:	d827      	bhi.n	e7e0 <z_prf+0x21c>
    e790:	2c6e      	cmp	r4, #110	; 0x6e
    e792:	f000 82de 	beq.w	ed52 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2f2>
    e796:	d8e2      	bhi.n	e75e <z_prf+0x19a>
    e798:	2c69      	cmp	r4, #105	; 0x69
    e79a:	d186      	bne.n	e6aa <z_prf+0xe6>
				switch (i) {
    e79c:	6837      	ldr	r7, [r6, #0]
    e79e:	f106 0904 	add.w	r9, r6, #4
	if (value < 0) {
    e7a2:	2f00      	cmp	r7, #0
    e7a4:	f280 809a 	bge.w	e8dc <z_prf+0x318>
		*buf++ = '-';
    e7a8:	232d      	movs	r3, #45	; 0x2d
		value = -value;
    e7aa:	4279      	negs	r1, r7
		*buf++ = '-';
    e7ac:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		*buf++ = ' ';
    e7b0:	f10d 066d 	add.w	r6, sp, #109	; 0x6d
	return _to_x(buf, value, 10);
    e7b4:	4630      	mov	r0, r6
    e7b6:	220a      	movs	r2, #10
    e7b8:	f00d fb78 	bl	1beac <_to_x>
				if (fplus || fspace || val < 0) {
    e7bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	return (buf + _to_udec(buf, value)) - start;
    e7be:	4406      	add	r6, r0
    e7c0:	a81b      	add	r0, sp, #108	; 0x6c
    e7c2:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
    e7c4:	2b00      	cmp	r3, #0
    e7c6:	f040 8332 	bne.w	ee2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3ce>
    e7ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e7cc:	2b00      	cmp	r3, #0
    e7ce:	f040 832e 	bne.w	ee2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3ce>
    e7d2:	0fff      	lsrs	r7, r7, #31
			if (precision >= 0) {
    e7d4:	2d00      	cmp	r5, #0
    e7d6:	da21      	bge.n	e81c <z_prf+0x258>
			zero.predot = zero.postdot = zero.trail = 0;
    e7d8:	2500      	movs	r5, #0
    e7da:	46ab      	mov	fp, r5
    e7dc:	46a8      	mov	r8, r5
    e7de:	e0e1      	b.n	e9a4 <z_prf+0x3e0>
			switch (c) {
    e7e0:	2c75      	cmp	r4, #117	; 0x75
    e7e2:	d0bc      	beq.n	e75e <z_prf+0x19a>
    e7e4:	2c78      	cmp	r4, #120	; 0x78
    e7e6:	d0ba      	beq.n	e75e <z_prf+0x19a>
    e7e8:	2c73      	cmp	r4, #115	; 0x73
    e7ea:	f47f af5e 	bne.w	e6aa <z_prf+0xe6>
				cptr = va_arg(vargs, char *);
    e7ee:	46b1      	mov	r9, r6
					precision = INT_MAX;
    e7f0:	2d00      	cmp	r5, #0
    e7f2:	bfb8      	it	lt
    e7f4:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
    e7f8:	2600      	movs	r6, #0
				cptr = va_arg(vargs, char *);
    e7fa:	f859 3b04 	ldr.w	r3, [r9], #4
				for (clen = 0; clen < precision; clen++) {
    e7fe:	42b5      	cmp	r5, r6
    e800:	f040 82c9 	bne.w	ed96 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x336>
    e804:	462e      	mov	r6, r5
    e806:	2500      	movs	r5, #0
    e808:	462f      	mov	r7, r5
    e80a:	e008      	b.n	e81e <z_prf+0x25a>
				break;
    e80c:	2700      	movs	r7, #0
				buf[0] = va_arg(vargs, int);
    e80e:	46b1      	mov	r9, r6
				break;
    e810:	463d      	mov	r5, r7
				clen = 1;
    e812:	2601      	movs	r6, #1
				buf[0] = va_arg(vargs, int);
    e814:	f859 3b04 	ldr.w	r3, [r9], #4
    e818:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
				break;
    e81c:	ab1b      	add	r3, sp, #108	; 0x6c
				zero_head = precision - clen + prefix;
    e81e:	19ea      	adds	r2, r5, r7
			zero.predot = zero.postdot = zero.trail = 0;
    e820:	2500      	movs	r5, #0
    e822:	46ab      	mov	fp, r5
    e824:	46a8      	mov	r8, r5
				zero_head = precision - clen + prefix;
    e826:	1b92      	subs	r2, r2, r6
			if (zero_head < 0) {
    e828:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			width -= clen + zero_head;
    e82c:	1991      	adds	r1, r2, r6
    e82e:	9106      	str	r1, [sp, #24]
    e830:	9909      	ldr	r1, [sp, #36]	; 0x24
    e832:	1990      	adds	r0, r2, r6
    e834:	1a0c      	subs	r4, r1, r0
			if (!fminus && width > 0) {
    e836:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e838:	b911      	cbnz	r1, e840 <z_prf+0x27c>
    e83a:	2c00      	cmp	r4, #0
    e83c:	f300 8314 	bgt.w	ee68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x408>
			while (prefix-- > 0) {
    e840:	eb03 0a07 	add.w	sl, r3, r7
    e844:	4553      	cmp	r3, sl
    e846:	f040 8313 	bne.w	ee70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x410>
			while (zero_head-- > 0) {
    e84a:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    e84e:	f080 831d 	bcs.w	ee8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x42c>
			clen -= prefix;
    e852:	1bf6      	subs	r6, r6, r7
			if (zero.predot) {
    e854:	f1b8 0f00 	cmp.w	r8, #0
    e858:	d011      	beq.n	e87e <z_prf+0x2ba>
				c = *cptr;
    e85a:	f89a 0000 	ldrb.w	r0, [sl]
				while (isdigit(c)) {
    e85e:	eb0a 0706 	add.w	r7, sl, r6
    e862:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    e866:	2b09      	cmp	r3, #9
    e868:	eba7 060a 	sub.w	r6, r7, sl
    e86c:	f240 8319 	bls.w	eea2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x442>
    e870:	4647      	mov	r7, r8
				while (zero.predot-- > 0) {
    e872:	f117 37ff 	adds.w	r7, r7, #4294967295	; 0xffffffff
    e876:	f080 831d 	bcs.w	eeb4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x454>
				clen -= zero.predot;
    e87a:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.postdot) {
    e87e:	f1bb 0f00 	cmp.w	fp, #0
    e882:	d015      	beq.n	e8b0 <z_prf+0x2ec>
    e884:	eb0a 0706 	add.w	r7, sl, r6
					c = *cptr++;
    e888:	f81a 8b01 	ldrb.w	r8, [sl], #1
					PUTC(c);
    e88c:	9903      	ldr	r1, [sp, #12]
    e88e:	4640      	mov	r0, r8
    e890:	9b02      	ldr	r3, [sp, #8]
    e892:	4798      	blx	r3
    e894:	3001      	adds	r0, #1
    e896:	f43f aeab 	beq.w	e5f0 <z_prf+0x2c>
				} while (c != '.');
    e89a:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
    e89e:	eba7 060a 	sub.w	r6, r7, sl
    e8a2:	d1f1      	bne.n	e888 <z_prf+0x2c4>
				while (zero.postdot-- > 0) {
    e8a4:	465f      	mov	r7, fp
    e8a6:	2f00      	cmp	r7, #0
    e8a8:	f300 830d 	bgt.w	eec6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x466>
				clen -= zero.postdot;
    e8ac:	eba6 060b 	sub.w	r6, r6, fp
			if (zero.trail) {
    e8b0:	b195      	cbz	r5, e8d8 <z_prf+0x314>
				c = *cptr;
    e8b2:	f89a 0000 	ldrb.w	r0, [sl]
				while (isdigit(c) || c == '.') {
    e8b6:	eb0a 0706 	add.w	r7, sl, r6
    e8ba:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    e8be:	2b09      	cmp	r3, #9
    e8c0:	eba7 060a 	sub.w	r6, r7, sl
    e8c4:	f240 830a 	bls.w	eedc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x47c>
    e8c8:	282e      	cmp	r0, #46	; 0x2e
    e8ca:	f000 8307 	beq.w	eedc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x47c>
				while (zero.trail-- > 0) {
    e8ce:	462f      	mov	r7, r5
    e8d0:	2f00      	cmp	r7, #0
    e8d2:	f300 830c 	bgt.w	eeee <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x48e>
				clen -= zero.trail;
    e8d6:	1b76      	subs	r6, r6, r5
    e8d8:	4456      	add	r6, sl
    e8da:	e31b      	b.n	ef14 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4b4>
	} else if (fplus) {
    e8dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e8de:	b123      	cbz	r3, e8ea <z_prf+0x326>
		*buf++ = '+';
    e8e0:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    e8e2:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    e8e6:	4639      	mov	r1, r7
    e8e8:	e762      	b.n	e7b0 <z_prf+0x1ec>
	} else if (fspace) {
    e8ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e8ec:	b10b      	cbz	r3, e8f2 <z_prf+0x32e>
		*buf++ = ' ';
    e8ee:	2320      	movs	r3, #32
    e8f0:	e7f7      	b.n	e8e2 <z_prf+0x31e>
	} else if (fspace) {
    e8f2:	4639      	mov	r1, r7
    e8f4:	ae1b      	add	r6, sp, #108	; 0x6c
    e8f6:	e75d      	b.n	e7b4 <z_prf+0x1f0>
    e8f8:	0001e814 	.word	0x0001e814
    e8fc:	0001e81a 	.word	0x0001e81a
				u.d = va_arg(vargs, double);
    e900:	f106 0907 	add.w	r9, r6, #7
    e904:	f029 0907 	bic.w	r9, r9, #7
    e908:	e8f9 2302 	ldrd	r2, r3, [r9], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
    e90c:	02d8      	lsls	r0, r3, #11
    e90e:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
    e912:	02d6      	lsls	r6, r2, #11
    e914:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
	if (sign) {
    e918:	2a00      	cmp	r2, #0
	exp = double_temp >> 52 & 0x7ff;
    e91a:	f3c3 510a 	ubfx	r1, r3, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
    e91e:	9604      	str	r6, [sp, #16]
    e920:	9005      	str	r0, [sp, #20]
	if (sign) {
    e922:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
    e926:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    e92a:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
	if (sign) {
    e92e:	da41      	bge.n	e9b4 <z_prf+0x3f0>
		*buf++ = '-';
    e930:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    e932:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    e936:	f10d 076d 	add.w	r7, sp, #109	; 0x6d
	if (exp == 0x7ff) {
    e93a:	f240 73ff 	movw	r3, #2047	; 0x7ff
    e93e:	4299      	cmp	r1, r3
    e940:	d153      	bne.n	e9ea <z_prf+0x426>
		if (!fract) {
    e942:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    e946:	430a      	orrs	r2, r1
    e948:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
    e94c:	f107 0303 	add.w	r3, r7, #3
    e950:	d140      	bne.n	e9d4 <z_prf+0x410>
			if (isupper(c)) {
    e952:	2c19      	cmp	r4, #25
    e954:	d838      	bhi.n	e9c8 <z_prf+0x404>
				*buf++ = 'I';
    e956:	2249      	movs	r2, #73	; 0x49
    e958:	703a      	strb	r2, [r7, #0]
				*buf++ = 'N';
    e95a:	224e      	movs	r2, #78	; 0x4e
    e95c:	707a      	strb	r2, [r7, #1]
				*buf++ = 'F';
    e95e:	2246      	movs	r2, #70	; 0x46
		*buf = 0;
    e960:	2500      	movs	r5, #0
			zero.predot = zero.postdot = zero.trail = 0;
    e962:	46ab      	mov	fp, r5
    e964:	46a8      	mov	r8, r5
		return buf - start;
    e966:	ae1b      	add	r6, sp, #108	; 0x6c
				*buf++ = 'n';
    e968:	70ba      	strb	r2, [r7, #2]
		*buf = 0;
    e96a:	70fd      	strb	r5, [r7, #3]
		return buf - start;
    e96c:	1b9b      	subs	r3, r3, r6
				if (fplus || fspace || (buf[0] == '-')) {
    e96e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e970:	2a00      	cmp	r2, #0
    e972:	f040 81ec 	bne.w	ed4e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2ee>
    e976:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e978:	2a00      	cmp	r2, #0
    e97a:	f040 81e8 	bne.w	ed4e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2ee>
    e97e:	f89d 706c 	ldrb.w	r7, [sp, #108]	; 0x6c
    e982:	f1a7 022d 	sub.w	r2, r7, #45	; 0x2d
    e986:	4257      	negs	r7, r2
    e988:	4157      	adcs	r7, r2
				clen += zero.predot + zero.postdot + zero.trail;
    e98a:	eb05 0608 	add.w	r6, r5, r8
    e98e:	4433      	add	r3, r6
    e990:	eb03 060b 	add.w	r6, r3, fp
				if (!isdigit(buf[prefix])) {
    e994:	ab22      	add	r3, sp, #136	; 0x88
    e996:	443b      	add	r3, r7
    e998:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    e99c:	3b30      	subs	r3, #48	; 0x30
    e99e:	2b09      	cmp	r3, #9
    e9a0:	f200 8249 	bhi.w	ee36 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3d6>
			} else if (fzero) {
    e9a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e9a6:	2b00      	cmp	r3, #0
    e9a8:	f000 8248 	beq.w	ee3c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3dc>
    e9ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e9ae:	1b9a      	subs	r2, r3, r6
    e9b0:	ab1b      	add	r3, sp, #108	; 0x6c
    e9b2:	e739      	b.n	e828 <z_prf+0x264>
	} else if (fplus) {
    e9b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e9b6:	b10b      	cbz	r3, e9bc <z_prf+0x3f8>
		*buf++ = '+';
    e9b8:	232b      	movs	r3, #43	; 0x2b
    e9ba:	e7ba      	b.n	e932 <z_prf+0x36e>
	} else if (fspace) {
    e9bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e9be:	b10b      	cbz	r3, e9c4 <z_prf+0x400>
		*buf++ = ' ';
    e9c0:	2320      	movs	r3, #32
    e9c2:	e7b6      	b.n	e932 <z_prf+0x36e>
	} else if (fspace) {
    e9c4:	af1b      	add	r7, sp, #108	; 0x6c
    e9c6:	e7b8      	b.n	e93a <z_prf+0x376>
				*buf++ = 'i';
    e9c8:	2269      	movs	r2, #105	; 0x69
    e9ca:	703a      	strb	r2, [r7, #0]
				*buf++ = 'n';
    e9cc:	226e      	movs	r2, #110	; 0x6e
    e9ce:	707a      	strb	r2, [r7, #1]
				*buf++ = 'f';
    e9d0:	2266      	movs	r2, #102	; 0x66
    e9d2:	e7c5      	b.n	e960 <z_prf+0x39c>
			if (isupper(c)) {
    e9d4:	2c19      	cmp	r4, #25
				*buf++ = 'N';
    e9d6:	bf99      	ittee	ls
    e9d8:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
    e9da:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
    e9dc:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
    e9de:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
    e9e0:	bf94      	ite	ls
    e9e2:	703a      	strbls	r2, [r7, #0]
				*buf++ = 'n';
    e9e4:	703a      	strbhi	r2, [r7, #0]
				*buf++ = 'a';
    e9e6:	7079      	strb	r1, [r7, #1]
    e9e8:	e7ba      	b.n	e960 <z_prf+0x39c>
	if ((exp | fract) != 0) {
    e9ea:	9b04      	ldr	r3, [sp, #16]
    e9ec:	9805      	ldr	r0, [sp, #20]
    e9ee:	430b      	orrs	r3, r1
    e9f0:	9310      	str	r3, [sp, #64]	; 0x40
    e9f2:	17cb      	asrs	r3, r1, #31
    e9f4:	4303      	orrs	r3, r0
		c = 'f';
    e9f6:	2c46      	cmp	r4, #70	; 0x46
	if ((exp | fract) != 0) {
    e9f8:	9311      	str	r3, [sp, #68]	; 0x44
		c = 'f';
    e9fa:	bf08      	it	eq
    e9fc:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
    e9fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    ea02:	4313      	orrs	r3, r2
    ea04:	f000 8111 	beq.w	ec2a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1ca>
		if (exp == 0) {
    ea08:	2900      	cmp	r1, #0
    ea0a:	f000 809b 	beq.w	eb44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe4>
		fract |= HIGHBIT64;
    ea0e:	2600      	movs	r6, #0
    ea10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    ea12:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
    ea16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    ea1a:	9317      	str	r3, [sp, #92]	; 0x5c
	while (exp <= -3) {
    ea1c:	f118 0f02 	cmn.w	r8, #2
    ea20:	f2c0 80a4 	blt.w	eb6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10c>
	while (exp > 0) {
    ea24:	f1b8 0f00 	cmp.w	r8, #0
    ea28:	f300 80dd 	bgt.w	ebe6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x186>
		_rlrshift(&fract);
    ea2c:	a816      	add	r0, sp, #88	; 0x58
		exp++;
    ea2e:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    ea32:	f00d fa5d 	bl	1bef0 <_rlrshift>
	while (exp < (0 + 4)) {
    ea36:	f1b8 0f04 	cmp.w	r8, #4
    ea3a:	d1f7      	bne.n	ea2c <z_prf+0x468>
		precision = 6;		/* Default precision if none given */
    ea3c:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
    ea3e:	f004 03df 	and.w	r3, r4, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
    ea42:	bfb8      	it	lt
    ea44:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
    ea46:	2b47      	cmp	r3, #71	; 0x47
    ea48:	f040 80f8 	bne.w	ec3c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1dc>
		if (decexp < (-4 + 1) || decexp > precision) {
    ea4c:	1cf1      	adds	r1, r6, #3
    ea4e:	db02      	blt.n	ea56 <z_prf+0x492>
    ea50:	42ae      	cmp	r6, r5
    ea52:	f340 80ed 	ble.w	ec30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1d0>
			c += 'e' - 'g';
    ea56:	3c02      	subs	r4, #2
    ea58:	b2e4      	uxtb	r4, r4
			if (precision > 0) {
    ea5a:	2d00      	cmp	r5, #0
    ea5c:	f000 80f4 	beq.w	ec48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1e8>
				precision--;
    ea60:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
    ea62:	f1bb 0f00 	cmp.w	fp, #0
    ea66:	f040 80ef 	bne.w	ec48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1e8>
    ea6a:	2d00      	cmp	r5, #0
    ea6c:	bfd4      	ite	le
    ea6e:	f04f 0a00 	movle.w	sl, #0
    ea72:	f04f 0a01 	movgt.w	sl, #1
	if (c == 'f') {
    ea76:	2c66      	cmp	r4, #102	; 0x66
    ea78:	f040 80e8 	bne.w	ec4c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1ec>
		if (exp < 0) {
    ea7c:	eb16 0805 	adds.w	r8, r6, r5
    ea80:	f140 80ec 	bpl.w	ec5c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1fc>
	digit_count = 16;
    ea84:	2310      	movs	r3, #16
    ea86:	2466      	movs	r4, #102	; 0x66
			exp = 0;
    ea88:	f04f 0800 	mov.w	r8, #0
	digit_count = 16;
    ea8c:	9315      	str	r3, [sp, #84]	; 0x54
	ltemp = 0x0800000000000000;
    ea8e:	2200      	movs	r2, #0
    ea90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    ea94:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	while (exp--) {
    ea98:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
    ea9c:	f080 80e0 	bcs.w	ec60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x200>
	fract += ltemp;
    eaa0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    eaa2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    eaa4:	9919      	ldr	r1, [sp, #100]	; 0x64
    eaa6:	189b      	adds	r3, r3, r2
    eaa8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    eaaa:	eb41 0202 	adc.w	r2, r1, r2
    eaae:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
	if ((fract >> 32) & 0xF0000000) {
    eab2:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    eab6:	9312      	str	r3, [sp, #72]	; 0x48
    eab8:	2300      	movs	r3, #0
    eaba:	9313      	str	r3, [sp, #76]	; 0x4c
    eabc:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    eac0:	4313      	orrs	r3, r2
    eac2:	d006      	beq.n	ead2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x72>
		_ldiv5(&fract);
    eac4:	a816      	add	r0, sp, #88	; 0x58
    eac6:	f00d fa24 	bl	1bf12 <_ldiv5>
		_rlrshift(&fract);
    eaca:	a816      	add	r0, sp, #88	; 0x58
    eacc:	f00d fa10 	bl	1bef0 <_rlrshift>
		decexp++;
    ead0:	3601      	adds	r6, #1
	if (c == 'f') {
    ead2:	2c66      	cmp	r4, #102	; 0x66
    ead4:	f040 80e1 	bne.w	ec9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x23a>
		if (decexp > 0) {
    ead8:	2e00      	cmp	r6, #0
    eada:	f340 80c8 	ble.w	ec6e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x20e>
			while (decexp > 0 && digit_count > 0) {
    eade:	9b15      	ldr	r3, [sp, #84]	; 0x54
    eae0:	2b00      	cmp	r3, #0
    eae2:	dd07      	ble.n	eaf4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x94>
				*buf++ = _get_digit(&fract, &digit_count);
    eae4:	a915      	add	r1, sp, #84	; 0x54
    eae6:	a816      	add	r0, sp, #88	; 0x58
    eae8:	f00d fa3e 	bl	1bf68 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    eaec:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    eaee:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
    eaf2:	d1f4      	bne.n	eade <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7e>
			zp->predot = decexp;
    eaf4:	46b0      	mov	r8, r6
    eaf6:	463b      	mov	r3, r7
			decexp = 0;
    eaf8:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
    eafa:	f1bb 0f00 	cmp.w	fp, #0
    eafe:	d101      	bne.n	eb04 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa4>
    eb00:	2d00      	cmp	r5, #0
    eb02:	dd15      	ble.n	eb30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd0>
			*buf++ = '.';
    eb04:	222e      	movs	r2, #46	; 0x2e
    eb06:	f803 2b01 	strb.w	r2, [r3], #1
		if (decexp < 0 && precision > 0) {
    eb0a:	2e00      	cmp	r6, #0
    eb0c:	f000 80c0 	beq.w	ec90 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x230>
    eb10:	2d00      	cmp	r5, #0
    eb12:	f340 80bf 	ble.w	ec94 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x234>
			zp->postdot = -decexp;
    eb16:	f1c6 0b00 	rsb	fp, r6, #0
    eb1a:	45ab      	cmp	fp, r5
    eb1c:	bfa8      	it	ge
    eb1e:	46ab      	movge	fp, r5
			precision -= zp->postdot;
    eb20:	eba5 050b 	sub.w	r5, r5, fp
		while (precision > 0 && digit_count > 0) {
    eb24:	2d00      	cmp	r5, #0
    eb26:	dd03      	ble.n	eb30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd0>
    eb28:	9a15      	ldr	r2, [sp, #84]	; 0x54
    eb2a:	2a00      	cmp	r2, #0
    eb2c:	f300 80a6 	bgt.w	ec7c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x21c>
	if (prune_zero) {
    eb30:	f1ba 0f00 	cmp.w	sl, #0
    eb34:	f040 80c6 	bne.w	ecc4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x264>
	*buf = 0;
    eb38:	2200      	movs	r2, #0
	return buf - start;
    eb3a:	ae1b      	add	r6, sp, #108	; 0x6c
	*buf = 0;
    eb3c:	701a      	strb	r2, [r3, #0]
	return buf - start;
    eb3e:	1b9b      	subs	r3, r3, r6
    eb40:	e715      	b.n	e96e <z_prf+0x3aa>
				exp--;
    eb42:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
    eb44:	9b04      	ldr	r3, [sp, #16]
    eb46:	18db      	adds	r3, r3, r3
    eb48:	9304      	str	r3, [sp, #16]
    eb4a:	9b05      	ldr	r3, [sp, #20]
    eb4c:	415b      	adcs	r3, r3
    eb4e:	9305      	str	r3, [sp, #20]
    eb50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    eb54:	2a00      	cmp	r2, #0
    eb56:	f173 0300 	sbcs.w	r3, r3, #0
    eb5a:	daf2      	bge.n	eb42 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe2>
    eb5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    eb60:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    eb64:	e753      	b.n	ea0e <z_prf+0x44a>
			_rlrshift(&fract);
    eb66:	a816      	add	r0, sp, #88	; 0x58
    eb68:	f00d f9c2 	bl	1bef0 <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    eb6c:	e9dd ec16 	ldrd	lr, ip, [sp, #88]	; 0x58
    eb70:	2300      	movs	r3, #0
    eb72:	2100      	movs	r1, #0
    eb74:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    eb78:	930d      	str	r3, [sp, #52]	; 0x34
    eb7a:	48bc      	ldr	r0, [pc, #752]	; (ee6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x40c>)
    eb7c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    eb80:	4299      	cmp	r1, r3
    eb82:	bf08      	it	eq
    eb84:	4290      	cmpeq	r0, r2
    eb86:	f108 0801 	add.w	r8, r8, #1
    eb8a:	d3ec      	bcc.n	eb66 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x106>
		fract *= 5U;
    eb8c:	2005      	movs	r0, #5
    eb8e:	fbae 2300 	umull	r2, r3, lr, r0
    eb92:	e9cd 2306 	strd	r2, r3, [sp, #24]
    eb96:	9b07      	ldr	r3, [sp, #28]
		decexp--;
    eb98:	3e01      	subs	r6, #1
		fract *= 5U;
    eb9a:	fb00 330c 	mla	r3, r0, ip, r3
		decexp--;
    eb9e:	f04f 0c00 	mov.w	ip, #0
		fract *= 5U;
    eba2:	9307      	str	r3, [sp, #28]
    eba4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    eba8:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    ebac:	2100      	movs	r1, #0
    ebae:	2300      	movs	r3, #0
    ebb0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    ebb4:	9807      	ldr	r0, [sp, #28]
    ebb6:	428b      	cmp	r3, r1
    ebb8:	bf08      	it	eq
    ebba:	4282      	cmpeq	r2, r0
    ebbc:	d208      	bcs.n	ebd0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x170>
    ebbe:	f1bc 0f00 	cmp.w	ip, #0
    ebc2:	f43f af2b 	beq.w	ea1c <z_prf+0x458>
    ebc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    ebca:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    ebce:	e725      	b.n	ea1c <z_prf+0x458>
			fract <<= 1;
    ebd0:	9b06      	ldr	r3, [sp, #24]
			exp--;
    ebd2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			fract <<= 1;
    ebd6:	18db      	adds	r3, r3, r3
    ebd8:	9306      	str	r3, [sp, #24]
    ebda:	9b07      	ldr	r3, [sp, #28]
    ebdc:	f04f 0c01 	mov.w	ip, #1
    ebe0:	415b      	adcs	r3, r3
    ebe2:	9307      	str	r3, [sp, #28]
			exp--;
    ebe4:	e7e2      	b.n	ebac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14c>
		_ldiv5(&fract);
    ebe6:	a816      	add	r0, sp, #88	; 0x58
    ebe8:	f00d f993 	bl	1bf12 <_ldiv5>
		exp--;
    ebec:	e9dd ae16 	ldrd	sl, lr, [sp, #88]	; 0x58
		decexp++;
    ebf0:	f04f 0c00 	mov.w	ip, #0
		exp--;
    ebf4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    ebf8:	3601      	adds	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    ebfa:	2300      	movs	r3, #0
    ebfc:	2100      	movs	r1, #0
    ebfe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ec02:	4299      	cmp	r1, r3
    ec04:	bf08      	it	eq
    ec06:	4570      	cmpeq	r0, lr
    ec08:	d206      	bcs.n	ec18 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1b8>
    ec0a:	f1bc 0f00 	cmp.w	ip, #0
    ec0e:	f43f af09 	beq.w	ea24 <z_prf+0x460>
    ec12:	e9cd ae16 	strd	sl, lr, [sp, #88]	; 0x58
    ec16:	e705      	b.n	ea24 <z_prf+0x460>
			fract <<= 1;
    ec18:	eb1a 0a0a 	adds.w	sl, sl, sl
    ec1c:	eb4e 0e0e 	adc.w	lr, lr, lr
			exp--;
    ec20:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    ec24:	f04f 0c01 	mov.w	ip, #1
    ec28:	e7e7      	b.n	ebfa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x19a>
	if ((exp | fract) != 0) {
    ec2a:	2600      	movs	r6, #0
    ec2c:	46b0      	mov	r8, r6
    ec2e:	e6fd      	b.n	ea2c <z_prf+0x468>
			precision -= decexp;
    ec30:	1bad      	subs	r5, r5, r6
		if (!falt && (precision > 0)) {
    ec32:	f1bb 0f00 	cmp.w	fp, #0
    ec36:	d104      	bne.n	ec42 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1e2>
			c = 'f';
    ec38:	2466      	movs	r4, #102	; 0x66
    ec3a:	e716      	b.n	ea6a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    ec3c:	f04f 0a00 	mov.w	sl, #0
    ec40:	e719      	b.n	ea76 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x16>
    ec42:	f04f 0a00 	mov.w	sl, #0
    ec46:	e719      	b.n	ea7c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c>
    ec48:	f04f 0a00 	mov.w	sl, #0
		exp = precision + 1;
    ec4c:	f105 0801 	add.w	r8, r5, #1
	digit_count = 16;
    ec50:	2310      	movs	r3, #16
    ec52:	4598      	cmp	r8, r3
    ec54:	9315      	str	r3, [sp, #84]	; 0x54
	if (exp > 16) {
    ec56:	bfa8      	it	ge
    ec58:	4698      	movge	r8, r3
    ec5a:	e718      	b.n	ea8e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2e>
		if (exp < 0) {
    ec5c:	2466      	movs	r4, #102	; 0x66
    ec5e:	e7f7      	b.n	ec50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f0>
		_ldiv5(&ltemp);
    ec60:	a818      	add	r0, sp, #96	; 0x60
    ec62:	f00d f956 	bl	1bf12 <_ldiv5>
		_rlrshift(&ltemp);
    ec66:	a818      	add	r0, sp, #96	; 0x60
    ec68:	f00d f942 	bl	1bef0 <_rlrshift>
    ec6c:	e714      	b.n	ea98 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x38>
			*buf++ = '0';
    ec6e:	463b      	mov	r3, r7
    ec70:	2230      	movs	r2, #48	; 0x30
			zero.predot = zero.postdot = zero.trail = 0;
    ec72:	f04f 0800 	mov.w	r8, #0
			*buf++ = '0';
    ec76:	f803 2b01 	strb.w	r2, [r3], #1
    ec7a:	e73e      	b.n	eafa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9a>
			*buf++ = _get_digit(&fract, &digit_count);
    ec7c:	a915      	add	r1, sp, #84	; 0x54
    ec7e:	a816      	add	r0, sp, #88	; 0x58
    ec80:	9306      	str	r3, [sp, #24]
    ec82:	f00d f971 	bl	1bf68 <_get_digit>
    ec86:	9b06      	ldr	r3, [sp, #24]
			precision--;
    ec88:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    ec8a:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    ec8e:	e749      	b.n	eb24 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc4>
			zero.predot = zero.postdot = zero.trail = 0;
    ec90:	46b3      	mov	fp, r6
    ec92:	e747      	b.n	eb24 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc4>
    ec94:	f04f 0b00 	mov.w	fp, #0
    ec98:	e74a      	b.n	eb30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd0>
		*buf = _get_digit(&fract, &digit_count);
    ec9a:	a915      	add	r1, sp, #84	; 0x54
    ec9c:	a816      	add	r0, sp, #88	; 0x58
    ec9e:	f00d f963 	bl	1bf68 <_get_digit>
		if (*buf++ != '0') {
    eca2:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
    eca4:	7038      	strb	r0, [r7, #0]
			decexp--;
    eca6:	bf18      	it	ne
    eca8:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
    ecac:	f1bb 0f00 	cmp.w	fp, #0
    ecb0:	d138      	bne.n	ed24 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2c4>
    ecb2:	2d00      	cmp	r5, #0
    ecb4:	dc36      	bgt.n	ed24 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2c4>
		if (*buf++ != '0') {
    ecb6:	1c7b      	adds	r3, r7, #1
	if (prune_zero) {
    ecb8:	f1ba 0f00 	cmp.w	sl, #0
    ecbc:	d044      	beq.n	ed48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2e8>
			zero.predot = zero.postdot = zero.trail = 0;
    ecbe:	f04f 0b00 	mov.w	fp, #0
    ecc2:	46d8      	mov	r8, fp
		while (*--buf == '0')
    ecc4:	461a      	mov	r2, r3
    ecc6:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    ecca:	2930      	cmp	r1, #48	; 0x30
    eccc:	d0fa      	beq.n	ecc4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x264>
		if (*buf != '.') {
    ecce:	292e      	cmp	r1, #46	; 0x2e
    ecd0:	bf18      	it	ne
    ecd2:	4613      	movne	r3, r2
    ecd4:	2500      	movs	r5, #0
	if ((c == 'e') || (c == 'E')) {
    ecd6:	f004 02df 	and.w	r2, r4, #223	; 0xdf
    ecda:	2a45      	cmp	r2, #69	; 0x45
    ecdc:	f47f af2c 	bne.w	eb38 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd8>
		if (decexp < 0) {
    ece0:	2e00      	cmp	r6, #0
			*buf++ = '-';
    ece2:	bfb4      	ite	lt
    ece4:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    ece6:	222b      	movge	r2, #43	; 0x2b
		*buf++ = c;
    ece8:	4619      	mov	r1, r3
			decexp = -decexp;
    ecea:	bfb8      	it	lt
    ecec:	4276      	neglt	r6, r6
		if (decexp >= 100) {
    ecee:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
    ecf0:	f801 4b02 	strb.w	r4, [r1], #2
			*buf++ = '-';
    ecf4:	705a      	strb	r2, [r3, #1]
		if (decexp >= 100) {
    ecf6:	dd08      	ble.n	ed0a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2aa>
			*buf++ = (decexp / 100) + '0';
    ecf8:	2064      	movs	r0, #100	; 0x64
    ecfa:	fb96 f2f0 	sdiv	r2, r6, r0
			decexp %= 100;
    ecfe:	fb00 6612 	mls	r6, r0, r2, r6
			*buf++ = (decexp / 100) + '0';
    ed02:	f102 0430 	add.w	r4, r2, #48	; 0x30
    ed06:	1cd9      	adds	r1, r3, #3
    ed08:	709c      	strb	r4, [r3, #2]
		*buf++ = (decexp / 10) + '0';
    ed0a:	200a      	movs	r0, #10
    ed0c:	fb96 f2f0 	sdiv	r2, r6, r0
    ed10:	460b      	mov	r3, r1
		decexp %= 10;
    ed12:	fb00 6612 	mls	r6, r0, r2, r6
		*buf++ = (decexp / 10) + '0';
    ed16:	f102 0430 	add.w	r4, r2, #48	; 0x30
		*buf++ = decexp + '0';
    ed1a:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    ed1c:	f803 4b02 	strb.w	r4, [r3], #2
		*buf++ = decexp + '0';
    ed20:	704e      	strb	r6, [r1, #1]
    ed22:	e709      	b.n	eb38 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd8>
			*buf++ = '.';
    ed24:	222e      	movs	r2, #46	; 0x2e
    ed26:	1cbb      	adds	r3, r7, #2
    ed28:	707a      	strb	r2, [r7, #1]
		while (precision > 0 && digit_count > 0) {
    ed2a:	2d00      	cmp	r5, #0
    ed2c:	ddc4      	ble.n	ecb8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x258>
    ed2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    ed30:	2a00      	cmp	r2, #0
    ed32:	ddc1      	ble.n	ecb8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x258>
			*buf++ = _get_digit(&fract, &digit_count);
    ed34:	a915      	add	r1, sp, #84	; 0x54
    ed36:	a816      	add	r0, sp, #88	; 0x58
    ed38:	9306      	str	r3, [sp, #24]
    ed3a:	f00d f915 	bl	1bf68 <_get_digit>
    ed3e:	9b06      	ldr	r3, [sp, #24]
			precision--;
    ed40:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    ed42:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    ed46:	e7f0      	b.n	ed2a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2ca>
			zero.predot = zero.postdot = zero.trail = 0;
    ed48:	46d3      	mov	fp, sl
    ed4a:	46d0      	mov	r8, sl
    ed4c:	e7c3      	b.n	ecd6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x276>
					prefix = 1;
    ed4e:	2701      	movs	r7, #1
    ed50:	e61b      	b.n	e98a <z_prf+0x3c6>
				switch (i) {
    ed52:	46b1      	mov	r9, r6
    ed54:	2f68      	cmp	r7, #104	; 0x68
    ed56:	f859 3b04 	ldr.w	r3, [r9], #4
    ed5a:	d005      	beq.n	ed68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x308>
    ed5c:	dc01      	bgt.n	ed62 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x302>
    ed5e:	2f48      	cmp	r7, #72	; 0x48
    ed60:	d007      	beq.n	ed72 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x312>
					*va_arg(vargs, int *) = count;
    ed62:	9a01      	ldr	r2, [sp, #4]
    ed64:	601a      	str	r2, [r3, #0]
					break;
    ed66:	e001      	b.n	ed6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x30c>
					*va_arg(vargs, short *) = count;
    ed68:	9a01      	ldr	r2, [sp, #4]
    ed6a:	801a      	strh	r2, [r3, #0]
				continue;
    ed6c:	464e      	mov	r6, r9
    ed6e:	9a08      	ldr	r2, [sp, #32]
    ed70:	e430      	b.n	e5d4 <z_prf+0x10>
					*va_arg(vargs, char *) = count;
    ed72:	9a01      	ldr	r2, [sp, #4]
    ed74:	701a      	strb	r2, [r3, #0]
					break;
    ed76:	e7f9      	b.n	ed6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x30c>
				val = (uintptr_t) va_arg(vargs, void *);
    ed78:	46b1      	mov	r9, r6
		*buf++ = '0';
    ed7a:	f647 0330 	movw	r3, #30768	; 0x7830
	len = _to_x(buf, value, 16);
    ed7e:	2210      	movs	r2, #16
    ed80:	f859 1b04 	ldr.w	r1, [r9], #4
    ed84:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
		*buf++ = '0';
    ed88:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
	len = _to_x(buf, value, 16);
    ed8c:	f00d f88e 	bl	1beac <_to_x>
				prefix = 2;
    ed90:	2702      	movs	r7, #2
	return len + (buf - buf0);
    ed92:	1c86      	adds	r6, r0, #2
				break;
    ed94:	e51e      	b.n	e7d4 <z_prf+0x210>
					if (cptr[clen] == '\0') {
    ed96:	5d9a      	ldrb	r2, [r3, r6]
    ed98:	2a00      	cmp	r2, #0
    ed9a:	d04a      	beq.n	ee32 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3d2>
				for (clen = 0; clen < precision; clen++) {
    ed9c:	3601      	adds	r6, #1
    ed9e:	e52e      	b.n	e7fe <z_prf+0x23a>
	if (alt_form) {
    eda0:	ac1b      	add	r4, sp, #108	; 0x6c
	return (buf - buf0) + _to_x(buf, value, 8);
    eda2:	2208      	movs	r2, #8
    eda4:	4620      	mov	r0, r4
    eda6:	f00d f881 	bl	1beac <_to_x>
    edaa:	ae1b      	add	r6, sp, #108	; 0x6c
    edac:	1ba6      	subs	r6, r4, r6
    edae:	4406      	add	r6, r0
			prefix = 0;
    edb0:	2700      	movs	r7, #0
    edb2:	e50f      	b.n	e7d4 <z_prf+0x210>
		*buf++ = '0';
    edb4:	f10d 046d 	add.w	r4, sp, #109	; 0x6d
    edb8:	e7f3      	b.n	eda2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x342>
				} else if (c == 'u') {
    edba:	2c75      	cmp	r4, #117	; 0x75
    edbc:	d105      	bne.n	edca <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x36a>
	return _to_x(buf, value, 10);
    edbe:	220a      	movs	r2, #10
    edc0:	a81b      	add	r0, sp, #108	; 0x6c
    edc2:	f00d f873 	bl	1beac <_to_x>
    edc6:	4606      	mov	r6, r0
    edc8:	e7f2      	b.n	edb0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x350>
	if (alt_form) {
    edca:	f1bb 0f00 	cmp.w	fp, #0
    edce:	d012      	beq.n	edf6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x396>
		*buf++ = '0';
    edd0:	f647 0330 	movw	r3, #30768	; 0x7830
		*buf++ = 'x';
    edd4:	f10d 086e 	add.w	r8, sp, #110	; 0x6e
		*buf++ = '0';
    edd8:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
	len = _to_x(buf, value, 16);
    eddc:	2210      	movs	r2, #16
    edde:	4640      	mov	r0, r8
    ede0:	f00d f864 	bl	1beac <_to_x>
	if (prefix == 'X') {
    ede4:	2c58      	cmp	r4, #88	; 0x58
    ede6:	d009      	beq.n	edfc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x39c>
	return len + (buf - buf0);
    ede8:	ae1b      	add	r6, sp, #108	; 0x6c
    edea:	eba8 0606 	sub.w	r6, r8, r6
    edee:	4406      	add	r6, r0
						prefix = 2;
    edf0:	ea4f 074b 	mov.w	r7, fp, lsl #1
    edf4:	e4ee      	b.n	e7d4 <z_prf+0x210>
	if (alt_form) {
    edf6:	f10d 086c 	add.w	r8, sp, #108	; 0x6c
    edfa:	e7ef      	b.n	eddc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x37c>
    edfc:	aa1b      	add	r2, sp, #108	; 0x6c
		if (*buf >= 'a' && *buf <= 'z') {
    edfe:	f812 3b01 	ldrb.w	r3, [r2], #1
    ee02:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    ee06:	2919      	cmp	r1, #25
    ee08:	d803      	bhi.n	ee12 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3b2>
			*buf += 'A' - 'a';
    ee0a:	3b20      	subs	r3, #32
    ee0c:	f802 3c01 	strb.w	r3, [r2, #-1]
    ee10:	e7f5      	b.n	edfe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x39e>
	} while (*buf++);
    ee12:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    ee16:	2b00      	cmp	r3, #0
    ee18:	d1f1      	bne.n	edfe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x39e>
    ee1a:	e7e5      	b.n	ede8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x388>
				PUTC('%');
    ee1c:	9903      	ldr	r1, [sp, #12]
    ee1e:	4620      	mov	r0, r4
    ee20:	f7ff bbe1 	b.w	e5e6 <z_prf+0x22>
				count++;
    ee24:	9b01      	ldr	r3, [sp, #4]
    ee26:	3301      	adds	r3, #1
				count += 2;
    ee28:	9301      	str	r3, [sp, #4]
				continue;
    ee2a:	46b1      	mov	r9, r6
    ee2c:	e79e      	b.n	ed6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x30c>
					prefix = 1;
    ee2e:	2701      	movs	r7, #1
    ee30:	e4d0      	b.n	e7d4 <z_prf+0x210>
    ee32:	4615      	mov	r5, r2
    ee34:	e4e8      	b.n	e808 <z_prf+0x244>
			cptr = buf;
    ee36:	ab1b      	add	r3, sp, #108	; 0x6c
				zero_head = 0;
    ee38:	2200      	movs	r2, #0
    ee3a:	e4f7      	b.n	e82c <z_prf+0x268>
    ee3c:	ab1b      	add	r3, sp, #108	; 0x6c
    ee3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ee40:	e4f4      	b.n	e82c <z_prf+0x268>
    ee42:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
					PUTC(' ');
    ee46:	9903      	ldr	r1, [sp, #12]
    ee48:	9b02      	ldr	r3, [sp, #8]
    ee4a:	2020      	movs	r0, #32
    ee4c:	4798      	blx	r3
    ee4e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
    ee52:	3001      	adds	r0, #1
    ee54:	f43f abcc 	beq.w	e5f0 <z_prf+0x2c>
				while (width-- > 0) {
    ee58:	f11a 3aff 	adds.w	sl, sl, #4294967295	; 0xffffffff
    ee5c:	d2f1      	bcs.n	ee42 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3e2>
				count += width;
    ee5e:	9901      	ldr	r1, [sp, #4]
    ee60:	4421      	add	r1, r4
    ee62:	9101      	str	r1, [sp, #4]
				while (width-- > 0) {
    ee64:	4654      	mov	r4, sl
    ee66:	e4eb      	b.n	e840 <z_prf+0x27c>
    ee68:	46a2      	mov	sl, r4
    ee6a:	e7f5      	b.n	ee58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3f8>
    ee6c:	33333332 	.word	0x33333332
				PUTC(*cptr++);
    ee70:	f813 0b01 	ldrb.w	r0, [r3], #1
    ee74:	9903      	ldr	r1, [sp, #12]
    ee76:	9309      	str	r3, [sp, #36]	; 0x24
    ee78:	9b02      	ldr	r3, [sp, #8]
    ee7a:	920a      	str	r2, [sp, #40]	; 0x28
    ee7c:	4798      	blx	r3
    ee7e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
    ee82:	3001      	adds	r0, #1
    ee84:	f47f acde 	bne.w	e844 <z_prf+0x280>
    ee88:	f7ff bbb2 	b.w	e5f0 <z_prf+0x2c>
				PUTC('0');
    ee8c:	9903      	ldr	r1, [sp, #12]
    ee8e:	2030      	movs	r0, #48	; 0x30
    ee90:	9b02      	ldr	r3, [sp, #8]
    ee92:	9209      	str	r2, [sp, #36]	; 0x24
    ee94:	4798      	blx	r3
    ee96:	3001      	adds	r0, #1
    ee98:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ee9a:	f47f acd6 	bne.w	e84a <z_prf+0x286>
    ee9e:	f7ff bba7 	b.w	e5f0 <z_prf+0x2c>
					PUTC(c);
    eea2:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
    eea6:	4798      	blx	r3
    eea8:	3001      	adds	r0, #1
    eeaa:	f43f aba1 	beq.w	e5f0 <z_prf+0x2c>
					c = *++cptr;
    eeae:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
    eeb2:	e4d6      	b.n	e862 <z_prf+0x29e>
					PUTC('0');
    eeb4:	9903      	ldr	r1, [sp, #12]
    eeb6:	2030      	movs	r0, #48	; 0x30
    eeb8:	9b02      	ldr	r3, [sp, #8]
    eeba:	4798      	blx	r3
    eebc:	3001      	adds	r0, #1
    eebe:	f47f acd8 	bne.w	e872 <z_prf+0x2ae>
    eec2:	f7ff bb95 	b.w	e5f0 <z_prf+0x2c>
					PUTC('0');
    eec6:	9903      	ldr	r1, [sp, #12]
    eec8:	2030      	movs	r0, #48	; 0x30
    eeca:	9b02      	ldr	r3, [sp, #8]
    eecc:	4798      	blx	r3
    eece:	3001      	adds	r0, #1
    eed0:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    eed4:	f47f ace7 	bne.w	e8a6 <z_prf+0x2e2>
    eed8:	f7ff bb8a 	b.w	e5f0 <z_prf+0x2c>
					PUTC(c);
    eedc:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
    eee0:	4798      	blx	r3
    eee2:	3001      	adds	r0, #1
    eee4:	f43f ab84 	beq.w	e5f0 <z_prf+0x2c>
					c = *++cptr;
    eee8:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
    eeec:	e4e5      	b.n	e8ba <z_prf+0x2f6>
					PUTC('0');
    eeee:	9903      	ldr	r1, [sp, #12]
    eef0:	2030      	movs	r0, #48	; 0x30
    eef2:	9b02      	ldr	r3, [sp, #8]
    eef4:	4798      	blx	r3
    eef6:	3001      	adds	r0, #1
    eef8:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    eefc:	f47f ace8 	bne.w	e8d0 <z_prf+0x30c>
    ef00:	f7ff bb76 	b.w	e5f0 <z_prf+0x2c>
				PUTC(*cptr++);
    ef04:	9903      	ldr	r1, [sp, #12]
    ef06:	f81a 0b01 	ldrb.w	r0, [sl], #1
    ef0a:	9b02      	ldr	r3, [sp, #8]
    ef0c:	4798      	blx	r3
    ef0e:	3001      	adds	r0, #1
    ef10:	f43f ab6e 	beq.w	e5f0 <z_prf+0x2c>
    ef14:	eba6 030a 	sub.w	r3, r6, sl
			while (clen-- > 0) {
    ef18:	2b00      	cmp	r3, #0
    ef1a:	dcf3      	bgt.n	ef04 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4a4>
			count += clen;
    ef1c:	9b01      	ldr	r3, [sp, #4]
    ef1e:	9a06      	ldr	r2, [sp, #24]
			if (width > 0) {
    ef20:	2c00      	cmp	r4, #0
			count += clen;
    ef22:	4413      	add	r3, r2
    ef24:	9301      	str	r3, [sp, #4]
			if (width > 0) {
    ef26:	f77f af21 	ble.w	ed6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x30c>
    ef2a:	4625      	mov	r5, r4
    ef2c:	e006      	b.n	ef3c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4dc>
					PUTC(' ');
    ef2e:	9903      	ldr	r1, [sp, #12]
    ef30:	2020      	movs	r0, #32
    ef32:	9b02      	ldr	r3, [sp, #8]
    ef34:	4798      	blx	r3
    ef36:	3001      	adds	r0, #1
    ef38:	f43f ab5a 	beq.w	e5f0 <z_prf+0x2c>
				while (width-- > 0) {
    ef3c:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
    ef40:	d2f5      	bcs.n	ef2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4ce>
				count += width;
    ef42:	9b01      	ldr	r3, [sp, #4]
    ef44:	4423      	add	r3, r4
    ef46:	9301      	str	r3, [sp, #4]
    ef48:	e710      	b.n	ed6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x30c>
    ef4a:	bf00      	nop

0000ef4c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    ef4c:	4b01      	ldr	r3, [pc, #4]	; (ef54 <__stdout_hook_install+0x8>)
    ef4e:	6018      	str	r0, [r3, #0]
}
    ef50:	4770      	bx	lr
    ef52:	bf00      	nop
    ef54:	200284f8 	.word	0x200284f8

0000ef58 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
    ef58:	b40c      	push	{r2, r3}
    ef5a:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    ef5c:	b909      	cbnz	r1, ef62 <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
    ef5e:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
    ef62:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
    ef66:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    ef68:	9a06      	ldr	r2, [sp, #24]
    ef6a:	a902      	add	r1, sp, #8
    ef6c:	4805      	ldr	r0, [pc, #20]	; (ef84 <snprintf+0x2c>)
	va_start(vargs, format);
    ef6e:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    ef70:	f7ff fb28 	bl	e5c4 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    ef74:	2200      	movs	r2, #0
    ef76:	9b02      	ldr	r3, [sp, #8]
    ef78:	701a      	strb	r2, [r3, #0]
	return r;
}
    ef7a:	b005      	add	sp, #20
    ef7c:	f85d eb04 	ldr.w	lr, [sp], #4
    ef80:	b002      	add	sp, #8
    ef82:	4770      	bx	lr
    ef84:	0001bf9d 	.word	0x0001bf9d

0000ef88 <sprintf>:

int sprintf(char *_MLIBC_RESTRICT s, const char *_MLIBC_RESTRICT format, ...)
{
    ef88:	b40e      	push	{r1, r2, r3}
    ef8a:	b50f      	push	{r0, r1, r2, r3, lr}

	struct emitter p;
	int     r;

	p.ptr = s;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    ef8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
    ef90:	ab05      	add	r3, sp, #20
    ef92:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = s;
    ef96:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    ef98:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    ef9a:	4806      	ldr	r0, [pc, #24]	; (efb4 <sprintf+0x2c>)
    ef9c:	a902      	add	r1, sp, #8
	va_start(vargs, format);
    ef9e:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    efa0:	f7ff fb10 	bl	e5c4 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    efa4:	2200      	movs	r2, #0
    efa6:	9b02      	ldr	r3, [sp, #8]
    efa8:	701a      	strb	r2, [r3, #0]
	return r;
}
    efaa:	b004      	add	sp, #16
    efac:	f85d eb04 	ldr.w	lr, [sp], #4
    efb0:	b003      	add	sp, #12
    efb2:	4770      	bx	lr
    efb4:	0001bf9d 	.word	0x0001bf9d

0000efb8 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
    efb8:	b538      	push	{r3, r4, r5, lr}

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
    efba:	4c07      	ldr	r4, [pc, #28]	; (efd8 <net_if_init+0x20>)
    efbc:	4d07      	ldr	r5, [pc, #28]	; (efdc <net_if_init+0x24>)
    efbe:	42ac      	cmp	r4, r5
    efc0:	d100      	bne.n	efc4 <net_if_init+0xc>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
    efc2:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
    efc4:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
    efc6:	681b      	ldr	r3, [r3, #0]
    efc8:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
    efca:	b11b      	cbz	r3, efd4 <net_if_init+0x1c>
    efcc:	681b      	ldr	r3, [r3, #0]
    efce:	b10b      	cbz	r3, efd4 <net_if_init+0x1c>
	api->init(iface);
    efd0:	4620      	mov	r0, r4
    efd2:	4798      	blx	r3
	     iface++, if_count++) {
    efd4:	3420      	adds	r4, #32
    efd6:	e7f2      	b.n	efbe <net_if_init+0x6>
    efd8:	200286e0 	.word	0x200286e0
    efdc:	20028700 	.word	0x20028700

0000efe0 <net_if_post_init>:

void net_if_post_init(void)
{
    efe0:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
    efe2:	4c08      	ldr	r4, [pc, #32]	; (f004 <net_if_post_init+0x24>)
    efe4:	4d08      	ldr	r5, [pc, #32]	; (f008 <net_if_post_init+0x28>)
    efe6:	42ac      	cmp	r4, r5
    efe8:	d100      	bne.n	efec <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
    efea:	bd38      	pop	{r3, r4, r5, pc}
	return atomic_test_bit(iface->if_dev->flags, value);
    efec:	6820      	ldr	r0, [r4, #0]
    efee:	2103      	movs	r1, #3
    eff0:	300c      	adds	r0, #12
    eff2:	f00c fffb 	bl	1bfec <atomic_test_bit>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
    eff6:	b910      	cbnz	r0, effe <net_if_post_init+0x1e>
			net_if_up(iface);
    eff8:	4620      	mov	r0, r4
    effa:	f00c fffd 	bl	1bff8 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
    effe:	3420      	adds	r4, #32
    f000:	e7f1      	b.n	efe6 <net_if_post_init+0x6>
    f002:	bf00      	nop
    f004:	200286e0 	.word	0x200286e0
    f008:	20028700 	.word	0x20028700

0000f00c <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	u16_t *w;
	u8_t i, bl, bh, longest = 1U;
	s8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
    f00c:	2300      	movs	r3, #0
{
    f00e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	u16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
    f012:	2802      	cmp	r0, #2
{
    f014:	b089      	sub	sp, #36	; 0x24
    f016:	4681      	mov	r9, r0
    f018:	468a      	mov	sl, r1
    f01a:	4690      	mov	r8, r2
	unsigned char zeros[8] = { 0 };
    f01c:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (family == AF_INET6) {
    f020:	d13c      	bne.n	f09c <z_impl_net_addr_ntop+0x90>
		addr6 = (struct in6_addr *)src;
		w = (u16_t *)addr6->s6_addr16;
    f022:	aa06      	add	r2, sp, #24
    f024:	4610      	mov	r0, r2
    f026:	9104      	str	r1, [sp, #16]
{
    f028:	4619      	mov	r1, r3
    f02a:	e006      	b.n	f03a <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
    f02c:	7804      	ldrb	r4, [r0, #0]
    f02e:	3101      	adds	r1, #1
    f030:	3401      	adds	r4, #1
    f032:	7004      	strb	r4, [r0, #0]
			for (j = i; j < 8; j++) {
    f034:	b2cc      	uxtb	r4, r1
    f036:	2c07      	cmp	r4, #7
    f038:	d803      	bhi.n	f042 <z_impl_net_addr_ntop+0x36>
				if (UNALIGNED_GET(&w[j]) != 0) {
    f03a:	f83a 4011 	ldrh.w	r4, [sl, r1, lsl #1]
    f03e:	2c00      	cmp	r4, #0
    f040:	d0f4      	beq.n	f02c <z_impl_net_addr_ntop+0x20>
    f042:	3301      	adds	r3, #1
		for (i = 0U; i < 8; i++) {
    f044:	2b08      	cmp	r3, #8
    f046:	f100 0001 	add.w	r0, r0, #1
    f04a:	d1ed      	bne.n	f028 <z_impl_net_addr_ntop+0x1c>
	s8_t pos = -1;
    f04c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1U;
    f050:	2701      	movs	r7, #1
			}
		}

		for (i = 0U; i < 8; i++) {
    f052:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
    f054:	f812 1b01 	ldrb.w	r1, [r2], #1
    f058:	42b9      	cmp	r1, r7
				longest = zeros[i];
				pos = i;
    f05a:	bf88      	it	hi
    f05c:	b25e      	sxtbhi	r6, r3
		for (i = 0U; i < 8; i++) {
    f05e:	f103 0301 	add.w	r3, r3, #1
    f062:	b2db      	uxtb	r3, r3
				pos = i;
    f064:	bf88      	it	hi
    f066:	460f      	movhi	r7, r1
		for (i = 0U; i < 8; i++) {
    f068:	2b08      	cmp	r3, #8
    f06a:	d1f3      	bne.n	f054 <z_impl_net_addr_ntop+0x48>
		len = 8;
    f06c:	9303      	str	r3, [sp, #12]
    f06e:	2f01      	cmp	r7, #1
    f070:	f04f 033a 	mov.w	r3, #58	; 0x3a
    f074:	bf08      	it	eq
    f076:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
    f07a:	9302      	str	r3, [sp, #8]
	bool needcolon = false;
    f07c:	2200      	movs	r2, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
    f07e:	4644      	mov	r4, r8
    f080:	4615      	mov	r5, r2
    f082:	9b03      	ldr	r3, [sp, #12]
    f084:	429d      	cmp	r5, r3
    f086:	db19      	blt.n	f0bc <z_impl_net_addr_ntop+0xb0>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
    f088:	4544      	cmp	r4, r8
    f08a:	d009      	beq.n	f0a0 <z_impl_net_addr_ntop+0x94>
		return NULL;
	}

	if (family == AF_INET) {
    f08c:	2300      	movs	r3, #0
    f08e:	f1b9 0f01 	cmp.w	r9, #1
		*(ptr - 1) = '\0';
    f092:	bf0c      	ite	eq
    f094:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
    f098:	7023      	strbne	r3, [r4, #0]
    f09a:	e003      	b.n	f0a4 <z_impl_net_addr_ntop+0x98>
	} else if (family == AF_INET) {
    f09c:	2801      	cmp	r0, #1
    f09e:	d005      	beq.n	f0ac <z_impl_net_addr_ntop+0xa0>
		return NULL;
    f0a0:	f04f 0800 	mov.w	r8, #0
	}

	return dst;
}
    f0a4:	4640      	mov	r0, r8
    f0a6:	b009      	add	sp, #36	; 0x24
    f0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
    f0ac:	232e      	movs	r3, #46	; 0x2e
    f0ae:	2204      	movs	r2, #4
	s8_t pos = -1;
    f0b0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		delim = '.';
    f0b4:	e9cd 3202 	strd	r3, r2, [sp, #8]
	u8_t i, bl, bh, longest = 1U;
    f0b8:	4607      	mov	r7, r0
    f0ba:	e7df      	b.n	f07c <z_impl_net_addr_ntop+0x70>
		if (len == 4) {
    f0bc:	9b03      	ldr	r3, [sp, #12]
    f0be:	2b04      	cmp	r3, #4
    f0c0:	d134      	bne.n	f12c <z_impl_net_addr_ntop+0x120>
			value = (u32_t)addr->s4_addr[i];
    f0c2:	f81a 1005 	ldrb.w	r1, [sl, r5]
			if (value == 0U) {
    f0c6:	b949      	cbnz	r1, f0dc <z_impl_net_addr_ntop+0xd0>
				*ptr++ = '0';
    f0c8:	2330      	movs	r3, #48	; 0x30
    f0ca:	4620      	mov	r0, r4
    f0cc:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
    f0d0:	9b02      	ldr	r3, [sp, #8]
    f0d2:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
    f0d4:	3501      	adds	r5, #1
    f0d6:	b2ed      	uxtb	r5, r5
    f0d8:	4604      	mov	r4, r0
    f0da:	e7d2      	b.n	f082 <z_impl_net_addr_ntop+0x76>
			l = net_value_to_udec(ptr, value, 0);
    f0dc:	2009      	movs	r0, #9
    f0de:	f04f 0b00 	mov.w	fp, #0
    f0e2:	f8df c0d8 	ldr.w	ip, [pc, #216]	; f1bc <z_impl_net_addr_ntop+0x1b0>
    f0e6:	9401      	str	r4, [sp, #4]
		temp = value / divisor;
    f0e8:	fbb1 fefc 	udiv	lr, r1, ip
		value = value % divisor;
    f0ec:	fb0c 131e 	mls	r3, ip, lr, r1
		if ((precision > i) || (temp != 0)) {
    f0f0:	4583      	cmp	fp, r0
		value = value % divisor;
    f0f2:	9305      	str	r3, [sp, #20]
		if ((precision > i) || (temp != 0)) {
    f0f4:	dc01      	bgt.n	f0fa <z_impl_net_addr_ntop+0xee>
    f0f6:	4561      	cmp	r1, ip
    f0f8:	d306      	bcc.n	f108 <z_impl_net_addr_ntop+0xfc>
			*buf++ = (char) (temp + '0');
    f0fa:	4683      	mov	fp, r0
    f0fc:	9b01      	ldr	r3, [sp, #4]
    f0fe:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
    f102:	f803 eb01 	strb.w	lr, [r3], #1
    f106:	9301      	str	r3, [sp, #4]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
    f108:	230a      	movs	r3, #10
    f10a:	3801      	subs	r0, #1
    f10c:	fbbc fcf3 	udiv	ip, ip, r3
    f110:	1c43      	adds	r3, r0, #1
		value = value % divisor;
    f112:	9905      	ldr	r1, [sp, #20]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
    f114:	d1e8      	bne.n	f0e8 <z_impl_net_addr_ntop+0xdc>
	*buf = 0;
    f116:	f04f 0300 	mov.w	r3, #0
    f11a:	9901      	ldr	r1, [sp, #4]
    f11c:	700b      	strb	r3, [r1, #0]
	return buf - start;
    f11e:	1b0b      	subs	r3, r1, r4
			ptr += l;
    f120:	b2db      	uxtb	r3, r3
			*ptr++ = delim;
    f122:	9902      	ldr	r1, [sp, #8]
			ptr += l;
    f124:	18e0      	adds	r0, r4, r3
			*ptr++ = delim;
    f126:	3001      	adds	r0, #1
    f128:	54e1      	strb	r1, [r4, r3]
			continue;
    f12a:	e7d3      	b.n	f0d4 <z_impl_net_addr_ntop+0xc8>
		if (i == pos) {
    f12c:	42ae      	cmp	r6, r5
    f12e:	d10d      	bne.n	f14c <z_impl_net_addr_ntop+0x140>
			if (needcolon || i == 0U) {
    f130:	b902      	cbnz	r2, f134 <z_impl_net_addr_ntop+0x128>
    f132:	b916      	cbnz	r6, f13a <z_impl_net_addr_ntop+0x12e>
				*ptr++ = ':';
    f134:	233a      	movs	r3, #58	; 0x3a
    f136:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
    f13a:	233a      	movs	r3, #58	; 0x3a
    f13c:	4620      	mov	r0, r4
    f13e:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
    f142:	1e7b      	subs	r3, r7, #1
    f144:	441d      	add	r5, r3
    f146:	b2ed      	uxtb	r5, r5
			needcolon = false;
    f148:	2200      	movs	r2, #0
			continue;
    f14a:	e7c3      	b.n	f0d4 <z_impl_net_addr_ntop+0xc8>
		if (needcolon) {
    f14c:	b112      	cbz	r2, f154 <z_impl_net_addr_ntop+0x148>
			*ptr++ = ':';
    f14e:	233a      	movs	r3, #58	; 0x3a
    f150:	f804 3b01 	strb.w	r3, [r4], #1
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
    f154:	9b04      	ldr	r3, [sp, #16]
    f156:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    f15a:	021a      	lsls	r2, r3, #8
    f15c:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
    f160:	b212      	sxth	r2, r2
		bh = value >> 8;
    f162:	f3c2 2307 	ubfx	r3, r2, #8, #8
		bl = value & 0xff;
    f166:	fa5f fb82 	uxtb.w	fp, r2
		if (bh) {
    f16a:	b1b3      	cbz	r3, f19a <z_impl_net_addr_ntop+0x18e>
			if (bh > 0x0f) {
    f16c:	2b0f      	cmp	r3, #15
		bh = value >> 8;
    f16e:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
    f170:	d90b      	bls.n	f18a <z_impl_net_addr_ntop+0x17e>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
    f172:	2300      	movs	r3, #0
    f174:	2261      	movs	r2, #97	; 0x61
    f176:	4620      	mov	r0, r4
    f178:	f00c ff6f 	bl	1c05a <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
    f17c:	2301      	movs	r3, #1
    f17e:	2261      	movs	r2, #97	; 0x61
    f180:	4659      	mov	r1, fp
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
    f182:	f00c ff6a 	bl	1c05a <net_byte_to_hex>
		needcolon = true;
    f186:	2201      	movs	r2, #1
    f188:	e7a4      	b.n	f0d4 <z_impl_net_addr_ntop+0xc8>
				if (bh < 10) {
    f18a:	b25b      	sxtb	r3, r3
    f18c:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
    f18e:	bf94      	ite	ls
    f190:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
    f192:	3357      	addhi	r3, #87	; 0x57
    f194:	1c60      	adds	r0, r4, #1
    f196:	7023      	strb	r3, [r4, #0]
    f198:	e7f0      	b.n	f17c <z_impl_net_addr_ntop+0x170>
		} else if (bl > 0x0f) {
    f19a:	f1bb 0f0f 	cmp.w	fp, #15
    f19e:	d903      	bls.n	f1a8 <z_impl_net_addr_ntop+0x19c>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
    f1a0:	2261      	movs	r2, #97	; 0x61
    f1a2:	4659      	mov	r1, fp
    f1a4:	4620      	mov	r0, r4
    f1a6:	e7ec      	b.n	f182 <z_impl_net_addr_ntop+0x176>
			if (bl < 10) {
    f1a8:	b252      	sxtb	r2, r2
    f1aa:	f1bb 0f09 	cmp.w	fp, #9
				*ptr++ = (char)(bl + '0');
    f1ae:	bf94      	ite	ls
    f1b0:	3230      	addls	r2, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
    f1b2:	3257      	addhi	r2, #87	; 0x57
    f1b4:	1c60      	adds	r0, r4, #1
    f1b6:	7022      	strb	r2, [r4, #0]
    f1b8:	e7e5      	b.n	f186 <z_impl_net_addr_ntop+0x17a>
    f1ba:	bf00      	nop
    f1bc:	3b9aca00 	.word	0x3b9aca00

0000f1c0 <sys_rand32_get>:

static struct device *entropy_driver;

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
u32_t sys_rand32_get(void)
{
    f1c0:	b513      	push	{r0, r1, r4, lr}
	struct device *dev = entropy_driver;
    f1c2:	4c0a      	ldr	r4, [pc, #40]	; (f1ec <sys_rand32_get+0x2c>)
    f1c4:	6820      	ldr	r0, [r4, #0]
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    f1c6:	b918      	cbnz	r0, f1d0 <sys_rand32_get+0x10>
    f1c8:	4809      	ldr	r0, [pc, #36]	; (f1f0 <sys_rand32_get+0x30>)
    f1ca:	f00a f83b 	bl	19244 <z_impl_device_get_binding>
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
		__ASSERT((dev != NULL),
			"Device driver for %s (CONFIG_ENTROPY_NAME) not found. "
			"Check your build configuration!",
			CONFIG_ENTROPY_NAME);
		entropy_driver = dev;
    f1ce:	6020      	str	r0, [r4, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    f1d0:	2204      	movs	r2, #4
    f1d2:	6843      	ldr	r3, [r0, #4]
    f1d4:	eb0d 0102 	add.w	r1, sp, r2
    f1d8:	681b      	ldr	r3, [r3, #0]
    f1da:	4798      	blx	r3
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    f1dc:	2800      	cmp	r0, #0
    f1de:	da02      	bge.n	f1e6 <sys_rand32_get+0x26>
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
    f1e0:	f7fe fae0 	bl	d7a4 <z_timer_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    f1e4:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    f1e6:	9801      	ldr	r0, [sp, #4]
    f1e8:	b002      	add	sp, #8
    f1ea:	bd10      	pop	{r4, pc}
    f1ec:	20020244 	.word	0x20020244
    f1f0:	0001e835 	.word	0x0001e835

0000f1f4 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
    f1f4:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    f1f6:	4b09      	ldr	r3, [pc, #36]	; (f21c <gpio_nrfx_init+0x28>)
    f1f8:	781a      	ldrb	r2, [r3, #0]
    f1fa:	b96a      	cbnz	r2, f218 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    f1fc:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    f1fe:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
    f200:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    f202:	2105      	movs	r1, #5
    f204:	f7fe fb88 	bl	d918 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
    f208:	2031      	movs	r0, #49	; 0x31
    f20a:	f7fe fb75 	bl	d8f8 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    f20e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    f212:	4b03      	ldr	r3, [pc, #12]	; (f220 <gpio_nrfx_init+0x2c>)
    f214:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    f218:	2000      	movs	r0, #0
    f21a:	bd08      	pop	{r3, pc}
    f21c:	2002232b 	.word	0x2002232b
    f220:	40031000 	.word	0x40031000

0000f224 <gpiote_pin_int_cfg>:
{
    f224:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
    f226:	6803      	ldr	r3, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
    f228:	6882      	ldr	r2, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f22a:	689b      	ldr	r3, [r3, #8]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    f22c:	4c51      	ldr	r4, [pc, #324]	; (f374 <gpiote_pin_int_cfg+0x150>)
    f22e:	7918      	ldrb	r0, [r3, #4]
    f230:	f001 031f 	and.w	r3, r1, #31
    f234:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    f238:	2000      	movs	r0, #0
    f23a:	f8d4 5304 	ldr.w	r5, [r4, #772]	; 0x304
    f23e:	b2ed      	uxtb	r5, r5
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    f240:	f500 76a2 	add.w	r6, r0, #324	; 0x144
    f244:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
    f248:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    f24c:	42b3      	cmp	r3, r6
    f24e:	d170      	bne.n	f332 <gpiote_pin_int_cfg+0x10e>
		    && (intenset & BIT(i))) {
    f250:	fa25 f600 	lsr.w	r6, r5, r0
    f254:	07f6      	lsls	r6, r6, #31
    f256:	d56c      	bpl.n	f332 <gpiote_pin_int_cfg+0x10e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    f258:	0085      	lsls	r5, r0, #2
    f25a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    f25e:	f505 3544 	add.w	r5, r5, #200704	; 0x31000
    f262:	f8d5 6510 	ldr.w	r6, [r5, #1296]	; 0x510
    f266:	f026 0601 	bic.w	r6, r6, #1
    f26a:	f8c5 6510 	str.w	r6, [r5, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    f26e:	2501      	movs	r5, #1
    f270:	fa05 f000 	lsl.w	r0, r5, r0
    p_reg->INTENCLR = mask;
    f274:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    f278:	4d3f      	ldr	r5, [pc, #252]	; (f378 <gpiote_pin_int_cfg+0x154>)
    f27a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    f27e:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    f282:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    f286:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    f28a:	6890      	ldr	r0, [r2, #8]
    f28c:	40c8      	lsrs	r0, r1
    f28e:	f010 0001 	ands.w	r0, r0, #1
    f292:	d04d      	beq.n	f330 <gpiote_pin_int_cfg+0x10c>
    f294:	68d0      	ldr	r0, [r2, #12]
    f296:	40c8      	lsrs	r0, r1
    f298:	f010 0001 	ands.w	r0, r0, #1
    f29c:	d048      	beq.n	f330 <gpiote_pin_int_cfg+0x10c>
		if (data->trig_edge & BIT(pin)) {
    f29e:	6950      	ldr	r0, [r2, #20]
    f2a0:	40c8      	lsrs	r0, r1
    f2a2:	f010 0001 	ands.w	r0, r0, #1
    f2a6:	d050      	beq.n	f34a <gpiote_pin_int_cfg+0x126>
			if (data->double_edge & BIT(pin)) {
    f2a8:	6990      	ldr	r0, [r2, #24]
    f2aa:	40c8      	lsrs	r0, r1
    f2ac:	07c0      	lsls	r0, r0, #31
    f2ae:	d444      	bmi.n	f33a <gpiote_pin_int_cfg+0x116>
			} else if (((data->active_level & BIT(pin)) != 0U)
    f2b0:	6910      	ldr	r0, [r2, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    f2b2:	69d2      	ldr	r2, [r2, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
    f2b4:	40c8      	lsrs	r0, r1
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    f2b6:	fa22 f101 	lsr.w	r1, r2, r1
			} else if (((data->active_level & BIT(pin)) != 0U)
    f2ba:	f000 0001 	and.w	r0, r0, #1
    f2be:	f001 0101 	and.w	r1, r1, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    f2c2:	4288      	cmp	r0, r1
    f2c4:	bf14      	ite	ne
    f2c6:	2101      	movne	r1, #1
    f2c8:	2102      	moveq	r1, #2
    f2ca:	2500      	movs	r5, #0
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    f2cc:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    f2d0:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
    f2d4:	f010 0003 	ands.w	r0, r0, #3
    f2d8:	d131      	bne.n	f33e <gpiote_pin_int_cfg+0x11a>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    f2da:	00aa      	lsls	r2, r5, #2
    f2dc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    f2e0:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
    f2e4:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f2e8:	021b      	lsls	r3, r3, #8
    f2ea:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    f2ee:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
    f2f2:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f2f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
			nrf_gpiote_event_t evt =
    f2fa:	f105 0340 	add.w	r3, r5, #64	; 0x40
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    f2fe:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    f302:	009b      	lsls	r3, r3, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f304:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    f308:	b29b      	uxth	r3, r3
    f30a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    f30e:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f312:	4331      	orrs	r1, r6
    f314:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    f318:	6018      	str	r0, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    f31a:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    f31e:	f043 0301 	orr.w	r3, r3, #1
    f322:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    f326:	2301      	movs	r3, #1
    f328:	fa03 f505 	lsl.w	r5, r3, r5
    p_reg->INTENSET = mask;
    f32c:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
}
    f330:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    f332:	3001      	adds	r0, #1
    f334:	2808      	cmp	r0, #8
    f336:	d183      	bne.n	f240 <gpiote_pin_int_cfg+0x1c>
    f338:	e79e      	b.n	f278 <gpiote_pin_int_cfg+0x54>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    f33a:	2103      	movs	r1, #3
    f33c:	e7c5      	b.n	f2ca <gpiote_pin_int_cfg+0xa6>
    f33e:	3501      	adds	r5, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    f340:	2d08      	cmp	r5, #8
    f342:	d1c3      	bne.n	f2cc <gpiote_pin_int_cfg+0xa8>
	return -ENODEV;
    f344:	f06f 0012 	mvn.w	r0, #18
    f348:	e7f2      	b.n	f330 <gpiote_pin_int_cfg+0x10c>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    f34a:	6913      	ldr	r3, [r2, #16]
    f34c:	69d2      	ldr	r2, [r2, #28]
    f34e:	4053      	eors	r3, r2
    f350:	fa23 f101 	lsr.w	r1, r3, r1
		return NRF_GPIO_PIN_SENSE_HIGH;
    f354:	f011 0f01 	tst.w	r1, #1
    f358:	bf14      	ite	ne
    f35a:	f44f 3200 	movne.w	r2, #131072	; 0x20000
    f35e:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    f362:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
    f366:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    f36a:	4313      	orrs	r3, r2
    f36c:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
    f370:	e7de      	b.n	f330 <gpiote_pin_int_cfg+0x10c>
    f372:	bf00      	nop
    f374:	40031000 	.word	0x40031000
    f378:	40842500 	.word	0x40842500

0000f37c <gpio_nrfx_config>:
{
    f37c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f380:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
    f382:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    f384:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
    f388:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
    f38c:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    f38e:	d040      	beq.n	f412 <gpio_nrfx_config+0x96>
    f390:	dc09      	bgt.n	f3a6 <gpio_nrfx_config+0x2a>
    f392:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    f396:	d03e      	beq.n	f416 <gpio_nrfx_config+0x9a>
    f398:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    f39c:	d03d      	beq.n	f41a <gpio_nrfx_config+0x9e>
    f39e:	b190      	cbz	r0, f3c6 <gpio_nrfx_config+0x4a>
		return -EINVAL;
    f3a0:	f06f 0015 	mvn.w	r0, #21
    f3a4:	e032      	b.n	f40c <gpio_nrfx_config+0x90>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    f3a6:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
    f3aa:	d038      	beq.n	f41e <gpio_nrfx_config+0xa2>
    f3ac:	dc04      	bgt.n	f3b8 <gpio_nrfx_config+0x3c>
    f3ae:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
    f3b2:	d1f5      	bne.n	f3a0 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
    f3b4:	2003      	movs	r0, #3
    f3b6:	e006      	b.n	f3c6 <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    f3b8:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    f3bc:	d031      	beq.n	f422 <gpio_nrfx_config+0xa6>
    f3be:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
    f3c2:	d1ed      	bne.n	f3a0 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
    f3c4:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    f3c6:	f406 7740 	and.w	r7, r6, #768	; 0x300
    f3ca:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
    f3ce:	d02a      	beq.n	f426 <gpio_nrfx_config+0xaa>
		pull = NRF_GPIO_PIN_NOPULL;
    f3d0:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
    f3d4:	4263      	negs	r3, r4
    f3d6:	4163      	adcs	r3, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
    f3d8:	2901      	cmp	r1, #1
		from_pin = pin;
    f3da:	bf19      	ittee	ne
    f3dc:	b2d4      	uxtbne	r4, r2
		to_pin   = pin;
    f3de:	46a1      	movne	r9, r4
		to_pin   = 31U;
    f3e0:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
    f3e4:	2400      	moveq	r4, #0
    f3e6:	f04f 0b01 	mov.w	fp, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
    f3ea:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    f3ee:	ea4f 074c 	mov.w	r7, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    f3f2:	ea47 070c 	orr.w	r7, r7, ip
    f3f6:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f3fa:	f8df a0a0 	ldr.w	sl, [pc, #160]	; f49c <gpio_nrfx_config+0x120>
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    f3fe:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    f402:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    f406:	45a1      	cmp	r9, r4
    f408:	d20f      	bcs.n	f42a <gpio_nrfx_config+0xae>
	return 0;
    f40a:	2000      	movs	r0, #0
}
    f40c:	b003      	add	sp, #12
    f40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
    f412:	2002      	movs	r0, #2
    f414:	e7d7      	b.n	f3c6 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
    f416:	2001      	movs	r0, #1
    f418:	e7d5      	b.n	f3c6 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
    f41a:	2004      	movs	r0, #4
    f41c:	e7d3      	b.n	f3c6 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
    f41e:	2005      	movs	r0, #5
    f420:	e7d1      	b.n	f3c6 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
    f422:	2006      	movs	r0, #6
    f424:	e7cf      	b.n	f3c6 <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
    f426:	2303      	movs	r3, #3
    f428:	e7d6      	b.n	f3d8 <gpio_nrfx_config+0x5c>
	return port->config->config_info;
    f42a:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    f42e:	6892      	ldr	r2, [r2, #8]
    f430:	7911      	ldrb	r1, [r2, #4]
    f432:	f004 021f 	and.w	r2, r4, #31
    f436:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f43a:	3280      	adds	r2, #128	; 0x80
    f43c:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    f440:	68a9      	ldr	r1, [r5, #8]
    f442:	fa0b f204 	lsl.w	r2, fp, r4
    f446:	2b00      	cmp	r3, #0
    f448:	d025      	beq.n	f496 <gpio_nrfx_config+0x11a>
    f44a:	4311      	orrs	r1, r2
    f44c:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    f44e:	6969      	ldr	r1, [r5, #20]
    f450:	06b0      	lsls	r0, r6, #26
    f452:	bf4c      	ite	mi
    f454:	4311      	orrmi	r1, r2
    f456:	4391      	bicpl	r1, r2
    f458:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
    f45a:	69a9      	ldr	r1, [r5, #24]
    f45c:	0670      	lsls	r0, r6, #25
    f45e:	bf4c      	ite	mi
    f460:	4311      	orrmi	r1, r2
    f462:	4391      	bicpl	r1, r2
    f464:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
    f466:	6929      	ldr	r1, [r5, #16]
    f468:	0770      	lsls	r0, r6, #29
    f46a:	bf4c      	ite	mi
    f46c:	4311      	orrmi	r1, r2
    f46e:	4391      	bicpl	r1, r2
    f470:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    f472:	69e9      	ldr	r1, [r5, #28]
    f474:	0630      	lsls	r0, r6, #24
    f476:	bf4c      	ite	mi
    f478:	430a      	orrmi	r2, r1
    f47a:	ea21 0202 	bicpl.w	r2, r1, r2
    f47e:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    f480:	4621      	mov	r1, r4
    f482:	4640      	mov	r0, r8
    f484:	9301      	str	r3, [sp, #4]
    f486:	f7ff fecd 	bl	f224 <gpiote_pin_int_cfg>
		if (res != 0) {
    f48a:	2800      	cmp	r0, #0
    f48c:	d1be      	bne.n	f40c <gpio_nrfx_config+0x90>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    f48e:	3401      	adds	r4, #1
    f490:	b2e4      	uxtb	r4, r4
    f492:	9b01      	ldr	r3, [sp, #4]
    f494:	e7b7      	b.n	f406 <gpio_nrfx_config+0x8a>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    f496:	ea21 0102 	bic.w	r1, r1, r2
    f49a:	e7d7      	b.n	f44c <gpio_nrfx_config+0xd0>
    f49c:	40842500 	.word	0x40842500

0000f4a0 <gpiote_event_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f4a0:	494f      	ldr	r1, [pc, #316]	; (f5e0 <gpiote_event_handler+0x140>)
{
    f4a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f4a6:	680d      	ldr	r5, [r1, #0]
	if (port_event) {
    f4a8:	2d00      	cmp	r5, #0
    f4aa:	d060      	beq.n	f56e <gpiote_event_handler+0xce>
	struct gpio_nrfx_data *data = get_port_data(port);
    f4ac:	4b4d      	ldr	r3, [pc, #308]	; (f5e4 <gpiote_event_handler+0x144>)
	u32_t pin = 0U;
    f4ae:	2600      	movs	r6, #0
	struct gpio_nrfx_data *data = get_port_data(port);
    f4b0:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
    f4b2:	681b      	ldr	r3, [r3, #0]
    f4b4:	f8df e138 	ldr.w	lr, [pc, #312]	; f5f0 <gpiote_event_handler+0x150>
    f4b8:	689f      	ldr	r7, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    f4ba:	e9d2 0302 	ldrd	r0, r3, [r2, #8]
    f4be:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
    f4c0:	e9d2 0405 	ldrd	r0, r4, [r2, #20]
    f4c4:	4320      	orrs	r0, r4
    f4c6:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    f4ca:	6838      	ldr	r0, [r7, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    f4cc:	69d4      	ldr	r4, [r2, #28]
    f4ce:	6912      	ldr	r2, [r2, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
    f4d0:	6900      	ldr	r0, [r0, #16]
    f4d2:	4054      	eors	r4, r2
    f4d4:	4044      	eors	r4, r0
	u32_t bit = 1U << pin;
    f4d6:	2001      	movs	r0, #1
	u32_t out = pin_states & level_pins;
    f4d8:	ea23 0404 	bic.w	r4, r3, r4
	while (level_pins) {
    f4dc:	bb93      	cbnz	r3, f544 <gpiote_event_handler+0xa4>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    f4de:	600b      	str	r3, [r1, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
    f4e0:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    f4e2:	2001      	movs	r0, #1
    f4e4:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    f4e6:	4940      	ldr	r1, [pc, #256]	; (f5e8 <gpiote_event_handler+0x148>)
    f4e8:	4e40      	ldr	r6, [pc, #256]	; (f5ec <gpiote_event_handler+0x14c>)
    f4ea:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
    f4ee:	fa00 fc03 	lsl.w	ip, r0, r3
    f4f2:	ea1c 0f02 	tst.w	ip, r2
    f4f6:	d00d      	beq.n	f514 <gpiote_event_handler+0x74>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f4f8:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
    f4fc:	b152      	cbz	r2, f514 <gpiote_event_handler+0x74>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    f4fe:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    f502:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    f506:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    f50a:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    f50e:	fa00 f202 	lsl.w	r2, r0, r2
    f512:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    f514:	3301      	adds	r3, #1
    f516:	2b08      	cmp	r3, #8
    f518:	d1e7      	bne.n	f4ea <gpiote_event_handler+0x4a>
	if (fired_triggers[0]) {
    f51a:	bb54      	cbnz	r4, f572 <gpiote_event_handler+0xd2>
	if (port_event) {
    f51c:	b185      	cbz	r5, f540 <gpiote_event_handler+0xa0>
	u32_t bit = 1U << pin;
    f51e:	2401      	movs	r4, #1
	u32_t pin = 0U;
    f520:	2500      	movs	r5, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
    f522:	4b30      	ldr	r3, [pc, #192]	; (f5e4 <gpiote_event_handler+0x144>)
    f524:	f8df c0c8 	ldr.w	ip, [pc, #200]	; f5f0 <gpiote_event_handler+0x150>
    f528:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
    f52a:	681b      	ldr	r3, [r3, #0]
    f52c:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    f52e:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
    f532:	400b      	ands	r3, r1
	out &= ~data->trig_edge & ~data->double_edge;
    f534:	e9d2 1005 	ldrd	r1, r0, [r2, #20]
    f538:	4301      	orrs	r1, r0
    f53a:	ea23 0301 	bic.w	r3, r3, r1
	while (level_pins) {
    f53e:	bb7b      	cbnz	r3, f5a0 <gpiote_event_handler+0x100>
}
    f540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    f544:	4203      	tst	r3, r0
    f546:	d00f      	beq.n	f568 <gpiote_event_handler+0xc8>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f548:	f897 c004 	ldrb.w	ip, [r7, #4]
    f54c:	f006 021f 	and.w	r2, r6, #31
    f550:	ea42 124c 	orr.w	r2, r2, ip, lsl #5
    f554:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    f558:	f8d2 c200 	ldr.w	ip, [r2, #512]	; 0x200
			level_pins &= ~bit;
    f55c:	ea23 0300 	bic.w	r3, r3, r0
    f560:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    f564:	f8c2 c200 	str.w	ip, [r2, #512]	; 0x200
		++pin;
    f568:	3601      	adds	r6, #1
		bit <<= 1;
    f56a:	0040      	lsls	r0, r0, #1
    f56c:	e7b6      	b.n	f4dc <gpiote_event_handler+0x3c>
	u32_t fired_triggers[GPIO_COUNT] = {0};
    f56e:	462c      	mov	r4, r5
    f570:	e7b6      	b.n	f4e0 <gpiote_event_handler+0x40>
	struct gpio_nrfx_data *data = get_port_data(port);
    f572:	4f1c      	ldr	r7, [pc, #112]	; (f5e4 <gpiote_event_handler+0x144>)
    f574:	f8d7 8008 	ldr.w	r8, [r7, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    f578:	f8d8 1000 	ldr.w	r1, [r8]
    f57c:	2900      	cmp	r1, #0
    f57e:	d0cd      	beq.n	f51c <gpiote_event_handler+0x7c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    f580:	680e      	ldr	r6, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
    f582:	f8d8 300c 	ldr.w	r3, [r8, #12]
    f586:	688a      	ldr	r2, [r1, #8]
    f588:	4023      	ands	r3, r4
    f58a:	4213      	tst	r3, r2
    f58c:	d003      	beq.n	f596 <gpiote_event_handler+0xf6>
			cb->handler(port, cb, pins);
    f58e:	684b      	ldr	r3, [r1, #4]
    f590:	4622      	mov	r2, r4
    f592:	4638      	mov	r0, r7
    f594:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    f596:	2e00      	cmp	r6, #0
    f598:	d0c0      	beq.n	f51c <gpiote_event_handler+0x7c>
    f59a:	4631      	mov	r1, r6
    f59c:	6836      	ldr	r6, [r6, #0]
    f59e:	e7f0      	b.n	f582 <gpiote_event_handler+0xe2>
		if (level_pins & bit) {
    f5a0:	421c      	tst	r4, r3
    f5a2:	d01a      	beq.n	f5da <gpiote_event_handler+0x13a>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f5a4:	7930      	ldrb	r0, [r6, #4]
    f5a6:	f005 011f 	and.w	r1, r5, #31
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    f5aa:	69d7      	ldr	r7, [r2, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f5ac:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    f5b0:	6910      	ldr	r0, [r2, #16]
    f5b2:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    f5b6:	4078      	eors	r0, r7
    f5b8:	40e8      	lsrs	r0, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
    f5ba:	f010 0f01 	tst.w	r0, #1
    f5be:	bf14      	ite	ne
    f5c0:	f44f 3700 	movne.w	r7, #131072	; 0x20000
    f5c4:	f44f 3740 	moveq.w	r7, #196608	; 0x30000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    f5c8:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
			level_pins &= ~bit;
    f5cc:	ea23 0304 	bic.w	r3, r3, r4
    f5d0:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    f5d4:	4338      	orrs	r0, r7
    f5d6:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
		++pin;
    f5da:	3501      	adds	r5, #1
		bit <<= 1;
    f5dc:	0064      	lsls	r4, r4, #1
    f5de:	e7ae      	b.n	f53e <gpiote_event_handler+0x9e>
    f5e0:	4003117c 	.word	0x4003117c
    f5e4:	200285b4 	.word	0x200285b4
    f5e8:	40031000 	.word	0x40031000
    f5ec:	40031100 	.word	0x40031100
    f5f0:	40842500 	.word	0x40842500

0000f5f4 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
    f5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    f5f6:	794b      	ldrb	r3, [r1, #5]
    f5f8:	2b01      	cmp	r3, #1
    f5fa:	d029      	beq.n	f650 <uarte_nrfx_configure+0x5c>
    f5fc:	2b03      	cmp	r3, #3
    f5fe:	d124      	bne.n	f64a <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    f600:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    f602:	798b      	ldrb	r3, [r1, #6]
    f604:	2b03      	cmp	r3, #3
    f606:	d120      	bne.n	f64a <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    f608:	79cc      	ldrb	r4, [r1, #7]
    f60a:	b12c      	cbz	r4, f618 <uarte_nrfx_configure+0x24>
    f60c:	2c01      	cmp	r4, #1
    f60e:	d11c      	bne.n	f64a <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
    f610:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    f612:	689b      	ldr	r3, [r3, #8]
    f614:	791b      	ldrb	r3, [r3, #4]
    f616:	b1c3      	cbz	r3, f64a <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    f618:	790a      	ldrb	r2, [r1, #4]
    f61a:	b112      	cbz	r2, f622 <uarte_nrfx_configure+0x2e>
    f61c:	2a02      	cmp	r2, #2
    f61e:	d114      	bne.n	f64a <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    f620:	220e      	movs	r2, #14
	switch (baudrate) {
    f622:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
    f626:	6805      	ldr	r5, [r0, #0]
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    f628:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    f62a:	68ad      	ldr	r5, [r5, #8]
	switch (baudrate) {
    f62c:	42bb      	cmp	r3, r7
	return config->uarte_regs;
    f62e:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    f630:	d062      	beq.n	f6f8 <uarte_nrfx_configure+0x104>
    f632:	d829      	bhi.n	f688 <uarte_nrfx_configure+0x94>
    f634:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    f638:	d061      	beq.n	f6fe <uarte_nrfx_configure+0x10a>
    f63a:	d814      	bhi.n	f666 <uarte_nrfx_configure+0x72>
    f63c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    f640:	d05f      	beq.n	f702 <uarte_nrfx_configure+0x10e>
    f642:	d807      	bhi.n	f654 <uarte_nrfx_configure+0x60>
    f644:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    f648:	d05e      	beq.n	f708 <uarte_nrfx_configure+0x114>
		return -ENOTSUP;
    f64a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    f64e:	e052      	b.n	f6f6 <uarte_nrfx_configure+0x102>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    f650:	2600      	movs	r6, #0
    f652:	e7d6      	b.n	f602 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    f654:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    f658:	d059      	beq.n	f70e <uarte_nrfx_configure+0x11a>
    f65a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    f65e:	d1f4      	bne.n	f64a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    f660:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    f664:	e03c      	b.n	f6e0 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    f666:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    f66a:	d053      	beq.n	f714 <uarte_nrfx_configure+0x120>
    f66c:	d804      	bhi.n	f678 <uarte_nrfx_configure+0x84>
    f66e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    f672:	d1ea      	bne.n	f64a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    f674:	4b32      	ldr	r3, [pc, #200]	; (f740 <uarte_nrfx_configure+0x14c>)
    f676:	e033      	b.n	f6e0 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    f678:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    f67c:	d04c      	beq.n	f718 <uarte_nrfx_configure+0x124>
    f67e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    f682:	d1e2      	bne.n	f64a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    f684:	4b2f      	ldr	r3, [pc, #188]	; (f744 <uarte_nrfx_configure+0x150>)
    f686:	e02b      	b.n	f6e0 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    f688:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    f68c:	d046      	beq.n	f71c <uarte_nrfx_configure+0x128>
    f68e:	d812      	bhi.n	f6b6 <uarte_nrfx_configure+0xc2>
    f690:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    f694:	42bb      	cmp	r3, r7
    f696:	d044      	beq.n	f722 <uarte_nrfx_configure+0x12e>
    f698:	d805      	bhi.n	f6a6 <uarte_nrfx_configure+0xb2>
    f69a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    f69e:	d1d4      	bne.n	f64a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    f6a0:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    f6a4:	e01c      	b.n	f6e0 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    f6a6:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    f6aa:	d03d      	beq.n	f728 <uarte_nrfx_configure+0x134>
    f6ac:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    f6b0:	d1cb      	bne.n	f64a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    f6b2:	4b25      	ldr	r3, [pc, #148]	; (f748 <uarte_nrfx_configure+0x154>)
    f6b4:	e014      	b.n	f6e0 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    f6b6:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    f6ba:	d038      	beq.n	f72e <uarte_nrfx_configure+0x13a>
    f6bc:	d808      	bhi.n	f6d0 <uarte_nrfx_configure+0xdc>
    f6be:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    f6c2:	d037      	beq.n	f734 <uarte_nrfx_configure+0x140>
    f6c4:	4f21      	ldr	r7, [pc, #132]	; (f74c <uarte_nrfx_configure+0x158>)
    f6c6:	42bb      	cmp	r3, r7
    f6c8:	d1bf      	bne.n	f64a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    f6ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    f6ce:	e007      	b.n	f6e0 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    f6d0:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    f6d4:	d031      	beq.n	f73a <uarte_nrfx_configure+0x146>
    f6d6:	4f1e      	ldr	r7, [pc, #120]	; (f750 <uarte_nrfx_configure+0x15c>)
    f6d8:	42bb      	cmp	r3, r7
    f6da:	d1b6      	bne.n	f64a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    f6dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    f6e0:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
    f6e4:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    f6e6:	6883      	ldr	r3, [r0, #8]
    f6e8:	4322      	orrs	r2, r4
    f6ea:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    f6ec:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    f6f0:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    f6f4:	2000      	movs	r0, #0
}
    f6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    f6f8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    f6fc:	e7f0      	b.n	f6e0 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    f6fe:	4b15      	ldr	r3, [pc, #84]	; (f754 <uarte_nrfx_configure+0x160>)
    f700:	e7ee      	b.n	f6e0 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00027000;
    f702:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    f706:	e7eb      	b.n	f6e0 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
    f708:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    f70c:	e7e8      	b.n	f6e0 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    f70e:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    f712:	e7e5      	b.n	f6e0 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    f714:	4b10      	ldr	r3, [pc, #64]	; (f758 <uarte_nrfx_configure+0x164>)
    f716:	e7e3      	b.n	f6e0 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    f718:	4b10      	ldr	r3, [pc, #64]	; (f75c <uarte_nrfx_configure+0x168>)
    f71a:	e7e1      	b.n	f6e0 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    f71c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    f720:	e7de      	b.n	f6e0 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    f722:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    f726:	e7db      	b.n	f6e0 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    f728:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    f72c:	e7d8      	b.n	f6e0 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    f72e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    f732:	e7d5      	b.n	f6e0 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    f734:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    f738:	e7d2      	b.n	f6e0 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    f73a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    f73e:	e7cf      	b.n	f6e0 <uarte_nrfx_configure+0xec>
    f740:	00275000 	.word	0x00275000
    f744:	0075c000 	.word	0x0075c000
    f748:	013a9000 	.word	0x013a9000
    f74c:	0003d090 	.word	0x0003d090
    f750:	000f4240 	.word	0x000f4240
    f754:	0013b000 	.word	0x0013b000
    f758:	003af000 	.word	0x003af000
    f75c:	004ea000 	.word	0x004ea000

0000f760 <uarte_0_init>:
	#endif
	#if !defined(DT_NORDIC_NRF_UARTE_UART_0_RX_PIN)
	#define DT_NORDIC_NRF_UARTE_UART_0_RX_PIN NRF_UARTE_PSEL_DISCONNECTED
	#endif

	UART_NRF_UARTE_DEVICE(0);
    f760:	b570      	push	{r4, r5, r6, lr}
    f762:	4606      	mov	r6, r0
    f764:	2200      	movs	r2, #0
    f766:	2101      	movs	r1, #1
    f768:	2008      	movs	r0, #8
    f76a:	f7fe f8d5 	bl	d918 <z_arm_irq_priority_set>
    f76e:	2008      	movs	r0, #8
    f770:	f7fe f8c2 	bl	d8f8 <arch_irq_enable>
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    f774:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
	return dev->config->config_info;
    f778:	6833      	ldr	r3, [r6, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    f77a:	68b5      	ldr	r5, [r6, #8]
	return config->uarte_regs;
    f77c:	689b      	ldr	r3, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f77e:	2103      	movs	r1, #3
    f780:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
    f782:	4b1a      	ldr	r3, [pc, #104]	; (f7ec <uarte_0_init+0x8c>)
    p_reg->PSEL.TXD = pseltxd;
    f784:	201d      	movs	r0, #29
    f786:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f788:	2200      	movs	r2, #0
    f78a:	f8c3 1274 	str.w	r1, [r3, #628]	; 0x274
    f78e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    f792:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    f796:	201c      	movs	r0, #28
    f798:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->OUTSET = set_mask;
    f79c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    f7a0:	6098      	str	r0, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f7a2:	f8c3 126c 	str.w	r1, [r3, #620]	; 0x26c
    f7a6:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    p_reg->PSEL.RTS = pselrts;
    f7aa:	231b      	movs	r3, #27
    f7ac:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    f7b0:	231a      	movs	r3, #26
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    f7b2:	4629      	mov	r1, r5
    f7b4:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    f7b8:	4630      	mov	r0, r6
    f7ba:	f7ff ff1b 	bl	f5f4 <uarte_nrfx_configure>
	if (err) {
    f7be:	b9a0      	cbnz	r0, f7ea <uarte_0_init+0x8a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    f7c0:	2308      	movs	r3, #8
    f7c2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    f7c6:	f105 030c 	add.w	r3, r5, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f7ca:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    f7ce:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    f7d2:	2301      	movs	r3, #1
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
    f7d4:	68aa      	ldr	r2, [r5, #8]
    f7d6:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    f7da:	6892      	ldr	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f7dc:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    f7de:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    f7e2:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f7e6:	60a3      	str	r3, [r4, #8]
    f7e8:	60e3      	str	r3, [r4, #12]
	UART_NRF_UARTE_DEVICE(0);
    f7ea:	bd70      	pop	{r4, r5, r6, pc}
    f7ec:	40842500 	.word	0x40842500

0000f7f0 <_bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
    f7f0:	2200      	movs	r2, #0
{
    f7f2:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
    f7f4:	4611      	mov	r1, r2
    f7f6:	202a      	movs	r0, #42	; 0x2a
    f7f8:	f7fe f88e 	bl	d918 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	init_ret = bsd_init();
    f7fc:	f003 fc6a 	bl	130d4 <bsd_init>
    f800:	4b01      	ldr	r3, [pc, #4]	; (f808 <_bsdlib_init+0x18>)
    f802:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
    f804:	2000      	movs	r0, #0
    f806:	bd08      	pop	{r3, pc}
    f808:	20020268 	.word	0x20020268

0000f80c <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
    f80c:	b570      	push	{r4, r5, r6, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
    f80e:	4b0d      	ldr	r3, [pc, #52]	; (f844 <thread_monitor_entry_get+0x38>)
	struct thread_monitor_entry *new_entry = thread_event_monitor;
    f810:	4c0d      	ldr	r4, [pc, #52]	; (f848 <thread_monitor_entry_get+0x3c>)
		entry_age = rpc_event_cnt - entry->cnt;
    f812:	681a      	ldr	r2, [r3, #0]
    f814:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
    f816:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
    f818:	4623      	mov	r3, r4
		if (entry->id == id) {
    f81a:	6819      	ldr	r1, [r3, #0]
    f81c:	4281      	cmp	r1, r0
    f81e:	d00e      	beq.n	f83e <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
    f820:	b151      	cbz	r1, f838 <thread_monitor_entry_get+0x2c>
		entry_age = rpc_event_cnt - entry->cnt;
    f822:	6859      	ldr	r1, [r3, #4]
    f824:	1a51      	subs	r1, r2, r1
		if (entry_age > oldest_entry_age) {
    f826:	42b1      	cmp	r1, r6
    f828:	bfc4      	itt	gt
    f82a:	461c      	movgt	r4, r3
    f82c:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    f82e:	3d01      	subs	r5, #1
    f830:	f103 0308 	add.w	r3, r3, #8
    f834:	d1f1      	bne.n	f81a <thread_monitor_entry_get+0xe>
    f836:	4623      	mov	r3, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
    f838:	3a01      	subs	r2, #1
	new_entry->id = id;
    f83a:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
    f83c:	605a      	str	r2, [r3, #4]

	return new_entry;
}
    f83e:	4618      	mov	r0, r3
    f840:	bd70      	pop	{r4, r5, r6, pc}
    f842:	bf00      	nop
    f844:	2002026c 	.word	0x2002026c
    f848:	20020278 	.word	0x20020278

0000f84c <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
    f84c:	4668      	mov	r0, sp
    f84e:	f020 0107 	bic.w	r1, r0, #7
    f852:	468d      	mov	sp, r1
    f854:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    f856:	4b0d      	ldr	r3, [pc, #52]	; (f88c <rpc_proxy_irq_handler+0x40>)
    f858:	e8d3 2fef 	ldaex	r2, [r3]
    f85c:	3201      	adds	r2, #1
    f85e:	e8c3 2fe1 	stlex	r1, r2, [r3]
    f862:	2900      	cmp	r1, #0
    f864:	d1f8      	bne.n	f858 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
    f866:	f007 fd67 	bl	17338 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
    f86a:	4b09      	ldr	r3, [pc, #36]	; (f890 <rpc_proxy_irq_handler+0x44>)
    f86c:	681c      	ldr	r4, [r3, #0]
    f86e:	b93c      	cbnz	r4, f880 <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
    f870:	f7fe f86a 	bl	d948 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
    f874:	f7fd ffb0 	bl	d7d8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
    f878:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
    f87c:	4685      	mov	sp, r0
    f87e:	4770      	bx	lr
	z_impl_k_sem_give(sem);
    f880:	1d20      	adds	r0, r4, #4
    f882:	f00a fc4f 	bl	1a124 <z_impl_k_sem_give>
    f886:	6824      	ldr	r4, [r4, #0]
	return node->next;
    f888:	e7f1      	b.n	f86e <rpc_proxy_irq_handler+0x22>
    f88a:	bf00      	nop
    f88c:	2002026c 	.word	0x2002026c
    f890:	20020270 	.word	0x20020270

0000f894 <bsd_os_timedwait>:
{
    f894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f898:	4688      	mov	r8, r1
    f89a:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_get();
    f89c:	f00d fd9e 	bl	1d3dc <z_impl_k_uptime_get>
	if (*timeout == 0) {
    f8a0:	f8d8 3000 	ldr.w	r3, [r8]
    f8a4:	4606      	mov	r6, r0
    f8a6:	2b00      	cmp	r3, #0
    f8a8:	460f      	mov	r7, r1
    f8aa:	d103      	bne.n	f8b4 <bsd_os_timedwait+0x20>
	z_impl_k_yield();
    f8ac:	f00a fbc0 	bl	1a030 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
    f8b0:	203c      	movs	r0, #60	; 0x3c
    f8b2:	e06e      	b.n	f992 <bsd_os_timedwait+0xfe>
		*timeout = K_FOREVER;
    f8b4:	bfbc      	itt	lt
    f8b6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    f8ba:	f8c8 3000 	strlt.w	r3, [r8]
	return z_impl_k_sem_init(sem, initial_count, limit);
    f8be:	2201      	movs	r2, #1
    f8c0:	2100      	movs	r1, #0
    f8c2:	a802      	add	r0, sp, #8
    f8c4:	f00d fd1c 	bl	1d300 <z_impl_k_sem_init>
    f8c8:	f10d 0a04 	add.w	sl, sp, #4
    f8cc:	f04f 0320 	mov.w	r3, #32
    f8d0:	f3ef 8b11 	mrs	fp, BASEPRI
    f8d4:	f383 8811 	msr	BASEPRI, r3
    f8d8:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    f8dc:	f00a fc1c 	bl	1a118 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
    f8e0:	f7ff ff94 	bl	f80c <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
    f8e4:	4933      	ldr	r1, [pc, #204]	; (f9b4 <bsd_os_timedwait+0x120>)
    f8e6:	6843      	ldr	r3, [r0, #4]
    f8e8:	680a      	ldr	r2, [r1, #0]
    f8ea:	4689      	mov	r9, r1
    f8ec:	4293      	cmp	r3, r2
    f8ee:	f04f 0300 	mov.w	r3, #0
    f8f2:	d108      	bne.n	f906 <bsd_os_timedwait+0x72>
	parent->next = child;
    f8f4:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
    f8f6:	4b30      	ldr	r3, [pc, #192]	; (f9b8 <bsd_os_timedwait+0x124>)
    f8f8:	685a      	ldr	r2, [r3, #4]
    f8fa:	2a00      	cmp	r2, #0
    f8fc:	d14c      	bne.n	f998 <bsd_os_timedwait+0x104>
	list->head = node;
    f8fe:	e9c3 aa00 	strd	sl, sl, [r3]
		allow_to_sleep = true;
    f902:	2301      	movs	r3, #1
    f904:	e000      	b.n	f908 <bsd_os_timedwait+0x74>
	entry->cnt = rpc_event_cnt;
    f906:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
    f908:	f38b 8811 	msr	BASEPRI, fp
    f90c:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
    f910:	2b00      	cmp	r3, #0
    f912:	d03d      	beq.n	f990 <bsd_os_timedwait+0xfc>
	(void)k_sem_take(&thread.sem, *timeout);
    f914:	f8d8 1000 	ldr.w	r1, [r8]
	return z_impl_k_sem_take(sem, timeout);
    f918:	a802      	add	r0, sp, #8
    f91a:	f00a fc2f 	bl	1a17c <z_impl_k_sem_take>
	__asm__ volatile(
    f91e:	f04f 0320 	mov.w	r3, #32
    f922:	f3ef 8b11 	mrs	fp, BASEPRI
    f926:	f383 8811 	msr	BASEPRI, r3
    f92a:	f3bf 8f6f 	isb	sy
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f92e:	2000      	movs	r0, #0
    f930:	4b21      	ldr	r3, [pc, #132]	; (f9b8 <bsd_os_timedwait+0x124>)
    f932:	681a      	ldr	r2, [r3, #0]
    f934:	b152      	cbz	r2, f94c <bsd_os_timedwait+0xb8>
    f936:	4552      	cmp	r2, sl
    f938:	d139      	bne.n	f9ae <bsd_os_timedwait+0x11a>
Z_GENLIST_REMOVE(slist, snode)
    f93a:	9901      	ldr	r1, [sp, #4]
    f93c:	bb88      	cbnz	r0, f9a2 <bsd_os_timedwait+0x10e>
    f93e:	6858      	ldr	r0, [r3, #4]
	list->head = node;
    f940:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    f942:	4290      	cmp	r0, r2
    f944:	d100      	bne.n	f948 <bsd_os_timedwait+0xb4>
	list->tail = node;
    f946:	6059      	str	r1, [r3, #4]
	parent->next = child;
    f948:	2300      	movs	r3, #0
    f94a:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
    f94c:	f00a fbe4 	bl	1a118 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
    f950:	f7ff ff5c 	bl	f80c <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
    f954:	f8d9 3000 	ldr.w	r3, [r9]
    f958:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
    f95a:	f38b 8811 	msr	BASEPRI, fp
    f95e:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
    f962:	f8d8 9000 	ldr.w	r9, [r8]
    f966:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    f96a:	d011      	beq.n	f990 <bsd_os_timedwait+0xfc>
	return z_impl_k_uptime_get();
    f96c:	f00d fd36 	bl	1d3dc <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
    f970:	eb16 0209 	adds.w	r2, r6, r9
    f974:	eb47 73e9 	adc.w	r3, r7, r9, asr #31
    f978:	1a14      	subs	r4, r2, r0
    f97a:	eb63 0501 	sbc.w	r5, r3, r1
	*timeout = remaining > 0 ? remaining : 0;
    f97e:	2c00      	cmp	r4, #0
    f980:	f175 0300 	sbcs.w	r3, r5, #0
    f984:	bfb8      	it	lt
    f986:	2400      	movlt	r4, #0
    f988:	f8c8 4000 	str.w	r4, [r8]
	if (*timeout == 0) {
    f98c:	2c00      	cmp	r4, #0
    f98e:	d08f      	beq.n	f8b0 <bsd_os_timedwait+0x1c>
	return 0;
    f990:	2000      	movs	r0, #0
}
    f992:	b009      	add	sp, #36	; 0x24
    f994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f998:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    f99c:	f8c3 a004 	str.w	sl, [r3, #4]
    f9a0:	e7af      	b.n	f902 <bsd_os_timedwait+0x6e>
	parent->next = child;
    f9a2:	6001      	str	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    f9a4:	6859      	ldr	r1, [r3, #4]
    f9a6:	4291      	cmp	r1, r2
	list->tail = node;
    f9a8:	bf08      	it	eq
    f9aa:	6058      	streq	r0, [r3, #4]
    f9ac:	e7cc      	b.n	f948 <bsd_os_timedwait+0xb4>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f9ae:	4610      	mov	r0, r2
    f9b0:	6812      	ldr	r2, [r2, #0]
    f9b2:	e7bf      	b.n	f934 <bsd_os_timedwait+0xa0>
    f9b4:	2002026c 	.word	0x2002026c
    f9b8:	20020270 	.word	0x20020270

0000f9bc <bsd_os_errno_set>:
	switch (err_code) {
    f9bc:	282d      	cmp	r0, #45	; 0x2d
{
    f9be:	b510      	push	{r4, lr}
    f9c0:	4604      	mov	r4, r0
	switch (err_code) {
    f9c2:	d00c      	beq.n	f9de <bsd_os_errno_set+0x22>
    f9c4:	dc38      	bgt.n	fa38 <bsd_os_errno_set+0x7c>
    f9c6:	280e      	cmp	r0, #14
    f9c8:	d009      	beq.n	f9de <bsd_os_errno_set+0x22>
    f9ca:	dc11      	bgt.n	f9f0 <bsd_os_errno_set+0x34>
    f9cc:	2808      	cmp	r0, #8
    f9ce:	d006      	beq.n	f9de <bsd_os_errno_set+0x22>
    f9d0:	dc09      	bgt.n	f9e6 <bsd_os_errno_set+0x2a>
    f9d2:	2802      	cmp	r0, #2
    f9d4:	d003      	beq.n	f9de <bsd_os_errno_set+0x22>
    f9d6:	2805      	cmp	r0, #5
    f9d8:	d001      	beq.n	f9de <bsd_os_errno_set+0x22>
    f9da:	2801      	cmp	r0, #1
    f9dc:	d119      	bne.n	fa12 <bsd_os_errno_set+0x56>
		errno = ETIMEDOUT;
    f9de:	f00c fcf9 	bl	1c3d4 <z_errno>
    f9e2:	6004      	str	r4, [r0, #0]
}
    f9e4:	bd10      	pop	{r4, pc}
	switch (err_code) {
    f9e6:	280c      	cmp	r0, #12
    f9e8:	d0f9      	beq.n	f9de <bsd_os_errno_set+0x22>
    f9ea:	dc57      	bgt.n	fa9c <bsd_os_errno_set+0xe0>
    f9ec:	2809      	cmp	r0, #9
    f9ee:	e7f5      	b.n	f9dc <bsd_os_errno_set+0x20>
    f9f0:	2828      	cmp	r0, #40	; 0x28
    f9f2:	f000 8083 	beq.w	fafc <bsd_os_errno_set+0x140>
    f9f6:	dc05      	bgt.n	fa04 <bsd_os_errno_set+0x48>
    f9f8:	2818      	cmp	r0, #24
    f9fa:	d0f0      	beq.n	f9de <bsd_os_errno_set+0x22>
    f9fc:	2823      	cmp	r0, #35	; 0x23
    f9fe:	d052      	beq.n	faa6 <bsd_os_errno_set+0xea>
    fa00:	2816      	cmp	r0, #22
    fa02:	e7eb      	b.n	f9dc <bsd_os_errno_set+0x20>
    fa04:	282a      	cmp	r0, #42	; 0x2a
    fa06:	d0ea      	beq.n	f9de <bsd_os_errno_set+0x22>
    fa08:	db51      	blt.n	faae <bsd_os_errno_set+0xf2>
    fa0a:	282b      	cmp	r0, #43	; 0x2b
    fa0c:	d0e7      	beq.n	f9de <bsd_os_errno_set+0x22>
    fa0e:	282c      	cmp	r0, #44	; 0x2c
    fa10:	d051      	beq.n	fab6 <bsd_os_errno_set+0xfa>
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
    fa12:	2301      	movs	r3, #1
    fa14:	f04f 0200 	mov.w	r2, #0
    fa18:	493a      	ldr	r1, [pc, #232]	; (fb04 <bsd_os_errno_set+0x148>)
    fa1a:	f363 0207 	bfi	r2, r3, #0, #8
    fa1e:	4b3a      	ldr	r3, [pc, #232]	; (fb08 <bsd_os_errno_set+0x14c>)
    fa20:	483a      	ldr	r0, [pc, #232]	; (fb0c <bsd_os_errno_set+0x150>)
    fa22:	1a5b      	subs	r3, r3, r1
    fa24:	08db      	lsrs	r3, r3, #3
    fa26:	f363 128f 	bfi	r2, r3, #6, #10
    fa2a:	4621      	mov	r1, r4
    fa2c:	f00b fa58 	bl	1aee0 <log_1>
		errno = 0xBAADBAAD;
    fa30:	f00c fcd0 	bl	1c3d4 <z_errno>
    fa34:	4b36      	ldr	r3, [pc, #216]	; (fb10 <bsd_os_errno_set+0x154>)
    fa36:	e034      	b.n	faa2 <bsd_os_errno_set+0xe6>
	switch (err_code) {
    fa38:	283c      	cmp	r0, #60	; 0x3c
    fa3a:	d0d0      	beq.n	f9de <bsd_os_errno_set+0x22>
    fa3c:	dc15      	bgt.n	fa6a <bsd_os_errno_set+0xae>
    fa3e:	2833      	cmp	r0, #51	; 0x33
    fa40:	d0cd      	beq.n	f9de <bsd_os_errno_set+0x22>
    fa42:	dc05      	bgt.n	fa50 <bsd_os_errno_set+0x94>
    fa44:	2830      	cmp	r0, #48	; 0x30
    fa46:	d0ca      	beq.n	f9de <bsd_os_errno_set+0x22>
    fa48:	2832      	cmp	r0, #50	; 0x32
    fa4a:	d038      	beq.n	fabe <bsd_os_errno_set+0x102>
    fa4c:	282f      	cmp	r0, #47	; 0x2f
    fa4e:	e7c5      	b.n	f9dc <bsd_os_errno_set+0x20>
    fa50:	2836      	cmp	r0, #54	; 0x36
    fa52:	d0c4      	beq.n	f9de <bsd_os_errno_set+0x22>
    fa54:	dc01      	bgt.n	fa5a <bsd_os_errno_set+0x9e>
    fa56:	2834      	cmp	r0, #52	; 0x34
    fa58:	e7c0      	b.n	f9dc <bsd_os_errno_set+0x20>
    fa5a:	2838      	cmp	r0, #56	; 0x38
    fa5c:	d0bf      	beq.n	f9de <bsd_os_errno_set+0x22>
    fa5e:	2839      	cmp	r0, #57	; 0x39
    fa60:	d1d7      	bne.n	fa12 <bsd_os_errno_set+0x56>
		errno = ENOTCONN;
    fa62:	f00c fcb7 	bl	1c3d4 <z_errno>
    fa66:	2339      	movs	r3, #57	; 0x39
    fa68:	e01b      	b.n	faa2 <bsd_os_errno_set+0xe6>
	switch (err_code) {
    fa6a:	287d      	cmp	r0, #125	; 0x7d
    fa6c:	d033      	beq.n	fad6 <bsd_os_errno_set+0x11a>
    fa6e:	dc09      	bgt.n	fa84 <bsd_os_errno_set+0xc8>
    fa70:	2870      	cmp	r0, #112	; 0x70
    fa72:	d028      	beq.n	fac6 <bsd_os_errno_set+0x10a>
    fa74:	2873      	cmp	r0, #115	; 0x73
    fa76:	d02a      	beq.n	face <bsd_os_errno_set+0x112>
    fa78:	2869      	cmp	r0, #105	; 0x69
    fa7a:	d1ca      	bne.n	fa12 <bsd_os_errno_set+0x56>
		errno = ENOBUFS;
    fa7c:	f00c fcaa 	bl	1c3d4 <z_errno>
    fa80:	2337      	movs	r3, #55	; 0x37
    fa82:	e00e      	b.n	faa2 <bsd_os_errno_set+0xe6>
	switch (err_code) {
    fa84:	287f      	cmp	r0, #127	; 0x7f
    fa86:	d02f      	beq.n	fae8 <bsd_os_errno_set+0x12c>
    fa88:	db29      	blt.n	fade <bsd_os_errno_set+0x122>
    fa8a:	2880      	cmp	r0, #128	; 0x80
    fa8c:	d031      	beq.n	faf2 <bsd_os_errno_set+0x136>
    fa8e:	2881      	cmp	r0, #129	; 0x81
    fa90:	d1bf      	bne.n	fa12 <bsd_os_errno_set+0x56>
		errno = EKEYREJECTED;
    fa92:	f00c fc9f 	bl	1c3d4 <z_errno>
    fa96:	f240 73d4 	movw	r3, #2004	; 0x7d4
    fa9a:	e002      	b.n	faa2 <bsd_os_errno_set+0xe6>
		errno = EACCES;
    fa9c:	f00c fc9a 	bl	1c3d4 <z_errno>
    faa0:	230d      	movs	r3, #13
		errno = 0xBAADBAAD;
    faa2:	6003      	str	r3, [r0, #0]
}
    faa4:	e79e      	b.n	f9e4 <bsd_os_errno_set+0x28>
		errno = EAGAIN;
    faa6:	f00c fc95 	bl	1c3d4 <z_errno>
    faaa:	230b      	movs	r3, #11
    faac:	e7f9      	b.n	faa2 <bsd_os_errno_set+0xe6>
		errno = EPROTOTYPE;
    faae:	f00c fc91 	bl	1c3d4 <z_errno>
    fab2:	2329      	movs	r3, #41	; 0x29
    fab4:	e7f5      	b.n	faa2 <bsd_os_errno_set+0xe6>
		errno = ESOCKTNOSUPPORT;
    fab6:	f00c fc8d 	bl	1c3d4 <z_errno>
    faba:	232c      	movs	r3, #44	; 0x2c
    fabc:	e7f1      	b.n	faa2 <bsd_os_errno_set+0xe6>
		errno = ENETDOWN;
    fabe:	f00c fc89 	bl	1c3d4 <z_errno>
    fac2:	233e      	movs	r3, #62	; 0x3e
    fac4:	e7ed      	b.n	faa2 <bsd_os_errno_set+0xe6>
		errno = EHOSTDOWN;
    fac6:	f00c fc85 	bl	1c3d4 <z_errno>
    faca:	2343      	movs	r3, #67	; 0x43
    facc:	e7e9      	b.n	faa2 <bsd_os_errno_set+0xe6>
		errno = EINPROGRESS;
    face:	f00c fc81 	bl	1c3d4 <z_errno>
    fad2:	2344      	movs	r3, #68	; 0x44
    fad4:	e7e5      	b.n	faa2 <bsd_os_errno_set+0xe6>
		errno = ECANCELED;
    fad6:	f00c fc7d 	bl	1c3d4 <z_errno>
    fada:	2348      	movs	r3, #72	; 0x48
    fadc:	e7e1      	b.n	faa2 <bsd_os_errno_set+0xe6>
		errno = ENOKEY;
    fade:	f00c fc79 	bl	1c3d4 <z_errno>
    fae2:	f240 73d1 	movw	r3, #2001	; 0x7d1
    fae6:	e7dc      	b.n	faa2 <bsd_os_errno_set+0xe6>
		errno = EKEYEXPIRED;
    fae8:	f00c fc74 	bl	1c3d4 <z_errno>
    faec:	f240 73d2 	movw	r3, #2002	; 0x7d2
    faf0:	e7d7      	b.n	faa2 <bsd_os_errno_set+0xe6>
		errno = EKEYREVOKED;
    faf2:	f00c fc6f 	bl	1c3d4 <z_errno>
    faf6:	f240 73d3 	movw	r3, #2003	; 0x7d3
    fafa:	e7d2      	b.n	faa2 <bsd_os_errno_set+0xe6>
		errno = EMSGSIZE;
    fafc:	f00c fc6a 	bl	1c3d4 <z_errno>
    fb00:	2324      	movs	r3, #36	; 0x24
    fb02:	e7ce      	b.n	faa2 <bsd_os_errno_set+0xe6>
    fb04:	0001d954 	.word	0x0001d954
    fb08:	0001d97c 	.word	0x0001d97c
    fb0c:	0001e856 	.word	0x0001e856
    fb10:	baadbaad 	.word	0xbaadbaad

0000fb14 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fb14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    fb18:	4b01      	ldr	r3, [pc, #4]	; (fb20 <bsd_os_application_irq_set+0xc>)
    fb1a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    fb1e:	4770      	bx	lr
    fb20:	e000e100 	.word	0xe000e100

0000fb24 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fb24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    fb28:	4b01      	ldr	r3, [pc, #4]	; (fb30 <bsd_os_application_irq_clear+0xc>)
    fb2a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    fb2e:	4770      	bx	lr
    fb30:	e000e100 	.word	0xe000e100

0000fb34 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fb34:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    fb38:	4b01      	ldr	r3, [pc, #4]	; (fb40 <bsd_os_trace_irq_set+0xc>)
    fb3a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    fb3e:	4770      	bx	lr
    fb40:	e000e100 	.word	0xe000e100

0000fb44 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fb44:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    fb48:	4b01      	ldr	r3, [pc, #4]	; (fb50 <bsd_os_trace_irq_clear+0xc>)
    fb4a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    fb4e:	4770      	bx	lr
    fb50:	e000e100 	.word	0xe000e100

0000fb54 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
    fb54:	b508      	push	{r3, lr}
	list->head = NULL;
    fb56:	2300      	movs	r3, #0
    fb58:	4a07      	ldr	r2, [pc, #28]	; (fb78 <bsd_os_init+0x24>)
	list->tail = NULL;
    fb5a:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    fb5e:	4a07      	ldr	r2, [pc, #28]	; (fb7c <bsd_os_init+0x28>)
    fb60:	e8d2 1fef 	ldaex	r1, [r2]
    fb64:	e8c2 3fe0 	stlex	r0, r3, [r2]
    fb68:	2800      	cmp	r0, #0
    fb6a:	d1f9      	bne.n	fb60 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
    fb6c:	f00c fc5d 	bl	1c42a <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
    fb70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
    fb74:	f00c bc4e 	b.w	1c414 <trace_task_create>
    fb78:	20020270 	.word	0x20020270
    fb7c:	2002026c 	.word	0x2002026c

0000fb80 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
    fb80:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
    fb84:	d03c      	beq.n	fc00 <z_to_nrf_optname+0x80>
    fb86:	dc04      	bgt.n	fb92 <z_to_nrf_optname+0x12>
    fb88:	2801      	cmp	r0, #1
    fb8a:	d044      	beq.n	fc16 <z_to_nrf_optname+0x96>
			break;
		}
		break;

	default:
		retval = -1;
    fb8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		break;
	}

	return retval;
}
    fb90:	4770      	bx	lr
	switch (z_in_level) {
    fb92:	f240 2302 	movw	r3, #514	; 0x202
    fb96:	4298      	cmp	r0, r3
    fb98:	d052      	beq.n	fc40 <z_to_nrf_optname+0xc0>
    fb9a:	f240 2303 	movw	r3, #515	; 0x203
    fb9e:	4298      	cmp	r0, r3
    fba0:	d1f4      	bne.n	fb8c <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
    fba2:	3901      	subs	r1, #1
    fba4:	2913      	cmp	r1, #19
    fba6:	d8f1      	bhi.n	fb8c <z_to_nrf_optname+0xc>
    fba8:	a301      	add	r3, pc, #4	; (adr r3, fbb0 <z_to_nrf_optname+0x30>)
    fbaa:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    fbae:	bf00      	nop
    fbb0:	0000fc4d 	.word	0x0000fc4d
    fbb4:	0000fc11 	.word	0x0000fc11
    fbb8:	0000fc31 	.word	0x0000fc31
    fbbc:	0000fc23 	.word	0x0000fc23
    fbc0:	0000fc35 	.word	0x0000fc35
    fbc4:	0000fc39 	.word	0x0000fc39
    fbc8:	0000fc3d 	.word	0x0000fc3d
    fbcc:	0000fb8d 	.word	0x0000fb8d
    fbd0:	0000fb8d 	.word	0x0000fb8d
    fbd4:	0000fb8d 	.word	0x0000fb8d
    fbd8:	0000fb8d 	.word	0x0000fb8d
    fbdc:	0000fb8d 	.word	0x0000fb8d
    fbe0:	0000fb8d 	.word	0x0000fb8d
    fbe4:	0000fb8d 	.word	0x0000fb8d
    fbe8:	0000fb8d 	.word	0x0000fb8d
    fbec:	0000fb8d 	.word	0x0000fb8d
    fbf0:	0000fb8d 	.word	0x0000fb8d
    fbf4:	0000fb8d 	.word	0x0000fb8d
    fbf8:	0000fb8d 	.word	0x0000fb8d
    fbfc:	0000fc27 	.word	0x0000fc27
		switch (z_in_optname) {
    fc00:	3901      	subs	r1, #1
    fc02:	2905      	cmp	r1, #5
    fc04:	d8c2      	bhi.n	fb8c <z_to_nrf_optname+0xc>
    fc06:	e8df f001 	tbb	[pc, r1]
    fc0a:	1503      	.short	0x1503
    fc0c:	210c1917 	.word	0x210c1917
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
    fc10:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
    fc12:	6013      	str	r3, [r2, #0]
    fc14:	e00a      	b.n	fc2c <z_to_nrf_optname+0xac>
		switch (z_in_optname) {
    fc16:	2914      	cmp	r1, #20
    fc18:	d005      	beq.n	fc26 <z_to_nrf_optname+0xa6>
    fc1a:	2919      	cmp	r1, #25
    fc1c:	d005      	beq.n	fc2a <z_to_nrf_optname+0xaa>
    fc1e:	2904      	cmp	r1, #4
    fc20:	d1b4      	bne.n	fb8c <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
    fc22:	2304      	movs	r3, #4
    fc24:	e7f5      	b.n	fc12 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
    fc26:	2314      	movs	r3, #20
    fc28:	e7f3      	b.n	fc12 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
    fc2a:	6011      	str	r1, [r2, #0]
	int retval = 0;
    fc2c:	2000      	movs	r0, #0
			break;
    fc2e:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
    fc30:	2303      	movs	r3, #3
    fc32:	e7ee      	b.n	fc12 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
    fc34:	2305      	movs	r3, #5
    fc36:	e7ec      	b.n	fc12 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
    fc38:	2306      	movs	r3, #6
    fc3a:	e7ea      	b.n	fc12 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
    fc3c:	2307      	movs	r3, #7
    fc3e:	e7e8      	b.n	fc12 <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
    fc40:	2902      	cmp	r1, #2
    fc42:	d0e5      	beq.n	fc10 <z_to_nrf_optname+0x90>
    fc44:	2903      	cmp	r1, #3
    fc46:	d0f3      	beq.n	fc30 <z_to_nrf_optname+0xb0>
    fc48:	2901      	cmp	r1, #1
    fc4a:	d19f      	bne.n	fb8c <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
    fc4c:	2301      	movs	r3, #1
    fc4e:	e7e0      	b.n	fc12 <z_to_nrf_optname+0x92>

0000fc50 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
    fc50:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
    fc52:	4b03      	ldr	r3, [pc, #12]	; (fc60 <nrf91_socket_iface_init+0x10>)
    fc54:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
    fc56:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
    fc58:	4802      	ldr	r0, [pc, #8]	; (fc64 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
    fc5a:	769a      	strb	r2, [r3, #26]
	socket_offload_register(&nrf91_socket_offload_ops);
    fc5c:	f7fd bbf0 	b.w	d440 <socket_offload_register>
    fc60:	200202c8 	.word	0x200202c8
    fc64:	0001db40 	.word	0x0001db40

0000fc68 <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
    fc68:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
    fc6a:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
    fc6c:	b118      	cbz	r0, fc76 <callback_worker+0xe>
		data->callback(data->data);
    fc6e:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
    fc72:	300c      	adds	r0, #12
    fc74:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
    fc76:	a901      	add	r1, sp, #4
    fc78:	4802      	ldr	r0, [pc, #8]	; (fc84 <callback_worker+0x1c>)
    fc7a:	f009 fca9 	bl	195d0 <k_mem_slab_free>
}
    fc7e:	b003      	add	sp, #12
    fc80:	f85d fb04 	ldr.w	pc, [sp], #4
    fc84:	20028614 	.word	0x20028614

0000fc88 <open_socket>:
{
    fc88:	b508      	push	{r3, lr}
	return socket_ops->socket(family, type, proto);
    fc8a:	4b09      	ldr	r3, [pc, #36]	; (fcb0 <open_socket+0x28>)
    fc8c:	f240 2201 	movw	r2, #513	; 0x201
    fc90:	681b      	ldr	r3, [r3, #0]
    fc92:	2100      	movs	r1, #0
    fc94:	681b      	ldr	r3, [r3, #0]
    fc96:	2066      	movs	r0, #102	; 0x66
    fc98:	4798      	blx	r3
	common_socket_fd = socket(AF_LTE, 0, NPROTO_AT);
    fc9a:	4b06      	ldr	r3, [pc, #24]	; (fcb4 <open_socket+0x2c>)
    fc9c:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
    fc9e:	3001      	adds	r0, #1
    fca0:	d104      	bne.n	fcac <open_socket+0x24>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    fca2:	f009 faf5 	bl	19290 <z_impl_z_errno>
		return -errno;
    fca6:	6800      	ldr	r0, [r0, #0]
    fca8:	4240      	negs	r0, r0
}
    fcaa:	bd08      	pop	{r3, pc}
	return 0;
    fcac:	2000      	movs	r0, #0
    fcae:	e7fc      	b.n	fcaa <open_socket+0x22>
    fcb0:	2002020c 	.word	0x2002020c
    fcb4:	200202cc 	.word	0x200202cc

0000fcb8 <at_cmd_driver_init>:

	k_sem_give(&cmd_pending);
}

static int at_cmd_driver_init(struct device *dev)
{
    fcb8:	b510      	push	{r4, lr}
    fcba:	b086      	sub	sp, #24
	int err;

	ARG_UNUSED(dev);

	err = open_socket();
    fcbc:	f7ff ffe4 	bl	fc88 <open_socket>
	if (err) {
    fcc0:	4604      	mov	r4, r0
    fcc2:	b188      	cbz	r0, fce8 <at_cmd_driver_init+0x30>
		LOG_ERR("Failed to open AT socket (err:%d)", err);
    fcc4:	2301      	movs	r3, #1
    fcc6:	f04f 0200 	mov.w	r2, #0
    fcca:	490f      	ldr	r1, [pc, #60]	; (fd08 <at_cmd_driver_init+0x50>)
    fccc:	f363 0207 	bfi	r2, r3, #0, #8
    fcd0:	4b0e      	ldr	r3, [pc, #56]	; (fd0c <at_cmd_driver_init+0x54>)
    fcd2:	1a5b      	subs	r3, r3, r1
    fcd4:	08db      	lsrs	r3, r3, #3
    fcd6:	4601      	mov	r1, r0
    fcd8:	f363 128f 	bfi	r2, r3, #6, #10
    fcdc:	480c      	ldr	r0, [pc, #48]	; (fd10 <at_cmd_driver_init+0x58>)
    fcde:	f00b f8ff 	bl	1aee0 <log_1>
			THREAD_PRIORITY, 0, K_NO_WAIT);

	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
    fce2:	4620      	mov	r0, r4
    fce4:	b006      	add	sp, #24
    fce6:	bd10      	pop	{r4, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    fce8:	230a      	movs	r3, #10
    fcea:	e9cd 0004 	strd	r0, r0, [sp, #16]
    fcee:	e9cd 0302 	strd	r0, r3, [sp, #8]
    fcf2:	e9cd 0000 	strd	r0, r0, [sp]
    fcf6:	4b07      	ldr	r3, [pc, #28]	; (fd14 <at_cmd_driver_init+0x5c>)
    fcf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    fcfc:	4906      	ldr	r1, [pc, #24]	; (fd18 <at_cmd_driver_init+0x60>)
    fcfe:	4807      	ldr	r0, [pc, #28]	; (fd1c <at_cmd_driver_init+0x64>)
    fd00:	f00a fab6 	bl	1a270 <z_impl_k_thread_create>
	return 0;
    fd04:	e7ed      	b.n	fce2 <at_cmd_driver_init+0x2a>
    fd06:	bf00      	nop
    fd08:	0001d954 	.word	0x0001d954
    fd0c:	0001d964 	.word	0x0001d964
    fd10:	0001e88f 	.word	0x0001e88f
    fd14:	0000fd21 	.word	0x0000fd21
    fd18:	200247a0 	.word	0x200247a0
    fd1c:	200202e0 	.word	0x200202e0

0000fd20 <socket_thread_fn>:
{
    fd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
					LOG_ERR("Response buffer not large "
    fd24:	4b8d      	ldr	r3, [pc, #564]	; (ff5c <socket_thread_fn+0x23c>)
    fd26:	4d8e      	ldr	r5, [pc, #568]	; (ff60 <socket_thread_fn+0x240>)
		bytes_read = recv(common_socket_fd, item->data,
    fd28:	f8df b258 	ldr.w	fp, [pc, #600]	; ff84 <socket_thread_fn+0x264>
					LOG_ERR("Response buffer not large "
    fd2c:	1aed      	subs	r5, r5, r3
{
    fd2e:	b087      	sub	sp, #28
					LOG_ERR("Response buffer not large "
    fd30:	f3c5 05c9 	ubfx	r5, r5, #3, #10
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
    fd34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fd38:	a903      	add	r1, sp, #12
    fd3a:	488a      	ldr	r0, [pc, #552]	; (ff64 <socket_thread_fn+0x244>)
    fd3c:	f009 fc1c 	bl	19578 <k_mem_slab_alloc>
		ret.code  = 0;
    fd40:	2300      	movs	r3, #0
	return socket_ops->recv(sock, buf, max_len, flags);
    fd42:	4c89      	ldr	r4, [pc, #548]	; (ff68 <socket_thread_fn+0x248>)
		item->callback = NULL;
    fd44:	9903      	ldr	r1, [sp, #12]
    fd46:	6822      	ldr	r2, [r4, #0]
    fd48:	f8c1 3a98 	str.w	r3, [r1, #2712]	; 0xa98
    fd4c:	6a56      	ldr	r6, [r2, #36]	; 0x24
    fd4e:	310c      	adds	r1, #12
		ret.code  = 0;
    fd50:	9304      	str	r3, [sp, #16]
		ret.state = AT_CMD_OK;
    fd52:	f88d 3014 	strb.w	r3, [sp, #20]
    fd56:	f640 228c 	movw	r2, #2700	; 0xa8c
    fd5a:	f8db 0000 	ldr.w	r0, [fp]
    fd5e:	47b0      	blx	r6
		if (bytes_read < 0) {
    fd60:	1e01      	subs	r1, r0, #0
    fd62:	4626      	mov	r6, r4
    fd64:	da5a      	bge.n	fe1c <socket_thread_fn+0xfc>
			LOG_ERR("AT socket recv failed with err %d",
    fd66:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
    fd6a:	f043 0301 	orr.w	r3, r3, #1
    fd6e:	f363 0707 	bfi	r7, r3, #0, #8
    fd72:	f365 178f 	bfi	r7, r5, #6, #10
    fd76:	487d      	ldr	r0, [pc, #500]	; (ff6c <socket_thread_fn+0x24c>)
    fd78:	463a      	mov	r2, r7
    fd7a:	f00b f8b1 	bl	1aee0 <log_1>
	return socket_ops->close(sock);
    fd7e:	6823      	ldr	r3, [r4, #0]
    fd80:	f8db 0000 	ldr.w	r0, [fp]
    fd84:	685b      	ldr	r3, [r3, #4]
    fd86:	4798      	blx	r3
			if ((close(common_socket_fd) == 0) &&
    fd88:	2800      	cmp	r0, #0
    fd8a:	d131      	bne.n	fdf0 <socket_thread_fn+0xd0>
			    (open_socket() == 0)) {
    fd8c:	f7ff ff7c 	bl	fc88 <open_socket>
			if ((close(common_socket_fd) == 0) &&
    fd90:	bb70      	cbnz	r0, fdf0 <socket_thread_fn+0xd0>
				LOG_INF("AT socket recovered");
    fd92:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    fd96:	f043 0303 	orr.w	r3, r3, #3
    fd9a:	f363 0807 	bfi	r8, r3, #0, #8
    fd9e:	f365 188f 	bfi	r8, r5, #6, #10
    fda2:	4641      	mov	r1, r8
    fda4:	4872      	ldr	r0, [pc, #456]	; (ff70 <socket_thread_fn+0x250>)
    fda6:	f00b f88e 	bl	1aec6 <log_0>
				ret.state = AT_CMD_ERROR;
    fdaa:	2301      	movs	r3, #1
    fdac:	f88d 3014 	strb.w	r3, [sp, #20]
    fdb0:	f009 fa6e 	bl	19290 <z_impl_z_errno>
				ret.code  = -errno;
    fdb4:	6803      	ldr	r3, [r0, #0]
    fdb6:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
    fdb8:	9304      	str	r3, [sp, #16]
		if (item->callback == NULL) {
    fdba:	9903      	ldr	r1, [sp, #12]
    fdbc:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
    fdc0:	2b00      	cmp	r3, #0
    fdc2:	f040 80a1 	bne.w	ff08 <socket_thread_fn+0x1e8>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
    fdc6:	a903      	add	r1, sp, #12
    fdc8:	4866      	ldr	r0, [pc, #408]	; (ff64 <socket_thread_fn+0x244>)
    fdca:	f009 fc01 	bl	195d0 <k_mem_slab_free>
	if (z_syscall_trap()) {
		return (unsigned int) arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_COUNT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_count_get(sem);
    fdce:	4b69      	ldr	r3, [pc, #420]	; (ff74 <socket_thread_fn+0x254>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
    fdd0:	689b      	ldr	r3, [r3, #8]
    fdd2:	2b00      	cmp	r3, #0
    fdd4:	d1ae      	bne.n	fd34 <socket_thread_fn+0x14>
    fdd6:	f89d 2014 	ldrb.w	r2, [sp, #20]
    fdda:	2a04      	cmp	r2, #4
    fddc:	d0aa      	beq.n	fd34 <socket_thread_fn+0x14>
			current_cmd_handler = NULL;
    fdde:	4a66      	ldr	r2, [pc, #408]	; (ff78 <socket_thread_fn+0x258>)
    fde0:	6013      	str	r3, [r2, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&msgq, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(msgq, data, timeout);
    fde2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fde6:	a904      	add	r1, sp, #16
    fde8:	4864      	ldr	r0, [pc, #400]	; (ff7c <socket_thread_fn+0x25c>)
    fdea:	f009 fcc7 	bl	1977c <z_impl_k_msgq_put>
    fdee:	e7a1      	b.n	fd34 <socket_thread_fn+0x14>
			LOG_ERR("Unrecoverable reception error (err: %d), "
    fdf0:	2301      	movs	r3, #1
    fdf2:	f04f 0400 	mov.w	r4, #0
    fdf6:	f363 0407 	bfi	r4, r3, #0, #8
    fdfa:	f365 148f 	bfi	r4, r5, #6, #10
    fdfe:	f009 fa47 	bl	19290 <z_impl_z_errno>
    fe02:	4622      	mov	r2, r4
    fe04:	6801      	ldr	r1, [r0, #0]
    fe06:	485e      	ldr	r0, [pc, #376]	; (ff80 <socket_thread_fn+0x260>)
    fe08:	f00b f86a 	bl	1aee0 <log_1>
    fe0c:	6833      	ldr	r3, [r6, #0]
    fe0e:	4a5d      	ldr	r2, [pc, #372]	; (ff84 <socket_thread_fn+0x264>)
    fe10:	685b      	ldr	r3, [r3, #4]
    fe12:	6810      	ldr	r0, [r2, #0]
    fe14:	4798      	blx	r3
}
    fe16:	b007      	add	sp, #28
    fe18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (bytes_read == sizeof(item->data) ||
    fe1c:	f640 238c 	movw	r3, #2700	; 0xa8c
    fe20:	4299      	cmp	r1, r3
    fe22:	d003      	beq.n	fe2c <socket_thread_fn+0x10c>
			   item->data[bytes_read - 1] != '\0') {
    fe24:	9e03      	ldr	r6, [sp, #12]
    fe26:	4431      	add	r1, r6
		} else if (bytes_read == sizeof(item->data) ||
    fe28:	7aca      	ldrb	r2, [r1, #11]
    fe2a:	b172      	cbz	r2, fe4a <socket_thread_fn+0x12a>
			LOG_ERR("AT message to large for reception buffer or "
    fe2c:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    fe30:	f043 0301 	orr.w	r3, r3, #1
    fe34:	f363 0907 	bfi	r9, r3, #0, #8
    fe38:	f365 198f 	bfi	r9, r5, #6, #10
    fe3c:	4649      	mov	r1, r9
    fe3e:	4852      	ldr	r0, [pc, #328]	; (ff88 <socket_thread_fn+0x268>)
    fe40:	f00b f841 	bl	1aec6 <log_0>
			ret.code  = -ENOBUFS;
    fe44:	f06f 0336 	mvn.w	r3, #54	; 0x36
    fe48:	e7b6      	b.n	fdb8 <socket_thread_fn+0x98>
	ret->state = AT_CMD_NOTIFICATION;
    fe4a:	2304      	movs	r3, #4
		payload_len = get_return_code(item->data, &ret);
    fe4c:	f106 040c 	add.w	r4, r6, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
    fe50:	494e      	ldr	r1, [pc, #312]	; (ff8c <socket_thread_fn+0x26c>)
    fe52:	4620      	mov	r0, r4
	ret->state = AT_CMD_NOTIFICATION;
    fe54:	f88d 3014 	strb.w	r3, [sp, #20]
    fe58:	9201      	str	r2, [sp, #4]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
    fe5a:	f00b ff6b 	bl	1bd34 <strstr>
		if (tmpstr) {
    fe5e:	4603      	mov	r3, r0
    fe60:	b120      	cbz	r0, fe6c <socket_thread_fn+0x14c>
			ret->state = AT_CMD_OK;
    fe62:	9a01      	ldr	r2, [sp, #4]
    fe64:	f88d 2014 	strb.w	r2, [sp, #20]
			ret->code  = -ENOEXEC;
    fe68:	9204      	str	r2, [sp, #16]
			break;
    fe6a:	e00e      	b.n	fe8a <socket_thread_fn+0x16a>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
    fe6c:	4948      	ldr	r1, [pc, #288]	; (ff90 <socket_thread_fn+0x270>)
    fe6e:	4620      	mov	r0, r4
    fe70:	f00b ff60 	bl	1bd34 <strstr>
		if (tmpstr) {
    fe74:	9001      	str	r0, [sp, #4]
    fe76:	b310      	cbz	r0, febe <socket_thread_fn+0x19e>
			ret->state = AT_CMD_ERROR_CMS;
    fe78:	2202      	movs	r2, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
    fe7a:	f106 0017 	add.w	r0, r6, #23
			ret->state = AT_CMD_ERROR_CME;
    fe7e:	f88d 2014 	strb.w	r2, [sp, #20]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
    fe82:	f00b fe42 	bl	1bb0a <atoi>
    fe86:	9b01      	ldr	r3, [sp, #4]
    fe88:	9004      	str	r0, [sp, #16]
		buf[new_len++] = '\0';
    fe8a:	2100      	movs	r1, #0
		new_len = tmpstr - buf;
    fe8c:	1b1a      	subs	r2, r3, r4
		buf[new_len++] = '\0';
    fe8e:	3201      	adds	r2, #1
    fe90:	7019      	strb	r1, [r3, #0]
		if (ret.state != AT_CMD_NOTIFICATION) {
    fe92:	f89d 3014 	ldrb.w	r3, [sp, #20]
    fe96:	2b04      	cmp	r3, #4
    fe98:	d04c      	beq.n	ff34 <socket_thread_fn+0x214>
			if ((response_buf_len > 0) &&
    fe9a:	4c3e      	ldr	r4, [pc, #248]	; (ff94 <socket_thread_fn+0x274>)
    fe9c:	6823      	ldr	r3, [r4, #0]
    fe9e:	2b00      	cmp	r3, #0
    fea0:	d051      	beq.n	ff46 <socket_thread_fn+0x226>
			    (response_buf != NULL)) {
    fea2:	4e3d      	ldr	r6, [pc, #244]	; (ff98 <socket_thread_fn+0x278>)
    fea4:	6830      	ldr	r0, [r6, #0]
			if ((response_buf_len > 0) &&
    fea6:	2800      	cmp	r0, #0
    fea8:	d04d      	beq.n	ff46 <socket_thread_fn+0x226>
				if (response_buf_len > payload_len) {
    feaa:	4293      	cmp	r3, r2
    feac:	d91c      	bls.n	fee8 <socket_thread_fn+0x1c8>
					memcpy(response_buf, item->data,
    feae:	9903      	ldr	r1, [sp, #12]
    feb0:	310c      	adds	r1, #12
    feb2:	f00b ffaf 	bl	1be14 <memcpy>
				response_buf_len = 0;
    feb6:	2300      	movs	r3, #0
    feb8:	6023      	str	r3, [r4, #0]
				response_buf     = NULL;
    feba:	6033      	str	r3, [r6, #0]
				goto next;
    febc:	e77d      	b.n	fdba <socket_thread_fn+0x9a>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
    febe:	4937      	ldr	r1, [pc, #220]	; (ff9c <socket_thread_fn+0x27c>)
    fec0:	4620      	mov	r0, r4
    fec2:	f00b ff37 	bl	1bd34 <strstr>
		if (tmpstr) {
    fec6:	9001      	str	r0, [sp, #4]
    fec8:	b108      	cbz	r0, fece <socket_thread_fn+0x1ae>
			ret->state = AT_CMD_ERROR_CME;
    feca:	2203      	movs	r2, #3
    fecc:	e7d5      	b.n	fe7a <socket_thread_fn+0x15a>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
    fece:	4934      	ldr	r1, [pc, #208]	; (ffa0 <socket_thread_fn+0x280>)
    fed0:	4620      	mov	r0, r4
    fed2:	f00b ff2f 	bl	1bd34 <strstr>
		if (tmpstr) {
    fed6:	4603      	mov	r3, r0
    fed8:	2800      	cmp	r0, #0
    feda:	d039      	beq.n	ff50 <socket_thread_fn+0x230>
			ret->state = AT_CMD_ERROR;
    fedc:	2201      	movs	r2, #1
    fede:	f88d 2014 	strb.w	r2, [sp, #20]
			ret->code  = -ENOEXEC;
    fee2:	f06f 0207 	mvn.w	r2, #7
    fee6:	e7bf      	b.n	fe68 <socket_thread_fn+0x148>
					LOG_ERR("Response buffer not large "
    fee8:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
    feec:	f043 0301 	orr.w	r3, r3, #1
    fef0:	f363 0a07 	bfi	sl, r3, #0, #8
    fef4:	f365 1a8f 	bfi	sl, r5, #6, #10
    fef8:	4651      	mov	r1, sl
    fefa:	482a      	ldr	r0, [pc, #168]	; (ffa4 <socket_thread_fn+0x284>)
    fefc:	f00a ffe3 	bl	1aec6 <log_0>
					ret.code  = -EMSGSIZE;
    ff00:	f06f 0323 	mvn.w	r3, #35	; 0x23
    ff04:	9304      	str	r3, [sp, #16]
    ff06:	e7d6      	b.n	feb6 <socket_thread_fn+0x196>
 * @return N/A
 * @req K-WORK-001
 */
static inline void k_work_init(struct k_work *work, k_work_handler_t handler)
{
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    ff08:	4b27      	ldr	r3, [pc, #156]	; (ffa8 <socket_thread_fn+0x288>)
    ff0a:	2200      	movs	r2, #0
    ff0c:	604b      	str	r3, [r1, #4]
    ff0e:	460b      	mov	r3, r1
    ff10:	600a      	str	r2, [r1, #0]
    ff12:	f843 2f08 	str.w	r2, [r3, #8]!
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ff16:	e8d3 2fef 	ldaex	r2, [r3]
    ff1a:	f042 0001 	orr.w	r0, r2, #1
    ff1e:	e8c3 0fe4 	stlex	r4, r0, [r3]
    ff22:	2c00      	cmp	r4, #0
    ff24:	d1f7      	bne.n	ff16 <socket_thread_fn+0x1f6>
 * @req K-WORK-001
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    ff26:	07d3      	lsls	r3, r2, #31
    ff28:	f53f af51 	bmi.w	fdce <socket_thread_fn+0xae>
		k_queue_append(&work_q->queue, work);
    ff2c:	481f      	ldr	r0, [pc, #124]	; (ffac <socket_thread_fn+0x28c>)
    ff2e:	f00d f889 	bl	1d044 <k_queue_append>
    ff32:	e74c      	b.n	fdce <socket_thread_fn+0xae>
		if (payload_len == 0) {
    ff34:	2a00      	cmp	r2, #0
    ff36:	f43f af40 	beq.w	fdba <socket_thread_fn+0x9a>
			item->callback = notification_handler;
    ff3a:	4b1d      	ldr	r3, [pc, #116]	; (ffb0 <socket_thread_fn+0x290>)
			item->callback = current_cmd_handler;
    ff3c:	681a      	ldr	r2, [r3, #0]
    ff3e:	9b03      	ldr	r3, [sp, #12]
    ff40:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
    ff44:	e739      	b.n	fdba <socket_thread_fn+0x9a>
		if (payload_len == 0) {
    ff46:	2a00      	cmp	r2, #0
    ff48:	f43f af37 	beq.w	fdba <socket_thread_fn+0x9a>
			item->callback = current_cmd_handler;
    ff4c:	4b0a      	ldr	r3, [pc, #40]	; (ff78 <socket_thread_fn+0x258>)
    ff4e:	e7f5      	b.n	ff3c <socket_thread_fn+0x21c>
		new_len = strlen(buf) + 1;
    ff50:	4620      	mov	r0, r4
    ff52:	f00b ff2d 	bl	1bdb0 <strlen>
    ff56:	1c42      	adds	r2, r0, #1
    ff58:	e79b      	b.n	fe92 <socket_thread_fn+0x172>
    ff5a:	bf00      	nop
    ff5c:	0001d954 	.word	0x0001d954
    ff60:	0001d964 	.word	0x0001d964
    ff64:	20028614 	.word	0x20028614
    ff68:	2002020c 	.word	0x2002020c
    ff6c:	0001e92f 	.word	0x0001e92f
    ff70:	0001e951 	.word	0x0001e951
    ff74:	20028664 	.word	0x20028664
    ff78:	200202d0 	.word	0x200202d0
    ff7c:	200286a4 	.word	0x200286a4
    ff80:	0001e965 	.word	0x0001e965
    ff84:	200202cc 	.word	0x200202cc
    ff88:	0001e99c 	.word	0x0001e99c
    ff8c:	0001e9e6 	.word	0x0001e9e6
    ff90:	0001e9e9 	.word	0x0001e9e9
    ff94:	200202dc 	.word	0x200202dc
    ff98:	200202d8 	.word	0x200202d8
    ff9c:	0001e9f5 	.word	0x0001e9f5
    ffa0:	0001ea01 	.word	0x0001ea01
    ffa4:	0001ea07 	.word	0x0001ea07
    ffa8:	0000fc69 	.word	0x0000fc69
    ffac:	20021d3c 	.word	0x20021d3c
    ffb0:	200202d4 	.word	0x200202d4

0000ffb4 <at_write>:
{
    ffb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ffb6:	4607      	mov	r7, r0
    ffb8:	460d      	mov	r5, r1
	int bytes_to_send = strlen(cmd);
    ffba:	f00b fef9 	bl	1bdb0 <strlen>
	return socket_ops->send(sock, buf, len, flags);
    ffbe:	4b23      	ldr	r3, [pc, #140]	; (1004c <at_write+0x98>)
    ffc0:	4602      	mov	r2, r0
    ffc2:	681b      	ldr	r3, [r3, #0]
    ffc4:	4606      	mov	r6, r0
    ffc6:	4822      	ldr	r0, [pc, #136]	; (10050 <at_write+0x9c>)
    ffc8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    ffca:	4639      	mov	r1, r7
    ffcc:	2300      	movs	r3, #0
    ffce:	6800      	ldr	r0, [r0, #0]
    ffd0:	47a0      	blx	r4
	if (bytes_sent == -1) {
    ffd2:	1c43      	adds	r3, r0, #1
    ffd4:	4604      	mov	r4, r0
    ffd6:	d120      	bne.n	1001a <at_write+0x66>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
    ffd8:	2301      	movs	r3, #1
    ffda:	f04f 0400 	mov.w	r4, #0
    ffde:	4a1d      	ldr	r2, [pc, #116]	; (10054 <at_write+0xa0>)
    ffe0:	f363 0407 	bfi	r4, r3, #0, #8
    ffe4:	4b1c      	ldr	r3, [pc, #112]	; (10058 <at_write+0xa4>)
    ffe6:	1a9b      	subs	r3, r3, r2
    ffe8:	08db      	lsrs	r3, r3, #3
    ffea:	f363 148f 	bfi	r4, r3, #6, #10
    ffee:	f009 f94f 	bl	19290 <z_impl_z_errno>
    fff2:	4622      	mov	r2, r4
    fff4:	6801      	ldr	r1, [r0, #0]
    fff6:	4819      	ldr	r0, [pc, #100]	; (1005c <at_write+0xa8>)
    fff8:	f00a ff72 	bl	1aee0 <log_1>
    fffc:	f009 f948 	bl	19290 <z_impl_z_errno>
		ret.code  = -errno;
   10000:	6803      	ldr	r3, [r0, #0]
   10002:	425b      	negs	r3, r3
   10004:	9300      	str	r3, [sp, #0]
		ret.state = AT_CMD_ERROR;
   10006:	2301      	movs	r3, #1
   10008:	f88d 3004 	strb.w	r3, [sp, #4]
	if (state) {
   1000c:	b115      	cbz	r5, 10014 <at_write+0x60>
		*state = ret.state;
   1000e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   10012:	702b      	strb	r3, [r5, #0]
}
   10014:	9800      	ldr	r0, [sp, #0]
   10016:	b003      	add	sp, #12
   10018:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&msgq, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
   1001a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1001e:	4669      	mov	r1, sp
   10020:	480f      	ldr	r0, [pc, #60]	; (10060 <at_write+0xac>)
   10022:	f009 fbfd 	bl	19820 <z_impl_k_msgq_get>
		if (bytes_sent != bytes_to_send) {
   10026:	42a6      	cmp	r6, r4
   10028:	d0f0      	beq.n	1000c <at_write+0x58>
			LOG_ERR("Bytes sent (%d) was not the "
   1002a:	2201      	movs	r2, #1
   1002c:	f04f 0300 	mov.w	r3, #0
   10030:	4908      	ldr	r1, [pc, #32]	; (10054 <at_write+0xa0>)
   10032:	f362 0307 	bfi	r3, r2, #0, #8
   10036:	4a08      	ldr	r2, [pc, #32]	; (10058 <at_write+0xa4>)
   10038:	480a      	ldr	r0, [pc, #40]	; (10064 <at_write+0xb0>)
   1003a:	1a52      	subs	r2, r2, r1
   1003c:	08d2      	lsrs	r2, r2, #3
   1003e:	f362 138f 	bfi	r3, r2, #6, #10
   10042:	4621      	mov	r1, r4
   10044:	4632      	mov	r2, r6
   10046:	f00a ff5f 	bl	1af08 <log_2>
   1004a:	e7df      	b.n	1000c <at_write+0x58>
   1004c:	2002020c 	.word	0x2002020c
   10050:	200202cc 	.word	0x200202cc
   10054:	0001d954 	.word	0x0001d954
   10058:	0001d964 	.word	0x0001d964
   1005c:	0001e8da 	.word	0x0001e8da
   10060:	200286a4 	.word	0x200286a4
   10064:	0001e8fd 	.word	0x0001e8fd

00010068 <at_cmd_write>:
{
   10068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1006c:	4605      	mov	r5, r0
   1006e:	4688      	mov	r8, r1
   10070:	4617      	mov	r7, r2
   10072:	461e      	mov	r6, r3
	return z_impl_k_sem_take(sem, timeout);
   10074:	4c0a      	ldr	r4, [pc, #40]	; (100a0 <at_cmd_write+0x38>)
   10076:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1007a:	4620      	mov	r0, r4
   1007c:	f00a f87e 	bl	1a17c <z_impl_k_sem_take>
	response_buf     = buf;
   10080:	4b08      	ldr	r3, [pc, #32]	; (100a4 <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
   10082:	4631      	mov	r1, r6
	response_buf     = buf;
   10084:	f8c3 8000 	str.w	r8, [r3]
	response_buf_len = buf_len;
   10088:	4b07      	ldr	r3, [pc, #28]	; (100a8 <at_cmd_write+0x40>)
	int return_code = at_write(cmd, state);
   1008a:	4628      	mov	r0, r5
	response_buf_len = buf_len;
   1008c:	601f      	str	r7, [r3, #0]
	int return_code = at_write(cmd, state);
   1008e:	f7ff ff91 	bl	ffb4 <at_write>
   10092:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   10094:	4620      	mov	r0, r4
   10096:	f00a f845 	bl	1a124 <z_impl_k_sem_give>
}
   1009a:	4628      	mov	r0, r5
   1009c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   100a0:	20028664 	.word	0x20028664
   100a4:	200202d8 	.word	0x200202d8
   100a8:	200202dc 	.word	0x200202dc

000100ac <at_cmd_set_notification_handler>:
{
   100ac:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   100ae:	4c0f      	ldr	r4, [pc, #60]	; (100ec <at_cmd_set_notification_handler+0x40>)
{
   100b0:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   100b2:	6821      	ldr	r1, [r4, #0]
   100b4:	b179      	cbz	r1, 100d6 <at_cmd_set_notification_handler+0x2a>
   100b6:	4281      	cmp	r1, r0
   100b8:	d00d      	beq.n	100d6 <at_cmd_set_notification_handler+0x2a>
		LOG_WRN("Forgetting prior notification handler %p",
   100ba:	2302      	movs	r3, #2
   100bc:	f04f 0200 	mov.w	r2, #0
   100c0:	480b      	ldr	r0, [pc, #44]	; (100f0 <at_cmd_set_notification_handler+0x44>)
   100c2:	f363 0207 	bfi	r2, r3, #0, #8
   100c6:	4b0b      	ldr	r3, [pc, #44]	; (100f4 <at_cmd_set_notification_handler+0x48>)
   100c8:	1a1b      	subs	r3, r3, r0
   100ca:	08db      	lsrs	r3, r3, #3
   100cc:	f363 128f 	bfi	r2, r3, #6, #10
   100d0:	4809      	ldr	r0, [pc, #36]	; (100f8 <at_cmd_set_notification_handler+0x4c>)
   100d2:	f00a ff05 	bl	1aee0 <log_1>
	return z_impl_k_sem_take(sem, timeout);
   100d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   100da:	4808      	ldr	r0, [pc, #32]	; (100fc <at_cmd_set_notification_handler+0x50>)
   100dc:	f00a f84e 	bl	1a17c <z_impl_k_sem_take>
	notification_handler = handler;
   100e0:	6025      	str	r5, [r4, #0]
	z_impl_k_sem_give(sem);
   100e2:	4806      	ldr	r0, [pc, #24]	; (100fc <at_cmd_set_notification_handler+0x50>)
}
   100e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   100e8:	f00a b81c 	b.w	1a124 <z_impl_k_sem_give>
   100ec:	200202d4 	.word	0x200202d4
   100f0:	0001d954 	.word	0x0001d954
   100f4:	0001d964 	.word	0x0001d964
   100f8:	0001e8b1 	.word	0x0001e8b1
   100fc:	20028664 	.word	0x20028664

00010100 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   10100:	4b0b      	ldr	r3, [pc, #44]	; (10130 <find_node+0x30>)
{
   10102:	b570      	push	{r4, r5, r6, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   10104:	681b      	ldr	r3, [r3, #0]
   10106:	b153      	cbz	r3, 1011e <find_node+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10108:	2500      	movs	r5, #0
   1010a:	461c      	mov	r4, r3
   1010c:	681b      	ldr	r3, [r3, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   1010e:	6866      	ldr	r6, [r4, #4]
   10110:	428e      	cmp	r6, r1
   10112:	d106      	bne.n	10122 <find_node+0x22>
   10114:	68a6      	ldr	r6, [r4, #8]
   10116:	4296      	cmp	r6, r2
   10118:	d103      	bne.n	10122 <find_node+0x22>
			*prev_out = prev;
			return curr;
   1011a:	4623      	mov	r3, r4
			*prev_out = prev;
   1011c:	6005      	str	r5, [r0, #0]
		}
		prev = curr;
	}
	return NULL;
}
   1011e:	4618      	mov	r0, r3
   10120:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   10122:	2b00      	cmp	r3, #0
   10124:	d0fb      	beq.n	1011e <find_node+0x1e>
   10126:	4625      	mov	r5, r4
   10128:	461c      	mov	r4, r3
   1012a:	681b      	ldr	r3, [r3, #0]
   1012c:	e7ef      	b.n	1010e <find_node+0xe>
   1012e:	bf00      	nop
   10130:	20020390 	.word	0x20020390

00010134 <module_init>:

	k_mutex_unlock(&list_mtx);
}

static int module_init(struct device *dev)
{
   10134:	b510      	push	{r4, lr}
	list->head = NULL;
   10136:	2400      	movs	r4, #0
   10138:	4b03      	ldr	r3, [pc, #12]	; (10148 <module_init+0x14>)
	ARG_UNUSED(dev);

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
   1013a:	4804      	ldr	r0, [pc, #16]	; (1014c <module_init+0x18>)
	list->tail = NULL;
   1013c:	e9c3 4400 	strd	r4, r4, [r3]
   10140:	f7ff ffb4 	bl	100ac <at_cmd_set_notification_handler>
	return 0;
}
   10144:	4620      	mov	r0, r4
   10146:	bd10      	pop	{r4, pc}
   10148:	20020390 	.word	0x20020390
   1014c:	0001015d 	.word	0x0001015d

00010150 <k_mutex_unlock.constprop.6>:
	return z_impl_k_mutex_unlock(mutex);
   10150:	4801      	ldr	r0, [pc, #4]	; (10158 <k_mutex_unlock.constprop.6+0x8>)
   10152:	f009 bc35 	b.w	199c0 <z_impl_k_mutex_unlock>
   10156:	bf00      	nop
   10158:	20028690 	.word	0x20028690

0001015c <notif_dispatch>:
{
   1015c:	b538      	push	{r3, r4, r5, lr}
   1015e:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   10160:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10164:	4809      	ldr	r0, [pc, #36]	; (1018c <notif_dispatch+0x30>)
   10166:	f009 fbb9 	bl	198dc <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1016a:	4b09      	ldr	r3, [pc, #36]	; (10190 <notif_dispatch+0x34>)
   1016c:	681b      	ldr	r3, [r3, #0]
   1016e:	b91b      	cbnz	r3, 10178 <notif_dispatch+0x1c>
}
   10170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   10174:	f7ff bfec 	b.w	10150 <k_mutex_unlock.constprop.6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10178:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   1017a:	689a      	ldr	r2, [r3, #8]
   1017c:	4629      	mov	r1, r5
   1017e:	6858      	ldr	r0, [r3, #4]
   10180:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   10182:	2c00      	cmp	r4, #0
   10184:	d0f4      	beq.n	10170 <notif_dispatch+0x14>
   10186:	4623      	mov	r3, r4
   10188:	6824      	ldr	r4, [r4, #0]
   1018a:	e7f6      	b.n	1017a <notif_dispatch+0x1e>
   1018c:	20028690 	.word	0x20028690
   10190:	20020390 	.word	0x20020390

00010194 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   10194:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10196:	4606      	mov	r6, r0
	if (handler == NULL) {
   10198:	460c      	mov	r4, r1
   1019a:	b999      	cbnz	r1, 101c4 <at_notif_register_handler+0x30>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   1019c:	2201      	movs	r2, #1
   1019e:	f04f 0300 	mov.w	r3, #0
   101a2:	491e      	ldr	r1, [pc, #120]	; (1021c <at_notif_register_handler+0x88>)
   101a4:	f362 0307 	bfi	r3, r2, #0, #8
   101a8:	4a1d      	ldr	r2, [pc, #116]	; (10220 <at_notif_register_handler+0x8c>)
   101aa:	1a52      	subs	r2, r2, r1
   101ac:	08d2      	lsrs	r2, r2, #3
   101ae:	f362 138f 	bfi	r3, r2, #6, #10
   101b2:	4601      	mov	r1, r0
   101b4:	4622      	mov	r2, r4
   101b6:	481b      	ldr	r0, [pc, #108]	; (10224 <at_notif_register_handler+0x90>)
   101b8:	f00a fea6 	bl	1af08 <log_2>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   101bc:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   101c0:	b002      	add	sp, #8
   101c2:	bd70      	pop	{r4, r5, r6, pc}
   101c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   101c8:	4817      	ldr	r0, [pc, #92]	; (10228 <at_notif_register_handler+0x94>)
   101ca:	f009 fb87 	bl	198dc <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   101ce:	4622      	mov	r2, r4
   101d0:	4631      	mov	r1, r6
   101d2:	a801      	add	r0, sp, #4
   101d4:	f7ff ff94 	bl	10100 <find_node>
   101d8:	4605      	mov	r5, r0
   101da:	b118      	cbz	r0, 101e4 <at_notif_register_handler+0x50>
		k_mutex_unlock(&list_mtx);
   101dc:	f7ff ffb8 	bl	10150 <k_mutex_unlock.constprop.6>
		return 0;
   101e0:	2000      	movs	r0, #0
   101e2:	e7ed      	b.n	101c0 <at_notif_register_handler+0x2c>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   101e4:	200c      	movs	r0, #12
   101e6:	f009 faad 	bl	19744 <k_malloc>
   101ea:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   101ec:	b920      	cbnz	r0, 101f8 <at_notif_register_handler+0x64>
		k_mutex_unlock(&list_mtx);
   101ee:	f7ff ffaf 	bl	10150 <k_mutex_unlock.constprop.6>
		return -ENOBUFS;
   101f2:	f06f 0036 	mvn.w	r0, #54	; 0x36
   101f6:	e7e3      	b.n	101c0 <at_notif_register_handler+0x2c>
	memset(to_ins, 0, sizeof(struct notif_handler));
   101f8:	220c      	movs	r2, #12
   101fa:	4629      	mov	r1, r5
   101fc:	f00b fe34 	bl	1be68 <memset>
	to_ins->ctx     = ctx;
   10200:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   10202:	4a0a      	ldr	r2, [pc, #40]	; (1022c <at_notif_register_handler+0x98>)
	parent->next = child;
   10204:	601d      	str	r5, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   10206:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   10208:	e9c3 6401 	strd	r6, r4, [r3, #4]
   1020c:	b911      	cbnz	r1, 10214 <at_notif_register_handler+0x80>
	list->head = node;
   1020e:	e9c2 3300 	strd	r3, r3, [r2]
   10212:	e7e3      	b.n	101dc <at_notif_register_handler+0x48>
	parent->next = child;
   10214:	600b      	str	r3, [r1, #0]
	list->tail = node;
   10216:	6053      	str	r3, [r2, #4]
   10218:	e7e0      	b.n	101dc <at_notif_register_handler+0x48>
   1021a:	bf00      	nop
   1021c:	0001d954 	.word	0x0001d954
   10220:	0001d974 	.word	0x0001d974
   10224:	0001ea55 	.word	0x0001ea55
   10228:	20028690 	.word	0x20028690
   1022c:	20020390 	.word	0x20020390

00010230 <at_notif_deregister_handler>:

int at_notif_deregister_handler(void *context, at_notif_handler_t handler)
{
   10230:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10232:	4605      	mov	r5, r0
	if (handler == NULL) {
   10234:	460c      	mov	r4, r1
   10236:	b999      	cbnz	r1, 10260 <at_notif_deregister_handler+0x30>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   10238:	2201      	movs	r2, #1
   1023a:	f04f 0300 	mov.w	r3, #0
   1023e:	4922      	ldr	r1, [pc, #136]	; (102c8 <at_notif_deregister_handler+0x98>)
   10240:	f362 0307 	bfi	r3, r2, #0, #8
   10244:	4a21      	ldr	r2, [pc, #132]	; (102cc <at_notif_deregister_handler+0x9c>)
   10246:	1a89      	subs	r1, r1, r2
   10248:	08c9      	lsrs	r1, r1, #3
   1024a:	f361 138f 	bfi	r3, r1, #6, #10
   1024e:	4622      	mov	r2, r4
   10250:	4601      	mov	r1, r0
   10252:	481f      	ldr	r0, [pc, #124]	; (102d0 <at_notif_deregister_handler+0xa0>)
   10254:	f00a fe58 	bl	1af08 <log_2>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   10258:	f06f 0015 	mvn.w	r0, #21
	}
	return remove_notif_handler(context, handler);
}
   1025c:	b003      	add	sp, #12
   1025e:	bd30      	pop	{r4, r5, pc}
	struct notif_handler *curr, *prev = NULL;
   10260:	2300      	movs	r3, #0
   10262:	9301      	str	r3, [sp, #4]
   10264:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10268:	481a      	ldr	r0, [pc, #104]	; (102d4 <at_notif_deregister_handler+0xa4>)
   1026a:	f009 fb37 	bl	198dc <z_impl_k_mutex_lock>
	curr = find_node(&prev, ctx, handler);
   1026e:	4622      	mov	r2, r4
   10270:	4629      	mov	r1, r5
   10272:	a801      	add	r0, sp, #4
   10274:	f7ff ff44 	bl	10100 <find_node>
	if (curr == NULL) {
   10278:	b988      	cbnz	r0, 1029e <at_notif_deregister_handler+0x6e>
		LOG_WRN("Handler not registered. Nothing to do");
   1027a:	2302      	movs	r3, #2
   1027c:	f04f 0100 	mov.w	r1, #0
   10280:	4a12      	ldr	r2, [pc, #72]	; (102cc <at_notif_deregister_handler+0x9c>)
   10282:	f363 0107 	bfi	r1, r3, #0, #8
   10286:	4b10      	ldr	r3, [pc, #64]	; (102c8 <at_notif_deregister_handler+0x98>)
   10288:	4813      	ldr	r0, [pc, #76]	; (102d8 <at_notif_deregister_handler+0xa8>)
   1028a:	1a9b      	subs	r3, r3, r2
   1028c:	08db      	lsrs	r3, r3, #3
   1028e:	f363 118f 	bfi	r1, r3, #6, #10
   10292:	f00a fe18 	bl	1aec6 <log_0>
	k_mutex_unlock(&list_mtx);
   10296:	f7ff ff5b 	bl	10150 <k_mutex_unlock.constprop.6>
	return remove_notif_handler(context, handler);
   1029a:	2000      	movs	r0, #0
   1029c:	e7de      	b.n	1025c <at_notif_deregister_handler+0x2c>
	sys_slist_remove(&handler_list, &prev->node, &curr->node);
   1029e:	9a01      	ldr	r2, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   102a0:	6801      	ldr	r1, [r0, #0]
   102a2:	4b0e      	ldr	r3, [pc, #56]	; (102dc <at_notif_deregister_handler+0xac>)
   102a4:	b94a      	cbnz	r2, 102ba <at_notif_deregister_handler+0x8a>
   102a6:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   102a8:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   102aa:	4290      	cmp	r0, r2
   102ac:	d100      	bne.n	102b0 <at_notif_deregister_handler+0x80>
	list->tail = node;
   102ae:	6059      	str	r1, [r3, #4]
	parent->next = child;
   102b0:	2300      	movs	r3, #0
   102b2:	6003      	str	r3, [r0, #0]
	k_free(curr);
   102b4:	f00c fe4a 	bl	1cf4c <k_free>
   102b8:	e7ed      	b.n	10296 <at_notif_deregister_handler+0x66>
   102ba:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   102bc:	6859      	ldr	r1, [r3, #4]
   102be:	4288      	cmp	r0, r1
	list->tail = node;
   102c0:	bf08      	it	eq
   102c2:	605a      	streq	r2, [r3, #4]
   102c4:	e7f4      	b.n	102b0 <at_notif_deregister_handler+0x80>
   102c6:	bf00      	nop
   102c8:	0001d974 	.word	0x0001d974
   102cc:	0001d954 	.word	0x0001d954
   102d0:	0001ea55 	.word	0x0001ea55
   102d4:	20028690 	.word	0x20028690
   102d8:	0001ea2f 	.word	0x0001ea2f
   102dc:	20020390 	.word	0x20020390

000102e0 <write_uart_string>:
static struct k_work cmd_send_work;



static inline void write_uart_string(const char *str)
{
   102e0:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   102e2:	4d05      	ldr	r5, [pc, #20]	; (102f8 <write_uart_string+0x18>)
   102e4:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   102e6:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   102ea:	b901      	cbnz	r1, 102ee <write_uart_string+0xe>
	}
}
   102ec:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   102ee:	6828      	ldr	r0, [r5, #0]
   102f0:	6843      	ldr	r3, [r0, #4]
   102f2:	685b      	ldr	r3, [r3, #4]
   102f4:	4798      	blx	r3
   102f6:	e7f6      	b.n	102e6 <write_uart_string+0x6>
   102f8:	20020468 	.word	0x20020468

000102fc <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   102fc:	b500      	push	{lr}
	enum at_cmd_state state;
	int               err;

	ARG_UNUSED(work);

	err = at_cmd_write(at_buf, at_buf,
   102fe:	4922      	ldr	r1, [pc, #136]	; (10388 <cmd_send+0x8c>)
{
   10300:	b089      	sub	sp, #36	; 0x24
	err = at_cmd_write(at_buf, at_buf,
   10302:	4608      	mov	r0, r1
   10304:	f10d 0303 	add.w	r3, sp, #3
   10308:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1030c:	f7ff feac 	bl	10068 <at_cmd_write>
			   sizeof(at_buf), &state);
	if (err < 0) {
   10310:	1e01      	subs	r1, r0, #0
   10312:	da12      	bge.n	1033a <cmd_send+0x3e>
		LOG_ERR("Error while processing AT command: %d", err);
   10314:	2301      	movs	r3, #1
   10316:	f04f 0200 	mov.w	r2, #0
   1031a:	481c      	ldr	r0, [pc, #112]	; (1038c <cmd_send+0x90>)
   1031c:	f363 0207 	bfi	r2, r3, #0, #8
   10320:	4b1b      	ldr	r3, [pc, #108]	; (10390 <cmd_send+0x94>)
   10322:	1a1b      	subs	r3, r3, r0
   10324:	08db      	lsrs	r3, r3, #3
   10326:	f363 128f 	bfi	r2, r3, #6, #10
   1032a:	481a      	ldr	r0, [pc, #104]	; (10394 <cmd_send+0x98>)
   1032c:	f00a fdd8 	bl	1aee0 <log_1>
		state = AT_CMD_ERROR;
   10330:	2301      	movs	r3, #1
   10332:	f88d 3003 	strb.w	r3, [sp, #3]
	case AT_CMD_OK:
		write_uart_string(at_buf);
		write_uart_string(OK_STR);
		break;
	case AT_CMD_ERROR:
		write_uart_string(ERROR_STR);
   10336:	4818      	ldr	r0, [pc, #96]	; (10398 <cmd_send+0x9c>)
   10338:	e012      	b.n	10360 <cmd_send+0x64>
	switch (state) {
   1033a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1033e:	2b03      	cmp	r3, #3
   10340:	d810      	bhi.n	10364 <cmd_send+0x68>
   10342:	a201      	add	r2, pc, #4	; (adr r2, 10348 <cmd_send+0x4c>)
   10344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10348:	00010359 	.word	0x00010359
   1034c:	00010337 	.word	0x00010337
   10350:	00010373 	.word	0x00010373
   10354:	00010381 	.word	0x00010381
		write_uart_string(at_buf);
   10358:	480b      	ldr	r0, [pc, #44]	; (10388 <cmd_send+0x8c>)
   1035a:	f7ff ffc1 	bl	102e0 <write_uart_string>
		write_uart_string(OK_STR);
   1035e:	480f      	ldr	r0, [pc, #60]	; (1039c <cmd_send+0xa0>)
		sprintf(str, "+CMS ERROR: %d\r\n", err);
		write_uart_string(str);
		break;
	case AT_CMD_ERROR_CME:
		sprintf(str, "+CME ERROR: %d\r\n", err);
		write_uart_string(str);
   10360:	f7ff ffbe 	bl	102e0 <write_uart_string>
		break;
	default:
		break;
	}

	uart_irq_rx_enable(uart_dev);
   10364:	4b0e      	ldr	r3, [pc, #56]	; (103a0 <cmd_send+0xa4>)
   10366:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   10368:	f00c fc3c 	bl	1cbe4 <z_impl_uart_irq_rx_enable>
}
   1036c:	b009      	add	sp, #36	; 0x24
   1036e:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(str, "+CMS ERROR: %d\r\n", err);
   10372:	460a      	mov	r2, r1
   10374:	490b      	ldr	r1, [pc, #44]	; (103a4 <cmd_send+0xa8>)
		sprintf(str, "+CME ERROR: %d\r\n", err);
   10376:	a801      	add	r0, sp, #4
   10378:	f7fe fe06 	bl	ef88 <sprintf>
		write_uart_string(str);
   1037c:	a801      	add	r0, sp, #4
   1037e:	e7ef      	b.n	10360 <cmd_send+0x64>
		sprintf(str, "+CME ERROR: %d\r\n", err);
   10380:	460a      	mov	r2, r1
   10382:	4909      	ldr	r1, [pc, #36]	; (103a8 <cmd_send+0xac>)
   10384:	e7f7      	b.n	10376 <cmd_send+0x7a>
   10386:	bf00      	nop
   10388:	2002234c 	.word	0x2002234c
   1038c:	0001d954 	.word	0x0001d954
   10390:	0001d96c 	.word	0x0001d96c
   10394:	0001eb4a 	.word	0x0001eb4a
   10398:	0001eb75 	.word	0x0001eb75
   1039c:	0001eb70 	.word	0x0001eb70
   103a0:	20020468 	.word	0x20020468
   103a4:	0001eb7d 	.word	0x0001eb7d
   103a8:	0001eb8e 	.word	0x0001eb8e

000103ac <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(struct device *dev)
{
   103ac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   103b0:	4606      	mov	r6, r0
static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
   103b2:	6843      	ldr	r3, [r0, #4]
   103b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   103b6:	b103      	cbz	r3, 103ba <isr+0xe>
		return api->irq_update(dev);
   103b8:	4798      	blx	r3
	if (api->irq_rx_ready) {
   103ba:	6873      	ldr	r3, [r6, #4]
   103bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   103be:	b1c3      	cbz	r3, 103f2 <isr+0x46>
		return api->irq_rx_ready(dev);
   103c0:	4630      	mov	r0, r6
   103c2:	4798      	blx	r3
	u8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
   103c4:	b1a8      	cbz	r0, 103f2 <isr+0x46>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   103c6:	f8df a14c 	ldr.w	sl, [pc, #332]	; 10514 <isr+0x168>
   103ca:	4d47      	ldr	r5, [pc, #284]	; (104e8 <isr+0x13c>)
   103cc:	46d1      	mov	r9, sl
			LOG_WRN("Ignored null; would terminate string early.");
   103ce:	4b47      	ldr	r3, [pc, #284]	; (104ec <isr+0x140>)
		if (at_cmd_len > 0) {
   103d0:	4c47      	ldr	r4, [pc, #284]	; (104f0 <isr+0x144>)
			LOG_WRN("Ignored null; would terminate string early.");
   103d2:	1aed      	subs	r5, r5, r3
   103d4:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   103d8:	e8da 3faf 	lda	r3, [sl]

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!k_work_pending(&cmd_send_work)) &&
   103dc:	07db      	lsls	r3, r3, #31
   103de:	d408      	bmi.n	103f2 <isr+0x46>
	if (api->fifo_read) {
   103e0:	6873      	ldr	r3, [r6, #4]
   103e2:	699b      	ldr	r3, [r3, #24]
   103e4:	b12b      	cbz	r3, 103f2 <isr+0x46>
		return api->fifo_read(dev, rx_data, size);
   103e6:	2201      	movs	r2, #1
   103e8:	f10d 0107 	add.w	r1, sp, #7
   103ec:	4630      	mov	r0, r6
   103ee:	4798      	blx	r3
   103f0:	b910      	cbnz	r0, 103f8 <isr+0x4c>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
	}
}
   103f2:	b002      	add	sp, #8
   103f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uart_rx_handler(character);
   103f8:	f89d 1007 	ldrb.w	r1, [sp, #7]
	switch (character) {
   103fc:	2908      	cmp	r1, #8
   103fe:	d001      	beq.n	10404 <isr+0x58>
   10400:	297f      	cmp	r1, #127	; 0x7f
   10402:	d105      	bne.n	10410 <isr+0x64>
		if (at_cmd_len > 0) {
   10404:	6823      	ldr	r3, [r4, #0]
   10406:	2b00      	cmp	r3, #0
   10408:	d0e6      	beq.n	103d8 <isr+0x2c>
			at_cmd_len--;
   1040a:	3b01      	subs	r3, #1
   1040c:	6023      	str	r3, [r4, #0]
   1040e:	e7e3      	b.n	103d8 <isr+0x2c>
	if (!inside_quotes) {
   10410:	4a38      	ldr	r2, [pc, #224]	; (104f4 <isr+0x148>)
   10412:	7813      	ldrb	r3, [r2, #0]
   10414:	b9cb      	cbnz	r3, 1044a <isr+0x9e>
		switch (character) {
   10416:	290a      	cmp	r1, #10
   10418:	d02b      	beq.n	10472 <isr+0xc6>
   1041a:	290d      	cmp	r1, #13
   1041c:	d011      	beq.n	10442 <isr+0x96>
   1041e:	b9a1      	cbnz	r1, 1044a <isr+0x9e>
			if (term_mode == MODE_NULL_TERM) {
   10420:	4b35      	ldr	r3, [pc, #212]	; (104f8 <isr+0x14c>)
   10422:	781b      	ldrb	r3, [r3, #0]
   10424:	2b00      	cmp	r3, #0
   10426:	d040      	beq.n	104aa <isr+0xfe>
			LOG_WRN("Ignored null; would terminate string early.");
   10428:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   1042c:	f043 0302 	orr.w	r3, r3, #2
   10430:	f363 0707 	bfi	r7, r3, #0, #8
   10434:	f365 178f 	bfi	r7, r5, #6, #10
   10438:	4639      	mov	r1, r7
   1043a:	4830      	ldr	r0, [pc, #192]	; (104fc <isr+0x150>)
   1043c:	f00a fd43 	bl	1aec6 <log_0>
			return;
   10440:	e7ca      	b.n	103d8 <isr+0x2c>
			if (term_mode == MODE_CR) {
   10442:	482d      	ldr	r0, [pc, #180]	; (104f8 <isr+0x14c>)
   10444:	7800      	ldrb	r0, [r0, #0]
   10446:	2801      	cmp	r0, #1
			    at_cmd_len > 0 &&
   10448:	d02f      	beq.n	104aa <isr+0xfe>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   1044a:	f8d4 c000 	ldr.w	ip, [r4]
   1044e:	f10c 0001 	add.w	r0, ip, #1
   10452:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   10456:	d31d      	bcc.n	10494 <isr+0xe8>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   10458:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   1045c:	f043 0301 	orr.w	r3, r3, #1
   10460:	f363 0807 	bfi	r8, r3, #0, #8
   10464:	f365 188f 	bfi	r8, r5, #6, #10
   10468:	4642      	mov	r2, r8
   1046a:	4825      	ldr	r0, [pc, #148]	; (10500 <isr+0x154>)
   1046c:	f00a fd38 	bl	1aee0 <log_1>
		return;
   10470:	e7b2      	b.n	103d8 <isr+0x2c>
			if (term_mode == MODE_LF) {
   10472:	4821      	ldr	r0, [pc, #132]	; (104f8 <isr+0x14c>)
   10474:	7800      	ldrb	r0, [r0, #0]
   10476:	2802      	cmp	r0, #2
   10478:	d017      	beq.n	104aa <isr+0xfe>
			if (term_mode == MODE_CR_LF &&
   1047a:	2803      	cmp	r0, #3
   1047c:	d1e5      	bne.n	1044a <isr+0x9e>
   1047e:	f8d4 c000 	ldr.w	ip, [r4]
   10482:	f1bc 0f00 	cmp.w	ip, #0
   10486:	d0e0      	beq.n	1044a <isr+0x9e>
			    at_buf[at_cmd_len - 1] == '\r') {
   10488:	481e      	ldr	r0, [pc, #120]	; (10504 <isr+0x158>)
   1048a:	4460      	add	r0, ip
			    at_cmd_len > 0 &&
   1048c:	f810 0c01 	ldrb.w	r0, [r0, #-1]
   10490:	280d      	cmp	r0, #13
   10492:	e7d9      	b.n	10448 <isr+0x9c>
	at_buf[at_cmd_len] = character;
   10494:	f8df e06c 	ldr.w	lr, [pc, #108]	; 10504 <isr+0x158>
	if (character == '"') {
   10498:	2922      	cmp	r1, #34	; 0x22
	at_buf[at_cmd_len] = character;
   1049a:	f80e 100c 	strb.w	r1, [lr, ip]
	at_cmd_len++;
   1049e:	6020      	str	r0, [r4, #0]
	if (character == '"') {
   104a0:	d19a      	bne.n	103d8 <isr+0x2c>
	if (!inside_quotes) {
   104a2:	f083 0301 	eor.w	r3, r3, #1
		inside_quotes = !inside_quotes;
   104a6:	7013      	strb	r3, [r2, #0]
   104a8:	e796      	b.n	103d8 <isr+0x2c>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   104aa:	2300      	movs	r3, #0
   104ac:	4915      	ldr	r1, [pc, #84]	; (10504 <isr+0x158>)
   104ae:	6820      	ldr	r0, [r4, #0]
	inside_quotes = false;
   104b0:	7013      	strb	r3, [r2, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   104b2:	540b      	strb	r3, [r1, r0]
	at_cmd_len = 0;
   104b4:	6023      	str	r3, [r4, #0]
	if (at_buf[0]) {
   104b6:	780b      	ldrb	r3, [r1, #0]
   104b8:	2b00      	cmp	r3, #0
   104ba:	d08d      	beq.n	103d8 <isr+0x2c>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   104bc:	4b12      	ldr	r3, [pc, #72]	; (10508 <isr+0x15c>)
   104be:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   104c0:	6843      	ldr	r3, [r0, #4]
   104c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   104c4:	b103      	cbz	r3, 104c8 <isr+0x11c>
		api->irq_rx_disable(dev);
   104c6:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   104c8:	e8d9 3fef 	ldaex	r3, [r9]
   104cc:	f043 0201 	orr.w	r2, r3, #1
   104d0:	e8c9 2fe1 	stlex	r1, r2, [r9]
   104d4:	2900      	cmp	r1, #0
   104d6:	d1f7      	bne.n	104c8 <isr+0x11c>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   104d8:	07da      	lsls	r2, r3, #31
   104da:	f53f af7d 	bmi.w	103d8 <isr+0x2c>
		k_queue_append(&work_q->queue, work);
   104de:	490b      	ldr	r1, [pc, #44]	; (1050c <isr+0x160>)
   104e0:	480b      	ldr	r0, [pc, #44]	; (10510 <isr+0x164>)
   104e2:	f00c fdaf 	bl	1d044 <k_queue_append>
   104e6:	e777      	b.n	103d8 <isr+0x2c>
   104e8:	0001d96c 	.word	0x0001d96c
   104ec:	0001d954 	.word	0x0001d954
   104f0:	20020398 	.word	0x20020398
   104f4:	2002334c 	.word	0x2002334c
   104f8:	2002334d 	.word	0x2002334d
   104fc:	0001eb9f 	.word	0x0001eb9f
   10500:	0001ebcb 	.word	0x0001ebcb
   10504:	2002234c 	.word	0x2002234c
   10508:	20020468 	.word	0x20020468
   1050c:	2002045c 	.word	0x2002045c
   10510:	2002039c 	.word	0x2002039c
   10514:	20020464 	.word	0x20020464

00010518 <at_host_init>:

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   10518:	2202      	movs	r2, #2
   1051a:	4b4a      	ldr	r3, [pc, #296]	; (10644 <at_host_init+0x12c>)
{
   1051c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
   10520:	4949      	ldr	r1, [pc, #292]	; (10648 <at_host_init+0x130>)
   10522:	2000      	movs	r0, #0
		term_mode = mode;
   10524:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
   10526:	f7ff fe35 	bl	10194 <at_notif_register_handler>
	if (err != 0) {
   1052a:	4c48      	ldr	r4, [pc, #288]	; (1064c <at_host_init+0x134>)
   1052c:	4b48      	ldr	r3, [pc, #288]	; (10650 <at_host_init+0x138>)
   1052e:	4606      	mov	r6, r0
   10530:	1ae4      	subs	r4, r4, r3
   10532:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   10536:	b170      	cbz	r0, 10556 <at_host_init+0x3e>
		LOG_ERR("Can't register handler err=%d", err);
   10538:	f04f 0200 	mov.w	r2, #0
   1053c:	2301      	movs	r3, #1
   1053e:	f363 0207 	bfi	r2, r3, #0, #8
   10542:	4601      	mov	r1, r0
   10544:	f364 128f 	bfi	r2, r4, #6, #10
   10548:	4842      	ldr	r0, [pc, #264]	; (10654 <at_host_init+0x13c>)
   1054a:	f00a fcc9 	bl	1aee0 <log_1>
		       K_THREAD_STACK_SIZEOF(at_host_stack_area),
		       CONFIG_AT_HOST_THREAD_PRIO);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   1054e:	4630      	mov	r0, r6
   10550:	b002      	add	sp, #8
   10552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10556:	4840      	ldr	r0, [pc, #256]	; (10658 <at_host_init+0x140>)
   10558:	f008 fe74 	bl	19244 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   1055c:	4d3f      	ldr	r5, [pc, #252]	; (1065c <at_host_init+0x144>)
   1055e:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
   10560:	b9c8      	cbnz	r0, 10596 <at_host_init+0x7e>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
   10562:	2301      	movs	r3, #1
   10564:	f04f 0200 	mov.w	r2, #0
   10568:	f363 0207 	bfi	r2, r3, #0, #8
   1056c:	493a      	ldr	r1, [pc, #232]	; (10658 <at_host_init+0x140>)
   1056e:	f364 128f 	bfi	r2, r4, #6, #10
   10572:	483b      	ldr	r0, [pc, #236]	; (10660 <at_host_init+0x148>)
   10574:	f00a fcb4 	bl	1aee0 <log_1>
		return -EINVAL;
   10578:	f06f 0115 	mvn.w	r1, #21
		LOG_ERR("UART could not be initialized: %d", err);
   1057c:	2301      	movs	r3, #1
   1057e:	f04f 0200 	mov.w	r2, #0
   10582:	f363 0207 	bfi	r2, r3, #0, #8
   10586:	f364 128f 	bfi	r2, r4, #6, #10
   1058a:	4836      	ldr	r0, [pc, #216]	; (10664 <at_host_init+0x14c>)
   1058c:	f00a fca8 	bl	1aee0 <log_1>
		return -EFAULT;
   10590:	f06f 060d 	mvn.w	r6, #13
   10594:	e7db      	b.n	1054e <at_host_init+0x36>
	return z_impl_k_uptime_get();
   10596:	f00c ff21 	bl	1d3dc <z_impl_k_uptime_get>
   1059a:	4681      	mov	r9, r0
			LOG_INF("UART check failed: %d. "
   1059c:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 10680 <at_host_init+0x168>
		err = uart_err_check(uart_dev);
   105a0:	6828      	ldr	r0, [r5, #0]
	if (api->err_check != NULL) {
   105a2:	6843      	ldr	r3, [r0, #4]
   105a4:	689b      	ldr	r3, [r3, #8]
   105a6:	b39b      	cbz	r3, 10610 <at_host_init+0xf8>
		return api->err_check(dev);
   105a8:	4798      	blx	r3
		if (err) {
   105aa:	4680      	mov	r8, r0
   105ac:	b380      	cbz	r0, 10610 <at_host_init+0xf8>
   105ae:	f00c ff15 	bl	1d3dc <z_impl_k_uptime_get>
			if (k_uptime_get_32() - start_time >
   105b2:	eba0 0009 	sub.w	r0, r0, r9
   105b6:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   105ba:	d90d      	bls.n	105d8 <at_host_init+0xc0>
				LOG_ERR("UART check failed: %d. "
   105bc:	2301      	movs	r3, #1
   105be:	f04f 0200 	mov.w	r2, #0
   105c2:	f363 0207 	bfi	r2, r3, #0, #8
   105c6:	4641      	mov	r1, r8
   105c8:	f364 128f 	bfi	r2, r4, #6, #10
   105cc:	4826      	ldr	r0, [pc, #152]	; (10668 <at_host_init+0x150>)
   105ce:	f00a fc87 	bl	1aee0 <log_1>
				return -EIO;
   105d2:	f06f 0104 	mvn.w	r1, #4
   105d6:	e7d1      	b.n	1057c <at_host_init+0x64>
			LOG_INF("UART check failed: %d. "
   105d8:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   105dc:	f043 0303 	orr.w	r3, r3, #3
   105e0:	f363 0707 	bfi	r7, r3, #0, #8
   105e4:	f364 178f 	bfi	r7, r4, #6, #10
   105e8:	463a      	mov	r2, r7
   105ea:	4641      	mov	r1, r8
   105ec:	4650      	mov	r0, sl
   105ee:	f00a fc77 	bl	1aee0 <log_1>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   105f2:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read) {
   105f4:	6843      	ldr	r3, [r0, #4]
   105f6:	699b      	ldr	r3, [r3, #24]
   105f8:	b91b      	cbnz	r3, 10602 <at_host_init+0xea>
	return z_impl_k_sleep(ms);
   105fa:	200a      	movs	r0, #10
   105fc:	f009 fd64 	bl	1a0c8 <z_impl_k_sleep>
   10600:	e7ce      	b.n	105a0 <at_host_init+0x88>
		return api->fifo_read(dev, rx_data, size);
   10602:	2201      	movs	r2, #1
   10604:	f10d 0107 	add.w	r1, sp, #7
   10608:	4798      	blx	r3
   1060a:	2800      	cmp	r0, #0
   1060c:	d1f1      	bne.n	105f2 <at_host_init+0xda>
   1060e:	e7f4      	b.n	105fa <at_host_init+0xe2>
	uart_irq_callback_set(uart_dev, isr);
   10610:	682a      	ldr	r2, [r5, #0]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
   10612:	6853      	ldr	r3, [r2, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   10614:	b123      	cbz	r3, 10620 <at_host_init+0x108>
   10616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   10618:	b113      	cbz	r3, 10620 <at_host_init+0x108>
		api->irq_callback_set(dev, cb, user_data);
   1061a:	4914      	ldr	r1, [pc, #80]	; (1066c <at_host_init+0x154>)
   1061c:	4610      	mov	r0, r2
   1061e:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   10620:	2200      	movs	r2, #0
   10622:	4b13      	ldr	r3, [pc, #76]	; (10670 <at_host_init+0x158>)
   10624:	4913      	ldr	r1, [pc, #76]	; (10674 <at_host_init+0x15c>)
   10626:	601a      	str	r2, [r3, #0]
   10628:	e9c3 1201 	strd	r1, r2, [r3, #4]
	k_work_q_start(&at_host_work_q, at_host_stack_area,
   1062c:	4812      	ldr	r0, [pc, #72]	; (10678 <at_host_init+0x160>)
   1062e:	230a      	movs	r3, #10
   10630:	f44f 7200 	mov.w	r2, #512	; 0x200
   10634:	4911      	ldr	r1, [pc, #68]	; (1067c <at_host_init+0x164>)
   10636:	f009 fec5 	bl	1a3c4 <k_work_q_start>
	uart_irq_rx_enable(uart_dev);
   1063a:	6828      	ldr	r0, [r5, #0]
   1063c:	f00c fad2 	bl	1cbe4 <z_impl_uart_irq_rx_enable>
	return err;
   10640:	e785      	b.n	1054e <at_host_init+0x36>
   10642:	bf00      	nop
   10644:	2002334d 	.word	0x2002334d
   10648:	0001cbef 	.word	0x0001cbef
   1064c:	0001d96c 	.word	0x0001d96c
   10650:	0001d954 	.word	0x0001d954
   10654:	0001ea8f 	.word	0x0001ea8f
   10658:	0001e327 	.word	0x0001e327
   1065c:	20020468 	.word	0x20020468
   10660:	0001eaad 	.word	0x0001eaad
   10664:	0001eb28 	.word	0x0001eb28
   10668:	0001eabd 	.word	0x0001eabd
   1066c:	000103ad 	.word	0x000103ad
   10670:	2002045c 	.word	0x2002045c
   10674:	000102fd 	.word	0x000102fd
   10678:	2002039c 	.word	0x2002039c
   1067c:	20024ba0 	.word	0x20024ba0
   10680:	0001eaf3 	.word	0x0001eaf3

00010684 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   10684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   10688:	6805      	ldr	r5, [r0, #0]
{
   1068a:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   1068c:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1068e:	782b      	ldrb	r3, [r5, #0]
{
   10690:	4680      	mov	r8, r0
   10692:	460f      	mov	r7, r1
   10694:	4616      	mov	r6, r2
   10696:	2b00      	cmp	r3, #0
   10698:	f000 80c1 	beq.w	1081e <at_parse_process_element+0x19a>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   1069c:	4b61      	ldr	r3, [pc, #388]	; (10824 <at_parse_process_element+0x1a0>)
   1069e:	781c      	ldrb	r4, [r3, #0]
   106a0:	2c05      	cmp	r4, #5
   106a2:	d110      	bne.n	106c6 <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   106a4:	1c6b      	adds	r3, r5, #1
   106a6:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   106a8:	9a00      	ldr	r2, [sp, #0]
   106aa:	7810      	ldrb	r0, [r2, #0]
   106ac:	f00c fab9 	bl	1cc22 <is_valid_notification_char>
   106b0:	b930      	cbnz	r0, 106c0 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   106b2:	1b53      	subs	r3, r2, r5

		while (isxdigit(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   106b4:	462a      	mov	r2, r5
   106b6:	4639      	mov	r1, r7
   106b8:	4630      	mov	r0, r6
   106ba:	f00c fb7d 	bl	1cdb8 <at_params_string_put>
   106be:	e01b      	b.n	106f8 <at_parse_process_element+0x74>
			tmpstr++;
   106c0:	3201      	adds	r2, #1
   106c2:	9200      	str	r2, [sp, #0]
   106c4:	e7f0      	b.n	106a8 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   106c6:	2c06      	cmp	r4, #6
   106c8:	d124      	bne.n	10714 <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   106ca:	4668      	mov	r0, sp
   106cc:	f00c fa9b 	bl	1cc06 <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   106d0:	9a00      	ldr	r2, [sp, #0]
   106d2:	7810      	ldrb	r0, [r2, #0]
   106d4:	f00c faa5 	bl	1cc22 <is_valid_notification_char>
   106d8:	b9a8      	cbnz	r0, 10706 <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   106da:	1b53      	subs	r3, r2, r5
   106dc:	4639      	mov	r1, r7
   106de:	462a      	mov	r2, r5
   106e0:	4630      	mov	r0, r6
   106e2:	f00c fb69 	bl	1cdb8 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   106e6:	9b00      	ldr	r3, [sp, #0]
   106e8:	781a      	ldrb	r2, [r3, #0]
   106ea:	2a3d      	cmp	r2, #61	; 0x3d
   106ec:	d10e      	bne.n	1070c <at_parse_process_element+0x88>
   106ee:	785a      	ldrb	r2, [r3, #1]
   106f0:	2a3f      	cmp	r2, #63	; 0x3f
   106f2:	d101      	bne.n	106f8 <at_parse_process_element+0x74>
			tmpstr += 2;
   106f4:	3302      	adds	r3, #2
			tmpstr++;
   106f6:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   106f8:	2000      	movs	r0, #0
	*str = tmpstr;
   106fa:	9b00      	ldr	r3, [sp, #0]
   106fc:	f8c8 3000 	str.w	r3, [r8]
}
   10700:	b023      	add	sp, #140	; 0x8c
   10702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   10706:	3201      	adds	r2, #1
   10708:	9200      	str	r2, [sp, #0]
   1070a:	e7e1      	b.n	106d0 <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   1070c:	2a3f      	cmp	r2, #63	; 0x3f
   1070e:	d1f3      	bne.n	106f8 <at_parse_process_element+0x74>
			tmpstr++;
   10710:	3301      	adds	r3, #1
   10712:	e7f0      	b.n	106f6 <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   10714:	2c07      	cmp	r4, #7
   10716:	d103      	bne.n	10720 <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   10718:	4610      	mov	r0, r2
   1071a:	f00c fb28 	bl	1cd6e <at_params_empty_put>
   1071e:	e7eb      	b.n	106f8 <at_parse_process_element+0x74>
	} else if (state == STRING) {
   10720:	2c02      	cmp	r4, #2
   10722:	d112      	bne.n	1074a <at_parse_process_element+0xc6>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr) &&
   10724:	9a00      	ldr	r2, [sp, #0]
   10726:	7810      	ldrb	r0, [r2, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   10728:	2822      	cmp	r0, #34	; 0x22
   1072a:	d003      	beq.n	10734 <at_parse_process_element+0xb0>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1072c:	b110      	cbz	r0, 10734 <at_parse_process_element+0xb0>
		       !is_lfcr(*tmpstr)) {
   1072e:	f00c fa61 	bl	1cbf4 <is_lfcr>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr) &&
   10732:	b138      	cbz	r0, 10744 <at_parse_process_element+0xc0>
		at_params_string_put(list, index, start_ptr,
   10734:	1b53      	subs	r3, r2, r5
   10736:	4639      	mov	r1, r7
   10738:	462a      	mov	r2, r5
   1073a:	4630      	mov	r0, r6
   1073c:	f00c fb3c 	bl	1cdb8 <at_params_string_put>
		tmpstr++;
   10740:	9b00      	ldr	r3, [sp, #0]
   10742:	e7e5      	b.n	10710 <at_parse_process_element+0x8c>
			tmpstr++;
   10744:	3201      	adds	r2, #1
   10746:	9200      	str	r2, [sp, #0]
   10748:	e7ec      	b.n	10724 <at_parse_process_element+0xa0>
	} else if (state == ARRAY) {
   1074a:	2c01      	cmp	r4, #1
   1074c:	d13c      	bne.n	107c8 <at_parse_process_element+0x144>
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   1074e:	4628      	mov	r0, r5
   10750:	220a      	movs	r2, #10
   10752:	a901      	add	r1, sp, #4
   10754:	f00b fa75 	bl	1bc42 <strtoul>
		tmpstr = next;
   10758:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1075a:	4d33      	ldr	r5, [pc, #204]	; (10828 <at_parse_process_element+0x1a4>)
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   1075c:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   1075e:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   10760:	9800      	ldr	r0, [sp, #0]
   10762:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   10764:	2b29      	cmp	r3, #41	; 0x29
   10766:	d028      	beq.n	107ba <at_parse_process_element+0x136>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   10768:	b33b      	cbz	r3, 107ba <at_parse_process_element+0x136>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1076a:	3b2c      	subs	r3, #44	; 0x2c
   1076c:	b2db      	uxtb	r3, r3
   1076e:	3001      	adds	r0, #1
   10770:	2b11      	cmp	r3, #17
				tmparray[i++] =
   10772:	9000      	str	r0, [sp, #0]
   10774:	d803      	bhi.n	1077e <at_parse_process_element+0xfa>
   10776:	fa25 f303 	lsr.w	r3, r5, r3
   1077a:	07db      	lsls	r3, r3, #31
   1077c:	d408      	bmi.n	10790 <at_parse_process_element+0x10c>
				tmpstr++;
   1077e:	46a1      	mov	r9, r4
   10780:	e004      	b.n	1078c <at_parse_process_element+0x108>
					tmpstr = next;
   10782:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   10784:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   10788:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1078a:	d015      	beq.n	107b8 <at_parse_process_element+0x134>
				tmpstr++;
   1078c:	464c      	mov	r4, r9
   1078e:	e7e7      	b.n	10760 <at_parse_process_element+0xdc>
					(u32_t)strtoul(++tmpstr, &next, 10);
   10790:	220a      	movs	r2, #10
   10792:	a901      	add	r1, sp, #4
   10794:	f00b fa55 	bl	1bc42 <strtoul>
				tmparray[i++] =
   10798:	ab22      	add	r3, sp, #136	; 0x88
   1079a:	f104 0901 	add.w	r9, r4, #1
   1079e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   107a2:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   107a6:	9800      	ldr	r0, [sp, #0]
   107a8:	f00b fb02 	bl	1bdb0 <strlen>
   107ac:	4604      	mov	r4, r0
   107ae:	9801      	ldr	r0, [sp, #4]
   107b0:	f00b fafe 	bl	1bdb0 <strlen>
   107b4:	4284      	cmp	r4, r0
   107b6:	d1e4      	bne.n	10782 <at_parse_process_element+0xfe>
   107b8:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(u32_t));
   107ba:	00a3      	lsls	r3, r4, #2
   107bc:	aa02      	add	r2, sp, #8
   107be:	4639      	mov	r1, r7
   107c0:	4630      	mov	r0, r6
   107c2:	f00c fb1c 	bl	1cdfe <at_params_array_put>
   107c6:	e7bb      	b.n	10740 <at_parse_process_element+0xbc>
	} else if (state == NUMBER) {
   107c8:	2c03      	cmp	r4, #3
   107ca:	d115      	bne.n	107f8 <at_parse_process_element+0x174>
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   107cc:	220a      	movs	r2, #10
   107ce:	a902      	add	r1, sp, #8
   107d0:	4628      	mov	r0, r5
   107d2:	f00b fa36 	bl	1bc42 <strtoul>
		tmpstr = next;
   107d6:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   107d8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   107dc:	4602      	mov	r2, r0
		tmpstr = next;
   107de:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   107e0:	d205      	bcs.n	107ee <at_parse_process_element+0x16a>
			at_params_short_put(list, index, (u16_t)value);
   107e2:	b282      	uxth	r2, r0
   107e4:	4639      	mov	r1, r7
   107e6:	4630      	mov	r0, r6
   107e8:	f00c faae 	bl	1cd48 <at_params_short_put>
   107ec:	e784      	b.n	106f8 <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   107ee:	4639      	mov	r1, r7
   107f0:	4630      	mov	r0, r6
   107f2:	f00c face 	bl	1cd92 <at_params_int_put>
   107f6:	e77f      	b.n	106f8 <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   107f8:	2c04      	cmp	r4, #4
   107fa:	f47f af7d 	bne.w	106f8 <at_parse_process_element+0x74>
		while (isxdigit(*tmpstr)) {
   107fe:	9b00      	ldr	r3, [sp, #0]
   10800:	781a      	ldrb	r2, [r3, #0]

static inline int isxdigit(int a)
{
	unsigned int ua = (unsigned int)a;

	return (int)(((ua - (unsigned)'0') < 10U) ||
   10802:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   10806:	2909      	cmp	r1, #9
   10808:	d906      	bls.n	10818 <at_parse_process_element+0x194>
			((ua | 32U) - (unsigned)'a' < 6U));
   1080a:	f042 0220 	orr.w	r2, r2, #32
   1080e:	3a61      	subs	r2, #97	; 0x61
	return (int)(((ua - (unsigned)'0') < 10U) ||
   10810:	2a05      	cmp	r2, #5
   10812:	d901      	bls.n	10818 <at_parse_process_element+0x194>
		at_params_string_put(list, index, start_ptr,
   10814:	1b5b      	subs	r3, r3, r5
   10816:	e74d      	b.n	106b4 <at_parse_process_element+0x30>
			tmpstr++;
   10818:	3301      	adds	r3, #1
   1081a:	9300      	str	r3, [sp, #0]
   1081c:	e7ef      	b.n	107fe <at_parse_process_element+0x17a>
		return -1;
   1081e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10822:	e76d      	b.n	10700 <at_parse_process_element+0x7c>
   10824:	2002334e 	.word	0x2002334e
   10828:	00024001 	.word	0x00024001

0001082c <at_parse_detect_type>:
{
   1082c:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   1082e:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   10830:	2900      	cmp	r1, #0
{
   10832:	4605      	mov	r5, r0
   10834:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   10836:	d144      	bne.n	108c2 <at_parse_detect_type+0x96>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   10838:	2a2b      	cmp	r2, #43	; 0x2b
   1083a:	4e2a      	ldr	r6, [pc, #168]	; (108e4 <at_parse_detect_type+0xb8>)
   1083c:	d001      	beq.n	10842 <at_parse_detect_type+0x16>
   1083e:	2a25      	cmp	r2, #37	; 0x25
   10840:	d104      	bne.n	1084c <at_parse_detect_type+0x20>
	state = new_state;
   10842:	2305      	movs	r3, #5
   10844:	7033      	strb	r3, [r6, #0]
	return 0;
   10846:	2000      	movs	r0, #0
	*str = tmpstr;
   10848:	602c      	str	r4, [r5, #0]
}
   1084a:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   1084c:	4620      	mov	r0, r4
   1084e:	f00c f9f4 	bl	1cc3a <is_command>
   10852:	b3a0      	cbz	r0, 108be <at_parse_detect_type+0x92>
	state = new_state;
   10854:	2306      	movs	r3, #6
   10856:	e7f5      	b.n	10844 <at_parse_detect_type+0x18>
 * @retval true  If character is number character
 * @retval false If character is something else
 */
static inline bool is_number(char chr)
{
	if (isdigit(chr) || (chr == '-') || (chr == '+')) {
   10858:	f647 71e5 	movw	r1, #32741	; 0x7fe5
   1085c:	fa21 f303 	lsr.w	r3, r1, r3
   10860:	07d9      	lsls	r1, r3, #31
   10862:	d50a      	bpl.n	1087a <at_parse_detect_type+0x4e>
   10864:	2203      	movs	r2, #3
   10866:	4b1f      	ldr	r3, [pc, #124]	; (108e4 <at_parse_detect_type+0xb8>)
   10868:	701a      	strb	r2, [r3, #0]
   1086a:	e7ec      	b.n	10846 <at_parse_detect_type+0x1a>
	if (chr == '(') {
   1086c:	2a28      	cmp	r2, #40	; 0x28
   1086e:	d104      	bne.n	1087a <at_parse_detect_type+0x4e>
   10870:	2201      	movs	r2, #1
   10872:	4b1c      	ldr	r3, [pc, #112]	; (108e4 <at_parse_detect_type+0xb8>)
		tmpstr++;
   10874:	4414      	add	r4, r2
	state = new_state;
   10876:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   10878:	e7e5      	b.n	10846 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   1087a:	4610      	mov	r0, r2
   1087c:	f00c f9ba 	bl	1cbf4 <is_lfcr>
   10880:	b170      	cbz	r0, 108a0 <at_parse_detect_type+0x74>
   10882:	4918      	ldr	r1, [pc, #96]	; (108e4 <at_parse_detect_type+0xb8>)
   10884:	7808      	ldrb	r0, [r1, #0]
   10886:	2803      	cmp	r0, #3
   10888:	d108      	bne.n	1089c <at_parse_detect_type+0x70>
		while (is_lfcr(*tmpstr)) {
   1088a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   1088e:	f00c f9b1 	bl	1cbf4 <is_lfcr>
   10892:	2800      	cmp	r0, #0
   10894:	d1f9      	bne.n	1088a <at_parse_detect_type+0x5e>
	state = new_state;
   10896:	2304      	movs	r3, #4
   10898:	700b      	strb	r3, [r1, #0]
   1089a:	e7d4      	b.n	10846 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   1089c:	2807      	cmp	r0, #7
   1089e:	d0d2      	beq.n	10846 <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   108a0:	3a2c      	subs	r2, #44	; 0x2c
   108a2:	b2d2      	uxtb	r2, r2
   108a4:	2a11      	cmp	r2, #17
   108a6:	d807      	bhi.n	108b8 <at_parse_detect_type+0x8c>
   108a8:	4b0f      	ldr	r3, [pc, #60]	; (108e8 <at_parse_detect_type+0xbc>)
   108aa:	fa23 f202 	lsr.w	r2, r3, r2
   108ae:	07d3      	lsls	r3, r2, #31
   108b0:	d502      	bpl.n	108b8 <at_parse_detect_type+0x8c>
	state = new_state;
   108b2:	4b0c      	ldr	r3, [pc, #48]	; (108e4 <at_parse_detect_type+0xb8>)
   108b4:	2207      	movs	r2, #7
   108b6:	e7d7      	b.n	10868 <at_parse_detect_type+0x3c>
		return -1;
   108b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   108bc:	e7c5      	b.n	1084a <at_parse_detect_type+0x1e>
	state = new_state;
   108be:	2302      	movs	r3, #2
   108c0:	e7c0      	b.n	10844 <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   108c2:	dd03      	ble.n	108cc <at_parse_detect_type+0xa0>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   108c4:	2a2b      	cmp	r2, #43	; 0x2b
   108c6:	d0f7      	beq.n	108b8 <at_parse_detect_type+0x8c>
   108c8:	2a25      	cmp	r2, #37	; 0x25
   108ca:	d0f5      	beq.n	108b8 <at_parse_detect_type+0x8c>
	if (isdigit(chr) || (chr == '-') || (chr == '+')) {
   108cc:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
   108d0:	b2db      	uxtb	r3, r3
   108d2:	2b0e      	cmp	r3, #14
   108d4:	d9c0      	bls.n	10858 <at_parse_detect_type+0x2c>
	if (chr == '"') {
   108d6:	2a22      	cmp	r2, #34	; 0x22
   108d8:	d1c8      	bne.n	1086c <at_parse_detect_type+0x40>
	state = new_state;
   108da:	2202      	movs	r2, #2
   108dc:	4b01      	ldr	r3, [pc, #4]	; (108e4 <at_parse_detect_type+0xb8>)
		tmpstr++;
   108de:	3401      	adds	r4, #1
	state = new_state;
   108e0:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   108e2:	e7b0      	b.n	10846 <at_parse_detect_type+0x1a>
   108e4:	2002334e 	.word	0x2002334e
   108e8:	00024001 	.word	0x00024001

000108ec <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   108ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   108f0:	4688      	mov	r8, r1
   108f2:	4616      	mov	r6, r2
   108f4:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   108f6:	4604      	mov	r4, r0
   108f8:	2800      	cmp	r0, #0
   108fa:	d07c      	beq.n	109f6 <at_parser_max_params_from_str+0x10a>
   108fc:	2a00      	cmp	r2, #0
   108fe:	d07a      	beq.n	109f6 <at_parser_max_params_from_str+0x10a>
   10900:	6853      	ldr	r3, [r2, #4]
   10902:	2b00      	cmp	r3, #0
   10904:	d077      	beq.n	109f6 <at_parser_max_params_from_str+0x10a>
	state = IDLE;
   10906:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   10908:	4610      	mov	r0, r2
   1090a:	f00c f9f7 	bl	1ccfc <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   1090e:	6832      	ldr	r2, [r6, #0]
	const char *str = *at_params_str;
   10910:	9401      	str	r4, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
   10912:	4297      	cmp	r7, r2
   10914:	bf28      	it	cs
   10916:	4617      	movcs	r7, r2
	int index = 0;
   10918:	462c      	mov	r4, r5
	state = IDLE;
   1091a:	4b38      	ldr	r3, [pc, #224]	; (109fc <at_parser_max_params_from_str+0x110>)
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1091c:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 10a00 <at_parser_max_params_from_str+0x114>
   10920:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   10922:	9a01      	ldr	r2, [sp, #4]
   10924:	7813      	ldrb	r3, [r2, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   10926:	2b00      	cmp	r3, #0
   10928:	d04b      	beq.n	109c2 <at_parser_max_params_from_str+0xd6>
   1092a:	42a7      	cmp	r7, r4
   1092c:	d949      	bls.n	109c2 <at_parser_max_params_from_str+0xd6>
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1092e:	2b20      	cmp	r3, #32
   10930:	d002      	beq.n	10938 <at_parser_max_params_from_str+0x4c>
   10932:	3b09      	subs	r3, #9
   10934:	2b04      	cmp	r3, #4
   10936:	d801      	bhi.n	1093c <at_parser_max_params_from_str+0x50>
			str++;
   10938:	3201      	adds	r2, #1
   1093a:	9201      	str	r2, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   1093c:	4621      	mov	r1, r4
   1093e:	a801      	add	r0, sp, #4
   10940:	f7ff ff74 	bl	1082c <at_parse_detect_type>
   10944:	1c42      	adds	r2, r0, #1
   10946:	d03c      	beq.n	109c2 <at_parser_max_params_from_str+0xd6>
		if (at_parse_process_element(&str, index, list) == -1) {
   10948:	4632      	mov	r2, r6
   1094a:	4621      	mov	r1, r4
   1094c:	a801      	add	r0, sp, #4
   1094e:	f7ff fe99 	bl	10684 <at_parse_process_element>
   10952:	1c43      	adds	r3, r0, #1
   10954:	d035      	beq.n	109c2 <at_parser_max_params_from_str+0xd6>
		if (is_separator(*str)) {
   10956:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   10958:	781a      	ldrb	r2, [r3, #0]
   1095a:	3a2c      	subs	r2, #44	; 0x2c
   1095c:	b2d2      	uxtb	r2, r2
   1095e:	2a11      	cmp	r2, #17
   10960:	d81a      	bhi.n	10998 <at_parser_max_params_from_str+0xac>
   10962:	fa29 f202 	lsr.w	r2, r9, r2
   10966:	07d1      	lsls	r1, r2, #31
   10968:	d516      	bpl.n	10998 <at_parser_max_params_from_str+0xac>
			if (is_lfcr(*(str + 1))) {
   1096a:	7858      	ldrb	r0, [r3, #1]
   1096c:	f00c f942 	bl	1cbf4 <is_lfcr>
   10970:	b178      	cbz	r0, 10992 <at_parser_max_params_from_str+0xa6>
				index++;
   10972:	3401      	adds	r4, #1
				if (index == max_params) {
   10974:	42bc      	cmp	r4, r7
   10976:	d039      	beq.n	109ec <at_parser_max_params_from_str+0x100>
				if (at_parse_detect_type(&str, index) == -1) {
   10978:	4621      	mov	r1, r4
   1097a:	a801      	add	r0, sp, #4
   1097c:	f7ff ff56 	bl	1082c <at_parse_detect_type>
   10980:	1c42      	adds	r2, r0, #1
   10982:	d01e      	beq.n	109c2 <at_parser_max_params_from_str+0xd6>
				if (at_parse_process_element(&str, index,
   10984:	4632      	mov	r2, r6
   10986:	4621      	mov	r1, r4
   10988:	a801      	add	r0, sp, #4
   1098a:	f7ff fe7b 	bl	10684 <at_parse_process_element>
   1098e:	1c43      	adds	r3, r0, #1
   10990:	d017      	beq.n	109c2 <at_parser_max_params_from_str+0xd6>
			str++;
   10992:	9b01      	ldr	r3, [sp, #4]
   10994:	3301      	adds	r3, #1
   10996:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   10998:	9a01      	ldr	r2, [sp, #4]
   1099a:	7810      	ldrb	r0, [r2, #0]
   1099c:	f00c f92a 	bl	1cbf4 <is_lfcr>
   109a0:	b1f8      	cbz	r0, 109e2 <at_parser_max_params_from_str+0xf6>
   109a2:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   109a4:	7811      	ldrb	r1, [r2, #0]
   109a6:	4692      	mov	sl, r2
   109a8:	4608      	mov	r0, r1
   109aa:	3201      	adds	r2, #1
   109ac:	f00c f922 	bl	1cbf4 <is_lfcr>
   109b0:	2800      	cmp	r0, #0
   109b2:	d1f7      	bne.n	109a4 <at_parser_max_params_from_str+0xb8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   109b4:	b119      	cbz	r1, 109be <at_parser_max_params_from_str+0xd2>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   109b6:	292b      	cmp	r1, #43	; 0x2b
   109b8:	d001      	beq.n	109be <at_parser_max_params_from_str+0xd2>
   109ba:	2925      	cmp	r1, #37	; 0x25
   109bc:	d111      	bne.n	109e2 <at_parser_max_params_from_str+0xf6>
				str += i;
   109be:	f8cd a004 	str.w	sl, [sp, #4]
	*at_params_str = str;
   109c2:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   109c4:	b9a5      	cbnz	r5, 109f0 <at_parser_max_params_from_str+0x104>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   109c6:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   109c8:	2a00      	cmp	r2, #0
   109ca:	bf0c      	ite	eq
   109cc:	2000      	moveq	r0, #0
   109ce:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   109d2:	f1b8 0f00 	cmp.w	r8, #0
   109d6:	d001      	beq.n	109dc <at_parser_max_params_from_str+0xf0>
		*next_param_str = (char *)at_params_str;
   109d8:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   109dc:	b002      	add	sp, #8
   109de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		index++;
   109e2:	3401      	adds	r4, #1
			oversized = true;
   109e4:	42bc      	cmp	r4, r7
   109e6:	bf08      	it	eq
   109e8:	2501      	moveq	r5, #1
   109ea:	e79a      	b.n	10922 <at_parser_max_params_from_str+0x36>
					oversized = true;
   109ec:	4605      	mov	r5, r0
   109ee:	e7e8      	b.n	109c2 <at_parser_max_params_from_str+0xd6>
		return -E2BIG;
   109f0:	f06f 0006 	mvn.w	r0, #6
   109f4:	e7ed      	b.n	109d2 <at_parser_max_params_from_str+0xe6>
		return -EINVAL;
   109f6:	f06f 0015 	mvn.w	r0, #21
   109fa:	e7ef      	b.n	109dc <at_parser_max_params_from_str+0xf0>
   109fc:	2002334e 	.word	0x2002334e
   10a00:	00024001 	.word	0x00024001

00010a04 <w_lte_lc_init>:
		k_sem_give(&link);
	}
}

static int w_lte_lc_init(void)
{
   10a04:	b508      	push	{r3, lr}
	if (at_cmd_write(nw_mode_preferred, NULL, 0, NULL) != 0) {
   10a06:	2300      	movs	r3, #0
   10a08:	4807      	ldr	r0, [pc, #28]	; (10a28 <w_lte_lc_init+0x24>)
   10a0a:	461a      	mov	r2, r3
   10a0c:	4619      	mov	r1, r3
   10a0e:	f7ff fb2b 	bl	10068 <at_cmd_write>
   10a12:	4603      	mov	r3, r0
   10a14:	b928      	cbnz	r0, 10a22 <w_lte_lc_init+0x1e>
#if defined(CONFIG_BSD_LIBRARY_TRACE_ENABLED)
	if (at_cmd_write(mdm_trace, NULL, 0, NULL) != 0) {
		return -EIO;
	}
#endif
	if (at_cmd_write(cereg_5_subscribe, NULL, 0, NULL) != 0) {
   10a16:	4602      	mov	r2, r0
   10a18:	4601      	mov	r1, r0
   10a1a:	4804      	ldr	r0, [pc, #16]	; (10a2c <w_lte_lc_init+0x28>)
   10a1c:	f7ff fb24 	bl	10068 <at_cmd_write>
   10a20:	b108      	cbz	r0, 10a26 <w_lte_lc_init+0x22>
		return -EIO;
   10a22:	f06f 0004 	mvn.w	r0, #4
	}
	LOG_INF("PDN Auth: %s", log_strdup(cgauth));
#endif

	return 0;
}
   10a26:	bd08      	pop	{r3, pc}
   10a28:	0001ec69 	.word	0x0001ec69
   10a2c:	0001ec3d 	.word	0x0001ec3d

00010a30 <parse_nw_reg_status>:
static int parse_nw_reg_status(const char *at_response,
			       enum lte_lc_nw_reg_status *status,
			       size_t reg_status_index)
{
	int err, reg_status;
	struct at_param_list resp_list = {0};
   10a30:	2300      	movs	r3, #0
{
   10a32:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a34:	b087      	sub	sp, #28
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   10a36:	9302      	str	r3, [sp, #8]
	struct at_param_list resp_list = {0};
   10a38:	e9cd 3304 	strd	r3, r3, [sp, #16]
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   10a3c:	f8cd 300b 	str.w	r3, [sp, #11]
	size_t response_prefix_len = sizeof(response_prefix);
   10a40:	2307      	movs	r3, #7
{
   10a42:	460d      	mov	r5, r1
   10a44:	4617      	mov	r7, r2
	size_t response_prefix_len = sizeof(response_prefix);
   10a46:	9301      	str	r3, [sp, #4]

	if ((at_response == NULL) || (status == NULL)) {
   10a48:	4606      	mov	r6, r0
   10a4a:	2800      	cmp	r0, #0
   10a4c:	f000 8082 	beq.w	10b54 <parse_nw_reg_status+0x124>
   10a50:	2900      	cmp	r1, #0
   10a52:	d07f      	beq.n	10b54 <parse_nw_reg_status+0x124>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   10a54:	210a      	movs	r1, #10
   10a56:	a804      	add	r0, sp, #16
   10a58:	f00c f93d 	bl	1ccd6 <at_params_list_init>
	if (err) {
   10a5c:	4604      	mov	r4, r0
   10a5e:	b188      	cbz	r0, 10a84 <parse_nw_reg_status+0x54>
		LOG_ERR("Could not init AT params list, error: %d", err);
   10a60:	2301      	movs	r3, #1
   10a62:	f04f 0200 	mov.w	r2, #0
   10a66:	493d      	ldr	r1, [pc, #244]	; (10b5c <parse_nw_reg_status+0x12c>)
   10a68:	f363 0207 	bfi	r2, r3, #0, #8
   10a6c:	4b3c      	ldr	r3, [pc, #240]	; (10b60 <parse_nw_reg_status+0x130>)
   10a6e:	1a5b      	subs	r3, r3, r1
   10a70:	08db      	lsrs	r3, r3, #3
   10a72:	4601      	mov	r1, r0
   10a74:	f363 128f 	bfi	r2, r3, #6, #10
   10a78:	483a      	ldr	r0, [pc, #232]	; (10b64 <parse_nw_reg_status+0x134>)
   10a7a:	f00a fa31 	bl	1aee0 <log_1>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   10a7e:	4620      	mov	r0, r4
   10a80:	b007      	add	sp, #28
   10a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_max_params_from_str(at_response,
   10a84:	4601      	mov	r1, r0
   10a86:	230a      	movs	r3, #10
   10a88:	aa04      	add	r2, sp, #16
   10a8a:	4630      	mov	r0, r6
   10a8c:	f7ff ff2e 	bl	108ec <at_parser_max_params_from_str>
	if (err) {
   10a90:	4604      	mov	r4, r0
   10a92:	b190      	cbz	r0, 10aba <parse_nw_reg_status+0x8a>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   10a94:	2301      	movs	r3, #1
   10a96:	f04f 0200 	mov.w	r2, #0
   10a9a:	4930      	ldr	r1, [pc, #192]	; (10b5c <parse_nw_reg_status+0x12c>)
   10a9c:	f363 0207 	bfi	r2, r3, #0, #8
   10aa0:	4b2f      	ldr	r3, [pc, #188]	; (10b60 <parse_nw_reg_status+0x130>)
   10aa2:	1a5b      	subs	r3, r3, r1
   10aa4:	08db      	lsrs	r3, r3, #3
   10aa6:	4601      	mov	r1, r0
   10aa8:	482f      	ldr	r0, [pc, #188]	; (10b68 <parse_nw_reg_status+0x138>)
   10aaa:	f363 128f 	bfi	r2, r3, #6, #10
		LOG_ERR("Could not get response prefix, error: %d", err);
   10aae:	f00a fa17 	bl	1aee0 <log_1>
	at_params_list_free(&resp_list);
   10ab2:	a804      	add	r0, sp, #16
   10ab4:	f00c f93a 	bl	1cd2c <at_params_list_free>
	return err;
   10ab8:	e7e1      	b.n	10a7e <parse_nw_reg_status+0x4e>
	err = at_params_string_get(&resp_list,
   10aba:	4601      	mov	r1, r0
   10abc:	ab01      	add	r3, sp, #4
   10abe:	aa02      	add	r2, sp, #8
   10ac0:	a804      	add	r0, sp, #16
   10ac2:	f00c f9d2 	bl	1ce6a <at_params_string_get>
	if (err) {
   10ac6:	4604      	mov	r4, r0
   10ac8:	b168      	cbz	r0, 10ae6 <parse_nw_reg_status+0xb6>
		LOG_ERR("Could not get response prefix, error: %d", err);
   10aca:	2301      	movs	r3, #1
   10acc:	f04f 0200 	mov.w	r2, #0
   10ad0:	4922      	ldr	r1, [pc, #136]	; (10b5c <parse_nw_reg_status+0x12c>)
   10ad2:	f363 0207 	bfi	r2, r3, #0, #8
   10ad6:	4b22      	ldr	r3, [pc, #136]	; (10b60 <parse_nw_reg_status+0x130>)
   10ad8:	1a5b      	subs	r3, r3, r1
   10ada:	08db      	lsrs	r3, r3, #3
   10adc:	4601      	mov	r1, r0
   10ade:	f363 128f 	bfi	r2, r3, #6, #10
   10ae2:	4822      	ldr	r0, [pc, #136]	; (10b6c <parse_nw_reg_status+0x13c>)
   10ae4:	e7e3      	b.n	10aae <parse_nw_reg_status+0x7e>
	if (!response_is_valid(response_prefix, response_prefix_len,
   10ae6:	4a22      	ldr	r2, [pc, #136]	; (10b70 <parse_nw_reg_status+0x140>)
   10ae8:	9901      	ldr	r1, [sp, #4]
   10aea:	a802      	add	r0, sp, #8
   10aec:	f00c f9e0 	bl	1ceb0 <response_is_valid>
   10af0:	2800      	cmp	r0, #0
   10af2:	d0de      	beq.n	10ab2 <parse_nw_reg_status+0x82>
	err = at_params_int_get(&resp_list, reg_status_index,
   10af4:	466a      	mov	r2, sp
   10af6:	4639      	mov	r1, r7
   10af8:	a804      	add	r0, sp, #16
   10afa:	f00c f9a3 	bl	1ce44 <at_params_int_get>
	if (err) {
   10afe:	4604      	mov	r4, r0
   10b00:	b168      	cbz	r0, 10b1e <parse_nw_reg_status+0xee>
		LOG_ERR("Could not get registration status, error: %d", err);
   10b02:	2301      	movs	r3, #1
   10b04:	f04f 0200 	mov.w	r2, #0
   10b08:	4914      	ldr	r1, [pc, #80]	; (10b5c <parse_nw_reg_status+0x12c>)
   10b0a:	f363 0207 	bfi	r2, r3, #0, #8
   10b0e:	4b14      	ldr	r3, [pc, #80]	; (10b60 <parse_nw_reg_status+0x130>)
   10b10:	1a5b      	subs	r3, r3, r1
   10b12:	08db      	lsrs	r3, r3, #3
   10b14:	4601      	mov	r1, r0
   10b16:	f363 128f 	bfi	r2, r3, #6, #10
   10b1a:	4816      	ldr	r0, [pc, #88]	; (10b74 <parse_nw_reg_status+0x144>)
   10b1c:	e7c7      	b.n	10aae <parse_nw_reg_status+0x7e>
	switch (reg_status) {
   10b1e:	9900      	ldr	r1, [sp, #0]
   10b20:	2908      	cmp	r1, #8
   10b22:	d015      	beq.n	10b50 <parse_nw_reg_status+0x120>
   10b24:	dc12      	bgt.n	10b4c <parse_nw_reg_status+0x11c>
   10b26:	2905      	cmp	r1, #5
   10b28:	d912      	bls.n	10b50 <parse_nw_reg_status+0x120>
		LOG_ERR("Invalid network registration status: %d", reg_status);
   10b2a:	2301      	movs	r3, #1
   10b2c:	f04f 0200 	mov.w	r2, #0
   10b30:	480a      	ldr	r0, [pc, #40]	; (10b5c <parse_nw_reg_status+0x12c>)
   10b32:	f363 0207 	bfi	r2, r3, #0, #8
   10b36:	4b0a      	ldr	r3, [pc, #40]	; (10b60 <parse_nw_reg_status+0x130>)
		err = -EIO;
   10b38:	f06f 0404 	mvn.w	r4, #4
   10b3c:	1a1b      	subs	r3, r3, r0
   10b3e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid network registration status: %d", reg_status);
   10b40:	f363 128f 	bfi	r2, r3, #6, #10
   10b44:	480c      	ldr	r0, [pc, #48]	; (10b78 <parse_nw_reg_status+0x148>)
   10b46:	f00a f9cb 	bl	1aee0 <log_1>
		err = -EIO;
   10b4a:	e7b2      	b.n	10ab2 <parse_nw_reg_status+0x82>
	switch (reg_status) {
   10b4c:	295a      	cmp	r1, #90	; 0x5a
   10b4e:	d1ec      	bne.n	10b2a <parse_nw_reg_status+0xfa>
		*status = reg_status;
   10b50:	7029      	strb	r1, [r5, #0]
		LOG_DBG("Network registration status: %d", reg_status);
   10b52:	e7ae      	b.n	10ab2 <parse_nw_reg_status+0x82>
		return -EINVAL;
   10b54:	f06f 0415 	mvn.w	r4, #21
   10b58:	e791      	b.n	10a7e <parse_nw_reg_status+0x4e>
   10b5a:	bf00      	nop
   10b5c:	0001d954 	.word	0x0001d954
   10b60:	0001d99c 	.word	0x0001d99c
   10b64:	0001ec8a 	.word	0x0001ec8a
   10b68:	0001ecb3 	.word	0x0001ecb3
   10b6c:	0001ece0 	.word	0x0001ece0
   10b70:	0001ed09 	.word	0x0001ed09
   10b74:	0001ed10 	.word	0x0001ed10
   10b78:	0001ed3d 	.word	0x0001ed3d

00010b7c <at_handler>:
{
   10b7c:	b507      	push	{r0, r1, r2, lr}
	if (response == NULL) {
   10b7e:	4608      	mov	r0, r1
   10b80:	b981      	cbnz	r1, 10ba4 <at_handler+0x28>
		LOG_ERR("Response buffer is NULL-pointer");
   10b82:	2301      	movs	r3, #1
   10b84:	f04f 0100 	mov.w	r1, #0
   10b88:	4a15      	ldr	r2, [pc, #84]	; (10be0 <at_handler+0x64>)
   10b8a:	f363 0107 	bfi	r1, r3, #0, #8
   10b8e:	4b15      	ldr	r3, [pc, #84]	; (10be4 <at_handler+0x68>)
   10b90:	4815      	ldr	r0, [pc, #84]	; (10be8 <at_handler+0x6c>)
   10b92:	1a9b      	subs	r3, r3, r2
   10b94:	08db      	lsrs	r3, r3, #3
   10b96:	f363 118f 	bfi	r1, r3, #6, #10
		LOG_ERR("Could not get network registration status");
   10b9a:	f00a f994 	bl	1aec6 <log_0>
}
   10b9e:	b003      	add	sp, #12
   10ba0:	f85d fb04 	ldr.w	pc, [sp], #4
	err = parse_nw_reg_status(response, &status, AT_CEREG_REG_STATUS_INDEX);
   10ba4:	2201      	movs	r2, #1
   10ba6:	f10d 0107 	add.w	r1, sp, #7
   10baa:	f7ff ff41 	bl	10a30 <parse_nw_reg_status>
	if (err) {
   10bae:	b160      	cbz	r0, 10bca <at_handler+0x4e>
		LOG_ERR("Could not get network registration status");
   10bb0:	2301      	movs	r3, #1
   10bb2:	f04f 0100 	mov.w	r1, #0
   10bb6:	4a0a      	ldr	r2, [pc, #40]	; (10be0 <at_handler+0x64>)
   10bb8:	f363 0107 	bfi	r1, r3, #0, #8
   10bbc:	4b09      	ldr	r3, [pc, #36]	; (10be4 <at_handler+0x68>)
   10bbe:	480b      	ldr	r0, [pc, #44]	; (10bec <at_handler+0x70>)
   10bc0:	1a9b      	subs	r3, r3, r2
   10bc2:	08db      	lsrs	r3, r3, #3
   10bc4:	f363 118f 	bfi	r1, r3, #6, #10
   10bc8:	e7e7      	b.n	10b9a <at_handler+0x1e>
	if ((status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   10bca:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10bce:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   10bd2:	2b01      	cmp	r3, #1
   10bd4:	d1e3      	bne.n	10b9e <at_handler+0x22>
	z_impl_k_sem_give(sem);
   10bd6:	4806      	ldr	r0, [pc, #24]	; (10bf0 <at_handler+0x74>)
   10bd8:	f009 faa4 	bl	1a124 <z_impl_k_sem_give>
   10bdc:	e7df      	b.n	10b9e <at_handler+0x22>
   10bde:	bf00      	nop
   10be0:	0001d954 	.word	0x0001d954
   10be4:	0001d99c 	.word	0x0001d99c
   10be8:	0001ebf3 	.word	0x0001ebf3
   10bec:	0001ec13 	.word	0x0001ec13
   10bf0:	2002046c 	.word	0x2002046c

00010bf4 <w_lte_lc_connect>:
{
   10bf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   10bf8:	2201      	movs	r2, #1
   10bfa:	2100      	movs	r1, #0
   10bfc:	4838      	ldr	r0, [pc, #224]	; (10ce0 <w_lte_lc_connect+0xec>)
   10bfe:	f00c fb7f 	bl	1d300 <z_impl_k_sem_init>
	rc = at_notif_register_handler(NULL, at_handler);
   10c02:	4938      	ldr	r1, [pc, #224]	; (10ce4 <w_lte_lc_connect+0xf0>)
   10c04:	2000      	movs	r0, #0
   10c06:	f7ff fac5 	bl	10194 <at_notif_register_handler>
	if (rc != 0) {
   10c0a:	4c37      	ldr	r4, [pc, #220]	; (10ce8 <w_lte_lc_connect+0xf4>)
   10c0c:	4b37      	ldr	r3, [pc, #220]	; (10cec <w_lte_lc_connect+0xf8>)
   10c0e:	4681      	mov	r9, r0
   10c10:	1ae4      	subs	r4, r4, r3
   10c12:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   10c16:	b168      	cbz	r0, 10c34 <w_lte_lc_connect+0x40>
		LOG_ERR("Can't register handler rc=%d", rc);
   10c18:	2101      	movs	r1, #1
   10c1a:	f04f 0200 	mov.w	r2, #0
   10c1e:	f361 0207 	bfi	r2, r1, #0, #8
   10c22:	4601      	mov	r1, r0
   10c24:	4832      	ldr	r0, [pc, #200]	; (10cf0 <w_lte_lc_connect+0xfc>)
   10c26:	f364 128f 	bfi	r2, r4, #6, #10
		LOG_ERR("Can't de-register handler rc=%d", rc);
   10c2a:	f00a f959 	bl	1aee0 <log_1>
}
   10c2e:	4648      	mov	r0, r9
   10c30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c34:	2702      	movs	r7, #2
	const char *current_network_mode = nw_mode_preferred;
   10c36:	482f      	ldr	r0, [pc, #188]	; (10cf4 <w_lte_lc_connect+0x100>)
	return z_impl_k_sem_take(sem, timeout);
   10c38:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 10d10 <w_lte_lc_connect+0x11c>
   10c3c:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 10ce0 <w_lte_lc_connect+0xec>
		if (at_cmd_write(current_network_mode, NULL, 0, NULL) != 0) {
   10c40:	2300      	movs	r3, #0
   10c42:	461a      	mov	r2, r3
   10c44:	4619      	mov	r1, r3
   10c46:	f7ff fa0f 	bl	10068 <at_cmd_write>
   10c4a:	4603      	mov	r3, r0
   10c4c:	bb90      	cbnz	r0, 10cb4 <w_lte_lc_connect+0xc0>
		if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   10c4e:	4602      	mov	r2, r0
   10c50:	4601      	mov	r1, r0
   10c52:	4829      	ldr	r0, [pc, #164]	; (10cf8 <w_lte_lc_connect+0x104>)
   10c54:	f7ff fa08 	bl	10068 <at_cmd_write>
   10c58:	4680      	mov	r8, r0
   10c5a:	bb58      	cbnz	r0, 10cb4 <w_lte_lc_connect+0xc0>
   10c5c:	4651      	mov	r1, sl
   10c5e:	4658      	mov	r0, fp
   10c60:	f009 fa8c 	bl	1a17c <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   10c64:	f110 0f0b 	cmn.w	r0, #11
   10c68:	4681      	mov	r9, r0
   10c6a:	d125      	bne.n	10cb8 <w_lte_lc_connect+0xc4>
			LOG_INF("Network connection attempt timed out");
   10c6c:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   10c70:	f043 0303 	orr.w	r3, r3, #3
   10c74:	f363 0607 	bfi	r6, r3, #0, #8
   10c78:	f364 168f 	bfi	r6, r4, #6, #10
   10c7c:	4631      	mov	r1, r6
   10c7e:	481f      	ldr	r0, [pc, #124]	; (10cfc <w_lte_lc_connect+0x108>)
   10c80:	f00a f921 	bl	1aec6 <log_0>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   10c84:	2f01      	cmp	r7, #1
   10c86:	d027      	beq.n	10cd8 <w_lte_lc_connect+0xe4>
				if (at_cmd_write(offline, NULL, 0, NULL) != 0) {
   10c88:	4643      	mov	r3, r8
   10c8a:	4642      	mov	r2, r8
   10c8c:	4641      	mov	r1, r8
   10c8e:	481c      	ldr	r0, [pc, #112]	; (10d00 <w_lte_lc_connect+0x10c>)
   10c90:	f7ff f9ea 	bl	10068 <at_cmd_write>
   10c94:	b970      	cbnz	r0, 10cb4 <w_lte_lc_connect+0xc0>
				LOG_INF("Using fallback network mode");
   10c96:	f025 033f 	bic.w	r3, r5, #63	; 0x3f
   10c9a:	f043 0303 	orr.w	r3, r3, #3
   10c9e:	f363 0507 	bfi	r5, r3, #0, #8
   10ca2:	f364 158f 	bfi	r5, r4, #6, #10
   10ca6:	4817      	ldr	r0, [pc, #92]	; (10d04 <w_lte_lc_connect+0x110>)
   10ca8:	4629      	mov	r1, r5
   10caa:	f00a f90c 	bl	1aec6 <log_0>
   10cae:	2701      	movs	r7, #1
				current_network_mode = nw_mode_fallback;
   10cb0:	4815      	ldr	r0, [pc, #84]	; (10d08 <w_lte_lc_connect+0x114>)
   10cb2:	e7c5      	b.n	10c40 <w_lte_lc_connect+0x4c>
			err = -EIO;
   10cb4:	f06f 0904 	mvn.w	r9, #4
	rc = at_notif_deregister_handler(NULL, at_handler);
   10cb8:	490a      	ldr	r1, [pc, #40]	; (10ce4 <w_lte_lc_connect+0xf0>)
   10cba:	2000      	movs	r0, #0
   10cbc:	f7ff fab8 	bl	10230 <at_notif_deregister_handler>
	if (rc != 0) {
   10cc0:	4601      	mov	r1, r0
   10cc2:	2800      	cmp	r0, #0
   10cc4:	d0b3      	beq.n	10c2e <w_lte_lc_connect+0x3a>
		LOG_ERR("Can't de-register handler rc=%d", rc);
   10cc6:	2001      	movs	r0, #1
   10cc8:	f04f 0200 	mov.w	r2, #0
   10ccc:	f360 0207 	bfi	r2, r0, #0, #8
   10cd0:	f364 128f 	bfi	r2, r4, #6, #10
   10cd4:	480d      	ldr	r0, [pc, #52]	; (10d0c <w_lte_lc_connect+0x118>)
   10cd6:	e7a8      	b.n	10c2a <w_lte_lc_connect+0x36>
				err = -ETIMEDOUT;
   10cd8:	f06f 093b 	mvn.w	r9, #59	; 0x3b
   10cdc:	e7ec      	b.n	10cb8 <w_lte_lc_connect+0xc4>
   10cde:	bf00      	nop
   10ce0:	2002046c 	.word	0x2002046c
   10ce4:	00010b7d 	.word	0x00010b7d
   10ce8:	0001d99c 	.word	0x0001d99c
   10cec:	0001d954 	.word	0x0001d954
   10cf0:	0001ed6c 	.word	0x0001ed6c
   10cf4:	0001ec69 	.word	0x0001ec69
   10cf8:	0001ec48 	.word	0x0001ec48
   10cfc:	0001ed89 	.word	0x0001ed89
   10d00:	0001ec80 	.word	0x0001ec80
   10d04:	0001edae 	.word	0x0001edae
   10d08:	0001ec52 	.word	0x0001ec52
   10d0c:	0001edca 	.word	0x0001edca
   10d10:	000927c0 	.word	0x000927c0

00010d14 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   10d14:	b508      	push	{r3, lr}
	z_impl_log_panic();
   10d16:	f7fc f8c7 	bl	cea8 <z_impl_log_panic>
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   10d1a:	2301      	movs	r3, #1
   10d1c:	f04f 0100 	mov.w	r1, #0
   10d20:	4a06      	ldr	r2, [pc, #24]	; (10d3c <k_sys_fatal_error_handler+0x28>)
   10d22:	f363 0107 	bfi	r1, r3, #0, #8
   10d26:	4b06      	ldr	r3, [pc, #24]	; (10d40 <k_sys_fatal_error_handler+0x2c>)
   10d28:	4806      	ldr	r0, [pc, #24]	; (10d44 <k_sys_fatal_error_handler+0x30>)
   10d2a:	1a9b      	subs	r3, r3, r2
   10d2c:	08db      	lsrs	r3, r3, #3
   10d2e:	f363 118f 	bfi	r1, r3, #6, #10
   10d32:	f00a f8c8 	bl	1aec6 <log_0>
	sys_arch_reboot(0);
   10d36:	2000      	movs	r0, #0
   10d38:	f7fd fa20 	bl	e17c <sys_arch_reboot>

	CODE_UNREACHABLE;
   10d3c:	0001d954 	.word	0x0001d954
   10d40:	0001d98c 	.word	0x0001d98c
   10d44:	0001ef76 	.word	0x0001ef76

00010d48 <check_ext_api_requests>:
	return true;
}


static int check_ext_api_requests(struct device *dev)
{
   10d48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   10d4c:	2600      	movs	r6, #0
			skip_ext_apis(&m_firmware_info);
   10d4e:	4c1e      	ldr	r4, [pc, #120]	; (10dc8 <check_ext_api_requests+0x80>)
{
   10d50:	b085      	sub	sp, #20
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   10d52:	f854 9c04 	ldr.w	r9, [r4, #-4]
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							u32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const u32_t ext_api_magic[] = {EXT_API_MAGIC};
   10d56:	4f1d      	ldr	r7, [pc, #116]	; (10dcc <check_ext_api_requests+0x84>)
   10d58:	ad01      	add	r5, sp, #4
   10d5a:	45b1      	cmp	r9, r6
   10d5c:	d803      	bhi.n	10d66 <check_ext_api_requests+0x1e>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   10d5e:	2000      	movs	r0, #0
   10d60:	b005      	add	sp, #20
   10d62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((u32_t)*(ext_api_req->ext_api))
   10d66:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10d68:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   10d6c:	f8d3 8000 	ldr.w	r8, [r3]
   10d70:	e885 0007 	stmia.w	r5, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   10d74:	220c      	movs	r2, #12
   10d76:	4629      	mov	r1, r5
   10d78:	4640      	mov	r0, r8
   10d7a:	f00b f83b 	bl	1bdf4 <memcmp>
   10d7e:	b9a0      	cbnz	r0, 10daa <check_ext_api_requests+0x62>
   10d80:	f1b8 0f00 	cmp.w	r8, #0
   10d84:	d011      	beq.n	10daa <check_ext_api_requests+0x62>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   10d86:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const u32_t req_id = ext_api_req->request.ext_api_id;
   10d88:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   10d8a:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   10d8c:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   10d8e:	4291      	cmp	r1, r2
   10d90:	d10b      	bne.n	10daa <check_ext_api_requests+0x62>
		&&  (ext_api->ext_api_version >= req_min_version)
   10d92:	699a      	ldr	r2, [r3, #24]
	const u32_t req_min_version = ext_api_req->request.ext_api_version;
   10d94:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   10d96:	4291      	cmp	r1, r2
   10d98:	d807      	bhi.n	10daa <check_ext_api_requests+0x62>
	const u32_t req_max_version = ext_api_req->ext_api_max_version;
   10d9a:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   10d9c:	4291      	cmp	r1, r2
   10d9e:	d904      	bls.n	10daa <check_ext_api_requests+0x62>
	const u32_t req_flags = ext_api_req->request.ext_api_flags;
   10da0:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   10da2:	695b      	ldr	r3, [r3, #20]
   10da4:	ea32 0303 	bics.w	r3, r2, r3
   10da8:	d007      	beq.n	10dba <check_ext_api_requests+0x72>
		} else if (ext_api_req->required) {
   10daa:	6a23      	ldr	r3, [r4, #32]
   10dac:	b14b      	cbz	r3, 10dc2 <check_ext_api_requests+0x7a>
			k_panic();
   10dae:	4040      	eors	r0, r0
   10db0:	f380 8811 	msr	BASEPRI, r0
   10db4:	f04f 0004 	mov.w	r0, #4
   10db8:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   10dba:	68e3      	ldr	r3, [r4, #12]
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   10dbc:	3601      	adds	r6, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   10dbe:	441c      	add	r4, r3
   10dc0:	e7cb      	b.n	10d5a <check_ext_api_requests+0x12>
			*ext_api_req->ext_api = NULL;
   10dc2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   10dc4:	6013      	str	r3, [r2, #0]
   10dc6:	e7f8      	b.n	10dba <check_ext_api_requests+0x72>
   10dc8:	0000c23c 	.word	0x0000c23c
   10dcc:	0001d9fc 	.word	0x0001d9fc

00010dd0 <rpc_logobj_client_evt_handler>:
   10dd0:	b120      	cbz	r0, 10ddc <rpc_logobj_client_evt_handler+0xc>
   10dd2:	f850 1b08 	ldr.w	r1, [r0], #8
   10dd6:	0c09      	lsrs	r1, r1, #16
   10dd8:	f000 b852 	b.w	10e80 <logobj_event_handler>
   10ddc:	4770      	bx	lr
   10dde:	bf00      	nop

00010de0 <rpc_logobj_client_init>:
   10de0:	4801      	ldr	r0, [pc, #4]	; (10de8 <rpc_logobj_client_init+0x8>)
   10de2:	f006 bb23 	b.w	1742c <rpc_client_register>
   10de6:	bf00      	nop
   10de8:	0001db80 	.word	0x0001db80

00010dec <rpc_logobj_client_request_alloc>:
   10dec:	2300      	movs	r3, #0
   10dee:	b510      	push	{r4, lr}
   10df0:	b082      	sub	sp, #8
   10df2:	9301      	str	r3, [sp, #4]
   10df4:	b961      	cbnz	r1, 10e10 <rpc_logobj_client_request_alloc+0x24>
   10df6:	b170      	cbz	r0, 10e16 <rpc_logobj_client_request_alloc+0x2a>
   10df8:	4604      	mov	r4, r0
   10dfa:	aa01      	add	r2, sp, #4
   10dfc:	2009      	movs	r0, #9
   10dfe:	f006 fd4d 	bl	1789c <rpc_message_alloc>
   10e02:	b918      	cbnz	r0, 10e0c <rpc_logobj_client_request_alloc+0x20>
   10e04:	9b01      	ldr	r3, [sp, #4]
   10e06:	b10b      	cbz	r3, 10e0c <rpc_logobj_client_request_alloc+0x20>
   10e08:	3308      	adds	r3, #8
   10e0a:	6023      	str	r3, [r4, #0]
   10e0c:	b002      	add	sp, #8
   10e0e:	bd10      	pop	{r4, pc}
   10e10:	200f      	movs	r0, #15
   10e12:	b002      	add	sp, #8
   10e14:	bd10      	pop	{r4, pc}
   10e16:	200e      	movs	r0, #14
   10e18:	b002      	add	sp, #8
   10e1a:	bd10      	pop	{r4, pc}

00010e1c <rpc_logobj_client_request_send>:
   10e1c:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   10e20:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   10e24:	d10b      	bne.n	10e3e <rpc_logobj_client_request_send+0x22>
   10e26:	b160      	cbz	r0, 10e42 <rpc_logobj_client_request_send+0x26>
   10e28:	4603      	mov	r3, r0
   10e2a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   10e2e:	2009      	movs	r0, #9
   10e30:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   10e34:	f843 1d08 	str.w	r1, [r3, #-8]!
   10e38:	4619      	mov	r1, r3
   10e3a:	f006 bd17 	b.w	1786c <rpc_message_send>
   10e3e:	200f      	movs	r0, #15
   10e40:	4770      	bx	lr
   10e42:	200e      	movs	r0, #14
   10e44:	4770      	bx	lr
   10e46:	bf00      	nop

00010e48 <rpc_logobj_client_message_free>:
   10e48:	b120      	cbz	r0, 10e54 <rpc_logobj_client_message_free+0xc>
   10e4a:	f1a0 0108 	sub.w	r1, r0, #8
   10e4e:	2009      	movs	r0, #9
   10e50:	f006 bd56 	b.w	17900 <rpc_message_free>
   10e54:	200e      	movs	r0, #14
   10e56:	4770      	bx	lr

00010e58 <rpc_logobj_client_data_free>:
   10e58:	b118      	cbz	r0, 10e62 <rpc_logobj_client_data_free+0xa>
   10e5a:	4601      	mov	r1, r0
   10e5c:	2009      	movs	r0, #9
   10e5e:	f006 be61 	b.w	17b24 <rpc_message_data_free>
   10e62:	200e      	movs	r0, #14
   10e64:	4770      	bx	lr
   10e66:	bf00      	nop

00010e68 <packet_free_cb>:
   10e68:	b510      	push	{r4, lr}
   10e6a:	4604      	mov	r4, r0
   10e6c:	6800      	ldr	r0, [r0, #0]
   10e6e:	f7ff fff3 	bl	10e58 <rpc_logobj_client_data_free>
   10e72:	68a0      	ldr	r0, [r4, #8]
   10e74:	b118      	cbz	r0, 10e7e <packet_free_cb+0x16>
   10e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10e7a:	f001 b90f 	b.w	1209c <nrf_free>
   10e7e:	bd10      	pop	{r4, pc}

00010e80 <logobj_event_handler>:
   10e80:	b530      	push	{r4, r5, lr}
   10e82:	4b3b      	ldr	r3, [pc, #236]	; (10f70 <logobj_event_handler+0xf0>)
   10e84:	b085      	sub	sp, #20
   10e86:	681d      	ldr	r5, [r3, #0]
   10e88:	2d00      	cmp	r5, #0
   10e8a:	d04c      	beq.n	10f26 <logobj_event_handler+0xa6>
   10e8c:	f248 0302 	movw	r3, #32770	; 0x8002
   10e90:	4299      	cmp	r1, r3
   10e92:	d053      	beq.n	10f3c <logobj_event_handler+0xbc>
   10e94:	d91c      	bls.n	10ed0 <logobj_event_handler+0x50>
   10e96:	f248 0303 	movw	r3, #32771	; 0x8003
   10e9a:	4299      	cmp	r1, r3
   10e9c:	d05a      	beq.n	10f54 <logobj_event_handler+0xd4>
   10e9e:	f249 0301 	movw	r3, #36865	; 0x9001
   10ea2:	4299      	cmp	r1, r3
   10ea4:	d147      	bne.n	10f36 <logobj_event_handler+0xb6>
   10ea6:	2400      	movs	r4, #0
   10ea8:	6843      	ldr	r3, [r0, #4]
   10eaa:	6802      	ldr	r2, [r0, #0]
   10eac:	e9cd 4402 	strd	r4, r4, [sp, #8]
   10eb0:	e9cd 2300 	strd	r2, r3, [sp]
   10eb4:	69e8      	ldr	r0, [r5, #28]
   10eb6:	4669      	mov	r1, sp
   10eb8:	6803      	ldr	r3, [r0, #0]
   10eba:	685b      	ldr	r3, [r3, #4]
   10ebc:	4798      	blx	r3
   10ebe:	3001      	adds	r0, #1
   10ec0:	d04e      	beq.n	10f60 <logobj_event_handler+0xe0>
   10ec2:	4620      	mov	r0, r4
   10ec4:	682b      	ldr	r3, [r5, #0]
   10ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   10eca:	602b      	str	r3, [r5, #0]
   10ecc:	b005      	add	sp, #20
   10ece:	bd30      	pop	{r4, r5, pc}
   10ed0:	f248 0301 	movw	r3, #32769	; 0x8001
   10ed4:	4299      	cmp	r1, r3
   10ed6:	d12e      	bne.n	10f36 <logobj_event_handler+0xb6>
   10ed8:	68c3      	ldr	r3, [r0, #12]
   10eda:	2b00      	cmp	r3, #0
   10edc:	d135      	bne.n	10f4a <logobj_event_handler+0xca>
   10ede:	6828      	ldr	r0, [r5, #0]
   10ee0:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   10ee4:	d03e      	beq.n	10f64 <logobj_event_handler+0xe4>
   10ee6:	682b      	ldr	r3, [r5, #0]
   10ee8:	b29b      	uxth	r3, r3
   10eea:	2b01      	cmp	r3, #1
   10eec:	d105      	bne.n	10efa <logobj_event_handler+0x7a>
   10eee:	682b      	ldr	r3, [r5, #0]
   10ef0:	0c1b      	lsrs	r3, r3, #16
   10ef2:	041b      	lsls	r3, r3, #16
   10ef4:	f043 0302 	orr.w	r3, r3, #2
   10ef8:	602b      	str	r3, [r5, #0]
   10efa:	4b1e      	ldr	r3, [pc, #120]	; (10f74 <logobj_event_handler+0xf4>)
   10efc:	781a      	ldrb	r2, [r3, #0]
   10efe:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   10f02:	2a00      	cmp	r2, #0
   10f04:	d031      	beq.n	10f6a <logobj_event_handler+0xea>
   10f06:	4a1c      	ldr	r2, [pc, #112]	; (10f78 <logobj_event_handler+0xf8>)
   10f08:	7811      	ldrb	r1, [r2, #0]
   10f0a:	b909      	cbnz	r1, 10f10 <logobj_event_handler+0x90>
   10f0c:	2101      	movs	r1, #1
   10f0e:	7011      	strb	r1, [r2, #0]
   10f10:	2000      	movs	r0, #0
   10f12:	7018      	strb	r0, [r3, #0]
   10f14:	682b      	ldr	r3, [r5, #0]
   10f16:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   10f1a:	602b      	str	r3, [r5, #0]
   10f1c:	682b      	ldr	r3, [r5, #0]
   10f1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   10f22:	602b      	str	r3, [r5, #0]
   10f24:	e7d2      	b.n	10ecc <logobj_event_handler+0x4c>
   10f26:	6800      	ldr	r0, [r0, #0]
   10f28:	2800      	cmp	r0, #0
   10f2a:	d0cf      	beq.n	10ecc <logobj_event_handler+0x4c>
   10f2c:	f7ff ff94 	bl	10e58 <rpc_logobj_client_data_free>
   10f30:	4628      	mov	r0, r5
   10f32:	b005      	add	sp, #20
   10f34:	bd30      	pop	{r4, r5, pc}
   10f36:	2000      	movs	r0, #0
   10f38:	b005      	add	sp, #20
   10f3a:	bd30      	pop	{r4, r5, pc}
   10f3c:	682b      	ldr	r3, [r5, #0]
   10f3e:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   10f42:	d00b      	beq.n	10f5c <logobj_event_handler+0xdc>
   10f44:	68c0      	ldr	r0, [r0, #12]
   10f46:	2800      	cmp	r0, #0
   10f48:	d0e4      	beq.n	10f14 <logobj_event_handler+0x94>
   10f4a:	230e      	movs	r3, #14
   10f4c:	2000      	movs	r0, #0
   10f4e:	606b      	str	r3, [r5, #4]
   10f50:	b005      	add	sp, #20
   10f52:	bd30      	pop	{r4, r5, pc}
   10f54:	68c3      	ldr	r3, [r0, #12]
   10f56:	2b01      	cmp	r3, #1
   10f58:	d1a5      	bne.n	10ea6 <logobj_event_handler+0x26>
   10f5a:	e7f6      	b.n	10f4a <logobj_event_handler+0xca>
   10f5c:	4618      	mov	r0, r3
   10f5e:	e7b5      	b.n	10ecc <logobj_event_handler+0x4c>
   10f60:	2002      	movs	r0, #2
   10f62:	e7b3      	b.n	10ecc <logobj_event_handler+0x4c>
   10f64:	230e      	movs	r3, #14
   10f66:	606b      	str	r3, [r5, #4]
   10f68:	e7b0      	b.n	10ecc <logobj_event_handler+0x4c>
   10f6a:	4a03      	ldr	r2, [pc, #12]	; (10f78 <logobj_event_handler+0xf8>)
   10f6c:	7011      	strb	r1, [r2, #0]
   10f6e:	e7cf      	b.n	10f10 <logobj_event_handler+0x90>
   10f70:	20020488 	.word	0x20020488
   10f74:	2002334f 	.word	0x2002334f
   10f78:	20023350 	.word	0x20023350

00010f7c <logobj_interface_init>:
   10f7c:	2300      	movs	r3, #0
   10f7e:	b510      	push	{r4, lr}
   10f80:	4907      	ldr	r1, [pc, #28]	; (10fa0 <logobj_interface_init+0x24>)
   10f82:	4a08      	ldr	r2, [pc, #32]	; (10fa4 <logobj_interface_init+0x28>)
   10f84:	4c08      	ldr	r4, [pc, #32]	; (10fa8 <logobj_interface_init+0x2c>)
   10f86:	4809      	ldr	r0, [pc, #36]	; (10fac <logobj_interface_init+0x30>)
   10f88:	7023      	strb	r3, [r4, #0]
   10f8a:	6003      	str	r3, [r0, #0]
   10f8c:	700b      	strb	r3, [r1, #0]
   10f8e:	6013      	str	r3, [r2, #0]
   10f90:	f7ff ff26 	bl	10de0 <rpc_logobj_client_init>
   10f94:	3000      	adds	r0, #0
   10f96:	bf18      	it	ne
   10f98:	2001      	movne	r0, #1
   10f9a:	4240      	negs	r0, r0
   10f9c:	bd10      	pop	{r4, pc}
   10f9e:	bf00      	nop
   10fa0:	2002334f 	.word	0x2002334f
   10fa4:	20020484 	.word	0x20020484
   10fa8:	20023350 	.word	0x20023350
   10fac:	20020488 	.word	0x20020488

00010fb0 <logobj_interface_open>:
   10fb0:	2300      	movs	r3, #0
   10fb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10fb6:	2866      	cmp	r0, #102	; 0x66
   10fb8:	b082      	sub	sp, #8
   10fba:	9300      	str	r3, [sp, #0]
   10fbc:	d172      	bne.n	110a4 <logobj_interface_open+0xf4>
   10fbe:	2902      	cmp	r1, #2
   10fc0:	4689      	mov	r9, r1
   10fc2:	d16f      	bne.n	110a4 <logobj_interface_open+0xf4>
   10fc4:	f240 2305 	movw	r3, #517	; 0x205
   10fc8:	429a      	cmp	r2, r3
   10fca:	4692      	mov	sl, r2
   10fcc:	d16a      	bne.n	110a4 <logobj_interface_open+0xf4>
   10fce:	4f48      	ldr	r7, [pc, #288]	; (110f0 <logobj_interface_open+0x140>)
   10fd0:	683d      	ldr	r5, [r7, #0]
   10fd2:	2d00      	cmp	r5, #0
   10fd4:	d17c      	bne.n	110d0 <logobj_interface_open+0x120>
   10fd6:	4680      	mov	r8, r0
   10fd8:	4a46      	ldr	r2, [pc, #280]	; (110f4 <logobj_interface_open+0x144>)
   10fda:	4668      	mov	r0, sp
   10fdc:	f005 ffd6 	bl	16f8c <interface_socket_allocate>
   10fe0:	9b00      	ldr	r3, [sp, #0]
   10fe2:	4606      	mov	r6, r0
   10fe4:	2b00      	cmp	r3, #0
   10fe6:	d07d      	beq.n	110e4 <logobj_interface_open+0x134>
   10fe8:	4629      	mov	r1, r5
   10fea:	2204      	movs	r2, #4
   10fec:	4842      	ldr	r0, [pc, #264]	; (110f8 <logobj_interface_open+0x148>)
   10fee:	603b      	str	r3, [r7, #0]
   10ff0:	f00a ff3a 	bl	1be68 <memset>
   10ff4:	9c00      	ldr	r4, [sp, #0]
   10ff6:	4629      	mov	r1, r5
   10ff8:	e9c4 8903 	strd	r8, r9, [r4, #12]
   10ffc:	f8c4 a014 	str.w	sl, [r4, #20]
   11000:	a801      	add	r0, sp, #4
   11002:	f7ff fef3 	bl	10dec <rpc_logobj_client_request_alloc>
   11006:	2800      	cmp	r0, #0
   11008:	d13c      	bne.n	11084 <logobj_interface_open+0xd4>
   1100a:	2201      	movs	r2, #1
   1100c:	2104      	movs	r1, #4
   1100e:	9b01      	ldr	r3, [sp, #4]
   11010:	4d3a      	ldr	r5, [pc, #232]	; (110fc <logobj_interface_open+0x14c>)
   11012:	7358      	strb	r0, [r3, #13]
   11014:	7398      	strb	r0, [r3, #14]
   11016:	73d8      	strb	r0, [r3, #15]
   11018:	7258      	strb	r0, [r3, #9]
   1101a:	7298      	strb	r0, [r3, #10]
   1101c:	72d8      	strb	r0, [r3, #11]
   1101e:	7219      	strb	r1, [r3, #8]
   11020:	702a      	strb	r2, [r5, #0]
   11022:	731a      	strb	r2, [r3, #12]
   11024:	6822      	ldr	r2, [r4, #0]
   11026:	4618      	mov	r0, r3
   11028:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   1102c:	6022      	str	r2, [r4, #0]
   1102e:	f247 0101 	movw	r1, #28673	; 0x7001
   11032:	f7ff fef3 	bl	10e1c <rpc_logobj_client_request_send>
   11036:	bb38      	cbnz	r0, 11088 <logobj_interface_open+0xd8>
   11038:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1103c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11040:	4611      	mov	r1, r2
   11042:	4630      	mov	r0, r6
   11044:	f006 f84e 	bl	170e4 <interface_socket_wait>
   11048:	4604      	mov	r4, r0
   1104a:	b310      	cbz	r0, 11092 <logobj_interface_open+0xe2>
   1104c:	9a00      	ldr	r2, [sp, #0]
   1104e:	2e00      	cmp	r6, #0
   11050:	6813      	ldr	r3, [r2, #0]
   11052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   11056:	6013      	str	r3, [r2, #0]
   11058:	9a00      	ldr	r2, [sp, #0]
   1105a:	6813      	ldr	r3, [r2, #0]
   1105c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   11060:	6013      	str	r3, [r2, #0]
   11062:	9a00      	ldr	r2, [sp, #0]
   11064:	6813      	ldr	r3, [r2, #0]
   11066:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1106a:	6013      	str	r3, [r2, #0]
   1106c:	da36      	bge.n	110dc <logobj_interface_open+0x12c>
   1106e:	2300      	movs	r3, #0
   11070:	4620      	mov	r0, r4
   11072:	603b      	str	r3, [r7, #0]
   11074:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   11078:	f7fe fca0 	bl	f9bc <bsd_os_errno_set>
   1107c:	4630      	mov	r0, r6
   1107e:	b002      	add	sp, #8
   11080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11084:	240c      	movs	r4, #12
   11086:	e7e1      	b.n	1104c <logobj_interface_open+0x9c>
   11088:	9801      	ldr	r0, [sp, #4]
   1108a:	f7ff fedd 	bl	10e48 <rpc_logobj_client_message_free>
   1108e:	2405      	movs	r4, #5
   11090:	e7dc      	b.n	1104c <logobj_interface_open+0x9c>
   11092:	4630      	mov	r0, r6
   11094:	f006 f89a 	bl	171cc <interface_socket_from_handle_get>
   11098:	b150      	cbz	r0, 110b0 <logobj_interface_open+0x100>
   1109a:	6844      	ldr	r4, [r0, #4]
   1109c:	b144      	cbz	r4, 110b0 <logobj_interface_open+0x100>
   1109e:	2300      	movs	r3, #0
   110a0:	6043      	str	r3, [r0, #4]
   110a2:	e7d3      	b.n	1104c <logobj_interface_open+0x9c>
   110a4:	2016      	movs	r0, #22
   110a6:	f7fe fc89 	bl	f9bc <bsd_os_errno_set>
   110aa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   110ae:	e7e5      	b.n	1107c <logobj_interface_open+0xcc>
   110b0:	9a00      	ldr	r2, [sp, #0]
   110b2:	6813      	ldr	r3, [r2, #0]
   110b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   110b8:	6013      	str	r3, [r2, #0]
   110ba:	9a00      	ldr	r2, [sp, #0]
   110bc:	6813      	ldr	r3, [r2, #0]
   110be:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   110c2:	6013      	str	r3, [r2, #0]
   110c4:	9a00      	ldr	r2, [sp, #0]
   110c6:	6813      	ldr	r3, [r2, #0]
   110c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   110cc:	6013      	str	r3, [r2, #0]
   110ce:	e7d5      	b.n	1107c <logobj_interface_open+0xcc>
   110d0:	2001      	movs	r0, #1
   110d2:	f7fe fc73 	bl	f9bc <bsd_os_errno_set>
   110d6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   110da:	e7cf      	b.n	1107c <logobj_interface_open+0xcc>
   110dc:	4630      	mov	r0, r6
   110de:	f005 ffb3 	bl	17048 <interface_socket_free>
   110e2:	e7c4      	b.n	1106e <logobj_interface_open+0xbe>
   110e4:	2018      	movs	r0, #24
   110e6:	f7fe fc69 	bl	f9bc <bsd_os_errno_set>
   110ea:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   110ee:	e7c5      	b.n	1107c <logobj_interface_open+0xcc>
   110f0:	20020488 	.word	0x20020488
   110f4:	00010e69 	.word	0x00010e69
   110f8:	20020484 	.word	0x20020484
   110fc:	2002334f 	.word	0x2002334f

00011100 <logobj_interface_read>:
   11100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11104:	b085      	sub	sp, #20
   11106:	2900      	cmp	r1, #0
   11108:	d05e      	beq.n	111c8 <logobj_interface_read+0xc8>
   1110a:	2a00      	cmp	r2, #0
   1110c:	4616      	mov	r6, r2
   1110e:	dd5b      	ble.n	111c8 <logobj_interface_read+0xc8>
   11110:	461f      	mov	r7, r3
   11112:	4680      	mov	r8, r0
   11114:	460d      	mov	r5, r1
   11116:	f006 f859 	bl	171cc <interface_socket_from_handle_get>
   1111a:	4604      	mov	r4, r0
   1111c:	2800      	cmp	r0, #0
   1111e:	d059      	beq.n	111d4 <logobj_interface_read+0xd4>
   11120:	69c0      	ldr	r0, [r0, #28]
   11122:	07ba      	lsls	r2, r7, #30
   11124:	6803      	ldr	r3, [r0, #0]
   11126:	68db      	ldr	r3, [r3, #12]
   11128:	d524      	bpl.n	11174 <logobj_interface_read+0x74>
   1112a:	4798      	blx	r3
   1112c:	3001      	adds	r0, #1
   1112e:	d03b      	beq.n	111a8 <logobj_interface_read+0xa8>
   11130:	6823      	ldr	r3, [r4, #0]
   11132:	69e0      	ldr	r0, [r4, #28]
   11134:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   11138:	d038      	beq.n	111ac <logobj_interface_read+0xac>
   1113a:	2100      	movs	r1, #0
   1113c:	6823      	ldr	r3, [r4, #0]
   1113e:	463a      	mov	r2, r7
   11140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   11144:	6023      	str	r3, [r4, #0]
   11146:	e9cd 1102 	strd	r1, r1, [sp, #8]
   1114a:	e9cd 5600 	strd	r5, r6, [sp]
   1114e:	6803      	ldr	r3, [r0, #0]
   11150:	4669      	mov	r1, sp
   11152:	689b      	ldr	r3, [r3, #8]
   11154:	4798      	blx	r3
   11156:	4605      	mov	r5, r0
   11158:	69e0      	ldr	r0, [r4, #28]
   1115a:	6803      	ldr	r3, [r0, #0]
   1115c:	68db      	ldr	r3, [r3, #12]
   1115e:	4798      	blx	r3
   11160:	3001      	adds	r0, #1
   11162:	d003      	beq.n	1116c <logobj_interface_read+0x6c>
   11164:	6823      	ldr	r3, [r4, #0]
   11166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1116a:	6023      	str	r3, [r4, #0]
   1116c:	4628      	mov	r0, r5
   1116e:	b005      	add	sp, #20
   11170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11174:	6822      	ldr	r2, [r4, #0]
   11176:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   1117a:	d1d6      	bne.n	1112a <logobj_interface_read+0x2a>
   1117c:	4798      	blx	r3
   1117e:	1c43      	adds	r3, r0, #1
   11180:	d1d6      	bne.n	11130 <logobj_interface_read+0x30>
   11182:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   11186:	6a23      	ldr	r3, [r4, #32]
   11188:	4611      	mov	r1, r2
   1118a:	2b00      	cmp	r3, #0
   1118c:	bf08      	it	eq
   1118e:	4603      	moveq	r3, r0
   11190:	4640      	mov	r0, r8
   11192:	f005 ffa7 	bl	170e4 <interface_socket_wait>
   11196:	b158      	cbz	r0, 111b0 <logobj_interface_read+0xb0>
   11198:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1119c:	f7fe fc0e 	bl	f9bc <bsd_os_errno_set>
   111a0:	4628      	mov	r0, r5
   111a2:	b005      	add	sp, #20
   111a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   111a8:	2023      	movs	r0, #35	; 0x23
   111aa:	e7f5      	b.n	11198 <logobj_interface_read+0x98>
   111ac:	461d      	mov	r5, r3
   111ae:	e7d4      	b.n	1115a <logobj_interface_read+0x5a>
   111b0:	4640      	mov	r0, r8
   111b2:	f006 f80b 	bl	171cc <interface_socket_from_handle_get>
   111b6:	4603      	mov	r3, r0
   111b8:	2800      	cmp	r0, #0
   111ba:	d0b9      	beq.n	11130 <logobj_interface_read+0x30>
   111bc:	6840      	ldr	r0, [r0, #4]
   111be:	2800      	cmp	r0, #0
   111c0:	d0b6      	beq.n	11130 <logobj_interface_read+0x30>
   111c2:	f8c3 9004 	str.w	r9, [r3, #4]
   111c6:	e7e7      	b.n	11198 <logobj_interface_read+0x98>
   111c8:	2016      	movs	r0, #22
   111ca:	f7fe fbf7 	bl	f9bc <bsd_os_errno_set>
   111ce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   111d2:	e7cb      	b.n	1116c <logobj_interface_read+0x6c>
   111d4:	2009      	movs	r0, #9
   111d6:	f7fe fbf1 	bl	f9bc <bsd_os_errno_set>
   111da:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   111de:	e7c5      	b.n	1116c <logobj_interface_read+0x6c>

000111e0 <logobj_interface_write>:
   111e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   111e4:	b082      	sub	sp, #8
   111e6:	2900      	cmp	r1, #0
   111e8:	d05b      	beq.n	112a2 <logobj_interface_write+0xc2>
   111ea:	2a04      	cmp	r2, #4
   111ec:	d159      	bne.n	112a2 <logobj_interface_write+0xc2>
   111ee:	461e      	mov	r6, r3
   111f0:	4607      	mov	r7, r0
   111f2:	460d      	mov	r5, r1
   111f4:	f005 ffea 	bl	171cc <interface_socket_from_handle_get>
   111f8:	4604      	mov	r4, r0
   111fa:	2800      	cmp	r0, #0
   111fc:	d067      	beq.n	112ce <logobj_interface_write+0xee>
   111fe:	07b0      	lsls	r0, r6, #30
   11200:	d526      	bpl.n	11250 <logobj_interface_write+0x70>
   11202:	6823      	ldr	r3, [r4, #0]
   11204:	039b      	lsls	r3, r3, #14
   11206:	d55e      	bpl.n	112c6 <logobj_interface_write+0xe6>
   11208:	2600      	movs	r6, #0
   1120a:	6823      	ldr	r3, [r4, #0]
   1120c:	2100      	movs	r1, #0
   1120e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   11212:	6023      	str	r3, [r4, #0]
   11214:	a801      	add	r0, sp, #4
   11216:	f8d5 8000 	ldr.w	r8, [r5]
   1121a:	f7ff fde7 	bl	10dec <rpc_logobj_client_request_alloc>
   1121e:	b9f8      	cbnz	r0, 11260 <logobj_interface_write+0x80>
   11220:	2504      	movs	r5, #4
   11222:	9b01      	ldr	r3, [sp, #4]
   11224:	f247 0103 	movw	r1, #28675	; 0x7003
   11228:	f8c3 800c 	str.w	r8, [r3, #12]
   1122c:	7258      	strb	r0, [r3, #9]
   1122e:	7298      	strb	r0, [r3, #10]
   11230:	72d8      	strb	r0, [r3, #11]
   11232:	721d      	strb	r5, [r3, #8]
   11234:	4618      	mov	r0, r3
   11236:	f7ff fdf1 	bl	10e1c <rpc_logobj_client_request_send>
   1123a:	4680      	mov	r8, r0
   1123c:	bb40      	cbnz	r0, 11290 <logobj_interface_write+0xb0>
   1123e:	b9ce      	cbnz	r6, 11274 <logobj_interface_write+0x94>
   11240:	4628      	mov	r0, r5
   11242:	6823      	ldr	r3, [r4, #0]
   11244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   11248:	6023      	str	r3, [r4, #0]
   1124a:	b002      	add	sp, #8
   1124c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11250:	6823      	ldr	r3, [r4, #0]
   11252:	00d9      	lsls	r1, r3, #3
   11254:	d4d5      	bmi.n	11202 <logobj_interface_write+0x22>
   11256:	6823      	ldr	r3, [r4, #0]
   11258:	039a      	lsls	r2, r3, #14
   1125a:	d536      	bpl.n	112ca <logobj_interface_write+0xea>
   1125c:	2601      	movs	r6, #1
   1125e:	e7d4      	b.n	1120a <logobj_interface_write+0x2a>
   11260:	200c      	movs	r0, #12
   11262:	6823      	ldr	r3, [r4, #0]
   11264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   11268:	6023      	str	r3, [r4, #0]
   1126a:	f7fe fba7 	bl	f9bc <bsd_os_errno_set>
   1126e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11272:	e7ea      	b.n	1124a <logobj_interface_write+0x6a>
   11274:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   11278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1127c:	4611      	mov	r1, r2
   1127e:	4638      	mov	r0, r7
   11280:	f005 ff30 	bl	170e4 <interface_socket_wait>
   11284:	b198      	cbz	r0, 112ae <logobj_interface_write+0xce>
   11286:	6823      	ldr	r3, [r4, #0]
   11288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1128c:	6023      	str	r3, [r4, #0]
   1128e:	e7ec      	b.n	1126a <logobj_interface_write+0x8a>
   11290:	9801      	ldr	r0, [sp, #4]
   11292:	f7ff fdd9 	bl	10e48 <rpc_logobj_client_message_free>
   11296:	6823      	ldr	r3, [r4, #0]
   11298:	2005      	movs	r0, #5
   1129a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1129e:	6023      	str	r3, [r4, #0]
   112a0:	e7e3      	b.n	1126a <logobj_interface_write+0x8a>
   112a2:	2016      	movs	r0, #22
   112a4:	f7fe fb8a 	bl	f9bc <bsd_os_errno_set>
   112a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   112ac:	e7cd      	b.n	1124a <logobj_interface_write+0x6a>
   112ae:	4638      	mov	r0, r7
   112b0:	f005 ff8c 	bl	171cc <interface_socket_from_handle_get>
   112b4:	4603      	mov	r3, r0
   112b6:	2800      	cmp	r0, #0
   112b8:	d0c2      	beq.n	11240 <logobj_interface_write+0x60>
   112ba:	6840      	ldr	r0, [r0, #4]
   112bc:	2800      	cmp	r0, #0
   112be:	d0bf      	beq.n	11240 <logobj_interface_write+0x60>
   112c0:	f8c3 8004 	str.w	r8, [r3, #4]
   112c4:	e7df      	b.n	11286 <logobj_interface_write+0xa6>
   112c6:	2073      	movs	r0, #115	; 0x73
   112c8:	e7cf      	b.n	1126a <logobj_interface_write+0x8a>
   112ca:	2009      	movs	r0, #9
   112cc:	e7cd      	b.n	1126a <logobj_interface_write+0x8a>
   112ce:	2009      	movs	r0, #9
   112d0:	f7fe fb74 	bl	f9bc <bsd_os_errno_set>
   112d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   112d8:	e7b7      	b.n	1124a <logobj_interface_write+0x6a>
   112da:	bf00      	nop

000112dc <logobj_interface_setopt>:
   112dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   112de:	2901      	cmp	r1, #1
   112e0:	b085      	sub	sp, #20
   112e2:	d068      	beq.n	113b6 <logobj_interface_setopt+0xda>
   112e4:	461e      	mov	r6, r3
   112e6:	f240 2305 	movw	r3, #517	; 0x205
   112ea:	4299      	cmp	r1, r3
   112ec:	f040 8095 	bne.w	1141a <logobj_interface_setopt+0x13e>
   112f0:	4607      	mov	r7, r0
   112f2:	4615      	mov	r5, r2
   112f4:	f005 ff6a 	bl	171cc <interface_socket_from_handle_get>
   112f8:	4604      	mov	r4, r0
   112fa:	2800      	cmp	r0, #0
   112fc:	f000 80b2 	beq.w	11464 <logobj_interface_setopt+0x188>
   11300:	2d01      	cmp	r5, #1
   11302:	d019      	beq.n	11338 <logobj_interface_setopt+0x5c>
   11304:	2d02      	cmp	r5, #2
   11306:	d010      	beq.n	1132a <logobj_interface_setopt+0x4e>
   11308:	252a      	movs	r5, #42	; 0x2a
   1130a:	6803      	ldr	r3, [r0, #0]
   1130c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   11310:	6023      	str	r3, [r4, #0]
   11312:	6823      	ldr	r3, [r4, #0]
   11314:	4628      	mov	r0, r5
   11316:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1131a:	6023      	str	r3, [r4, #0]
   1131c:	f7fe fb4e 	bl	f9bc <bsd_os_errno_set>
   11320:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   11324:	4628      	mov	r0, r5
   11326:	b005      	add	sp, #20
   11328:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1132a:	b116      	cbz	r6, 11332 <logobj_interface_setopt+0x56>
   1132c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1132e:	2b01      	cmp	r3, #1
   11330:	d049      	beq.n	113c6 <logobj_interface_setopt+0xea>
   11332:	6823      	ldr	r3, [r4, #0]
   11334:	2516      	movs	r5, #22
   11336:	e7e9      	b.n	1130c <logobj_interface_setopt+0x30>
   11338:	2e00      	cmp	r6, #0
   1133a:	d0fa      	beq.n	11332 <logobj_interface_setopt+0x56>
   1133c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1133e:	2b04      	cmp	r3, #4
   11340:	d1f7      	bne.n	11332 <logobj_interface_setopt+0x56>
   11342:	2100      	movs	r1, #0
   11344:	a803      	add	r0, sp, #12
   11346:	f7ff fd51 	bl	10dec <rpc_logobj_client_request_alloc>
   1134a:	4605      	mov	r5, r0
   1134c:	2800      	cmp	r0, #0
   1134e:	d16a      	bne.n	11426 <logobj_interface_setopt+0x14a>
   11350:	9803      	ldr	r0, [sp, #12]
   11352:	2208      	movs	r2, #8
   11354:	4629      	mov	r1, r5
   11356:	300c      	adds	r0, #12
   11358:	f00a fd86 	bl	1be68 <memset>
   1135c:	9803      	ldr	r0, [sp, #12]
   1135e:	4631      	mov	r1, r6
   11360:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11362:	300c      	adds	r0, #12
   11364:	f00a fd56 	bl	1be14 <memcpy>
   11368:	2308      	movs	r3, #8
   1136a:	9803      	ldr	r0, [sp, #12]
   1136c:	f247 0102 	movw	r1, #28674	; 0x7002
   11370:	7203      	strb	r3, [r0, #8]
   11372:	7245      	strb	r5, [r0, #9]
   11374:	7285      	strb	r5, [r0, #10]
   11376:	72c5      	strb	r5, [r0, #11]
   11378:	6823      	ldr	r3, [r4, #0]
   1137a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1137e:	6023      	str	r3, [r4, #0]
   11380:	f7ff fd4c 	bl	10e1c <rpc_logobj_client_request_send>
   11384:	2800      	cmp	r0, #0
   11386:	d151      	bne.n	1142c <logobj_interface_setopt+0x150>
   11388:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1138c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11390:	4611      	mov	r1, r2
   11392:	4638      	mov	r0, r7
   11394:	f005 fea6 	bl	170e4 <interface_socket_wait>
   11398:	4605      	mov	r5, r0
   1139a:	2800      	cmp	r0, #0
   1139c:	d13b      	bne.n	11416 <logobj_interface_setopt+0x13a>
   1139e:	4638      	mov	r0, r7
   113a0:	f005 ff14 	bl	171cc <interface_socket_from_handle_get>
   113a4:	2800      	cmp	r0, #0
   113a6:	d04f      	beq.n	11448 <logobj_interface_setopt+0x16c>
   113a8:	6843      	ldr	r3, [r0, #4]
   113aa:	2b00      	cmp	r3, #0
   113ac:	d04c      	beq.n	11448 <logobj_interface_setopt+0x16c>
   113ae:	2200      	movs	r2, #0
   113b0:	461d      	mov	r5, r3
   113b2:	6042      	str	r2, [r0, #4]
   113b4:	e02f      	b.n	11416 <logobj_interface_setopt+0x13a>
   113b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   113b8:	9400      	str	r4, [sp, #0]
   113ba:	f005 ff2f 	bl	1721c <interface_socket_setopt>
   113be:	4605      	mov	r5, r0
   113c0:	4628      	mov	r0, r5
   113c2:	b005      	add	sp, #20
   113c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   113c6:	2100      	movs	r1, #0
   113c8:	a803      	add	r0, sp, #12
   113ca:	7835      	ldrb	r5, [r6, #0]
   113cc:	f7ff fd0e 	bl	10dec <rpc_logobj_client_request_alloc>
   113d0:	bb48      	cbnz	r0, 11426 <logobj_interface_setopt+0x14a>
   113d2:	2d01      	cmp	r5, #1
   113d4:	bf08      	it	eq
   113d6:	4b26      	ldreq	r3, [pc, #152]	; (11470 <logobj_interface_setopt+0x194>)
   113d8:	f04f 0204 	mov.w	r2, #4
   113dc:	bf08      	it	eq
   113de:	701d      	strbeq	r5, [r3, #0]
   113e0:	2300      	movs	r3, #0
   113e2:	9803      	ldr	r0, [sp, #12]
   113e4:	f247 0101 	movw	r1, #28673	; 0x7001
   113e8:	7243      	strb	r3, [r0, #9]
   113ea:	60c5      	str	r5, [r0, #12]
   113ec:	7283      	strb	r3, [r0, #10]
   113ee:	72c3      	strb	r3, [r0, #11]
   113f0:	7202      	strb	r2, [r0, #8]
   113f2:	6823      	ldr	r3, [r4, #0]
   113f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   113f8:	6023      	str	r3, [r4, #0]
   113fa:	f7ff fd0f 	bl	10e1c <rpc_logobj_client_request_send>
   113fe:	4606      	mov	r6, r0
   11400:	b9a0      	cbnz	r0, 1142c <logobj_interface_setopt+0x150>
   11402:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   11406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1140a:	4611      	mov	r1, r2
   1140c:	4638      	mov	r0, r7
   1140e:	f005 fe69 	bl	170e4 <interface_socket_wait>
   11412:	4605      	mov	r5, r0
   11414:	b180      	cbz	r0, 11438 <logobj_interface_setopt+0x15c>
   11416:	6823      	ldr	r3, [r4, #0]
   11418:	e778      	b.n	1130c <logobj_interface_setopt+0x30>
   1141a:	202a      	movs	r0, #42	; 0x2a
   1141c:	f7fe face 	bl	f9bc <bsd_os_errno_set>
   11420:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   11424:	e77e      	b.n	11324 <logobj_interface_setopt+0x48>
   11426:	6823      	ldr	r3, [r4, #0]
   11428:	250c      	movs	r5, #12
   1142a:	e76f      	b.n	1130c <logobj_interface_setopt+0x30>
   1142c:	9803      	ldr	r0, [sp, #12]
   1142e:	f7ff fd0b 	bl	10e48 <rpc_logobj_client_message_free>
   11432:	2505      	movs	r5, #5
   11434:	6823      	ldr	r3, [r4, #0]
   11436:	e769      	b.n	1130c <logobj_interface_setopt+0x30>
   11438:	4638      	mov	r0, r7
   1143a:	f005 fec7 	bl	171cc <interface_socket_from_handle_get>
   1143e:	b140      	cbz	r0, 11452 <logobj_interface_setopt+0x176>
   11440:	6845      	ldr	r5, [r0, #4]
   11442:	b135      	cbz	r5, 11452 <logobj_interface_setopt+0x176>
   11444:	6046      	str	r6, [r0, #4]
   11446:	e7e6      	b.n	11416 <logobj_interface_setopt+0x13a>
   11448:	4631      	mov	r1, r6
   1144a:	2204      	movs	r2, #4
   1144c:	4809      	ldr	r0, [pc, #36]	; (11474 <logobj_interface_setopt+0x198>)
   1144e:	f00a fce1 	bl	1be14 <memcpy>
   11452:	6823      	ldr	r3, [r4, #0]
   11454:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   11458:	6023      	str	r3, [r4, #0]
   1145a:	6823      	ldr	r3, [r4, #0]
   1145c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   11460:	6023      	str	r3, [r4, #0]
   11462:	e75f      	b.n	11324 <logobj_interface_setopt+0x48>
   11464:	2009      	movs	r0, #9
   11466:	f7fe faa9 	bl	f9bc <bsd_os_errno_set>
   1146a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1146e:	e759      	b.n	11324 <logobj_interface_setopt+0x48>
   11470:	2002334f 	.word	0x2002334f
   11474:	20020484 	.word	0x20020484

00011478 <logobj_interface_getopt>:
   11478:	b5f0      	push	{r4, r5, r6, r7, lr}
   1147a:	2901      	cmp	r1, #1
   1147c:	b083      	sub	sp, #12
   1147e:	9e08      	ldr	r6, [sp, #32]
   11480:	d030      	beq.n	114e4 <logobj_interface_getopt+0x6c>
   11482:	461f      	mov	r7, r3
   11484:	f240 2305 	movw	r3, #517	; 0x205
   11488:	4299      	cmp	r1, r3
   1148a:	d134      	bne.n	114f6 <logobj_interface_getopt+0x7e>
   1148c:	4615      	mov	r5, r2
   1148e:	f005 fe9d 	bl	171cc <interface_socket_from_handle_get>
   11492:	2800      	cmp	r0, #0
   11494:	d037      	beq.n	11506 <logobj_interface_getopt+0x8e>
   11496:	2d01      	cmp	r5, #1
   11498:	d015      	beq.n	114c6 <logobj_interface_getopt+0x4e>
   1149a:	2d02      	cmp	r5, #2
   1149c:	d10b      	bne.n	114b6 <logobj_interface_getopt+0x3e>
   1149e:	b387      	cbz	r7, 11502 <logobj_interface_getopt+0x8a>
   114a0:	6833      	ldr	r3, [r6, #0]
   114a2:	b373      	cbz	r3, 11502 <logobj_interface_getopt+0x8a>
   114a4:	2300      	movs	r3, #0
   114a6:	2201      	movs	r2, #1
   114a8:	4618      	mov	r0, r3
   114aa:	491a      	ldr	r1, [pc, #104]	; (11514 <logobj_interface_getopt+0x9c>)
   114ac:	7809      	ldrb	r1, [r1, #0]
   114ae:	7039      	strb	r1, [r7, #0]
   114b0:	6032      	str	r2, [r6, #0]
   114b2:	b003      	add	sp, #12
   114b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   114b6:	2009      	movs	r0, #9
   114b8:	f7fe fa80 	bl	f9bc <bsd_os_errno_set>
   114bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   114c0:	4618      	mov	r0, r3
   114c2:	b003      	add	sp, #12
   114c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   114c6:	b1e7      	cbz	r7, 11502 <logobj_interface_getopt+0x8a>
   114c8:	6833      	ldr	r3, [r6, #0]
   114ca:	2b03      	cmp	r3, #3
   114cc:	d919      	bls.n	11502 <logobj_interface_getopt+0x8a>
   114ce:	4638      	mov	r0, r7
   114d0:	2204      	movs	r2, #4
   114d2:	4911      	ldr	r1, [pc, #68]	; (11518 <logobj_interface_getopt+0xa0>)
   114d4:	f00a fc9e 	bl	1be14 <memcpy>
   114d8:	2300      	movs	r3, #0
   114da:	2204      	movs	r2, #4
   114dc:	4618      	mov	r0, r3
   114de:	6032      	str	r2, [r6, #0]
   114e0:	b003      	add	sp, #12
   114e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   114e4:	9600      	str	r6, [sp, #0]
   114e6:	f005 fecf 	bl	17288 <interface_socket_getopt>
   114ea:	4603      	mov	r3, r0
   114ec:	2800      	cmp	r0, #0
   114ee:	d1e3      	bne.n	114b8 <logobj_interface_getopt+0x40>
   114f0:	4618      	mov	r0, r3
   114f2:	b003      	add	sp, #12
   114f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   114f6:	202a      	movs	r0, #42	; 0x2a
   114f8:	f7fe fa60 	bl	f9bc <bsd_os_errno_set>
   114fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11500:	e7de      	b.n	114c0 <logobj_interface_getopt+0x48>
   11502:	2016      	movs	r0, #22
   11504:	e7d8      	b.n	114b8 <logobj_interface_getopt+0x40>
   11506:	2009      	movs	r0, #9
   11508:	f7fe fa58 	bl	f9bc <bsd_os_errno_set>
   1150c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11510:	e7d6      	b.n	114c0 <logobj_interface_getopt+0x48>
   11512:	bf00      	nop
   11514:	20023350 	.word	0x20023350
   11518:	20020484 	.word	0x20020484

0001151c <logobj_interface_close>:
   1151c:	b510      	push	{r4, lr}
   1151e:	4604      	mov	r4, r0
   11520:	f005 fe54 	bl	171cc <interface_socket_from_handle_get>
   11524:	b138      	cbz	r0, 11536 <logobj_interface_close+0x1a>
   11526:	4620      	mov	r0, r4
   11528:	f005 fd8e 	bl	17048 <interface_socket_free>
   1152c:	2300      	movs	r3, #0
   1152e:	4a05      	ldr	r2, [pc, #20]	; (11544 <logobj_interface_close+0x28>)
   11530:	4618      	mov	r0, r3
   11532:	6013      	str	r3, [r2, #0]
   11534:	bd10      	pop	{r4, pc}
   11536:	2009      	movs	r0, #9
   11538:	f7fe fa40 	bl	f9bc <bsd_os_errno_set>
   1153c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11540:	bd10      	pop	{r4, pc}
   11542:	bf00      	nop
   11544:	20020488 	.word	0x20020488

00011548 <packet_free_cb>:
   11548:	6800      	ldr	r0, [r0, #0]
   1154a:	f004 b9dd 	b.w	15908 <rpc_at_client_data_free>
   1154e:	bf00      	nop

00011550 <at_interface_write>:
   11550:	b5f0      	push	{r4, r5, r6, r7, lr}
   11552:	b083      	sub	sp, #12
   11554:	460f      	mov	r7, r1
   11556:	4615      	mov	r5, r2
   11558:	4606      	mov	r6, r0
   1155a:	f005 fe37 	bl	171cc <interface_socket_from_handle_get>
   1155e:	2800      	cmp	r0, #0
   11560:	d047      	beq.n	115f2 <at_interface_write+0xa2>
   11562:	6803      	ldr	r3, [r0, #0]
   11564:	4604      	mov	r4, r0
   11566:	039b      	lsls	r3, r3, #14
   11568:	d543      	bpl.n	115f2 <at_interface_write+0xa2>
   1156a:	6803      	ldr	r3, [r0, #0]
   1156c:	4629      	mov	r1, r5
   1156e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   11572:	6003      	str	r3, [r0, #0]
   11574:	6803      	ldr	r3, [r0, #0]
   11576:	a801      	add	r0, sp, #4
   11578:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   1157c:	6023      	str	r3, [r4, #0]
   1157e:	f004 f999 	bl	158b4 <rpc_at_client_request_alloc>
   11582:	bba0      	cbnz	r0, 115ee <at_interface_write+0x9e>
   11584:	2204      	movs	r2, #4
   11586:	9b01      	ldr	r3, [sp, #4]
   11588:	721a      	strb	r2, [r3, #8]
   1158a:	7258      	strb	r0, [r3, #9]
   1158c:	7298      	strb	r0, [r3, #10]
   1158e:	72d8      	strb	r0, [r3, #11]
   11590:	60de      	str	r6, [r3, #12]
   11592:	b985      	cbnz	r5, 115b6 <at_interface_write+0x66>
   11594:	4618      	mov	r0, r3
   11596:	2101      	movs	r1, #1
   11598:	f004 f9a0 	bl	158dc <rpc_at_client_request_send>
   1159c:	b9d0      	cbnz	r0, 115d4 <at_interface_write+0x84>
   1159e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   115a2:	4630      	mov	r0, r6
   115a4:	4611      	mov	r1, r2
   115a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   115aa:	f005 fd9b 	bl	170e4 <interface_socket_wait>
   115ae:	b9a8      	cbnz	r0, 115dc <at_interface_write+0x8c>
   115b0:	4628      	mov	r0, r5
   115b2:	b003      	add	sp, #12
   115b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   115b6:	4639      	mov	r1, r7
   115b8:	6818      	ldr	r0, [r3, #0]
   115ba:	462a      	mov	r2, r5
   115bc:	f00a fc2a 	bl	1be14 <memcpy>
   115c0:	2101      	movs	r1, #1
   115c2:	9801      	ldr	r0, [sp, #4]
   115c4:	f004 f98a 	bl	158dc <rpc_at_client_request_send>
   115c8:	2800      	cmp	r0, #0
   115ca:	d0e8      	beq.n	1159e <at_interface_write+0x4e>
   115cc:	9b01      	ldr	r3, [sp, #4]
   115ce:	6818      	ldr	r0, [r3, #0]
   115d0:	f004 f99a 	bl	15908 <rpc_at_client_data_free>
   115d4:	9801      	ldr	r0, [sp, #4]
   115d6:	f004 f98f 	bl	158f8 <rpc_at_client_message_free>
   115da:	2023      	movs	r0, #35	; 0x23
   115dc:	6823      	ldr	r3, [r4, #0]
   115de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   115e2:	6023      	str	r3, [r4, #0]
   115e4:	f7fe f9ea 	bl	f9bc <bsd_os_errno_set>
   115e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   115ec:	e7e1      	b.n	115b2 <at_interface_write+0x62>
   115ee:	200c      	movs	r0, #12
   115f0:	e7f4      	b.n	115dc <at_interface_write+0x8c>
   115f2:	2016      	movs	r0, #22
   115f4:	e7f6      	b.n	115e4 <at_interface_write+0x94>
   115f6:	bf00      	nop

000115f8 <at_interface_init>:
   115f8:	f004 b956 	b.w	158a8 <rpc_at_client_init>

000115fc <at_interface_open>:
   115fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11600:	2500      	movs	r5, #0
   11602:	b082      	sub	sp, #8
   11604:	ab02      	add	r3, sp, #8
   11606:	f843 5d08 	str.w	r5, [r3, #-8]!
   1160a:	4680      	mov	r8, r0
   1160c:	460f      	mov	r7, r1
   1160e:	4618      	mov	r0, r3
   11610:	4616      	mov	r6, r2
   11612:	2102      	movs	r1, #2
   11614:	4a1d      	ldr	r2, [pc, #116]	; (1168c <at_interface_open+0x90>)
   11616:	f005 fcb9 	bl	16f8c <interface_socket_allocate>
   1161a:	9b00      	ldr	r3, [sp, #0]
   1161c:	4604      	mov	r4, r0
   1161e:	b30b      	cbz	r3, 11664 <at_interface_open+0x68>
   11620:	e9c3 8703 	strd	r8, r7, [r3, #12]
   11624:	615e      	str	r6, [r3, #20]
   11626:	4629      	mov	r1, r5
   11628:	a801      	add	r0, sp, #4
   1162a:	f004 f943 	bl	158b4 <rpc_at_client_request_alloc>
   1162e:	b9e8      	cbnz	r0, 1166c <at_interface_open+0x70>
   11630:	2204      	movs	r2, #4
   11632:	9b01      	ldr	r3, [sp, #4]
   11634:	2105      	movs	r1, #5
   11636:	7258      	strb	r0, [r3, #9]
   11638:	7298      	strb	r0, [r3, #10]
   1163a:	72d8      	strb	r0, [r3, #11]
   1163c:	721a      	strb	r2, [r3, #8]
   1163e:	60dc      	str	r4, [r3, #12]
   11640:	4618      	mov	r0, r3
   11642:	f004 f94b 	bl	158dc <rpc_at_client_request_send>
   11646:	b9d8      	cbnz	r0, 11680 <at_interface_open+0x84>
   11648:	2202      	movs	r2, #2
   1164a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1164e:	4611      	mov	r1, r2
   11650:	4620      	mov	r0, r4
   11652:	f005 fd47 	bl	170e4 <interface_socket_wait>
   11656:	4605      	mov	r5, r0
   11658:	b948      	cbnz	r0, 1166e <at_interface_open+0x72>
   1165a:	9a00      	ldr	r2, [sp, #0]
   1165c:	6813      	ldr	r3, [r2, #0]
   1165e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   11662:	6013      	str	r3, [r2, #0]
   11664:	4620      	mov	r0, r4
   11666:	b002      	add	sp, #8
   11668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1166c:	250c      	movs	r5, #12
   1166e:	4620      	mov	r0, r4
   11670:	f005 fcea 	bl	17048 <interface_socket_free>
   11674:	4628      	mov	r0, r5
   11676:	f7fe f9a1 	bl	f9bc <bsd_os_errno_set>
   1167a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1167e:	e7f1      	b.n	11664 <at_interface_open+0x68>
   11680:	9801      	ldr	r0, [sp, #4]
   11682:	f004 f939 	bl	158f8 <rpc_at_client_message_free>
   11686:	2523      	movs	r5, #35	; 0x23
   11688:	e7f1      	b.n	1166e <at_interface_open+0x72>
   1168a:	bf00      	nop
   1168c:	00011549 	.word	0x00011549

00011690 <at_interface_close>:
   11690:	b5f0      	push	{r4, r5, r6, r7, lr}
   11692:	b083      	sub	sp, #12
   11694:	4606      	mov	r6, r0
   11696:	f005 fd99 	bl	171cc <interface_socket_from_handle_get>
   1169a:	2800      	cmp	r0, #0
   1169c:	d03d      	beq.n	1171a <at_interface_close+0x8a>
   1169e:	230d      	movs	r3, #13
   116a0:	6807      	ldr	r7, [r0, #0]
   116a2:	6003      	str	r3, [r0, #0]
   116a4:	6803      	ldr	r3, [r0, #0]
   116a6:	4604      	mov	r4, r0
   116a8:	039b      	lsls	r3, r3, #14
   116aa:	d41f      	bmi.n	116ec <at_interface_close+0x5c>
   116ac:	2100      	movs	r1, #0
   116ae:	a801      	add	r0, sp, #4
   116b0:	f004 f900 	bl	158b4 <rpc_at_client_request_alloc>
   116b4:	bb20      	cbnz	r0, 11700 <at_interface_close+0x70>
   116b6:	2204      	movs	r2, #4
   116b8:	9b01      	ldr	r3, [sp, #4]
   116ba:	2106      	movs	r1, #6
   116bc:	7258      	strb	r0, [r3, #9]
   116be:	7298      	strb	r0, [r3, #10]
   116c0:	72d8      	strb	r0, [r3, #11]
   116c2:	721a      	strb	r2, [r3, #8]
   116c4:	60de      	str	r6, [r3, #12]
   116c6:	4618      	mov	r0, r3
   116c8:	f004 f908 	bl	158dc <rpc_at_client_request_send>
   116cc:	b9d0      	cbnz	r0, 11704 <at_interface_close+0x74>
   116ce:	220e      	movs	r2, #14
   116d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   116d4:	4611      	mov	r1, r2
   116d6:	4630      	mov	r0, r6
   116d8:	f005 fd04 	bl	170e4 <interface_socket_wait>
   116dc:	4605      	mov	r5, r0
   116de:	b9a8      	cbnz	r0, 1170c <at_interface_close+0x7c>
   116e0:	4630      	mov	r0, r6
   116e2:	f005 fcb1 	bl	17048 <interface_socket_free>
   116e6:	4628      	mov	r0, r5
   116e8:	b003      	add	sp, #12
   116ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   116ec:	6803      	ldr	r3, [r0, #0]
   116ee:	2100      	movs	r1, #0
   116f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   116f4:	6003      	str	r3, [r0, #0]
   116f6:	a801      	add	r0, sp, #4
   116f8:	f004 f8dc 	bl	158b4 <rpc_at_client_request_alloc>
   116fc:	2800      	cmp	r0, #0
   116fe:	d0da      	beq.n	116b6 <at_interface_close+0x26>
   11700:	250c      	movs	r5, #12
   11702:	e003      	b.n	1170c <at_interface_close+0x7c>
   11704:	9801      	ldr	r0, [sp, #4]
   11706:	f004 f8f7 	bl	158f8 <rpc_at_client_message_free>
   1170a:	2523      	movs	r5, #35	; 0x23
   1170c:	6027      	str	r7, [r4, #0]
   1170e:	4628      	mov	r0, r5
   11710:	f7fe f954 	bl	f9bc <bsd_os_errno_set>
   11714:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   11718:	e7e5      	b.n	116e6 <at_interface_close+0x56>
   1171a:	2516      	movs	r5, #22
   1171c:	e7f7      	b.n	1170e <at_interface_close+0x7e>
   1171e:	bf00      	nop

00011720 <at_interface_read>:
   11720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11724:	b084      	sub	sp, #16
   11726:	4688      	mov	r8, r1
   11728:	4615      	mov	r5, r2
   1172a:	461e      	mov	r6, r3
   1172c:	4607      	mov	r7, r0
   1172e:	f005 fd4d 	bl	171cc <interface_socket_from_handle_get>
   11732:	2800      	cmp	r0, #0
   11734:	d049      	beq.n	117ca <at_interface_read+0xaa>
   11736:	2300      	movs	r3, #0
   11738:	e9cd 8500 	strd	r8, r5, [sp]
   1173c:	f016 0502 	ands.w	r5, r6, #2
   11740:	4604      	mov	r4, r0
   11742:	e9cd 3302 	strd	r3, r3, [sp, #8]
   11746:	d00e      	beq.n	11766 <at_interface_read+0x46>
   11748:	e01e      	b.n	11788 <at_interface_read+0x68>
   1174a:	2d00      	cmp	r5, #0
   1174c:	d133      	bne.n	117b6 <at_interface_read+0x96>
   1174e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   11752:	6a23      	ldr	r3, [r4, #32]
   11754:	4611      	mov	r1, r2
   11756:	2b00      	cmp	r3, #0
   11758:	bf08      	it	eq
   1175a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   1175e:	4638      	mov	r0, r7
   11760:	f005 fcc0 	bl	170e4 <interface_socket_wait>
   11764:	4605      	mov	r5, r0
   11766:	6823      	ldr	r3, [r4, #0]
   11768:	69e0      	ldr	r0, [r4, #28]
   1176a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1176e:	6023      	str	r3, [r4, #0]
   11770:	6803      	ldr	r3, [r0, #0]
   11772:	4632      	mov	r2, r6
   11774:	689b      	ldr	r3, [r3, #8]
   11776:	4669      	mov	r1, sp
   11778:	4798      	blx	r3
   1177a:	f1b0 0800 	subs.w	r8, r0, #0
   1177e:	dbe4      	blt.n	1174a <at_interface_read+0x2a>
   11780:	4640      	mov	r0, r8
   11782:	b004      	add	sp, #16
   11784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11788:	6803      	ldr	r3, [r0, #0]
   1178a:	69c0      	ldr	r0, [r0, #28]
   1178c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   11790:	6023      	str	r3, [r4, #0]
   11792:	6803      	ldr	r3, [r0, #0]
   11794:	4632      	mov	r2, r6
   11796:	689b      	ldr	r3, [r3, #8]
   11798:	4669      	mov	r1, sp
   1179a:	4798      	blx	r3
   1179c:	f1b0 0800 	subs.w	r8, r0, #0
   117a0:	daee      	bge.n	11780 <at_interface_read+0x60>
   117a2:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   117a6:	d1eb      	bne.n	11780 <at_interface_read+0x60>
   117a8:	2023      	movs	r0, #35	; 0x23
   117aa:	f7fe f907 	bl	f9bc <bsd_os_errno_set>
   117ae:	4640      	mov	r0, r8
   117b0:	b004      	add	sp, #16
   117b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   117b6:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   117ba:	d1e1      	bne.n	11780 <at_interface_read+0x60>
   117bc:	4628      	mov	r0, r5
   117be:	f7fe f8fd 	bl	f9bc <bsd_os_errno_set>
   117c2:	4640      	mov	r0, r8
   117c4:	b004      	add	sp, #16
   117c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   117ca:	2016      	movs	r0, #22
   117cc:	f7fe f8f6 	bl	f9bc <bsd_os_errno_set>
   117d0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   117d4:	e7d4      	b.n	11780 <at_interface_read+0x60>
   117d6:	bf00      	nop

000117d8 <at_interface_getopt>:
   117d8:	f005 bd56 	b.w	17288 <interface_socket_getopt>

000117dc <at_interface_setopt>:
   117dc:	f005 bd1e 	b.w	1721c <interface_socket_setopt>

000117e0 <rpc_at_event_handler>:
   117e0:	b570      	push	{r4, r5, r6, lr}
   117e2:	4606      	mov	r6, r0
   117e4:	b084      	sub	sp, #16
   117e6:	68c0      	ldr	r0, [r0, #12]
   117e8:	460d      	mov	r5, r1
   117ea:	f005 fcef 	bl	171cc <interface_socket_from_handle_get>
   117ee:	4604      	mov	r4, r0
   117f0:	b348      	cbz	r0, 11846 <rpc_at_event_handler+0x66>
   117f2:	6803      	ldr	r3, [r0, #0]
   117f4:	b29b      	uxth	r3, r3
   117f6:	2b01      	cmp	r3, #1
   117f8:	d01f      	beq.n	1183a <rpc_at_event_handler+0x5a>
   117fa:	6803      	ldr	r3, [r0, #0]
   117fc:	b29b      	uxth	r3, r3
   117fe:	2b0d      	cmp	r3, #13
   11800:	d029      	beq.n	11856 <rpc_at_event_handler+0x76>
   11802:	6803      	ldr	r3, [r0, #0]
   11804:	b29b      	uxth	r3, r3
   11806:	2b02      	cmp	r3, #2
   11808:	d02d      	beq.n	11866 <rpc_at_event_handler+0x86>
   1180a:	3d03      	subs	r5, #3
   1180c:	2d01      	cmp	r5, #1
   1180e:	d817      	bhi.n	11840 <rpc_at_event_handler+0x60>
   11810:	2500      	movs	r5, #0
   11812:	6873      	ldr	r3, [r6, #4]
   11814:	6832      	ldr	r2, [r6, #0]
   11816:	e9cd 5502 	strd	r5, r5, [sp, #8]
   1181a:	e9cd 2300 	strd	r2, r3, [sp]
   1181e:	69e0      	ldr	r0, [r4, #28]
   11820:	4669      	mov	r1, sp
   11822:	6803      	ldr	r3, [r0, #0]
   11824:	685b      	ldr	r3, [r3, #4]
   11826:	4798      	blx	r3
   11828:	3001      	adds	r0, #1
   1182a:	d019      	beq.n	11860 <rpc_at_event_handler+0x80>
   1182c:	4628      	mov	r0, r5
   1182e:	6823      	ldr	r3, [r4, #0]
   11830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   11834:	6023      	str	r3, [r4, #0]
   11836:	b004      	add	sp, #16
   11838:	bd70      	pop	{r4, r5, r6, pc}
   1183a:	2d02      	cmp	r5, #2
   1183c:	d1e5      	bne.n	1180a <rpc_at_event_handler+0x2a>
   1183e:	6005      	str	r5, [r0, #0]
   11840:	2000      	movs	r0, #0
   11842:	b004      	add	sp, #16
   11844:	bd70      	pop	{r4, r5, r6, pc}
   11846:	6830      	ldr	r0, [r6, #0]
   11848:	2800      	cmp	r0, #0
   1184a:	d0f9      	beq.n	11840 <rpc_at_event_handler+0x60>
   1184c:	f004 f85c 	bl	15908 <rpc_at_client_data_free>
   11850:	4620      	mov	r0, r4
   11852:	b004      	add	sp, #16
   11854:	bd70      	pop	{r4, r5, r6, pc}
   11856:	2d02      	cmp	r5, #2
   11858:	d1d7      	bne.n	1180a <rpc_at_event_handler+0x2a>
   1185a:	230e      	movs	r3, #14
   1185c:	6003      	str	r3, [r0, #0]
   1185e:	e7ef      	b.n	11840 <rpc_at_event_handler+0x60>
   11860:	2002      	movs	r0, #2
   11862:	b004      	add	sp, #16
   11864:	bd70      	pop	{r4, r5, r6, pc}
   11866:	6803      	ldr	r3, [r0, #0]
   11868:	029b      	lsls	r3, r3, #10
   1186a:	d5ce      	bpl.n	1180a <rpc_at_event_handler+0x2a>
   1186c:	2d02      	cmp	r5, #2
   1186e:	d1cc      	bne.n	1180a <rpc_at_event_handler+0x2a>
   11870:	6803      	ldr	r3, [r0, #0]
   11872:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   11876:	6003      	str	r3, [r0, #0]
   11878:	6803      	ldr	r3, [r0, #0]
   1187a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1187e:	6003      	str	r3, [r0, #0]
   11880:	e7de      	b.n	11840 <rpc_at_event_handler+0x60>
   11882:	bf00      	nop

00011884 <dfu_client_event_handler>:
   11884:	f850 1b08 	ldr.w	r1, [r0], #8
   11888:	0c09      	lsrs	r1, r1, #16
   1188a:	f001 b92f 	b.w	12aec <rpc_dfu_event_handler>
   1188e:	bf00      	nop

00011890 <rpc_dfu_client_init>:
   11890:	4801      	ldr	r0, [pc, #4]	; (11898 <rpc_dfu_client_init+0x8>)
   11892:	f005 bdcb 	b.w	1742c <rpc_client_register>
   11896:	bf00      	nop
   11898:	0001db90 	.word	0x0001db90

0001189c <rpc_dfu_client_request_alloc>:
   1189c:	2300      	movs	r3, #0
   1189e:	b510      	push	{r4, lr}
   118a0:	b082      	sub	sp, #8
   118a2:	9301      	str	r3, [sp, #4]
   118a4:	b158      	cbz	r0, 118be <rpc_dfu_client_request_alloc+0x22>
   118a6:	4604      	mov	r4, r0
   118a8:	aa01      	add	r2, sp, #4
   118aa:	2006      	movs	r0, #6
   118ac:	f005 fff6 	bl	1789c <rpc_message_alloc>
   118b0:	b918      	cbnz	r0, 118ba <rpc_dfu_client_request_alloc+0x1e>
   118b2:	9b01      	ldr	r3, [sp, #4]
   118b4:	b10b      	cbz	r3, 118ba <rpc_dfu_client_request_alloc+0x1e>
   118b6:	3308      	adds	r3, #8
   118b8:	6023      	str	r3, [r4, #0]
   118ba:	b002      	add	sp, #8
   118bc:	bd10      	pop	{r4, pc}
   118be:	2007      	movs	r0, #7
   118c0:	b002      	add	sp, #8
   118c2:	bd10      	pop	{r4, pc}

000118c4 <rpc_dfu_client_request_send>:
   118c4:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   118c8:	d10b      	bne.n	118e2 <rpc_dfu_client_request_send+0x1e>
   118ca:	b160      	cbz	r0, 118e6 <rpc_dfu_client_request_send+0x22>
   118cc:	4603      	mov	r3, r0
   118ce:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   118d2:	2006      	movs	r0, #6
   118d4:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   118d8:	f843 1d08 	str.w	r1, [r3, #-8]!
   118dc:	4619      	mov	r1, r3
   118de:	f005 bfc5 	b.w	1786c <rpc_message_send>
   118e2:	200f      	movs	r0, #15
   118e4:	4770      	bx	lr
   118e6:	2007      	movs	r0, #7
   118e8:	4770      	bx	lr
   118ea:	bf00      	nop

000118ec <rpc_dfu_client_message_free>:
   118ec:	b120      	cbz	r0, 118f8 <rpc_dfu_client_message_free+0xc>
   118ee:	f1a0 0108 	sub.w	r1, r0, #8
   118f2:	2006      	movs	r0, #6
   118f4:	f006 b804 	b.w	17900 <rpc_message_free>
   118f8:	2007      	movs	r0, #7
   118fa:	4770      	bx	lr

000118fc <rpc_dfu_client_data_free>:
   118fc:	b118      	cbz	r0, 11906 <rpc_dfu_client_data_free+0xa>
   118fe:	4601      	mov	r1, r0
   11900:	2006      	movs	r0, #6
   11902:	f006 b90f 	b.w	17b24 <rpc_message_data_free>
   11906:	2007      	movs	r0, #7
   11908:	4770      	bx	lr
   1190a:	bf00      	nop

0001190c <mem_free>:
   1190c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11910:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 119e0 <mem_free+0xd4>
   11914:	b083      	sub	sp, #12
   11916:	9000      	str	r0, [sp, #0]
   11918:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   1191c:	f8dc 3008 	ldr.w	r3, [ip, #8]
   11920:	b12b      	cbz	r3, 1192e <mem_free+0x22>
   11922:	f8dc 2000 	ldr.w	r2, [ip]
   11926:	9c00      	ldr	r4, [sp, #0]
   11928:	7810      	ldrb	r0, [r2, #0]
   1192a:	42a0      	cmp	r0, r4
   1192c:	d006      	beq.n	1193c <mem_free+0x30>
   1192e:	f10c 0c0c 	add.w	ip, ip, #12
   11932:	45e3      	cmp	fp, ip
   11934:	d1f2      	bne.n	1191c <mem_free+0x10>
   11936:	b003      	add	sp, #12
   11938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1193c:	f8dc a004 	ldr.w	sl, [ip, #4]
   11940:	eb03 080a 	add.w	r8, r3, sl
   11944:	45c2      	cmp	sl, r8
   11946:	d2f2      	bcs.n	1192e <mem_free+0x22>
   11948:	6853      	ldr	r3, [r2, #4]
   1194a:	f8cd c004 	str.w	ip, [sp, #4]
   1194e:	46d6      	mov	lr, sl
   11950:	469c      	mov	ip, r3
   11952:	f8d2 9010 	ldr.w	r9, [r2, #16]
   11956:	8997      	ldrh	r7, [r2, #12]
   11958:	ebae 000a 	sub.w	r0, lr, sl
   1195c:	b3df      	cbz	r7, 119d6 <mem_free+0xca>
   1195e:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   11962:	4290      	cmp	r0, r2
   11964:	d31c      	bcc.n	119a0 <mem_free+0x94>
   11966:	4665      	mov	r5, ip
   11968:	2400      	movs	r4, #0
   1196a:	f109 0304 	add.w	r3, r9, #4
   1196e:	e003      	b.n	11978 <mem_free+0x6c>
   11970:	885a      	ldrh	r2, [r3, #2]
   11972:	3304      	adds	r3, #4
   11974:	4282      	cmp	r2, r0
   11976:	d815      	bhi.n	119a4 <mem_free+0x98>
   11978:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   1197c:	3401      	adds	r4, #1
   1197e:	42a7      	cmp	r7, r4
   11980:	fb02 5506 	mla	r5, r2, r6, r5
   11984:	eba0 0002 	sub.w	r0, r0, r2
   11988:	461e      	mov	r6, r3
   1198a:	d1f1      	bne.n	11970 <mem_free+0x64>
   1198c:	2000      	movs	r0, #0
   1198e:	4281      	cmp	r1, r0
   11990:	d00d      	beq.n	119ae <mem_free+0xa2>
   11992:	f10e 0e01 	add.w	lr, lr, #1
   11996:	45f0      	cmp	r8, lr
   11998:	d1de      	bne.n	11958 <mem_free+0x4c>
   1199a:	f8dd c004 	ldr.w	ip, [sp, #4]
   1199e:	e7c6      	b.n	1192e <mem_free+0x22>
   119a0:	4665      	mov	r5, ip
   119a2:	464e      	mov	r6, r9
   119a4:	8833      	ldrh	r3, [r6, #0]
   119a6:	fb00 5003 	mla	r0, r0, r3, r5
   119aa:	4281      	cmp	r1, r0
   119ac:	d1f1      	bne.n	11992 <mem_free+0x86>
   119ae:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   119b2:	f8dd c004 	ldr.w	ip, [sp, #4]
   119b6:	d0ba      	beq.n	1192e <mem_free+0x22>
   119b8:	2301      	movs	r3, #1
   119ba:	4a08      	ldr	r2, [pc, #32]	; (119dc <mem_free+0xd0>)
   119bc:	ea4f 115e 	mov.w	r1, lr, lsr #5
   119c0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   119c4:	f00e 0e1f 	and.w	lr, lr, #31
   119c8:	fa03 fe0e 	lsl.w	lr, r3, lr
   119cc:	ea4e 0000 	orr.w	r0, lr, r0
   119d0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   119d4:	e7af      	b.n	11936 <mem_free+0x2a>
   119d6:	4638      	mov	r0, r7
   119d8:	e7d9      	b.n	1198e <mem_free+0x82>
   119da:	bf00      	nop
   119dc:	2002048c 	.word	0x2002048c
   119e0:	200204d0 	.word	0x200204d0

000119e4 <mem_alloc.constprop.5>:
   119e4:	2800      	cmp	r0, #0
   119e6:	d050      	beq.n	11a8a <mem_alloc.constprop.5+0xa6>
   119e8:	4b6d      	ldr	r3, [pc, #436]	; (11ba0 <mem_alloc.constprop.5+0x1bc>)
   119ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   119ee:	4290      	cmp	r0, r2
   119f0:	d84b      	bhi.n	11a8a <mem_alloc.constprop.5+0xa6>
   119f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119f6:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   119fa:	b083      	sub	sp, #12
   119fc:	f1bb 0f00 	cmp.w	fp, #0
   11a00:	d054      	beq.n	11aac <mem_alloc.constprop.5+0xc8>
   11a02:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   11a06:	4691      	mov	r9, r2
   11a08:	2600      	movs	r6, #0
   11a0a:	f04f 0812 	mov.w	r8, #18
   11a0e:	4f65      	ldr	r7, [pc, #404]	; (11ba4 <mem_alloc.constprop.5+0x1c0>)
   11a10:	9201      	str	r2, [sp, #4]
   11a12:	f10b 0e11 	add.w	lr, fp, #17
   11a16:	eb06 0209 	add.w	r2, r6, r9
   11a1a:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   11a1e:	3201      	adds	r2, #1
   11a20:	0852      	lsrs	r2, r2, #1
   11a22:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   11a26:	f102 0112 	add.w	r1, r2, #18
   11a2a:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   11a2e:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   11a32:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   11a36:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   11a3a:	f8dc c004 	ldr.w	ip, [ip, #4]
   11a3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   11a42:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   11a46:	f8da a010 	ldr.w	sl, [sl, #16]
   11a4a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   11a4e:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   11a52:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   11a56:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   11a5a:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   11a5e:	6849      	ldr	r1, [r1, #4]
   11a60:	692d      	ldr	r5, [r5, #16]
   11a62:	6924      	ldr	r4, [r4, #16]
   11a64:	f8dc c004 	ldr.w	ip, [ip, #4]
   11a68:	4550      	cmp	r0, sl
   11a6a:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   11a6e:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   11a72:	d915      	bls.n	11aa0 <mem_alloc.constprop.5+0xbc>
   11a74:	4288      	cmp	r0, r1
   11a76:	d211      	bcs.n	11a9c <mem_alloc.constprop.5+0xb8>
   11a78:	42a8      	cmp	r0, r5
   11a7a:	d908      	bls.n	11a8e <mem_alloc.constprop.5+0xaa>
   11a7c:	1c56      	adds	r6, r2, #1
   11a7e:	45b1      	cmp	r9, r6
   11a80:	f0c0 8087 	bcc.w	11b92 <mem_alloc.constprop.5+0x1ae>
   11a84:	f102 0813 	add.w	r8, r2, #19
   11a88:	e7c5      	b.n	11a16 <mem_alloc.constprop.5+0x32>
   11a8a:	2000      	movs	r0, #0
   11a8c:	4770      	bx	lr
   11a8e:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   11a92:	454e      	cmp	r6, r9
   11a94:	d87d      	bhi.n	11b92 <mem_alloc.constprop.5+0x1ae>
   11a96:	f102 0e11 	add.w	lr, r2, #17
   11a9a:	e7bc      	b.n	11a16 <mem_alloc.constprop.5+0x32>
   11a9c:	f109 0601 	add.w	r6, r9, #1
   11aa0:	45b3      	cmp	fp, r6
   11aa2:	d007      	beq.n	11ab4 <mem_alloc.constprop.5+0xd0>
   11aa4:	2e10      	cmp	r6, #16
   11aa6:	d001      	beq.n	11aac <mem_alloc.constprop.5+0xc8>
   11aa8:	45b3      	cmp	fp, r6
   11aaa:	d808      	bhi.n	11abe <mem_alloc.constprop.5+0xda>
   11aac:	2000      	movs	r0, #0
   11aae:	b003      	add	sp, #12
   11ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ab4:	9a01      	ldr	r2, [sp, #4]
   11ab6:	2a10      	cmp	r2, #16
   11ab8:	bf18      	it	ne
   11aba:	4616      	movne	r6, r2
   11abc:	d0f6      	beq.n	11aac <mem_alloc.constprop.5+0xc8>
   11abe:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 11ba8 <mem_alloc.constprop.5+0x1c4>
   11ac2:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   11ac6:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   11aca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   11ace:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   11ad2:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   11ad6:	f8d2 e004 	ldr.w	lr, [r2, #4]
   11ada:	691d      	ldr	r5, [r3, #16]
   11adc:	2c00      	cmp	r4, #0
   11ade:	d056      	beq.n	11b8e <mem_alloc.constprop.5+0x1aa>
   11ae0:	462a      	mov	r2, r5
   11ae2:	4670      	mov	r0, lr
   11ae4:	00a4      	lsls	r4, r4, #2
   11ae6:	eb05 0904 	add.w	r9, r5, r4
   11aea:	8851      	ldrh	r1, [r2, #2]
   11aec:	3204      	adds	r2, #4
   11aee:	4591      	cmp	r9, r2
   11af0:	4408      	add	r0, r1
   11af2:	d1fa      	bne.n	11aea <mem_alloc.constprop.5+0x106>
   11af4:	1929      	adds	r1, r5, r4
   11af6:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   11afa:	4482      	add	sl, r0
   11afc:	4582      	cmp	sl, r0
   11afe:	d918      	bls.n	11b32 <mem_alloc.constprop.5+0x14e>
   11b00:	0941      	lsrs	r1, r0, #5
   11b02:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   11b06:	f000 041f 	and.w	r4, r0, #31
   11b0a:	fa22 f904 	lsr.w	r9, r2, r4
   11b0e:	f019 0f01 	tst.w	r9, #1
   11b12:	d007      	beq.n	11b24 <mem_alloc.constprop.5+0x140>
   11b14:	e013      	b.n	11b3e <mem_alloc.constprop.5+0x15a>
   11b16:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   11b1a:	fa22 f904 	lsr.w	r9, r2, r4
   11b1e:	f019 0f01 	tst.w	r9, #1
   11b22:	d10c      	bne.n	11b3e <mem_alloc.constprop.5+0x15a>
   11b24:	3001      	adds	r0, #1
   11b26:	4582      	cmp	sl, r0
   11b28:	ea4f 1150 	mov.w	r1, r0, lsr #5
   11b2c:	f000 041f 	and.w	r4, r0, #31
   11b30:	d1f1      	bne.n	11b16 <mem_alloc.constprop.5+0x132>
   11b32:	3601      	adds	r6, #1
   11b34:	455e      	cmp	r6, fp
   11b36:	f108 0808 	add.w	r8, r8, #8
   11b3a:	d3c4      	bcc.n	11ac6 <mem_alloc.constprop.5+0xe2>
   11b3c:	e7b6      	b.n	11aac <mem_alloc.constprop.5+0xc8>
   11b3e:	2601      	movs	r6, #1
   11b40:	fa06 f404 	lsl.w	r4, r6, r4
   11b44:	899e      	ldrh	r6, [r3, #12]
   11b46:	ea22 0204 	bic.w	r2, r2, r4
   11b4a:	eba0 000e 	sub.w	r0, r0, lr
   11b4e:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   11b52:	685c      	ldr	r4, [r3, #4]
   11b54:	2e00      	cmp	r6, #0
   11b56:	d0a9      	beq.n	11aac <mem_alloc.constprop.5+0xc8>
   11b58:	886a      	ldrh	r2, [r5, #2]
   11b5a:	4282      	cmp	r2, r0
   11b5c:	d811      	bhi.n	11b82 <mem_alloc.constprop.5+0x19e>
   11b5e:	2100      	movs	r1, #0
   11b60:	1d2b      	adds	r3, r5, #4
   11b62:	e003      	b.n	11b6c <mem_alloc.constprop.5+0x188>
   11b64:	885a      	ldrh	r2, [r3, #2]
   11b66:	3304      	adds	r3, #4
   11b68:	4282      	cmp	r2, r0
   11b6a:	d80a      	bhi.n	11b82 <mem_alloc.constprop.5+0x19e>
   11b6c:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   11b70:	3101      	adds	r1, #1
   11b72:	428e      	cmp	r6, r1
   11b74:	fb02 4405 	mla	r4, r2, r5, r4
   11b78:	eba0 0002 	sub.w	r0, r0, r2
   11b7c:	461d      	mov	r5, r3
   11b7e:	d1f1      	bne.n	11b64 <mem_alloc.constprop.5+0x180>
   11b80:	e794      	b.n	11aac <mem_alloc.constprop.5+0xc8>
   11b82:	882b      	ldrh	r3, [r5, #0]
   11b84:	fb00 4003 	mla	r0, r0, r3, r4
   11b88:	b003      	add	sp, #12
   11b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b8e:	4670      	mov	r0, lr
   11b90:	e7b0      	b.n	11af4 <mem_alloc.constprop.5+0x110>
   11b92:	f1bb 0f10 	cmp.w	fp, #16
   11b96:	bf08      	it	eq
   11b98:	260f      	moveq	r6, #15
   11b9a:	d090      	beq.n	11abe <mem_alloc.constprop.5+0xda>
   11b9c:	e786      	b.n	11aac <mem_alloc.constprop.5+0xc8>
   11b9e:	bf00      	nop
   11ba0:	2002050c 	.word	0x2002050c
   11ba4:	200204d0 	.word	0x200204d0
   11ba8:	2002048c 	.word	0x2002048c

00011bac <mem_alloc.constprop.4>:
   11bac:	2800      	cmp	r0, #0
   11bae:	d04c      	beq.n	11c4a <mem_alloc.constprop.4+0x9e>
   11bb0:	4b6b      	ldr	r3, [pc, #428]	; (11d60 <mem_alloc.constprop.4+0x1b4>)
   11bb2:	681a      	ldr	r2, [r3, #0]
   11bb4:	4290      	cmp	r0, r2
   11bb6:	d848      	bhi.n	11c4a <mem_alloc.constprop.4+0x9e>
   11bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bbc:	685f      	ldr	r7, [r3, #4]
   11bbe:	b083      	sub	sp, #12
   11bc0:	9700      	str	r7, [sp, #0]
   11bc2:	2f00      	cmp	r7, #0
   11bc4:	d051      	beq.n	11c6a <mem_alloc.constprop.4+0xbe>
   11bc6:	1e7a      	subs	r2, r7, #1
   11bc8:	4696      	mov	lr, r2
   11bca:	2100      	movs	r1, #0
   11bcc:	f04f 0c01 	mov.w	ip, #1
   11bd0:	4c64      	ldr	r4, [pc, #400]	; (11d64 <mem_alloc.constprop.4+0x1b8>)
   11bd2:	9201      	str	r2, [sp, #4]
   11bd4:	eb01 020e 	add.w	r2, r1, lr
   11bd8:	3201      	adds	r2, #1
   11bda:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   11bde:	0852      	lsrs	r2, r2, #1
   11be0:	f102 0801 	add.w	r8, r2, #1
   11be4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   11be8:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   11bec:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   11bf0:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   11bf4:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   11bf8:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   11bfc:	f8d9 9004 	ldr.w	r9, [r9, #4]
   11c00:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   11c04:	f8da a010 	ldr.w	sl, [sl, #16]
   11c08:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   11c0c:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   11c10:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   11c14:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   11c18:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   11c1c:	6936      	ldr	r6, [r6, #16]
   11c1e:	f8db b004 	ldr.w	fp, [fp, #4]
   11c22:	692d      	ldr	r5, [r5, #16]
   11c24:	f8d9 9004 	ldr.w	r9, [r9, #4]
   11c28:	4550      	cmp	r0, sl
   11c2a:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   11c2e:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   11c32:	d913      	bls.n	11c5c <mem_alloc.constprop.4+0xb0>
   11c34:	42a8      	cmp	r0, r5
   11c36:	d210      	bcs.n	11c5a <mem_alloc.constprop.4+0xae>
   11c38:	42b0      	cmp	r0, r6
   11c3a:	d908      	bls.n	11c4e <mem_alloc.constprop.4+0xa2>
   11c3c:	45c6      	cmp	lr, r8
   11c3e:	4641      	mov	r1, r8
   11c40:	f0c0 8087 	bcc.w	11d52 <mem_alloc.constprop.4+0x1a6>
   11c44:	f108 0c01 	add.w	ip, r8, #1
   11c48:	e7c4      	b.n	11bd4 <mem_alloc.constprop.4+0x28>
   11c4a:	2000      	movs	r0, #0
   11c4c:	4770      	bx	lr
   11c4e:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
   11c52:	4571      	cmp	r1, lr
   11c54:	d87d      	bhi.n	11d52 <mem_alloc.constprop.4+0x1a6>
   11c56:	4617      	mov	r7, r2
   11c58:	e7bc      	b.n	11bd4 <mem_alloc.constprop.4+0x28>
   11c5a:	4639      	mov	r1, r7
   11c5c:	9a00      	ldr	r2, [sp, #0]
   11c5e:	428a      	cmp	r2, r1
   11c60:	d007      	beq.n	11c72 <mem_alloc.constprop.4+0xc6>
   11c62:	2910      	cmp	r1, #16
   11c64:	d001      	beq.n	11c6a <mem_alloc.constprop.4+0xbe>
   11c66:	428a      	cmp	r2, r1
   11c68:	d808      	bhi.n	11c7c <mem_alloc.constprop.4+0xd0>
   11c6a:	2000      	movs	r0, #0
   11c6c:	b003      	add	sp, #12
   11c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c72:	9a01      	ldr	r2, [sp, #4]
   11c74:	2a10      	cmp	r2, #16
   11c76:	bf18      	it	ne
   11c78:	4611      	movne	r1, r2
   11c7a:	d0f6      	beq.n	11c6a <mem_alloc.constprop.4+0xbe>
   11c7c:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 11d68 <mem_alloc.constprop.4+0x1bc>
   11c80:	f8dd 9000 	ldr.w	r9, [sp]
   11c84:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   11c88:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   11c8c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   11c90:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   11c94:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   11c98:	f8d2 e004 	ldr.w	lr, [r2, #4]
   11c9c:	691f      	ldr	r7, [r3, #16]
   11c9e:	2e00      	cmp	r6, #0
   11ca0:	d055      	beq.n	11d4e <mem_alloc.constprop.4+0x1a2>
   11ca2:	463a      	mov	r2, r7
   11ca4:	4670      	mov	r0, lr
   11ca6:	00b6      	lsls	r6, r6, #2
   11ca8:	eb07 0a06 	add.w	sl, r7, r6
   11cac:	8855      	ldrh	r5, [r2, #2]
   11cae:	3204      	adds	r2, #4
   11cb0:	4592      	cmp	sl, r2
   11cb2:	4428      	add	r0, r5
   11cb4:	d1fa      	bne.n	11cac <mem_alloc.constprop.4+0x100>
   11cb6:	19bd      	adds	r5, r7, r6
   11cb8:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   11cbc:	4483      	add	fp, r0
   11cbe:	4583      	cmp	fp, r0
   11cc0:	d918      	bls.n	11cf4 <mem_alloc.constprop.4+0x148>
   11cc2:	0945      	lsrs	r5, r0, #5
   11cc4:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   11cc8:	f000 061f 	and.w	r6, r0, #31
   11ccc:	fa22 fa06 	lsr.w	sl, r2, r6
   11cd0:	f01a 0f01 	tst.w	sl, #1
   11cd4:	d007      	beq.n	11ce6 <mem_alloc.constprop.4+0x13a>
   11cd6:	e013      	b.n	11d00 <mem_alloc.constprop.4+0x154>
   11cd8:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   11cdc:	fa22 fa06 	lsr.w	sl, r2, r6
   11ce0:	f01a 0f01 	tst.w	sl, #1
   11ce4:	d10c      	bne.n	11d00 <mem_alloc.constprop.4+0x154>
   11ce6:	3001      	adds	r0, #1
   11ce8:	4583      	cmp	fp, r0
   11cea:	ea4f 1550 	mov.w	r5, r0, lsr #5
   11cee:	f000 061f 	and.w	r6, r0, #31
   11cf2:	d1f1      	bne.n	11cd8 <mem_alloc.constprop.4+0x12c>
   11cf4:	3101      	adds	r1, #1
   11cf6:	4549      	cmp	r1, r9
   11cf8:	f108 0808 	add.w	r8, r8, #8
   11cfc:	d3c4      	bcc.n	11c88 <mem_alloc.constprop.4+0xdc>
   11cfe:	e7b4      	b.n	11c6a <mem_alloc.constprop.4+0xbe>
   11d00:	2101      	movs	r1, #1
   11d02:	40b1      	lsls	r1, r6
   11d04:	899e      	ldrh	r6, [r3, #12]
   11d06:	ea22 0201 	bic.w	r2, r2, r1
   11d0a:	eba0 000e 	sub.w	r0, r0, lr
   11d0e:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   11d12:	685c      	ldr	r4, [r3, #4]
   11d14:	2e00      	cmp	r6, #0
   11d16:	d0a8      	beq.n	11c6a <mem_alloc.constprop.4+0xbe>
   11d18:	887a      	ldrh	r2, [r7, #2]
   11d1a:	4282      	cmp	r2, r0
   11d1c:	d811      	bhi.n	11d42 <mem_alloc.constprop.4+0x196>
   11d1e:	2100      	movs	r1, #0
   11d20:	1d3b      	adds	r3, r7, #4
   11d22:	e003      	b.n	11d2c <mem_alloc.constprop.4+0x180>
   11d24:	885a      	ldrh	r2, [r3, #2]
   11d26:	3304      	adds	r3, #4
   11d28:	4282      	cmp	r2, r0
   11d2a:	d80a      	bhi.n	11d42 <mem_alloc.constprop.4+0x196>
   11d2c:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   11d30:	3101      	adds	r1, #1
   11d32:	428e      	cmp	r6, r1
   11d34:	eba0 0002 	sub.w	r0, r0, r2
   11d38:	fb02 4405 	mla	r4, r2, r5, r4
   11d3c:	461f      	mov	r7, r3
   11d3e:	d1f1      	bne.n	11d24 <mem_alloc.constprop.4+0x178>
   11d40:	e793      	b.n	11c6a <mem_alloc.constprop.4+0xbe>
   11d42:	883b      	ldrh	r3, [r7, #0]
   11d44:	fb00 4003 	mla	r0, r0, r3, r4
   11d48:	b003      	add	sp, #12
   11d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d4e:	4670      	mov	r0, lr
   11d50:	e7b1      	b.n	11cb6 <mem_alloc.constprop.4+0x10a>
   11d52:	9a00      	ldr	r2, [sp, #0]
   11d54:	2a10      	cmp	r2, #16
   11d56:	bf08      	it	eq
   11d58:	210f      	moveq	r1, #15
   11d5a:	d08f      	beq.n	11c7c <mem_alloc.constprop.4+0xd0>
   11d5c:	e785      	b.n	11c6a <mem_alloc.constprop.4+0xbe>
   11d5e:	bf00      	nop
   11d60:	2002050c 	.word	0x2002050c
   11d64:	200204d0 	.word	0x200204d0
   11d68:	2002048c 	.word	0x2002048c

00011d6c <nrf_mem_init>:
   11d6c:	b570      	push	{r4, r5, r6, lr}
   11d6e:	2200      	movs	r2, #0
   11d70:	2501      	movs	r5, #1
   11d72:	4833      	ldr	r0, [pc, #204]	; (11e40 <nrf_mem_init+0xd4>)
   11d74:	0951      	lsrs	r1, r2, #5
   11d76:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   11d7a:	f002 031f 	and.w	r3, r2, #31
   11d7e:	fa05 f303 	lsl.w	r3, r5, r3
   11d82:	3201      	adds	r2, #1
   11d84:	4323      	orrs	r3, r4
   11d86:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   11d8a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   11d8e:	d1f1      	bne.n	11d74 <nrf_mem_init+0x8>
   11d90:	2400      	movs	r4, #0
   11d92:	4b2c      	ldr	r3, [pc, #176]	; (11e44 <nrf_mem_init+0xd8>)
   11d94:	4621      	mov	r1, r4
   11d96:	223c      	movs	r2, #60	; 0x3c
   11d98:	482b      	ldr	r0, [pc, #172]	; (11e48 <nrf_mem_init+0xdc>)
   11d9a:	601c      	str	r4, [r3, #0]
   11d9c:	f00a f864 	bl	1be68 <memset>
   11da0:	2110      	movs	r1, #16
   11da2:	2205      	movs	r2, #5
   11da4:	4b29      	ldr	r3, [pc, #164]	; (11e4c <nrf_mem_init+0xe0>)
   11da6:	4e2a      	ldr	r6, [pc, #168]	; (11e50 <nrf_mem_init+0xe4>)
   11da8:	e9c3 4400 	strd	r4, r4, [r3]
   11dac:	60d9      	str	r1, [r3, #12]
   11dae:	6159      	str	r1, [r3, #20]
   11db0:	61d9      	str	r1, [r3, #28]
   11db2:	6259      	str	r1, [r3, #36]	; 0x24
   11db4:	62d9      	str	r1, [r3, #44]	; 0x2c
   11db6:	6359      	str	r1, [r3, #52]	; 0x34
   11db8:	63d9      	str	r1, [r3, #60]	; 0x3c
   11dba:	6459      	str	r1, [r3, #68]	; 0x44
   11dbc:	64d9      	str	r1, [r3, #76]	; 0x4c
   11dbe:	6559      	str	r1, [r3, #84]	; 0x54
   11dc0:	65d9      	str	r1, [r3, #92]	; 0x5c
   11dc2:	6659      	str	r1, [r3, #100]	; 0x64
   11dc4:	66d9      	str	r1, [r3, #108]	; 0x6c
   11dc6:	6759      	str	r1, [r3, #116]	; 0x74
   11dc8:	67d9      	str	r1, [r3, #124]	; 0x7c
   11dca:	609a      	str	r2, [r3, #8]
   11dcc:	611a      	str	r2, [r3, #16]
   11dce:	619a      	str	r2, [r3, #24]
   11dd0:	621a      	str	r2, [r3, #32]
   11dd2:	629a      	str	r2, [r3, #40]	; 0x28
   11dd4:	631a      	str	r2, [r3, #48]	; 0x30
   11dd6:	639a      	str	r2, [r3, #56]	; 0x38
   11dd8:	641a      	str	r2, [r3, #64]	; 0x40
   11dda:	649a      	str	r2, [r3, #72]	; 0x48
   11ddc:	651a      	str	r2, [r3, #80]	; 0x50
   11dde:	659a      	str	r2, [r3, #88]	; 0x58
   11de0:	661a      	str	r2, [r3, #96]	; 0x60
   11de2:	669a      	str	r2, [r3, #104]	; 0x68
   11de4:	671a      	str	r2, [r3, #112]	; 0x70
   11de6:	679a      	str	r2, [r3, #120]	; 0x78
   11de8:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   11dec:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   11df0:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   11df4:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   11df8:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   11dfc:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   11e00:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   11e04:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   11e08:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   11e0c:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   11e10:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   11e14:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   11e18:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   11e1c:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   11e20:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   11e24:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   11e28:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   11e2c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   11e30:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   11e34:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   11e38:	4620      	mov	r0, r4
   11e3a:	7035      	strb	r5, [r6, #0]
   11e3c:	bd70      	pop	{r4, r5, r6, pc}
   11e3e:	bf00      	nop
   11e40:	2002048c 	.word	0x2002048c
   11e44:	200204cc 	.word	0x200204cc
   11e48:	200204d0 	.word	0x200204d0
   11e4c:	2002050c 	.word	0x2002050c
   11e50:	20023351 	.word	0x20023351

00011e54 <nrf_mem_register>:
   11e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e58:	4b87      	ldr	r3, [pc, #540]	; (12078 <nrf_mem_register+0x224>)
   11e5a:	b087      	sub	sp, #28
   11e5c:	781b      	ldrb	r3, [r3, #0]
   11e5e:	2b00      	cmp	r3, #0
   11e60:	f000 808c 	beq.w	11f7c <nrf_mem_register+0x128>
   11e64:	b328      	cbz	r0, 11eb2 <nrf_mem_register+0x5e>
   11e66:	b321      	cbz	r1, 11eb2 <nrf_mem_register+0x5e>
   11e68:	780b      	ldrb	r3, [r1, #0]
   11e6a:	f8df 8218 	ldr.w	r8, [pc, #536]	; 12084 <nrf_mem_register+0x230>
   11e6e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   11e72:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   11e76:	685b      	ldr	r3, [r3, #4]
   11e78:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   11e7c:	4463      	add	r3, ip
   11e7e:	2b10      	cmp	r3, #16
   11e80:	d811      	bhi.n	11ea6 <nrf_mem_register+0x52>
   11e82:	f04f 0a00 	mov.w	sl, #0
   11e86:	4689      	mov	r9, r1
   11e88:	4b7c      	ldr	r3, [pc, #496]	; (1207c <nrf_mem_register+0x228>)
   11e8a:	4f7d      	ldr	r7, [pc, #500]	; (12080 <nrf_mem_register+0x22c>)
   11e8c:	681b      	ldr	r3, [r3, #0]
   11e8e:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   11e92:	9300      	str	r3, [sp, #0]
   11e94:	68b9      	ldr	r1, [r7, #8]
   11e96:	b191      	cbz	r1, 11ebe <nrf_mem_register+0x6a>
   11e98:	f10a 0a01 	add.w	sl, sl, #1
   11e9c:	f1ba 0f05 	cmp.w	sl, #5
   11ea0:	f107 070c 	add.w	r7, r7, #12
   11ea4:	d1f6      	bne.n	11e94 <nrf_mem_register+0x40>
   11ea6:	f248 1b07 	movw	fp, #33031	; 0x8107
   11eaa:	4658      	mov	r0, fp
   11eac:	b007      	add	sp, #28
   11eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11eb2:	f248 1b0e 	movw	fp, #33038	; 0x810e
   11eb6:	4658      	mov	r0, fp
   11eb8:	b007      	add	sp, #28
   11eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ebe:	f1bc 0f00 	cmp.w	ip, #0
   11ec2:	d061      	beq.n	11f88 <nrf_mem_register+0x134>
   11ec4:	460d      	mov	r5, r1
   11ec6:	460c      	mov	r4, r1
   11ec8:	f8d9 3010 	ldr.w	r3, [r9, #16]
   11ecc:	eb0e 0b03 	add.w	fp, lr, r3
   11ed0:	885a      	ldrh	r2, [r3, #2]
   11ed2:	f833 6b04 	ldrh.w	r6, [r3], #4
   11ed6:	4415      	add	r5, r2
   11ed8:	459b      	cmp	fp, r3
   11eda:	fb02 4406 	mla	r4, r2, r6, r4
   11ede:	d1f7      	bne.n	11ed0 <nrf_mem_register+0x7c>
   11ee0:	f8d9 3008 	ldr.w	r3, [r9, #8]
   11ee4:	42a3      	cmp	r3, r4
   11ee6:	d3d7      	bcc.n	11e98 <nrf_mem_register+0x44>
   11ee8:	9b00      	ldr	r3, [sp, #0]
   11eea:	442b      	add	r3, r5
   11eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   11ef0:	d2d2      	bcs.n	11e98 <nrf_mem_register+0x44>
   11ef2:	4c63      	ldr	r4, [pc, #396]	; (12080 <nrf_mem_register+0x22c>)
   11ef4:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   11ef8:	0092      	lsls	r2, r2, #2
   11efa:	f8c0 a000 	str.w	sl, [r0]
   11efe:	18a0      	adds	r0, r4, r2
   11f00:	f844 9002 	str.w	r9, [r4, r2]
   11f04:	9a00      	ldr	r2, [sp, #0]
   11f06:	468b      	mov	fp, r1
   11f08:	e9c0 2501 	strd	r2, r5, [r0, #4]
   11f0c:	f899 2001 	ldrb.w	r2, [r9, #1]
   11f10:	485a      	ldr	r0, [pc, #360]	; (1207c <nrf_mem_register+0x228>)
   11f12:	2a01      	cmp	r2, #1
   11f14:	6003      	str	r3, [r0, #0]
   11f16:	d0c8      	beq.n	11eaa <nrf_mem_register+0x56>
   11f18:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   11f1c:	2b00      	cmp	r3, #0
   11f1e:	d0c4      	beq.n	11eaa <nrf_mem_register+0x56>
   11f20:	2500      	movs	r5, #0
   11f22:	f8cd 9004 	str.w	r9, [sp, #4]
   11f26:	f8cd a00c 	str.w	sl, [sp, #12]
   11f2a:	f8cd b014 	str.w	fp, [sp, #20]
   11f2e:	9b01      	ldr	r3, [sp, #4]
   11f30:	781f      	ldrb	r7, [r3, #0]
   11f32:	691a      	ldr	r2, [r3, #16]
   11f34:	013b      	lsls	r3, r7, #4
   11f36:	eb03 0907 	add.w	r9, r3, r7
   11f3a:	9300      	str	r3, [sp, #0]
   11f3c:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   11f40:	6859      	ldr	r1, [r3, #4]
   11f42:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   11f46:	9102      	str	r1, [sp, #8]
   11f48:	bb39      	cbnz	r1, 11f9a <nrf_mem_register+0x146>
   11f4a:	9a03      	ldr	r2, [sp, #12]
   11f4c:	60dd      	str	r5, [r3, #12]
   11f4e:	609a      	str	r2, [r3, #8]
   11f50:	9b00      	ldr	r3, [sp, #0]
   11f52:	443b      	add	r3, r7
   11f54:	461f      	mov	r7, r3
   11f56:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   11f5a:	684b      	ldr	r3, [r1, #4]
   11f5c:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   11f60:	3301      	adds	r3, #1
   11f62:	4294      	cmp	r4, r2
   11f64:	604b      	str	r3, [r1, #4]
   11f66:	d912      	bls.n	11f8e <nrf_mem_register+0x13a>
   11f68:	9b01      	ldr	r3, [sp, #4]
   11f6a:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   11f6e:	899b      	ldrh	r3, [r3, #12]
   11f70:	3501      	adds	r5, #1
   11f72:	429d      	cmp	r5, r3
   11f74:	d3db      	bcc.n	11f2e <nrf_mem_register+0xda>
   11f76:	f8dd b014 	ldr.w	fp, [sp, #20]
   11f7a:	e796      	b.n	11eaa <nrf_mem_register+0x56>
   11f7c:	f248 1b08 	movw	fp, #33032	; 0x8108
   11f80:	4658      	mov	r0, fp
   11f82:	b007      	add	sp, #28
   11f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f88:	9b00      	ldr	r3, [sp, #0]
   11f8a:	4665      	mov	r5, ip
   11f8c:	e7ae      	b.n	11eec <nrf_mem_register+0x98>
   11f8e:	9b01      	ldr	r3, [sp, #4]
   11f90:	3501      	adds	r5, #1
   11f92:	899b      	ldrh	r3, [r3, #12]
   11f94:	42ab      	cmp	r3, r5
   11f96:	d8ca      	bhi.n	11f2e <nrf_mem_register+0xda>
   11f98:	e7ed      	b.n	11f76 <nrf_mem_register+0x122>
   11f9a:	2600      	movs	r6, #0
   11f9c:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
   11fa0:	9504      	str	r5, [sp, #16]
   11fa2:	eb06 000a 	add.w	r0, r6, sl
   11fa6:	eb09 0206 	add.w	r2, r9, r6
   11faa:	3201      	adds	r2, #1
   11fac:	3001      	adds	r0, #1
   11fae:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   11fb2:	0840      	lsrs	r0, r0, #1
   11fb4:	4d32      	ldr	r5, [pc, #200]	; (12080 <nrf_mem_register+0x22c>)
   11fb6:	eb09 0100 	add.w	r1, r9, r0
   11fba:	eb09 030a 	add.w	r3, r9, sl
   11fbe:	3101      	adds	r1, #1
   11fc0:	3301      	adds	r3, #1
   11fc2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   11fc6:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   11fca:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   11fce:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   11fd2:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   11fd6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   11fda:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   11fde:	f8db b010 	ldr.w	fp, [fp, #16]
   11fe2:	6852      	ldr	r2, [r2, #4]
   11fe4:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   11fe8:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   11fec:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   11ff0:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   11ff4:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   11ff8:	f8de e010 	ldr.w	lr, [lr, #16]
   11ffc:	6849      	ldr	r1, [r1, #4]
   11ffe:	f8dc c010 	ldr.w	ip, [ip, #16]
   12002:	685b      	ldr	r3, [r3, #4]
   12004:	4294      	cmp	r4, r2
   12006:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   1200a:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   1200e:	d92d      	bls.n	1206c <nrf_mem_register+0x218>
   12010:	429c      	cmp	r4, r3
   12012:	d22d      	bcs.n	12070 <nrf_mem_register+0x21c>
   12014:	428c      	cmp	r4, r1
   12016:	d924      	bls.n	12062 <nrf_mem_register+0x20e>
   12018:	1c46      	adds	r6, r0, #1
   1201a:	45b2      	cmp	sl, r6
   1201c:	d2c1      	bcs.n	11fa2 <nrf_mem_register+0x14e>
   1201e:	2610      	movs	r6, #16
   12020:	9d04      	ldr	r5, [sp, #16]
   12022:	9a02      	ldr	r2, [sp, #8]
   12024:	42b2      	cmp	r2, r6
   12026:	d911      	bls.n	1204c <nrf_mem_register+0x1f8>
   12028:	9b00      	ldr	r3, [sp, #0]
   1202a:	443b      	add	r3, r7
   1202c:	441a      	add	r2, r3
   1202e:	4433      	add	r3, r6
   12030:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   12034:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   12038:	2208      	movs	r2, #8
   1203a:	4651      	mov	r1, sl
   1203c:	eb0a 0002 	add.w	r0, sl, r2
   12040:	f1aa 0a08 	sub.w	sl, sl, #8
   12044:	f009 fee6 	bl	1be14 <memcpy>
   12048:	45d1      	cmp	r9, sl
   1204a:	d1f5      	bne.n	12038 <nrf_mem_register+0x1e4>
   1204c:	9b00      	ldr	r3, [sp, #0]
   1204e:	9903      	ldr	r1, [sp, #12]
   12050:	443b      	add	r3, r7
   12052:	4433      	add	r3, r6
   12054:	3301      	adds	r3, #1
   12056:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   1205a:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   1205e:	6055      	str	r5, [r2, #4]
   12060:	e776      	b.n	11f50 <nrf_mem_register+0xfc>
   12062:	f100 3aff 	add.w	sl, r0, #4294967295	; 0xffffffff
   12066:	4556      	cmp	r6, sl
   12068:	d99b      	bls.n	11fa2 <nrf_mem_register+0x14e>
   1206a:	e7d8      	b.n	1201e <nrf_mem_register+0x1ca>
   1206c:	9d04      	ldr	r5, [sp, #16]
   1206e:	e7d8      	b.n	12022 <nrf_mem_register+0x1ce>
   12070:	9d04      	ldr	r5, [sp, #16]
   12072:	f10a 0601 	add.w	r6, sl, #1
   12076:	e7d4      	b.n	12022 <nrf_mem_register+0x1ce>
   12078:	20023351 	.word	0x20023351
   1207c:	200204cc 	.word	0x200204cc
   12080:	200204d0 	.word	0x200204d0
   12084:	2002050c 	.word	0x2002050c

00012088 <nrf_malloc>:
   12088:	4b03      	ldr	r3, [pc, #12]	; (12098 <nrf_malloc+0x10>)
   1208a:	781b      	ldrb	r3, [r3, #0]
   1208c:	b10b      	cbz	r3, 12092 <nrf_malloc+0xa>
   1208e:	f7ff bd8d 	b.w	11bac <mem_alloc.constprop.4>
   12092:	4618      	mov	r0, r3
   12094:	4770      	bx	lr
   12096:	bf00      	nop
   12098:	20023351 	.word	0x20023351

0001209c <nrf_free>:
   1209c:	4b04      	ldr	r3, [pc, #16]	; (120b0 <nrf_free+0x14>)
   1209e:	781b      	ldrb	r3, [r3, #0]
   120a0:	b123      	cbz	r3, 120ac <nrf_free+0x10>
   120a2:	b118      	cbz	r0, 120ac <nrf_free+0x10>
   120a4:	4601      	mov	r1, r0
   120a6:	2000      	movs	r0, #0
   120a8:	f7ff bc30 	b.w	1190c <mem_free>
   120ac:	4770      	bx	lr
   120ae:	bf00      	nop
   120b0:	20023351 	.word	0x20023351

000120b4 <nrf_shared_malloc>:
   120b4:	4b03      	ldr	r3, [pc, #12]	; (120c4 <nrf_shared_malloc+0x10>)
   120b6:	781b      	ldrb	r3, [r3, #0]
   120b8:	b10b      	cbz	r3, 120be <nrf_shared_malloc+0xa>
   120ba:	f7ff bc93 	b.w	119e4 <mem_alloc.constprop.5>
   120be:	4618      	mov	r0, r3
   120c0:	4770      	bx	lr
   120c2:	bf00      	nop
   120c4:	20023351 	.word	0x20023351

000120c8 <nrf_shared_free>:
   120c8:	4b04      	ldr	r3, [pc, #16]	; (120dc <nrf_shared_free+0x14>)
   120ca:	781b      	ldrb	r3, [r3, #0]
   120cc:	b123      	cbz	r3, 120d8 <nrf_shared_free+0x10>
   120ce:	b118      	cbz	r0, 120d8 <nrf_shared_free+0x10>
   120d0:	4601      	mov	r1, r0
   120d2:	2001      	movs	r0, #1
   120d4:	f7ff bc1a 	b.w	1190c <mem_free>
   120d8:	4770      	bx	lr
   120da:	bf00      	nop
   120dc:	20023351 	.word	0x20023351

000120e0 <ip_client_event_handler>:
   120e0:	f850 1b08 	ldr.w	r1, [r0], #8
   120e4:	0c09      	lsrs	r1, r1, #16
   120e6:	f004 bccf 	b.w	16a88 <rpc_ip_event_handler>
   120ea:	bf00      	nop

000120ec <rpc_ip_client_init>:
   120ec:	4801      	ldr	r0, [pc, #4]	; (120f4 <rpc_ip_client_init+0x8>)
   120ee:	f005 b99d 	b.w	1742c <rpc_client_register>
   120f2:	bf00      	nop
   120f4:	0001dba0 	.word	0x0001dba0

000120f8 <rpc_ip_client_request_alloc>:
   120f8:	2300      	movs	r3, #0
   120fa:	b510      	push	{r4, lr}
   120fc:	b082      	sub	sp, #8
   120fe:	9301      	str	r3, [sp, #4]
   12100:	b158      	cbz	r0, 1211a <rpc_ip_client_request_alloc+0x22>
   12102:	4604      	mov	r4, r0
   12104:	aa01      	add	r2, sp, #4
   12106:	2004      	movs	r0, #4
   12108:	f005 fbc8 	bl	1789c <rpc_message_alloc>
   1210c:	b918      	cbnz	r0, 12116 <rpc_ip_client_request_alloc+0x1e>
   1210e:	9b01      	ldr	r3, [sp, #4]
   12110:	b10b      	cbz	r3, 12116 <rpc_ip_client_request_alloc+0x1e>
   12112:	3308      	adds	r3, #8
   12114:	6023      	str	r3, [r4, #0]
   12116:	b002      	add	sp, #8
   12118:	bd10      	pop	{r4, pc}
   1211a:	2007      	movs	r0, #7
   1211c:	b002      	add	sp, #8
   1211e:	bd10      	pop	{r4, pc}

00012120 <rpc_ip_client_request_send>:
   12120:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   12124:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   12128:	d10b      	bne.n	12142 <rpc_ip_client_request_send+0x22>
   1212a:	b160      	cbz	r0, 12146 <rpc_ip_client_request_send+0x26>
   1212c:	4603      	mov	r3, r0
   1212e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   12132:	2004      	movs	r0, #4
   12134:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   12138:	f843 1d08 	str.w	r1, [r3, #-8]!
   1213c:	4619      	mov	r1, r3
   1213e:	f005 bb95 	b.w	1786c <rpc_message_send>
   12142:	200f      	movs	r0, #15
   12144:	4770      	bx	lr
   12146:	2007      	movs	r0, #7
   12148:	4770      	bx	lr
   1214a:	bf00      	nop

0001214c <rpc_ip_client_message_free>:
   1214c:	b120      	cbz	r0, 12158 <rpc_ip_client_message_free+0xc>
   1214e:	f1a0 0108 	sub.w	r1, r0, #8
   12152:	2004      	movs	r0, #4
   12154:	f005 bbd4 	b.w	17900 <rpc_message_free>
   12158:	2007      	movs	r0, #7
   1215a:	4770      	bx	lr

0001215c <rpc_ip_client_data_free>:
   1215c:	b118      	cbz	r0, 12166 <rpc_ip_client_data_free+0xa>
   1215e:	4601      	mov	r1, r0
   12160:	2004      	movs	r0, #4
   12162:	f005 bcdf 	b.w	17b24 <rpc_message_data_free>
   12166:	2007      	movs	r0, #7
   12168:	4770      	bx	lr
   1216a:	bf00      	nop

0001216c <secure_client_socket>:
   1216c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12170:	460c      	mov	r4, r1
   12172:	680b      	ldr	r3, [r1, #0]
   12174:	4f46      	ldr	r7, [pc, #280]	; (12290 <secure_client_socket+0x124>)
   12176:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1217a:	600b      	str	r3, [r1, #0]
   1217c:	680b      	ldr	r3, [r1, #0]
   1217e:	00c6      	lsls	r6, r0, #3
   12180:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   12184:	600b      	str	r3, [r1, #0]
   12186:	eb07 0a06 	add.w	sl, r7, r6
   1218a:	b082      	sub	sp, #8
   1218c:	f8da 3004 	ldr.w	r3, [sl, #4]
   12190:	6989      	ldr	r1, [r1, #24]
   12192:	f247 0281 	movw	r2, #28801	; 0x7081
   12196:	4605      	mov	r5, r0
   12198:	f8d4 8000 	ldr.w	r8, [r4]
   1219c:	f003 fbd2 	bl	15944 <ip_interface_request_create>
   121a0:	2800      	cmp	r0, #0
   121a2:	d06f      	beq.n	12284 <secure_client_socket+0x118>
   121a4:	f8da 2004 	ldr.w	r2, [sl, #4]
   121a8:	4681      	mov	r9, r0
   121aa:	2a00      	cmp	r2, #0
   121ac:	d15f      	bne.n	1226e <secure_client_socket+0x102>
   121ae:	4b39      	ldr	r3, [pc, #228]	; (12294 <secure_client_socket+0x128>)
   121b0:	1971      	adds	r1, r6, r5
   121b2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   121b6:	2224      	movs	r2, #36	; 0x24
   121b8:	f109 0014 	add.w	r0, r9, #20
   121bc:	f009 fe2a 	bl	1be14 <memcpy>
   121c0:	f8d9 3008 	ldr.w	r3, [r9, #8]
   121c4:	4649      	mov	r1, r9
   121c6:	3324      	adds	r3, #36	; 0x24
   121c8:	f8c9 3008 	str.w	r3, [r9, #8]
   121cc:	6822      	ldr	r2, [r4, #0]
   121ce:	4643      	mov	r3, r8
   121d0:	0c12      	lsrs	r2, r2, #16
   121d2:	0412      	lsls	r2, r2, #16
   121d4:	f042 020a 	orr.w	r2, r2, #10
   121d8:	6022      	str	r2, [r4, #0]
   121da:	4620      	mov	r0, r4
   121dc:	f247 0281 	movw	r2, #28801	; 0x7081
   121e0:	f003 fbd0 	bl	15984 <ip_interface_request_send>
   121e4:	4603      	mov	r3, r0
   121e6:	b970      	cbnz	r0, 12206 <secure_client_socket+0x9a>
   121e8:	6823      	ldr	r3, [r4, #0]
   121ea:	00db      	lsls	r3, r3, #3
   121ec:	d40f      	bmi.n	1220e <secure_client_socket+0xa2>
   121ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   121f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   121f6:	210b      	movs	r1, #11
   121f8:	4628      	mov	r0, r5
   121fa:	f003 fbd7 	bl	159ac <ip_interface_wait>
   121fe:	4603      	mov	r3, r0
   12200:	b150      	cbz	r0, 12218 <secure_client_socket+0xac>
   12202:	f8c4 8000 	str.w	r8, [r4]
   12206:	4618      	mov	r0, r3
   12208:	b002      	add	sp, #8
   1220a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1220e:	2373      	movs	r3, #115	; 0x73
   12210:	4618      	mov	r0, r3
   12212:	b002      	add	sp, #8
   12214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12218:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1221c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12220:	4611      	mov	r1, r2
   12222:	4628      	mov	r0, r5
   12224:	f003 fbc2 	bl	159ac <ip_interface_wait>
   12228:	4603      	mov	r3, r0
   1222a:	bb30      	cbnz	r0, 1227a <secure_client_socket+0x10e>
   1222c:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   12230:	b138      	cbz	r0, 12242 <secure_client_socket+0xd6>
   12232:	9301      	str	r3, [sp, #4]
   12234:	f7ff ff32 	bl	1209c <nrf_free>
   12238:	9b01      	ldr	r3, [sp, #4]
   1223a:	443e      	add	r6, r7
   1223c:	6073      	str	r3, [r6, #4]
   1223e:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   12242:	4618      	mov	r0, r3
   12244:	6822      	ldr	r2, [r4, #0]
   12246:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   1224a:	6022      	str	r2, [r4, #0]
   1224c:	6822      	ldr	r2, [r4, #0]
   1224e:	0c12      	lsrs	r2, r2, #16
   12250:	0412      	lsls	r2, r2, #16
   12252:	f042 020c 	orr.w	r2, r2, #12
   12256:	6022      	str	r2, [r4, #0]
   12258:	6822      	ldr	r2, [r4, #0]
   1225a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1225e:	6022      	str	r2, [r4, #0]
   12260:	6822      	ldr	r2, [r4, #0]
   12262:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   12266:	6022      	str	r2, [r4, #0]
   12268:	b002      	add	sp, #8
   1226a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1226e:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   12272:	6800      	ldr	r0, [r0, #0]
   12274:	f009 fdce 	bl	1be14 <memcpy>
   12278:	e799      	b.n	121ae <secure_client_socket+0x42>
   1227a:	2b73      	cmp	r3, #115	; 0x73
   1227c:	d0c3      	beq.n	12206 <secure_client_socket+0x9a>
   1227e:	f8c4 8000 	str.w	r8, [r4]
   12282:	e7c0      	b.n	12206 <secure_client_socket+0x9a>
   12284:	230c      	movs	r3, #12
   12286:	4618      	mov	r0, r3
   12288:	b002      	add	sp, #8
   1228a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1228e:	bf00      	nop
   12290:	20020760 	.word	0x20020760
   12294:	2002061c 	.word	0x2002061c

00012298 <tls_interface_init>:
   12298:	2000      	movs	r0, #0
   1229a:	4770      	bx	lr

0001229c <tls_interface_open>:
   1229c:	b538      	push	{r3, r4, r5, lr}
   1229e:	f020 0308 	bic.w	r3, r0, #8
   122a2:	2b02      	cmp	r3, #2
   122a4:	d006      	beq.n	122b4 <tls_interface_open+0x18>
   122a6:	202f      	movs	r0, #47	; 0x2f
   122a8:	f7fd fb88 	bl	f9bc <bsd_os_errno_set>
   122ac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   122b0:	4628      	mov	r0, r5
   122b2:	bd38      	pop	{r3, r4, r5, pc}
   122b4:	4614      	mov	r4, r2
   122b6:	1e4a      	subs	r2, r1, #1
   122b8:	2a01      	cmp	r2, #1
   122ba:	d828      	bhi.n	1230e <tls_interface_open+0x72>
   122bc:	bb14      	cbnz	r4, 12304 <tls_interface_open+0x68>
   122be:	2901      	cmp	r1, #1
   122c0:	bf06      	itte	eq
   122c2:	2301      	moveq	r3, #1
   122c4:	f44f 7482 	moveq.w	r4, #260	; 0x104
   122c8:	f44f 7487 	movne.w	r4, #270	; 0x10e
   122cc:	461a      	mov	r2, r3
   122ce:	f003 fb99 	bl	15a04 <ip_interface_open>
   122d2:	1e05      	subs	r5, r0, #0
   122d4:	db26      	blt.n	12324 <tls_interface_open+0x88>
   122d6:	4b15      	ldr	r3, [pc, #84]	; (1232c <tls_interface_open+0x90>)
   122d8:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   122dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   122e0:	2224      	movs	r2, #36	; 0x24
   122e2:	4913      	ldr	r1, [pc, #76]	; (12330 <tls_interface_open+0x94>)
   122e4:	f009 fd96 	bl	1be14 <memcpy>
   122e8:	4628      	mov	r0, r5
   122ea:	f004 ff6f 	bl	171cc <interface_socket_from_handle_get>
   122ee:	6803      	ldr	r3, [r0, #0]
   122f0:	6144      	str	r4, [r0, #20]
   122f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   122f6:	6003      	str	r3, [r0, #0]
   122f8:	6803      	ldr	r3, [r0, #0]
   122fa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   122fe:	6003      	str	r3, [r0, #0]
   12300:	4628      	mov	r0, r5
   12302:	bd38      	pop	{r3, r4, r5, pc}
   12304:	2901      	cmp	r1, #1
   12306:	d008      	beq.n	1231a <tls_interface_open+0x7e>
   12308:	f5b4 7f87 	cmp.w	r4, #270	; 0x10e
   1230c:	d0de      	beq.n	122cc <tls_interface_open+0x30>
   1230e:	2016      	movs	r0, #22
   12310:	f7fd fb54 	bl	f9bc <bsd_os_errno_set>
   12314:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12318:	e7ca      	b.n	122b0 <tls_interface_open+0x14>
   1231a:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
   1231e:	d1f6      	bne.n	1230e <tls_interface_open+0x72>
   12320:	460b      	mov	r3, r1
   12322:	e7d3      	b.n	122cc <tls_interface_open+0x30>
   12324:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12328:	e7c2      	b.n	122b0 <tls_interface_open+0x14>
   1232a:	bf00      	nop
   1232c:	2002061c 	.word	0x2002061c
   12330:	0001dbb0 	.word	0x0001dbb0

00012334 <tls_interface_close>:
   12334:	b538      	push	{r3, r4, r5, lr}
   12336:	4604      	mov	r4, r0
   12338:	f004 ff48 	bl	171cc <interface_socket_from_handle_get>
   1233c:	b180      	cbz	r0, 12360 <tls_interface_close+0x2c>
   1233e:	4d0b      	ldr	r5, [pc, #44]	; (1236c <tls_interface_close+0x38>)
   12340:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   12344:	b138      	cbz	r0, 12356 <tls_interface_close+0x22>
   12346:	f7ff fea9 	bl	1209c <nrf_free>
   1234a:	2300      	movs	r3, #0
   1234c:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   12350:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   12354:	6053      	str	r3, [r2, #4]
   12356:	4620      	mov	r0, r4
   12358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1235c:	f003 bbfe 	b.w	15b5c <ip_interface_close>
   12360:	2009      	movs	r0, #9
   12362:	f7fd fb2b 	bl	f9bc <bsd_os_errno_set>
   12366:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1236a:	bd38      	pop	{r3, r4, r5, pc}
   1236c:	20020760 	.word	0x20020760

00012370 <tls_interface_sendto>:
   12370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12374:	460d      	mov	r5, r1
   12376:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1237a:	4616      	mov	r6, r2
   1237c:	461f      	mov	r7, r3
   1237e:	4604      	mov	r4, r0
   12380:	f004 ff24 	bl	171cc <interface_socket_from_handle_get>
   12384:	2800      	cmp	r0, #0
   12386:	d03b      	beq.n	12400 <tls_interface_sendto+0x90>
   12388:	6803      	ldr	r3, [r0, #0]
   1238a:	b29b      	uxth	r3, r3
   1238c:	2b0c      	cmp	r3, #12
   1238e:	d039      	beq.n	12404 <tls_interface_sendto+0x94>
   12390:	6803      	ldr	r3, [r0, #0]
   12392:	b29b      	uxth	r3, r3
   12394:	2b0b      	cmp	r3, #11
   12396:	d111      	bne.n	123bc <tls_interface_sendto+0x4c>
   12398:	4b20      	ldr	r3, [pc, #128]	; (1241c <tls_interface_sendto+0xac>)
   1239a:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   1239e:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
   123a2:	2b02      	cmp	r3, #2
   123a4:	d038      	beq.n	12418 <tls_interface_sendto+0xa8>
   123a6:	6903      	ldr	r3, [r0, #16]
   123a8:	2b01      	cmp	r3, #1
   123aa:	bf14      	ite	ne
   123ac:	2039      	movne	r0, #57	; 0x39
   123ae:	202a      	moveq	r0, #42	; 0x2a
   123b0:	f7fd fb04 	bl	f9bc <bsd_os_errno_set>
   123b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   123b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   123bc:	6903      	ldr	r3, [r0, #16]
   123be:	2b01      	cmp	r3, #1
   123c0:	d00b      	beq.n	123da <tls_interface_sendto+0x6a>
   123c2:	2b02      	cmp	r3, #2
   123c4:	d001      	beq.n	123ca <tls_interface_sendto+0x5a>
   123c6:	2039      	movs	r0, #57	; 0x39
   123c8:	e7f2      	b.n	123b0 <tls_interface_sendto+0x40>
   123ca:	6803      	ldr	r3, [r0, #0]
   123cc:	b29b      	uxth	r3, r3
   123ce:	2b02      	cmp	r3, #2
   123d0:	d007      	beq.n	123e2 <tls_interface_sendto+0x72>
   123d2:	6803      	ldr	r3, [r0, #0]
   123d4:	b29b      	uxth	r3, r3
   123d6:	2b04      	cmp	r3, #4
   123d8:	d003      	beq.n	123e2 <tls_interface_sendto+0x72>
   123da:	6803      	ldr	r3, [r0, #0]
   123dc:	b29b      	uxth	r3, r3
   123de:	2b05      	cmp	r3, #5
   123e0:	d1f1      	bne.n	123c6 <tls_interface_sendto+0x56>
   123e2:	4b0e      	ldr	r3, [pc, #56]	; (1241c <tls_interface_sendto+0xac>)
   123e4:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   123e8:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   123ec:	2b02      	cmp	r3, #2
   123ee:	d1ea      	bne.n	123c6 <tls_interface_sendto+0x56>
   123f0:	4601      	mov	r1, r0
   123f2:	4620      	mov	r0, r4
   123f4:	f7ff feba 	bl	1216c <secure_client_socket>
   123f8:	2800      	cmp	r0, #0
   123fa:	d003      	beq.n	12404 <tls_interface_sendto+0x94>
   123fc:	dcd8      	bgt.n	123b0 <tls_interface_sendto+0x40>
   123fe:	e7d9      	b.n	123b4 <tls_interface_sendto+0x44>
   12400:	2009      	movs	r0, #9
   12402:	e7d5      	b.n	123b0 <tls_interface_sendto+0x40>
   12404:	e9cd 8908 	strd	r8, r9, [sp, #32]
   12408:	463b      	mov	r3, r7
   1240a:	4632      	mov	r2, r6
   1240c:	4629      	mov	r1, r5
   1240e:	4620      	mov	r0, r4
   12410:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12414:	f003 bc12 	b.w	15c3c <ip_interface_sendto>
   12418:	2023      	movs	r0, #35	; 0x23
   1241a:	e7c9      	b.n	123b0 <tls_interface_sendto+0x40>
   1241c:	2002061c 	.word	0x2002061c

00012420 <tls_interface_recvfrom>:
   12420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12424:	460d      	mov	r5, r1
   12426:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1242a:	4616      	mov	r6, r2
   1242c:	461f      	mov	r7, r3
   1242e:	4604      	mov	r4, r0
   12430:	f004 fecc 	bl	171cc <interface_socket_from_handle_get>
   12434:	2800      	cmp	r0, #0
   12436:	d038      	beq.n	124aa <tls_interface_recvfrom+0x8a>
   12438:	6803      	ldr	r3, [r0, #0]
   1243a:	b29b      	uxth	r3, r3
   1243c:	2b0c      	cmp	r3, #12
   1243e:	d00f      	beq.n	12460 <tls_interface_recvfrom+0x40>
   12440:	6803      	ldr	r3, [r0, #0]
   12442:	b29b      	uxth	r3, r3
   12444:	2b0d      	cmp	r3, #13
   12446:	d00b      	beq.n	12460 <tls_interface_recvfrom+0x40>
   12448:	6903      	ldr	r3, [r0, #16]
   1244a:	2b01      	cmp	r3, #1
   1244c:	d01a      	beq.n	12484 <tls_interface_recvfrom+0x64>
   1244e:	2b02      	cmp	r3, #2
   12450:	d010      	beq.n	12474 <tls_interface_recvfrom+0x54>
   12452:	2023      	movs	r0, #35	; 0x23
   12454:	f7fd fab2 	bl	f9bc <bsd_os_errno_set>
   12458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1245c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12460:	e9cd 8908 	strd	r8, r9, [sp, #32]
   12464:	463b      	mov	r3, r7
   12466:	4632      	mov	r2, r6
   12468:	4629      	mov	r1, r5
   1246a:	4620      	mov	r0, r4
   1246c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12470:	f003 bd1e 	b.w	15eb0 <ip_interface_recvfrom>
   12474:	6803      	ldr	r3, [r0, #0]
   12476:	b29b      	uxth	r3, r3
   12478:	2b02      	cmp	r3, #2
   1247a:	d007      	beq.n	1248c <tls_interface_recvfrom+0x6c>
   1247c:	6803      	ldr	r3, [r0, #0]
   1247e:	b29b      	uxth	r3, r3
   12480:	2b04      	cmp	r3, #4
   12482:	d003      	beq.n	1248c <tls_interface_recvfrom+0x6c>
   12484:	6803      	ldr	r3, [r0, #0]
   12486:	b29b      	uxth	r3, r3
   12488:	2b05      	cmp	r3, #5
   1248a:	d1e2      	bne.n	12452 <tls_interface_recvfrom+0x32>
   1248c:	4b08      	ldr	r3, [pc, #32]	; (124b0 <tls_interface_recvfrom+0x90>)
   1248e:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   12492:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   12496:	2b02      	cmp	r3, #2
   12498:	d1db      	bne.n	12452 <tls_interface_recvfrom+0x32>
   1249a:	4601      	mov	r1, r0
   1249c:	4620      	mov	r0, r4
   1249e:	f7ff fe65 	bl	1216c <secure_client_socket>
   124a2:	2800      	cmp	r0, #0
   124a4:	d0dc      	beq.n	12460 <tls_interface_recvfrom+0x40>
   124a6:	dcd5      	bgt.n	12454 <tls_interface_recvfrom+0x34>
   124a8:	e7d6      	b.n	12458 <tls_interface_recvfrom+0x38>
   124aa:	2009      	movs	r0, #9
   124ac:	e7d2      	b.n	12454 <tls_interface_recvfrom+0x34>
   124ae:	bf00      	nop
   124b0:	2002061c 	.word	0x2002061c

000124b4 <tls_interface_bind>:
   124b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124b8:	460c      	mov	r4, r1
   124ba:	4617      	mov	r7, r2
   124bc:	4606      	mov	r6, r0
   124be:	f004 fe85 	bl	171cc <interface_socket_from_handle_get>
   124c2:	2800      	cmp	r0, #0
   124c4:	d06d      	beq.n	125a2 <tls_interface_bind+0xee>
   124c6:	6803      	ldr	r3, [r0, #0]
   124c8:	4605      	mov	r5, r0
   124ca:	b29b      	uxth	r3, r3
   124cc:	2b02      	cmp	r3, #2
   124ce:	d15a      	bne.n	12586 <tls_interface_bind+0xd2>
   124d0:	4621      	mov	r1, r4
   124d2:	463a      	mov	r2, r7
   124d4:	4630      	mov	r0, r6
   124d6:	f003 fec1 	bl	1625c <ip_interface_bind>
   124da:	4604      	mov	r4, r0
   124dc:	2800      	cmp	r0, #0
   124de:	d148      	bne.n	12572 <tls_interface_bind+0xbe>
   124e0:	00f7      	lsls	r7, r6, #3
   124e2:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 125a8 <tls_interface_bind+0xf4>
   124e6:	19bb      	adds	r3, r7, r6
   124e8:	f818 3023 	ldrb.w	r3, [r8, r3, lsl #2]
   124ec:	2b01      	cmp	r3, #1
   124ee:	d002      	beq.n	124f6 <tls_interface_bind+0x42>
   124f0:	4620      	mov	r0, r4
   124f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124f6:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 125ac <tls_interface_bind+0xf8>
   124fa:	f247 0281 	movw	r2, #28801	; 0x7081
   124fe:	eb0b 0a07 	add.w	sl, fp, r7
   12502:	f8da 3004 	ldr.w	r3, [sl, #4]
   12506:	69a9      	ldr	r1, [r5, #24]
   12508:	4630      	mov	r0, r6
   1250a:	f003 fa1b 	bl	15944 <ip_interface_request_create>
   1250e:	4681      	mov	r9, r0
   12510:	2800      	cmp	r0, #0
   12512:	d044      	beq.n	1259e <tls_interface_bind+0xea>
   12514:	f8da 2004 	ldr.w	r2, [sl, #4]
   12518:	2a00      	cmp	r2, #0
   1251a:	d13a      	bne.n	12592 <tls_interface_bind+0xde>
   1251c:	19b9      	adds	r1, r7, r6
   1251e:	eb08 0181 	add.w	r1, r8, r1, lsl #2
   12522:	2224      	movs	r2, #36	; 0x24
   12524:	f109 0014 	add.w	r0, r9, #20
   12528:	f009 fc74 	bl	1be14 <memcpy>
   1252c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   12530:	4649      	mov	r1, r9
   12532:	3324      	adds	r3, #36	; 0x24
   12534:	f8c9 3008 	str.w	r3, [r9, #8]
   12538:	682a      	ldr	r2, [r5, #0]
   1253a:	2304      	movs	r3, #4
   1253c:	0c12      	lsrs	r2, r2, #16
   1253e:	0412      	lsls	r2, r2, #16
   12540:	f042 020a 	orr.w	r2, r2, #10
   12544:	602a      	str	r2, [r5, #0]
   12546:	4628      	mov	r0, r5
   12548:	f247 0281 	movw	r2, #28801	; 0x7081
   1254c:	f003 fa1a 	bl	15984 <ip_interface_request_send>
   12550:	b9e8      	cbnz	r0, 1258e <tls_interface_bind+0xda>
   12552:	682b      	ldr	r3, [r5, #0]
   12554:	00db      	lsls	r3, r3, #3
   12556:	d418      	bmi.n	1258a <tls_interface_bind+0xd6>
   12558:	4630      	mov	r0, r6
   1255a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1255e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12562:	210b      	movs	r1, #11
   12564:	f003 fa22 	bl	159ac <ip_interface_wait>
   12568:	2800      	cmp	r0, #0
   1256a:	d0c1      	beq.n	124f0 <tls_interface_bind+0x3c>
   1256c:	2304      	movs	r3, #4
   1256e:	4604      	mov	r4, r0
   12570:	602b      	str	r3, [r5, #0]
   12572:	2c00      	cmp	r4, #0
   12574:	ddbc      	ble.n	124f0 <tls_interface_bind+0x3c>
   12576:	4620      	mov	r0, r4
   12578:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1257c:	f7fd fa1e 	bl	f9bc <bsd_os_errno_set>
   12580:	4620      	mov	r0, r4
   12582:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12586:	242d      	movs	r4, #45	; 0x2d
   12588:	e7f5      	b.n	12576 <tls_interface_bind+0xc2>
   1258a:	2473      	movs	r4, #115	; 0x73
   1258c:	e7f3      	b.n	12576 <tls_interface_bind+0xc2>
   1258e:	4604      	mov	r4, r0
   12590:	e7ef      	b.n	12572 <tls_interface_bind+0xbe>
   12592:	f85b 1036 	ldr.w	r1, [fp, r6, lsl #3]
   12596:	6800      	ldr	r0, [r0, #0]
   12598:	f009 fc3c 	bl	1be14 <memcpy>
   1259c:	e7be      	b.n	1251c <tls_interface_bind+0x68>
   1259e:	240c      	movs	r4, #12
   125a0:	e7e9      	b.n	12576 <tls_interface_bind+0xc2>
   125a2:	2409      	movs	r4, #9
   125a4:	e7e7      	b.n	12576 <tls_interface_bind+0xc2>
   125a6:	bf00      	nop
   125a8:	2002061c 	.word	0x2002061c
   125ac:	20020760 	.word	0x20020760

000125b0 <tls_interface_connect>:
   125b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   125b2:	460e      	mov	r6, r1
   125b4:	4617      	mov	r7, r2
   125b6:	4604      	mov	r4, r0
   125b8:	f004 fe08 	bl	171cc <interface_socket_from_handle_get>
   125bc:	b1e8      	cbz	r0, 125fa <tls_interface_connect+0x4a>
   125be:	4b13      	ldr	r3, [pc, #76]	; (1260c <tls_interface_connect+0x5c>)
   125c0:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   125c4:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   125c8:	2b02      	cmp	r3, #2
   125ca:	d11c      	bne.n	12606 <tls_interface_connect+0x56>
   125cc:	6803      	ldr	r3, [r0, #0]
   125ce:	4605      	mov	r5, r0
   125d0:	b29b      	uxth	r3, r3
   125d2:	2b02      	cmp	r3, #2
   125d4:	d003      	beq.n	125de <tls_interface_connect+0x2e>
   125d6:	6803      	ldr	r3, [r0, #0]
   125d8:	b29b      	uxth	r3, r3
   125da:	2b04      	cmp	r3, #4
   125dc:	d113      	bne.n	12606 <tls_interface_connect+0x56>
   125de:	463a      	mov	r2, r7
   125e0:	4631      	mov	r1, r6
   125e2:	4620      	mov	r0, r4
   125e4:	f003 fd90 	bl	16108 <ip_interface_connect>
   125e8:	b110      	cbz	r0, 125f0 <tls_interface_connect+0x40>
   125ea:	2800      	cmp	r0, #0
   125ec:	dc06      	bgt.n	125fc <tls_interface_connect+0x4c>
   125ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   125f0:	4629      	mov	r1, r5
   125f2:	4620      	mov	r0, r4
   125f4:	f7ff fdba 	bl	1216c <secure_client_socket>
   125f8:	e7f7      	b.n	125ea <tls_interface_connect+0x3a>
   125fa:	2009      	movs	r0, #9
   125fc:	f7fd f9de 	bl	f9bc <bsd_os_errno_set>
   12600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12606:	202d      	movs	r0, #45	; 0x2d
   12608:	e7f8      	b.n	125fc <tls_interface_connect+0x4c>
   1260a:	bf00      	nop
   1260c:	2002061c 	.word	0x2002061c

00012610 <tls_interface_listen>:
   12610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12614:	b083      	sub	sp, #12
   12616:	9101      	str	r1, [sp, #4]
   12618:	4605      	mov	r5, r0
   1261a:	f004 fdd7 	bl	171cc <interface_socket_from_handle_get>
   1261e:	2800      	cmp	r0, #0
   12620:	d079      	beq.n	12716 <tls_interface_listen+0x106>
   12622:	6903      	ldr	r3, [r0, #16]
   12624:	4604      	mov	r4, r0
   12626:	2b01      	cmp	r3, #1
   12628:	d173      	bne.n	12712 <tls_interface_listen+0x102>
   1262a:	6803      	ldr	r3, [r0, #0]
   1262c:	b29b      	uxth	r3, r3
   1262e:	2b04      	cmp	r3, #4
   12630:	d05f      	beq.n	126f2 <tls_interface_listen+0xe2>
   12632:	6823      	ldr	r3, [r4, #0]
   12634:	b29b      	uxth	r3, r3
   12636:	2b0b      	cmp	r3, #11
   12638:	d16b      	bne.n	12712 <tls_interface_listen+0x102>
   1263a:	00ee      	lsls	r6, r5, #3
   1263c:	4f37      	ldr	r7, [pc, #220]	; (1271c <tls_interface_listen+0x10c>)
   1263e:	1973      	adds	r3, r6, r5
   12640:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   12644:	2b01      	cmp	r3, #1
   12646:	d164      	bne.n	12712 <tls_interface_listen+0x102>
   12648:	2201      	movs	r2, #1
   1264a:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 12720 <tls_interface_listen+0x110>
   1264e:	1973      	adds	r3, r6, r5
   12650:	00ee      	lsls	r6, r5, #3
   12652:	f807 2023 	strb.w	r2, [r7, r3, lsl #2]
   12656:	eb09 0806 	add.w	r8, r9, r6
   1265a:	69a1      	ldr	r1, [r4, #24]
   1265c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   12660:	f247 0281 	movw	r2, #28801	; 0x7081
   12664:	4628      	mov	r0, r5
   12666:	f8d4 a000 	ldr.w	sl, [r4]
   1266a:	f003 f96b 	bl	15944 <ip_interface_request_create>
   1266e:	4683      	mov	fp, r0
   12670:	2800      	cmp	r0, #0
   12672:	d04c      	beq.n	1270e <tls_interface_listen+0xfe>
   12674:	f8d8 2004 	ldr.w	r2, [r8, #4]
   12678:	2a00      	cmp	r2, #0
   1267a:	d142      	bne.n	12702 <tls_interface_listen+0xf2>
   1267c:	1971      	adds	r1, r6, r5
   1267e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   12682:	2224      	movs	r2, #36	; 0x24
   12684:	f10b 0014 	add.w	r0, fp, #20
   12688:	f009 fbc4 	bl	1be14 <memcpy>
   1268c:	f8db 2008 	ldr.w	r2, [fp, #8]
   12690:	4659      	mov	r1, fp
   12692:	3224      	adds	r2, #36	; 0x24
   12694:	f8cb 2008 	str.w	r2, [fp, #8]
   12698:	6822      	ldr	r2, [r4, #0]
   1269a:	4653      	mov	r3, sl
   1269c:	0c12      	lsrs	r2, r2, #16
   1269e:	0412      	lsls	r2, r2, #16
   126a0:	f042 020a 	orr.w	r2, r2, #10
   126a4:	6022      	str	r2, [r4, #0]
   126a6:	4620      	mov	r0, r4
   126a8:	f247 0281 	movw	r2, #28801	; 0x7081
   126ac:	f003 f96a 	bl	15984 <ip_interface_request_send>
   126b0:	b968      	cbnz	r0, 126ce <tls_interface_listen+0xbe>
   126b2:	6823      	ldr	r3, [r4, #0]
   126b4:	00db      	lsls	r3, r3, #3
   126b6:	d40f      	bmi.n	126d8 <tls_interface_listen+0xc8>
   126b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   126bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   126c0:	210b      	movs	r1, #11
   126c2:	4628      	mov	r0, r5
   126c4:	f003 f972 	bl	159ac <ip_interface_wait>
   126c8:	b170      	cbz	r0, 126e8 <tls_interface_listen+0xd8>
   126ca:	f8c4 a000 	str.w	sl, [r4]
   126ce:	2800      	cmp	r0, #0
   126d0:	dc03      	bgt.n	126da <tls_interface_listen+0xca>
   126d2:	b003      	add	sp, #12
   126d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126d8:	2073      	movs	r0, #115	; 0x73
   126da:	f7fd f96f 	bl	f9bc <bsd_os_errno_set>
   126de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   126e2:	b003      	add	sp, #12
   126e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126e8:	9901      	ldr	r1, [sp, #4]
   126ea:	4628      	mov	r0, r5
   126ec:	f003 fe4c 	bl	16388 <ip_interface_listen>
   126f0:	e7ed      	b.n	126ce <tls_interface_listen+0xbe>
   126f2:	00ee      	lsls	r6, r5, #3
   126f4:	4f09      	ldr	r7, [pc, #36]	; (1271c <tls_interface_listen+0x10c>)
   126f6:	1973      	adds	r3, r6, r5
   126f8:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   126fc:	2b02      	cmp	r3, #2
   126fe:	d198      	bne.n	12632 <tls_interface_listen+0x22>
   12700:	e7a2      	b.n	12648 <tls_interface_listen+0x38>
   12702:	f859 1035 	ldr.w	r1, [r9, r5, lsl #3]
   12706:	6800      	ldr	r0, [r0, #0]
   12708:	f009 fb84 	bl	1be14 <memcpy>
   1270c:	e7b6      	b.n	1267c <tls_interface_listen+0x6c>
   1270e:	200c      	movs	r0, #12
   12710:	e7e3      	b.n	126da <tls_interface_listen+0xca>
   12712:	202d      	movs	r0, #45	; 0x2d
   12714:	e7e1      	b.n	126da <tls_interface_listen+0xca>
   12716:	2009      	movs	r0, #9
   12718:	e7df      	b.n	126da <tls_interface_listen+0xca>
   1271a:	bf00      	nop
   1271c:	2002061c 	.word	0x2002061c
   12720:	20020760 	.word	0x20020760

00012724 <tls_interface_accept>:
   12724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12726:	460c      	mov	r4, r1
   12728:	4616      	mov	r6, r2
   1272a:	461f      	mov	r7, r3
   1272c:	4605      	mov	r5, r0
   1272e:	f004 fd4d 	bl	171cc <interface_socket_from_handle_get>
   12732:	2800      	cmp	r0, #0
   12734:	d03b      	beq.n	127ae <tls_interface_accept+0x8a>
   12736:	6800      	ldr	r0, [r0, #0]
   12738:	b280      	uxth	r0, r0
   1273a:	2806      	cmp	r0, #6
   1273c:	d137      	bne.n	127ae <tls_interface_accept+0x8a>
   1273e:	4621      	mov	r1, r4
   12740:	463b      	mov	r3, r7
   12742:	4632      	mov	r2, r6
   12744:	4628      	mov	r0, r5
   12746:	f003 fe95 	bl	16474 <ip_interface_accept>
   1274a:	4604      	mov	r4, r0
   1274c:	b118      	cbz	r0, 12756 <tls_interface_accept+0x32>
   1274e:	2c00      	cmp	r4, #0
   12750:	dc2e      	bgt.n	127b0 <tls_interface_accept+0x8c>
   12752:	4620      	mov	r0, r4
   12754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12756:	4628      	mov	r0, r5
   12758:	f004 fd38 	bl	171cc <interface_socket_from_handle_get>
   1275c:	6803      	ldr	r3, [r0, #0]
   1275e:	4f18      	ldr	r7, [pc, #96]	; (127c0 <tls_interface_accept+0x9c>)
   12760:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   12764:	6003      	str	r3, [r0, #0]
   12766:	6803      	ldr	r3, [r0, #0]
   12768:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   1276c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   12770:	4606      	mov	r6, r0
   12772:	6003      	str	r3, [r0, #0]
   12774:	eb07 0185 	add.w	r1, r7, r5, lsl #2
   12778:	2224      	movs	r2, #36	; 0x24
   1277a:	4638      	mov	r0, r7
   1277c:	f009 fb4a 	bl	1be14 <memcpy>
   12780:	2302      	movs	r3, #2
   12782:	703b      	strb	r3, [r7, #0]
   12784:	6833      	ldr	r3, [r6, #0]
   12786:	4620      	mov	r0, r4
   12788:	0c1b      	lsrs	r3, r3, #16
   1278a:	041b      	lsls	r3, r3, #16
   1278c:	f043 030b 	orr.w	r3, r3, #11
   12790:	6033      	str	r3, [r6, #0]
   12792:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1279a:	210c      	movs	r1, #12
   1279c:	f003 f906 	bl	159ac <ip_interface_wait>
   127a0:	4604      	mov	r4, r0
   127a2:	2800      	cmp	r0, #0
   127a4:	d0d5      	beq.n	12752 <tls_interface_accept+0x2e>
   127a6:	2000      	movs	r0, #0
   127a8:	f003 f9d8 	bl	15b5c <ip_interface_close>
   127ac:	e7cf      	b.n	1274e <tls_interface_accept+0x2a>
   127ae:	2409      	movs	r4, #9
   127b0:	4620      	mov	r0, r4
   127b2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   127b6:	f7fd f901 	bl	f9bc <bsd_os_errno_set>
   127ba:	4620      	mov	r0, r4
   127bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   127be:	bf00      	nop
   127c0:	2002061c 	.word	0x2002061c

000127c4 <tls_interface_setopt>:
   127c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   127c8:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   127cc:	9e06      	ldr	r6, [sp, #24]
   127ce:	d11e      	bne.n	1280e <tls_interface_setopt+0x4a>
   127d0:	461f      	mov	r7, r3
   127d2:	4605      	mov	r5, r0
   127d4:	2b00      	cmp	r3, #0
   127d6:	f000 808c 	beq.w	128f2 <tls_interface_setopt+0x12e>
   127da:	4690      	mov	r8, r2
   127dc:	f004 fcf6 	bl	171cc <interface_socket_from_handle_get>
   127e0:	2800      	cmp	r0, #0
   127e2:	d07b      	beq.n	128dc <tls_interface_setopt+0x118>
   127e4:	6804      	ldr	r4, [r0, #0]
   127e6:	b2a4      	uxth	r4, r4
   127e8:	2c02      	cmp	r4, #2
   127ea:	d007      	beq.n	127fc <tls_interface_setopt+0x38>
   127ec:	6803      	ldr	r3, [r0, #0]
   127ee:	b29b      	uxth	r3, r3
   127f0:	2b04      	cmp	r3, #4
   127f2:	d003      	beq.n	127fc <tls_interface_setopt+0x38>
   127f4:	6803      	ldr	r3, [r0, #0]
   127f6:	b29b      	uxth	r3, r3
   127f8:	2b05      	cmp	r3, #5
   127fa:	d16f      	bne.n	128dc <tls_interface_setopt+0x118>
   127fc:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
   12800:	2a04      	cmp	r2, #4
   12802:	d87c      	bhi.n	128fe <tls_interface_setopt+0x13a>
   12804:	e8df f002 	tbb	[pc, r2]
   12808:	41324e24 	.word	0x41324e24
   1280c:	07          	.byte	0x07
   1280d:	00          	.byte	0x00
   1280e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12812:	f003 bf67 	b.w	166e4 <ip_interface_setopt>
   12816:	4c3b      	ldr	r4, [pc, #236]	; (12904 <tls_interface_setopt+0x140>)
   12818:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   1281c:	b138      	cbz	r0, 1282e <tls_interface_setopt+0x6a>
   1281e:	f7ff fc3d 	bl	1209c <nrf_free>
   12822:	2200      	movs	r2, #0
   12824:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   12828:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   1282c:	605a      	str	r2, [r3, #4]
   1282e:	4630      	mov	r0, r6
   12830:	b34e      	cbz	r6, 12886 <tls_interface_setopt+0xc2>
   12832:	f7ff fc29 	bl	12088 <nrf_malloc>
   12836:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   1283a:	2800      	cmp	r0, #0
   1283c:	d057      	beq.n	128ee <tls_interface_setopt+0x12a>
   1283e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   12842:	4632      	mov	r2, r6
   12844:	4639      	mov	r1, r7
   12846:	6066      	str	r6, [r4, #4]
   12848:	f009 fae4 	bl	1be14 <memcpy>
   1284c:	2000      	movs	r0, #0
   1284e:	e01a      	b.n	12886 <tls_interface_setopt+0xc2>
   12850:	2e04      	cmp	r6, #4
   12852:	d14a      	bne.n	128ea <tls_interface_setopt+0x126>
   12854:	6838      	ldr	r0, [r7, #0]
   12856:	2800      	cmp	r0, #0
   12858:	d039      	beq.n	128ce <tls_interface_setopt+0x10a>
   1285a:	2801      	cmp	r0, #1
   1285c:	d145      	bne.n	128ea <tls_interface_setopt+0x126>
   1285e:	4a2a      	ldr	r2, [pc, #168]	; (12908 <tls_interface_setopt+0x144>)
   12860:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   12864:	f802 0024 	strb.w	r0, [r2, r4, lsl #2]
   12868:	2000      	movs	r0, #0
   1286a:	e00c      	b.n	12886 <tls_interface_setopt+0xc2>
   1286c:	2e01      	cmp	r6, #1
   1286e:	d13c      	bne.n	128ea <tls_interface_setopt+0x126>
   12870:	783a      	ldrb	r2, [r7, #0]
   12872:	2000      	movs	r0, #0
   12874:	3200      	adds	r2, #0
   12876:	bf18      	it	ne
   12878:	2201      	movne	r2, #1
   1287a:	4b23      	ldr	r3, [pc, #140]	; (12908 <tls_interface_setopt+0x144>)
   1287c:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   12880:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   12884:	7062      	strb	r2, [r4, #1]
   12886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1288a:	2e04      	cmp	r6, #4
   1288c:	d12d      	bne.n	128ea <tls_interface_setopt+0x126>
   1288e:	683a      	ldr	r2, [r7, #0]
   12890:	2a02      	cmp	r2, #2
   12892:	d82a      	bhi.n	128ea <tls_interface_setopt+0x126>
   12894:	4b1c      	ldr	r3, [pc, #112]	; (12908 <tls_interface_setopt+0x144>)
   12896:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1289a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1289e:	70a2      	strb	r2, [r4, #2]
   128a0:	2000      	movs	r0, #0
   128a2:	e7f0      	b.n	12886 <tls_interface_setopt+0xc2>
   128a4:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   128a8:	d01f      	beq.n	128ea <tls_interface_setopt+0x126>
   128aa:	f016 0403 	ands.w	r4, r6, #3
   128ae:	d11c      	bne.n	128ea <tls_interface_setopt+0x126>
   128b0:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   128b4:	00ad      	lsls	r5, r5, #2
   128b6:	4b14      	ldr	r3, [pc, #80]	; (12908 <tls_interface_setopt+0x144>)
   128b8:	1d28      	adds	r0, r5, #4
   128ba:	4418      	add	r0, r3
   128bc:	442b      	add	r3, r5
   128be:	4632      	mov	r2, r6
   128c0:	4639      	mov	r1, r7
   128c2:	f883 c003 	strb.w	ip, [r3, #3]
   128c6:	f009 faa5 	bl	1be14 <memcpy>
   128ca:	4620      	mov	r0, r4
   128cc:	e7db      	b.n	12886 <tls_interface_setopt+0xc2>
   128ce:	2102      	movs	r1, #2
   128d0:	4a0d      	ldr	r2, [pc, #52]	; (12908 <tls_interface_setopt+0x144>)
   128d2:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   128d6:	f802 1024 	strb.w	r1, [r2, r4, lsl #2]
   128da:	e7d4      	b.n	12886 <tls_interface_setopt+0xc2>
   128dc:	2009      	movs	r0, #9
   128de:	f7fd f86d 	bl	f9bc <bsd_os_errno_set>
   128e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   128e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   128ea:	2016      	movs	r0, #22
   128ec:	e7f7      	b.n	128de <tls_interface_setopt+0x11a>
   128ee:	200c      	movs	r0, #12
   128f0:	e7f5      	b.n	128de <tls_interface_setopt+0x11a>
   128f2:	200e      	movs	r0, #14
   128f4:	f7fd f862 	bl	f9bc <bsd_os_errno_set>
   128f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   128fc:	e7c3      	b.n	12886 <tls_interface_setopt+0xc2>
   128fe:	202a      	movs	r0, #42	; 0x2a
   12900:	e7ed      	b.n	128de <tls_interface_setopt+0x11a>
   12902:	bf00      	nop
   12904:	20020760 	.word	0x20020760
   12908:	2002061c 	.word	0x2002061c

0001290c <tls_interface_getopt>:
   1290c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12910:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   12914:	9f06      	ldr	r7, [sp, #24]
   12916:	d112      	bne.n	1293e <tls_interface_getopt+0x32>
   12918:	461d      	mov	r5, r3
   1291a:	b16b      	cbz	r3, 12938 <tls_interface_getopt+0x2c>
   1291c:	b167      	cbz	r7, 12938 <tls_interface_getopt+0x2c>
   1291e:	4606      	mov	r6, r0
   12920:	4614      	mov	r4, r2
   12922:	f004 fc53 	bl	171cc <interface_socket_from_handle_get>
   12926:	2800      	cmp	r0, #0
   12928:	d04f      	beq.n	129ca <tls_interface_getopt+0xbe>
   1292a:	3c01      	subs	r4, #1
   1292c:	2c03      	cmp	r4, #3
   1292e:	d852      	bhi.n	129d6 <tls_interface_getopt+0xca>
   12930:	e8df f004 	tbb	[pc, r4]
   12934:	09152139 	.word	0x09152139
   12938:	200e      	movs	r0, #14
   1293a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1293e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12942:	f003 bf8b 	b.w	1685c <ip_interface_getopt>
   12946:	683b      	ldr	r3, [r7, #0]
   12948:	2b04      	cmp	r3, #4
   1294a:	d13c      	bne.n	129c6 <tls_interface_getopt+0xba>
   1294c:	4b23      	ldr	r3, [pc, #140]	; (129dc <tls_interface_getopt+0xd0>)
   1294e:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   12952:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   12956:	78b3      	ldrb	r3, [r6, #2]
   12958:	2000      	movs	r0, #0
   1295a:	602b      	str	r3, [r5, #0]
   1295c:	e7ed      	b.n	1293a <tls_interface_getopt+0x2e>
   1295e:	683b      	ldr	r3, [r7, #0]
   12960:	2b01      	cmp	r3, #1
   12962:	d130      	bne.n	129c6 <tls_interface_getopt+0xba>
   12964:	4b1d      	ldr	r3, [pc, #116]	; (129dc <tls_interface_getopt+0xd0>)
   12966:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1296a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1296e:	7873      	ldrb	r3, [r6, #1]
   12970:	2000      	movs	r0, #0
   12972:	702b      	strb	r3, [r5, #0]
   12974:	e7e1      	b.n	1293a <tls_interface_getopt+0x2e>
   12976:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1297a:	4918      	ldr	r1, [pc, #96]	; (129dc <tls_interface_getopt+0xd0>)
   1297c:	683b      	ldr	r3, [r7, #0]
   1297e:	00b6      	lsls	r6, r6, #2
   12980:	198a      	adds	r2, r1, r6
   12982:	f013 0403 	ands.w	r4, r3, #3
   12986:	78d0      	ldrb	r0, [r2, #3]
   12988:	d121      	bne.n	129ce <tls_interface_getopt+0xc2>
   1298a:	089b      	lsrs	r3, r3, #2
   1298c:	4283      	cmp	r3, r0
   1298e:	bf28      	it	cs
   12990:	4603      	movcs	r3, r0
   12992:	009a      	lsls	r2, r3, #2
   12994:	b1db      	cbz	r3, 129ce <tls_interface_getopt+0xc2>
   12996:	3604      	adds	r6, #4
   12998:	4431      	add	r1, r6
   1299a:	603a      	str	r2, [r7, #0]
   1299c:	4628      	mov	r0, r5
   1299e:	f009 fa39 	bl	1be14 <memcpy>
   129a2:	4620      	mov	r0, r4
   129a4:	e7c9      	b.n	1293a <tls_interface_getopt+0x2e>
   129a6:	683b      	ldr	r3, [r7, #0]
   129a8:	2b04      	cmp	r3, #4
   129aa:	d10c      	bne.n	129c6 <tls_interface_getopt+0xba>
   129ac:	4b0b      	ldr	r3, [pc, #44]	; (129dc <tls_interface_getopt+0xd0>)
   129ae:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   129b2:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   129b6:	2000      	movs	r0, #0
   129b8:	f1a3 0301 	sub.w	r3, r3, #1
   129bc:	fab3 f383 	clz	r3, r3
   129c0:	095b      	lsrs	r3, r3, #5
   129c2:	602b      	str	r3, [r5, #0]
   129c4:	e7b9      	b.n	1293a <tls_interface_getopt+0x2e>
   129c6:	2016      	movs	r0, #22
   129c8:	e7b7      	b.n	1293a <tls_interface_getopt+0x2e>
   129ca:	2009      	movs	r0, #9
   129cc:	e7b5      	b.n	1293a <tls_interface_getopt+0x2e>
   129ce:	2800      	cmp	r0, #0
   129d0:	d1f9      	bne.n	129c6 <tls_interface_getopt+0xba>
   129d2:	6038      	str	r0, [r7, #0]
   129d4:	e7b1      	b.n	1293a <tls_interface_getopt+0x2e>
   129d6:	202a      	movs	r0, #42	; 0x2a
   129d8:	e7af      	b.n	1293a <tls_interface_getopt+0x2e>
   129da:	bf00      	nop
   129dc:	2002061c 	.word	0x2002061c

000129e0 <tls_rpc_ip_event_handler>:
   129e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   129e2:	f248 0581 	movw	r5, #32897	; 0x8081
   129e6:	42ab      	cmp	r3, r5
   129e8:	460c      	mov	r4, r1
   129ea:	d062      	beq.n	12ab2 <tls_rpc_ip_event_handler+0xd2>
   129ec:	f249 0182 	movw	r1, #36994	; 0x9082
   129f0:	428b      	cmp	r3, r1
   129f2:	4606      	mov	r6, r0
   129f4:	d02e      	beq.n	12a54 <tls_rpc_ip_event_handler+0x74>
   129f6:	f248 0102 	movw	r1, #32770	; 0x8002
   129fa:	428b      	cmp	r3, r1
   129fc:	d001      	beq.n	12a02 <tls_rpc_ip_event_handler+0x22>
   129fe:	2001      	movs	r0, #1
   12a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12a02:	2c00      	cmp	r4, #0
   12a04:	d0fb      	beq.n	129fe <tls_rpc_ip_event_handler+0x1e>
   12a06:	6963      	ldr	r3, [r4, #20]
   12a08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   12a0c:	d002      	beq.n	12a14 <tls_rpc_ip_event_handler+0x34>
   12a0e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   12a12:	d1f4      	bne.n	129fe <tls_rpc_ip_event_handler+0x1e>
   12a14:	6823      	ldr	r3, [r4, #0]
   12a16:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   12a1a:	6023      	str	r3, [r4, #0]
   12a1c:	6955      	ldr	r5, [r2, #20]
   12a1e:	2d00      	cmp	r5, #0
   12a20:	d156      	bne.n	12ad0 <tls_rpc_ip_event_handler+0xf0>
   12a22:	6823      	ldr	r3, [r4, #0]
   12a24:	0c1b      	lsrs	r3, r3, #16
   12a26:	041b      	lsls	r3, r3, #16
   12a28:	f043 0305 	orr.w	r3, r3, #5
   12a2c:	6023      	str	r3, [r4, #0]
   12a2e:	6823      	ldr	r3, [r4, #0]
   12a30:	00da      	lsls	r2, r3, #3
   12a32:	d50d      	bpl.n	12a50 <tls_rpc_ip_event_handler+0x70>
   12a34:	4b2b      	ldr	r3, [pc, #172]	; (12ae4 <tls_rpc_ip_event_handler+0x104>)
   12a36:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   12a3a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   12a3e:	2b02      	cmp	r3, #2
   12a40:	d106      	bne.n	12a50 <tls_rpc_ip_event_handler+0x70>
   12a42:	4630      	mov	r0, r6
   12a44:	4621      	mov	r1, r4
   12a46:	f7ff fb91 	bl	1216c <secure_client_socket>
   12a4a:	b108      	cbz	r0, 12a50 <tls_rpc_ip_event_handler+0x70>
   12a4c:	2873      	cmp	r0, #115	; 0x73
   12a4e:	d142      	bne.n	12ad6 <tls_rpc_ip_event_handler+0xf6>
   12a50:	2000      	movs	r0, #0
   12a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12a54:	2c00      	cmp	r4, #0
   12a56:	d0fb      	beq.n	12a50 <tls_rpc_ip_event_handler+0x70>
   12a58:	6823      	ldr	r3, [r4, #0]
   12a5a:	b29b      	uxth	r3, r3
   12a5c:	2b0b      	cmp	r3, #11
   12a5e:	d1f7      	bne.n	12a50 <tls_rpc_ip_event_handler+0x70>
   12a60:	6915      	ldr	r5, [r2, #16]
   12a62:	2d00      	cmp	r5, #0
   12a64:	d134      	bne.n	12ad0 <tls_rpc_ip_event_handler+0xf0>
   12a66:	6823      	ldr	r3, [r4, #0]
   12a68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   12a6c:	6023      	str	r3, [r4, #0]
   12a6e:	6823      	ldr	r3, [r4, #0]
   12a70:	00db      	lsls	r3, r3, #3
   12a72:	d5ed      	bpl.n	12a50 <tls_rpc_ip_event_handler+0x70>
   12a74:	4f1c      	ldr	r7, [pc, #112]	; (12ae8 <tls_rpc_ip_event_handler+0x108>)
   12a76:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   12a7a:	b130      	cbz	r0, 12a8a <tls_rpc_ip_event_handler+0xaa>
   12a7c:	f7ff fb0e 	bl	1209c <nrf_free>
   12a80:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   12a84:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   12a88:	605d      	str	r5, [r3, #4]
   12a8a:	6823      	ldr	r3, [r4, #0]
   12a8c:	2000      	movs	r0, #0
   12a8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   12a92:	6023      	str	r3, [r4, #0]
   12a94:	6823      	ldr	r3, [r4, #0]
   12a96:	0c1b      	lsrs	r3, r3, #16
   12a98:	041b      	lsls	r3, r3, #16
   12a9a:	f043 030c 	orr.w	r3, r3, #12
   12a9e:	6023      	str	r3, [r4, #0]
   12aa0:	6823      	ldr	r3, [r4, #0]
   12aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12aa6:	6023      	str	r3, [r4, #0]
   12aa8:	6823      	ldr	r3, [r4, #0]
   12aaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   12aae:	6023      	str	r3, [r4, #0]
   12ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12ab2:	2900      	cmp	r1, #0
   12ab4:	d0cc      	beq.n	12a50 <tls_rpc_ip_event_handler+0x70>
   12ab6:	680b      	ldr	r3, [r1, #0]
   12ab8:	b29b      	uxth	r3, r3
   12aba:	2b0a      	cmp	r3, #10
   12abc:	d1c8      	bne.n	12a50 <tls_rpc_ip_event_handler+0x70>
   12abe:	6950      	ldr	r0, [r2, #20]
   12ac0:	b938      	cbnz	r0, 12ad2 <tls_rpc_ip_event_handler+0xf2>
   12ac2:	680b      	ldr	r3, [r1, #0]
   12ac4:	0c1b      	lsrs	r3, r3, #16
   12ac6:	041b      	lsls	r3, r3, #16
   12ac8:	f043 030b 	orr.w	r3, r3, #11
   12acc:	600b      	str	r3, [r1, #0]
   12ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12ad0:	4628      	mov	r0, r5
   12ad2:	f002 ff2d 	bl	15930 <rpc_error_to_nrf_bsd_error>
   12ad6:	6060      	str	r0, [r4, #4]
   12ad8:	6823      	ldr	r3, [r4, #0]
   12ada:	2000      	movs	r0, #0
   12adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   12ae0:	6023      	str	r3, [r4, #0]
   12ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12ae4:	2002061c 	.word	0x2002061c
   12ae8:	20020760 	.word	0x20020760

00012aec <rpc_dfu_event_handler>:
   12aec:	b508      	push	{r3, lr}
   12aee:	4a08      	ldr	r2, [pc, #32]	; (12b10 <rpc_dfu_event_handler+0x24>)
   12af0:	68c1      	ldr	r1, [r0, #12]
   12af2:	8812      	ldrh	r2, [r2, #0]
   12af4:	4603      	mov	r3, r0
   12af6:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   12afa:	d005      	beq.n	12b08 <rpc_dfu_event_handler+0x1c>
   12afc:	6800      	ldr	r0, [r0, #0]
   12afe:	b110      	cbz	r0, 12b06 <rpc_dfu_event_handler+0x1a>
   12b00:	f7fe fefc 	bl	118fc <rpc_dfu_client_data_free>
   12b04:	2000      	movs	r0, #0
   12b06:	bd08      	pop	{r3, pc}
   12b08:	4a02      	ldr	r2, [pc, #8]	; (12b14 <rpc_dfu_event_handler+0x28>)
   12b0a:	2001      	movs	r0, #1
   12b0c:	6013      	str	r3, [r2, #0]
   12b0e:	bd08      	pop	{r3, pc}
   12b10:	20021e1c 	.word	0x20021e1c
   12b14:	200207ac 	.word	0x200207ac

00012b18 <mfu_interface_init>:
   12b18:	2300      	movs	r3, #0
   12b1a:	b510      	push	{r4, lr}
   12b1c:	4808      	ldr	r0, [pc, #32]	; (12b40 <mfu_interface_init+0x28>)
   12b1e:	4909      	ldr	r1, [pc, #36]	; (12b44 <mfu_interface_init+0x2c>)
   12b20:	4a09      	ldr	r2, [pc, #36]	; (12b48 <mfu_interface_init+0x30>)
   12b22:	4c0a      	ldr	r4, [pc, #40]	; (12b4c <mfu_interface_init+0x34>)
   12b24:	8003      	strh	r3, [r0, #0]
   12b26:	600b      	str	r3, [r1, #0]
   12b28:	6013      	str	r3, [r2, #0]
   12b2a:	6023      	str	r3, [r4, #0]
   12b2c:	f7fe feb0 	bl	11890 <rpc_dfu_client_init>
   12b30:	b910      	cbnz	r0, 12b38 <mfu_interface_init+0x20>
   12b32:	2301      	movs	r3, #1
   12b34:	6023      	str	r3, [r4, #0]
   12b36:	bd10      	pop	{r4, pc}
   12b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12b3c:	bd10      	pop	{r4, pc}
   12b3e:	bf00      	nop
   12b40:	20021e1c 	.word	0x20021e1c
   12b44:	200207ac 	.word	0x200207ac
   12b48:	200207a8 	.word	0x200207a8
   12b4c:	200207a0 	.word	0x200207a0

00012b50 <mfu_interface_open>:
   12b50:	2801      	cmp	r0, #1
   12b52:	b508      	push	{r3, lr}
   12b54:	d10b      	bne.n	12b6e <mfu_interface_open+0x1e>
   12b56:	f240 2303 	movw	r3, #515	; 0x203
   12b5a:	429a      	cmp	r2, r3
   12b5c:	d107      	bne.n	12b6e <mfu_interface_open+0x1e>
   12b5e:	4b09      	ldr	r3, [pc, #36]	; (12b84 <mfu_interface_open+0x34>)
   12b60:	681a      	ldr	r2, [r3, #0]
   12b62:	2a01      	cmp	r2, #1
   12b64:	d109      	bne.n	12b7a <mfu_interface_open+0x2a>
   12b66:	2202      	movs	r2, #2
   12b68:	601a      	str	r2, [r3, #0]
   12b6a:	4807      	ldr	r0, [pc, #28]	; (12b88 <mfu_interface_open+0x38>)
   12b6c:	bd08      	pop	{r3, pc}
   12b6e:	2016      	movs	r0, #22
   12b70:	f7fc ff24 	bl	f9bc <bsd_os_errno_set>
   12b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12b78:	bd08      	pop	{r3, pc}
   12b7a:	f7fc ff1f 	bl	f9bc <bsd_os_errno_set>
   12b7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12b82:	bd08      	pop	{r3, pc}
   12b84:	200207a0 	.word	0x200207a0
   12b88:	49765432 	.word	0x49765432

00012b8c <mfu_interface_close>:
   12b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12b8e:	4c32      	ldr	r4, [pc, #200]	; (12c58 <mfu_interface_close+0xcc>)
   12b90:	b083      	sub	sp, #12
   12b92:	6823      	ldr	r3, [r4, #0]
   12b94:	1e9a      	subs	r2, r3, #2
   12b96:	2a01      	cmp	r2, #1
   12b98:	d857      	bhi.n	12c4a <mfu_interface_close+0xbe>
   12b9a:	2b03      	cmp	r3, #3
   12b9c:	d004      	beq.n	12ba8 <mfu_interface_close+0x1c>
   12b9e:	2301      	movs	r3, #1
   12ba0:	2000      	movs	r0, #0
   12ba2:	6023      	str	r3, [r4, #0]
   12ba4:	b003      	add	sp, #12
   12ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12ba8:	2100      	movs	r1, #0
   12baa:	4668      	mov	r0, sp
   12bac:	f7fe fe76 	bl	1189c <rpc_dfu_client_request_alloc>
   12bb0:	4603      	mov	r3, r0
   12bb2:	2800      	cmp	r0, #0
   12bb4:	d13d      	bne.n	12c32 <mfu_interface_close+0xa6>
   12bb6:	2104      	movs	r1, #4
   12bb8:	4e28      	ldr	r6, [pc, #160]	; (12c5c <mfu_interface_close+0xd0>)
   12bba:	9800      	ldr	r0, [sp, #0]
   12bbc:	8832      	ldrh	r2, [r6, #0]
   12bbe:	7201      	strb	r1, [r0, #8]
   12bc0:	3201      	adds	r2, #1
   12bc2:	b292      	uxth	r2, r2
   12bc4:	0411      	lsls	r1, r2, #16
   12bc6:	f041 0106 	orr.w	r1, r1, #6
   12bca:	4d25      	ldr	r5, [pc, #148]	; (12c60 <mfu_interface_close+0xd4>)
   12bcc:	60c1      	str	r1, [r0, #12]
   12bce:	7103      	strb	r3, [r0, #4]
   12bd0:	7143      	strb	r3, [r0, #5]
   12bd2:	7183      	strb	r3, [r0, #6]
   12bd4:	71c3      	strb	r3, [r0, #7]
   12bd6:	7243      	strb	r3, [r0, #9]
   12bd8:	7283      	strb	r3, [r0, #10]
   12bda:	72c3      	strb	r3, [r0, #11]
   12bdc:	2106      	movs	r1, #6
   12bde:	8032      	strh	r2, [r6, #0]
   12be0:	602b      	str	r3, [r5, #0]
   12be2:	f7fe fe6f 	bl	118c4 <rpc_dfu_client_request_send>
   12be6:	b9d8      	cbnz	r0, 12c20 <mfu_interface_close+0x94>
   12be8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12bec:	ae02      	add	r6, sp, #8
   12bee:	4627      	mov	r7, r4
   12bf0:	f846 3d04 	str.w	r3, [r6, #-4]!
   12bf4:	e004      	b.n	12c00 <mfu_interface_close+0x74>
   12bf6:	4631      	mov	r1, r6
   12bf8:	4638      	mov	r0, r7
   12bfa:	f7fc fe4b 	bl	f894 <bsd_os_timedwait>
   12bfe:	b9f0      	cbnz	r0, 12c3e <mfu_interface_close+0xb2>
   12c00:	6828      	ldr	r0, [r5, #0]
   12c02:	2800      	cmp	r0, #0
   12c04:	d0f7      	beq.n	12bf6 <mfu_interface_close+0x6a>
   12c06:	6905      	ldr	r5, [r0, #16]
   12c08:	f7fe fe70 	bl	118ec <rpc_dfu_client_message_free>
   12c0c:	2d00      	cmp	r5, #0
   12c0e:	d0c6      	beq.n	12b9e <mfu_interface_close+0x12>
   12c10:	4b14      	ldr	r3, [pc, #80]	; (12c64 <mfu_interface_close+0xd8>)
   12c12:	2008      	movs	r0, #8
   12c14:	601d      	str	r5, [r3, #0]
   12c16:	f7fc fed1 	bl	f9bc <bsd_os_errno_set>
   12c1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12c1e:	e7c1      	b.n	12ba4 <mfu_interface_close+0x18>
   12c20:	9800      	ldr	r0, [sp, #0]
   12c22:	6803      	ldr	r3, [r0, #0]
   12c24:	b11b      	cbz	r3, 12c2e <mfu_interface_close+0xa2>
   12c26:	4618      	mov	r0, r3
   12c28:	f7fe fe68 	bl	118fc <rpc_dfu_client_data_free>
   12c2c:	9800      	ldr	r0, [sp, #0]
   12c2e:	f7fe fe5d 	bl	118ec <rpc_dfu_client_message_free>
   12c32:	200c      	movs	r0, #12
   12c34:	f7fc fec2 	bl	f9bc <bsd_os_errno_set>
   12c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12c3c:	e7b2      	b.n	12ba4 <mfu_interface_close+0x18>
   12c3e:	203c      	movs	r0, #60	; 0x3c
   12c40:	f7fc febc 	bl	f9bc <bsd_os_errno_set>
   12c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12c48:	e7ac      	b.n	12ba4 <mfu_interface_close+0x18>
   12c4a:	2001      	movs	r0, #1
   12c4c:	f7fc feb6 	bl	f9bc <bsd_os_errno_set>
   12c50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12c54:	e7a6      	b.n	12ba4 <mfu_interface_close+0x18>
   12c56:	bf00      	nop
   12c58:	200207a0 	.word	0x200207a0
   12c5c:	20021e1c 	.word	0x20021e1c
   12c60:	200207ac 	.word	0x200207ac
   12c64:	200207a4 	.word	0x200207a4

00012c68 <mfu_interface_sendto>:
   12c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12c6c:	4e5a      	ldr	r6, [pc, #360]	; (12dd8 <mfu_interface_sendto+0x170>)
   12c6e:	4615      	mov	r5, r2
   12c70:	6833      	ldr	r3, [r6, #0]
   12c72:	b082      	sub	sp, #8
   12c74:	1e9a      	subs	r2, r3, #2
   12c76:	2a01      	cmp	r2, #1
   12c78:	f200 80a7 	bhi.w	12dca <mfu_interface_sendto+0x162>
   12c7c:	460f      	mov	r7, r1
   12c7e:	2900      	cmp	r1, #0
   12c80:	f000 809d 	beq.w	12dbe <mfu_interface_sendto+0x156>
   12c84:	2d00      	cmp	r5, #0
   12c86:	f000 809a 	beq.w	12dbe <mfu_interface_sendto+0x156>
   12c8a:	2b02      	cmp	r3, #2
   12c8c:	46e8      	mov	r8, sp
   12c8e:	d04e      	beq.n	12d2e <mfu_interface_sendto+0xc6>
   12c90:	4640      	mov	r0, r8
   12c92:	4629      	mov	r1, r5
   12c94:	f7fe fe02 	bl	1189c <rpc_dfu_client_request_alloc>
   12c98:	4606      	mov	r6, r0
   12c9a:	b140      	cbz	r0, 12cae <mfu_interface_sendto+0x46>
   12c9c:	200c      	movs	r0, #12
   12c9e:	f7fc fe8d 	bl	f9bc <bsd_os_errno_set>
   12ca2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12ca6:	4628      	mov	r0, r5
   12ca8:	b002      	add	sp, #8
   12caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12cae:	9b00      	ldr	r3, [sp, #0]
   12cb0:	4639      	mov	r1, r7
   12cb2:	6818      	ldr	r0, [r3, #0]
   12cb4:	462a      	mov	r2, r5
   12cb6:	f009 f8ad 	bl	1be14 <memcpy>
   12cba:	2104      	movs	r1, #4
   12cbc:	4c47      	ldr	r4, [pc, #284]	; (12ddc <mfu_interface_sendto+0x174>)
   12cbe:	9800      	ldr	r0, [sp, #0]
   12cc0:	8823      	ldrh	r3, [r4, #0]
   12cc2:	6045      	str	r5, [r0, #4]
   12cc4:	3301      	adds	r3, #1
   12cc6:	b29b      	uxth	r3, r3
   12cc8:	041a      	lsls	r2, r3, #16
   12cca:	8023      	strh	r3, [r4, #0]
   12ccc:	430a      	orrs	r2, r1
   12cce:	4c44      	ldr	r4, [pc, #272]	; (12de0 <mfu_interface_sendto+0x178>)
   12cd0:	60c2      	str	r2, [r0, #12]
   12cd2:	7246      	strb	r6, [r0, #9]
   12cd4:	7286      	strb	r6, [r0, #10]
   12cd6:	72c6      	strb	r6, [r0, #11]
   12cd8:	7201      	strb	r1, [r0, #8]
   12cda:	6026      	str	r6, [r4, #0]
   12cdc:	f7fe fdf2 	bl	118c4 <rpc_dfu_client_request_send>
   12ce0:	2800      	cmp	r0, #0
   12ce2:	d162      	bne.n	12daa <mfu_interface_sendto+0x142>
   12ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12ce8:	ae02      	add	r6, sp, #8
   12cea:	4f3b      	ldr	r7, [pc, #236]	; (12dd8 <mfu_interface_sendto+0x170>)
   12cec:	f846 3d04 	str.w	r3, [r6, #-4]!
   12cf0:	e004      	b.n	12cfc <mfu_interface_sendto+0x94>
   12cf2:	4631      	mov	r1, r6
   12cf4:	4638      	mov	r0, r7
   12cf6:	f7fc fdcd 	bl	f894 <bsd_os_timedwait>
   12cfa:	b978      	cbnz	r0, 12d1c <mfu_interface_sendto+0xb4>
   12cfc:	6820      	ldr	r0, [r4, #0]
   12cfe:	2800      	cmp	r0, #0
   12d00:	d0f7      	beq.n	12cf2 <mfu_interface_sendto+0x8a>
   12d02:	6904      	ldr	r4, [r0, #16]
   12d04:	f7fe fdf2 	bl	118ec <rpc_dfu_client_message_free>
   12d08:	2c00      	cmp	r4, #0
   12d0a:	d0cc      	beq.n	12ca6 <mfu_interface_sendto+0x3e>
   12d0c:	4b35      	ldr	r3, [pc, #212]	; (12de4 <mfu_interface_sendto+0x17c>)
   12d0e:	2008      	movs	r0, #8
   12d10:	601c      	str	r4, [r3, #0]
   12d12:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12d16:	f7fc fe51 	bl	f9bc <bsd_os_errno_set>
   12d1a:	e7c4      	b.n	12ca6 <mfu_interface_sendto+0x3e>
   12d1c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12d20:	203c      	movs	r0, #60	; 0x3c
   12d22:	f7fc fe4b 	bl	f9bc <bsd_os_errno_set>
   12d26:	4628      	mov	r0, r5
   12d28:	b002      	add	sp, #8
   12d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12d2e:	4640      	mov	r0, r8
   12d30:	2100      	movs	r1, #0
   12d32:	f7fe fdb3 	bl	1189c <rpc_dfu_client_request_alloc>
   12d36:	4602      	mov	r2, r0
   12d38:	2800      	cmp	r0, #0
   12d3a:	d1af      	bne.n	12c9c <mfu_interface_sendto+0x34>
   12d3c:	f04f 0c08 	mov.w	ip, #8
   12d40:	4926      	ldr	r1, [pc, #152]	; (12ddc <mfu_interface_sendto+0x174>)
   12d42:	4829      	ldr	r0, [pc, #164]	; (12de8 <mfu_interface_sendto+0x180>)
   12d44:	880b      	ldrh	r3, [r1, #0]
   12d46:	6804      	ldr	r4, [r0, #0]
   12d48:	3301      	adds	r3, #1
   12d4a:	9800      	ldr	r0, [sp, #0]
   12d4c:	b29b      	uxth	r3, r3
   12d4e:	800b      	strh	r3, [r1, #0]
   12d50:	041b      	lsls	r3, r3, #16
   12d52:	f043 0303 	orr.w	r3, r3, #3
   12d56:	6104      	str	r4, [r0, #16]
   12d58:	4c21      	ldr	r4, [pc, #132]	; (12de0 <mfu_interface_sendto+0x178>)
   12d5a:	60c3      	str	r3, [r0, #12]
   12d5c:	7102      	strb	r2, [r0, #4]
   12d5e:	7142      	strb	r2, [r0, #5]
   12d60:	7182      	strb	r2, [r0, #6]
   12d62:	71c2      	strb	r2, [r0, #7]
   12d64:	7242      	strb	r2, [r0, #9]
   12d66:	7282      	strb	r2, [r0, #10]
   12d68:	72c2      	strb	r2, [r0, #11]
   12d6a:	f880 c008 	strb.w	ip, [r0, #8]
   12d6e:	2103      	movs	r1, #3
   12d70:	6022      	str	r2, [r4, #0]
   12d72:	f7fe fda7 	bl	118c4 <rpc_dfu_client_request_send>
   12d76:	b9c0      	cbnz	r0, 12daa <mfu_interface_sendto+0x142>
   12d78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12d7c:	f10d 0908 	add.w	r9, sp, #8
   12d80:	f849 3d04 	str.w	r3, [r9, #-4]!
   12d84:	46b2      	mov	sl, r6
   12d86:	e005      	b.n	12d94 <mfu_interface_sendto+0x12c>
   12d88:	4649      	mov	r1, r9
   12d8a:	4650      	mov	r0, sl
   12d8c:	f7fc fd82 	bl	f894 <bsd_os_timedwait>
   12d90:	2800      	cmp	r0, #0
   12d92:	d1c3      	bne.n	12d1c <mfu_interface_sendto+0xb4>
   12d94:	6820      	ldr	r0, [r4, #0]
   12d96:	2800      	cmp	r0, #0
   12d98:	d0f6      	beq.n	12d88 <mfu_interface_sendto+0x120>
   12d9a:	6904      	ldr	r4, [r0, #16]
   12d9c:	f7fe fda6 	bl	118ec <rpc_dfu_client_message_free>
   12da0:	2c00      	cmp	r4, #0
   12da2:	d1b3      	bne.n	12d0c <mfu_interface_sendto+0xa4>
   12da4:	2303      	movs	r3, #3
   12da6:	6033      	str	r3, [r6, #0]
   12da8:	e772      	b.n	12c90 <mfu_interface_sendto+0x28>
   12daa:	9800      	ldr	r0, [sp, #0]
   12dac:	6803      	ldr	r3, [r0, #0]
   12dae:	b11b      	cbz	r3, 12db8 <mfu_interface_sendto+0x150>
   12db0:	4618      	mov	r0, r3
   12db2:	f7fe fda3 	bl	118fc <rpc_dfu_client_data_free>
   12db6:	9800      	ldr	r0, [sp, #0]
   12db8:	f7fe fd98 	bl	118ec <rpc_dfu_client_message_free>
   12dbc:	e76e      	b.n	12c9c <mfu_interface_sendto+0x34>
   12dbe:	2016      	movs	r0, #22
   12dc0:	f7fc fdfc 	bl	f9bc <bsd_os_errno_set>
   12dc4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12dc8:	e76d      	b.n	12ca6 <mfu_interface_sendto+0x3e>
   12dca:	2001      	movs	r0, #1
   12dcc:	f7fc fdf6 	bl	f9bc <bsd_os_errno_set>
   12dd0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12dd4:	e767      	b.n	12ca6 <mfu_interface_sendto+0x3e>
   12dd6:	bf00      	nop
   12dd8:	200207a0 	.word	0x200207a0
   12ddc:	20021e1c 	.word	0x20021e1c
   12de0:	200207ac 	.word	0x200207ac
   12de4:	200207a4 	.word	0x200207a4
   12de8:	200207a8 	.word	0x200207a8

00012dec <mfu_interface_setopt>:
   12dec:	b5f0      	push	{r4, r5, r6, r7, lr}
   12dee:	4846      	ldr	r0, [pc, #280]	; (12f08 <mfu_interface_setopt+0x11c>)
   12df0:	b083      	sub	sp, #12
   12df2:	6800      	ldr	r0, [r0, #0]
   12df4:	3802      	subs	r0, #2
   12df6:	2801      	cmp	r0, #1
   12df8:	d877      	bhi.n	12eea <mfu_interface_setopt+0xfe>
   12dfa:	f240 2003 	movw	r0, #515	; 0x203
   12dfe:	4281      	cmp	r1, r0
   12e00:	d16d      	bne.n	12ede <mfu_interface_setopt+0xf2>
   12e02:	3a04      	subs	r2, #4
   12e04:	2a03      	cmp	r2, #3
   12e06:	d85c      	bhi.n	12ec2 <mfu_interface_setopt+0xd6>
   12e08:	e8df f002 	tbb	[pc, r2]
   12e0c:	514e024b 	.word	0x514e024b
   12e10:	2407      	movs	r4, #7
   12e12:	4625      	mov	r5, r4
   12e14:	2100      	movs	r1, #0
   12e16:	4668      	mov	r0, sp
   12e18:	f7fe fd40 	bl	1189c <rpc_dfu_client_request_alloc>
   12e1c:	4603      	mov	r3, r0
   12e1e:	2800      	cmp	r0, #0
   12e20:	d138      	bne.n	12e94 <mfu_interface_setopt+0xa8>
   12e22:	2704      	movs	r7, #4
   12e24:	4e39      	ldr	r6, [pc, #228]	; (12f0c <mfu_interface_setopt+0x120>)
   12e26:	9800      	ldr	r0, [sp, #0]
   12e28:	8832      	ldrh	r2, [r6, #0]
   12e2a:	4629      	mov	r1, r5
   12e2c:	3201      	adds	r2, #1
   12e2e:	b292      	uxth	r2, r2
   12e30:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   12e34:	4c36      	ldr	r4, [pc, #216]	; (12f10 <mfu_interface_setopt+0x124>)
   12e36:	60c5      	str	r5, [r0, #12]
   12e38:	7103      	strb	r3, [r0, #4]
   12e3a:	7143      	strb	r3, [r0, #5]
   12e3c:	7183      	strb	r3, [r0, #6]
   12e3e:	71c3      	strb	r3, [r0, #7]
   12e40:	7243      	strb	r3, [r0, #9]
   12e42:	7283      	strb	r3, [r0, #10]
   12e44:	72c3      	strb	r3, [r0, #11]
   12e46:	7207      	strb	r7, [r0, #8]
   12e48:	8032      	strh	r2, [r6, #0]
   12e4a:	6023      	str	r3, [r4, #0]
   12e4c:	f7fe fd3a 	bl	118c4 <rpc_dfu_client_request_send>
   12e50:	b9b8      	cbnz	r0, 12e82 <mfu_interface_setopt+0x96>
   12e52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12e56:	ad02      	add	r5, sp, #8
   12e58:	4e2b      	ldr	r6, [pc, #172]	; (12f08 <mfu_interface_setopt+0x11c>)
   12e5a:	f845 3d04 	str.w	r3, [r5, #-4]!
   12e5e:	e005      	b.n	12e6c <mfu_interface_setopt+0x80>
   12e60:	4629      	mov	r1, r5
   12e62:	4630      	mov	r0, r6
   12e64:	f7fc fd16 	bl	f894 <bsd_os_timedwait>
   12e68:	2800      	cmp	r0, #0
   12e6a:	d131      	bne.n	12ed0 <mfu_interface_setopt+0xe4>
   12e6c:	6820      	ldr	r0, [r4, #0]
   12e6e:	2800      	cmp	r0, #0
   12e70:	d0f6      	beq.n	12e60 <mfu_interface_setopt+0x74>
   12e72:	6904      	ldr	r4, [r0, #16]
   12e74:	f7fe fd3a 	bl	118ec <rpc_dfu_client_message_free>
   12e78:	2c00      	cmp	r4, #0
   12e7a:	d13c      	bne.n	12ef6 <mfu_interface_setopt+0x10a>
   12e7c:	4620      	mov	r0, r4
   12e7e:	b003      	add	sp, #12
   12e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12e82:	9800      	ldr	r0, [sp, #0]
   12e84:	6803      	ldr	r3, [r0, #0]
   12e86:	b11b      	cbz	r3, 12e90 <mfu_interface_setopt+0xa4>
   12e88:	4618      	mov	r0, r3
   12e8a:	f7fe fd37 	bl	118fc <rpc_dfu_client_data_free>
   12e8e:	9800      	ldr	r0, [sp, #0]
   12e90:	f7fe fd2c 	bl	118ec <rpc_dfu_client_message_free>
   12e94:	200c      	movs	r0, #12
   12e96:	f7fc fd91 	bl	f9bc <bsd_os_errno_set>
   12e9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12e9e:	b003      	add	sp, #12
   12ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12ea2:	2405      	movs	r4, #5
   12ea4:	4625      	mov	r5, r4
   12ea6:	e7b5      	b.n	12e14 <mfu_interface_setopt+0x28>
   12ea8:	2408      	movs	r4, #8
   12eaa:	4625      	mov	r5, r4
   12eac:	e7b2      	b.n	12e14 <mfu_interface_setopt+0x28>
   12eae:	b1b3      	cbz	r3, 12ede <mfu_interface_setopt+0xf2>
   12eb0:	9a08      	ldr	r2, [sp, #32]
   12eb2:	2a04      	cmp	r2, #4
   12eb4:	d113      	bne.n	12ede <mfu_interface_setopt+0xf2>
   12eb6:	2000      	movs	r0, #0
   12eb8:	681a      	ldr	r2, [r3, #0]
   12eba:	4b16      	ldr	r3, [pc, #88]	; (12f14 <mfu_interface_setopt+0x128>)
   12ebc:	601a      	str	r2, [r3, #0]
   12ebe:	b003      	add	sp, #12
   12ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12ec2:	202a      	movs	r0, #42	; 0x2a
   12ec4:	f7fc fd7a 	bl	f9bc <bsd_os_errno_set>
   12ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12ecc:	b003      	add	sp, #12
   12ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12ed0:	203c      	movs	r0, #60	; 0x3c
   12ed2:	f7fc fd73 	bl	f9bc <bsd_os_errno_set>
   12ed6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12eda:	b003      	add	sp, #12
   12edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12ede:	2016      	movs	r0, #22
   12ee0:	f7fc fd6c 	bl	f9bc <bsd_os_errno_set>
   12ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12ee8:	e7c9      	b.n	12e7e <mfu_interface_setopt+0x92>
   12eea:	2001      	movs	r0, #1
   12eec:	f7fc fd66 	bl	f9bc <bsd_os_errno_set>
   12ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12ef4:	e7c3      	b.n	12e7e <mfu_interface_setopt+0x92>
   12ef6:	4b08      	ldr	r3, [pc, #32]	; (12f18 <mfu_interface_setopt+0x12c>)
   12ef8:	2008      	movs	r0, #8
   12efa:	601c      	str	r4, [r3, #0]
   12efc:	f7fc fd5e 	bl	f9bc <bsd_os_errno_set>
   12f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12f04:	e7bb      	b.n	12e7e <mfu_interface_setopt+0x92>
   12f06:	bf00      	nop
   12f08:	200207a0 	.word	0x200207a0
   12f0c:	20021e1c 	.word	0x20021e1c
   12f10:	200207ac 	.word	0x200207ac
   12f14:	200207a8 	.word	0x200207a8
   12f18:	200207a4 	.word	0x200207a4

00012f1c <mfu_interface_getopt>:
   12f1c:	f240 2003 	movw	r0, #515	; 0x203
   12f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12f24:	4281      	cmp	r1, r0
   12f26:	b082      	sub	sp, #8
   12f28:	9e08      	ldr	r6, [sp, #32]
   12f2a:	f040 80ae 	bne.w	1308a <mfu_interface_getopt+0x16e>
   12f2e:	461d      	mov	r5, r3
   12f30:	2b00      	cmp	r3, #0
   12f32:	f000 80aa 	beq.w	1308a <mfu_interface_getopt+0x16e>
   12f36:	2e00      	cmp	r6, #0
   12f38:	f000 80a7 	beq.w	1308a <mfu_interface_getopt+0x16e>
   12f3c:	4b5e      	ldr	r3, [pc, #376]	; (130b8 <mfu_interface_getopt+0x19c>)
   12f3e:	681b      	ldr	r3, [r3, #0]
   12f40:	3b02      	subs	r3, #2
   12f42:	2b01      	cmp	r3, #1
   12f44:	f200 80a7 	bhi.w	13096 <mfu_interface_getopt+0x17a>
   12f48:	3a01      	subs	r2, #1
   12f4a:	2a13      	cmp	r2, #19
   12f4c:	d879      	bhi.n	13042 <mfu_interface_getopt+0x126>
   12f4e:	e8df f002 	tbb	[pc, r2]
   12f52:	5f17      	.short	0x5f17
   12f54:	78787878 	.word	0x78787878
   12f58:	78787872 	.word	0x78787872
   12f5c:	78787878 	.word	0x78787878
   12f60:	78787878 	.word	0x78787878
   12f64:	0a78      	.short	0x0a78
   12f66:	6833      	ldr	r3, [r6, #0]
   12f68:	2b04      	cmp	r3, #4
   12f6a:	f040 808e 	bne.w	1308a <mfu_interface_getopt+0x16e>
   12f6e:	2200      	movs	r2, #0
   12f70:	4610      	mov	r0, r2
   12f72:	4b52      	ldr	r3, [pc, #328]	; (130bc <mfu_interface_getopt+0x1a0>)
   12f74:	6819      	ldr	r1, [r3, #0]
   12f76:	601a      	str	r2, [r3, #0]
   12f78:	6029      	str	r1, [r5, #0]
   12f7a:	b002      	add	sp, #8
   12f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12f80:	6833      	ldr	r3, [r6, #0]
   12f82:	2b24      	cmp	r3, #36	; 0x24
   12f84:	f040 8081 	bne.w	1308a <mfu_interface_getopt+0x16e>
   12f88:	2401      	movs	r4, #1
   12f8a:	46a0      	mov	r8, r4
   12f8c:	2100      	movs	r1, #0
   12f8e:	4668      	mov	r0, sp
   12f90:	f7fe fc84 	bl	1189c <rpc_dfu_client_request_alloc>
   12f94:	2800      	cmp	r0, #0
   12f96:	d146      	bne.n	13026 <mfu_interface_getopt+0x10a>
   12f98:	4949      	ldr	r1, [pc, #292]	; (130c0 <mfu_interface_getopt+0x1a4>)
   12f9a:	9b00      	ldr	r3, [sp, #0]
   12f9c:	880a      	ldrh	r2, [r1, #0]
   12f9e:	f1b8 0f03 	cmp.w	r8, #3
   12fa2:	f102 0201 	add.w	r2, r2, #1
   12fa6:	b292      	uxth	r2, r2
   12fa8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   12fac:	7118      	strb	r0, [r3, #4]
   12fae:	800a      	strh	r2, [r1, #0]
   12fb0:	60dc      	str	r4, [r3, #12]
   12fb2:	7158      	strb	r0, [r3, #5]
   12fb4:	7198      	strb	r0, [r3, #6]
   12fb6:	71d8      	strb	r0, [r3, #7]
   12fb8:	d04b      	beq.n	13052 <mfu_interface_getopt+0x136>
   12fba:	2104      	movs	r1, #4
   12fbc:	2200      	movs	r2, #0
   12fbe:	4f41      	ldr	r7, [pc, #260]	; (130c4 <mfu_interface_getopt+0x1a8>)
   12fc0:	6099      	str	r1, [r3, #8]
   12fc2:	4618      	mov	r0, r3
   12fc4:	4641      	mov	r1, r8
   12fc6:	603a      	str	r2, [r7, #0]
   12fc8:	f7fe fc7c 	bl	118c4 <rpc_dfu_client_request_send>
   12fcc:	2800      	cmp	r0, #0
   12fce:	d14d      	bne.n	1306c <mfu_interface_getopt+0x150>
   12fd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12fd4:	ac02      	add	r4, sp, #8
   12fd6:	f844 3d04 	str.w	r3, [r4, #-4]!
   12fda:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 130b8 <mfu_interface_getopt+0x19c>
   12fde:	e005      	b.n	12fec <mfu_interface_getopt+0xd0>
   12fe0:	4621      	mov	r1, r4
   12fe2:	4640      	mov	r0, r8
   12fe4:	f7fc fc56 	bl	f894 <bsd_os_timedwait>
   12fe8:	2800      	cmp	r0, #0
   12fea:	d137      	bne.n	1305c <mfu_interface_getopt+0x140>
   12fec:	6839      	ldr	r1, [r7, #0]
   12fee:	2900      	cmp	r1, #0
   12ff0:	d0f6      	beq.n	12fe0 <mfu_interface_getopt+0xc4>
   12ff2:	690c      	ldr	r4, [r1, #16]
   12ff4:	2c00      	cmp	r4, #0
   12ff6:	d154      	bne.n	130a2 <mfu_interface_getopt+0x186>
   12ff8:	6832      	ldr	r2, [r6, #0]
   12ffa:	3114      	adds	r1, #20
   12ffc:	4628      	mov	r0, r5
   12ffe:	f008 ff09 	bl	1be14 <memcpy>
   13002:	6838      	ldr	r0, [r7, #0]
   13004:	f7fe fc72 	bl	118ec <rpc_dfu_client_message_free>
   13008:	4620      	mov	r0, r4
   1300a:	b002      	add	sp, #8
   1300c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13010:	6833      	ldr	r3, [r6, #0]
   13012:	2b04      	cmp	r3, #4
   13014:	d139      	bne.n	1308a <mfu_interface_getopt+0x16e>
   13016:	2402      	movs	r4, #2
   13018:	2100      	movs	r1, #0
   1301a:	4668      	mov	r0, sp
   1301c:	46a0      	mov	r8, r4
   1301e:	f7fe fc3d 	bl	1189c <rpc_dfu_client_request_alloc>
   13022:	2800      	cmp	r0, #0
   13024:	d0b8      	beq.n	12f98 <mfu_interface_getopt+0x7c>
   13026:	200c      	movs	r0, #12
   13028:	f7fc fcc8 	bl	f9bc <bsd_os_errno_set>
   1302c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13030:	b002      	add	sp, #8
   13032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13036:	6833      	ldr	r3, [r6, #0]
   13038:	2b04      	cmp	r3, #4
   1303a:	d126      	bne.n	1308a <mfu_interface_getopt+0x16e>
   1303c:	2409      	movs	r4, #9
   1303e:	46a0      	mov	r8, r4
   13040:	e7a4      	b.n	12f8c <mfu_interface_getopt+0x70>
   13042:	202a      	movs	r0, #42	; 0x2a
   13044:	f7fc fcba 	bl	f9bc <bsd_os_errno_set>
   13048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1304c:	b002      	add	sp, #8
   1304e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13052:	4a1d      	ldr	r2, [pc, #116]	; (130c8 <mfu_interface_getopt+0x1ac>)
   13054:	2108      	movs	r1, #8
   13056:	6812      	ldr	r2, [r2, #0]
   13058:	611a      	str	r2, [r3, #16]
   1305a:	e7af      	b.n	12fbc <mfu_interface_getopt+0xa0>
   1305c:	203c      	movs	r0, #60	; 0x3c
   1305e:	f7fc fcad 	bl	f9bc <bsd_os_errno_set>
   13062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13066:	b002      	add	sp, #8
   13068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1306c:	9800      	ldr	r0, [sp, #0]
   1306e:	6803      	ldr	r3, [r0, #0]
   13070:	b11b      	cbz	r3, 1307a <mfu_interface_getopt+0x15e>
   13072:	4618      	mov	r0, r3
   13074:	f7fe fc42 	bl	118fc <rpc_dfu_client_data_free>
   13078:	9800      	ldr	r0, [sp, #0]
   1307a:	f7fe fc37 	bl	118ec <rpc_dfu_client_message_free>
   1307e:	200c      	movs	r0, #12
   13080:	f7fc fc9c 	bl	f9bc <bsd_os_errno_set>
   13084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13088:	e7d2      	b.n	13030 <mfu_interface_getopt+0x114>
   1308a:	2016      	movs	r0, #22
   1308c:	f7fc fc96 	bl	f9bc <bsd_os_errno_set>
   13090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13094:	e771      	b.n	12f7a <mfu_interface_getopt+0x5e>
   13096:	2001      	movs	r0, #1
   13098:	f7fc fc90 	bl	f9bc <bsd_os_errno_set>
   1309c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   130a0:	e76b      	b.n	12f7a <mfu_interface_getopt+0x5e>
   130a2:	4b06      	ldr	r3, [pc, #24]	; (130bc <mfu_interface_getopt+0x1a0>)
   130a4:	2008      	movs	r0, #8
   130a6:	601c      	str	r4, [r3, #0]
   130a8:	f7fc fc88 	bl	f9bc <bsd_os_errno_set>
   130ac:	6838      	ldr	r0, [r7, #0]
   130ae:	f7fe fc1d 	bl	118ec <rpc_dfu_client_message_free>
   130b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   130b6:	e760      	b.n	12f7a <mfu_interface_getopt+0x5e>
   130b8:	200207a0 	.word	0x200207a0
   130bc:	200207a4 	.word	0x200207a4
   130c0:	20021e1c 	.word	0x20021e1c
   130c4:	200207ac 	.word	0x200207ac
   130c8:	200207a8 	.word	0x200207a8

000130cc <bsd_platform_error_handler>:
   130cc:	b508      	push	{r3, lr}
   130ce:	f7f9 fa33 	bl	c538 <bsd_recoverable_error_handler>
   130d2:	bd08      	pop	{r3, pc}

000130d4 <bsd_init>:
   130d4:	b510      	push	{r4, lr}
   130d6:	4c06      	ldr	r4, [pc, #24]	; (130f0 <bsd_init+0x1c>)
   130d8:	7823      	ldrb	r3, [r4, #0]
   130da:	b92b      	cbnz	r3, 130e8 <bsd_init+0x14>
   130dc:	f000 f818 	bl	13110 <bsd_platform_init>
   130e0:	b908      	cbnz	r0, 130e6 <bsd_init+0x12>
   130e2:	2301      	movs	r3, #1
   130e4:	7023      	strb	r3, [r4, #0]
   130e6:	bd10      	pop	{r4, pc}
   130e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   130ec:	bd10      	pop	{r4, pc}
   130ee:	bf00      	nop
   130f0:	20023352 	.word	0x20023352

000130f4 <unimplemented_method>:
   130f4:	b40f      	push	{r0, r1, r2, r3}
   130f6:	b508      	push	{r3, lr}
   130f8:	202d      	movs	r0, #45	; 0x2d
   130fa:	f7fc fc5f 	bl	f9bc <bsd_os_errno_set>
   130fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13106:	b004      	add	sp, #16
   13108:	4770      	bx	lr
   1310a:	bf00      	nop

0001310c <rpc_transport_ipc_fault_handler>:
   1310c:	f7ff bfde 	b.w	130cc <bsd_platform_error_handler>

00013110 <bsd_platform_init>:
   13110:	b5f0      	push	{r4, r5, r6, r7, lr}
   13112:	b093      	sub	sp, #76	; 0x4c
   13114:	f7fe fe2a 	bl	11d6c <nrf_mem_init>
   13118:	2800      	cmp	r0, #0
   1311a:	d14c      	bne.n	131b6 <bsd_platform_init+0xa6>
   1311c:	4928      	ldr	r1, [pc, #160]	; (131c0 <bsd_platform_init+0xb0>)
   1311e:	a801      	add	r0, sp, #4
   13120:	f7fe fe98 	bl	11e54 <nrf_mem_register>
   13124:	2800      	cmp	r0, #0
   13126:	d146      	bne.n	131b6 <bsd_platform_init+0xa6>
   13128:	f7fc fd14 	bl	fb54 <bsd_os_init>
   1312c:	f004 f974 	bl	17418 <rpc_framework_init>
   13130:	2800      	cmp	r0, #0
   13132:	d140      	bne.n	131b6 <bsd_platform_init+0xa6>
   13134:	2320      	movs	r3, #32
   13136:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   1313a:	2208      	movs	r2, #8
   1313c:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   13140:	4f20      	ldr	r7, [pc, #128]	; (131c4 <bsd_platform_init+0xb4>)
   13142:	4e21      	ldr	r6, [pc, #132]	; (131c8 <bsd_platform_init+0xb8>)
   13144:	9303      	str	r3, [sp, #12]
   13146:	9305      	str	r3, [sp, #20]
   13148:	9307      	str	r3, [sp, #28]
   1314a:	4d20      	ldr	r5, [pc, #128]	; (131cc <bsd_platform_init+0xbc>)
   1314c:	9109      	str	r1, [sp, #36]	; 0x24
   1314e:	910d      	str	r1, [sp, #52]	; 0x34
   13150:	4c1f      	ldr	r4, [pc, #124]	; (131d0 <bsd_platform_init+0xc0>)
   13152:	4920      	ldr	r1, [pc, #128]	; (131d4 <bsd_platform_init+0xc4>)
   13154:	4b20      	ldr	r3, [pc, #128]	; (131d8 <bsd_platform_init+0xc8>)
   13156:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
   1315a:	eb0d 0002 	add.w	r0, sp, r2
   1315e:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   13162:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
   13166:	9702      	str	r7, [sp, #8]
   13168:	9604      	str	r6, [sp, #16]
   1316a:	9506      	str	r5, [sp, #24]
   1316c:	9408      	str	r4, [sp, #32]
   1316e:	910a      	str	r1, [sp, #40]	; 0x28
   13170:	930c      	str	r3, [sp, #48]	; 0x30
   13172:	f000 fbdf 	bl	13934 <rpc_transport_ipc_init>
   13176:	b108      	cbz	r0, 1317c <bsd_platform_init+0x6c>
   13178:	b013      	add	sp, #76	; 0x4c
   1317a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1317c:	f003 fefa 	bl	16f74 <interface_init>
   13180:	b9c8      	cbnz	r0, 131b6 <bsd_platform_init+0xa6>
   13182:	f7fe fa39 	bl	115f8 <at_interface_init>
   13186:	b9b0      	cbnz	r0, 131b6 <bsd_platform_init+0xa6>
   13188:	f002 fc24 	bl	159d4 <ip_interface_init>
   1318c:	b998      	cbnz	r0, 131b6 <bsd_platform_init+0xa6>
   1318e:	f7ff f883 	bl	12298 <tls_interface_init>
   13192:	b980      	cbnz	r0, 131b6 <bsd_platform_init+0xa6>
   13194:	f7ff fcc0 	bl	12b18 <mfu_interface_init>
   13198:	b968      	cbnz	r0, 131b6 <bsd_platform_init+0xa6>
   1319a:	f001 f9df 	bl	1455c <pdn_interface_init>
   1319e:	b950      	cbnz	r0, 131b6 <bsd_platform_init+0xa6>
   131a0:	f005 fc04 	bl	189ac <gnss_interface_init>
   131a4:	b938      	cbnz	r0, 131b6 <bsd_platform_init+0xa6>
   131a6:	f7fd fee9 	bl	10f7c <logobj_interface_init>
   131aa:	3000      	adds	r0, #0
   131ac:	bf18      	it	ne
   131ae:	2001      	movne	r0, #1
   131b0:	4240      	negs	r0, r0
   131b2:	b013      	add	sp, #76	; 0x4c
   131b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   131b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   131ba:	b013      	add	sp, #76	; 0x4c
   131bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   131be:	bf00      	nop
   131c0:	0001dd2c 	.word	0x0001dd2c
   131c4:	20010000 	.word	0x20010000
   131c8:	20010040 	.word	0x20010040
   131cc:	20010020 	.word	0x20010020
   131d0:	20017060 	.word	0x20017060
   131d4:	20010060 	.word	0x20010060
   131d8:	20013060 	.word	0x20013060

000131dc <bsd_platform_af_method_table_get>:
   131dc:	2805      	cmp	r0, #5
   131de:	d02a      	beq.n	13236 <bsd_platform_af_method_table_get+0x5a>
   131e0:	b508      	push	{r3, lr}
   131e2:	d914      	bls.n	1320e <bsd_platform_af_method_table_get+0x32>
   131e4:	280a      	cmp	r0, #10
   131e6:	d016      	beq.n	13216 <bsd_platform_af_method_table_get+0x3a>
   131e8:	2866      	cmp	r0, #102	; 0x66
   131ea:	d10b      	bne.n	13204 <bsd_platform_af_method_table_get+0x28>
   131ec:	f240 2302 	movw	r3, #514	; 0x202
   131f0:	429a      	cmp	r2, r3
   131f2:	d032      	beq.n	1325a <bsd_platform_af_method_table_get+0x7e>
   131f4:	f240 2305 	movw	r3, #517	; 0x205
   131f8:	429a      	cmp	r2, r3
   131fa:	d032      	beq.n	13262 <bsd_platform_af_method_table_get+0x86>
   131fc:	f240 2301 	movw	r3, #513	; 0x201
   13200:	429a      	cmp	r2, r3
   13202:	d02c      	beq.n	1325e <bsd_platform_af_method_table_get+0x82>
   13204:	2016      	movs	r0, #22
   13206:	f7fc fbd9 	bl	f9bc <bsd_os_errno_set>
   1320a:	2000      	movs	r0, #0
   1320c:	bd08      	pop	{r3, pc}
   1320e:	2801      	cmp	r0, #1
   13210:	d016      	beq.n	13240 <bsd_platform_af_method_table_get+0x64>
   13212:	2802      	cmp	r0, #2
   13214:	d1f6      	bne.n	13204 <bsd_platform_af_method_table_get+0x28>
   13216:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   1321a:	2a0a      	cmp	r2, #10
   1321c:	d819      	bhi.n	13252 <bsd_platform_af_method_table_get+0x76>
   1321e:	2301      	movs	r3, #1
   13220:	f240 4103 	movw	r1, #1027	; 0x403
   13224:	4810      	ldr	r0, [pc, #64]	; (13268 <bsd_platform_af_method_table_get+0x8c>)
   13226:	fa03 f202 	lsl.w	r2, r3, r2
   1322a:	420a      	tst	r2, r1
   1322c:	f100 0328 	add.w	r3, r0, #40	; 0x28
   13230:	bf18      	it	ne
   13232:	4618      	movne	r0, r3
   13234:	bd08      	pop	{r3, pc}
   13236:	2903      	cmp	r1, #3
   13238:	480c      	ldr	r0, [pc, #48]	; (1326c <bsd_platform_af_method_table_get+0x90>)
   1323a:	bf18      	it	ne
   1323c:	2000      	movne	r0, #0
   1323e:	4770      	bx	lr
   13240:	f240 2303 	movw	r3, #515	; 0x203
   13244:	429a      	cmp	r2, r3
   13246:	d006      	beq.n	13256 <bsd_platform_af_method_table_get+0x7a>
   13248:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   1324c:	d1da      	bne.n	13204 <bsd_platform_af_method_table_get+0x28>
   1324e:	4808      	ldr	r0, [pc, #32]	; (13270 <bsd_platform_af_method_table_get+0x94>)
   13250:	bd08      	pop	{r3, pc}
   13252:	4805      	ldr	r0, [pc, #20]	; (13268 <bsd_platform_af_method_table_get+0x8c>)
   13254:	bd08      	pop	{r3, pc}
   13256:	4807      	ldr	r0, [pc, #28]	; (13274 <bsd_platform_af_method_table_get+0x98>)
   13258:	bd08      	pop	{r3, pc}
   1325a:	4807      	ldr	r0, [pc, #28]	; (13278 <bsd_platform_af_method_table_get+0x9c>)
   1325c:	bd08      	pop	{r3, pc}
   1325e:	4807      	ldr	r0, [pc, #28]	; (1327c <bsd_platform_af_method_table_get+0xa0>)
   13260:	bd08      	pop	{r3, pc}
   13262:	4807      	ldr	r0, [pc, #28]	; (13280 <bsd_platform_af_method_table_get+0xa4>)
   13264:	bd08      	pop	{r3, pc}
   13266:	bf00      	nop
   13268:	0001dbfc 	.word	0x0001dbfc
   1326c:	0001dcec 	.word	0x0001dcec
   13270:	0001dc9c 	.word	0x0001dc9c
   13274:	0001dc4c 	.word	0x0001dc4c
   13278:	0001dc74 	.word	0x0001dc74
   1327c:	0001dbd4 	.word	0x0001dbd4
   13280:	0001dcc4 	.word	0x0001dcc4

00013284 <bsd_platform_fd_method_table_get>:
   13284:	b538      	push	{r3, r4, r5, lr}
   13286:	4605      	mov	r5, r0
   13288:	f003 ffa0 	bl	171cc <interface_socket_from_handle_get>
   1328c:	4604      	mov	r4, r0
   1328e:	b950      	cbnz	r0, 132a6 <bsd_platform_fd_method_table_get+0x22>
   13290:	4b2a      	ldr	r3, [pc, #168]	; (1333c <_flash_used+0x68>)
   13292:	43ab      	bics	r3, r5
   13294:	d032      	beq.n	132fc <_flash_used+0x28>
   13296:	4b2a      	ldr	r3, [pc, #168]	; (13340 <_flash_used+0x6c>)
   13298:	43ab      	bics	r3, r5
   1329a:	d043      	beq.n	13324 <_flash_used+0x50>
   1329c:	4b29      	ldr	r3, [pc, #164]	; (13344 <_flash_used+0x70>)
   1329e:	43ab      	bics	r3, r5
   132a0:	d146      	bne.n	13330 <_flash_used+0x5c>
   132a2:	4829      	ldr	r0, [pc, #164]	; (13348 <_flash_used+0x74>)
   132a4:	bd38      	pop	{r3, r4, r5, pc}
   132a6:	68c3      	ldr	r3, [r0, #12]
   132a8:	6942      	ldr	r2, [r0, #20]
   132aa:	2b05      	cmp	r3, #5
   132ac:	d034      	beq.n	13318 <_flash_used+0x44>
   132ae:	d911      	bls.n	132d4 <_flash_used>
   132b0:	2b0a      	cmp	r3, #10
   132b2:	d013      	beq.n	132dc <_flash_used+0x8>
   132b4:	2b66      	cmp	r3, #102	; 0x66
   132b6:	d12a      	bne.n	1330e <_flash_used+0x3a>
   132b8:	f240 2302 	movw	r3, #514	; 0x202
   132bc:	429a      	cmp	r2, r3
   132be:	d031      	beq.n	13324 <_flash_used+0x50>
   132c0:	f240 2305 	movw	r3, #517	; 0x205
   132c4:	429a      	cmp	r2, r3
   132c6:	d031      	beq.n	1332c <_flash_used+0x58>
   132c8:	f240 2301 	movw	r3, #513	; 0x201
   132cc:	429a      	cmp	r2, r3
   132ce:	d11e      	bne.n	1330e <_flash_used+0x3a>
   132d0:	481e      	ldr	r0, [pc, #120]	; (1334c <_flash_used+0x78>)
   132d2:	bd38      	pop	{r3, r4, r5, pc}
   132d4:	2b01      	cmp	r3, #1
   132d6:	d013      	beq.n	13300 <_flash_used+0x2c>
   132d8:	2b02      	cmp	r3, #2
   132da:	d118      	bne.n	1330e <_flash_used+0x3a>
   132dc:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   132e0:	2a0a      	cmp	r2, #10
   132e2:	d821      	bhi.n	13328 <_flash_used+0x54>
   132e4:	2301      	movs	r3, #1
   132e6:	f240 4103 	movw	r1, #1027	; 0x403
   132ea:	4819      	ldr	r0, [pc, #100]	; (13350 <_flash_used+0x7c>)
   132ec:	fa03 f202 	lsl.w	r2, r3, r2
   132f0:	420a      	tst	r2, r1
   132f2:	f100 0428 	add.w	r4, r0, #40	; 0x28
   132f6:	bf18      	it	ne
   132f8:	4620      	movne	r0, r4
   132fa:	bd38      	pop	{r3, r4, r5, pc}
   132fc:	4815      	ldr	r0, [pc, #84]	; (13354 <_flash_used+0x80>)
   132fe:	bd38      	pop	{r3, r4, r5, pc}
   13300:	f240 2303 	movw	r3, #515	; 0x203
   13304:	429a      	cmp	r2, r3
   13306:	d0f9      	beq.n	132fc <_flash_used+0x28>
   13308:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   1330c:	d0c9      	beq.n	132a2 <bsd_platform_fd_method_table_get+0x1e>
   1330e:	2016      	movs	r0, #22
   13310:	f7fc fb54 	bl	f9bc <bsd_os_errno_set>
   13314:	2000      	movs	r0, #0
   13316:	bd38      	pop	{r3, r4, r5, pc}
   13318:	6903      	ldr	r3, [r0, #16]
   1331a:	480f      	ldr	r0, [pc, #60]	; (13358 <_flash_used+0x84>)
   1331c:	2b03      	cmp	r3, #3
   1331e:	bf18      	it	ne
   13320:	2000      	movne	r0, #0
   13322:	bd38      	pop	{r3, r4, r5, pc}
   13324:	480d      	ldr	r0, [pc, #52]	; (1335c <_flash_used+0x88>)
   13326:	bd38      	pop	{r3, r4, r5, pc}
   13328:	4809      	ldr	r0, [pc, #36]	; (13350 <_flash_used+0x7c>)
   1332a:	bd38      	pop	{r3, r4, r5, pc}
   1332c:	480c      	ldr	r0, [pc, #48]	; (13360 <_flash_used+0x8c>)
   1332e:	bd38      	pop	{r3, r4, r5, pc}
   13330:	2009      	movs	r0, #9
   13332:	f7fc fb43 	bl	f9bc <bsd_os_errno_set>
   13336:	4620      	mov	r0, r4
   13338:	bd38      	pop	{r3, r4, r5, pc}
   1333a:	bf00      	nop
   1333c:	49765432 	.word	0x49765432
   13340:	789a0000 	.word	0x789a0000
   13344:	49765443 	.word	0x49765443
   13348:	0001dc9c 	.word	0x0001dc9c
   1334c:	0001dbd4 	.word	0x0001dbd4
   13350:	0001dbfc 	.word	0x0001dbfc
   13354:	0001dc4c 	.word	0x0001dc4c
   13358:	0001dcec 	.word	0x0001dcec
   1335c:	0001dc74 	.word	0x0001dc74
   13360:	0001dcc4 	.word	0x0001dcc4

00013364 <bsd_platform_getaddrinfo>:
   13364:	f003 ba7c 	b.w	16860 <ip_interface_getaddrinfo>

00013368 <bsd_platform_freeaddrinfo>:
   13368:	f003 bb70 	b.w	16a4c <ip_interface_freeaddrinfo>

0001336c <bsd_platform_poll>:
   1336c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13370:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   13374:	b083      	sub	sp, #12
   13376:	9200      	str	r2, [sp, #0]
   13378:	2800      	cmp	r0, #0
   1337a:	d048      	beq.n	1340e <bsd_platform_poll+0xa2>
   1337c:	1e4b      	subs	r3, r1, #1
   1337e:	2b08      	cmp	r3, #8
   13380:	d845      	bhi.n	1340e <bsd_platform_poll+0xa2>
   13382:	4680      	mov	r8, r0
   13384:	4605      	mov	r5, r0
   13386:	2400      	movs	r4, #0
   13388:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   1338c:	88ab      	ldrh	r3, [r5, #4]
   1338e:	6828      	ldr	r0, [r5, #0]
   13390:	f003 0303 	and.w	r3, r3, #3
   13394:	a901      	add	r1, sp, #4
   13396:	f043 061c 	orr.w	r6, r3, #28
   1339a:	f003 ff25 	bl	171e8 <interface_socket_event_get>
   1339e:	9b01      	ldr	r3, [sp, #4]
   133a0:	3508      	adds	r5, #8
   133a2:	4033      	ands	r3, r6
   133a4:	f825 3c02 	strh.w	r3, [r5, #-2]
   133a8:	b103      	cbz	r3, 133ac <bsd_platform_poll+0x40>
   133aa:	3401      	adds	r4, #1
   133ac:	42af      	cmp	r7, r5
   133ae:	d1ed      	bne.n	1338c <bsd_platform_poll+0x20>
   133b0:	bb9c      	cbnz	r4, 1341a <bsd_platform_poll+0xae>
   133b2:	4669      	mov	r1, sp
   133b4:	4640      	mov	r0, r8
   133b6:	f7fc fa6d 	bl	f894 <bsd_os_timedwait>
   133ba:	4607      	mov	r7, r0
   133bc:	b108      	cbz	r0, 133c2 <bsd_platform_poll+0x56>
   133be:	283c      	cmp	r0, #60	; 0x3c
   133c0:	d11d      	bne.n	133fe <bsd_platform_poll+0x92>
   133c2:	46c1      	mov	r9, r8
   133c4:	2600      	movs	r6, #0
   133c6:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   133ca:	f8d9 0000 	ldr.w	r0, [r9]
   133ce:	f003 0303 	and.w	r3, r3, #3
   133d2:	a901      	add	r1, sp, #4
   133d4:	f043 041c 	orr.w	r4, r3, #28
   133d8:	f003 ff06 	bl	171e8 <interface_socket_event_get>
   133dc:	9b01      	ldr	r3, [sp, #4]
   133de:	f109 0908 	add.w	r9, r9, #8
   133e2:	4023      	ands	r3, r4
   133e4:	f829 3c02 	strh.w	r3, [r9, #-2]
   133e8:	b103      	cbz	r3, 133ec <bsd_platform_poll+0x80>
   133ea:	3601      	adds	r6, #1
   133ec:	454d      	cmp	r5, r9
   133ee:	d1ea      	bne.n	133c6 <bsd_platform_poll+0x5a>
   133f0:	b90e      	cbnz	r6, 133f6 <bsd_platform_poll+0x8a>
   133f2:	2f00      	cmp	r7, #0
   133f4:	d0dd      	beq.n	133b2 <bsd_platform_poll+0x46>
   133f6:	4630      	mov	r0, r6
   133f8:	b003      	add	sp, #12
   133fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   133fe:	2023      	movs	r0, #35	; 0x23
   13400:	f7fc fadc 	bl	f9bc <bsd_os_errno_set>
   13404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13408:	b003      	add	sp, #12
   1340a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1340e:	2016      	movs	r0, #22
   13410:	f7fc fad4 	bl	f9bc <bsd_os_errno_set>
   13414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13418:	e7ee      	b.n	133f8 <bsd_platform_poll+0x8c>
   1341a:	4620      	mov	r0, r4
   1341c:	e7ec      	b.n	133f8 <bsd_platform_poll+0x8c>
   1341e:	bf00      	nop

00013420 <bsd_platform_fcntl>:
   13420:	b508      	push	{r3, lr}
   13422:	4b06      	ldr	r3, [pc, #24]	; (1343c <bsd_platform_fcntl+0x1c>)
   13424:	4383      	bics	r3, r0
   13426:	d003      	beq.n	13430 <bsd_platform_fcntl+0x10>
   13428:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1342c:	f003 bf5a 	b.w	172e4 <interface_socket_fcntl>
   13430:	202d      	movs	r0, #45	; 0x2d
   13432:	f7fc fac3 	bl	f9bc <bsd_os_errno_set>
   13436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1343a:	bd08      	pop	{r3, pc}
   1343c:	49765432 	.word	0x49765432

00013440 <ipc_trace_init>:
   13440:	4b01      	ldr	r3, [pc, #4]	; (13448 <ipc_trace_init+0x8>)
   13442:	6018      	str	r0, [r3, #0]
   13444:	4770      	bx	lr
   13446:	bf00      	nop
   13448:	200207bc 	.word	0x200207bc

0001344c <bsd_os_trace_irq_handler>:
   1344c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1344e:	4b6c      	ldr	r3, [pc, #432]	; (13600 <bsd_os_trace_irq_handler+0x1b4>)
   13450:	b083      	sub	sp, #12
   13452:	781b      	ldrb	r3, [r3, #0]
   13454:	2b00      	cmp	r3, #0
   13456:	f000 80ad 	beq.w	135b4 <bsd_os_trace_irq_handler+0x168>
   1345a:	4b6a      	ldr	r3, [pc, #424]	; (13604 <bsd_os_trace_irq_handler+0x1b8>)
   1345c:	681c      	ldr	r4, [r3, #0]
   1345e:	68a2      	ldr	r2, [r4, #8]
   13460:	6863      	ldr	r3, [r4, #4]
   13462:	429a      	cmp	r2, r3
   13464:	d02d      	beq.n	134c2 <bsd_os_trace_irq_handler+0x76>
   13466:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   1346a:	f8ad 3000 	strh.w	r3, [sp]
   1346e:	7823      	ldrb	r3, [r4, #0]
   13470:	466e      	mov	r6, sp
   13472:	f88d 3004 	strb.w	r3, [sp, #4]
   13476:	6863      	ldr	r3, [r4, #4]
   13478:	2105      	movs	r1, #5
   1347a:	429a      	cmp	r2, r3
   1347c:	bf2a      	itet	cs
   1347e:	6927      	ldrcs	r7, [r4, #16]
   13480:	1a9f      	subcc	r7, r3, r2
   13482:	1abf      	subcs	r7, r7, r2
   13484:	429a      	cmp	r2, r3
   13486:	bf94      	ite	ls
   13488:	2500      	movls	r5, #0
   1348a:	68e5      	ldrhi	r5, [r4, #12]
   1348c:	b2bf      	uxth	r7, r7
   1348e:	bf88      	it	hi
   13490:	1b5b      	subhi	r3, r3, r5
   13492:	4630      	mov	r0, r6
   13494:	bf88      	it	hi
   13496:	b29d      	uxthhi	r5, r3
   13498:	f8ad 7002 	strh.w	r7, [sp, #2]
   1349c:	f008 ffd0 	bl	1c440 <bsd_os_trace_put>
   134a0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   134a4:	68a0      	ldr	r0, [r4, #8]
   134a6:	f008 ffcb 	bl	1c440 <bsd_os_trace_put>
   134aa:	68a3      	ldr	r3, [r4, #8]
   134ac:	6922      	ldr	r2, [r4, #16]
   134ae:	441f      	add	r7, r3
   134b0:	4297      	cmp	r7, r2
   134b2:	bf08      	it	eq
   134b4:	68e3      	ldreq	r3, [r4, #12]
   134b6:	60a7      	str	r7, [r4, #8]
   134b8:	bf08      	it	eq
   134ba:	60a3      	streq	r3, [r4, #8]
   134bc:	2d00      	cmp	r5, #0
   134be:	f040 808d 	bne.w	135dc <bsd_os_trace_irq_handler+0x190>
   134c2:	4b51      	ldr	r3, [pc, #324]	; (13608 <bsd_os_trace_irq_handler+0x1bc>)
   134c4:	681c      	ldr	r4, [r3, #0]
   134c6:	68a2      	ldr	r2, [r4, #8]
   134c8:	6863      	ldr	r3, [r4, #4]
   134ca:	429a      	cmp	r2, r3
   134cc:	d02c      	beq.n	13528 <bsd_os_trace_irq_handler+0xdc>
   134ce:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   134d2:	f8ad 3000 	strh.w	r3, [sp]
   134d6:	7823      	ldrb	r3, [r4, #0]
   134d8:	466e      	mov	r6, sp
   134da:	f88d 3004 	strb.w	r3, [sp, #4]
   134de:	6863      	ldr	r3, [r4, #4]
   134e0:	2105      	movs	r1, #5
   134e2:	429a      	cmp	r2, r3
   134e4:	bf2a      	itet	cs
   134e6:	6927      	ldrcs	r7, [r4, #16]
   134e8:	1a9f      	subcc	r7, r3, r2
   134ea:	1abf      	subcs	r7, r7, r2
   134ec:	429a      	cmp	r2, r3
   134ee:	bf94      	ite	ls
   134f0:	2500      	movls	r5, #0
   134f2:	68e5      	ldrhi	r5, [r4, #12]
   134f4:	b2bf      	uxth	r7, r7
   134f6:	bf88      	it	hi
   134f8:	1b5b      	subhi	r3, r3, r5
   134fa:	4630      	mov	r0, r6
   134fc:	bf88      	it	hi
   134fe:	b29d      	uxthhi	r5, r3
   13500:	f8ad 7002 	strh.w	r7, [sp, #2]
   13504:	f008 ff9c 	bl	1c440 <bsd_os_trace_put>
   13508:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1350c:	68a0      	ldr	r0, [r4, #8]
   1350e:	f008 ff97 	bl	1c440 <bsd_os_trace_put>
   13512:	68a3      	ldr	r3, [r4, #8]
   13514:	6922      	ldr	r2, [r4, #16]
   13516:	441f      	add	r7, r3
   13518:	4297      	cmp	r7, r2
   1351a:	bf08      	it	eq
   1351c:	68e3      	ldreq	r3, [r4, #12]
   1351e:	60a7      	str	r7, [r4, #8]
   13520:	bf08      	it	eq
   13522:	60a3      	streq	r3, [r4, #8]
   13524:	2d00      	cmp	r5, #0
   13526:	d148      	bne.n	135ba <bsd_os_trace_irq_handler+0x16e>
   13528:	4b38      	ldr	r3, [pc, #224]	; (1360c <bsd_os_trace_irq_handler+0x1c0>)
   1352a:	681c      	ldr	r4, [r3, #0]
   1352c:	68a2      	ldr	r2, [r4, #8]
   1352e:	6863      	ldr	r3, [r4, #4]
   13530:	429a      	cmp	r2, r3
   13532:	d02b      	beq.n	1358c <bsd_os_trace_irq_handler+0x140>
   13534:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   13538:	f8ad 3000 	strh.w	r3, [sp]
   1353c:	7823      	ldrb	r3, [r4, #0]
   1353e:	466e      	mov	r6, sp
   13540:	f88d 3004 	strb.w	r3, [sp, #4]
   13544:	6863      	ldr	r3, [r4, #4]
   13546:	2105      	movs	r1, #5
   13548:	429a      	cmp	r2, r3
   1354a:	bf2a      	itet	cs
   1354c:	6927      	ldrcs	r7, [r4, #16]
   1354e:	1a9f      	subcc	r7, r3, r2
   13550:	1abf      	subcs	r7, r7, r2
   13552:	429a      	cmp	r2, r3
   13554:	bf94      	ite	ls
   13556:	2500      	movls	r5, #0
   13558:	68e5      	ldrhi	r5, [r4, #12]
   1355a:	b2bf      	uxth	r7, r7
   1355c:	bf88      	it	hi
   1355e:	1b5b      	subhi	r3, r3, r5
   13560:	4630      	mov	r0, r6
   13562:	bf88      	it	hi
   13564:	b29d      	uxthhi	r5, r3
   13566:	f8ad 7002 	strh.w	r7, [sp, #2]
   1356a:	f008 ff69 	bl	1c440 <bsd_os_trace_put>
   1356e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13572:	68a0      	ldr	r0, [r4, #8]
   13574:	f008 ff64 	bl	1c440 <bsd_os_trace_put>
   13578:	68a3      	ldr	r3, [r4, #8]
   1357a:	6922      	ldr	r2, [r4, #16]
   1357c:	441f      	add	r7, r3
   1357e:	4297      	cmp	r7, r2
   13580:	bf08      	it	eq
   13582:	68e3      	ldreq	r3, [r4, #12]
   13584:	60a7      	str	r7, [r4, #8]
   13586:	bf08      	it	eq
   13588:	60a3      	streq	r3, [r4, #8]
   1358a:	b90d      	cbnz	r5, 13590 <bsd_os_trace_irq_handler+0x144>
   1358c:	b003      	add	sp, #12
   1358e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13590:	4630      	mov	r0, r6
   13592:	2105      	movs	r1, #5
   13594:	f8ad 5002 	strh.w	r5, [sp, #2]
   13598:	f008 ff52 	bl	1c440 <bsd_os_trace_put>
   1359c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   135a0:	68e0      	ldr	r0, [r4, #12]
   135a2:	f008 ff4d 	bl	1c440 <bsd_os_trace_put>
   135a6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   135aa:	68e3      	ldr	r3, [r4, #12]
   135ac:	4413      	add	r3, r2
   135ae:	60a3      	str	r3, [r4, #8]
   135b0:	b003      	add	sp, #12
   135b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   135b4:	f7fc fac6 	bl	fb44 <bsd_os_trace_irq_clear>
   135b8:	e74f      	b.n	1345a <bsd_os_trace_irq_handler+0xe>
   135ba:	2105      	movs	r1, #5
   135bc:	4630      	mov	r0, r6
   135be:	f8ad 5002 	strh.w	r5, [sp, #2]
   135c2:	f008 ff3d 	bl	1c440 <bsd_os_trace_put>
   135c6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   135ca:	68e0      	ldr	r0, [r4, #12]
   135cc:	f008 ff38 	bl	1c440 <bsd_os_trace_put>
   135d0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   135d4:	68e3      	ldr	r3, [r4, #12]
   135d6:	4413      	add	r3, r2
   135d8:	60a3      	str	r3, [r4, #8]
   135da:	e7a5      	b.n	13528 <bsd_os_trace_irq_handler+0xdc>
   135dc:	2105      	movs	r1, #5
   135de:	4630      	mov	r0, r6
   135e0:	f8ad 5002 	strh.w	r5, [sp, #2]
   135e4:	f008 ff2c 	bl	1c440 <bsd_os_trace_put>
   135e8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   135ec:	68e0      	ldr	r0, [r4, #12]
   135ee:	f008 ff27 	bl	1c440 <bsd_os_trace_put>
   135f2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   135f6:	68e3      	ldr	r3, [r4, #12]
   135f8:	4413      	add	r3, r2
   135fa:	60a3      	str	r3, [r4, #8]
   135fc:	e761      	b.n	134c2 <bsd_os_trace_irq_handler+0x76>
   135fe:	bf00      	nop
   13600:	20023353 	.word	0x20023353
   13604:	200207b8 	.word	0x200207b8
   13608:	200207b0 	.word	0x200207b0
   1360c:	200207b4 	.word	0x200207b4

00013610 <ipc_trace_handle>:
   13610:	2200      	movs	r2, #0
   13612:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13616:	4bb0      	ldr	r3, [pc, #704]	; (138d8 <ipc_trace_handle+0x2c8>)
   13618:	b083      	sub	sp, #12
   1361a:	681b      	ldr	r3, [r3, #0]
   1361c:	6919      	ldr	r1, [r3, #16]
   1361e:	695c      	ldr	r4, [r3, #20]
   13620:	7c18      	ldrb	r0, [r3, #16]
   13622:	741a      	strb	r2, [r3, #16]
   13624:	7c58      	ldrb	r0, [r3, #17]
   13626:	745a      	strb	r2, [r3, #17]
   13628:	7c98      	ldrb	r0, [r3, #18]
   1362a:	749a      	strb	r2, [r3, #18]
   1362c:	7cd8      	ldrb	r0, [r3, #19]
   1362e:	74da      	strb	r2, [r3, #19]
   13630:	7d18      	ldrb	r0, [r3, #20]
   13632:	751a      	strb	r2, [r3, #20]
   13634:	7d58      	ldrb	r0, [r3, #21]
   13636:	755a      	strb	r2, [r3, #21]
   13638:	7d98      	ldrb	r0, [r3, #22]
   1363a:	759a      	strb	r2, [r3, #22]
   1363c:	7dd8      	ldrb	r0, [r3, #23]
   1363e:	75da      	strb	r2, [r3, #23]
   13640:	b1b9      	cbz	r1, 13672 <ipc_trace_handle+0x62>
   13642:	3901      	subs	r1, #1
   13644:	2903      	cmp	r1, #3
   13646:	d814      	bhi.n	13672 <ipc_trace_handle+0x62>
   13648:	e8df f011 	tbh	[pc, r1, lsl #1]
   1364c:	010300d6 	.word	0x010300d6
   13650:	00160004 	.word	0x00160004
   13654:	2501      	movs	r5, #1
   13656:	2003      	movs	r0, #3
   13658:	2200      	movs	r2, #0
   1365a:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   1365e:	4c9f      	ldr	r4, [pc, #636]	; (138dc <ipc_trace_handle+0x2cc>)
   13660:	7025      	strb	r5, [r4, #0]
   13662:	7a1c      	ldrb	r4, [r3, #8]
   13664:	7218      	strb	r0, [r3, #8]
   13666:	7a58      	ldrb	r0, [r3, #9]
   13668:	725a      	strb	r2, [r3, #9]
   1366a:	7a98      	ldrb	r0, [r3, #10]
   1366c:	729a      	strb	r2, [r3, #10]
   1366e:	7ada      	ldrb	r2, [r3, #11]
   13670:	72d9      	strb	r1, [r3, #11]
   13672:	b003      	add	sp, #12
   13674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13678:	2104      	movs	r1, #4
   1367a:	2200      	movs	r2, #0
   1367c:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   13680:	7a1c      	ldrb	r4, [r3, #8]
   13682:	7219      	strb	r1, [r3, #8]
   13684:	7a59      	ldrb	r1, [r3, #9]
   13686:	725a      	strb	r2, [r3, #9]
   13688:	4994      	ldr	r1, [pc, #592]	; (138dc <ipc_trace_handle+0x2cc>)
   1368a:	7a9c      	ldrb	r4, [r3, #10]
   1368c:	729a      	strb	r2, [r3, #10]
   1368e:	7adc      	ldrb	r4, [r3, #11]
   13690:	72d8      	strb	r0, [r3, #11]
   13692:	700a      	strb	r2, [r1, #0]
   13694:	780b      	ldrb	r3, [r1, #0]
   13696:	2b00      	cmp	r3, #0
   13698:	f000 8117 	beq.w	138ca <ipc_trace_handle+0x2ba>
   1369c:	4b90      	ldr	r3, [pc, #576]	; (138e0 <ipc_trace_handle+0x2d0>)
   1369e:	681c      	ldr	r4, [r3, #0]
   136a0:	68a2      	ldr	r2, [r4, #8]
   136a2:	6863      	ldr	r3, [r4, #4]
   136a4:	429a      	cmp	r2, r3
   136a6:	d02d      	beq.n	13704 <ipc_trace_handle+0xf4>
   136a8:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   136ac:	f8ad 3000 	strh.w	r3, [sp]
   136b0:	7823      	ldrb	r3, [r4, #0]
   136b2:	466e      	mov	r6, sp
   136b4:	f88d 3004 	strb.w	r3, [sp, #4]
   136b8:	6863      	ldr	r3, [r4, #4]
   136ba:	2105      	movs	r1, #5
   136bc:	429a      	cmp	r2, r3
   136be:	bf2a      	itet	cs
   136c0:	6927      	ldrcs	r7, [r4, #16]
   136c2:	1a9f      	subcc	r7, r3, r2
   136c4:	1abf      	subcs	r7, r7, r2
   136c6:	429a      	cmp	r2, r3
   136c8:	bf94      	ite	ls
   136ca:	2500      	movls	r5, #0
   136cc:	68e5      	ldrhi	r5, [r4, #12]
   136ce:	b2bf      	uxth	r7, r7
   136d0:	bf88      	it	hi
   136d2:	1b5b      	subhi	r3, r3, r5
   136d4:	4630      	mov	r0, r6
   136d6:	bf88      	it	hi
   136d8:	b29d      	uxthhi	r5, r3
   136da:	f8ad 7002 	strh.w	r7, [sp, #2]
   136de:	f008 feaf 	bl	1c440 <bsd_os_trace_put>
   136e2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   136e6:	68a0      	ldr	r0, [r4, #8]
   136e8:	f008 feaa 	bl	1c440 <bsd_os_trace_put>
   136ec:	68a3      	ldr	r3, [r4, #8]
   136ee:	6922      	ldr	r2, [r4, #16]
   136f0:	441f      	add	r7, r3
   136f2:	4297      	cmp	r7, r2
   136f4:	bf08      	it	eq
   136f6:	68e3      	ldreq	r3, [r4, #12]
   136f8:	60a7      	str	r7, [r4, #8]
   136fa:	bf08      	it	eq
   136fc:	60a3      	streq	r3, [r4, #8]
   136fe:	2d00      	cmp	r5, #0
   13700:	f040 80d2 	bne.w	138a8 <ipc_trace_handle+0x298>
   13704:	4b77      	ldr	r3, [pc, #476]	; (138e4 <ipc_trace_handle+0x2d4>)
   13706:	681c      	ldr	r4, [r3, #0]
   13708:	68a2      	ldr	r2, [r4, #8]
   1370a:	6863      	ldr	r3, [r4, #4]
   1370c:	429a      	cmp	r2, r3
   1370e:	d02d      	beq.n	1376c <ipc_trace_handle+0x15c>
   13710:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   13714:	f8ad 3000 	strh.w	r3, [sp]
   13718:	7823      	ldrb	r3, [r4, #0]
   1371a:	466e      	mov	r6, sp
   1371c:	f88d 3004 	strb.w	r3, [sp, #4]
   13720:	6863      	ldr	r3, [r4, #4]
   13722:	2105      	movs	r1, #5
   13724:	429a      	cmp	r2, r3
   13726:	bf2a      	itet	cs
   13728:	6927      	ldrcs	r7, [r4, #16]
   1372a:	1a9f      	subcc	r7, r3, r2
   1372c:	1abf      	subcs	r7, r7, r2
   1372e:	429a      	cmp	r2, r3
   13730:	bf94      	ite	ls
   13732:	2500      	movls	r5, #0
   13734:	68e5      	ldrhi	r5, [r4, #12]
   13736:	b2bf      	uxth	r7, r7
   13738:	bf88      	it	hi
   1373a:	1b5b      	subhi	r3, r3, r5
   1373c:	4630      	mov	r0, r6
   1373e:	bf88      	it	hi
   13740:	b29d      	uxthhi	r5, r3
   13742:	f8ad 7002 	strh.w	r7, [sp, #2]
   13746:	f008 fe7b 	bl	1c440 <bsd_os_trace_put>
   1374a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1374e:	68a0      	ldr	r0, [r4, #8]
   13750:	f008 fe76 	bl	1c440 <bsd_os_trace_put>
   13754:	68a3      	ldr	r3, [r4, #8]
   13756:	6922      	ldr	r2, [r4, #16]
   13758:	441f      	add	r7, r3
   1375a:	4297      	cmp	r7, r2
   1375c:	bf08      	it	eq
   1375e:	68e3      	ldreq	r3, [r4, #12]
   13760:	60a7      	str	r7, [r4, #8]
   13762:	bf08      	it	eq
   13764:	60a3      	streq	r3, [r4, #8]
   13766:	2d00      	cmp	r5, #0
   13768:	f040 808d 	bne.w	13886 <ipc_trace_handle+0x276>
   1376c:	4b5e      	ldr	r3, [pc, #376]	; (138e8 <ipc_trace_handle+0x2d8>)
   1376e:	681c      	ldr	r4, [r3, #0]
   13770:	68a2      	ldr	r2, [r4, #8]
   13772:	6863      	ldr	r3, [r4, #4]
   13774:	429a      	cmp	r2, r3
   13776:	f43f af7c 	beq.w	13672 <ipc_trace_handle+0x62>
   1377a:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   1377e:	f8ad 3000 	strh.w	r3, [sp]
   13782:	7823      	ldrb	r3, [r4, #0]
   13784:	466e      	mov	r6, sp
   13786:	f88d 3004 	strb.w	r3, [sp, #4]
   1378a:	6863      	ldr	r3, [r4, #4]
   1378c:	2105      	movs	r1, #5
   1378e:	429a      	cmp	r2, r3
   13790:	bf2a      	itet	cs
   13792:	6927      	ldrcs	r7, [r4, #16]
   13794:	1a9f      	subcc	r7, r3, r2
   13796:	1abf      	subcs	r7, r7, r2
   13798:	429a      	cmp	r2, r3
   1379a:	bf94      	ite	ls
   1379c:	2500      	movls	r5, #0
   1379e:	68e5      	ldrhi	r5, [r4, #12]
   137a0:	b2bf      	uxth	r7, r7
   137a2:	bf88      	it	hi
   137a4:	1b5b      	subhi	r3, r3, r5
   137a6:	4630      	mov	r0, r6
   137a8:	bf88      	it	hi
   137aa:	b29d      	uxthhi	r5, r3
   137ac:	f8ad 7002 	strh.w	r7, [sp, #2]
   137b0:	f008 fe46 	bl	1c440 <bsd_os_trace_put>
   137b4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   137b8:	68a0      	ldr	r0, [r4, #8]
   137ba:	f008 fe41 	bl	1c440 <bsd_os_trace_put>
   137be:	68a3      	ldr	r3, [r4, #8]
   137c0:	6922      	ldr	r2, [r4, #16]
   137c2:	441f      	add	r7, r3
   137c4:	4297      	cmp	r7, r2
   137c6:	bf08      	it	eq
   137c8:	68e3      	ldreq	r3, [r4, #12]
   137ca:	60a7      	str	r7, [r4, #8]
   137cc:	bf08      	it	eq
   137ce:	60a3      	streq	r3, [r4, #8]
   137d0:	2d00      	cmp	r5, #0
   137d2:	f43f af4e 	beq.w	13672 <ipc_trace_handle+0x62>
   137d6:	2105      	movs	r1, #5
   137d8:	4630      	mov	r0, r6
   137da:	f8ad 5002 	strh.w	r5, [sp, #2]
   137de:	f008 fe2f 	bl	1c440 <bsd_os_trace_put>
   137e2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   137e6:	68e0      	ldr	r0, [r4, #12]
   137e8:	f008 fe2a 	bl	1c440 <bsd_os_trace_put>
   137ec:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   137f0:	68e3      	ldr	r3, [r4, #12]
   137f2:	4413      	add	r3, r2
   137f4:	60a3      	str	r3, [r4, #8]
   137f6:	e73c      	b.n	13672 <ipc_trace_handle+0x62>
   137f8:	4a38      	ldr	r2, [pc, #224]	; (138dc <ipc_trace_handle+0x2cc>)
   137fa:	7811      	ldrb	r1, [r2, #0]
   137fc:	b109      	cbz	r1, 13802 <ipc_trace_handle+0x1f2>
   137fe:	2100      	movs	r1, #0
   13800:	7011      	strb	r1, [r2, #0]
   13802:	68a5      	ldr	r5, [r4, #8]
   13804:	2d00      	cmp	r5, #0
   13806:	d039      	beq.n	1387c <ipc_trace_handle+0x26c>
   13808:	f04f 0c00 	mov.w	ip, #0
   1380c:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 138e4 <ipc_trace_handle+0x2d4>
   13810:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 138e0 <ipc_trace_handle+0x2d0>
   13814:	4934      	ldr	r1, [pc, #208]	; (138e8 <ipc_trace_handle+0x2d8>)
   13816:	46e1      	mov	r9, ip
   13818:	4666      	mov	r6, ip
   1381a:	4662      	mov	r2, ip
   1381c:	f8d1 e000 	ldr.w	lr, [r1]
   13820:	f8da 8000 	ldr.w	r8, [sl]
   13824:	f8db 7000 	ldr.w	r7, [fp]
   13828:	e008      	b.n	1383c <ipc_trace_handle+0x22c>
   1382a:	2963      	cmp	r1, #99	; 0x63
   1382c:	d016      	beq.n	1385c <ipc_trace_handle+0x24c>
   1382e:	2961      	cmp	r1, #97	; 0x61
   13830:	bf04      	itt	eq
   13832:	4607      	moveq	r7, r0
   13834:	2601      	moveq	r6, #1
   13836:	3201      	adds	r2, #1
   13838:	42aa      	cmp	r2, r5
   1383a:	d013      	beq.n	13864 <ipc_trace_handle+0x254>
   1383c:	1c91      	adds	r1, r2, #2
   1383e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   13842:	6848      	ldr	r0, [r1, #4]
   13844:	7801      	ldrb	r1, [r0, #0]
   13846:	2962      	cmp	r1, #98	; 0x62
   13848:	d1ef      	bne.n	1382a <ipc_trace_handle+0x21a>
   1384a:	4680      	mov	r8, r0
   1384c:	f04f 0901 	mov.w	r9, #1
   13850:	e7f1      	b.n	13836 <ipc_trace_handle+0x226>
   13852:	f7fc f96f 	bl	fb34 <bsd_os_trace_irq_set>
   13856:	b003      	add	sp, #12
   13858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1385c:	4686      	mov	lr, r0
   1385e:	f04f 0c01 	mov.w	ip, #1
   13862:	e7e8      	b.n	13836 <ipc_trace_handle+0x226>
   13864:	bba6      	cbnz	r6, 138d0 <ipc_trace_handle+0x2c0>
   13866:	f1b9 0f00 	cmp.w	r9, #0
   1386a:	d001      	beq.n	13870 <ipc_trace_handle+0x260>
   1386c:	f8ca 8000 	str.w	r8, [sl]
   13870:	f1bc 0f00 	cmp.w	ip, #0
   13874:	d002      	beq.n	1387c <ipc_trace_handle+0x26c>
   13876:	4a1c      	ldr	r2, [pc, #112]	; (138e8 <ipc_trace_handle+0x2d8>)
   13878:	f8c2 e000 	str.w	lr, [r2]
   1387c:	2001      	movs	r0, #1
   1387e:	2200      	movs	r2, #0
   13880:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   13884:	e6ed      	b.n	13662 <ipc_trace_handle+0x52>
   13886:	2105      	movs	r1, #5
   13888:	4630      	mov	r0, r6
   1388a:	f8ad 5002 	strh.w	r5, [sp, #2]
   1388e:	f008 fdd7 	bl	1c440 <bsd_os_trace_put>
   13892:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13896:	68e0      	ldr	r0, [r4, #12]
   13898:	f008 fdd2 	bl	1c440 <bsd_os_trace_put>
   1389c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   138a0:	68e3      	ldr	r3, [r4, #12]
   138a2:	4413      	add	r3, r2
   138a4:	60a3      	str	r3, [r4, #8]
   138a6:	e761      	b.n	1376c <ipc_trace_handle+0x15c>
   138a8:	2105      	movs	r1, #5
   138aa:	4630      	mov	r0, r6
   138ac:	f8ad 5002 	strh.w	r5, [sp, #2]
   138b0:	f008 fdc6 	bl	1c440 <bsd_os_trace_put>
   138b4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   138b8:	68e0      	ldr	r0, [r4, #12]
   138ba:	f008 fdc1 	bl	1c440 <bsd_os_trace_put>
   138be:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   138c2:	68e3      	ldr	r3, [r4, #12]
   138c4:	4413      	add	r3, r2
   138c6:	60a3      	str	r3, [r4, #8]
   138c8:	e71c      	b.n	13704 <ipc_trace_handle+0xf4>
   138ca:	f7fc f93b 	bl	fb44 <bsd_os_trace_irq_clear>
   138ce:	e6e5      	b.n	1369c <ipc_trace_handle+0x8c>
   138d0:	f8cb 7000 	str.w	r7, [fp]
   138d4:	e7c7      	b.n	13866 <ipc_trace_handle+0x256>
   138d6:	bf00      	nop
   138d8:	200207bc 	.word	0x200207bc
   138dc:	20023353 	.word	0x20023353
   138e0:	200207b8 	.word	0x200207b8
   138e4:	200207b0 	.word	0x200207b0
   138e8:	200207b4 	.word	0x200207b4

000138ec <rpc_trace_coredump_in_progress>:
   138ec:	4b01      	ldr	r3, [pc, #4]	; (138f4 <rpc_trace_coredump_in_progress+0x8>)
   138ee:	7818      	ldrb	r0, [r3, #0]
   138f0:	4770      	bx	lr
   138f2:	bf00      	nop
   138f4:	20023353 	.word	0x20023353

000138f8 <transport_reset>:
   138f8:	2000      	movs	r0, #0
   138fa:	4770      	bx	lr

000138fc <transport_data_free>:
   138fc:	4b0b      	ldr	r3, [pc, #44]	; (1392c <transport_data_free+0x30>)
   138fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   13902:	4413      	add	r3, r2
   13904:	4298      	cmp	r0, r3
   13906:	d20d      	bcs.n	13924 <transport_data_free+0x28>
   13908:	4282      	cmp	r2, r0
   1390a:	d80b      	bhi.n	13924 <transport_data_free+0x28>
   1390c:	b510      	push	{r4, lr}
   1390e:	4604      	mov	r4, r0
   13910:	f000 fd5a 	bl	143c8 <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   13914:	b140      	cbz	r0, 13928 <transport_data_free+0x2c>
   13916:	4a06      	ldr	r2, [pc, #24]	; (13930 <transport_data_free+0x34>)
   13918:	6084      	str	r4, [r0, #8]
   1391a:	6002      	str	r2, [r0, #0]
   1391c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13920:	f000 bc9a 	b.w	14258 <rpc_transport_ipc_tx_send>
   13924:	f7fe bbd0 	b.w	120c8 <nrf_shared_free>
   13928:	bd10      	pop	{r4, pc}
   1392a:	bf00      	nop
   1392c:	200207c0 	.word	0x200207c0
   13930:	00020001 	.word	0x00020001

00013934 <rpc_transport_ipc_init>:
   13934:	2800      	cmp	r0, #0
   13936:	d02b      	beq.n	13990 <rpc_transport_ipc_init+0x5c>
   13938:	b530      	push	{r4, r5, lr}
   1393a:	b089      	sub	sp, #36	; 0x24
   1393c:	aa01      	add	r2, sp, #4
   1393e:	4669      	mov	r1, sp
   13940:	4604      	mov	r4, r0
   13942:	f000 fb9f 	bl	14084 <rpc_transport_ipc_tx_init>
   13946:	4603      	mov	r3, r0
   13948:	b140      	cbz	r0, 1395c <rpc_transport_ipc_init+0x28>
   1394a:	4a13      	ldr	r2, [pc, #76]	; (13998 <rpc_transport_ipc_init+0x64>)
   1394c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   13950:	c803      	ldmia	r0, {r0, r1}
   13952:	e882 0003 	stmia.w	r2, {r0, r1}
   13956:	4618      	mov	r0, r3
   13958:	b009      	add	sp, #36	; 0x24
   1395a:	bd30      	pop	{r4, r5, pc}
   1395c:	e9dd 1200 	ldrd	r1, r2, [sp]
   13960:	4620      	mov	r0, r4
   13962:	f000 f84b 	bl	139fc <rpc_transport_ipc_rx_init>
   13966:	4603      	mov	r3, r0
   13968:	2800      	cmp	r0, #0
   1396a:	d1ee      	bne.n	1394a <rpc_transport_ipc_init+0x16>
   1396c:	4b0b      	ldr	r3, [pc, #44]	; (1399c <rpc_transport_ipc_init+0x68>)
   1396e:	490c      	ldr	r1, [pc, #48]	; (139a0 <rpc_transport_ipc_init+0x6c>)
   13970:	480c      	ldr	r0, [pc, #48]	; (139a4 <rpc_transport_ipc_init+0x70>)
   13972:	4a0d      	ldr	r2, [pc, #52]	; (139a8 <rpc_transport_ipc_init+0x74>)
   13974:	9303      	str	r3, [sp, #12]
   13976:	4d0d      	ldr	r5, [pc, #52]	; (139ac <rpc_transport_ipc_init+0x78>)
   13978:	4b0d      	ldr	r3, [pc, #52]	; (139b0 <rpc_transport_ipc_init+0x7c>)
   1397a:	9104      	str	r1, [sp, #16]
   1397c:	9005      	str	r0, [sp, #20]
   1397e:	490d      	ldr	r1, [pc, #52]	; (139b4 <rpc_transport_ipc_init+0x80>)
   13980:	a802      	add	r0, sp, #8
   13982:	9307      	str	r3, [sp, #28]
   13984:	9506      	str	r5, [sp, #24]
   13986:	9202      	str	r2, [sp, #8]
   13988:	f003 fec8 	bl	1771c <rpc_transport_register>
   1398c:	4603      	mov	r3, r0
   1398e:	e7dc      	b.n	1394a <rpc_transport_ipc_init+0x16>
   13990:	230e      	movs	r3, #14
   13992:	4618      	mov	r0, r3
   13994:	4770      	bx	lr
   13996:	bf00      	nop
   13998:	200207c0 	.word	0x200207c0
   1399c:	00014359 	.word	0x00014359
   139a0:	00014429 	.word	0x00014429
   139a4:	00014019 	.word	0x00014019
   139a8:	00014259 	.word	0x00014259
   139ac:	000138fd 	.word	0x000138fd
   139b0:	000138f9 	.word	0x000138f9
   139b4:	200207c8 	.word	0x200207c8

000139b8 <rpc_transport_rx_handle>:
   139b8:	b160      	cbz	r0, 139d4 <rpc_transport_rx_handle+0x1c>
   139ba:	b508      	push	{r3, lr}
   139bc:	6843      	ldr	r3, [r0, #4]
   139be:	b2db      	uxtb	r3, r3
   139c0:	2b02      	cmp	r3, #2
   139c2:	d00e      	beq.n	139e2 <rpc_transport_rx_handle+0x2a>
   139c4:	6803      	ldr	r3, [r0, #0]
   139c6:	0c1b      	lsrs	r3, r3, #16
   139c8:	2b02      	cmp	r3, #2
   139ca:	d005      	beq.n	139d8 <rpc_transport_rx_handle+0x20>
   139cc:	2b04      	cmp	r3, #4
   139ce:	d00e      	beq.n	139ee <rpc_transport_rx_handle+0x36>
   139d0:	2000      	movs	r0, #0
   139d2:	bd08      	pop	{r3, pc}
   139d4:	2000      	movs	r0, #0
   139d6:	4770      	bx	lr
   139d8:	6880      	ldr	r0, [r0, #8]
   139da:	f7fe fb75 	bl	120c8 <nrf_shared_free>
   139de:	2000      	movs	r0, #0
   139e0:	bd08      	pop	{r3, pc}
   139e2:	4601      	mov	r1, r0
   139e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   139e8:	4803      	ldr	r0, [pc, #12]	; (139f8 <rpc_transport_rx_handle+0x40>)
   139ea:	f003 bd89 	b.w	17500 <rpc_transport_input>
   139ee:	4802      	ldr	r0, [pc, #8]	; (139f8 <rpc_transport_rx_handle+0x40>)
   139f0:	f003 fef4 	bl	177dc <rpc_transport_unregister>
   139f4:	2000      	movs	r0, #0
   139f6:	bd08      	pop	{r3, pc}
   139f8:	200207c8 	.word	0x200207c8

000139fc <rpc_transport_ipc_rx_init>:
   139fc:	2800      	cmp	r0, #0
   139fe:	f000 80ff 	beq.w	13c00 <rpc_transport_ipc_rx_init+0x204>
   13a02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a06:	6805      	ldr	r5, [r0, #0]
   13a08:	b095      	sub	sp, #84	; 0x54
   13a0a:	2d00      	cmp	r5, #0
   13a0c:	f000 80ee 	beq.w	13bec <rpc_transport_ipc_rx_init+0x1f0>
   13a10:	6883      	ldr	r3, [r0, #8]
   13a12:	2b00      	cmp	r3, #0
   13a14:	f000 80ea 	beq.w	13bec <rpc_transport_ipc_rx_init+0x1f0>
   13a18:	6907      	ldr	r7, [r0, #16]
   13a1a:	2f00      	cmp	r7, #0
   13a1c:	f000 80e6 	beq.w	13bec <rpc_transport_ipc_rx_init+0x1f0>
   13a20:	6a84      	ldr	r4, [r0, #40]	; 0x28
   13a22:	2c00      	cmp	r4, #0
   13a24:	f000 80e2 	beq.w	13bec <rpc_transport_ipc_rx_init+0x1f0>
   13a28:	6844      	ldr	r4, [r0, #4]
   13a2a:	2c1b      	cmp	r4, #27
   13a2c:	f240 80e3 	bls.w	13bf6 <rpc_transport_ipc_rx_init+0x1fa>
   13a30:	68c4      	ldr	r4, [r0, #12]
   13a32:	2c0b      	cmp	r4, #11
   13a34:	f240 80df 	bls.w	13bf6 <rpc_transport_ipc_rx_init+0x1fa>
   13a38:	f8d0 e014 	ldr.w	lr, [r0, #20]
   13a3c:	f1be 0f17 	cmp.w	lr, #23
   13a40:	f240 80d9 	bls.w	13bf6 <rpc_transport_ipc_rx_init+0x1fa>
   13a44:	2600      	movs	r6, #0
   13a46:	4604      	mov	r4, r0
   13a48:	486f      	ldr	r0, [pc, #444]	; (13c08 <rpc_transport_ipc_rx_init+0x20c>)
   13a4a:	e9cd 1200 	strd	r1, r2, [sp]
   13a4e:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 13c28 <rpc_transport_ipc_rx_init+0x22c>
   13a52:	496e      	ldr	r1, [pc, #440]	; (13c0c <rpc_transport_ipc_rx_init+0x210>)
   13a54:	8006      	strh	r6, [r0, #0]
   13a56:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   13a58:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 13c2c <rpc_transport_ipc_rx_init+0x230>
   13a5c:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 13c30 <rpc_transport_ipc_rx_init+0x234>
   13a60:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 13c34 <rpc_transport_ipc_rx_init+0x238>
   13a64:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 13c38 <rpc_transport_ipc_rx_init+0x23c>
   13a68:	4672      	mov	r2, lr
   13a6a:	600e      	str	r6, [r1, #0]
   13a6c:	f8ca 0000 	str.w	r0, [sl]
   13a70:	4631      	mov	r1, r6
   13a72:	4638      	mov	r0, r7
   13a74:	f8cc 6000 	str.w	r6, [ip]
   13a78:	f8cb 3000 	str.w	r3, [fp]
   13a7c:	f8c8 6000 	str.w	r6, [r8]
   13a80:	f8c9 6000 	str.w	r6, [r9]
   13a84:	f008 f9f0 	bl	1be68 <memset>
   13a88:	69e3      	ldr	r3, [r4, #28]
   13a8a:	4638      	mov	r0, r7
   13a8c:	603b      	str	r3, [r7, #0]
   13a8e:	69a3      	ldr	r3, [r4, #24]
   13a90:	607b      	str	r3, [r7, #4]
   13a92:	f7ff fcd5 	bl	13440 <ipc_trace_init>
   13a96:	2201      	movs	r2, #1
   13a98:	f04f 0c04 	mov.w	ip, #4
   13a9c:	4b5c      	ldr	r3, [pc, #368]	; (13c10 <rpc_transport_ipc_rx_init+0x214>)
   13a9e:	495d      	ldr	r1, [pc, #372]	; (13c14 <rpc_transport_ipc_rx_init+0x218>)
   13aa0:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   13aa4:	6809      	ldr	r1, [r1, #0]
   13aa6:	2080      	movs	r0, #128	; 0x80
   13aa8:	9104      	str	r1, [sp, #16]
   13aaa:	495b      	ldr	r1, [pc, #364]	; (13c18 <rpc_transport_ipc_rx_init+0x21c>)
   13aac:	f8dd e010 	ldr.w	lr, [sp, #16]
   13ab0:	f8c3 6614 	str.w	r6, [r3, #1556]	; 0x614
   13ab4:	6809      	ldr	r1, [r1, #0]
   13ab6:	702e      	strb	r6, [r5, #0]
   13ab8:	9103      	str	r1, [sp, #12]
   13aba:	706e      	strb	r6, [r5, #1]
   13abc:	70ee      	strb	r6, [r5, #3]
   13abe:	70aa      	strb	r2, [r5, #2]
   13ac0:	9903      	ldr	r1, [sp, #12]
   13ac2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   13ac4:	f8db e000 	ldr.w	lr, [fp]
   13ac8:	6069      	str	r1, [r5, #4]
   13aca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   13acc:	9c01      	ldr	r4, [sp, #4]
   13ace:	60a9      	str	r1, [r5, #8]
   13ad0:	60ec      	str	r4, [r5, #12]
   13ad2:	9c00      	ldr	r4, [sp, #0]
   13ad4:	4951      	ldr	r1, [pc, #324]	; (13c1c <rpc_transport_ipc_rx_init+0x220>)
   13ad6:	61af      	str	r7, [r5, #24]
   13ad8:	f8c5 e014 	str.w	lr, [r5, #20]
   13adc:	612c      	str	r4, [r5, #16]
   13ade:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   13ae2:	680c      	ldr	r4, [r1, #0]
   13ae4:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   13ae8:	9405      	str	r4, [sp, #20]
   13aea:	9c05      	ldr	r4, [sp, #20]
   13aec:	f8c3 c598 	str.w	ip, [r3, #1432]	; 0x598
   13af0:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   13af4:	f44f 6780 	mov.w	r7, #1024	; 0x400
   13af8:	9406      	str	r4, [sp, #24]
   13afa:	9c06      	ldr	r4, [sp, #24]
   13afc:	2410      	movs	r4, #16
   13afe:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   13b02:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   13b06:	4d46      	ldr	r5, [pc, #280]	; (13c20 <rpc_transport_ipc_rx_init+0x224>)
   13b08:	9407      	str	r4, [sp, #28]
   13b0a:	9c07      	ldr	r4, [sp, #28]
   13b0c:	2440      	movs	r4, #64	; 0x40
   13b0e:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   13b12:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   13b16:	9408      	str	r4, [sp, #32]
   13b18:	9c08      	ldr	r4, [sp, #32]
   13b1a:	f8c3 05ac 	str.w	r0, [r3, #1452]	; 0x5ac
   13b1e:	f8d1 04ac 	ldr.w	r0, [r1, #1196]	; 0x4ac
   13b22:	9009      	str	r0, [sp, #36]	; 0x24
   13b24:	9809      	ldr	r0, [sp, #36]	; 0x24
   13b26:	f8c3 6100 	str.w	r6, [r3, #256]	; 0x100
   13b2a:	6808      	ldr	r0, [r1, #0]
   13b2c:	900a      	str	r0, [sp, #40]	; 0x28
   13b2e:	980a      	ldr	r0, [sp, #40]	; 0x28
   13b30:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
   13b34:	6888      	ldr	r0, [r1, #8]
   13b36:	900b      	str	r0, [sp, #44]	; 0x2c
   13b38:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13b3a:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
   13b3e:	6908      	ldr	r0, [r1, #16]
   13b40:	900c      	str	r0, [sp, #48]	; 0x30
   13b42:	980c      	ldr	r0, [sp, #48]	; 0x30
   13b44:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
   13b48:	6988      	ldr	r0, [r1, #24]
   13b4a:	900d      	str	r0, [sp, #52]	; 0x34
   13b4c:	980d      	ldr	r0, [sp, #52]	; 0x34
   13b4e:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
   13b52:	69c8      	ldr	r0, [r1, #28]
   13b54:	f501 7101 	add.w	r1, r1, #516	; 0x204
   13b58:	900e      	str	r0, [sp, #56]	; 0x38
   13b5a:	980e      	ldr	r0, [sp, #56]	; 0x38
   13b5c:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   13b60:	4310      	orrs	r0, r2
   13b62:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
   13b66:	680c      	ldr	r4, [r1, #0]
   13b68:	482e      	ldr	r0, [pc, #184]	; (13c24 <rpc_transport_ipc_rx_init+0x228>)
   13b6a:	940f      	str	r4, [sp, #60]	; 0x3c
   13b6c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   13b6e:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   13b72:	ea44 040c 	orr.w	r4, r4, ip
   13b76:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   13b7a:	680c      	ldr	r4, [r1, #0]
   13b7c:	9410      	str	r4, [sp, #64]	; 0x40
   13b7e:	9c10      	ldr	r4, [sp, #64]	; 0x40
   13b80:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   13b84:	f044 0410 	orr.w	r4, r4, #16
   13b88:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   13b8c:	680c      	ldr	r4, [r1, #0]
   13b8e:	9411      	str	r4, [sp, #68]	; 0x44
   13b90:	9c11      	ldr	r4, [sp, #68]	; 0x44
   13b92:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   13b96:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   13b9a:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   13b9e:	680c      	ldr	r4, [r1, #0]
   13ba0:	9412      	str	r4, [sp, #72]	; 0x48
   13ba2:	9c12      	ldr	r4, [sp, #72]	; 0x48
   13ba4:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   13ba8:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   13bac:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   13bb0:	f8da 3000 	ldr.w	r3, [sl]
   13bb4:	6809      	ldr	r1, [r1, #0]
   13bb6:	015b      	lsls	r3, r3, #5
   13bb8:	9113      	str	r1, [sp, #76]	; 0x4c
   13bba:	b2db      	uxtb	r3, r3
   13bbc:	9913      	ldr	r1, [sp, #76]	; 0x4c
   13bbe:	f8c8 2000 	str.w	r2, [r8]
   13bc2:	f880 332a 	strb.w	r3, [r0, #810]	; 0x32a
   13bc6:	f8c0 7184 	str.w	r7, [r0, #388]	; 0x184
   13bca:	6047      	str	r7, [r0, #4]
   13bcc:	9602      	str	r6, [sp, #8]
   13bce:	f8c5 6610 	str.w	r6, [r5, #1552]	; 0x610
   13bd2:	f8d5 3610 	ldr.w	r3, [r5, #1552]	; 0x610
   13bd6:	9302      	str	r3, [sp, #8]
   13bd8:	9b02      	ldr	r3, [sp, #8]
   13bda:	f8d8 3000 	ldr.w	r3, [r8]
   13bde:	2b01      	cmp	r3, #1
   13be0:	d0fb      	beq.n	13bda <rpc_transport_ipc_rx_init+0x1de>
   13be2:	f8d9 0000 	ldr.w	r0, [r9]
   13be6:	b015      	add	sp, #84	; 0x54
   13be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bec:	f24c 000e 	movw	r0, #49166	; 0xc00e
   13bf0:	b015      	add	sp, #84	; 0x54
   13bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bf6:	f24c 0009 	movw	r0, #49161	; 0xc009
   13bfa:	b015      	add	sp, #84	; 0x54
   13bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c00:	f24c 000e 	movw	r0, #49166	; 0xc00e
   13c04:	4770      	bx	lr
   13c06:	bf00      	nop
   13c08:	20021e1e 	.word	0x20021e1e
   13c0c:	200207d8 	.word	0x200207d8
   13c10:	4002a000 	.word	0x4002a000
   13c14:	4002a610 	.word	0x4002a610
   13c18:	4002a614 	.word	0x4002a614
   13c1c:	4002a590 	.word	0x4002a590
   13c20:	40005000 	.word	0x40005000
   13c24:	e000e100 	.word	0xe000e100
   13c28:	200207d0 	.word	0x200207d0
   13c2c:	200207dc 	.word	0x200207dc
   13c30:	200207d4 	.word	0x200207d4
   13c34:	200207e0 	.word	0x200207e0
   13c38:	200207cc 	.word	0x200207cc

00013c3c <IPC_IRQHandler>:
   13c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c40:	f44f 6580 	mov.w	r5, #1024	; 0x400
   13c44:	4ca7      	ldr	r4, [pc, #668]	; (13ee4 <IPC_IRQHandler+0x2a8>)
   13c46:	b087      	sub	sp, #28
   13c48:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   13c4c:	f3bf 8f4f 	dsb	sy
   13c50:	f3bf 8f6f 	isb	sy
   13c54:	4ea4      	ldr	r6, [pc, #656]	; (13ee8 <IPC_IRQHandler+0x2ac>)
   13c56:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
   13c5a:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   13c5e:	061f      	lsls	r7, r3, #24
   13c60:	f100 80c8 	bmi.w	13df4 <IPC_IRQHandler+0x1b8>
   13c64:	4ba0      	ldr	r3, [pc, #640]	; (13ee8 <IPC_IRQHandler+0x2ac>)
   13c66:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   13c6a:	07d0      	lsls	r0, r2, #31
   13c6c:	f100 80d4 	bmi.w	13e18 <IPC_IRQHandler+0x1dc>
   13c70:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   13c74:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   13c78:	f040 80b6 	bne.w	13de8 <IPC_IRQHandler+0x1ac>
   13c7c:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   13c80:	0749      	lsls	r1, r1, #29
   13c82:	f100 80e6 	bmi.w	13e52 <IPC_IRQHandler+0x216>
   13c86:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   13c8a:	06da      	lsls	r2, r3, #27
   13c8c:	f140 809d 	bpl.w	13dca <IPC_IRQHandler+0x18e>
   13c90:	2100      	movs	r1, #0
   13c92:	4a95      	ldr	r2, [pc, #596]	; (13ee8 <IPC_IRQHandler+0x2ac>)
   13c94:	4b95      	ldr	r3, [pc, #596]	; (13eec <IPC_IRQHandler+0x2b0>)
   13c96:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
   13c9a:	681b      	ldr	r3, [r3, #0]
   13c9c:	9304      	str	r3, [sp, #16]
   13c9e:	9b04      	ldr	r3, [sp, #16]
   13ca0:	f8df 8270 	ldr.w	r8, [pc, #624]	; 13f14 <IPC_IRQHandler+0x2d8>
   13ca4:	4f92      	ldr	r7, [pc, #584]	; (13ef0 <IPC_IRQHandler+0x2b4>)
   13ca6:	f8df 9270 	ldr.w	r9, [pc, #624]	; 13f18 <IPC_IRQHandler+0x2dc>
   13caa:	f8d8 a000 	ldr.w	sl, [r8]
   13cae:	f8da 1000 	ldr.w	r1, [sl]
   13cb2:	2900      	cmp	r1, #0
   13cb4:	d03f      	beq.n	13d36 <IPC_IRQHandler+0xfa>
   13cb6:	2200      	movs	r2, #0
   13cb8:	4614      	mov	r4, r2
   13cba:	e002      	b.n	13cc2 <IPC_IRQHandler+0x86>
   13cbc:	3401      	adds	r4, #1
   13cbe:	428c      	cmp	r4, r1
   13cc0:	d227      	bcs.n	13d12 <IPC_IRQHandler+0xd6>
   13cc2:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   13cc6:	68ab      	ldr	r3, [r5, #8]
   13cc8:	2b00      	cmp	r3, #0
   13cca:	d0f7      	beq.n	13cbc <IPC_IRQHandler+0x80>
   13ccc:	686e      	ldr	r6, [r5, #4]
   13cce:	b2f6      	uxtb	r6, r6
   13cd0:	2e01      	cmp	r6, #1
   13cd2:	d1f3      	bne.n	13cbc <IPC_IRQHandler+0x80>
   13cd4:	6868      	ldr	r0, [r5, #4]
   13cd6:	f8b9 3000 	ldrh.w	r3, [r9]
   13cda:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   13cde:	d1ed      	bne.n	13cbc <IPC_IRQHandler+0x80>
   13ce0:	686a      	ldr	r2, [r5, #4]
   13ce2:	3301      	adds	r3, #1
   13ce4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   13ce8:	f042 0202 	orr.w	r2, r2, #2
   13cec:	606a      	str	r2, [r5, #4]
   13cee:	68a8      	ldr	r0, [r5, #8]
   13cf0:	f8a9 3000 	strh.w	r3, [r9]
   13cf4:	f7ff fe60 	bl	139b8 <rpc_transport_rx_handle>
   13cf8:	4632      	mov	r2, r6
   13cfa:	b928      	cbnz	r0, 13d08 <IPC_IRQHandler+0xcc>
   13cfc:	686b      	ldr	r3, [r5, #4]
   13cfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   13d02:	f043 0303 	orr.w	r3, r3, #3
   13d06:	606b      	str	r3, [r5, #4]
   13d08:	f8da 1000 	ldr.w	r1, [sl]
   13d0c:	3401      	adds	r4, #1
   13d0e:	428c      	cmp	r4, r1
   13d10:	d3d7      	bcc.n	13cc2 <IPC_IRQHandler+0x86>
   13d12:	2a00      	cmp	r2, #0
   13d14:	d1cd      	bne.n	13cb2 <IPC_IRQHandler+0x76>
   13d16:	b171      	cbz	r1, 13d36 <IPC_IRQHandler+0xfa>
   13d18:	4613      	mov	r3, r2
   13d1a:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
   13d1e:	6890      	ldr	r0, [r2, #8]
   13d20:	3301      	adds	r3, #1
   13d22:	b130      	cbz	r0, 13d32 <IPC_IRQHandler+0xf6>
   13d24:	f8d2 b004 	ldr.w	fp, [r2, #4]
   13d28:	fa5f fb8b 	uxtb.w	fp, fp
   13d2c:	f1bb 0f01 	cmp.w	fp, #1
   13d30:	d003      	beq.n	13d3a <IPC_IRQHandler+0xfe>
   13d32:	428b      	cmp	r3, r1
   13d34:	d1f1      	bne.n	13d1a <IPC_IRQHandler+0xde>
   13d36:	f04f 0b00 	mov.w	fp, #0
   13d3a:	f8d7 a000 	ldr.w	sl, [r7]
   13d3e:	f8da 2000 	ldr.w	r2, [sl]
   13d42:	2a00      	cmp	r2, #0
   13d44:	d03d      	beq.n	13dc2 <IPC_IRQHandler+0x186>
   13d46:	2100      	movs	r1, #0
   13d48:	460c      	mov	r4, r1
   13d4a:	e002      	b.n	13d52 <IPC_IRQHandler+0x116>
   13d4c:	3401      	adds	r4, #1
   13d4e:	4294      	cmp	r4, r2
   13d50:	d227      	bcs.n	13da2 <IPC_IRQHandler+0x166>
   13d52:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   13d56:	68ab      	ldr	r3, [r5, #8]
   13d58:	2b00      	cmp	r3, #0
   13d5a:	d0f7      	beq.n	13d4c <IPC_IRQHandler+0x110>
   13d5c:	686e      	ldr	r6, [r5, #4]
   13d5e:	b2f6      	uxtb	r6, r6
   13d60:	2e01      	cmp	r6, #1
   13d62:	d1f3      	bne.n	13d4c <IPC_IRQHandler+0x110>
   13d64:	6868      	ldr	r0, [r5, #4]
   13d66:	f8b9 3000 	ldrh.w	r3, [r9]
   13d6a:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   13d6e:	d1ed      	bne.n	13d4c <IPC_IRQHandler+0x110>
   13d70:	686a      	ldr	r2, [r5, #4]
   13d72:	3301      	adds	r3, #1
   13d74:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   13d78:	f042 0202 	orr.w	r2, r2, #2
   13d7c:	606a      	str	r2, [r5, #4]
   13d7e:	68a8      	ldr	r0, [r5, #8]
   13d80:	f8a9 3000 	strh.w	r3, [r9]
   13d84:	f7ff fe18 	bl	139b8 <rpc_transport_rx_handle>
   13d88:	4631      	mov	r1, r6
   13d8a:	b928      	cbnz	r0, 13d98 <IPC_IRQHandler+0x15c>
   13d8c:	686a      	ldr	r2, [r5, #4]
   13d8e:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
   13d92:	f043 0303 	orr.w	r3, r3, #3
   13d96:	606b      	str	r3, [r5, #4]
   13d98:	f8da 2000 	ldr.w	r2, [sl]
   13d9c:	3401      	adds	r4, #1
   13d9e:	4294      	cmp	r4, r2
   13da0:	d3d7      	bcc.n	13d52 <IPC_IRQHandler+0x116>
   13da2:	2900      	cmp	r1, #0
   13da4:	d1cd      	bne.n	13d42 <IPC_IRQHandler+0x106>
   13da6:	b162      	cbz	r2, 13dc2 <IPC_IRQHandler+0x186>
   13da8:	460b      	mov	r3, r1
   13daa:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
   13dae:	6888      	ldr	r0, [r1, #8]
   13db0:	3301      	adds	r3, #1
   13db2:	b120      	cbz	r0, 13dbe <IPC_IRQHandler+0x182>
   13db4:	6849      	ldr	r1, [r1, #4]
   13db6:	b2c9      	uxtb	r1, r1
   13db8:	2901      	cmp	r1, #1
   13dba:	f43f af76 	beq.w	13caa <IPC_IRQHandler+0x6e>
   13dbe:	4293      	cmp	r3, r2
   13dc0:	d1f3      	bne.n	13daa <IPC_IRQHandler+0x16e>
   13dc2:	f1bb 0f00 	cmp.w	fp, #0
   13dc6:	f47f af70 	bne.w	13caa <IPC_IRQHandler+0x6e>
   13dca:	f44f 6180 	mov.w	r1, #1024	; 0x400
   13dce:	4b49      	ldr	r3, [pc, #292]	; (13ef4 <IPC_IRQHandler+0x2b8>)
   13dd0:	4a44      	ldr	r2, [pc, #272]	; (13ee4 <IPC_IRQHandler+0x2a8>)
   13dd2:	681b      	ldr	r3, [r3, #0]
   13dd4:	015b      	lsls	r3, r3, #5
   13dd6:	b2db      	uxtb	r3, r3
   13dd8:	f882 332a 	strb.w	r3, [r2, #810]	; 0x32a
   13ddc:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
   13de0:	6051      	str	r1, [r2, #4]
   13de2:	b007      	add	sp, #28
   13de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13de8:	2206      	movs	r2, #6
   13dea:	4b43      	ldr	r3, [pc, #268]	; (13ef8 <IPC_IRQHandler+0x2bc>)
   13dec:	601a      	str	r2, [r3, #0]
   13dee:	b007      	add	sp, #28
   13df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13df4:	f7ff fc0c 	bl	13610 <ipc_trace_handle>
   13df8:	f7ff fd78 	bl	138ec <rpc_trace_coredump_in_progress>
   13dfc:	2800      	cmp	r0, #0
   13dfe:	d149      	bne.n	13e94 <IPC_IRQHandler+0x258>
   13e00:	4b3e      	ldr	r3, [pc, #248]	; (13efc <IPC_IRQHandler+0x2c0>)
   13e02:	f8c6 011c 	str.w	r0, [r6, #284]	; 0x11c
   13e06:	681b      	ldr	r3, [r3, #0]
   13e08:	9301      	str	r3, [sp, #4]
   13e0a:	9b01      	ldr	r3, [sp, #4]
   13e0c:	4b36      	ldr	r3, [pc, #216]	; (13ee8 <IPC_IRQHandler+0x2ac>)
   13e0e:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   13e12:	07d0      	lsls	r0, r2, #31
   13e14:	f57f af2c 	bpl.w	13c70 <IPC_IRQHandler+0x34>
   13e18:	2000      	movs	r0, #0
   13e1a:	f248 0202 	movw	r2, #32770	; 0x8002
   13e1e:	4938      	ldr	r1, [pc, #224]	; (13f00 <IPC_IRQHandler+0x2c4>)
   13e20:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   13e24:	6809      	ldr	r1, [r1, #0]
   13e26:	9102      	str	r1, [sp, #8]
   13e28:	9902      	ldr	r1, [sp, #8]
   13e2a:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   13e2e:	4293      	cmp	r3, r2
   13e30:	d040      	beq.n	13eb4 <IPC_IRQHandler+0x278>
   13e32:	d81e      	bhi.n	13e72 <IPC_IRQHandler+0x236>
   13e34:	2b00      	cmp	r3, #0
   13e36:	d04f      	beq.n	13ed8 <IPC_IRQHandler+0x29c>
   13e38:	2b02      	cmp	r3, #2
   13e3a:	d942      	bls.n	13ec2 <IPC_IRQHandler+0x286>
   13e3c:	f248 0201 	movw	r2, #32769	; 0x8001
   13e40:	4293      	cmp	r3, r2
   13e42:	d149      	bne.n	13ed8 <IPC_IRQHandler+0x29c>
   13e44:	2003      	movs	r0, #3
   13e46:	2207      	movs	r2, #7
   13e48:	492b      	ldr	r1, [pc, #172]	; (13ef8 <IPC_IRQHandler+0x2bc>)
   13e4a:	4b2e      	ldr	r3, [pc, #184]	; (13f04 <IPC_IRQHandler+0x2c8>)
   13e4c:	6008      	str	r0, [r1, #0]
   13e4e:	601a      	str	r2, [r3, #0]
   13e50:	e7cd      	b.n	13dee <IPC_IRQHandler+0x1b2>
   13e52:	4d29      	ldr	r5, [pc, #164]	; (13ef8 <IPC_IRQHandler+0x2bc>)
   13e54:	6829      	ldr	r1, [r5, #0]
   13e56:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   13e5a:	2901      	cmp	r1, #1
   13e5c:	492a      	ldr	r1, [pc, #168]	; (13f08 <IPC_IRQHandler+0x2cc>)
   13e5e:	d05d      	beq.n	13f1c <IPC_IRQHandler+0x2e0>
   13e60:	680a      	ldr	r2, [r1, #0]
   13e62:	9203      	str	r2, [sp, #12]
   13e64:	9a03      	ldr	r2, [sp, #12]
   13e66:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   13e6a:	06db      	lsls	r3, r3, #27
   13e6c:	f53f af10 	bmi.w	13c90 <IPC_IRQHandler+0x54>
   13e70:	e716      	b.n	13ca0 <IPC_IRQHandler+0x64>
   13e72:	4a26      	ldr	r2, [pc, #152]	; (13f0c <IPC_IRQHandler+0x2d0>)
   13e74:	4293      	cmp	r3, r2
   13e76:	d814      	bhi.n	13ea2 <IPC_IRQHandler+0x266>
   13e78:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   13e7c:	d814      	bhi.n	13ea8 <IPC_IRQHandler+0x26c>
   13e7e:	f248 0203 	movw	r2, #32771	; 0x8003
   13e82:	4293      	cmp	r3, r2
   13e84:	d128      	bne.n	13ed8 <IPC_IRQHandler+0x29c>
   13e86:	2003      	movs	r0, #3
   13e88:	2204      	movs	r2, #4
   13e8a:	491b      	ldr	r1, [pc, #108]	; (13ef8 <IPC_IRQHandler+0x2bc>)
   13e8c:	4b1d      	ldr	r3, [pc, #116]	; (13f04 <IPC_IRQHandler+0x2c8>)
   13e8e:	6008      	str	r0, [r1, #0]
   13e90:	601a      	str	r2, [r3, #0]
   13e92:	e7ac      	b.n	13dee <IPC_IRQHandler+0x1b2>
   13e94:	23e0      	movs	r3, #224	; 0xe0
   13e96:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
   13e9a:	6065      	str	r5, [r4, #4]
   13e9c:	b007      	add	sp, #28
   13e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ea2:	4a1b      	ldr	r2, [pc, #108]	; (13f10 <IPC_IRQHandler+0x2d4>)
   13ea4:	4293      	cmp	r3, r2
   13ea6:	d117      	bne.n	13ed8 <IPC_IRQHandler+0x29c>
   13ea8:	2003      	movs	r0, #3
   13eaa:	4913      	ldr	r1, [pc, #76]	; (13ef8 <IPC_IRQHandler+0x2bc>)
   13eac:	4a15      	ldr	r2, [pc, #84]	; (13f04 <IPC_IRQHandler+0x2c8>)
   13eae:	6008      	str	r0, [r1, #0]
   13eb0:	6013      	str	r3, [r2, #0]
   13eb2:	e79c      	b.n	13dee <IPC_IRQHandler+0x1b2>
   13eb4:	2003      	movs	r0, #3
   13eb6:	2206      	movs	r2, #6
   13eb8:	490f      	ldr	r1, [pc, #60]	; (13ef8 <IPC_IRQHandler+0x2bc>)
   13eba:	4b12      	ldr	r3, [pc, #72]	; (13f04 <IPC_IRQHandler+0x2c8>)
   13ebc:	6008      	str	r0, [r1, #0]
   13ebe:	601a      	str	r2, [r3, #0]
   13ec0:	e795      	b.n	13dee <IPC_IRQHandler+0x1b2>
   13ec2:	2303      	movs	r3, #3
   13ec4:	4618      	mov	r0, r3
   13ec6:	490c      	ldr	r1, [pc, #48]	; (13ef8 <IPC_IRQHandler+0x2bc>)
   13ec8:	4a0e      	ldr	r2, [pc, #56]	; (13f04 <IPC_IRQHandler+0x2c8>)
   13eca:	600b      	str	r3, [r1, #0]
   13ecc:	6013      	str	r3, [r2, #0]
   13ece:	b007      	add	sp, #28
   13ed0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ed4:	f7ff b91a 	b.w	1310c <rpc_transport_ipc_fault_handler>
   13ed8:	2303      	movs	r3, #3
   13eda:	4907      	ldr	r1, [pc, #28]	; (13ef8 <IPC_IRQHandler+0x2bc>)
   13edc:	4a09      	ldr	r2, [pc, #36]	; (13f04 <IPC_IRQHandler+0x2c8>)
   13ede:	600b      	str	r3, [r1, #0]
   13ee0:	6013      	str	r3, [r2, #0]
   13ee2:	e784      	b.n	13dee <IPC_IRQHandler+0x1b2>
   13ee4:	e000e100 	.word	0xe000e100
   13ee8:	4002a000 	.word	0x4002a000
   13eec:	4002a110 	.word	0x4002a110
   13ef0:	200207d8 	.word	0x200207d8
   13ef4:	200207d0 	.word	0x200207d0
   13ef8:	200207d4 	.word	0x200207d4
   13efc:	4002a11c 	.word	0x4002a11c
   13f00:	4002a100 	.word	0x4002a100
   13f04:	200207cc 	.word	0x200207cc
   13f08:	4002a108 	.word	0x4002a108
   13f0c:	04400004 	.word	0x04400004
   13f10:	05500001 	.word	0x05500001
   13f14:	200207dc 	.word	0x200207dc
   13f18:	20021e1e 	.word	0x20021e1e
   13f1c:	4a37      	ldr	r2, [pc, #220]	; (13ffc <IPC_IRQHandler+0x3c0>)
   13f1e:	680b      	ldr	r3, [r1, #0]
   13f20:	6812      	ldr	r2, [r2, #0]
   13f22:	9305      	str	r3, [sp, #20]
   13f24:	6893      	ldr	r3, [r2, #8]
   13f26:	4836      	ldr	r0, [pc, #216]	; (14000 <IPC_IRQHandler+0x3c4>)
   13f28:	4936      	ldr	r1, [pc, #216]	; (14004 <IPC_IRQHandler+0x3c8>)
   13f2a:	6003      	str	r3, [r0, #0]
   13f2c:	6854      	ldr	r4, [r2, #4]
   13f2e:	9a05      	ldr	r2, [sp, #20]
   13f30:	600c      	str	r4, [r1, #0]
   13f32:	b16b      	cbz	r3, 13f50 <IPC_IRQHandler+0x314>
   13f34:	b164      	cbz	r4, 13f50 <IPC_IRQHandler+0x314>
   13f36:	681b      	ldr	r3, [r3, #0]
   13f38:	2b10      	cmp	r3, #16
   13f3a:	d802      	bhi.n	13f42 <IPC_IRQHandler+0x306>
   13f3c:	6822      	ldr	r2, [r4, #0]
   13f3e:	2a10      	cmp	r2, #16
   13f40:	d90c      	bls.n	13f5c <IPC_IRQHandler+0x320>
   13f42:	2103      	movs	r1, #3
   13f44:	f24c 0206 	movw	r2, #49158	; 0xc006
   13f48:	4b2f      	ldr	r3, [pc, #188]	; (14008 <IPC_IRQHandler+0x3cc>)
   13f4a:	6029      	str	r1, [r5, #0]
   13f4c:	601a      	str	r2, [r3, #0]
   13f4e:	e74e      	b.n	13dee <IPC_IRQHandler+0x1b2>
   13f50:	2103      	movs	r1, #3
   13f52:	2210      	movs	r2, #16
   13f54:	4b2c      	ldr	r3, [pc, #176]	; (14008 <IPC_IRQHandler+0x3cc>)
   13f56:	6029      	str	r1, [r5, #0]
   13f58:	601a      	str	r2, [r3, #0]
   13f5a:	e748      	b.n	13dee <IPC_IRQHandler+0x1b2>
   13f5c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 14014 <IPC_IRQHandler+0x3d8>
   13f60:	2a00      	cmp	r2, #0
   13f62:	d042      	beq.n	13fea <IPC_IRQHandler+0x3ae>
   13f64:	2300      	movs	r3, #0
   13f66:	f104 0904 	add.w	r9, r4, #4
   13f6a:	461e      	mov	r6, r3
   13f6c:	e002      	b.n	13f74 <IPC_IRQHandler+0x338>
   13f6e:	3601      	adds	r6, #1
   13f70:	4296      	cmp	r6, r2
   13f72:	d22a      	bcs.n	13fca <IPC_IRQHandler+0x38e>
   13f74:	00f7      	lsls	r7, r6, #3
   13f76:	19e1      	adds	r1, r4, r7
   13f78:	6888      	ldr	r0, [r1, #8]
   13f7a:	2800      	cmp	r0, #0
   13f7c:	d0f7      	beq.n	13f6e <IPC_IRQHandler+0x332>
   13f7e:	f8d1 a004 	ldr.w	sl, [r1, #4]
   13f82:	fa5f fa8a 	uxtb.w	sl, sl
   13f86:	f1ba 0f01 	cmp.w	sl, #1
   13f8a:	d1f0      	bne.n	13f6e <IPC_IRQHandler+0x332>
   13f8c:	f8d1 c004 	ldr.w	ip, [r1, #4]
   13f90:	f8b8 0000 	ldrh.w	r0, [r8]
   13f94:	ebb0 4f1c 	cmp.w	r0, ip, lsr #16
   13f98:	d1e9      	bne.n	13f6e <IPC_IRQHandler+0x332>
   13f9a:	684b      	ldr	r3, [r1, #4]
   13f9c:	1c42      	adds	r2, r0, #1
   13f9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   13fa2:	f043 0302 	orr.w	r3, r3, #2
   13fa6:	604b      	str	r3, [r1, #4]
   13fa8:	6888      	ldr	r0, [r1, #8]
   13faa:	f8a8 2000 	strh.w	r2, [r8]
   13fae:	f7ff fd03 	bl	139b8 <rpc_transport_rx_handle>
   13fb2:	4653      	mov	r3, sl
   13fb4:	b938      	cbnz	r0, 13fc6 <IPC_IRQHandler+0x38a>
   13fb6:	f859 2007 	ldr.w	r2, [r9, r7]
   13fba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   13fbe:	f042 0203 	orr.w	r2, r2, #3
   13fc2:	f849 2007 	str.w	r2, [r9, r7]
   13fc6:	6822      	ldr	r2, [r4, #0]
   13fc8:	e7d1      	b.n	13f6e <IPC_IRQHandler+0x332>
   13fca:	2b00      	cmp	r3, #0
   13fcc:	d1c8      	bne.n	13f60 <IPC_IRQHandler+0x324>
   13fce:	b912      	cbnz	r2, 13fd6 <IPC_IRQHandler+0x39a>
   13fd0:	e00b      	b.n	13fea <IPC_IRQHandler+0x3ae>
   13fd2:	4293      	cmp	r3, r2
   13fd4:	d009      	beq.n	13fea <IPC_IRQHandler+0x3ae>
   13fd6:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
   13fda:	6888      	ldr	r0, [r1, #8]
   13fdc:	3301      	adds	r3, #1
   13fde:	2800      	cmp	r0, #0
   13fe0:	d0f7      	beq.n	13fd2 <IPC_IRQHandler+0x396>
   13fe2:	6849      	ldr	r1, [r1, #4]
   13fe4:	b2c9      	uxtb	r1, r1
   13fe6:	2901      	cmp	r1, #1
   13fe8:	d1f3      	bne.n	13fd2 <IPC_IRQHandler+0x396>
   13fea:	2002      	movs	r0, #2
   13fec:	4b07      	ldr	r3, [pc, #28]	; (1400c <IPC_IRQHandler+0x3d0>)
   13fee:	f44f 6180 	mov.w	r1, #1024	; 0x400
   13ff2:	4a07      	ldr	r2, [pc, #28]	; (14010 <IPC_IRQHandler+0x3d4>)
   13ff4:	681b      	ldr	r3, [r3, #0]
   13ff6:	6028      	str	r0, [r5, #0]
   13ff8:	e6ec      	b.n	13dd4 <IPC_IRQHandler+0x198>
   13ffa:	bf00      	nop
   13ffc:	200207e0 	.word	0x200207e0
   14000:	200207dc 	.word	0x200207dc
   14004:	200207d8 	.word	0x200207d8
   14008:	200207cc 	.word	0x200207cc
   1400c:	200207d0 	.word	0x200207d0
   14010:	e000e100 	.word	0xe000e100
   14014:	20021e1e 	.word	0x20021e1e

00014018 <rpc_transport_msg_free>:
   14018:	b430      	push	{r4, r5}
   1401a:	4b18      	ldr	r3, [pc, #96]	; (1407c <rpc_transport_msg_free+0x64>)
   1401c:	681c      	ldr	r4, [r3, #0]
   1401e:	6825      	ldr	r5, [r4, #0]
   14020:	b16d      	cbz	r5, 1403e <rpc_transport_msg_free+0x26>
   14022:	68a3      	ldr	r3, [r4, #8]
   14024:	4283      	cmp	r3, r0
   14026:	d027      	beq.n	14078 <rpc_transport_msg_free+0x60>
   14028:	2300      	movs	r3, #0
   1402a:	e002      	b.n	14032 <rpc_transport_msg_free+0x1a>
   1402c:	6889      	ldr	r1, [r1, #8]
   1402e:	4281      	cmp	r1, r0
   14030:	d019      	beq.n	14066 <rpc_transport_msg_free+0x4e>
   14032:	3301      	adds	r3, #1
   14034:	00da      	lsls	r2, r3, #3
   14036:	42ab      	cmp	r3, r5
   14038:	eb04 0102 	add.w	r1, r4, r2
   1403c:	d1f6      	bne.n	1402c <rpc_transport_msg_free+0x14>
   1403e:	4b10      	ldr	r3, [pc, #64]	; (14080 <rpc_transport_msg_free+0x68>)
   14040:	681c      	ldr	r4, [r3, #0]
   14042:	6825      	ldr	r5, [r4, #0]
   14044:	b16d      	cbz	r5, 14062 <rpc_transport_msg_free+0x4a>
   14046:	68a3      	ldr	r3, [r4, #8]
   14048:	4283      	cmp	r3, r0
   1404a:	d015      	beq.n	14078 <rpc_transport_msg_free+0x60>
   1404c:	2300      	movs	r3, #0
   1404e:	e002      	b.n	14056 <rpc_transport_msg_free+0x3e>
   14050:	6889      	ldr	r1, [r1, #8]
   14052:	4281      	cmp	r1, r0
   14054:	d007      	beq.n	14066 <rpc_transport_msg_free+0x4e>
   14056:	3301      	adds	r3, #1
   14058:	00da      	lsls	r2, r3, #3
   1405a:	429d      	cmp	r5, r3
   1405c:	eb04 0102 	add.w	r1, r4, r2
   14060:	d1f6      	bne.n	14050 <rpc_transport_msg_free+0x38>
   14062:	bc30      	pop	{r4, r5}
   14064:	4770      	bx	lr
   14066:	3204      	adds	r2, #4
   14068:	58a3      	ldr	r3, [r4, r2]
   1406a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1406e:	f043 0303 	orr.w	r3, r3, #3
   14072:	50a3      	str	r3, [r4, r2]
   14074:	bc30      	pop	{r4, r5}
   14076:	4770      	bx	lr
   14078:	2204      	movs	r2, #4
   1407a:	e7f5      	b.n	14068 <rpc_transport_msg_free+0x50>
   1407c:	200207dc 	.word	0x200207dc
   14080:	200207d8 	.word	0x200207d8

00014084 <rpc_transport_ipc_tx_init>:
   14084:	2800      	cmp	r0, #0
   14086:	f000 80b8 	beq.w	141fa <rpc_transport_ipc_tx_init+0x176>
   1408a:	2900      	cmp	r1, #0
   1408c:	f000 80b5 	beq.w	141fa <rpc_transport_ipc_tx_init+0x176>
   14090:	2a00      	cmp	r2, #0
   14092:	f000 80b2 	beq.w	141fa <rpc_transport_ipc_tx_init+0x176>
   14096:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1409a:	6a04      	ldr	r4, [r0, #32]
   1409c:	b085      	sub	sp, #20
   1409e:	2c00      	cmp	r4, #0
   140a0:	f000 80a6 	beq.w	141f0 <rpc_transport_ipc_tx_init+0x16c>
   140a4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   140a6:	2800      	cmp	r0, #0
   140a8:	f000 80a2 	beq.w	141f0 <rpc_transport_ipc_tx_init+0x16c>
   140ac:	f642 4587 	movw	r5, #11399	; 0x2c87
   140b0:	f04f 0a00 	mov.w	sl, #0
   140b4:	4e55      	ldr	r6, [pc, #340]	; (1420c <rpc_transport_ipc_tx_init+0x188>)
   140b6:	42a8      	cmp	r0, r5
   140b8:	f886 a000 	strb.w	sl, [r6]
   140bc:	f240 80a0 	bls.w	14200 <rpc_transport_ipc_tx_init+0x17c>
   140c0:	2708      	movs	r7, #8
   140c2:	f8df 9180 	ldr.w	r9, [pc, #384]	; 14244 <rpc_transport_ipc_tx_init+0x1c0>
   140c6:	4620      	mov	r0, r4
   140c8:	4616      	mov	r6, r2
   140ca:	460d      	mov	r5, r1
   140cc:	2244      	movs	r2, #68	; 0x44
   140ce:	4651      	mov	r1, sl
   140d0:	f8c9 4000 	str.w	r4, [r9]
   140d4:	f007 fec8 	bl	1be68 <memset>
   140d8:	f8d9 2000 	ldr.w	r2, [r9]
   140dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
   140e0:	f8df 8164 	ldr.w	r8, [pc, #356]	; 14248 <rpc_transport_ipc_tx_init+0x1c4>
   140e4:	f882 a001 	strb.w	sl, [r2, #1]
   140e8:	f882 a002 	strb.w	sl, [r2, #2]
   140ec:	f882 a003 	strb.w	sl, [r2, #3]
   140f0:	7017      	strb	r7, [r2, #0]
   140f2:	4618      	mov	r0, r3
   140f4:	2244      	movs	r2, #68	; 0x44
   140f6:	4651      	mov	r1, sl
   140f8:	f8c8 3000 	str.w	r3, [r8]
   140fc:	f007 feb4 	bl	1be68 <memset>
   14100:	f8d8 2000 	ldr.w	r2, [r8]
   14104:	f104 0388 	add.w	r3, r4, #136	; 0x88
   14108:	f8df b140 	ldr.w	fp, [pc, #320]	; 1424c <rpc_transport_ipc_tx_init+0x1c8>
   1410c:	7017      	strb	r7, [r2, #0]
   1410e:	f882 a001 	strb.w	sl, [r2, #1]
   14112:	f882 a002 	strb.w	sl, [r2, #2]
   14116:	f882 a003 	strb.w	sl, [r2, #3]
   1411a:	4618      	mov	r0, r3
   1411c:	f44f 7200 	mov.w	r2, #512	; 0x200
   14120:	4651      	mov	r1, sl
   14122:	f8cb 3000 	str.w	r3, [fp]
   14126:	f007 fe9f 	bl	1be68 <memset>
   1412a:	4b39      	ldr	r3, [pc, #228]	; (14210 <rpc_transport_ipc_tx_init+0x18c>)
   1412c:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   14130:	f8c3 c000 	str.w	ip, [r3]
   14134:	4651      	mov	r1, sl
   14136:	4660      	mov	r0, ip
   14138:	f44f 7200 	mov.w	r2, #512	; 0x200
   1413c:	f007 fe94 	bl	1be68 <memset>
   14140:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   14144:	2106      	movs	r1, #6
   14146:	f04f 0e01 	mov.w	lr, #1
   1414a:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   1414e:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   14152:	4b30      	ldr	r3, [pc, #192]	; (14214 <rpc_transport_ipc_tx_init+0x190>)
   14154:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   14158:	605c      	str	r4, [r3, #4]
   1415a:	4c2f      	ldr	r4, [pc, #188]	; (14218 <rpc_transport_ipc_tx_init+0x194>)
   1415c:	f8c3 c008 	str.w	ip, [r3, #8]
   14160:	8199      	strh	r1, [r3, #12]
   14162:	f8a3 e000 	strh.w	lr, [r3]
   14166:	4619      	mov	r1, r3
   14168:	611c      	str	r4, [r3, #16]
   1416a:	4b2c      	ldr	r3, [pc, #176]	; (1421c <rpc_transport_ipc_tx_init+0x198>)
   1416c:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 14250 <rpc_transport_ipc_tx_init+0x1cc>
   14170:	6120      	str	r0, [r4, #16]
   14172:	482b      	ldr	r0, [pc, #172]	; (14220 <rpc_transport_ipc_tx_init+0x19c>)
   14174:	6063      	str	r3, [r4, #4]
   14176:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   1417a:	60a0      	str	r0, [r4, #8]
   1417c:	f8c4 c000 	str.w	ip, [r4]
   14180:	4828      	ldr	r0, [pc, #160]	; (14224 <rpc_transport_ipc_tx_init+0x1a0>)
   14182:	60e3      	str	r3, [r4, #12]
   14184:	6162      	str	r2, [r4, #20]
   14186:	f7fd fe65 	bl	11e54 <nrf_mem_register>
   1418a:	2800      	cmp	r0, #0
   1418c:	d132      	bne.n	141f4 <rpc_transport_ipc_tx_init+0x170>
   1418e:	f04f 0c02 	mov.w	ip, #2
   14192:	2420      	movs	r4, #32
   14194:	f8d9 1000 	ldr.w	r1, [r9]
   14198:	f8db 2000 	ldr.w	r2, [fp]
   1419c:	6029      	str	r1, [r5, #0]
   1419e:	4b1c      	ldr	r3, [pc, #112]	; (14210 <rpc_transport_ipc_tx_init+0x18c>)
   141a0:	f8d8 1000 	ldr.w	r1, [r8]
   141a4:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 14254 <rpc_transport_ipc_tx_init+0x1d0>
   141a8:	4d1f      	ldr	r5, [pc, #124]	; (14228 <rpc_transport_ipc_tx_init+0x1a4>)
   141aa:	6031      	str	r1, [r6, #0]
   141ac:	f8ce 2000 	str.w	r2, [lr]
   141b0:	681b      	ldr	r3, [r3, #0]
   141b2:	491e      	ldr	r1, [pc, #120]	; (1422c <rpc_transport_ipc_tx_init+0x1a8>)
   141b4:	f502 7200 	add.w	r2, r2, #512	; 0x200
   141b8:	602a      	str	r2, [r5, #0]
   141ba:	4e1d      	ldr	r6, [pc, #116]	; (14230 <rpc_transport_ipc_tx_init+0x1ac>)
   141bc:	4a1d      	ldr	r2, [pc, #116]	; (14234 <rpc_transport_ipc_tx_init+0x1b0>)
   141be:	4d1e      	ldr	r5, [pc, #120]	; (14238 <rpc_transport_ipc_tx_init+0x1b4>)
   141c0:	600b      	str	r3, [r1, #0]
   141c2:	f503 7300 	add.w	r3, r3, #512	; 0x200
   141c6:	491d      	ldr	r1, [pc, #116]	; (1423c <rpc_transport_ipc_tx_init+0x1b8>)
   141c8:	6033      	str	r3, [r6, #0]
   141ca:	8028      	strh	r0, [r5, #0]
   141cc:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   141d0:	6809      	ldr	r1, [r1, #0]
   141d2:	4b1b      	ldr	r3, [pc, #108]	; (14240 <rpc_transport_ipc_tx_init+0x1bc>)
   141d4:	9103      	str	r1, [sp, #12]
   141d6:	9903      	ldr	r1, [sp, #12]
   141d8:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   141dc:	6819      	ldr	r1, [r3, #0]
   141de:	443b      	add	r3, r7
   141e0:	9102      	str	r1, [sp, #8]
   141e2:	9902      	ldr	r1, [sp, #8]
   141e4:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   141e8:	681b      	ldr	r3, [r3, #0]
   141ea:	9301      	str	r3, [sp, #4]
   141ec:	9b01      	ldr	r3, [sp, #4]
   141ee:	e001      	b.n	141f4 <rpc_transport_ipc_tx_init+0x170>
   141f0:	f24c 0007 	movw	r0, #49159	; 0xc007
   141f4:	b005      	add	sp, #20
   141f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141fa:	f24c 000e 	movw	r0, #49166	; 0xc00e
   141fe:	4770      	bx	lr
   14200:	f24c 0004 	movw	r0, #49156	; 0xc004
   14204:	b005      	add	sp, #20
   14206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1420a:	bf00      	nop
   1420c:	20023354 	.word	0x20023354
   14210:	2002080c 	.word	0x2002080c
   14214:	200207f8 	.word	0x200207f8
   14218:	2002081c 	.word	0x2002081c
   1421c:	00040080 	.word	0x00040080
   14220:	00040100 	.word	0x00040100
   14224:	200207e4 	.word	0x200207e4
   14228:	200207f0 	.word	0x200207f0
   1422c:	200207ec 	.word	0x200207ec
   14230:	200207e8 	.word	0x200207e8
   14234:	4002a000 	.word	0x4002a000
   14238:	20021e20 	.word	0x20021e20
   1423c:	4002a514 	.word	0x4002a514
   14240:	4002a51c 	.word	0x4002a51c
   14244:	20020818 	.word	0x20020818
   14248:	20020810 	.word	0x20020810
   1424c:	20020814 	.word	0x20020814
   14250:	00080040 	.word	0x00080040
   14254:	200207f4 	.word	0x200207f4

00014258 <rpc_transport_ipc_tx_send>:
   14258:	2800      	cmp	r0, #0
   1425a:	d05f      	beq.n	1431c <rpc_transport_ipc_tx_send+0xc4>
   1425c:	b470      	push	{r4, r5, r6}
   1425e:	4b33      	ldr	r3, [pc, #204]	; (1432c <rpc_transport_ipc_tx_send+0xd4>)
   14260:	b083      	sub	sp, #12
   14262:	681a      	ldr	r2, [r3, #0]
   14264:	4b32      	ldr	r3, [pc, #200]	; (14330 <rpc_transport_ipc_tx_send+0xd8>)
   14266:	4282      	cmp	r2, r0
   14268:	d81e      	bhi.n	142a8 <rpc_transport_ipc_tx_send+0x50>
   1426a:	681b      	ldr	r3, [r3, #0]
   1426c:	4931      	ldr	r1, [pc, #196]	; (14334 <rpc_transport_ipc_tx_send+0xdc>)
   1426e:	4283      	cmp	r3, r0
   14270:	6809      	ldr	r1, [r1, #0]
   14272:	d803      	bhi.n	1427c <rpc_transport_ipc_tx_send+0x24>
   14274:	4c30      	ldr	r4, [pc, #192]	; (14338 <rpc_transport_ipc_tx_send+0xe0>)
   14276:	6824      	ldr	r4, [r4, #0]
   14278:	4284      	cmp	r4, r0
   1427a:	d847      	bhi.n	1430c <rpc_transport_ipc_tx_send+0xb4>
   1427c:	4281      	cmp	r1, r0
   1427e:	d90e      	bls.n	1429e <rpc_transport_ipc_tx_send+0x46>
   14280:	4b2e      	ldr	r3, [pc, #184]	; (1433c <rpc_transport_ipc_tx_send+0xe4>)
   14282:	781b      	ldrb	r3, [r3, #0]
   14284:	2b00      	cmp	r3, #0
   14286:	d14c      	bne.n	14322 <rpc_transport_ipc_tx_send+0xca>
   14288:	1a83      	subs	r3, r0, r2
   1428a:	492d      	ldr	r1, [pc, #180]	; (14340 <rpc_transport_ipc_tx_send+0xe8>)
   1428c:	099e      	lsrs	r6, r3, #6
   1428e:	069b      	lsls	r3, r3, #26
   14290:	680a      	ldr	r2, [r1, #0]
   14292:	4c2c      	ldr	r4, [pc, #176]	; (14344 <rpc_transport_ipc_tx_send+0xec>)
   14294:	f04f 0103 	mov.w	r1, #3
   14298:	f04f 0502 	mov.w	r5, #2
   1429c:	d014      	beq.n	142c8 <rpc_transport_ipc_tx_send+0x70>
   1429e:	f24c 0010 	movw	r0, #49168	; 0xc010
   142a2:	b003      	add	sp, #12
   142a4:	bc70      	pop	{r4, r5, r6}
   142a6:	4770      	bx	lr
   142a8:	681b      	ldr	r3, [r3, #0]
   142aa:	4298      	cmp	r0, r3
   142ac:	d3f7      	bcc.n	1429e <rpc_transport_ipc_tx_send+0x46>
   142ae:	4a22      	ldr	r2, [pc, #136]	; (14338 <rpc_transport_ipc_tx_send+0xe0>)
   142b0:	6812      	ldr	r2, [r2, #0]
   142b2:	4290      	cmp	r0, r2
   142b4:	d2f3      	bcs.n	1429e <rpc_transport_ipc_tx_send+0x46>
   142b6:	2101      	movs	r1, #1
   142b8:	1ac3      	subs	r3, r0, r3
   142ba:	4a23      	ldr	r2, [pc, #140]	; (14348 <rpc_transport_ipc_tx_send+0xf0>)
   142bc:	099e      	lsrs	r6, r3, #6
   142be:	069b      	lsls	r3, r3, #26
   142c0:	460d      	mov	r5, r1
   142c2:	6812      	ldr	r2, [r2, #0]
   142c4:	4c21      	ldr	r4, [pc, #132]	; (1434c <rpc_transport_ipc_tx_send+0xf4>)
   142c6:	d1ea      	bne.n	1429e <rpc_transport_ipc_tx_send+0x46>
   142c8:	6843      	ldr	r3, [r0, #4]
   142ca:	b2db      	uxtb	r3, r3
   142cc:	429d      	cmp	r5, r3
   142ce:	d120      	bne.n	14312 <rpc_transport_ipc_tx_send+0xba>
   142d0:	2020      	movs	r0, #32
   142d2:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
   142d6:	4d1e      	ldr	r5, [pc, #120]	; (14350 <rpc_transport_ipc_tx_send+0xf8>)
   142d8:	6853      	ldr	r3, [r2, #4]
   142da:	882e      	ldrh	r6, [r5, #0]
   142dc:	b29b      	uxth	r3, r3
   142de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   142e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   142e6:	f043 0301 	orr.w	r3, r3, #1
   142ea:	6053      	str	r3, [r2, #4]
   142ec:	bf00      	nop
   142ee:	3801      	subs	r0, #1
   142f0:	d1fc      	bne.n	142ec <rpc_transport_ipc_tx_send+0x94>
   142f2:	2201      	movs	r2, #1
   142f4:	4b17      	ldr	r3, [pc, #92]	; (14354 <rpc_transport_ipc_tx_send+0xfc>)
   142f6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
   142fa:	6822      	ldr	r2, [r4, #0]
   142fc:	882b      	ldrh	r3, [r5, #0]
   142fe:	9201      	str	r2, [sp, #4]
   14300:	9a01      	ldr	r2, [sp, #4]
   14302:	3301      	adds	r3, #1
   14304:	802b      	strh	r3, [r5, #0]
   14306:	b003      	add	sp, #12
   14308:	bc70      	pop	{r4, r5, r6}
   1430a:	4770      	bx	lr
   1430c:	4281      	cmp	r1, r0
   1430e:	d9d2      	bls.n	142b6 <rpc_transport_ipc_tx_send+0x5e>
   14310:	e7b6      	b.n	14280 <rpc_transport_ipc_tx_send+0x28>
   14312:	f24c 0007 	movw	r0, #49159	; 0xc007
   14316:	b003      	add	sp, #12
   14318:	bc70      	pop	{r4, r5, r6}
   1431a:	4770      	bx	lr
   1431c:	f24c 000e 	movw	r0, #49166	; 0xc00e
   14320:	4770      	bx	lr
   14322:	f24c 000f 	movw	r0, #49167	; 0xc00f
   14326:	b003      	add	sp, #12
   14328:	bc70      	pop	{r4, r5, r6}
   1432a:	4770      	bx	lr
   1432c:	200207f4 	.word	0x200207f4
   14330:	200207ec 	.word	0x200207ec
   14334:	200207f0 	.word	0x200207f0
   14338:	200207e8 	.word	0x200207e8
   1433c:	20023354 	.word	0x20023354
   14340:	20020818 	.word	0x20020818
   14344:	4002a00c 	.word	0x4002a00c
   14348:	20020810 	.word	0x20020810
   1434c:	4002a004 	.word	0x4002a004
   14350:	20021e20 	.word	0x20021e20
   14354:	4002a000 	.word	0x4002a000

00014358 <rpc_transport_ipc_tx_rpc_data_alloc>:
   14358:	4b18      	ldr	r3, [pc, #96]	; (143bc <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   1435a:	781b      	ldrb	r3, [r3, #0]
   1435c:	bb63      	cbnz	r3, 143b8 <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   1435e:	b4f0      	push	{r4, r5, r6, r7}
   14360:	4a17      	ldr	r2, [pc, #92]	; (143c0 <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   14362:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   14366:	6814      	ldr	r4, [r2, #0]
   14368:	4b16      	ldr	r3, [pc, #88]	; (143c4 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   1436a:	6825      	ldr	r5, [r4, #0]
   1436c:	681e      	ldr	r6, [r3, #0]
   1436e:	b1a5      	cbz	r5, 1439a <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   14370:	4607      	mov	r7, r0
   14372:	00c1      	lsls	r1, r0, #3
   14374:	1863      	adds	r3, r4, r1
   14376:	685a      	ldr	r2, [r3, #4]
   14378:	b2d2      	uxtb	r2, r2
   1437a:	2a03      	cmp	r2, #3
   1437c:	d104      	bne.n	14388 <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   1437e:	609f      	str	r7, [r3, #8]
   14380:	685a      	ldr	r2, [r3, #4]
   14382:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   14386:	605a      	str	r2, [r3, #4]
   14388:	685a      	ldr	r2, [r3, #4]
   1438a:	f012 0fff 	tst.w	r2, #255	; 0xff
   1438e:	d101      	bne.n	14394 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   14390:	689b      	ldr	r3, [r3, #8]
   14392:	b12b      	cbz	r3, 143a0 <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   14394:	3001      	adds	r0, #1
   14396:	42a8      	cmp	r0, r5
   14398:	d1eb      	bne.n	14372 <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   1439a:	2000      	movs	r0, #0
   1439c:	bcf0      	pop	{r4, r5, r6, r7}
   1439e:	4770      	bx	lr
   143a0:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   143a4:	4421      	add	r1, r4
   143a6:	6088      	str	r0, [r1, #8]
   143a8:	6843      	ldr	r3, [r0, #4]
   143aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   143ae:	f043 0302 	orr.w	r3, r3, #2
   143b2:	6043      	str	r3, [r0, #4]
   143b4:	bcf0      	pop	{r4, r5, r6, r7}
   143b6:	4770      	bx	lr
   143b8:	2000      	movs	r0, #0
   143ba:	4770      	bx	lr
   143bc:	20023354 	.word	0x20023354
   143c0:	20020818 	.word	0x20020818
   143c4:	20020814 	.word	0x20020814

000143c8 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   143c8:	b4f0      	push	{r4, r5, r6, r7}
   143ca:	4a15      	ldr	r2, [pc, #84]	; (14420 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   143cc:	4b15      	ldr	r3, [pc, #84]	; (14424 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   143ce:	6814      	ldr	r4, [r2, #0]
   143d0:	681e      	ldr	r6, [r3, #0]
   143d2:	6825      	ldr	r5, [r4, #0]
   143d4:	b1ad      	cbz	r5, 14402 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   143d6:	2000      	movs	r0, #0
   143d8:	4607      	mov	r7, r0
   143da:	00c1      	lsls	r1, r0, #3
   143dc:	1863      	adds	r3, r4, r1
   143de:	685a      	ldr	r2, [r3, #4]
   143e0:	b2d2      	uxtb	r2, r2
   143e2:	2a03      	cmp	r2, #3
   143e4:	d104      	bne.n	143f0 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   143e6:	609f      	str	r7, [r3, #8]
   143e8:	685a      	ldr	r2, [r3, #4]
   143ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   143ee:	605a      	str	r2, [r3, #4]
   143f0:	685a      	ldr	r2, [r3, #4]
   143f2:	f012 0fff 	tst.w	r2, #255	; 0xff
   143f6:	d101      	bne.n	143fc <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   143f8:	689b      	ldr	r3, [r3, #8]
   143fa:	b12b      	cbz	r3, 14408 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   143fc:	3001      	adds	r0, #1
   143fe:	4285      	cmp	r5, r0
   14400:	d1eb      	bne.n	143da <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   14402:	2000      	movs	r0, #0
   14404:	bcf0      	pop	{r4, r5, r6, r7}
   14406:	4770      	bx	lr
   14408:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   1440c:	4421      	add	r1, r4
   1440e:	6088      	str	r0, [r1, #8]
   14410:	6843      	ldr	r3, [r0, #4]
   14412:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   14416:	f043 0301 	orr.w	r3, r3, #1
   1441a:	6043      	str	r3, [r0, #4]
   1441c:	bcf0      	pop	{r4, r5, r6, r7}
   1441e:	4770      	bx	lr
   14420:	20020810 	.word	0x20020810
   14424:	2002080c 	.word	0x2002080c

00014428 <rpc_transport_ipc_tx_data_alloc>:
   14428:	4b03      	ldr	r3, [pc, #12]	; (14438 <rpc_transport_ipc_tx_data_alloc+0x10>)
   1442a:	781b      	ldrb	r3, [r3, #0]
   1442c:	b90b      	cbnz	r3, 14432 <rpc_transport_ipc_tx_data_alloc+0xa>
   1442e:	f7fd be41 	b.w	120b4 <nrf_shared_malloc>
   14432:	2000      	movs	r0, #0
   14434:	4770      	bx	lr
   14436:	bf00      	nop
   14438:	20023354 	.word	0x20023354

0001443c <ok_rsp_parser>:
   1443c:	2000      	movs	r0, #0
   1443e:	4770      	bx	lr

00014440 <pdn_state_get_parser>:
   14440:	2200      	movs	r2, #0
   14442:	b570      	push	{r4, r5, r6, lr}
   14444:	780b      	ldrb	r3, [r1, #0]
   14446:	b084      	sub	sp, #16
   14448:	460e      	mov	r6, r1
   1444a:	e9cd 2200 	strd	r2, r2, [sp]
   1444e:	e9cd 2202 	strd	r2, r2, [sp, #8]
   14452:	b323      	cbz	r3, 1449e <pdn_state_get_parser+0x5e>
   14454:	460c      	mov	r4, r1
   14456:	2b20      	cmp	r3, #32
   14458:	460d      	mov	r5, r1
   1445a:	d01b      	beq.n	14494 <pdn_state_get_parser+0x54>
   1445c:	700b      	strb	r3, [r1, #0]
   1445e:	3201      	adds	r2, #1
   14460:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   14464:	18b1      	adds	r1, r6, r2
   14466:	460d      	mov	r5, r1
   14468:	2b00      	cmp	r3, #0
   1446a:	d1f4      	bne.n	14456 <pdn_state_get_parser+0x16>
   1446c:	2200      	movs	r2, #0
   1446e:	4b0d      	ldr	r3, [pc, #52]	; (144a4 <pdn_state_get_parser+0x64>)
   14470:	702a      	strb	r2, [r5, #0]
   14472:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   14476:	4a0c      	ldr	r2, [pc, #48]	; (144a8 <pdn_state_get_parser+0x68>)
   14478:	681b      	ldr	r3, [r3, #0]
   1447a:	2110      	movs	r1, #16
   1447c:	4668      	mov	r0, sp
   1447e:	f7fa fd6b 	bl	ef58 <snprintf>
   14482:	4669      	mov	r1, sp
   14484:	4630      	mov	r0, r6
   14486:	f007 fc55 	bl	1bd34 <strstr>
   1448a:	3000      	adds	r0, #0
   1448c:	bf18      	it	ne
   1448e:	2001      	movne	r0, #1
   14490:	b004      	add	sp, #16
   14492:	bd70      	pop	{r4, r5, r6, pc}
   14494:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   14498:	2b00      	cmp	r3, #0
   1449a:	d1dc      	bne.n	14456 <pdn_state_get_parser+0x16>
   1449c:	e7e6      	b.n	1446c <pdn_state_get_parser+0x2c>
   1449e:	460d      	mov	r5, r1
   144a0:	e7e4      	b.n	1446c <pdn_state_get_parser+0x2c>
   144a2:	bf00      	nop
   144a4:	20020938 	.word	0x20020938
   144a8:	0001dde8 	.word	0x0001dde8

000144ac <pdn_id_get_parser>:
   144ac:	b570      	push	{r4, r5, r6, lr}
   144ae:	780b      	ldrb	r3, [r1, #0]
   144b0:	4606      	mov	r6, r0
   144b2:	b313      	cbz	r3, 144fa <pdn_id_get_parser+0x4e>
   144b4:	4608      	mov	r0, r1
   144b6:	2400      	movs	r4, #0
   144b8:	460a      	mov	r2, r1
   144ba:	2b20      	cmp	r3, #32
   144bc:	4615      	mov	r5, r2
   144be:	d017      	beq.n	144f0 <pdn_id_get_parser+0x44>
   144c0:	7013      	strb	r3, [r2, #0]
   144c2:	3401      	adds	r4, #1
   144c4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   144c8:	190a      	adds	r2, r1, r4
   144ca:	4615      	mov	r5, r2
   144cc:	2b00      	cmp	r3, #0
   144ce:	d1f4      	bne.n	144ba <pdn_id_get_parser+0xe>
   144d0:	2300      	movs	r3, #0
   144d2:	4608      	mov	r0, r1
   144d4:	702b      	strb	r3, [r5, #0]
   144d6:	213a      	movs	r1, #58	; 0x3a
   144d8:	f007 fc5c 	bl	1bd94 <strchr>
   144dc:	b130      	cbz	r0, 144ec <pdn_id_get_parser+0x40>
   144de:	3001      	adds	r0, #1
   144e0:	f007 fb13 	bl	1bb0a <atoi>
   144e4:	4b06      	ldr	r3, [pc, #24]	; (14500 <pdn_id_get_parser+0x54>)
   144e6:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   144ea:	6058      	str	r0, [r3, #4]
   144ec:	2000      	movs	r0, #0
   144ee:	bd70      	pop	{r4, r5, r6, pc}
   144f0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   144f4:	2b00      	cmp	r3, #0
   144f6:	d1e0      	bne.n	144ba <pdn_id_get_parser+0xe>
   144f8:	e7ea      	b.n	144d0 <pdn_id_get_parser+0x24>
   144fa:	460d      	mov	r5, r1
   144fc:	e7e8      	b.n	144d0 <pdn_id_get_parser+0x24>
   144fe:	bf00      	nop
   14500:	20020938 	.word	0x20020938

00014504 <context_create_parser>:
   14504:	b570      	push	{r4, r5, r6, lr}
   14506:	780b      	ldrb	r3, [r1, #0]
   14508:	4606      	mov	r6, r0
   1450a:	b313      	cbz	r3, 14552 <context_create_parser+0x4e>
   1450c:	4608      	mov	r0, r1
   1450e:	2400      	movs	r4, #0
   14510:	460a      	mov	r2, r1
   14512:	2b20      	cmp	r3, #32
   14514:	4615      	mov	r5, r2
   14516:	d017      	beq.n	14548 <context_create_parser+0x44>
   14518:	7013      	strb	r3, [r2, #0]
   1451a:	3401      	adds	r4, #1
   1451c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   14520:	190a      	adds	r2, r1, r4
   14522:	4615      	mov	r5, r2
   14524:	2b00      	cmp	r3, #0
   14526:	d1f4      	bne.n	14512 <context_create_parser+0xe>
   14528:	2300      	movs	r3, #0
   1452a:	4608      	mov	r0, r1
   1452c:	702b      	strb	r3, [r5, #0]
   1452e:	213a      	movs	r1, #58	; 0x3a
   14530:	f007 fc30 	bl	1bd94 <strchr>
   14534:	b130      	cbz	r0, 14544 <context_create_parser+0x40>
   14536:	4b08      	ldr	r3, [pc, #32]	; (14558 <context_create_parser+0x54>)
   14538:	3001      	adds	r0, #1
   1453a:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   1453e:	f007 fae4 	bl	1bb0a <atoi>
   14542:	6020      	str	r0, [r4, #0]
   14544:	2000      	movs	r0, #0
   14546:	bd70      	pop	{r4, r5, r6, pc}
   14548:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1454c:	2b00      	cmp	r3, #0
   1454e:	d1e0      	bne.n	14512 <context_create_parser+0xe>
   14550:	e7ea      	b.n	14528 <context_create_parser+0x24>
   14552:	460d      	mov	r5, r1
   14554:	e7e8      	b.n	14528 <context_create_parser+0x24>
   14556:	bf00      	nop
   14558:	20020938 	.word	0x20020938

0001455c <pdn_interface_init>:
   1455c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14560:	b510      	push	{r4, lr}
   14562:	4c09      	ldr	r4, [pc, #36]	; (14588 <pdn_interface_init+0x2c>)
   14564:	2228      	movs	r2, #40	; 0x28
   14566:	2100      	movs	r1, #0
   14568:	4808      	ldr	r0, [pc, #32]	; (1458c <pdn_interface_init+0x30>)
   1456a:	6023      	str	r3, [r4, #0]
   1456c:	f007 fc7c 	bl	1be68 <memset>
   14570:	f240 2201 	movw	r2, #513	; 0x201
   14574:	2100      	movs	r1, #0
   14576:	2066      	movs	r0, #102	; 0x66
   14578:	f7fd f840 	bl	115fc <at_interface_open>
   1457c:	2800      	cmp	r0, #0
   1457e:	6020      	str	r0, [r4, #0]
   14580:	bfb4      	ite	lt
   14582:	2003      	movlt	r0, #3
   14584:	2000      	movge	r0, #0
   14586:	bd10      	pop	{r4, pc}
   14588:	20020834 	.word	0x20020834
   1458c:	20020938 	.word	0x20020938

00014590 <pdn_interface_open>:
   14590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14594:	2866      	cmp	r0, #102	; 0x66
   14596:	b083      	sub	sp, #12
   14598:	f040 80bc 	bne.w	14714 <pdn_interface_open+0x184>
   1459c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   145a0:	f040 80aa 	bne.w	146f8 <pdn_interface_open+0x168>
   145a4:	f240 2302 	movw	r3, #514	; 0x202
   145a8:	429a      	cmp	r2, r3
   145aa:	f040 80a5 	bne.w	146f8 <pdn_interface_open+0x168>
   145ae:	4c62      	ldr	r4, [pc, #392]	; (14738 <pdn_interface_open+0x1a8>)
   145b0:	6825      	ldr	r5, [r4, #0]
   145b2:	b34d      	cbz	r5, 14608 <pdn_interface_open+0x78>
   145b4:	6863      	ldr	r3, [r4, #4]
   145b6:	2b00      	cmp	r3, #0
   145b8:	f000 8098 	beq.w	146ec <pdn_interface_open+0x15c>
   145bc:	68a3      	ldr	r3, [r4, #8]
   145be:	2b00      	cmp	r3, #0
   145c0:	f000 8096 	beq.w	146f0 <pdn_interface_open+0x160>
   145c4:	68e3      	ldr	r3, [r4, #12]
   145c6:	2b00      	cmp	r3, #0
   145c8:	f000 8094 	beq.w	146f4 <pdn_interface_open+0x164>
   145cc:	6923      	ldr	r3, [r4, #16]
   145ce:	2b00      	cmp	r3, #0
   145d0:	f000 8098 	beq.w	14704 <pdn_interface_open+0x174>
   145d4:	6963      	ldr	r3, [r4, #20]
   145d6:	2b00      	cmp	r3, #0
   145d8:	f000 8098 	beq.w	1470c <pdn_interface_open+0x17c>
   145dc:	69a3      	ldr	r3, [r4, #24]
   145de:	2b00      	cmp	r3, #0
   145e0:	f000 8096 	beq.w	14710 <pdn_interface_open+0x180>
   145e4:	69e3      	ldr	r3, [r4, #28]
   145e6:	2b00      	cmp	r3, #0
   145e8:	f000 808e 	beq.w	14708 <pdn_interface_open+0x178>
   145ec:	6a23      	ldr	r3, [r4, #32]
   145ee:	b153      	cbz	r3, 14606 <pdn_interface_open+0x76>
   145f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   145f2:	2509      	movs	r5, #9
   145f4:	b143      	cbz	r3, 14608 <pdn_interface_open+0x78>
   145f6:	200c      	movs	r0, #12
   145f8:	f7fb f9e0 	bl	f9bc <bsd_os_errno_set>
   145fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14600:	b003      	add	sp, #12
   14602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14606:	2508      	movs	r5, #8
   14608:	2074      	movs	r0, #116	; 0x74
   1460a:	f7fd fd3d 	bl	12088 <nrf_malloc>
   1460e:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   14612:	2800      	cmp	r0, #0
   14614:	d0ef      	beq.n	145f6 <pdn_interface_open+0x66>
   14616:	2274      	movs	r2, #116	; 0x74
   14618:	2100      	movs	r1, #0
   1461a:	f007 fc25 	bl	1be68 <memset>
   1461e:	2101      	movs	r1, #1
   14620:	2003      	movs	r0, #3
   14622:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   14626:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1462a:	4a44      	ldr	r2, [pc, #272]	; (1473c <pdn_interface_open+0x1ac>)
   1462c:	6099      	str	r1, [r3, #8]
   1462e:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   14632:	f44f 7180 	mov.w	r1, #256	; 0x100
   14636:	6718      	str	r0, [r3, #112]	; 0x70
   14638:	605f      	str	r7, [r3, #4]
   1463a:	4841      	ldr	r0, [pc, #260]	; (14740 <pdn_interface_open+0x1b0>)
   1463c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 1474c <pdn_interface_open+0x1bc>
   14640:	f7fa fc8a 	bl	ef58 <snprintf>
   14644:	483e      	ldr	r0, [pc, #248]	; (14740 <pdn_interface_open+0x1b0>)
   14646:	f8d8 9000 	ldr.w	r9, [r8]
   1464a:	2600      	movs	r6, #0
   1464c:	f007 fbb0 	bl	1bdb0 <strlen>
   14650:	4633      	mov	r3, r6
   14652:	4602      	mov	r2, r0
   14654:	493a      	ldr	r1, [pc, #232]	; (14740 <pdn_interface_open+0x1b0>)
   14656:	4648      	mov	r0, r9
   14658:	9601      	str	r6, [sp, #4]
   1465a:	9600      	str	r6, [sp, #0]
   1465c:	f7fc ff78 	bl	11550 <at_interface_write>
   14660:	4681      	mov	r9, r0
   14662:	4837      	ldr	r0, [pc, #220]	; (14740 <pdn_interface_open+0x1b0>)
   14664:	f007 fba4 	bl	1bdb0 <strlen>
   14668:	4548      	cmp	r0, r9
   1466a:	d159      	bne.n	14720 <pdn_interface_open+0x190>
   1466c:	4633      	mov	r3, r6
   1466e:	e9cd 6600 	strd	r6, r6, [sp]
   14672:	f44f 7280 	mov.w	r2, #256	; 0x100
   14676:	4932      	ldr	r1, [pc, #200]	; (14740 <pdn_interface_open+0x1b0>)
   14678:	f8d8 0000 	ldr.w	r0, [r8]
   1467c:	f7fd f850 	bl	11720 <at_interface_read>
   14680:	4606      	mov	r6, r0
   14682:	4830      	ldr	r0, [pc, #192]	; (14744 <pdn_interface_open+0x1b4>)
   14684:	f007 fb94 	bl	1bdb0 <strlen>
   14688:	4286      	cmp	r6, r0
   1468a:	db15      	blt.n	146b8 <pdn_interface_open+0x128>
   1468c:	4602      	mov	r2, r0
   1468e:	492c      	ldr	r1, [pc, #176]	; (14740 <pdn_interface_open+0x1b0>)
   14690:	482c      	ldr	r0, [pc, #176]	; (14744 <pdn_interface_open+0x1b4>)
   14692:	f007 fba0 	bl	1bdd6 <strncmp>
   14696:	b978      	cbnz	r0, 146b8 <pdn_interface_open+0x128>
   14698:	4929      	ldr	r1, [pc, #164]	; (14740 <pdn_interface_open+0x1b0>)
   1469a:	4628      	mov	r0, r5
   1469c:	f7ff ff32 	bl	14504 <context_create_parser>
   146a0:	b9b0      	cbnz	r0, 146d0 <pdn_interface_open+0x140>
   146a2:	2202      	movs	r2, #2
   146a4:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   146a8:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   146ac:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   146b0:	609a      	str	r2, [r3, #8]
   146b2:	b003      	add	sp, #12
   146b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   146b8:	4823      	ldr	r0, [pc, #140]	; (14748 <pdn_interface_open+0x1b8>)
   146ba:	f007 fb79 	bl	1bdb0 <strlen>
   146be:	4920      	ldr	r1, [pc, #128]	; (14740 <pdn_interface_open+0x1b0>)
   146c0:	4602      	mov	r2, r0
   146c2:	4821      	ldr	r0, [pc, #132]	; (14748 <pdn_interface_open+0x1b8>)
   146c4:	f007 fb87 	bl	1bdd6 <strncmp>
   146c8:	b960      	cbnz	r0, 146e4 <pdn_interface_open+0x154>
   146ca:	2008      	movs	r0, #8
   146cc:	f7fb f976 	bl	f9bc <bsd_os_errno_set>
   146d0:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   146d4:	f7fd fce2 	bl	1209c <nrf_free>
   146d8:	2300      	movs	r3, #0
   146da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   146de:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   146e2:	e78d      	b.n	14600 <pdn_interface_open+0x70>
   146e4:	2005      	movs	r0, #5
   146e6:	f7fb f969 	bl	f9bc <bsd_os_errno_set>
   146ea:	e7f1      	b.n	146d0 <pdn_interface_open+0x140>
   146ec:	2501      	movs	r5, #1
   146ee:	e78b      	b.n	14608 <pdn_interface_open+0x78>
   146f0:	2502      	movs	r5, #2
   146f2:	e789      	b.n	14608 <pdn_interface_open+0x78>
   146f4:	2503      	movs	r5, #3
   146f6:	e787      	b.n	14608 <pdn_interface_open+0x78>
   146f8:	2016      	movs	r0, #22
   146fa:	f7fb f95f 	bl	f9bc <bsd_os_errno_set>
   146fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14702:	e77d      	b.n	14600 <pdn_interface_open+0x70>
   14704:	2504      	movs	r5, #4
   14706:	e77f      	b.n	14608 <pdn_interface_open+0x78>
   14708:	2507      	movs	r5, #7
   1470a:	e77d      	b.n	14608 <pdn_interface_open+0x78>
   1470c:	2505      	movs	r5, #5
   1470e:	e77b      	b.n	14608 <pdn_interface_open+0x78>
   14710:	2506      	movs	r5, #6
   14712:	e779      	b.n	14608 <pdn_interface_open+0x78>
   14714:	202f      	movs	r0, #47	; 0x2f
   14716:	f7fb f951 	bl	f9bc <bsd_os_errno_set>
   1471a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1471e:	e76f      	b.n	14600 <pdn_interface_open+0x70>
   14720:	2005      	movs	r0, #5
   14722:	f7fb f94b 	bl	f9bc <bsd_os_errno_set>
   14726:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1472a:	f7fd fcb7 	bl	1209c <nrf_free>
   1472e:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   14732:	4638      	mov	r0, r7
   14734:	e764      	b.n	14600 <pdn_interface_open+0x70>
   14736:	bf00      	nop
   14738:	20020938 	.word	0x20020938
   1473c:	0001ddc4 	.word	0x0001ddc4
   14740:	20020838 	.word	0x20020838
   14744:	0001ddd4 	.word	0x0001ddd4
   14748:	0001dde0 	.word	0x0001dde0
   1474c:	20020834 	.word	0x20020834

00014750 <pdn_interface_connect>:
   14750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14754:	b083      	sub	sp, #12
   14756:	2900      	cmp	r1, #0
   14758:	f000 813e 	beq.w	149d8 <pdn_interface_connect+0x288>
   1475c:	2a64      	cmp	r2, #100	; 0x64
   1475e:	4691      	mov	r9, r2
   14760:	f200 813a 	bhi.w	149d8 <pdn_interface_connect+0x288>
   14764:	4605      	mov	r5, r0
   14766:	4608      	mov	r0, r1
   14768:	4688      	mov	r8, r1
   1476a:	f007 fb21 	bl	1bdb0 <strlen>
   1476e:	2864      	cmp	r0, #100	; 0x64
   14770:	f200 8132 	bhi.w	149d8 <pdn_interface_connect+0x288>
   14774:	4ba5      	ldr	r3, [pc, #660]	; (14a0c <pdn_interface_connect+0x2bc>)
   14776:	43ab      	bics	r3, r5
   14778:	f040 8125 	bne.w	149c6 <pdn_interface_connect+0x276>
   1477c:	f025 45f1 	bic.w	r5, r5, #2021654528	; 0x78800000
   14780:	f425 15d0 	bic.w	r5, r5, #1703936	; 0x1a0000
   14784:	2d09      	cmp	r5, #9
   14786:	f300 811e 	bgt.w	149c6 <pdn_interface_connect+0x276>
   1478a:	4fa1      	ldr	r7, [pc, #644]	; (14a10 <pdn_interface_connect+0x2c0>)
   1478c:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   14790:	2b00      	cmp	r3, #0
   14792:	f000 8118 	beq.w	149c6 <pdn_interface_connect+0x276>
   14796:	689a      	ldr	r2, [r3, #8]
   14798:	2a00      	cmp	r2, #0
   1479a:	f000 8114 	beq.w	149c6 <pdn_interface_connect+0x276>
   1479e:	2d00      	cmp	r5, #0
   147a0:	f2c0 8111 	blt.w	149c6 <pdn_interface_connect+0x276>
   147a4:	689b      	ldr	r3, [r3, #8]
   147a6:	2b02      	cmp	r3, #2
   147a8:	f040 810d 	bne.w	149c6 <pdn_interface_connect+0x276>
   147ac:	4e99      	ldr	r6, [pc, #612]	; (14a14 <pdn_interface_connect+0x2c4>)
   147ae:	4a9a      	ldr	r2, [pc, #616]	; (14a18 <pdn_interface_connect+0x2c8>)
   147b0:	f44f 7180 	mov.w	r1, #256	; 0x100
   147b4:	4630      	mov	r0, r6
   147b6:	f7fa fbcf 	bl	ef58 <snprintf>
   147ba:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   147be:	4604      	mov	r4, r0
   147c0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   147c4:	681b      	ldr	r3, [r3, #0]
   147c6:	4a95      	ldr	r2, [pc, #596]	; (14a1c <pdn_interface_connect+0x2cc>)
   147c8:	1830      	adds	r0, r6, r0
   147ca:	f7fa fbc5 	bl	ef58 <snprintf>
   147ce:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   147d2:	4404      	add	r4, r0
   147d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   147d6:	f003 0203 	and.w	r2, r3, #3
   147da:	2a03      	cmp	r2, #3
   147dc:	f000 80ea 	beq.w	149b4 <pdn_interface_connect+0x264>
   147e0:	079b      	lsls	r3, r3, #30
   147e2:	eb06 0004 	add.w	r0, r6, r4
   147e6:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   147ea:	bf4c      	ite	mi
   147ec:	4b8c      	ldrmi	r3, [pc, #560]	; (14a20 <pdn_interface_connect+0x2d0>)
   147ee:	4b8d      	ldrpl	r3, [pc, #564]	; (14a24 <pdn_interface_connect+0x2d4>)
   147f0:	4a8d      	ldr	r2, [pc, #564]	; (14a28 <pdn_interface_connect+0x2d8>)
   147f2:	f7fa fbb1 	bl	ef58 <snprintf>
   147f6:	4404      	add	r4, r0
   147f8:	4643      	mov	r3, r8
   147fa:	4a8c      	ldr	r2, [pc, #560]	; (14a2c <pdn_interface_connect+0x2dc>)
   147fc:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   14800:	1930      	adds	r0, r6, r4
   14802:	f7fa fba9 	bl	ef58 <snprintf>
   14806:	4420      	add	r0, r4
   14808:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   1480c:	f300 80f7 	bgt.w	149fe <pdn_interface_connect+0x2ae>
   14810:	f8df a238 	ldr.w	sl, [pc, #568]	; 14a4c <pdn_interface_connect+0x2fc>
   14814:	487f      	ldr	r0, [pc, #508]	; (14a14 <pdn_interface_connect+0x2c4>)
   14816:	f8da b000 	ldr.w	fp, [sl]
   1481a:	2400      	movs	r4, #0
   1481c:	f007 fac8 	bl	1bdb0 <strlen>
   14820:	4623      	mov	r3, r4
   14822:	4602      	mov	r2, r0
   14824:	497b      	ldr	r1, [pc, #492]	; (14a14 <pdn_interface_connect+0x2c4>)
   14826:	4658      	mov	r0, fp
   14828:	9401      	str	r4, [sp, #4]
   1482a:	9400      	str	r4, [sp, #0]
   1482c:	f7fc fe90 	bl	11550 <at_interface_write>
   14830:	4683      	mov	fp, r0
   14832:	4878      	ldr	r0, [pc, #480]	; (14a14 <pdn_interface_connect+0x2c4>)
   14834:	f007 fabc 	bl	1bdb0 <strlen>
   14838:	4558      	cmp	r0, fp
   1483a:	d008      	beq.n	1484e <pdn_interface_connect+0xfe>
   1483c:	2005      	movs	r0, #5
   1483e:	f7fb f8bd 	bl	f9bc <bsd_os_errno_set>
   14842:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   14846:	4620      	mov	r0, r4
   14848:	b003      	add	sp, #12
   1484a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1484e:	4623      	mov	r3, r4
   14850:	e9cd 4400 	strd	r4, r4, [sp]
   14854:	f44f 7280 	mov.w	r2, #256	; 0x100
   14858:	496e      	ldr	r1, [pc, #440]	; (14a14 <pdn_interface_connect+0x2c4>)
   1485a:	f8da 0000 	ldr.w	r0, [sl]
   1485e:	f7fc ff5f 	bl	11720 <at_interface_read>
   14862:	4604      	mov	r4, r0
   14864:	4872      	ldr	r0, [pc, #456]	; (14a30 <pdn_interface_connect+0x2e0>)
   14866:	f007 faa3 	bl	1bdb0 <strlen>
   1486a:	4284      	cmp	r4, r0
   1486c:	f2c0 8091 	blt.w	14992 <pdn_interface_connect+0x242>
   14870:	4602      	mov	r2, r0
   14872:	4968      	ldr	r1, [pc, #416]	; (14a14 <pdn_interface_connect+0x2c4>)
   14874:	486e      	ldr	r0, [pc, #440]	; (14a30 <pdn_interface_connect+0x2e0>)
   14876:	f007 faae 	bl	1bdd6 <strncmp>
   1487a:	2800      	cmp	r0, #0
   1487c:	f040 8089 	bne.w	14992 <pdn_interface_connect+0x242>
   14880:	4964      	ldr	r1, [pc, #400]	; (14a14 <pdn_interface_connect+0x2c4>)
   14882:	4628      	mov	r0, r5
   14884:	f7ff fdda 	bl	1443c <ok_rsp_parser>
   14888:	4604      	mov	r4, r0
   1488a:	2800      	cmp	r0, #0
   1488c:	d1db      	bne.n	14846 <pdn_interface_connect+0xf6>
   1488e:	4a69      	ldr	r2, [pc, #420]	; (14a34 <pdn_interface_connect+0x2e4>)
   14890:	f44f 7180 	mov.w	r1, #256	; 0x100
   14894:	485f      	ldr	r0, [pc, #380]	; (14a14 <pdn_interface_connect+0x2c4>)
   14896:	f7fa fb5f 	bl	ef58 <snprintf>
   1489a:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1489e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   148a2:	681b      	ldr	r3, [r3, #0]
   148a4:	4a64      	ldr	r2, [pc, #400]	; (14a38 <pdn_interface_connect+0x2e8>)
   148a6:	4430      	add	r0, r6
   148a8:	f7fa fb56 	bl	ef58 <snprintf>
   148ac:	4859      	ldr	r0, [pc, #356]	; (14a14 <pdn_interface_connect+0x2c4>)
   148ae:	f8da b000 	ldr.w	fp, [sl]
   148b2:	f007 fa7d 	bl	1bdb0 <strlen>
   148b6:	4623      	mov	r3, r4
   148b8:	4602      	mov	r2, r0
   148ba:	4956      	ldr	r1, [pc, #344]	; (14a14 <pdn_interface_connect+0x2c4>)
   148bc:	4658      	mov	r0, fp
   148be:	9401      	str	r4, [sp, #4]
   148c0:	9400      	str	r4, [sp, #0]
   148c2:	f7fc fe45 	bl	11550 <at_interface_write>
   148c6:	4683      	mov	fp, r0
   148c8:	4852      	ldr	r0, [pc, #328]	; (14a14 <pdn_interface_connect+0x2c4>)
   148ca:	f007 fa71 	bl	1bdb0 <strlen>
   148ce:	4558      	cmp	r0, fp
   148d0:	d1b4      	bne.n	1483c <pdn_interface_connect+0xec>
   148d2:	4623      	mov	r3, r4
   148d4:	f44f 7280 	mov.w	r2, #256	; 0x100
   148d8:	494e      	ldr	r1, [pc, #312]	; (14a14 <pdn_interface_connect+0x2c4>)
   148da:	f8da 0000 	ldr.w	r0, [sl]
   148de:	e9cd 4400 	strd	r4, r4, [sp]
   148e2:	f7fc ff1d 	bl	11720 <at_interface_read>
   148e6:	4683      	mov	fp, r0
   148e8:	4851      	ldr	r0, [pc, #324]	; (14a30 <pdn_interface_connect+0x2e0>)
   148ea:	f007 fa61 	bl	1bdb0 <strlen>
   148ee:	4583      	cmp	fp, r0
   148f0:	db4f      	blt.n	14992 <pdn_interface_connect+0x242>
   148f2:	4602      	mov	r2, r0
   148f4:	4947      	ldr	r1, [pc, #284]	; (14a14 <pdn_interface_connect+0x2c4>)
   148f6:	484e      	ldr	r0, [pc, #312]	; (14a30 <pdn_interface_connect+0x2e0>)
   148f8:	f007 fa6d 	bl	1bdd6 <strncmp>
   148fc:	2800      	cmp	r0, #0
   148fe:	d148      	bne.n	14992 <pdn_interface_connect+0x242>
   14900:	2103      	movs	r1, #3
   14902:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   14906:	464a      	mov	r2, r9
   14908:	6099      	str	r1, [r3, #8]
   1490a:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   1490e:	4641      	mov	r1, r8
   14910:	300c      	adds	r0, #12
   14912:	f007 fa7f 	bl	1be14 <memcpy>
   14916:	4a49      	ldr	r2, [pc, #292]	; (14a3c <pdn_interface_connect+0x2ec>)
   14918:	f44f 7180 	mov.w	r1, #256	; 0x100
   1491c:	483d      	ldr	r0, [pc, #244]	; (14a14 <pdn_interface_connect+0x2c4>)
   1491e:	f7fa fb1b 	bl	ef58 <snprintf>
   14922:	4601      	mov	r1, r0
   14924:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   14928:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   1492c:	681b      	ldr	r3, [r3, #0]
   1492e:	4a42      	ldr	r2, [pc, #264]	; (14a38 <pdn_interface_connect+0x2e8>)
   14930:	1830      	adds	r0, r6, r0
   14932:	f7fa fb11 	bl	ef58 <snprintf>
   14936:	4837      	ldr	r0, [pc, #220]	; (14a14 <pdn_interface_connect+0x2c4>)
   14938:	f8da 6000 	ldr.w	r6, [sl]
   1493c:	f007 fa38 	bl	1bdb0 <strlen>
   14940:	4623      	mov	r3, r4
   14942:	4602      	mov	r2, r0
   14944:	4933      	ldr	r1, [pc, #204]	; (14a14 <pdn_interface_connect+0x2c4>)
   14946:	4630      	mov	r0, r6
   14948:	9401      	str	r4, [sp, #4]
   1494a:	9400      	str	r4, [sp, #0]
   1494c:	f7fc fe00 	bl	11550 <at_interface_write>
   14950:	4606      	mov	r6, r0
   14952:	4830      	ldr	r0, [pc, #192]	; (14a14 <pdn_interface_connect+0x2c4>)
   14954:	f007 fa2c 	bl	1bdb0 <strlen>
   14958:	42b0      	cmp	r0, r6
   1495a:	d153      	bne.n	14a04 <pdn_interface_connect+0x2b4>
   1495c:	4623      	mov	r3, r4
   1495e:	f44f 7280 	mov.w	r2, #256	; 0x100
   14962:	492c      	ldr	r1, [pc, #176]	; (14a14 <pdn_interface_connect+0x2c4>)
   14964:	f8da 0000 	ldr.w	r0, [sl]
   14968:	e9cd 4400 	strd	r4, r4, [sp]
   1496c:	f7fc fed8 	bl	11720 <at_interface_read>
   14970:	4606      	mov	r6, r0
   14972:	4833      	ldr	r0, [pc, #204]	; (14a40 <pdn_interface_connect+0x2f0>)
   14974:	f007 fa1c 	bl	1bdb0 <strlen>
   14978:	4286      	cmp	r6, r0
   1497a:	db33      	blt.n	149e4 <pdn_interface_connect+0x294>
   1497c:	4602      	mov	r2, r0
   1497e:	4925      	ldr	r1, [pc, #148]	; (14a14 <pdn_interface_connect+0x2c4>)
   14980:	482f      	ldr	r0, [pc, #188]	; (14a40 <pdn_interface_connect+0x2f0>)
   14982:	f007 fa28 	bl	1bdd6 <strncmp>
   14986:	bb68      	cbnz	r0, 149e4 <pdn_interface_connect+0x294>
   14988:	4628      	mov	r0, r5
   1498a:	4922      	ldr	r1, [pc, #136]	; (14a14 <pdn_interface_connect+0x2c4>)
   1498c:	f7ff fd8e 	bl	144ac <pdn_id_get_parser>
   14990:	e759      	b.n	14846 <pdn_interface_connect+0xf6>
   14992:	482c      	ldr	r0, [pc, #176]	; (14a44 <pdn_interface_connect+0x2f4>)
   14994:	f007 fa0c 	bl	1bdb0 <strlen>
   14998:	491e      	ldr	r1, [pc, #120]	; (14a14 <pdn_interface_connect+0x2c4>)
   1499a:	4602      	mov	r2, r0
   1499c:	4829      	ldr	r0, [pc, #164]	; (14a44 <pdn_interface_connect+0x2f4>)
   1499e:	f007 fa1a 	bl	1bdd6 <strncmp>
   149a2:	2800      	cmp	r0, #0
   149a4:	f47f af4a 	bne.w	1483c <pdn_interface_connect+0xec>
   149a8:	2008      	movs	r0, #8
   149aa:	f7fb f807 	bl	f9bc <bsd_os_errno_set>
   149ae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   149b2:	e748      	b.n	14846 <pdn_interface_connect+0xf6>
   149b4:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   149b8:	1930      	adds	r0, r6, r4
   149ba:	4b23      	ldr	r3, [pc, #140]	; (14a48 <pdn_interface_connect+0x2f8>)
   149bc:	4a1a      	ldr	r2, [pc, #104]	; (14a28 <pdn_interface_connect+0x2d8>)
   149be:	f7fa facb 	bl	ef58 <snprintf>
   149c2:	4404      	add	r4, r0
   149c4:	e718      	b.n	147f8 <pdn_interface_connect+0xa8>
   149c6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   149ca:	2009      	movs	r0, #9
   149cc:	f7fa fff6 	bl	f9bc <bsd_os_errno_set>
   149d0:	4620      	mov	r0, r4
   149d2:	b003      	add	sp, #12
   149d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149d8:	2016      	movs	r0, #22
   149da:	f7fa ffef 	bl	f9bc <bsd_os_errno_set>
   149de:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   149e2:	e730      	b.n	14846 <pdn_interface_connect+0xf6>
   149e4:	4817      	ldr	r0, [pc, #92]	; (14a44 <pdn_interface_connect+0x2f4>)
   149e6:	f007 f9e3 	bl	1bdb0 <strlen>
   149ea:	490a      	ldr	r1, [pc, #40]	; (14a14 <pdn_interface_connect+0x2c4>)
   149ec:	4602      	mov	r2, r0
   149ee:	4815      	ldr	r0, [pc, #84]	; (14a44 <pdn_interface_connect+0x2f4>)
   149f0:	f007 f9f1 	bl	1bdd6 <strncmp>
   149f4:	b930      	cbnz	r0, 14a04 <pdn_interface_connect+0x2b4>
   149f6:	2008      	movs	r0, #8
   149f8:	f7fa ffe0 	bl	f9bc <bsd_os_errno_set>
   149fc:	e723      	b.n	14846 <pdn_interface_connect+0xf6>
   149fe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   14a02:	e720      	b.n	14846 <pdn_interface_connect+0xf6>
   14a04:	2005      	movs	r0, #5
   14a06:	f7fa ffd9 	bl	f9bc <bsd_os_errno_set>
   14a0a:	e71c      	b.n	14846 <pdn_interface_connect+0xf6>
   14a0c:	789a0000 	.word	0x789a0000
   14a10:	20020938 	.word	0x20020938
   14a14:	20020838 	.word	0x20020838
   14a18:	0001dd4c 	.word	0x0001dd4c
   14a1c:	0001dd58 	.word	0x0001dd58
   14a20:	0001dd6c 	.word	0x0001dd6c
   14a24:	0001dd74 	.word	0x0001dd74
   14a28:	0001dd64 	.word	0x0001dd64
   14a2c:	0001dda8 	.word	0x0001dda8
   14a30:	0001dd78 	.word	0x0001dd78
   14a34:	0001dd7c 	.word	0x0001dd7c
   14a38:	0001dd88 	.word	0x0001dd88
   14a3c:	0001dd8c 	.word	0x0001dd8c
   14a40:	0001dd9c 	.word	0x0001dd9c
   14a44:	0001dde0 	.word	0x0001dde0
   14a48:	0001dd5c 	.word	0x0001dd5c
   14a4c:	20020834 	.word	0x20020834

00014a50 <pdn_interface_close>:
   14a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14a54:	4b63      	ldr	r3, [pc, #396]	; (14be4 <pdn_interface_close+0x194>)
   14a56:	b083      	sub	sp, #12
   14a58:	4383      	bics	r3, r0
   14a5a:	f040 809d 	bne.w	14b98 <pdn_interface_close+0x148>
   14a5e:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   14a62:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   14a66:	2c09      	cmp	r4, #9
   14a68:	f300 8096 	bgt.w	14b98 <pdn_interface_close+0x148>
   14a6c:	4d5e      	ldr	r5, [pc, #376]	; (14be8 <pdn_interface_close+0x198>)
   14a6e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   14a72:	2800      	cmp	r0, #0
   14a74:	f000 8090 	beq.w	14b98 <pdn_interface_close+0x148>
   14a78:	6883      	ldr	r3, [r0, #8]
   14a7a:	2b00      	cmp	r3, #0
   14a7c:	f000 808c 	beq.w	14b98 <pdn_interface_close+0x148>
   14a80:	6883      	ldr	r3, [r0, #8]
   14a82:	2b03      	cmp	r3, #3
   14a84:	d008      	beq.n	14a98 <pdn_interface_close+0x48>
   14a86:	f7fd fb09 	bl	1209c <nrf_free>
   14a8a:	2300      	movs	r3, #0
   14a8c:	4618      	mov	r0, r3
   14a8e:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   14a92:	b003      	add	sp, #12
   14a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14a98:	4e54      	ldr	r6, [pc, #336]	; (14bec <pdn_interface_close+0x19c>)
   14a9a:	4a55      	ldr	r2, [pc, #340]	; (14bf0 <pdn_interface_close+0x1a0>)
   14a9c:	f44f 7180 	mov.w	r1, #256	; 0x100
   14aa0:	4630      	mov	r0, r6
   14aa2:	f7fa fa59 	bl	ef58 <snprintf>
   14aa6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   14aaa:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   14aae:	681b      	ldr	r3, [r3, #0]
   14ab0:	4a50      	ldr	r2, [pc, #320]	; (14bf4 <pdn_interface_close+0x1a4>)
   14ab2:	4430      	add	r0, r6
   14ab4:	f8df 814c 	ldr.w	r8, [pc, #332]	; 14c04 <pdn_interface_close+0x1b4>
   14ab8:	f7fa fa4e 	bl	ef58 <snprintf>
   14abc:	4630      	mov	r0, r6
   14abe:	f8d8 9000 	ldr.w	r9, [r8]
   14ac2:	2700      	movs	r7, #0
   14ac4:	f007 f974 	bl	1bdb0 <strlen>
   14ac8:	4631      	mov	r1, r6
   14aca:	4602      	mov	r2, r0
   14acc:	463b      	mov	r3, r7
   14ace:	4648      	mov	r0, r9
   14ad0:	9701      	str	r7, [sp, #4]
   14ad2:	9700      	str	r7, [sp, #0]
   14ad4:	f7fc fd3c 	bl	11550 <at_interface_write>
   14ad8:	4681      	mov	r9, r0
   14ada:	4630      	mov	r0, r6
   14adc:	f007 f968 	bl	1bdb0 <strlen>
   14ae0:	4548      	cmp	r0, r9
   14ae2:	d176      	bne.n	14bd2 <pdn_interface_close+0x182>
   14ae4:	463b      	mov	r3, r7
   14ae6:	e9cd 7700 	strd	r7, r7, [sp]
   14aea:	f44f 7280 	mov.w	r2, #256	; 0x100
   14aee:	4631      	mov	r1, r6
   14af0:	f8d8 0000 	ldr.w	r0, [r8]
   14af4:	f7fc fe14 	bl	11720 <at_interface_read>
   14af8:	4607      	mov	r7, r0
   14afa:	483f      	ldr	r0, [pc, #252]	; (14bf8 <pdn_interface_close+0x1a8>)
   14afc:	f007 f958 	bl	1bdb0 <strlen>
   14b00:	4287      	cmp	r7, r0
   14b02:	da4f      	bge.n	14ba4 <pdn_interface_close+0x154>
   14b04:	483d      	ldr	r0, [pc, #244]	; (14bfc <pdn_interface_close+0x1ac>)
   14b06:	f007 f953 	bl	1bdb0 <strlen>
   14b0a:	4938      	ldr	r1, [pc, #224]	; (14bec <pdn_interface_close+0x19c>)
   14b0c:	4602      	mov	r2, r0
   14b0e:	483b      	ldr	r0, [pc, #236]	; (14bfc <pdn_interface_close+0x1ac>)
   14b10:	f007 f961 	bl	1bdd6 <strncmp>
   14b14:	2800      	cmp	r0, #0
   14b16:	d15c      	bne.n	14bd2 <pdn_interface_close+0x182>
   14b18:	2008      	movs	r0, #8
   14b1a:	f7fa ff4f 	bl	f9bc <bsd_os_errno_set>
   14b1e:	4a38      	ldr	r2, [pc, #224]	; (14c00 <pdn_interface_close+0x1b0>)
   14b20:	f44f 7180 	mov.w	r1, #256	; 0x100
   14b24:	4831      	ldr	r0, [pc, #196]	; (14bec <pdn_interface_close+0x19c>)
   14b26:	f7fa fa17 	bl	ef58 <snprintf>
   14b2a:	4601      	mov	r1, r0
   14b2c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   14b30:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   14b34:	681b      	ldr	r3, [r3, #0]
   14b36:	4a2f      	ldr	r2, [pc, #188]	; (14bf4 <pdn_interface_close+0x1a4>)
   14b38:	1830      	adds	r0, r6, r0
   14b3a:	f7fa fa0d 	bl	ef58 <snprintf>
   14b3e:	482b      	ldr	r0, [pc, #172]	; (14bec <pdn_interface_close+0x19c>)
   14b40:	f8d8 7000 	ldr.w	r7, [r8]
   14b44:	2600      	movs	r6, #0
   14b46:	f007 f933 	bl	1bdb0 <strlen>
   14b4a:	4633      	mov	r3, r6
   14b4c:	4602      	mov	r2, r0
   14b4e:	4927      	ldr	r1, [pc, #156]	; (14bec <pdn_interface_close+0x19c>)
   14b50:	4638      	mov	r0, r7
   14b52:	9601      	str	r6, [sp, #4]
   14b54:	9600      	str	r6, [sp, #0]
   14b56:	f7fc fcfb 	bl	11550 <at_interface_write>
   14b5a:	4607      	mov	r7, r0
   14b5c:	4823      	ldr	r0, [pc, #140]	; (14bec <pdn_interface_close+0x19c>)
   14b5e:	f007 f927 	bl	1bdb0 <strlen>
   14b62:	42b8      	cmp	r0, r7
   14b64:	d139      	bne.n	14bda <pdn_interface_close+0x18a>
   14b66:	4633      	mov	r3, r6
   14b68:	e9cd 6600 	strd	r6, r6, [sp]
   14b6c:	f44f 7280 	mov.w	r2, #256	; 0x100
   14b70:	491e      	ldr	r1, [pc, #120]	; (14bec <pdn_interface_close+0x19c>)
   14b72:	f8d8 0000 	ldr.w	r0, [r8]
   14b76:	f7fc fdd3 	bl	11720 <at_interface_read>
   14b7a:	4606      	mov	r6, r0
   14b7c:	481e      	ldr	r0, [pc, #120]	; (14bf8 <pdn_interface_close+0x1a8>)
   14b7e:	f007 f917 	bl	1bdb0 <strlen>
   14b82:	4286      	cmp	r6, r0
   14b84:	db16      	blt.n	14bb4 <pdn_interface_close+0x164>
   14b86:	4602      	mov	r2, r0
   14b88:	4918      	ldr	r1, [pc, #96]	; (14bec <pdn_interface_close+0x19c>)
   14b8a:	481b      	ldr	r0, [pc, #108]	; (14bf8 <pdn_interface_close+0x1a8>)
   14b8c:	f007 f923 	bl	1bdd6 <strncmp>
   14b90:	b980      	cbnz	r0, 14bb4 <pdn_interface_close+0x164>
   14b92:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   14b96:	e776      	b.n	14a86 <pdn_interface_close+0x36>
   14b98:	2009      	movs	r0, #9
   14b9a:	f7fa ff0f 	bl	f9bc <bsd_os_errno_set>
   14b9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14ba2:	e776      	b.n	14a92 <pdn_interface_close+0x42>
   14ba4:	4602      	mov	r2, r0
   14ba6:	4631      	mov	r1, r6
   14ba8:	4813      	ldr	r0, [pc, #76]	; (14bf8 <pdn_interface_close+0x1a8>)
   14baa:	f007 f914 	bl	1bdd6 <strncmp>
   14bae:	2800      	cmp	r0, #0
   14bb0:	d0b5      	beq.n	14b1e <pdn_interface_close+0xce>
   14bb2:	e7a7      	b.n	14b04 <pdn_interface_close+0xb4>
   14bb4:	4811      	ldr	r0, [pc, #68]	; (14bfc <pdn_interface_close+0x1ac>)
   14bb6:	f007 f8fb 	bl	1bdb0 <strlen>
   14bba:	490c      	ldr	r1, [pc, #48]	; (14bec <pdn_interface_close+0x19c>)
   14bbc:	4602      	mov	r2, r0
   14bbe:	480f      	ldr	r0, [pc, #60]	; (14bfc <pdn_interface_close+0x1ac>)
   14bc0:	f007 f909 	bl	1bdd6 <strncmp>
   14bc4:	b948      	cbnz	r0, 14bda <pdn_interface_close+0x18a>
   14bc6:	2008      	movs	r0, #8
   14bc8:	f7fa fef8 	bl	f9bc <bsd_os_errno_set>
   14bcc:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   14bd0:	e759      	b.n	14a86 <pdn_interface_close+0x36>
   14bd2:	2005      	movs	r0, #5
   14bd4:	f7fa fef2 	bl	f9bc <bsd_os_errno_set>
   14bd8:	e7a1      	b.n	14b1e <pdn_interface_close+0xce>
   14bda:	2005      	movs	r0, #5
   14bdc:	f7fa feee 	bl	f9bc <bsd_os_errno_set>
   14be0:	e7d7      	b.n	14b92 <pdn_interface_close+0x142>
   14be2:	bf00      	nop
   14be4:	789a0000 	.word	0x789a0000
   14be8:	20020938 	.word	0x20020938
   14bec:	20020838 	.word	0x20020838
   14bf0:	0001dd40 	.word	0x0001dd40
   14bf4:	0001dd88 	.word	0x0001dd88
   14bf8:	0001dd78 	.word	0x0001dd78
   14bfc:	0001dde0 	.word	0x0001dde0
   14c00:	0001dd4c 	.word	0x0001dd4c
   14c04:	20020834 	.word	0x20020834

00014c08 <pdn_interface_setopt>:
   14c08:	b510      	push	{r4, lr}
   14c0a:	f240 2402 	movw	r4, #514	; 0x202
   14c0e:	42a1      	cmp	r1, r4
   14c10:	d10b      	bne.n	14c2a <pdn_interface_setopt+0x22>
   14c12:	b153      	cbz	r3, 14c2a <pdn_interface_setopt+0x22>
   14c14:	9902      	ldr	r1, [sp, #8]
   14c16:	b141      	cbz	r1, 14c2a <pdn_interface_setopt+0x22>
   14c18:	4925      	ldr	r1, [pc, #148]	; (14cb0 <pdn_interface_setopt+0xa8>)
   14c1a:	4381      	bics	r1, r0
   14c1c:	d00b      	beq.n	14c36 <pdn_interface_setopt+0x2e>
   14c1e:	2009      	movs	r0, #9
   14c20:	f7fa fecc 	bl	f9bc <bsd_os_errno_set>
   14c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14c28:	bd10      	pop	{r4, pc}
   14c2a:	2016      	movs	r0, #22
   14c2c:	f7fa fec6 	bl	f9bc <bsd_os_errno_set>
   14c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14c34:	bd10      	pop	{r4, pc}
   14c36:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   14c3a:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   14c3e:	2809      	cmp	r0, #9
   14c40:	dced      	bgt.n	14c1e <pdn_interface_setopt+0x16>
   14c42:	491c      	ldr	r1, [pc, #112]	; (14cb4 <pdn_interface_setopt+0xac>)
   14c44:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   14c48:	2900      	cmp	r1, #0
   14c4a:	d0e8      	beq.n	14c1e <pdn_interface_setopt+0x16>
   14c4c:	688c      	ldr	r4, [r1, #8]
   14c4e:	2c00      	cmp	r4, #0
   14c50:	d0e5      	beq.n	14c1e <pdn_interface_setopt+0x16>
   14c52:	2800      	cmp	r0, #0
   14c54:	dbe3      	blt.n	14c1e <pdn_interface_setopt+0x16>
   14c56:	2a01      	cmp	r2, #1
   14c58:	d001      	beq.n	14c5e <pdn_interface_setopt+0x56>
   14c5a:	202d      	movs	r0, #45	; 0x2d
   14c5c:	e7e6      	b.n	14c2c <pdn_interface_setopt+0x24>
   14c5e:	688a      	ldr	r2, [r1, #8]
   14c60:	b1fa      	cbz	r2, 14ca2 <pdn_interface_setopt+0x9a>
   14c62:	688a      	ldr	r2, [r1, #8]
   14c64:	2a03      	cmp	r2, #3
   14c66:	d01c      	beq.n	14ca2 <pdn_interface_setopt+0x9a>
   14c68:	688a      	ldr	r2, [r1, #8]
   14c6a:	2a04      	cmp	r2, #4
   14c6c:	d019      	beq.n	14ca2 <pdn_interface_setopt+0x9a>
   14c6e:	9a02      	ldr	r2, [sp, #8]
   14c70:	0890      	lsrs	r0, r2, #2
   14c72:	1e42      	subs	r2, r0, #1
   14c74:	2a01      	cmp	r2, #1
   14c76:	d8d8      	bhi.n	14c2a <pdn_interface_setopt+0x22>
   14c78:	9a02      	ldr	r2, [sp, #8]
   14c7a:	0792      	lsls	r2, r2, #30
   14c7c:	d1d5      	bne.n	14c2a <pdn_interface_setopt+0x22>
   14c7e:	681a      	ldr	r2, [r3, #0]
   14c80:	2a02      	cmp	r2, #2
   14c82:	d010      	beq.n	14ca6 <pdn_interface_setopt+0x9e>
   14c84:	2a0a      	cmp	r2, #10
   14c86:	d1d0      	bne.n	14c2a <pdn_interface_setopt+0x22>
   14c88:	2202      	movs	r2, #2
   14c8a:	2802      	cmp	r0, #2
   14c8c:	d106      	bne.n	14c9c <pdn_interface_setopt+0x94>
   14c8e:	685b      	ldr	r3, [r3, #4]
   14c90:	2b02      	cmp	r3, #2
   14c92:	d00a      	beq.n	14caa <pdn_interface_setopt+0xa2>
   14c94:	2b0a      	cmp	r3, #10
   14c96:	d1c8      	bne.n	14c2a <pdn_interface_setopt+0x22>
   14c98:	f042 0202 	orr.w	r2, r2, #2
   14c9c:	670a      	str	r2, [r1, #112]	; 0x70
   14c9e:	2000      	movs	r0, #0
   14ca0:	e7c4      	b.n	14c2c <pdn_interface_setopt+0x24>
   14ca2:	200e      	movs	r0, #14
   14ca4:	e7c2      	b.n	14c2c <pdn_interface_setopt+0x24>
   14ca6:	2201      	movs	r2, #1
   14ca8:	e7ef      	b.n	14c8a <pdn_interface_setopt+0x82>
   14caa:	f042 0201 	orr.w	r2, r2, #1
   14cae:	e7f5      	b.n	14c9c <pdn_interface_setopt+0x94>
   14cb0:	789a0000 	.word	0x789a0000
   14cb4:	20020938 	.word	0x20020938

00014cb8 <pdn_interface_getopt>:
   14cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14cbc:	f240 2402 	movw	r4, #514	; 0x202
   14cc0:	b083      	sub	sp, #12
   14cc2:	42a1      	cmp	r1, r4
   14cc4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   14cc6:	f040 80a9 	bne.w	14e1c <pdn_interface_getopt+0x164>
   14cca:	461e      	mov	r6, r3
   14ccc:	2b00      	cmp	r3, #0
   14cce:	f000 80a5 	beq.w	14e1c <pdn_interface_getopt+0x164>
   14cd2:	2d00      	cmp	r5, #0
   14cd4:	f000 80a2 	beq.w	14e1c <pdn_interface_getopt+0x164>
   14cd8:	4b56      	ldr	r3, [pc, #344]	; (14e34 <pdn_interface_getopt+0x17c>)
   14cda:	4383      	bics	r3, r0
   14cdc:	f040 8084 	bne.w	14de8 <pdn_interface_getopt+0x130>
   14ce0:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   14ce4:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   14ce8:	2c09      	cmp	r4, #9
   14cea:	dc7d      	bgt.n	14de8 <pdn_interface_getopt+0x130>
   14cec:	4b52      	ldr	r3, [pc, #328]	; (14e38 <pdn_interface_getopt+0x180>)
   14cee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   14cf2:	2b00      	cmp	r3, #0
   14cf4:	d078      	beq.n	14de8 <pdn_interface_getopt+0x130>
   14cf6:	6899      	ldr	r1, [r3, #8]
   14cf8:	2900      	cmp	r1, #0
   14cfa:	d075      	beq.n	14de8 <pdn_interface_getopt+0x130>
   14cfc:	2c00      	cmp	r4, #0
   14cfe:	db73      	blt.n	14de8 <pdn_interface_getopt+0x130>
   14d00:	2a02      	cmp	r2, #2
   14d02:	d00e      	beq.n	14d22 <pdn_interface_getopt+0x6a>
   14d04:	2a03      	cmp	r2, #3
   14d06:	d008      	beq.n	14d1a <pdn_interface_getopt+0x62>
   14d08:	2a01      	cmp	r2, #1
   14d0a:	d015      	beq.n	14d38 <pdn_interface_getopt+0x80>
   14d0c:	202d      	movs	r0, #45	; 0x2d
   14d0e:	f7fa fe55 	bl	f9bc <bsd_os_errno_set>
   14d12:	2000      	movs	r0, #0
   14d14:	b003      	add	sp, #12
   14d16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14d1a:	682b      	ldr	r3, [r5, #0]
   14d1c:	bb23      	cbnz	r3, 14d68 <pdn_interface_getopt+0xb0>
   14d1e:	2016      	movs	r0, #22
   14d20:	e7f5      	b.n	14d0e <pdn_interface_getopt+0x56>
   14d22:	682a      	ldr	r2, [r5, #0]
   14d24:	2a00      	cmp	r2, #0
   14d26:	d0fa      	beq.n	14d1e <pdn_interface_getopt+0x66>
   14d28:	2201      	movs	r2, #1
   14d2a:	2000      	movs	r0, #0
   14d2c:	681b      	ldr	r3, [r3, #0]
   14d2e:	7033      	strb	r3, [r6, #0]
   14d30:	602a      	str	r2, [r5, #0]
   14d32:	b003      	add	sp, #12
   14d34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14d38:	689a      	ldr	r2, [r3, #8]
   14d3a:	2a00      	cmp	r2, #0
   14d3c:	d052      	beq.n	14de4 <pdn_interface_getopt+0x12c>
   14d3e:	689a      	ldr	r2, [r3, #8]
   14d40:	2a04      	cmp	r2, #4
   14d42:	d04f      	beq.n	14de4 <pdn_interface_getopt+0x12c>
   14d44:	682a      	ldr	r2, [r5, #0]
   14d46:	2a07      	cmp	r2, #7
   14d48:	d9e9      	bls.n	14d1e <pdn_interface_getopt+0x66>
   14d4a:	f012 0203 	ands.w	r2, r2, #3
   14d4e:	d1e6      	bne.n	14d1e <pdn_interface_getopt+0x66>
   14d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   14d52:	0799      	lsls	r1, r3, #30
   14d54:	d45d      	bmi.n	14e12 <pdn_interface_getopt+0x15a>
   14d56:	2104      	movs	r1, #4
   14d58:	07db      	lsls	r3, r3, #31
   14d5a:	d502      	bpl.n	14d62 <pdn_interface_getopt+0xaa>
   14d5c:	2302      	movs	r3, #2
   14d5e:	50b3      	str	r3, [r6, r2]
   14d60:	460a      	mov	r2, r1
   14d62:	602a      	str	r2, [r5, #0]
   14d64:	2000      	movs	r0, #0
   14d66:	e7d5      	b.n	14d14 <pdn_interface_getopt+0x5c>
   14d68:	4a34      	ldr	r2, [pc, #208]	; (14e3c <pdn_interface_getopt+0x184>)
   14d6a:	f44f 7180 	mov.w	r1, #256	; 0x100
   14d6e:	4834      	ldr	r0, [pc, #208]	; (14e40 <pdn_interface_getopt+0x188>)
   14d70:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 14e4c <pdn_interface_getopt+0x194>
   14d74:	f7fa f8f0 	bl	ef58 <snprintf>
   14d78:	4831      	ldr	r0, [pc, #196]	; (14e40 <pdn_interface_getopt+0x188>)
   14d7a:	f8d8 9000 	ldr.w	r9, [r8]
   14d7e:	2700      	movs	r7, #0
   14d80:	f007 f816 	bl	1bdb0 <strlen>
   14d84:	463b      	mov	r3, r7
   14d86:	4602      	mov	r2, r0
   14d88:	492d      	ldr	r1, [pc, #180]	; (14e40 <pdn_interface_getopt+0x188>)
   14d8a:	4648      	mov	r0, r9
   14d8c:	9701      	str	r7, [sp, #4]
   14d8e:	9700      	str	r7, [sp, #0]
   14d90:	f7fc fbde 	bl	11550 <at_interface_write>
   14d94:	4681      	mov	r9, r0
   14d96:	482a      	ldr	r0, [pc, #168]	; (14e40 <pdn_interface_getopt+0x188>)
   14d98:	f007 f80a 	bl	1bdb0 <strlen>
   14d9c:	4548      	cmp	r0, r9
   14d9e:	d143      	bne.n	14e28 <pdn_interface_getopt+0x170>
   14da0:	463b      	mov	r3, r7
   14da2:	e9cd 7700 	strd	r7, r7, [sp]
   14da6:	f44f 7280 	mov.w	r2, #256	; 0x100
   14daa:	4925      	ldr	r1, [pc, #148]	; (14e40 <pdn_interface_getopt+0x188>)
   14dac:	f8d8 0000 	ldr.w	r0, [r8]
   14db0:	f7fc fcb6 	bl	11720 <at_interface_read>
   14db4:	4607      	mov	r7, r0
   14db6:	4823      	ldr	r0, [pc, #140]	; (14e44 <pdn_interface_getopt+0x18c>)
   14db8:	f006 fffa 	bl	1bdb0 <strlen>
   14dbc:	4287      	cmp	r7, r0
   14dbe:	db19      	blt.n	14df4 <pdn_interface_getopt+0x13c>
   14dc0:	4602      	mov	r2, r0
   14dc2:	491f      	ldr	r1, [pc, #124]	; (14e40 <pdn_interface_getopt+0x188>)
   14dc4:	481f      	ldr	r0, [pc, #124]	; (14e44 <pdn_interface_getopt+0x18c>)
   14dc6:	f007 f806 	bl	1bdd6 <strncmp>
   14dca:	4607      	mov	r7, r0
   14dcc:	b990      	cbnz	r0, 14df4 <pdn_interface_getopt+0x13c>
   14dce:	4620      	mov	r0, r4
   14dd0:	491b      	ldr	r1, [pc, #108]	; (14e40 <pdn_interface_getopt+0x188>)
   14dd2:	f7ff fb35 	bl	14440 <pdn_state_get_parser>
   14dd6:	2800      	cmp	r0, #0
   14dd8:	db99      	blt.n	14d0e <pdn_interface_getopt+0x56>
   14dda:	2301      	movs	r3, #1
   14ddc:	7030      	strb	r0, [r6, #0]
   14dde:	4638      	mov	r0, r7
   14de0:	602b      	str	r3, [r5, #0]
   14de2:	e797      	b.n	14d14 <pdn_interface_getopt+0x5c>
   14de4:	200e      	movs	r0, #14
   14de6:	e792      	b.n	14d0e <pdn_interface_getopt+0x56>
   14de8:	2009      	movs	r0, #9
   14dea:	f7fa fde7 	bl	f9bc <bsd_os_errno_set>
   14dee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14df2:	e78f      	b.n	14d14 <pdn_interface_getopt+0x5c>
   14df4:	4814      	ldr	r0, [pc, #80]	; (14e48 <pdn_interface_getopt+0x190>)
   14df6:	f006 ffdb 	bl	1bdb0 <strlen>
   14dfa:	4911      	ldr	r1, [pc, #68]	; (14e40 <pdn_interface_getopt+0x188>)
   14dfc:	4602      	mov	r2, r0
   14dfe:	4812      	ldr	r0, [pc, #72]	; (14e48 <pdn_interface_getopt+0x190>)
   14e00:	f006 ffe9 	bl	1bdd6 <strncmp>
   14e04:	b980      	cbnz	r0, 14e28 <pdn_interface_getopt+0x170>
   14e06:	2008      	movs	r0, #8
   14e08:	f7fa fdd8 	bl	f9bc <bsd_os_errno_set>
   14e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14e10:	e77d      	b.n	14d0e <pdn_interface_getopt+0x56>
   14e12:	220a      	movs	r2, #10
   14e14:	2108      	movs	r1, #8
   14e16:	6032      	str	r2, [r6, #0]
   14e18:	2204      	movs	r2, #4
   14e1a:	e79d      	b.n	14d58 <pdn_interface_getopt+0xa0>
   14e1c:	2016      	movs	r0, #22
   14e1e:	f7fa fdcd 	bl	f9bc <bsd_os_errno_set>
   14e22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14e26:	e775      	b.n	14d14 <pdn_interface_getopt+0x5c>
   14e28:	2005      	movs	r0, #5
   14e2a:	f7fa fdc7 	bl	f9bc <bsd_os_errno_set>
   14e2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14e32:	e76c      	b.n	14d0e <pdn_interface_getopt+0x56>
   14e34:	789a0000 	.word	0x789a0000
   14e38:	20020938 	.word	0x20020938
   14e3c:	0001ddb0 	.word	0x0001ddb0
   14e40:	20020838 	.word	0x20020838
   14e44:	0001ddbc 	.word	0x0001ddbc
   14e48:	0001dde0 	.word	0x0001dde0
   14e4c:	20020834 	.word	0x20020834

00014e50 <pdn_interface_pdn_id_get>:
   14e50:	2900      	cmp	r1, #0
   14e52:	f000 83b9 	beq.w	155c8 <pdn_interface_pdn_id_get+0x778>
   14e56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14e5a:	4ca3      	ldr	r4, [pc, #652]	; (150e8 <pdn_interface_pdn_id_get+0x298>)
   14e5c:	2802      	cmp	r0, #2
   14e5e:	b083      	sub	sp, #12
   14e60:	460d      	mov	r5, r1
   14e62:	6823      	ldr	r3, [r4, #0]
   14e64:	f000 8094 	beq.w	14f90 <pdn_interface_pdn_id_get+0x140>
   14e68:	280a      	cmp	r0, #10
   14e6a:	d03f      	beq.n	14eec <pdn_interface_pdn_id_get+0x9c>
   14e6c:	b11b      	cbz	r3, 14e76 <pdn_interface_pdn_id_get+0x26>
   14e6e:	689b      	ldr	r3, [r3, #8]
   14e70:	2b03      	cmp	r3, #3
   14e72:	f000 8127 	beq.w	150c4 <pdn_interface_pdn_id_get+0x274>
   14e76:	6863      	ldr	r3, [r4, #4]
   14e78:	b11b      	cbz	r3, 14e82 <pdn_interface_pdn_id_get+0x32>
   14e7a:	689b      	ldr	r3, [r3, #8]
   14e7c:	2b03      	cmp	r3, #3
   14e7e:	f000 8110 	beq.w	150a2 <pdn_interface_pdn_id_get+0x252>
   14e82:	68a3      	ldr	r3, [r4, #8]
   14e84:	b11b      	cbz	r3, 14e8e <pdn_interface_pdn_id_get+0x3e>
   14e86:	689b      	ldr	r3, [r3, #8]
   14e88:	2b03      	cmp	r3, #3
   14e8a:	f000 80f9 	beq.w	15080 <pdn_interface_pdn_id_get+0x230>
   14e8e:	68e3      	ldr	r3, [r4, #12]
   14e90:	b11b      	cbz	r3, 14e9a <pdn_interface_pdn_id_get+0x4a>
   14e92:	689b      	ldr	r3, [r3, #8]
   14e94:	2b03      	cmp	r3, #3
   14e96:	f000 80e2 	beq.w	1505e <pdn_interface_pdn_id_get+0x20e>
   14e9a:	6923      	ldr	r3, [r4, #16]
   14e9c:	b11b      	cbz	r3, 14ea6 <pdn_interface_pdn_id_get+0x56>
   14e9e:	689b      	ldr	r3, [r3, #8]
   14ea0:	2b03      	cmp	r3, #3
   14ea2:	f000 8123 	beq.w	150ec <pdn_interface_pdn_id_get+0x29c>
   14ea6:	6963      	ldr	r3, [r4, #20]
   14ea8:	b11b      	cbz	r3, 14eb2 <pdn_interface_pdn_id_get+0x62>
   14eaa:	689b      	ldr	r3, [r3, #8]
   14eac:	2b03      	cmp	r3, #3
   14eae:	f000 8161 	beq.w	15174 <pdn_interface_pdn_id_get+0x324>
   14eb2:	69a3      	ldr	r3, [r4, #24]
   14eb4:	b11b      	cbz	r3, 14ebe <pdn_interface_pdn_id_get+0x6e>
   14eb6:	689b      	ldr	r3, [r3, #8]
   14eb8:	2b03      	cmp	r3, #3
   14eba:	f000 814a 	beq.w	15152 <pdn_interface_pdn_id_get+0x302>
   14ebe:	69e3      	ldr	r3, [r4, #28]
   14ec0:	b11b      	cbz	r3, 14eca <pdn_interface_pdn_id_get+0x7a>
   14ec2:	689b      	ldr	r3, [r3, #8]
   14ec4:	2b03      	cmp	r3, #3
   14ec6:	f000 8133 	beq.w	15130 <pdn_interface_pdn_id_get+0x2e0>
   14eca:	6a23      	ldr	r3, [r4, #32]
   14ecc:	b11b      	cbz	r3, 14ed6 <pdn_interface_pdn_id_get+0x86>
   14ece:	689b      	ldr	r3, [r3, #8]
   14ed0:	2b03      	cmp	r3, #3
   14ed2:	f000 811c 	beq.w	1510e <pdn_interface_pdn_id_get+0x2be>
   14ed6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14ed8:	b11b      	cbz	r3, 14ee2 <pdn_interface_pdn_id_get+0x92>
   14eda:	689b      	ldr	r3, [r3, #8]
   14edc:	2b03      	cmp	r3, #3
   14ede:	f000 80ad 	beq.w	1503c <pdn_interface_pdn_id_get+0x1ec>
   14ee2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14ee6:	b003      	add	sp, #12
   14ee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14eec:	b11b      	cbz	r3, 14ef6 <pdn_interface_pdn_id_get+0xa6>
   14eee:	689b      	ldr	r3, [r3, #8]
   14ef0:	2b03      	cmp	r3, #3
   14ef2:	f000 8335 	beq.w	15560 <pdn_interface_pdn_id_get+0x710>
   14ef6:	6863      	ldr	r3, [r4, #4]
   14ef8:	b11b      	cbz	r3, 14f02 <pdn_interface_pdn_id_get+0xb2>
   14efa:	689b      	ldr	r3, [r3, #8]
   14efc:	2b03      	cmp	r3, #3
   14efe:	f000 82fd 	beq.w	154fc <pdn_interface_pdn_id_get+0x6ac>
   14f02:	68a3      	ldr	r3, [r4, #8]
   14f04:	b11b      	cbz	r3, 14f0e <pdn_interface_pdn_id_get+0xbe>
   14f06:	689b      	ldr	r3, [r3, #8]
   14f08:	2b03      	cmp	r3, #3
   14f0a:	f000 82d5 	beq.w	154b8 <pdn_interface_pdn_id_get+0x668>
   14f0e:	68e3      	ldr	r3, [r4, #12]
   14f10:	b11b      	cbz	r3, 14f1a <pdn_interface_pdn_id_get+0xca>
   14f12:	689e      	ldr	r6, [r3, #8]
   14f14:	2e03      	cmp	r6, #3
   14f16:	f000 81f0 	beq.w	152fa <pdn_interface_pdn_id_get+0x4aa>
   14f1a:	6923      	ldr	r3, [r4, #16]
   14f1c:	b11b      	cbz	r3, 14f26 <pdn_interface_pdn_id_get+0xd6>
   14f1e:	689b      	ldr	r3, [r3, #8]
   14f20:	2b03      	cmp	r3, #3
   14f22:	f000 8203 	beq.w	1532c <pdn_interface_pdn_id_get+0x4dc>
   14f26:	6963      	ldr	r3, [r4, #20]
   14f28:	b11b      	cbz	r3, 14f32 <pdn_interface_pdn_id_get+0xe2>
   14f2a:	689b      	ldr	r3, [r3, #8]
   14f2c:	2b03      	cmp	r3, #3
   14f2e:	f000 8215 	beq.w	1535c <pdn_interface_pdn_id_get+0x50c>
   14f32:	69a3      	ldr	r3, [r4, #24]
   14f34:	b11b      	cbz	r3, 14f3e <pdn_interface_pdn_id_get+0xee>
   14f36:	689b      	ldr	r3, [r3, #8]
   14f38:	2b03      	cmp	r3, #3
   14f3a:	f000 8227 	beq.w	1538c <pdn_interface_pdn_id_get+0x53c>
   14f3e:	69e3      	ldr	r3, [r4, #28]
   14f40:	b11b      	cbz	r3, 14f4a <pdn_interface_pdn_id_get+0xfa>
   14f42:	689b      	ldr	r3, [r3, #8]
   14f44:	2b03      	cmp	r3, #3
   14f46:	f000 8239 	beq.w	153bc <pdn_interface_pdn_id_get+0x56c>
   14f4a:	6a23      	ldr	r3, [r4, #32]
   14f4c:	b11b      	cbz	r3, 14f56 <pdn_interface_pdn_id_get+0x106>
   14f4e:	689b      	ldr	r3, [r3, #8]
   14f50:	2b03      	cmp	r3, #3
   14f52:	f000 824d 	beq.w	153f0 <pdn_interface_pdn_id_get+0x5a0>
   14f56:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14f58:	2b00      	cmp	r3, #0
   14f5a:	d0c2      	beq.n	14ee2 <pdn_interface_pdn_id_get+0x92>
   14f5c:	689b      	ldr	r3, [r3, #8]
   14f5e:	2b03      	cmp	r3, #3
   14f60:	d1bf      	bne.n	14ee2 <pdn_interface_pdn_id_get+0x92>
   14f62:	4628      	mov	r0, r5
   14f64:	f006 ff24 	bl	1bdb0 <strlen>
   14f68:	4606      	mov	r6, r0
   14f6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   14f6c:	300c      	adds	r0, #12
   14f6e:	f006 ff1f 	bl	1bdb0 <strlen>
   14f72:	42b0      	cmp	r0, r6
   14f74:	d1b5      	bne.n	14ee2 <pdn_interface_pdn_id_get+0x92>
   14f76:	6a61      	ldr	r1, [r4, #36]	; 0x24
   14f78:	4628      	mov	r0, r5
   14f7a:	310c      	adds	r1, #12
   14f7c:	f006 ff1f 	bl	1bdbe <strcmp>
   14f80:	2800      	cmp	r0, #0
   14f82:	d1ae      	bne.n	14ee2 <pdn_interface_pdn_id_get+0x92>
   14f84:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14f86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   14f88:	0792      	lsls	r2, r2, #30
   14f8a:	d5aa      	bpl.n	14ee2 <pdn_interface_pdn_id_get+0x92>
   14f8c:	2609      	movs	r6, #9
   14f8e:	e11a      	b.n	151c6 <pdn_interface_pdn_id_get+0x376>
   14f90:	b11b      	cbz	r3, 14f9a <pdn_interface_pdn_id_get+0x14a>
   14f92:	689b      	ldr	r3, [r3, #8]
   14f94:	2b03      	cmp	r3, #3
   14f96:	f000 82fd 	beq.w	15594 <pdn_interface_pdn_id_get+0x744>
   14f9a:	6863      	ldr	r3, [r4, #4]
   14f9c:	b11b      	cbz	r3, 14fa6 <pdn_interface_pdn_id_get+0x156>
   14f9e:	689b      	ldr	r3, [r3, #8]
   14fa0:	2b03      	cmp	r3, #3
   14fa2:	f000 82c5 	beq.w	15530 <pdn_interface_pdn_id_get+0x6e0>
   14fa6:	68a3      	ldr	r3, [r4, #8]
   14fa8:	b11b      	cbz	r3, 14fb2 <pdn_interface_pdn_id_get+0x162>
   14faa:	689b      	ldr	r3, [r3, #8]
   14fac:	2b03      	cmp	r3, #3
   14fae:	f000 8269 	beq.w	15484 <pdn_interface_pdn_id_get+0x634>
   14fb2:	68e3      	ldr	r3, [r4, #12]
   14fb4:	b11b      	cbz	r3, 14fbe <pdn_interface_pdn_id_get+0x16e>
   14fb6:	689e      	ldr	r6, [r3, #8]
   14fb8:	2e03      	cmp	r6, #3
   14fba:	f000 80ec 	beq.w	15196 <pdn_interface_pdn_id_get+0x346>
   14fbe:	6923      	ldr	r3, [r4, #16]
   14fc0:	b11b      	cbz	r3, 14fca <pdn_interface_pdn_id_get+0x17a>
   14fc2:	689b      	ldr	r3, [r3, #8]
   14fc4:	2b03      	cmp	r3, #3
   14fc6:	f000 814a 	beq.w	1525e <pdn_interface_pdn_id_get+0x40e>
   14fca:	6963      	ldr	r3, [r4, #20]
   14fcc:	b11b      	cbz	r3, 14fd6 <pdn_interface_pdn_id_get+0x186>
   14fce:	689b      	ldr	r3, [r3, #8]
   14fd0:	2b03      	cmp	r3, #3
   14fd2:	f000 815e 	beq.w	15292 <pdn_interface_pdn_id_get+0x442>
   14fd6:	69a3      	ldr	r3, [r4, #24]
   14fd8:	b11b      	cbz	r3, 14fe2 <pdn_interface_pdn_id_get+0x192>
   14fda:	689b      	ldr	r3, [r3, #8]
   14fdc:	2b03      	cmp	r3, #3
   14fde:	f000 8172 	beq.w	152c6 <pdn_interface_pdn_id_get+0x476>
   14fe2:	69e3      	ldr	r3, [r4, #28]
   14fe4:	b11b      	cbz	r3, 14fee <pdn_interface_pdn_id_get+0x19e>
   14fe6:	689b      	ldr	r3, [r3, #8]
   14fe8:	2b03      	cmp	r3, #3
   14fea:	f000 821b 	beq.w	15424 <pdn_interface_pdn_id_get+0x5d4>
   14fee:	6a23      	ldr	r3, [r4, #32]
   14ff0:	b11b      	cbz	r3, 14ffa <pdn_interface_pdn_id_get+0x1aa>
   14ff2:	689b      	ldr	r3, [r3, #8]
   14ff4:	2b03      	cmp	r3, #3
   14ff6:	f000 822d 	beq.w	15454 <pdn_interface_pdn_id_get+0x604>
   14ffa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14ffc:	2b00      	cmp	r3, #0
   14ffe:	f43f af70 	beq.w	14ee2 <pdn_interface_pdn_id_get+0x92>
   15002:	689b      	ldr	r3, [r3, #8]
   15004:	2b03      	cmp	r3, #3
   15006:	f47f af6c 	bne.w	14ee2 <pdn_interface_pdn_id_get+0x92>
   1500a:	4628      	mov	r0, r5
   1500c:	f006 fed0 	bl	1bdb0 <strlen>
   15010:	4606      	mov	r6, r0
   15012:	6a60      	ldr	r0, [r4, #36]	; 0x24
   15014:	300c      	adds	r0, #12
   15016:	f006 fecb 	bl	1bdb0 <strlen>
   1501a:	4286      	cmp	r6, r0
   1501c:	f47f af61 	bne.w	14ee2 <pdn_interface_pdn_id_get+0x92>
   15020:	6a61      	ldr	r1, [r4, #36]	; 0x24
   15022:	4628      	mov	r0, r5
   15024:	310c      	adds	r1, #12
   15026:	f006 feca 	bl	1bdbe <strcmp>
   1502a:	2800      	cmp	r0, #0
   1502c:	f47f af59 	bne.w	14ee2 <pdn_interface_pdn_id_get+0x92>
   15030:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15032:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15034:	07d2      	lsls	r2, r2, #31
   15036:	f57f af54 	bpl.w	14ee2 <pdn_interface_pdn_id_get+0x92>
   1503a:	e7a7      	b.n	14f8c <pdn_interface_pdn_id_get+0x13c>
   1503c:	4628      	mov	r0, r5
   1503e:	f006 feb7 	bl	1bdb0 <strlen>
   15042:	4606      	mov	r6, r0
   15044:	6a60      	ldr	r0, [r4, #36]	; 0x24
   15046:	300c      	adds	r0, #12
   15048:	f006 feb2 	bl	1bdb0 <strlen>
   1504c:	42b0      	cmp	r0, r6
   1504e:	f47f af48 	bne.w	14ee2 <pdn_interface_pdn_id_get+0x92>
   15052:	6a61      	ldr	r1, [r4, #36]	; 0x24
   15054:	4628      	mov	r0, r5
   15056:	310c      	adds	r1, #12
   15058:	f006 feb1 	bl	1bdbe <strcmp>
   1505c:	e741      	b.n	14ee2 <pdn_interface_pdn_id_get+0x92>
   1505e:	4628      	mov	r0, r5
   15060:	f006 fea6 	bl	1bdb0 <strlen>
   15064:	4606      	mov	r6, r0
   15066:	68e0      	ldr	r0, [r4, #12]
   15068:	300c      	adds	r0, #12
   1506a:	f006 fea1 	bl	1bdb0 <strlen>
   1506e:	4286      	cmp	r6, r0
   15070:	f47f af13 	bne.w	14e9a <pdn_interface_pdn_id_get+0x4a>
   15074:	68e1      	ldr	r1, [r4, #12]
   15076:	4628      	mov	r0, r5
   15078:	310c      	adds	r1, #12
   1507a:	f006 fea0 	bl	1bdbe <strcmp>
   1507e:	e70c      	b.n	14e9a <pdn_interface_pdn_id_get+0x4a>
   15080:	4628      	mov	r0, r5
   15082:	f006 fe95 	bl	1bdb0 <strlen>
   15086:	4606      	mov	r6, r0
   15088:	68a0      	ldr	r0, [r4, #8]
   1508a:	300c      	adds	r0, #12
   1508c:	f006 fe90 	bl	1bdb0 <strlen>
   15090:	4286      	cmp	r6, r0
   15092:	f47f aefc 	bne.w	14e8e <pdn_interface_pdn_id_get+0x3e>
   15096:	68a1      	ldr	r1, [r4, #8]
   15098:	4628      	mov	r0, r5
   1509a:	310c      	adds	r1, #12
   1509c:	f006 fe8f 	bl	1bdbe <strcmp>
   150a0:	e6f5      	b.n	14e8e <pdn_interface_pdn_id_get+0x3e>
   150a2:	4628      	mov	r0, r5
   150a4:	f006 fe84 	bl	1bdb0 <strlen>
   150a8:	4606      	mov	r6, r0
   150aa:	6860      	ldr	r0, [r4, #4]
   150ac:	300c      	adds	r0, #12
   150ae:	f006 fe7f 	bl	1bdb0 <strlen>
   150b2:	4286      	cmp	r6, r0
   150b4:	f47f aee5 	bne.w	14e82 <pdn_interface_pdn_id_get+0x32>
   150b8:	6861      	ldr	r1, [r4, #4]
   150ba:	4628      	mov	r0, r5
   150bc:	310c      	adds	r1, #12
   150be:	f006 fe7e 	bl	1bdbe <strcmp>
   150c2:	e6de      	b.n	14e82 <pdn_interface_pdn_id_get+0x32>
   150c4:	4608      	mov	r0, r1
   150c6:	f006 fe73 	bl	1bdb0 <strlen>
   150ca:	4606      	mov	r6, r0
   150cc:	6820      	ldr	r0, [r4, #0]
   150ce:	300c      	adds	r0, #12
   150d0:	f006 fe6e 	bl	1bdb0 <strlen>
   150d4:	4286      	cmp	r6, r0
   150d6:	f47f aece 	bne.w	14e76 <pdn_interface_pdn_id_get+0x26>
   150da:	6821      	ldr	r1, [r4, #0]
   150dc:	4628      	mov	r0, r5
   150de:	310c      	adds	r1, #12
   150e0:	f006 fe6d 	bl	1bdbe <strcmp>
   150e4:	e6c7      	b.n	14e76 <pdn_interface_pdn_id_get+0x26>
   150e6:	bf00      	nop
   150e8:	20020938 	.word	0x20020938
   150ec:	4628      	mov	r0, r5
   150ee:	f006 fe5f 	bl	1bdb0 <strlen>
   150f2:	4606      	mov	r6, r0
   150f4:	6920      	ldr	r0, [r4, #16]
   150f6:	300c      	adds	r0, #12
   150f8:	f006 fe5a 	bl	1bdb0 <strlen>
   150fc:	4286      	cmp	r6, r0
   150fe:	f47f aed2 	bne.w	14ea6 <pdn_interface_pdn_id_get+0x56>
   15102:	6921      	ldr	r1, [r4, #16]
   15104:	4628      	mov	r0, r5
   15106:	310c      	adds	r1, #12
   15108:	f006 fe59 	bl	1bdbe <strcmp>
   1510c:	e6cb      	b.n	14ea6 <pdn_interface_pdn_id_get+0x56>
   1510e:	4628      	mov	r0, r5
   15110:	f006 fe4e 	bl	1bdb0 <strlen>
   15114:	4606      	mov	r6, r0
   15116:	6a20      	ldr	r0, [r4, #32]
   15118:	300c      	adds	r0, #12
   1511a:	f006 fe49 	bl	1bdb0 <strlen>
   1511e:	4286      	cmp	r6, r0
   15120:	f47f aed9 	bne.w	14ed6 <pdn_interface_pdn_id_get+0x86>
   15124:	6a21      	ldr	r1, [r4, #32]
   15126:	4628      	mov	r0, r5
   15128:	310c      	adds	r1, #12
   1512a:	f006 fe48 	bl	1bdbe <strcmp>
   1512e:	e6d2      	b.n	14ed6 <pdn_interface_pdn_id_get+0x86>
   15130:	4628      	mov	r0, r5
   15132:	f006 fe3d 	bl	1bdb0 <strlen>
   15136:	4606      	mov	r6, r0
   15138:	69e0      	ldr	r0, [r4, #28]
   1513a:	300c      	adds	r0, #12
   1513c:	f006 fe38 	bl	1bdb0 <strlen>
   15140:	4286      	cmp	r6, r0
   15142:	f47f aec2 	bne.w	14eca <pdn_interface_pdn_id_get+0x7a>
   15146:	69e1      	ldr	r1, [r4, #28]
   15148:	4628      	mov	r0, r5
   1514a:	310c      	adds	r1, #12
   1514c:	f006 fe37 	bl	1bdbe <strcmp>
   15150:	e6bb      	b.n	14eca <pdn_interface_pdn_id_get+0x7a>
   15152:	4628      	mov	r0, r5
   15154:	f006 fe2c 	bl	1bdb0 <strlen>
   15158:	4606      	mov	r6, r0
   1515a:	69a0      	ldr	r0, [r4, #24]
   1515c:	300c      	adds	r0, #12
   1515e:	f006 fe27 	bl	1bdb0 <strlen>
   15162:	4286      	cmp	r6, r0
   15164:	f47f aeab 	bne.w	14ebe <pdn_interface_pdn_id_get+0x6e>
   15168:	69a1      	ldr	r1, [r4, #24]
   1516a:	4628      	mov	r0, r5
   1516c:	310c      	adds	r1, #12
   1516e:	f006 fe26 	bl	1bdbe <strcmp>
   15172:	e6a4      	b.n	14ebe <pdn_interface_pdn_id_get+0x6e>
   15174:	4628      	mov	r0, r5
   15176:	f006 fe1b 	bl	1bdb0 <strlen>
   1517a:	4606      	mov	r6, r0
   1517c:	6960      	ldr	r0, [r4, #20]
   1517e:	300c      	adds	r0, #12
   15180:	f006 fe16 	bl	1bdb0 <strlen>
   15184:	4286      	cmp	r6, r0
   15186:	f47f ae94 	bne.w	14eb2 <pdn_interface_pdn_id_get+0x62>
   1518a:	6961      	ldr	r1, [r4, #20]
   1518c:	4628      	mov	r0, r5
   1518e:	310c      	adds	r1, #12
   15190:	f006 fe15 	bl	1bdbe <strcmp>
   15194:	e68d      	b.n	14eb2 <pdn_interface_pdn_id_get+0x62>
   15196:	4628      	mov	r0, r5
   15198:	f006 fe0a 	bl	1bdb0 <strlen>
   1519c:	4607      	mov	r7, r0
   1519e:	68e0      	ldr	r0, [r4, #12]
   151a0:	300c      	adds	r0, #12
   151a2:	f006 fe05 	bl	1bdb0 <strlen>
   151a6:	4287      	cmp	r7, r0
   151a8:	f47f af09 	bne.w	14fbe <pdn_interface_pdn_id_get+0x16e>
   151ac:	68e1      	ldr	r1, [r4, #12]
   151ae:	4628      	mov	r0, r5
   151b0:	310c      	adds	r1, #12
   151b2:	f006 fe04 	bl	1bdbe <strcmp>
   151b6:	2800      	cmp	r0, #0
   151b8:	f47f af01 	bne.w	14fbe <pdn_interface_pdn_id_get+0x16e>
   151bc:	68e3      	ldr	r3, [r4, #12]
   151be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   151c0:	07d1      	lsls	r1, r2, #31
   151c2:	f57f aefc 	bpl.w	14fbe <pdn_interface_pdn_id_get+0x16e>
   151c6:	6858      	ldr	r0, [r3, #4]
   151c8:	1c43      	adds	r3, r0, #1
   151ca:	f47f ae8c 	bne.w	14ee6 <pdn_interface_pdn_id_get+0x96>
   151ce:	4dc6      	ldr	r5, [pc, #792]	; (154e8 <pdn_interface_pdn_id_get+0x698>)
   151d0:	4ac6      	ldr	r2, [pc, #792]	; (154ec <pdn_interface_pdn_id_get+0x69c>)
   151d2:	f44f 7180 	mov.w	r1, #256	; 0x100
   151d6:	4628      	mov	r0, r5
   151d8:	f7f9 febe 	bl	ef58 <snprintf>
   151dc:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   151e0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   151e4:	681b      	ldr	r3, [r3, #0]
   151e6:	4ac2      	ldr	r2, [pc, #776]	; (154f0 <pdn_interface_pdn_id_get+0x6a0>)
   151e8:	4428      	add	r0, r5
   151ea:	f8df 830c 	ldr.w	r8, [pc, #780]	; 154f8 <pdn_interface_pdn_id_get+0x6a8>
   151ee:	f7f9 feb3 	bl	ef58 <snprintf>
   151f2:	4628      	mov	r0, r5
   151f4:	f8d8 9000 	ldr.w	r9, [r8]
   151f8:	2700      	movs	r7, #0
   151fa:	f006 fdd9 	bl	1bdb0 <strlen>
   151fe:	4629      	mov	r1, r5
   15200:	4602      	mov	r2, r0
   15202:	463b      	mov	r3, r7
   15204:	4648      	mov	r0, r9
   15206:	9701      	str	r7, [sp, #4]
   15208:	9700      	str	r7, [sp, #0]
   1520a:	f7fc f9a1 	bl	11550 <at_interface_write>
   1520e:	4681      	mov	r9, r0
   15210:	4628      	mov	r0, r5
   15212:	f006 fdcd 	bl	1bdb0 <strlen>
   15216:	4548      	cmp	r0, r9
   15218:	f040 81e9 	bne.w	155ee <pdn_interface_pdn_id_get+0x79e>
   1521c:	463b      	mov	r3, r7
   1521e:	f44f 7280 	mov.w	r2, #256	; 0x100
   15222:	e9cd 7700 	strd	r7, r7, [sp]
   15226:	4629      	mov	r1, r5
   15228:	f8d8 0000 	ldr.w	r0, [r8]
   1522c:	f7fc fa78 	bl	11720 <at_interface_read>
   15230:	4607      	mov	r7, r0
   15232:	48b0      	ldr	r0, [pc, #704]	; (154f4 <pdn_interface_pdn_id_get+0x6a4>)
   15234:	f006 fdbc 	bl	1bdb0 <strlen>
   15238:	4287      	cmp	r7, r0
   1523a:	4602      	mov	r2, r0
   1523c:	f2c0 81c7 	blt.w	155ce <pdn_interface_pdn_id_get+0x77e>
   15240:	4629      	mov	r1, r5
   15242:	48ac      	ldr	r0, [pc, #688]	; (154f4 <pdn_interface_pdn_id_get+0x6a4>)
   15244:	f006 fdc7 	bl	1bdd6 <strncmp>
   15248:	2800      	cmp	r0, #0
   1524a:	f040 81c0 	bne.w	155ce <pdn_interface_pdn_id_get+0x77e>
   1524e:	4629      	mov	r1, r5
   15250:	4630      	mov	r0, r6
   15252:	f7ff f92b 	bl	144ac <pdn_id_get_parser>
   15256:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   1525a:	6858      	ldr	r0, [r3, #4]
   1525c:	e643      	b.n	14ee6 <pdn_interface_pdn_id_get+0x96>
   1525e:	4628      	mov	r0, r5
   15260:	f006 fda6 	bl	1bdb0 <strlen>
   15264:	4606      	mov	r6, r0
   15266:	6920      	ldr	r0, [r4, #16]
   15268:	300c      	adds	r0, #12
   1526a:	f006 fda1 	bl	1bdb0 <strlen>
   1526e:	4286      	cmp	r6, r0
   15270:	f47f aeab 	bne.w	14fca <pdn_interface_pdn_id_get+0x17a>
   15274:	6921      	ldr	r1, [r4, #16]
   15276:	4628      	mov	r0, r5
   15278:	310c      	adds	r1, #12
   1527a:	f006 fda0 	bl	1bdbe <strcmp>
   1527e:	2800      	cmp	r0, #0
   15280:	f47f aea3 	bne.w	14fca <pdn_interface_pdn_id_get+0x17a>
   15284:	6923      	ldr	r3, [r4, #16]
   15286:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15288:	07d2      	lsls	r2, r2, #31
   1528a:	f57f ae9e 	bpl.w	14fca <pdn_interface_pdn_id_get+0x17a>
   1528e:	2604      	movs	r6, #4
   15290:	e799      	b.n	151c6 <pdn_interface_pdn_id_get+0x376>
   15292:	4628      	mov	r0, r5
   15294:	f006 fd8c 	bl	1bdb0 <strlen>
   15298:	4606      	mov	r6, r0
   1529a:	6960      	ldr	r0, [r4, #20]
   1529c:	300c      	adds	r0, #12
   1529e:	f006 fd87 	bl	1bdb0 <strlen>
   152a2:	4286      	cmp	r6, r0
   152a4:	f47f ae97 	bne.w	14fd6 <pdn_interface_pdn_id_get+0x186>
   152a8:	6961      	ldr	r1, [r4, #20]
   152aa:	4628      	mov	r0, r5
   152ac:	310c      	adds	r1, #12
   152ae:	f006 fd86 	bl	1bdbe <strcmp>
   152b2:	2800      	cmp	r0, #0
   152b4:	f47f ae8f 	bne.w	14fd6 <pdn_interface_pdn_id_get+0x186>
   152b8:	6963      	ldr	r3, [r4, #20]
   152ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   152bc:	07d7      	lsls	r7, r2, #31
   152be:	f57f ae8a 	bpl.w	14fd6 <pdn_interface_pdn_id_get+0x186>
   152c2:	2605      	movs	r6, #5
   152c4:	e77f      	b.n	151c6 <pdn_interface_pdn_id_get+0x376>
   152c6:	4628      	mov	r0, r5
   152c8:	f006 fd72 	bl	1bdb0 <strlen>
   152cc:	4606      	mov	r6, r0
   152ce:	69a0      	ldr	r0, [r4, #24]
   152d0:	300c      	adds	r0, #12
   152d2:	f006 fd6d 	bl	1bdb0 <strlen>
   152d6:	4286      	cmp	r6, r0
   152d8:	f47f ae83 	bne.w	14fe2 <pdn_interface_pdn_id_get+0x192>
   152dc:	69a1      	ldr	r1, [r4, #24]
   152de:	4628      	mov	r0, r5
   152e0:	310c      	adds	r1, #12
   152e2:	f006 fd6c 	bl	1bdbe <strcmp>
   152e6:	2800      	cmp	r0, #0
   152e8:	f47f ae7b 	bne.w	14fe2 <pdn_interface_pdn_id_get+0x192>
   152ec:	69a3      	ldr	r3, [r4, #24]
   152ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   152f0:	07d6      	lsls	r6, r2, #31
   152f2:	f57f ae76 	bpl.w	14fe2 <pdn_interface_pdn_id_get+0x192>
   152f6:	2606      	movs	r6, #6
   152f8:	e765      	b.n	151c6 <pdn_interface_pdn_id_get+0x376>
   152fa:	4628      	mov	r0, r5
   152fc:	f006 fd58 	bl	1bdb0 <strlen>
   15300:	4607      	mov	r7, r0
   15302:	68e0      	ldr	r0, [r4, #12]
   15304:	300c      	adds	r0, #12
   15306:	f006 fd53 	bl	1bdb0 <strlen>
   1530a:	4287      	cmp	r7, r0
   1530c:	f47f ae05 	bne.w	14f1a <pdn_interface_pdn_id_get+0xca>
   15310:	68e1      	ldr	r1, [r4, #12]
   15312:	4628      	mov	r0, r5
   15314:	310c      	adds	r1, #12
   15316:	f006 fd52 	bl	1bdbe <strcmp>
   1531a:	2800      	cmp	r0, #0
   1531c:	f47f adfd 	bne.w	14f1a <pdn_interface_pdn_id_get+0xca>
   15320:	68e3      	ldr	r3, [r4, #12]
   15322:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15324:	0791      	lsls	r1, r2, #30
   15326:	f53f af4e 	bmi.w	151c6 <pdn_interface_pdn_id_get+0x376>
   1532a:	e5f6      	b.n	14f1a <pdn_interface_pdn_id_get+0xca>
   1532c:	4628      	mov	r0, r5
   1532e:	f006 fd3f 	bl	1bdb0 <strlen>
   15332:	4606      	mov	r6, r0
   15334:	6920      	ldr	r0, [r4, #16]
   15336:	300c      	adds	r0, #12
   15338:	f006 fd3a 	bl	1bdb0 <strlen>
   1533c:	4286      	cmp	r6, r0
   1533e:	f47f adf2 	bne.w	14f26 <pdn_interface_pdn_id_get+0xd6>
   15342:	6921      	ldr	r1, [r4, #16]
   15344:	4628      	mov	r0, r5
   15346:	310c      	adds	r1, #12
   15348:	f006 fd39 	bl	1bdbe <strcmp>
   1534c:	2800      	cmp	r0, #0
   1534e:	f47f adea 	bne.w	14f26 <pdn_interface_pdn_id_get+0xd6>
   15352:	6923      	ldr	r3, [r4, #16]
   15354:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15356:	0792      	lsls	r2, r2, #30
   15358:	d499      	bmi.n	1528e <pdn_interface_pdn_id_get+0x43e>
   1535a:	e5e4      	b.n	14f26 <pdn_interface_pdn_id_get+0xd6>
   1535c:	4628      	mov	r0, r5
   1535e:	f006 fd27 	bl	1bdb0 <strlen>
   15362:	4606      	mov	r6, r0
   15364:	6960      	ldr	r0, [r4, #20]
   15366:	300c      	adds	r0, #12
   15368:	f006 fd22 	bl	1bdb0 <strlen>
   1536c:	4286      	cmp	r6, r0
   1536e:	f47f ade0 	bne.w	14f32 <pdn_interface_pdn_id_get+0xe2>
   15372:	6961      	ldr	r1, [r4, #20]
   15374:	4628      	mov	r0, r5
   15376:	310c      	adds	r1, #12
   15378:	f006 fd21 	bl	1bdbe <strcmp>
   1537c:	2800      	cmp	r0, #0
   1537e:	f47f add8 	bne.w	14f32 <pdn_interface_pdn_id_get+0xe2>
   15382:	6963      	ldr	r3, [r4, #20]
   15384:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15386:	0797      	lsls	r7, r2, #30
   15388:	d49b      	bmi.n	152c2 <pdn_interface_pdn_id_get+0x472>
   1538a:	e5d2      	b.n	14f32 <pdn_interface_pdn_id_get+0xe2>
   1538c:	4628      	mov	r0, r5
   1538e:	f006 fd0f 	bl	1bdb0 <strlen>
   15392:	4606      	mov	r6, r0
   15394:	69a0      	ldr	r0, [r4, #24]
   15396:	300c      	adds	r0, #12
   15398:	f006 fd0a 	bl	1bdb0 <strlen>
   1539c:	4286      	cmp	r6, r0
   1539e:	f47f adce 	bne.w	14f3e <pdn_interface_pdn_id_get+0xee>
   153a2:	69a1      	ldr	r1, [r4, #24]
   153a4:	4628      	mov	r0, r5
   153a6:	310c      	adds	r1, #12
   153a8:	f006 fd09 	bl	1bdbe <strcmp>
   153ac:	2800      	cmp	r0, #0
   153ae:	f47f adc6 	bne.w	14f3e <pdn_interface_pdn_id_get+0xee>
   153b2:	69a3      	ldr	r3, [r4, #24]
   153b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   153b6:	0796      	lsls	r6, r2, #30
   153b8:	d49d      	bmi.n	152f6 <pdn_interface_pdn_id_get+0x4a6>
   153ba:	e5c0      	b.n	14f3e <pdn_interface_pdn_id_get+0xee>
   153bc:	4628      	mov	r0, r5
   153be:	f006 fcf7 	bl	1bdb0 <strlen>
   153c2:	4606      	mov	r6, r0
   153c4:	69e0      	ldr	r0, [r4, #28]
   153c6:	300c      	adds	r0, #12
   153c8:	f006 fcf2 	bl	1bdb0 <strlen>
   153cc:	4286      	cmp	r6, r0
   153ce:	f47f adbc 	bne.w	14f4a <pdn_interface_pdn_id_get+0xfa>
   153d2:	69e1      	ldr	r1, [r4, #28]
   153d4:	4628      	mov	r0, r5
   153d6:	310c      	adds	r1, #12
   153d8:	f006 fcf1 	bl	1bdbe <strcmp>
   153dc:	2800      	cmp	r0, #0
   153de:	f47f adb4 	bne.w	14f4a <pdn_interface_pdn_id_get+0xfa>
   153e2:	69e3      	ldr	r3, [r4, #28]
   153e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   153e6:	0790      	lsls	r0, r2, #30
   153e8:	f57f adaf 	bpl.w	14f4a <pdn_interface_pdn_id_get+0xfa>
   153ec:	2607      	movs	r6, #7
   153ee:	e6ea      	b.n	151c6 <pdn_interface_pdn_id_get+0x376>
   153f0:	4628      	mov	r0, r5
   153f2:	f006 fcdd 	bl	1bdb0 <strlen>
   153f6:	4606      	mov	r6, r0
   153f8:	6a20      	ldr	r0, [r4, #32]
   153fa:	300c      	adds	r0, #12
   153fc:	f006 fcd8 	bl	1bdb0 <strlen>
   15400:	4286      	cmp	r6, r0
   15402:	f47f ada8 	bne.w	14f56 <pdn_interface_pdn_id_get+0x106>
   15406:	6a21      	ldr	r1, [r4, #32]
   15408:	4628      	mov	r0, r5
   1540a:	310c      	adds	r1, #12
   1540c:	f006 fcd7 	bl	1bdbe <strcmp>
   15410:	2800      	cmp	r0, #0
   15412:	f47f ada0 	bne.w	14f56 <pdn_interface_pdn_id_get+0x106>
   15416:	6a23      	ldr	r3, [r4, #32]
   15418:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1541a:	0791      	lsls	r1, r2, #30
   1541c:	f57f ad9b 	bpl.w	14f56 <pdn_interface_pdn_id_get+0x106>
   15420:	2608      	movs	r6, #8
   15422:	e6d0      	b.n	151c6 <pdn_interface_pdn_id_get+0x376>
   15424:	4628      	mov	r0, r5
   15426:	f006 fcc3 	bl	1bdb0 <strlen>
   1542a:	4606      	mov	r6, r0
   1542c:	69e0      	ldr	r0, [r4, #28]
   1542e:	300c      	adds	r0, #12
   15430:	f006 fcbe 	bl	1bdb0 <strlen>
   15434:	4286      	cmp	r6, r0
   15436:	f47f adda 	bne.w	14fee <pdn_interface_pdn_id_get+0x19e>
   1543a:	69e1      	ldr	r1, [r4, #28]
   1543c:	4628      	mov	r0, r5
   1543e:	310c      	adds	r1, #12
   15440:	f006 fcbd 	bl	1bdbe <strcmp>
   15444:	2800      	cmp	r0, #0
   15446:	f47f add2 	bne.w	14fee <pdn_interface_pdn_id_get+0x19e>
   1544a:	69e3      	ldr	r3, [r4, #28]
   1544c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1544e:	07d0      	lsls	r0, r2, #31
   15450:	d4cc      	bmi.n	153ec <pdn_interface_pdn_id_get+0x59c>
   15452:	e5cc      	b.n	14fee <pdn_interface_pdn_id_get+0x19e>
   15454:	4628      	mov	r0, r5
   15456:	f006 fcab 	bl	1bdb0 <strlen>
   1545a:	4606      	mov	r6, r0
   1545c:	6a20      	ldr	r0, [r4, #32]
   1545e:	300c      	adds	r0, #12
   15460:	f006 fca6 	bl	1bdb0 <strlen>
   15464:	4286      	cmp	r6, r0
   15466:	f47f adc8 	bne.w	14ffa <pdn_interface_pdn_id_get+0x1aa>
   1546a:	6a21      	ldr	r1, [r4, #32]
   1546c:	4628      	mov	r0, r5
   1546e:	310c      	adds	r1, #12
   15470:	f006 fca5 	bl	1bdbe <strcmp>
   15474:	2800      	cmp	r0, #0
   15476:	f47f adc0 	bne.w	14ffa <pdn_interface_pdn_id_get+0x1aa>
   1547a:	6a23      	ldr	r3, [r4, #32]
   1547c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1547e:	07d1      	lsls	r1, r2, #31
   15480:	d4ce      	bmi.n	15420 <pdn_interface_pdn_id_get+0x5d0>
   15482:	e5ba      	b.n	14ffa <pdn_interface_pdn_id_get+0x1aa>
   15484:	4628      	mov	r0, r5
   15486:	f006 fc93 	bl	1bdb0 <strlen>
   1548a:	4606      	mov	r6, r0
   1548c:	68a0      	ldr	r0, [r4, #8]
   1548e:	300c      	adds	r0, #12
   15490:	f006 fc8e 	bl	1bdb0 <strlen>
   15494:	4286      	cmp	r6, r0
   15496:	f47f ad8c 	bne.w	14fb2 <pdn_interface_pdn_id_get+0x162>
   1549a:	68a1      	ldr	r1, [r4, #8]
   1549c:	4628      	mov	r0, r5
   1549e:	310c      	adds	r1, #12
   154a0:	f006 fc8d 	bl	1bdbe <strcmp>
   154a4:	2800      	cmp	r0, #0
   154a6:	f47f ad84 	bne.w	14fb2 <pdn_interface_pdn_id_get+0x162>
   154aa:	68a3      	ldr	r3, [r4, #8]
   154ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   154ae:	07d0      	lsls	r0, r2, #31
   154b0:	f57f ad7f 	bpl.w	14fb2 <pdn_interface_pdn_id_get+0x162>
   154b4:	2602      	movs	r6, #2
   154b6:	e686      	b.n	151c6 <pdn_interface_pdn_id_get+0x376>
   154b8:	4628      	mov	r0, r5
   154ba:	f006 fc79 	bl	1bdb0 <strlen>
   154be:	4606      	mov	r6, r0
   154c0:	68a0      	ldr	r0, [r4, #8]
   154c2:	300c      	adds	r0, #12
   154c4:	f006 fc74 	bl	1bdb0 <strlen>
   154c8:	4286      	cmp	r6, r0
   154ca:	f47f ad20 	bne.w	14f0e <pdn_interface_pdn_id_get+0xbe>
   154ce:	68a1      	ldr	r1, [r4, #8]
   154d0:	4628      	mov	r0, r5
   154d2:	310c      	adds	r1, #12
   154d4:	f006 fc73 	bl	1bdbe <strcmp>
   154d8:	2800      	cmp	r0, #0
   154da:	f47f ad18 	bne.w	14f0e <pdn_interface_pdn_id_get+0xbe>
   154de:	68a3      	ldr	r3, [r4, #8]
   154e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   154e2:	0790      	lsls	r0, r2, #30
   154e4:	d4e6      	bmi.n	154b4 <pdn_interface_pdn_id_get+0x664>
   154e6:	e512      	b.n	14f0e <pdn_interface_pdn_id_get+0xbe>
   154e8:	20020838 	.word	0x20020838
   154ec:	0001dd8c 	.word	0x0001dd8c
   154f0:	0001dd88 	.word	0x0001dd88
   154f4:	0001dd9c 	.word	0x0001dd9c
   154f8:	20020834 	.word	0x20020834
   154fc:	4628      	mov	r0, r5
   154fe:	f006 fc57 	bl	1bdb0 <strlen>
   15502:	4606      	mov	r6, r0
   15504:	6860      	ldr	r0, [r4, #4]
   15506:	300c      	adds	r0, #12
   15508:	f006 fc52 	bl	1bdb0 <strlen>
   1550c:	4286      	cmp	r6, r0
   1550e:	f47f acf8 	bne.w	14f02 <pdn_interface_pdn_id_get+0xb2>
   15512:	6861      	ldr	r1, [r4, #4]
   15514:	4628      	mov	r0, r5
   15516:	310c      	adds	r1, #12
   15518:	f006 fc51 	bl	1bdbe <strcmp>
   1551c:	2800      	cmp	r0, #0
   1551e:	f47f acf0 	bne.w	14f02 <pdn_interface_pdn_id_get+0xb2>
   15522:	6863      	ldr	r3, [r4, #4]
   15524:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15526:	0796      	lsls	r6, r2, #30
   15528:	f57f aceb 	bpl.w	14f02 <pdn_interface_pdn_id_get+0xb2>
   1552c:	2601      	movs	r6, #1
   1552e:	e64a      	b.n	151c6 <pdn_interface_pdn_id_get+0x376>
   15530:	4628      	mov	r0, r5
   15532:	f006 fc3d 	bl	1bdb0 <strlen>
   15536:	4606      	mov	r6, r0
   15538:	6860      	ldr	r0, [r4, #4]
   1553a:	300c      	adds	r0, #12
   1553c:	f006 fc38 	bl	1bdb0 <strlen>
   15540:	4286      	cmp	r6, r0
   15542:	f47f ad30 	bne.w	14fa6 <pdn_interface_pdn_id_get+0x156>
   15546:	6861      	ldr	r1, [r4, #4]
   15548:	4628      	mov	r0, r5
   1554a:	310c      	adds	r1, #12
   1554c:	f006 fc37 	bl	1bdbe <strcmp>
   15550:	2800      	cmp	r0, #0
   15552:	f47f ad28 	bne.w	14fa6 <pdn_interface_pdn_id_get+0x156>
   15556:	6863      	ldr	r3, [r4, #4]
   15558:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1555a:	07d6      	lsls	r6, r2, #31
   1555c:	d4e6      	bmi.n	1552c <pdn_interface_pdn_id_get+0x6dc>
   1555e:	e522      	b.n	14fa6 <pdn_interface_pdn_id_get+0x156>
   15560:	4608      	mov	r0, r1
   15562:	f006 fc25 	bl	1bdb0 <strlen>
   15566:	4606      	mov	r6, r0
   15568:	6820      	ldr	r0, [r4, #0]
   1556a:	300c      	adds	r0, #12
   1556c:	f006 fc20 	bl	1bdb0 <strlen>
   15570:	4286      	cmp	r6, r0
   15572:	f47f acc0 	bne.w	14ef6 <pdn_interface_pdn_id_get+0xa6>
   15576:	6821      	ldr	r1, [r4, #0]
   15578:	4628      	mov	r0, r5
   1557a:	310c      	adds	r1, #12
   1557c:	f006 fc1f 	bl	1bdbe <strcmp>
   15580:	4606      	mov	r6, r0
   15582:	2800      	cmp	r0, #0
   15584:	f47f acb7 	bne.w	14ef6 <pdn_interface_pdn_id_get+0xa6>
   15588:	6823      	ldr	r3, [r4, #0]
   1558a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1558c:	0797      	lsls	r7, r2, #30
   1558e:	f53f ae1a 	bmi.w	151c6 <pdn_interface_pdn_id_get+0x376>
   15592:	e4b0      	b.n	14ef6 <pdn_interface_pdn_id_get+0xa6>
   15594:	4608      	mov	r0, r1
   15596:	f006 fc0b 	bl	1bdb0 <strlen>
   1559a:	4606      	mov	r6, r0
   1559c:	6820      	ldr	r0, [r4, #0]
   1559e:	300c      	adds	r0, #12
   155a0:	f006 fc06 	bl	1bdb0 <strlen>
   155a4:	4286      	cmp	r6, r0
   155a6:	f47f acf8 	bne.w	14f9a <pdn_interface_pdn_id_get+0x14a>
   155aa:	6821      	ldr	r1, [r4, #0]
   155ac:	4628      	mov	r0, r5
   155ae:	310c      	adds	r1, #12
   155b0:	f006 fc05 	bl	1bdbe <strcmp>
   155b4:	4606      	mov	r6, r0
   155b6:	2800      	cmp	r0, #0
   155b8:	f47f acef 	bne.w	14f9a <pdn_interface_pdn_id_get+0x14a>
   155bc:	6823      	ldr	r3, [r4, #0]
   155be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   155c0:	07d7      	lsls	r7, r2, #31
   155c2:	f53f ae00 	bmi.w	151c6 <pdn_interface_pdn_id_get+0x376>
   155c6:	e4e8      	b.n	14f9a <pdn_interface_pdn_id_get+0x14a>
   155c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   155cc:	4770      	bx	lr
   155ce:	480b      	ldr	r0, [pc, #44]	; (155fc <pdn_interface_pdn_id_get+0x7ac>)
   155d0:	f006 fbee 	bl	1bdb0 <strlen>
   155d4:	490a      	ldr	r1, [pc, #40]	; (15600 <pdn_interface_pdn_id_get+0x7b0>)
   155d6:	4602      	mov	r2, r0
   155d8:	4808      	ldr	r0, [pc, #32]	; (155fc <pdn_interface_pdn_id_get+0x7ac>)
   155da:	f006 fbfc 	bl	1bdd6 <strncmp>
   155de:	b930      	cbnz	r0, 155ee <pdn_interface_pdn_id_get+0x79e>
   155e0:	2008      	movs	r0, #8
   155e2:	f7fa f9eb 	bl	f9bc <bsd_os_errno_set>
   155e6:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   155ea:	6858      	ldr	r0, [r3, #4]
   155ec:	e47b      	b.n	14ee6 <pdn_interface_pdn_id_get+0x96>
   155ee:	2005      	movs	r0, #5
   155f0:	f7fa f9e4 	bl	f9bc <bsd_os_errno_set>
   155f4:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   155f8:	6858      	ldr	r0, [r3, #4]
   155fa:	e474      	b.n	14ee6 <pdn_interface_pdn_id_get+0x96>
   155fc:	0001dde0 	.word	0x0001dde0
   15600:	20020838 	.word	0x20020838

00015604 <linked_list_init>:
   15604:	b128      	cbz	r0, 15612 <linked_list_init+0xe>
   15606:	2300      	movs	r3, #0
   15608:	6003      	str	r3, [r0, #0]
   1560a:	e9c0 3301 	strd	r3, r3, [r0, #4]
   1560e:	4618      	mov	r0, r3
   15610:	4770      	bx	lr
   15612:	2007      	movs	r0, #7
   15614:	4770      	bx	lr
   15616:	bf00      	nop

00015618 <linked_list_push>:
   15618:	6802      	ldr	r2, [r0, #0]
   1561a:	4603      	mov	r3, r0
   1561c:	3201      	adds	r2, #1
   1561e:	d00e      	beq.n	1563e <linked_list_push+0x26>
   15620:	2200      	movs	r2, #0
   15622:	600a      	str	r2, [r1, #0]
   15624:	6802      	ldr	r2, [r0, #0]
   15626:	b13a      	cbz	r2, 15638 <linked_list_push+0x20>
   15628:	6882      	ldr	r2, [r0, #8]
   1562a:	6011      	str	r1, [r2, #0]
   1562c:	6081      	str	r1, [r0, #8]
   1562e:	681a      	ldr	r2, [r3, #0]
   15630:	2000      	movs	r0, #0
   15632:	3201      	adds	r2, #1
   15634:	601a      	str	r2, [r3, #0]
   15636:	4770      	bx	lr
   15638:	e9c0 1101 	strd	r1, r1, [r0, #4]
   1563c:	e7f7      	b.n	1562e <linked_list_push+0x16>
   1563e:	2004      	movs	r0, #4
   15640:	4770      	bx	lr
   15642:	bf00      	nop

00015644 <linked_list_pop>:
   15644:	4603      	mov	r3, r0
   15646:	6800      	ldr	r0, [r0, #0]
   15648:	b128      	cbz	r0, 15656 <linked_list_pop+0x12>
   1564a:	6858      	ldr	r0, [r3, #4]
   1564c:	681a      	ldr	r2, [r3, #0]
   1564e:	6801      	ldr	r1, [r0, #0]
   15650:	3a01      	subs	r2, #1
   15652:	6059      	str	r1, [r3, #4]
   15654:	601a      	str	r2, [r3, #0]
   15656:	4770      	bx	lr

00015658 <linked_list_peek>:
   15658:	6803      	ldr	r3, [r0, #0]
   1565a:	b10b      	cbz	r3, 15660 <linked_list_peek+0x8>
   1565c:	6840      	ldr	r0, [r0, #4]
   1565e:	4770      	bx	lr
   15660:	4618      	mov	r0, r3
   15662:	4770      	bx	lr

00015664 <linked_list_size_get>:
   15664:	6800      	ldr	r0, [r0, #0]
   15666:	4770      	bx	lr

00015668 <linked_list_get_next>:
   15668:	6800      	ldr	r0, [r0, #0]
   1566a:	4770      	bx	lr

0001566c <nrf_socket>:
   1566c:	b570      	push	{r4, r5, r6, lr}
   1566e:	4604      	mov	r4, r0
   15670:	460d      	mov	r5, r1
   15672:	4616      	mov	r6, r2
   15674:	f7fd fdb2 	bl	131dc <bsd_platform_af_method_table_get>
   15678:	b130      	cbz	r0, 15688 <nrf_socket+0x1c>
   1567a:	6803      	ldr	r3, [r0, #0]
   1567c:	4632      	mov	r2, r6
   1567e:	4629      	mov	r1, r5
   15680:	4620      	mov	r0, r4
   15682:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15686:	4718      	bx	r3
   15688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1568c:	bd70      	pop	{r4, r5, r6, pc}
   1568e:	bf00      	nop

00015690 <nrf_close>:
   15690:	b510      	push	{r4, lr}
   15692:	4604      	mov	r4, r0
   15694:	f7fd fdf6 	bl	13284 <bsd_platform_fd_method_table_get>
   15698:	b120      	cbz	r0, 156a4 <nrf_close+0x14>
   1569a:	6843      	ldr	r3, [r0, #4]
   1569c:	4620      	mov	r0, r4
   1569e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   156a2:	4718      	bx	r3
   156a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   156a8:	bd10      	pop	{r4, pc}
   156aa:	bf00      	nop

000156ac <nrf_sendto>:
   156ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   156b0:	460d      	mov	r5, r1
   156b2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   156b6:	4616      	mov	r6, r2
   156b8:	461f      	mov	r7, r3
   156ba:	4604      	mov	r4, r0
   156bc:	f7fd fde2 	bl	13284 <bsd_platform_fd_method_table_get>
   156c0:	b158      	cbz	r0, 156da <nrf_sendto+0x2e>
   156c2:	e9cd 8908 	strd	r8, r9, [sp, #32]
   156c6:	f8d0 e008 	ldr.w	lr, [r0, #8]
   156ca:	463b      	mov	r3, r7
   156cc:	4632      	mov	r2, r6
   156ce:	4629      	mov	r1, r5
   156d0:	4620      	mov	r0, r4
   156d2:	46f4      	mov	ip, lr
   156d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   156d8:	4760      	bx	ip
   156da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   156de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   156e2:	bf00      	nop

000156e4 <nrf_send>:
   156e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   156e8:	b082      	sub	sp, #8
   156ea:	460e      	mov	r6, r1
   156ec:	4617      	mov	r7, r2
   156ee:	4698      	mov	r8, r3
   156f0:	4605      	mov	r5, r0
   156f2:	f7fd fdc7 	bl	13284 <bsd_platform_fd_method_table_get>
   156f6:	b160      	cbz	r0, 15712 <nrf_send+0x2e>
   156f8:	4604      	mov	r4, r0
   156fa:	2000      	movs	r0, #0
   156fc:	e9cd 0000 	strd	r0, r0, [sp]
   15700:	4643      	mov	r3, r8
   15702:	463a      	mov	r2, r7
   15704:	4631      	mov	r1, r6
   15706:	4628      	mov	r0, r5
   15708:	68a4      	ldr	r4, [r4, #8]
   1570a:	47a0      	blx	r4
   1570c:	b002      	add	sp, #8
   1570e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15712:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15716:	e7f9      	b.n	1570c <nrf_send+0x28>

00015718 <nrf_recvfrom>:
   15718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1571c:	460d      	mov	r5, r1
   1571e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   15722:	4616      	mov	r6, r2
   15724:	461f      	mov	r7, r3
   15726:	4604      	mov	r4, r0
   15728:	f7fd fdac 	bl	13284 <bsd_platform_fd_method_table_get>
   1572c:	b158      	cbz	r0, 15746 <nrf_recvfrom+0x2e>
   1572e:	e9cd 8908 	strd	r8, r9, [sp, #32]
   15732:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   15736:	463b      	mov	r3, r7
   15738:	4632      	mov	r2, r6
   1573a:	4629      	mov	r1, r5
   1573c:	4620      	mov	r0, r4
   1573e:	46f4      	mov	ip, lr
   15740:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15744:	4760      	bx	ip
   15746:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1574a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1574e:	bf00      	nop

00015750 <nrf_recv>:
   15750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15754:	b082      	sub	sp, #8
   15756:	460e      	mov	r6, r1
   15758:	4617      	mov	r7, r2
   1575a:	4698      	mov	r8, r3
   1575c:	4605      	mov	r5, r0
   1575e:	f7fd fd91 	bl	13284 <bsd_platform_fd_method_table_get>
   15762:	b160      	cbz	r0, 1577e <nrf_recv+0x2e>
   15764:	4604      	mov	r4, r0
   15766:	2000      	movs	r0, #0
   15768:	e9cd 0000 	strd	r0, r0, [sp]
   1576c:	4643      	mov	r3, r8
   1576e:	463a      	mov	r2, r7
   15770:	4631      	mov	r1, r6
   15772:	4628      	mov	r0, r5
   15774:	68e4      	ldr	r4, [r4, #12]
   15776:	47a0      	blx	r4
   15778:	b002      	add	sp, #8
   1577a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1577e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15782:	e7f9      	b.n	15778 <nrf_recv+0x28>

00015784 <nrf_connect>:
   15784:	b570      	push	{r4, r5, r6, lr}
   15786:	460d      	mov	r5, r1
   15788:	4616      	mov	r6, r2
   1578a:	4604      	mov	r4, r0
   1578c:	f7fd fd7a 	bl	13284 <bsd_platform_fd_method_table_get>
   15790:	b130      	cbz	r0, 157a0 <nrf_connect+0x1c>
   15792:	6943      	ldr	r3, [r0, #20]
   15794:	4632      	mov	r2, r6
   15796:	4629      	mov	r1, r5
   15798:	4620      	mov	r0, r4
   1579a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1579e:	4718      	bx	r3
   157a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   157a4:	bd70      	pop	{r4, r5, r6, pc}
   157a6:	bf00      	nop

000157a8 <nrf_listen>:
   157a8:	b570      	push	{r4, r5, r6, lr}
   157aa:	460d      	mov	r5, r1
   157ac:	4604      	mov	r4, r0
   157ae:	f7fd fd69 	bl	13284 <bsd_platform_fd_method_table_get>
   157b2:	b128      	cbz	r0, 157c0 <nrf_listen+0x18>
   157b4:	6983      	ldr	r3, [r0, #24]
   157b6:	4629      	mov	r1, r5
   157b8:	4620      	mov	r0, r4
   157ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   157be:	4718      	bx	r3
   157c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   157c4:	bd70      	pop	{r4, r5, r6, pc}
   157c6:	bf00      	nop

000157c8 <nrf_accept>:
   157c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   157cc:	460d      	mov	r5, r1
   157ce:	4616      	mov	r6, r2
   157d0:	4604      	mov	r4, r0
   157d2:	f7fd fd57 	bl	13284 <bsd_platform_fd_method_table_get>
   157d6:	b140      	cbz	r0, 157ea <nrf_accept+0x22>
   157d8:	69c7      	ldr	r7, [r0, #28]
   157da:	4632      	mov	r2, r6
   157dc:	4629      	mov	r1, r5
   157de:	4620      	mov	r0, r4
   157e0:	46bc      	mov	ip, r7
   157e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   157e6:	2300      	movs	r3, #0
   157e8:	4760      	bx	ip
   157ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   157ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   157f2:	bf00      	nop

000157f4 <nrf_bind>:
   157f4:	b570      	push	{r4, r5, r6, lr}
   157f6:	460d      	mov	r5, r1
   157f8:	4616      	mov	r6, r2
   157fa:	4604      	mov	r4, r0
   157fc:	f7fd fd42 	bl	13284 <bsd_platform_fd_method_table_get>
   15800:	b130      	cbz	r0, 15810 <nrf_bind+0x1c>
   15802:	6903      	ldr	r3, [r0, #16]
   15804:	4632      	mov	r2, r6
   15806:	4629      	mov	r1, r5
   15808:	4620      	mov	r0, r4
   1580a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1580e:	4718      	bx	r3
   15810:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15814:	bd70      	pop	{r4, r5, r6, pc}
   15816:	bf00      	nop

00015818 <nrf_setsockopt>:
   15818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1581c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   15820:	460d      	mov	r5, r1
   15822:	4616      	mov	r6, r2
   15824:	461f      	mov	r7, r3
   15826:	4604      	mov	r4, r0
   15828:	f7fd fd2c 	bl	13284 <bsd_platform_fd_method_table_get>
   1582c:	b158      	cbz	r0, 15846 <nrf_setsockopt+0x2e>
   1582e:	f8cd 8018 	str.w	r8, [sp, #24]
   15832:	f8d0 e020 	ldr.w	lr, [r0, #32]
   15836:	463b      	mov	r3, r7
   15838:	4632      	mov	r2, r6
   1583a:	4629      	mov	r1, r5
   1583c:	4620      	mov	r0, r4
   1583e:	46f4      	mov	ip, lr
   15840:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15844:	4760      	bx	ip
   15846:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1584a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1584e:	bf00      	nop

00015850 <nrf_getsockopt>:
   15850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15854:	f8dd 8018 	ldr.w	r8, [sp, #24]
   15858:	460d      	mov	r5, r1
   1585a:	4616      	mov	r6, r2
   1585c:	461f      	mov	r7, r3
   1585e:	4604      	mov	r4, r0
   15860:	f7fd fd10 	bl	13284 <bsd_platform_fd_method_table_get>
   15864:	b158      	cbz	r0, 1587e <nrf_getsockopt+0x2e>
   15866:	f8cd 8018 	str.w	r8, [sp, #24]
   1586a:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   1586e:	463b      	mov	r3, r7
   15870:	4632      	mov	r2, r6
   15872:	4629      	mov	r1, r5
   15874:	4620      	mov	r0, r4
   15876:	46f4      	mov	ip, lr
   15878:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1587c:	4760      	bx	ip
   1587e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15886:	bf00      	nop

00015888 <nrf_getaddrinfo>:
   15888:	f7fd bd6c 	b.w	13364 <bsd_platform_getaddrinfo>

0001588c <nrf_freeaddrinfo>:
   1588c:	f7fd bd6c 	b.w	13368 <bsd_platform_freeaddrinfo>

00015890 <nrf_poll>:
   15890:	f7fd bd6c 	b.w	1336c <bsd_platform_poll>

00015894 <nrf_fcntl>:
   15894:	f7fd bdc4 	b.w	13420 <bsd_platform_fcntl>

00015898 <at_client_evt_handler>:
   15898:	b120      	cbz	r0, 158a4 <at_client_evt_handler+0xc>
   1589a:	f850 1b08 	ldr.w	r1, [r0], #8
   1589e:	0c09      	lsrs	r1, r1, #16
   158a0:	f7fb bf9e 	b.w	117e0 <rpc_at_event_handler>
   158a4:	4770      	bx	lr
   158a6:	bf00      	nop

000158a8 <rpc_at_client_init>:
   158a8:	4801      	ldr	r0, [pc, #4]	; (158b0 <rpc_at_client_init+0x8>)
   158aa:	f001 bdbf 	b.w	1742c <rpc_client_register>
   158ae:	bf00      	nop
   158b0:	0001ddf4 	.word	0x0001ddf4

000158b4 <rpc_at_client_request_alloc>:
   158b4:	b180      	cbz	r0, 158d8 <rpc_at_client_request_alloc+0x24>
   158b6:	2300      	movs	r3, #0
   158b8:	b510      	push	{r4, lr}
   158ba:	b082      	sub	sp, #8
   158bc:	aa02      	add	r2, sp, #8
   158be:	4604      	mov	r4, r0
   158c0:	f842 3d04 	str.w	r3, [r2, #-4]!
   158c4:	2003      	movs	r0, #3
   158c6:	f001 ffe9 	bl	1789c <rpc_message_alloc>
   158ca:	b918      	cbnz	r0, 158d4 <rpc_at_client_request_alloc+0x20>
   158cc:	9b01      	ldr	r3, [sp, #4]
   158ce:	b10b      	cbz	r3, 158d4 <rpc_at_client_request_alloc+0x20>
   158d0:	3308      	adds	r3, #8
   158d2:	6023      	str	r3, [r4, #0]
   158d4:	b002      	add	sp, #8
   158d6:	bd10      	pop	{r4, pc}
   158d8:	200e      	movs	r0, #14
   158da:	4770      	bx	lr

000158dc <rpc_at_client_request_send>:
   158dc:	b150      	cbz	r0, 158f4 <rpc_at_client_request_send+0x18>
   158de:	4603      	mov	r3, r0
   158e0:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   158e4:	2003      	movs	r0, #3
   158e6:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   158ea:	f843 1d08 	str.w	r1, [r3, #-8]!
   158ee:	4619      	mov	r1, r3
   158f0:	f001 bfbc 	b.w	1786c <rpc_message_send>
   158f4:	200e      	movs	r0, #14
   158f6:	4770      	bx	lr

000158f8 <rpc_at_client_message_free>:
   158f8:	b120      	cbz	r0, 15904 <rpc_at_client_message_free+0xc>
   158fa:	f1a0 0108 	sub.w	r1, r0, #8
   158fe:	2003      	movs	r0, #3
   15900:	f001 bffe 	b.w	17900 <rpc_message_free>
   15904:	200e      	movs	r0, #14
   15906:	4770      	bx	lr

00015908 <rpc_at_client_data_free>:
   15908:	b118      	cbz	r0, 15912 <rpc_at_client_data_free+0xa>
   1590a:	4601      	mov	r1, r0
   1590c:	2003      	movs	r0, #3
   1590e:	f002 b909 	b.w	17b24 <rpc_message_data_free>
   15912:	200e      	movs	r0, #14
   15914:	4770      	bx	lr
   15916:	bf00      	nop

00015918 <ip_recvd_packet_free_cb>:
   15918:	b510      	push	{r4, lr}
   1591a:	4604      	mov	r4, r0
   1591c:	6800      	ldr	r0, [r0, #0]
   1591e:	f7fc fc1d 	bl	1215c <rpc_ip_client_data_free>
   15922:	68a0      	ldr	r0, [r4, #8]
   15924:	b118      	cbz	r0, 1592e <ip_recvd_packet_free_cb+0x16>
   15926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1592a:	f7fc bbb7 	b.w	1209c <nrf_free>
   1592e:	bd10      	pop	{r4, pc}

00015930 <rpc_error_to_nrf_bsd_error>:
   15930:	2810      	cmp	r0, #16
   15932:	bf9a      	itte	ls
   15934:	4b02      	ldrls	r3, [pc, #8]	; (15940 <rpc_error_to_nrf_bsd_error+0x10>)
   15936:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   1593a:	202d      	movhi	r0, #45	; 0x2d
   1593c:	4770      	bx	lr
   1593e:	bf00      	nop
   15940:	0001de04 	.word	0x0001de04

00015944 <ip_interface_request_create>:
   15944:	b570      	push	{r4, r5, r6, lr}
   15946:	2500      	movs	r5, #0
   15948:	b082      	sub	sp, #8
   1594a:	ac02      	add	r4, sp, #8
   1594c:	f844 5d04 	str.w	r5, [r4, #-4]!
   15950:	4606      	mov	r6, r0
   15952:	460d      	mov	r5, r1
   15954:	4620      	mov	r0, r4
   15956:	4619      	mov	r1, r3
   15958:	4614      	mov	r4, r2
   1595a:	f7fc fbcd 	bl	120f8 <rpc_ip_client_request_alloc>
   1595e:	b960      	cbnz	r0, 1597a <ip_interface_request_create+0x36>
   15960:	9b01      	ldr	r3, [sp, #4]
   15962:	2208      	movs	r2, #8
   15964:	7258      	strb	r0, [r3, #9]
   15966:	7298      	strb	r0, [r3, #10]
   15968:	72d8      	strb	r0, [r3, #11]
   1596a:	4618      	mov	r0, r3
   1596c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   15970:	60dc      	str	r4, [r3, #12]
   15972:	611d      	str	r5, [r3, #16]
   15974:	721a      	strb	r2, [r3, #8]
   15976:	b002      	add	sp, #8
   15978:	bd70      	pop	{r4, r5, r6, pc}
   1597a:	9b01      	ldr	r3, [sp, #4]
   1597c:	4618      	mov	r0, r3
   1597e:	b002      	add	sp, #8
   15980:	bd70      	pop	{r4, r5, r6, pc}
   15982:	bf00      	nop

00015984 <ip_interface_request_send>:
   15984:	b570      	push	{r4, r5, r6, lr}
   15986:	460c      	mov	r4, r1
   15988:	4605      	mov	r5, r0
   1598a:	4611      	mov	r1, r2
   1598c:	4620      	mov	r0, r4
   1598e:	461e      	mov	r6, r3
   15990:	f7fc fbc6 	bl	12120 <rpc_ip_client_request_send>
   15994:	b900      	cbnz	r0, 15998 <ip_interface_request_send+0x14>
   15996:	bd70      	pop	{r4, r5, r6, pc}
   15998:	6820      	ldr	r0, [r4, #0]
   1599a:	b108      	cbz	r0, 159a0 <ip_interface_request_send+0x1c>
   1599c:	f7fc fbde 	bl	1215c <rpc_ip_client_data_free>
   159a0:	4620      	mov	r0, r4
   159a2:	f7fc fbd3 	bl	1214c <rpc_ip_client_message_free>
   159a6:	602e      	str	r6, [r5, #0]
   159a8:	2023      	movs	r0, #35	; 0x23
   159aa:	bd70      	pop	{r4, r5, r6, pc}

000159ac <ip_interface_wait>:
   159ac:	b538      	push	{r3, r4, r5, lr}
   159ae:	4605      	mov	r5, r0
   159b0:	f001 fb98 	bl	170e4 <interface_socket_wait>
   159b4:	4604      	mov	r4, r0
   159b6:	b108      	cbz	r0, 159bc <ip_interface_wait+0x10>
   159b8:	4620      	mov	r0, r4
   159ba:	bd38      	pop	{r3, r4, r5, pc}
   159bc:	4628      	mov	r0, r5
   159be:	f001 fc05 	bl	171cc <interface_socket_from_handle_get>
   159c2:	2800      	cmp	r0, #0
   159c4:	d0f8      	beq.n	159b8 <ip_interface_wait+0xc>
   159c6:	6844      	ldr	r4, [r0, #4]
   159c8:	2c00      	cmp	r4, #0
   159ca:	d0f5      	beq.n	159b8 <ip_interface_wait+0xc>
   159cc:	2300      	movs	r3, #0
   159ce:	6043      	str	r3, [r0, #4]
   159d0:	4620      	mov	r0, r4
   159d2:	bd38      	pop	{r3, r4, r5, pc}

000159d4 <ip_interface_init>:
   159d4:	b538      	push	{r3, r4, r5, lr}
   159d6:	2300      	movs	r3, #0
   159d8:	4d07      	ldr	r5, [pc, #28]	; (159f8 <ip_interface_init+0x24>)
   159da:	4c08      	ldr	r4, [pc, #32]	; (159fc <ip_interface_init+0x28>)
   159dc:	4619      	mov	r1, r3
   159de:	2224      	movs	r2, #36	; 0x24
   159e0:	4807      	ldr	r0, [pc, #28]	; (15a00 <ip_interface_init+0x2c>)
   159e2:	602b      	str	r3, [r5, #0]
   159e4:	6023      	str	r3, [r4, #0]
   159e6:	f006 fa3f 	bl	1be68 <memset>
   159ea:	f7fc fb7f 	bl	120ec <rpc_ip_client_init>
   159ee:	3000      	adds	r0, #0
   159f0:	bf18      	it	ne
   159f2:	2001      	movne	r0, #1
   159f4:	4240      	negs	r0, r0
   159f6:	bd38      	pop	{r3, r4, r5, pc}
   159f8:	20020970 	.word	0x20020970
   159fc:	2002096c 	.word	0x2002096c
   15a00:	20020978 	.word	0x20020978

00015a04 <ip_interface_open>:
   15a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15a08:	4606      	mov	r6, r0
   15a0a:	2000      	movs	r0, #0
   15a0c:	f026 0308 	bic.w	r3, r6, #8
   15a10:	b082      	sub	sp, #8
   15a12:	2b02      	cmp	r3, #2
   15a14:	460c      	mov	r4, r1
   15a16:	4617      	mov	r7, r2
   15a18:	9000      	str	r0, [sp, #0]
   15a1a:	d002      	beq.n	15a22 <ip_interface_open+0x1e>
   15a1c:	2e05      	cmp	r6, #5
   15a1e:	f040 8084 	bne.w	15b2a <ip_interface_open+0x126>
   15a22:	1e63      	subs	r3, r4, #1
   15a24:	2b02      	cmp	r3, #2
   15a26:	d85c      	bhi.n	15ae2 <ip_interface_open+0xde>
   15a28:	2f00      	cmp	r7, #0
   15a2a:	d154      	bne.n	15ad6 <ip_interface_open+0xd2>
   15a2c:	2c01      	cmp	r4, #1
   15a2e:	d067      	beq.n	15b00 <ip_interface_open+0xfc>
   15a30:	2c03      	cmp	r4, #3
   15a32:	bf18      	it	ne
   15a34:	2702      	movne	r7, #2
   15a36:	4a48      	ldr	r2, [pc, #288]	; (15b58 <ip_interface_open+0x154>)
   15a38:	4621      	mov	r1, r4
   15a3a:	4668      	mov	r0, sp
   15a3c:	f001 faa6 	bl	16f8c <interface_socket_allocate>
   15a40:	9b00      	ldr	r3, [sp, #0]
   15a42:	4680      	mov	r8, r0
   15a44:	2b00      	cmp	r3, #0
   15a46:	d059      	beq.n	15afc <ip_interface_open+0xf8>
   15a48:	2100      	movs	r1, #0
   15a4a:	a802      	add	r0, sp, #8
   15a4c:	f840 1d04 	str.w	r1, [r0, #-4]!
   15a50:	e9c3 6403 	strd	r6, r4, [r3, #12]
   15a54:	615f      	str	r7, [r3, #20]
   15a56:	f7fc fb4f 	bl	120f8 <rpc_ip_client_request_alloc>
   15a5a:	2800      	cmp	r0, #0
   15a5c:	d14b      	bne.n	15af6 <ip_interface_open+0xf2>
   15a5e:	f247 0201 	movw	r2, #28673	; 0x7001
   15a62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15a66:	2108      	movs	r1, #8
   15a68:	9d01      	ldr	r5, [sp, #4]
   15a6a:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
   15a6e:	60ea      	str	r2, [r5, #12]
   15a70:	7268      	strb	r0, [r5, #9]
   15a72:	72a8      	strb	r0, [r5, #10]
   15a74:	72e8      	strb	r0, [r5, #11]
   15a76:	7229      	strb	r1, [r5, #8]
   15a78:	742b      	strb	r3, [r5, #16]
   15a7a:	746b      	strb	r3, [r5, #17]
   15a7c:	74ab      	strb	r3, [r5, #18]
   15a7e:	74eb      	strb	r3, [r5, #19]
   15a80:	68ab      	ldr	r3, [r5, #8]
   15a82:	2e05      	cmp	r6, #5
   15a84:	f103 030c 	add.w	r3, r3, #12
   15a88:	60ab      	str	r3, [r5, #8]
   15a8a:	d003      	beq.n	15a94 <ip_interface_open+0x90>
   15a8c:	2e0a      	cmp	r6, #10
   15a8e:	bf14      	ite	ne
   15a90:	2601      	movne	r6, #1
   15a92:	2602      	moveq	r6, #2
   15a94:	616e      	str	r6, [r5, #20]
   15a96:	61ef      	str	r7, [r5, #28]
   15a98:	61ac      	str	r4, [r5, #24]
   15a9a:	f247 0101 	movw	r1, #28673	; 0x7001
   15a9e:	4628      	mov	r0, r5
   15aa0:	9f00      	ldr	r7, [sp, #0]
   15aa2:	f7fc fb3d 	bl	12120 <rpc_ip_client_request_send>
   15aa6:	4606      	mov	r6, r0
   15aa8:	b360      	cbz	r0, 15b04 <ip_interface_open+0x100>
   15aaa:	6828      	ldr	r0, [r5, #0]
   15aac:	b108      	cbz	r0, 15ab2 <ip_interface_open+0xae>
   15aae:	f7fc fb55 	bl	1215c <rpc_ip_client_data_free>
   15ab2:	4628      	mov	r0, r5
   15ab4:	f7fc fb4a 	bl	1214c <rpc_ip_client_message_free>
   15ab8:	2301      	movs	r3, #1
   15aba:	2523      	movs	r5, #35	; 0x23
   15abc:	603b      	str	r3, [r7, #0]
   15abe:	4640      	mov	r0, r8
   15ac0:	f001 fac2 	bl	17048 <interface_socket_free>
   15ac4:	4628      	mov	r0, r5
   15ac6:	f7f9 ff79 	bl	f9bc <bsd_os_errno_set>
   15aca:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   15ace:	4640      	mov	r0, r8
   15ad0:	b002      	add	sp, #8
   15ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15ad6:	2c01      	cmp	r4, #1
   15ad8:	d009      	beq.n	15aee <ip_interface_open+0xea>
   15ada:	2c02      	cmp	r4, #2
   15adc:	d109      	bne.n	15af2 <ip_interface_open+0xee>
   15ade:	2f02      	cmp	r7, #2
   15ae0:	d0a9      	beq.n	15a36 <ip_interface_open+0x32>
   15ae2:	2016      	movs	r0, #22
   15ae4:	f7f9 ff6a 	bl	f9bc <bsd_os_errno_set>
   15ae8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   15aec:	e7ef      	b.n	15ace <ip_interface_open+0xca>
   15aee:	2f01      	cmp	r7, #1
   15af0:	d1f7      	bne.n	15ae2 <ip_interface_open+0xde>
   15af2:	2702      	movs	r7, #2
   15af4:	e79f      	b.n	15a36 <ip_interface_open+0x32>
   15af6:	9d01      	ldr	r5, [sp, #4]
   15af8:	2d00      	cmp	r5, #0
   15afa:	d1c1      	bne.n	15a80 <ip_interface_open+0x7c>
   15afc:	250c      	movs	r5, #12
   15afe:	e7de      	b.n	15abe <ip_interface_open+0xba>
   15b00:	4627      	mov	r7, r4
   15b02:	e798      	b.n	15a36 <ip_interface_open+0x32>
   15b04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15b08:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15b0c:	2102      	movs	r1, #2
   15b0e:	4640      	mov	r0, r8
   15b10:	f001 fae8 	bl	170e4 <interface_socket_wait>
   15b14:	4605      	mov	r5, r0
   15b16:	2800      	cmp	r0, #0
   15b18:	d1d1      	bne.n	15abe <ip_interface_open+0xba>
   15b1a:	4640      	mov	r0, r8
   15b1c:	f001 fb56 	bl	171cc <interface_socket_from_handle_get>
   15b20:	b148      	cbz	r0, 15b36 <ip_interface_open+0x132>
   15b22:	6845      	ldr	r5, [r0, #4]
   15b24:	b13d      	cbz	r5, 15b36 <ip_interface_open+0x132>
   15b26:	6046      	str	r6, [r0, #4]
   15b28:	e7c9      	b.n	15abe <ip_interface_open+0xba>
   15b2a:	202f      	movs	r0, #47	; 0x2f
   15b2c:	f7f9 ff46 	bl	f9bc <bsd_os_errno_set>
   15b30:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   15b34:	e7cb      	b.n	15ace <ip_interface_open+0xca>
   15b36:	3c02      	subs	r4, #2
   15b38:	2c01      	cmp	r4, #1
   15b3a:	d8c8      	bhi.n	15ace <ip_interface_open+0xca>
   15b3c:	4640      	mov	r0, r8
   15b3e:	9b00      	ldr	r3, [sp, #0]
   15b40:	681a      	ldr	r2, [r3, #0]
   15b42:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   15b46:	601a      	str	r2, [r3, #0]
   15b48:	681a      	ldr	r2, [r3, #0]
   15b4a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   15b4e:	601a      	str	r2, [r3, #0]
   15b50:	b002      	add	sp, #8
   15b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15b56:	bf00      	nop
   15b58:	00015919 	.word	0x00015919

00015b5c <ip_interface_close>:
   15b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15b60:	b082      	sub	sp, #8
   15b62:	4606      	mov	r6, r0
   15b64:	f001 fb32 	bl	171cc <interface_socket_from_handle_get>
   15b68:	2800      	cmp	r0, #0
   15b6a:	d063      	beq.n	15c34 <ip_interface_close+0xd8>
   15b6c:	4604      	mov	r4, r0
   15b6e:	2100      	movs	r1, #0
   15b70:	a802      	add	r0, sp, #8
   15b72:	6827      	ldr	r7, [r4, #0]
   15b74:	f840 1d04 	str.w	r1, [r0, #-4]!
   15b78:	f8d4 8018 	ldr.w	r8, [r4, #24]
   15b7c:	f7fc fabc 	bl	120f8 <rpc_ip_client_request_alloc>
   15b80:	2800      	cmp	r0, #0
   15b82:	d13a      	bne.n	15bfa <ip_interface_close+0x9e>
   15b84:	f247 0309 	movw	r3, #28681	; 0x7009
   15b88:	2208      	movs	r2, #8
   15b8a:	9d01      	ldr	r5, [sp, #4]
   15b8c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   15b90:	60eb      	str	r3, [r5, #12]
   15b92:	f8c5 8010 	str.w	r8, [r5, #16]
   15b96:	7268      	strb	r0, [r5, #9]
   15b98:	72a8      	strb	r0, [r5, #10]
   15b9a:	72e8      	strb	r0, [r5, #11]
   15b9c:	722a      	strb	r2, [r5, #8]
   15b9e:	6823      	ldr	r3, [r4, #0]
   15ba0:	f247 0109 	movw	r1, #28681	; 0x7009
   15ba4:	0c1b      	lsrs	r3, r3, #16
   15ba6:	041b      	lsls	r3, r3, #16
   15ba8:	f043 030d 	orr.w	r3, r3, #13
   15bac:	6023      	str	r3, [r4, #0]
   15bae:	6823      	ldr	r3, [r4, #0]
   15bb0:	4628      	mov	r0, r5
   15bb2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   15bb6:	6023      	str	r3, [r4, #0]
   15bb8:	6823      	ldr	r3, [r4, #0]
   15bba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   15bbe:	6023      	str	r3, [r4, #0]
   15bc0:	f7fc faae 	bl	12120 <rpc_ip_client_request_send>
   15bc4:	bb40      	cbnz	r0, 15c18 <ip_interface_close+0xbc>
   15bc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15bca:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15bce:	210e      	movs	r1, #14
   15bd0:	4630      	mov	r0, r6
   15bd2:	f001 fa87 	bl	170e4 <interface_socket_wait>
   15bd6:	4604      	mov	r4, r0
   15bd8:	b1a0      	cbz	r0, 15c04 <ip_interface_close+0xa8>
   15bda:	4c17      	ldr	r4, [pc, #92]	; (15c38 <ip_interface_close+0xdc>)
   15bdc:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   15be0:	b120      	cbz	r0, 15bec <ip_interface_close+0x90>
   15be2:	f7fc fab3 	bl	1214c <rpc_ip_client_message_free>
   15be6:	2300      	movs	r3, #0
   15be8:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   15bec:	4630      	mov	r0, r6
   15bee:	f001 fa2b 	bl	17048 <interface_socket_free>
   15bf2:	2000      	movs	r0, #0
   15bf4:	b002      	add	sp, #8
   15bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15bfa:	9d01      	ldr	r5, [sp, #4]
   15bfc:	200c      	movs	r0, #12
   15bfe:	2d00      	cmp	r5, #0
   15c00:	d1cd      	bne.n	15b9e <ip_interface_close+0x42>
   15c02:	e012      	b.n	15c2a <ip_interface_close+0xce>
   15c04:	4630      	mov	r0, r6
   15c06:	f001 fae1 	bl	171cc <interface_socket_from_handle_get>
   15c0a:	2800      	cmp	r0, #0
   15c0c:	d0e5      	beq.n	15bda <ip_interface_close+0x7e>
   15c0e:	6843      	ldr	r3, [r0, #4]
   15c10:	2b00      	cmp	r3, #0
   15c12:	d0e2      	beq.n	15bda <ip_interface_close+0x7e>
   15c14:	6044      	str	r4, [r0, #4]
   15c16:	e7e0      	b.n	15bda <ip_interface_close+0x7e>
   15c18:	6828      	ldr	r0, [r5, #0]
   15c1a:	b108      	cbz	r0, 15c20 <ip_interface_close+0xc4>
   15c1c:	f7fc fa9e 	bl	1215c <rpc_ip_client_data_free>
   15c20:	4628      	mov	r0, r5
   15c22:	f7fc fa93 	bl	1214c <rpc_ip_client_message_free>
   15c26:	2023      	movs	r0, #35	; 0x23
   15c28:	6027      	str	r7, [r4, #0]
   15c2a:	f7f9 fec7 	bl	f9bc <bsd_os_errno_set>
   15c2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15c32:	e7df      	b.n	15bf4 <ip_interface_close+0x98>
   15c34:	2009      	movs	r0, #9
   15c36:	e7f8      	b.n	15c2a <ip_interface_close+0xce>
   15c38:	20020978 	.word	0x20020978

00015c3c <ip_interface_sendto>:
   15c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c40:	2500      	movs	r5, #0
   15c42:	b089      	sub	sp, #36	; 0x24
   15c44:	9103      	str	r1, [sp, #12]
   15c46:	4614      	mov	r4, r2
   15c48:	9301      	str	r3, [sp, #4]
   15c4a:	9507      	str	r5, [sp, #28]
   15c4c:	4607      	mov	r7, r0
   15c4e:	9e12      	ldr	r6, [sp, #72]	; 0x48
   15c50:	f001 fabc 	bl	171cc <interface_socket_from_handle_get>
   15c54:	2800      	cmp	r0, #0
   15c56:	f000 8124 	beq.w	15ea2 <ip_interface_sendto+0x266>
   15c5a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   15c5e:	f300 8118 	bgt.w	15e92 <ip_interface_sendto+0x256>
   15c62:	6903      	ldr	r3, [r0, #16]
   15c64:	4605      	mov	r5, r0
   15c66:	2b01      	cmp	r3, #1
   15c68:	f000 80d1 	beq.w	15e0e <ip_interface_sendto+0x1d2>
   15c6c:	682a      	ldr	r2, [r5, #0]
   15c6e:	0390      	lsls	r0, r2, #14
   15c70:	d423      	bmi.n	15cba <ip_interface_sendto+0x7e>
   15c72:	682a      	ldr	r2, [r5, #0]
   15c74:	0091      	lsls	r1, r2, #2
   15c76:	d406      	bmi.n	15c86 <ip_interface_sendto+0x4a>
   15c78:	2b01      	cmp	r3, #1
   15c7a:	f000 80ed 	beq.w	15e58 <ip_interface_sendto+0x21c>
   15c7e:	682b      	ldr	r3, [r5, #0]
   15c80:	031a      	lsls	r2, r3, #12
   15c82:	f140 8102 	bpl.w	15e8a <ip_interface_sendto+0x24e>
   15c86:	682b      	ldr	r3, [r5, #0]
   15c88:	031b      	lsls	r3, r3, #12
   15c8a:	f140 8106 	bpl.w	15e9a <ip_interface_sendto+0x25e>
   15c8e:	68a8      	ldr	r0, [r5, #8]
   15c90:	f8df 9218 	ldr.w	r9, [pc, #536]	; 15eac <ip_interface_sendto+0x270>
   15c94:	2800      	cmp	r0, #0
   15c96:	f040 8096 	bne.w	15dc6 <ip_interface_sendto+0x18a>
   15c9a:	682b      	ldr	r3, [r5, #0]
   15c9c:	0118      	lsls	r0, r3, #4
   15c9e:	f140 8082 	bpl.w	15da6 <ip_interface_sendto+0x16a>
   15ca2:	682b      	ldr	r3, [r5, #0]
   15ca4:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   15ca8:	602b      	str	r3, [r5, #0]
   15caa:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   15cae:	2800      	cmp	r0, #0
   15cb0:	d17c      	bne.n	15dac <ip_interface_sendto+0x170>
   15cb2:	4620      	mov	r0, r4
   15cb4:	b009      	add	sp, #36	; 0x24
   15cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cba:	f247 0806 	movw	r8, #28678	; 0x7006
   15cbe:	f04f 0a0c 	mov.w	sl, #12
   15cc2:	043b      	lsls	r3, r7, #16
   15cc4:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 15eac <ip_interface_sendto+0x270>
   15cc8:	9304      	str	r3, [sp, #16]
   15cca:	4621      	mov	r1, r4
   15ccc:	a807      	add	r0, sp, #28
   15cce:	f7fc fa13 	bl	120f8 <rpc_ip_client_request_alloc>
   15cd2:	2804      	cmp	r0, #4
   15cd4:	d0f9      	beq.n	15cca <ip_interface_sendto+0x8e>
   15cd6:	2800      	cmp	r0, #0
   15cd8:	d171      	bne.n	15dbe <ip_interface_sendto+0x182>
   15cda:	9b07      	ldr	r3, [sp, #28]
   15cdc:	f883 a008 	strb.w	sl, [r3, #8]
   15ce0:	7258      	strb	r0, [r3, #9]
   15ce2:	7298      	strb	r0, [r3, #10]
   15ce4:	72d8      	strb	r0, [r3, #11]
   15ce6:	b33e      	cbz	r6, 15d38 <ip_interface_sendto+0xfc>
   15ce8:	68ea      	ldr	r2, [r5, #12]
   15cea:	6871      	ldr	r1, [r6, #4]
   15cec:	428a      	cmp	r2, r1
   15cee:	d10a      	bne.n	15d06 <ip_interface_sendto+0xca>
   15cf0:	2a02      	cmp	r2, #2
   15cf2:	f103 001c 	add.w	r0, r3, #28
   15cf6:	7831      	ldrb	r1, [r6, #0]
   15cf8:	f000 8090 	beq.w	15e1c <ip_interface_sendto+0x1e0>
   15cfc:	2a0a      	cmp	r2, #10
   15cfe:	d102      	bne.n	15d06 <ip_interface_sendto+0xca>
   15d00:	2924      	cmp	r1, #36	; 0x24
   15d02:	f000 80af 	beq.w	15e64 <ip_interface_sendto+0x228>
   15d06:	6818      	ldr	r0, [r3, #0]
   15d08:	b110      	cbz	r0, 15d10 <ip_interface_sendto+0xd4>
   15d0a:	f7fc fa27 	bl	1215c <rpc_ip_client_data_free>
   15d0e:	9b07      	ldr	r3, [sp, #28]
   15d10:	4618      	mov	r0, r3
   15d12:	f7fc fa1b 	bl	1214c <rpc_ip_client_message_free>
   15d16:	2016      	movs	r0, #22
   15d18:	682b      	ldr	r3, [r5, #0]
   15d1a:	031a      	lsls	r2, r3, #12
   15d1c:	d453      	bmi.n	15dc6 <ip_interface_sendto+0x18a>
   15d1e:	682b      	ldr	r3, [r5, #0]
   15d20:	b29b      	uxth	r3, r3
   15d22:	2b0d      	cmp	r3, #13
   15d24:	d0b6      	beq.n	15c94 <ip_interface_sendto+0x58>
   15d26:	682b      	ldr	r3, [r5, #0]
   15d28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   15d2c:	602b      	str	r3, [r5, #0]
   15d2e:	682b      	ldr	r3, [r5, #0]
   15d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   15d34:	602b      	str	r3, [r5, #0]
   15d36:	e7ad      	b.n	15c94 <ip_interface_sendto+0x58>
   15d38:	4642      	mov	r2, r8
   15d3a:	9901      	ldr	r1, [sp, #4]
   15d3c:	6159      	str	r1, [r3, #20]
   15d3e:	69a9      	ldr	r1, [r5, #24]
   15d40:	9804      	ldr	r0, [sp, #16]
   15d42:	6119      	str	r1, [r3, #16]
   15d44:	9903      	ldr	r1, [sp, #12]
   15d46:	4302      	orrs	r2, r0
   15d48:	60da      	str	r2, [r3, #12]
   15d4a:	605c      	str	r4, [r3, #4]
   15d4c:	b119      	cbz	r1, 15d56 <ip_interface_sendto+0x11a>
   15d4e:	6818      	ldr	r0, [r3, #0]
   15d50:	4622      	mov	r2, r4
   15d52:	f006 f85f 	bl	1be14 <memcpy>
   15d56:	682b      	ldr	r3, [r5, #0]
   15d58:	4641      	mov	r1, r8
   15d5a:	9305      	str	r3, [sp, #20]
   15d5c:	682b      	ldr	r3, [r5, #0]
   15d5e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   15d62:	602b      	str	r3, [r5, #0]
   15d64:	682b      	ldr	r3, [r5, #0]
   15d66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   15d6a:	602b      	str	r3, [r5, #0]
   15d6c:	9b07      	ldr	r3, [sp, #28]
   15d6e:	4618      	mov	r0, r3
   15d70:	9302      	str	r3, [sp, #8]
   15d72:	f7fc f9d5 	bl	12120 <rpc_ip_client_request_send>
   15d76:	9b02      	ldr	r3, [sp, #8]
   15d78:	4683      	mov	fp, r0
   15d7a:	bb58      	cbnz	r0, 15dd4 <ip_interface_sendto+0x198>
   15d7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   15d80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15d84:	4611      	mov	r1, r2
   15d86:	4638      	mov	r0, r7
   15d88:	f001 f9ac 	bl	170e4 <interface_socket_wait>
   15d8c:	b370      	cbz	r0, 15dec <ip_interface_sendto+0x1b0>
   15d8e:	682b      	ldr	r3, [r5, #0]
   15d90:	0319      	lsls	r1, r3, #12
   15d92:	d437      	bmi.n	15e04 <ip_interface_sendto+0x1c8>
   15d94:	280c      	cmp	r0, #12
   15d96:	d1bf      	bne.n	15d18 <ip_interface_sendto+0xdc>
   15d98:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   15d9c:	2800      	cmp	r0, #0
   15d9e:	d094      	beq.n	15cca <ip_interface_sendto+0x8e>
   15da0:	f7fc f9d4 	bl	1214c <rpc_ip_client_message_free>
   15da4:	e791      	b.n	15cca <ip_interface_sendto+0x8e>
   15da6:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   15daa:	6984      	ldr	r4, [r0, #24]
   15dac:	f7fc f9ce 	bl	1214c <rpc_ip_client_message_free>
   15db0:	2300      	movs	r3, #0
   15db2:	4620      	mov	r0, r4
   15db4:	f849 3027 	str.w	r3, [r9, r7, lsl #2]
   15db8:	b009      	add	sp, #36	; 0x24
   15dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15dbe:	682b      	ldr	r3, [r5, #0]
   15dc0:	200c      	movs	r0, #12
   15dc2:	031a      	lsls	r2, r3, #12
   15dc4:	d5ab      	bpl.n	15d1e <ip_interface_sendto+0xe2>
   15dc6:	f7f9 fdf9 	bl	f9bc <bsd_os_errno_set>
   15dca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15dce:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   15dd2:	e76c      	b.n	15cae <ip_interface_sendto+0x72>
   15dd4:	6818      	ldr	r0, [r3, #0]
   15dd6:	469b      	mov	fp, r3
   15dd8:	b108      	cbz	r0, 15dde <ip_interface_sendto+0x1a2>
   15dda:	f7fc f9bf 	bl	1215c <rpc_ip_client_data_free>
   15dde:	4658      	mov	r0, fp
   15de0:	f7fc f9b4 	bl	1214c <rpc_ip_client_message_free>
   15de4:	9b05      	ldr	r3, [sp, #20]
   15de6:	2023      	movs	r0, #35	; 0x23
   15de8:	602b      	str	r3, [r5, #0]
   15dea:	e795      	b.n	15d18 <ip_interface_sendto+0xdc>
   15dec:	4638      	mov	r0, r7
   15dee:	f001 f9ed 	bl	171cc <interface_socket_from_handle_get>
   15df2:	4603      	mov	r3, r0
   15df4:	b1f0      	cbz	r0, 15e34 <ip_interface_sendto+0x1f8>
   15df6:	6840      	ldr	r0, [r0, #4]
   15df8:	b1e0      	cbz	r0, 15e34 <ip_interface_sendto+0x1f8>
   15dfa:	f8c3 b004 	str.w	fp, [r3, #4]
   15dfe:	682b      	ldr	r3, [r5, #0]
   15e00:	0319      	lsls	r1, r3, #12
   15e02:	d5c7      	bpl.n	15d94 <ip_interface_sendto+0x158>
   15e04:	68a8      	ldr	r0, [r5, #8]
   15e06:	682b      	ldr	r3, [r5, #0]
   15e08:	031e      	lsls	r6, r3, #12
   15e0a:	d588      	bpl.n	15d1e <ip_interface_sendto+0xe2>
   15e0c:	e742      	b.n	15c94 <ip_interface_sendto+0x58>
   15e0e:	2e00      	cmp	r6, #0
   15e10:	f43f af2c 	beq.w	15c6c <ip_interface_sendto+0x30>
   15e14:	2016      	movs	r0, #22
   15e16:	f8df 9094 	ldr.w	r9, [pc, #148]	; 15eac <ip_interface_sendto+0x270>
   15e1a:	e7d4      	b.n	15dc6 <ip_interface_sendto+0x18a>
   15e1c:	2910      	cmp	r1, #16
   15e1e:	f47f af72 	bne.w	15d06 <ip_interface_sendto+0xca>
   15e22:	2204      	movs	r2, #4
   15e24:	8931      	ldrh	r1, [r6, #8]
   15e26:	835a      	strh	r2, [r3, #26]
   15e28:	8319      	strh	r1, [r3, #24]
   15e2a:	f106 010c 	add.w	r1, r6, #12
   15e2e:	f005 fff1 	bl	1be14 <memcpy>
   15e32:	e01e      	b.n	15e72 <ip_interface_sendto+0x236>
   15e34:	682b      	ldr	r3, [r5, #0]
   15e36:	031b      	lsls	r3, r3, #12
   15e38:	f53f af2f 	bmi.w	15c9a <ip_interface_sendto+0x5e>
   15e3c:	682b      	ldr	r3, [r5, #0]
   15e3e:	b29b      	uxth	r3, r3
   15e40:	2b0d      	cmp	r3, #13
   15e42:	f43f af2a 	beq.w	15c9a <ip_interface_sendto+0x5e>
   15e46:	682b      	ldr	r3, [r5, #0]
   15e48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   15e4c:	602b      	str	r3, [r5, #0]
   15e4e:	682b      	ldr	r3, [r5, #0]
   15e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   15e54:	602b      	str	r3, [r5, #0]
   15e56:	e720      	b.n	15c9a <ip_interface_sendto+0x5e>
   15e58:	682b      	ldr	r3, [r5, #0]
   15e5a:	b29b      	uxth	r3, r3
   15e5c:	2b05      	cmp	r3, #5
   15e5e:	f47f af12 	bne.w	15c86 <ip_interface_sendto+0x4a>
   15e62:	e70c      	b.n	15c7e <ip_interface_sendto+0x42>
   15e64:	2210      	movs	r2, #16
   15e66:	8931      	ldrh	r1, [r6, #8]
   15e68:	835a      	strh	r2, [r3, #26]
   15e6a:	8319      	strh	r1, [r3, #24]
   15e6c:	18b1      	adds	r1, r6, r2
   15e6e:	f005 ffd1 	bl	1be14 <memcpy>
   15e72:	f247 0207 	movw	r2, #28679	; 0x7007
   15e76:	9b07      	ldr	r3, [sp, #28]
   15e78:	4690      	mov	r8, r2
   15e7a:	6899      	ldr	r1, [r3, #8]
   15e7c:	8b58      	ldrh	r0, [r3, #26]
   15e7e:	3104      	adds	r1, #4
   15e80:	4401      	add	r1, r0
   15e82:	9801      	ldr	r0, [sp, #4]
   15e84:	6099      	str	r1, [r3, #8]
   15e86:	6158      	str	r0, [r3, #20]
   15e88:	e759      	b.n	15d3e <ip_interface_sendto+0x102>
   15e8a:	2023      	movs	r0, #35	; 0x23
   15e8c:	f8df 901c 	ldr.w	r9, [pc, #28]	; 15eac <ip_interface_sendto+0x270>
   15e90:	e799      	b.n	15dc6 <ip_interface_sendto+0x18a>
   15e92:	2028      	movs	r0, #40	; 0x28
   15e94:	f8df 9014 	ldr.w	r9, [pc, #20]	; 15eac <ip_interface_sendto+0x270>
   15e98:	e795      	b.n	15dc6 <ip_interface_sendto+0x18a>
   15e9a:	2039      	movs	r0, #57	; 0x39
   15e9c:	f8df 900c 	ldr.w	r9, [pc, #12]	; 15eac <ip_interface_sendto+0x270>
   15ea0:	e791      	b.n	15dc6 <ip_interface_sendto+0x18a>
   15ea2:	2009      	movs	r0, #9
   15ea4:	f8df 9004 	ldr.w	r9, [pc, #4]	; 15eac <ip_interface_sendto+0x270>
   15ea8:	e78d      	b.n	15dc6 <ip_interface_sendto+0x18a>
   15eaa:	bf00      	nop
   15eac:	20020978 	.word	0x20020978

00015eb0 <ip_interface_recvfrom>:
   15eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15eb4:	b085      	sub	sp, #20
   15eb6:	2a00      	cmp	r2, #0
   15eb8:	f000 8110 	beq.w	160dc <ip_interface_recvfrom+0x22c>
   15ebc:	468a      	mov	sl, r1
   15ebe:	4699      	mov	r9, r3
   15ec0:	4607      	mov	r7, r0
   15ec2:	4616      	mov	r6, r2
   15ec4:	f001 f982 	bl	171cc <interface_socket_from_handle_get>
   15ec8:	4604      	mov	r4, r0
   15eca:	2800      	cmp	r0, #0
   15ecc:	f000 810d 	beq.w	160ea <ip_interface_recvfrom+0x23a>
   15ed0:	6803      	ldr	r3, [r0, #0]
   15ed2:	02d9      	lsls	r1, r3, #11
   15ed4:	d565      	bpl.n	15fa2 <ip_interface_recvfrom+0xf2>
   15ed6:	f019 0f02 	tst.w	r9, #2
   15eda:	bf18      	it	ne
   15edc:	f04f 0800 	movne.w	r8, #0
   15ee0:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   15ee4:	bf08      	it	eq
   15ee6:	6803      	ldreq	r3, [r0, #0]
   15ee8:	f009 0510 	and.w	r5, r9, #16
   15eec:	bf04      	itt	eq
   15eee:	f083 5880 	eoreq.w	r8, r3, #268435456	; 0x10000000
   15ef2:	f3c8 7800 	ubfxeq	r8, r8, #28, #1
   15ef6:	6823      	ldr	r3, [r4, #0]
   15ef8:	03da      	lsls	r2, r3, #15
   15efa:	d56d      	bpl.n	15fd8 <ip_interface_recvfrom+0x128>
   15efc:	6823      	ldr	r3, [r4, #0]
   15efe:	69e0      	ldr	r0, [r4, #28]
   15f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   15f04:	6023      	str	r3, [r4, #0]
   15f06:	6803      	ldr	r3, [r0, #0]
   15f08:	68db      	ldr	r3, [r3, #12]
   15f0a:	4798      	blx	r3
   15f0c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   15f10:	4683      	mov	fp, r0
   15f12:	f000 8081 	beq.w	16018 <ip_interface_recvfrom+0x168>
   15f16:	4286      	cmp	r6, r0
   15f18:	dd03      	ble.n	15f22 <ip_interface_recvfrom+0x72>
   15f1a:	6923      	ldr	r3, [r4, #16]
   15f1c:	2b01      	cmp	r3, #1
   15f1e:	f000 80a7 	beq.w	16070 <ip_interface_recvfrom+0x1c0>
   15f22:	2500      	movs	r5, #0
   15f24:	69e0      	ldr	r0, [r4, #28]
   15f26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15f28:	b103      	cbz	r3, 15f2c <ip_interface_recvfrom+0x7c>
   15f2a:	681b      	ldr	r3, [r3, #0]
   15f2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   15f2e:	e9cd a600 	strd	sl, r6, [sp]
   15f32:	e9cd 2302 	strd	r2, r3, [sp, #8]
   15f36:	6803      	ldr	r3, [r0, #0]
   15f38:	464a      	mov	r2, r9
   15f3a:	689b      	ldr	r3, [r3, #8]
   15f3c:	4669      	mov	r1, sp
   15f3e:	4798      	blx	r3
   15f40:	4683      	mov	fp, r0
   15f42:	69e0      	ldr	r0, [r4, #28]
   15f44:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   15f48:	6803      	ldr	r3, [r0, #0]
   15f4a:	bf18      	it	ne
   15f4c:	2601      	movne	r6, #1
   15f4e:	68db      	ldr	r3, [r3, #12]
   15f50:	bf0a      	itet	eq
   15f52:	2600      	moveq	r6, #0
   15f54:	f04f 0800 	movne.w	r8, #0
   15f58:	f04f 0823 	moveq.w	r8, #35	; 0x23
   15f5c:	4798      	blx	r3
   15f5e:	3001      	adds	r0, #1
   15f60:	d135      	bne.n	15fce <ip_interface_recvfrom+0x11e>
   15f62:	2d00      	cmp	r5, #0
   15f64:	f000 80b6 	beq.w	160d4 <ip_interface_recvfrom+0x224>
   15f68:	2e00      	cmp	r6, #0
   15f6a:	f000 80a6 	beq.w	160ba <ip_interface_recvfrom+0x20a>
   15f6e:	6823      	ldr	r3, [r4, #0]
   15f70:	0319      	lsls	r1, r3, #12
   15f72:	d506      	bpl.n	15f82 <ip_interface_recvfrom+0xd2>
   15f74:	6823      	ldr	r3, [r4, #0]
   15f76:	b29b      	uxth	r3, r3
   15f78:	2b0d      	cmp	r3, #13
   15f7a:	d002      	beq.n	15f82 <ip_interface_recvfrom+0xd2>
   15f7c:	6923      	ldr	r3, [r4, #16]
   15f7e:	2b01      	cmp	r3, #1
   15f80:	d025      	beq.n	15fce <ip_interface_recvfrom+0x11e>
   15f82:	6823      	ldr	r3, [r4, #0]
   15f84:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   15f88:	6823      	ldr	r3, [r4, #0]
   15f8a:	f040 80b1 	bne.w	160f0 <ip_interface_recvfrom+0x240>
   15f8e:	031a      	lsls	r2, r3, #12
   15f90:	d475      	bmi.n	1607e <ip_interface_recvfrom+0x1ce>
   15f92:	f1b8 0f00 	cmp.w	r8, #0
   15f96:	f040 808a 	bne.w	160ae <ip_interface_recvfrom+0x1fe>
   15f9a:	4658      	mov	r0, fp
   15f9c:	b005      	add	sp, #20
   15f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15fa2:	6803      	ldr	r3, [r0, #0]
   15fa4:	b29b      	uxth	r3, r3
   15fa6:	2b06      	cmp	r3, #6
   15fa8:	d073      	beq.n	16092 <ip_interface_recvfrom+0x1e2>
   15faa:	6803      	ldr	r3, [r0, #0]
   15fac:	b29b      	uxth	r3, r3
   15fae:	2b07      	cmp	r3, #7
   15fb0:	bf0c      	ite	eq
   15fb2:	f04f 0809 	moveq.w	r8, #9
   15fb6:	f04f 0839 	movne.w	r8, #57	; 0x39
   15fba:	69e0      	ldr	r0, [r4, #28]
   15fbc:	6803      	ldr	r3, [r0, #0]
   15fbe:	68db      	ldr	r3, [r3, #12]
   15fc0:	4798      	blx	r3
   15fc2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   15fc6:	4683      	mov	fp, r0
   15fc8:	d0db      	beq.n	15f82 <ip_interface_recvfrom+0xd2>
   15fca:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   15fce:	6823      	ldr	r3, [r4, #0]
   15fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   15fd4:	6023      	str	r3, [r4, #0]
   15fd6:	e7dc      	b.n	15f92 <ip_interface_recvfrom+0xe2>
   15fd8:	f1b8 0f00 	cmp.w	r8, #0
   15fdc:	f000 8081 	beq.w	160e2 <ip_interface_recvfrom+0x232>
   15fe0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   15fe4:	6a23      	ldr	r3, [r4, #32]
   15fe6:	4611      	mov	r1, r2
   15fe8:	2b00      	cmp	r3, #0
   15fea:	bf08      	it	eq
   15fec:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   15ff0:	4638      	mov	r0, r7
   15ff2:	f001 f877 	bl	170e4 <interface_socket_wait>
   15ff6:	4680      	mov	r8, r0
   15ff8:	b358      	cbz	r0, 16052 <ip_interface_recvfrom+0x1a2>
   15ffa:	6823      	ldr	r3, [r4, #0]
   15ffc:	69e0      	ldr	r0, [r4, #28]
   15ffe:	031b      	lsls	r3, r3, #12
   16000:	d521      	bpl.n	16046 <ip_interface_recvfrom+0x196>
   16002:	6823      	ldr	r3, [r4, #0]
   16004:	b29b      	uxth	r3, r3
   16006:	2b0d      	cmp	r3, #13
   16008:	d01d      	beq.n	16046 <ip_interface_recvfrom+0x196>
   1600a:	6925      	ldr	r5, [r4, #16]
   1600c:	f1a5 0501 	sub.w	r5, r5, #1
   16010:	fab5 f585 	clz	r5, r5
   16014:	096d      	lsrs	r5, r5, #5
   16016:	e786      	b.n	15f26 <ip_interface_recvfrom+0x76>
   16018:	6823      	ldr	r3, [r4, #0]
   1601a:	0318      	lsls	r0, r3, #12
   1601c:	d5dc      	bpl.n	15fd8 <ip_interface_recvfrom+0x128>
   1601e:	6823      	ldr	r3, [r4, #0]
   16020:	b29b      	uxth	r3, r3
   16022:	2b0d      	cmp	r3, #13
   16024:	d0d8      	beq.n	15fd8 <ip_interface_recvfrom+0x128>
   16026:	6923      	ldr	r3, [r4, #16]
   16028:	69e0      	ldr	r0, [r4, #28]
   1602a:	2b01      	cmp	r3, #1
   1602c:	d034      	beq.n	16098 <ip_interface_recvfrom+0x1e8>
   1602e:	f04f 0839 	mov.w	r8, #57	; 0x39
   16032:	6823      	ldr	r3, [r4, #0]
   16034:	0c1b      	lsrs	r3, r3, #16
   16036:	041b      	lsls	r3, r3, #16
   16038:	f043 030d 	orr.w	r3, r3, #13
   1603c:	6023      	str	r3, [r4, #0]
   1603e:	6823      	ldr	r3, [r4, #0]
   16040:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   16044:	6023      	str	r3, [r4, #0]
   16046:	6803      	ldr	r3, [r0, #0]
   16048:	68db      	ldr	r3, [r3, #12]
   1604a:	4798      	blx	r3
   1604c:	3001      	adds	r0, #1
   1604e:	d1be      	bne.n	15fce <ip_interface_recvfrom+0x11e>
   16050:	e797      	b.n	15f82 <ip_interface_recvfrom+0xd2>
   16052:	4638      	mov	r0, r7
   16054:	f001 f8ba 	bl	171cc <interface_socket_from_handle_get>
   16058:	b138      	cbz	r0, 1606a <ip_interface_recvfrom+0x1ba>
   1605a:	f8d0 8004 	ldr.w	r8, [r0, #4]
   1605e:	f1b8 0f00 	cmp.w	r8, #0
   16062:	d002      	beq.n	1606a <ip_interface_recvfrom+0x1ba>
   16064:	2300      	movs	r3, #0
   16066:	6043      	str	r3, [r0, #4]
   16068:	e7c7      	b.n	15ffa <ip_interface_recvfrom+0x14a>
   1606a:	f04f 0801 	mov.w	r8, #1
   1606e:	e742      	b.n	15ef6 <ip_interface_recvfrom+0x46>
   16070:	b11d      	cbz	r5, 1607a <ip_interface_recvfrom+0x1ca>
   16072:	6823      	ldr	r3, [r4, #0]
   16074:	00db      	lsls	r3, r3, #3
   16076:	d5b3      	bpl.n	15fe0 <ip_interface_recvfrom+0x130>
   16078:	e753      	b.n	15f22 <ip_interface_recvfrom+0x72>
   1607a:	69e0      	ldr	r0, [r4, #28]
   1607c:	e753      	b.n	15f26 <ip_interface_recvfrom+0x76>
   1607e:	6823      	ldr	r3, [r4, #0]
   16080:	b29b      	uxth	r3, r3
   16082:	2b0d      	cmp	r3, #13
   16084:	d185      	bne.n	15f92 <ip_interface_recvfrom+0xe2>
   16086:	68a3      	ldr	r3, [r4, #8]
   16088:	2b00      	cmp	r3, #0
   1608a:	d082      	beq.n	15f92 <ip_interface_recvfrom+0xe2>
   1608c:	f8d4 8008 	ldr.w	r8, [r4, #8]
   16090:	e77f      	b.n	15f92 <ip_interface_recvfrom+0xe2>
   16092:	f04f 0809 	mov.w	r8, #9
   16096:	e790      	b.n	15fba <ip_interface_recvfrom+0x10a>
   16098:	6803      	ldr	r3, [r0, #0]
   1609a:	68db      	ldr	r3, [r3, #12]
   1609c:	4798      	blx	r3
   1609e:	3001      	adds	r0, #1
   160a0:	d00b      	beq.n	160ba <ip_interface_recvfrom+0x20a>
   160a2:	f04f 0823 	mov.w	r8, #35	; 0x23
   160a6:	6823      	ldr	r3, [r4, #0]
   160a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   160ac:	6023      	str	r3, [r4, #0]
   160ae:	4640      	mov	r0, r8
   160b0:	f7f9 fc84 	bl	f9bc <bsd_os_errno_set>
   160b4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   160b8:	e76f      	b.n	15f9a <ip_interface_recvfrom+0xea>
   160ba:	6823      	ldr	r3, [r4, #0]
   160bc:	f04f 0b00 	mov.w	fp, #0
   160c0:	0c1b      	lsrs	r3, r3, #16
   160c2:	041b      	lsls	r3, r3, #16
   160c4:	f043 030d 	orr.w	r3, r3, #13
   160c8:	6023      	str	r3, [r4, #0]
   160ca:	6823      	ldr	r3, [r4, #0]
   160cc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   160d0:	6023      	str	r3, [r4, #0]
   160d2:	e762      	b.n	15f9a <ip_interface_recvfrom+0xea>
   160d4:	2e00      	cmp	r6, #0
   160d6:	f47f af4a 	bne.w	15f6e <ip_interface_recvfrom+0xbe>
   160da:	e752      	b.n	15f82 <ip_interface_recvfrom+0xd2>
   160dc:	f04f 0816 	mov.w	r8, #22
   160e0:	e7e5      	b.n	160ae <ip_interface_recvfrom+0x1fe>
   160e2:	f04f 0823 	mov.w	r8, #35	; 0x23
   160e6:	69e0      	ldr	r0, [r4, #28]
   160e8:	e7ad      	b.n	16046 <ip_interface_recvfrom+0x196>
   160ea:	f04f 0809 	mov.w	r8, #9
   160ee:	e7de      	b.n	160ae <ip_interface_recvfrom+0x1fe>
   160f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   160f4:	6023      	str	r3, [r4, #0]
   160f6:	6823      	ldr	r3, [r4, #0]
   160f8:	f04f 0869 	mov.w	r8, #105	; 0x69
   160fc:	0c1b      	lsrs	r3, r3, #16
   160fe:	041b      	lsls	r3, r3, #16
   16100:	f043 030d 	orr.w	r3, r3, #13
   16104:	6023      	str	r3, [r4, #0]
   16106:	e7d2      	b.n	160ae <ip_interface_recvfrom+0x1fe>

00016108 <ip_interface_connect>:
   16108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1610c:	b082      	sub	sp, #8
   1610e:	2900      	cmp	r1, #0
   16110:	d044      	beq.n	1619c <ip_interface_connect+0x94>
   16112:	2a00      	cmp	r2, #0
   16114:	d042      	beq.n	1619c <ip_interface_connect+0x94>
   16116:	4606      	mov	r6, r0
   16118:	460f      	mov	r7, r1
   1611a:	f001 f857 	bl	171cc <interface_socket_from_handle_get>
   1611e:	4605      	mov	r5, r0
   16120:	2800      	cmp	r0, #0
   16122:	f000 8096 	beq.w	16252 <ip_interface_connect+0x14a>
   16126:	6803      	ldr	r3, [r0, #0]
   16128:	b29b      	uxth	r3, r3
   1612a:	2b02      	cmp	r3, #2
   1612c:	d004      	beq.n	16138 <ip_interface_connect+0x30>
   1612e:	6803      	ldr	r3, [r0, #0]
   16130:	b29b      	uxth	r3, r3
   16132:	2b04      	cmp	r3, #4
   16134:	f040 808d 	bne.w	16252 <ip_interface_connect+0x14a>
   16138:	6829      	ldr	r1, [r5, #0]
   1613a:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   1613e:	f040 8084 	bne.w	1624a <ip_interface_connect+0x142>
   16142:	a802      	add	r0, sp, #8
   16144:	f840 1d04 	str.w	r1, [r0, #-4]!
   16148:	f8d5 8018 	ldr.w	r8, [r5, #24]
   1614c:	f7fb ffd4 	bl	120f8 <rpc_ip_client_request_alloc>
   16150:	bb70      	cbnz	r0, 161b0 <ip_interface_connect+0xa8>
   16152:	2108      	movs	r1, #8
   16154:	0433      	lsls	r3, r6, #16
   16156:	9c01      	ldr	r4, [sp, #4]
   16158:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
   1615c:	f042 0202 	orr.w	r2, r2, #2
   16160:	60e2      	str	r2, [r4, #12]
   16162:	f8c4 8010 	str.w	r8, [r4, #16]
   16166:	7260      	strb	r0, [r4, #9]
   16168:	72a0      	strb	r0, [r4, #10]
   1616a:	72e0      	strb	r0, [r4, #11]
   1616c:	7221      	strb	r1, [r4, #8]
   1616e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
   16172:	f043 0302 	orr.w	r3, r3, #2
   16176:	60e3      	str	r3, [r4, #12]
   16178:	68a3      	ldr	r3, [r4, #8]
   1617a:	69aa      	ldr	r2, [r5, #24]
   1617c:	3304      	adds	r3, #4
   1617e:	6122      	str	r2, [r4, #16]
   16180:	60a3      	str	r3, [r4, #8]
   16182:	68eb      	ldr	r3, [r5, #12]
   16184:	687a      	ldr	r2, [r7, #4]
   16186:	4293      	cmp	r3, r2
   16188:	d108      	bne.n	1619c <ip_interface_connect+0x94>
   1618a:	2b02      	cmp	r3, #2
   1618c:	f104 0018 	add.w	r0, r4, #24
   16190:	783a      	ldrb	r2, [r7, #0]
   16192:	d03a      	beq.n	1620a <ip_interface_connect+0x102>
   16194:	2b0a      	cmp	r3, #10
   16196:	d101      	bne.n	1619c <ip_interface_connect+0x94>
   16198:	2a24      	cmp	r2, #36	; 0x24
   1619a:	d00e      	beq.n	161ba <ip_interface_connect+0xb2>
   1619c:	2416      	movs	r4, #22
   1619e:	4620      	mov	r0, r4
   161a0:	f7f9 fc0c 	bl	f9bc <bsd_os_errno_set>
   161a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   161a8:	4620      	mov	r0, r4
   161aa:	b002      	add	sp, #8
   161ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   161b0:	9c01      	ldr	r4, [sp, #4]
   161b2:	2c00      	cmp	r4, #0
   161b4:	d04f      	beq.n	16256 <ip_interface_connect+0x14e>
   161b6:	0433      	lsls	r3, r6, #16
   161b8:	e7d9      	b.n	1616e <ip_interface_connect+0x66>
   161ba:	2210      	movs	r2, #16
   161bc:	893b      	ldrh	r3, [r7, #8]
   161be:	18b9      	adds	r1, r7, r2
   161c0:	82e2      	strh	r2, [r4, #22]
   161c2:	82a3      	strh	r3, [r4, #20]
   161c4:	f005 fe26 	bl	1be14 <memcpy>
   161c8:	68a3      	ldr	r3, [r4, #8]
   161ca:	8ae2      	ldrh	r2, [r4, #22]
   161cc:	f247 0102 	movw	r1, #28674	; 0x7002
   161d0:	4413      	add	r3, r2
   161d2:	60a3      	str	r3, [r4, #8]
   161d4:	682f      	ldr	r7, [r5, #0]
   161d6:	682b      	ldr	r3, [r5, #0]
   161d8:	4620      	mov	r0, r4
   161da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   161de:	602b      	str	r3, [r5, #0]
   161e0:	f7fb ff9e 	bl	12120 <rpc_ip_client_request_send>
   161e4:	b9e0      	cbnz	r0, 16220 <ip_interface_connect+0x118>
   161e6:	682b      	ldr	r3, [r5, #0]
   161e8:	f013 5880 	ands.w	r8, r3, #268435456	; 0x10000000
   161ec:	d12f      	bne.n	1624e <ip_interface_connect+0x146>
   161ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   161f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   161f6:	2105      	movs	r1, #5
   161f8:	4630      	mov	r0, r6
   161fa:	f000 ff73 	bl	170e4 <interface_socket_wait>
   161fe:	4604      	mov	r4, r0
   16200:	b1c0      	cbz	r0, 16234 <ip_interface_connect+0x12c>
   16202:	2c73      	cmp	r4, #115	; 0x73
   16204:	d0cb      	beq.n	1619e <ip_interface_connect+0x96>
   16206:	602f      	str	r7, [r5, #0]
   16208:	e7c9      	b.n	1619e <ip_interface_connect+0x96>
   1620a:	2a10      	cmp	r2, #16
   1620c:	d1c6      	bne.n	1619c <ip_interface_connect+0x94>
   1620e:	2204      	movs	r2, #4
   16210:	893b      	ldrh	r3, [r7, #8]
   16212:	f107 010c 	add.w	r1, r7, #12
   16216:	82e2      	strh	r2, [r4, #22]
   16218:	82a3      	strh	r3, [r4, #20]
   1621a:	f005 fdfb 	bl	1be14 <memcpy>
   1621e:	e7d3      	b.n	161c8 <ip_interface_connect+0xc0>
   16220:	6820      	ldr	r0, [r4, #0]
   16222:	b108      	cbz	r0, 16228 <ip_interface_connect+0x120>
   16224:	f7fb ff9a 	bl	1215c <rpc_ip_client_data_free>
   16228:	4620      	mov	r0, r4
   1622a:	f7fb ff8f 	bl	1214c <rpc_ip_client_message_free>
   1622e:	2423      	movs	r4, #35	; 0x23
   16230:	602f      	str	r7, [r5, #0]
   16232:	e7b4      	b.n	1619e <ip_interface_connect+0x96>
   16234:	4630      	mov	r0, r6
   16236:	f000 ffc9 	bl	171cc <interface_socket_from_handle_get>
   1623a:	2800      	cmp	r0, #0
   1623c:	d0b4      	beq.n	161a8 <ip_interface_connect+0xa0>
   1623e:	6844      	ldr	r4, [r0, #4]
   16240:	2c00      	cmp	r4, #0
   16242:	d0b1      	beq.n	161a8 <ip_interface_connect+0xa0>
   16244:	f8c0 8004 	str.w	r8, [r0, #4]
   16248:	e7db      	b.n	16202 <ip_interface_connect+0xfa>
   1624a:	2472      	movs	r4, #114	; 0x72
   1624c:	e7a7      	b.n	1619e <ip_interface_connect+0x96>
   1624e:	2473      	movs	r4, #115	; 0x73
   16250:	e7a5      	b.n	1619e <ip_interface_connect+0x96>
   16252:	2409      	movs	r4, #9
   16254:	e7a3      	b.n	1619e <ip_interface_connect+0x96>
   16256:	240c      	movs	r4, #12
   16258:	e7a1      	b.n	1619e <ip_interface_connect+0x96>
   1625a:	bf00      	nop

0001625c <ip_interface_bind>:
   1625c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16260:	b082      	sub	sp, #8
   16262:	b389      	cbz	r1, 162c8 <ip_interface_bind+0x6c>
   16264:	b382      	cbz	r2, 162c8 <ip_interface_bind+0x6c>
   16266:	4607      	mov	r7, r0
   16268:	460e      	mov	r6, r1
   1626a:	f000 ffaf 	bl	171cc <interface_socket_from_handle_get>
   1626e:	4605      	mov	r5, r0
   16270:	2800      	cmp	r0, #0
   16272:	d07b      	beq.n	1636c <ip_interface_bind+0x110>
   16274:	6803      	ldr	r3, [r0, #0]
   16276:	b29b      	uxth	r3, r3
   16278:	2b02      	cmp	r3, #2
   1627a:	d177      	bne.n	1636c <ip_interface_bind+0x110>
   1627c:	2100      	movs	r1, #0
   1627e:	a802      	add	r0, sp, #8
   16280:	f840 1d04 	str.w	r1, [r0, #-4]!
   16284:	f8d5 8018 	ldr.w	r8, [r5, #24]
   16288:	f7fb ff36 	bl	120f8 <rpc_ip_client_request_alloc>
   1628c:	bb30      	cbnz	r0, 162dc <ip_interface_bind+0x80>
   1628e:	f247 0305 	movw	r3, #28677	; 0x7005
   16292:	2208      	movs	r2, #8
   16294:	9c01      	ldr	r4, [sp, #4]
   16296:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   1629a:	60e3      	str	r3, [r4, #12]
   1629c:	f8c4 8010 	str.w	r8, [r4, #16]
   162a0:	7260      	strb	r0, [r4, #9]
   162a2:	72a0      	strb	r0, [r4, #10]
   162a4:	72e0      	strb	r0, [r4, #11]
   162a6:	7222      	strb	r2, [r4, #8]
   162a8:	68a3      	ldr	r3, [r4, #8]
   162aa:	3304      	adds	r3, #4
   162ac:	60a3      	str	r3, [r4, #8]
   162ae:	68eb      	ldr	r3, [r5, #12]
   162b0:	6872      	ldr	r2, [r6, #4]
   162b2:	4293      	cmp	r3, r2
   162b4:	d108      	bne.n	162c8 <ip_interface_bind+0x6c>
   162b6:	2b02      	cmp	r3, #2
   162b8:	f104 0018 	add.w	r0, r4, #24
   162bc:	7832      	ldrb	r2, [r6, #0]
   162be:	d03c      	beq.n	1633a <ip_interface_bind+0xde>
   162c0:	2b0a      	cmp	r3, #10
   162c2:	d101      	bne.n	162c8 <ip_interface_bind+0x6c>
   162c4:	2a24      	cmp	r2, #36	; 0x24
   162c6:	d00e      	beq.n	162e6 <ip_interface_bind+0x8a>
   162c8:	2416      	movs	r4, #22
   162ca:	4620      	mov	r0, r4
   162cc:	f7f9 fb76 	bl	f9bc <bsd_os_errno_set>
   162d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   162d4:	4620      	mov	r0, r4
   162d6:	b002      	add	sp, #8
   162d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   162dc:	9c01      	ldr	r4, [sp, #4]
   162de:	2c00      	cmp	r4, #0
   162e0:	d1e2      	bne.n	162a8 <ip_interface_bind+0x4c>
   162e2:	240c      	movs	r4, #12
   162e4:	e7f1      	b.n	162ca <ip_interface_bind+0x6e>
   162e6:	2210      	movs	r2, #16
   162e8:	8933      	ldrh	r3, [r6, #8]
   162ea:	18b1      	adds	r1, r6, r2
   162ec:	82e2      	strh	r2, [r4, #22]
   162ee:	82a3      	strh	r3, [r4, #20]
   162f0:	f005 fd90 	bl	1be14 <memcpy>
   162f4:	68a3      	ldr	r3, [r4, #8]
   162f6:	8ae2      	ldrh	r2, [r4, #22]
   162f8:	f247 0105 	movw	r1, #28677	; 0x7005
   162fc:	4413      	add	r3, r2
   162fe:	60a3      	str	r3, [r4, #8]
   16300:	682b      	ldr	r3, [r5, #0]
   16302:	4620      	mov	r0, r4
   16304:	0c1b      	lsrs	r3, r3, #16
   16306:	041b      	lsls	r3, r3, #16
   16308:	f043 0303 	orr.w	r3, r3, #3
   1630c:	602b      	str	r3, [r5, #0]
   1630e:	682e      	ldr	r6, [r5, #0]
   16310:	f7fb ff06 	bl	12120 <rpc_ip_client_request_send>
   16314:	4680      	mov	r8, r0
   16316:	b9d8      	cbnz	r0, 16350 <ip_interface_bind+0xf4>
   16318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1631c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16320:	2104      	movs	r1, #4
   16322:	4638      	mov	r0, r7
   16324:	f000 fede 	bl	170e4 <interface_socket_wait>
   16328:	4604      	mov	r4, r0
   1632a:	b308      	cbz	r0, 16370 <ip_interface_bind+0x114>
   1632c:	682b      	ldr	r3, [r5, #0]
   1632e:	0c1b      	lsrs	r3, r3, #16
   16330:	041b      	lsls	r3, r3, #16
   16332:	f043 0302 	orr.w	r3, r3, #2
   16336:	602b      	str	r3, [r5, #0]
   16338:	e7c7      	b.n	162ca <ip_interface_bind+0x6e>
   1633a:	2a10      	cmp	r2, #16
   1633c:	d1c4      	bne.n	162c8 <ip_interface_bind+0x6c>
   1633e:	2204      	movs	r2, #4
   16340:	8933      	ldrh	r3, [r6, #8]
   16342:	f106 010c 	add.w	r1, r6, #12
   16346:	82e2      	strh	r2, [r4, #22]
   16348:	82a3      	strh	r3, [r4, #20]
   1634a:	f005 fd63 	bl	1be14 <memcpy>
   1634e:	e7d1      	b.n	162f4 <ip_interface_bind+0x98>
   16350:	6820      	ldr	r0, [r4, #0]
   16352:	b108      	cbz	r0, 16358 <ip_interface_bind+0xfc>
   16354:	f7fb ff02 	bl	1215c <rpc_ip_client_data_free>
   16358:	0c36      	lsrs	r6, r6, #16
   1635a:	0436      	lsls	r6, r6, #16
   1635c:	4620      	mov	r0, r4
   1635e:	f046 0602 	orr.w	r6, r6, #2
   16362:	f7fb fef3 	bl	1214c <rpc_ip_client_message_free>
   16366:	2423      	movs	r4, #35	; 0x23
   16368:	602e      	str	r6, [r5, #0]
   1636a:	e7ae      	b.n	162ca <ip_interface_bind+0x6e>
   1636c:	2409      	movs	r4, #9
   1636e:	e7ac      	b.n	162ca <ip_interface_bind+0x6e>
   16370:	4638      	mov	r0, r7
   16372:	f000 ff2b 	bl	171cc <interface_socket_from_handle_get>
   16376:	2800      	cmp	r0, #0
   16378:	d0ac      	beq.n	162d4 <ip_interface_bind+0x78>
   1637a:	6844      	ldr	r4, [r0, #4]
   1637c:	2c00      	cmp	r4, #0
   1637e:	d0a9      	beq.n	162d4 <ip_interface_bind+0x78>
   16380:	f8c0 8004 	str.w	r8, [r0, #4]
   16384:	e7d2      	b.n	1632c <ip_interface_bind+0xd0>
   16386:	bf00      	nop

00016388 <ip_interface_listen>:
   16388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1638c:	b082      	sub	sp, #8
   1638e:	4606      	mov	r6, r0
   16390:	f000 ff1c 	bl	171cc <interface_socket_from_handle_get>
   16394:	2800      	cmp	r0, #0
   16396:	d067      	beq.n	16468 <ip_interface_listen+0xe0>
   16398:	6803      	ldr	r3, [r0, #0]
   1639a:	4605      	mov	r5, r0
   1639c:	b29b      	uxth	r3, r3
   1639e:	2b04      	cmp	r3, #4
   163a0:	d162      	bne.n	16468 <ip_interface_listen+0xe0>
   163a2:	2100      	movs	r1, #0
   163a4:	4a32      	ldr	r2, [pc, #200]	; (16470 <ip_interface_listen+0xe8>)
   163a6:	4630      	mov	r0, r6
   163a8:	f000 fe64 	bl	17074 <interface_socket_packet_handler_update>
   163ac:	4601      	mov	r1, r0
   163ae:	2800      	cmp	r0, #0
   163b0:	d15c      	bne.n	1646c <ip_interface_listen+0xe4>
   163b2:	a802      	add	r0, sp, #8
   163b4:	f840 1d04 	str.w	r1, [r0, #-4]!
   163b8:	69af      	ldr	r7, [r5, #24]
   163ba:	f7fb fe9d 	bl	120f8 <rpc_ip_client_request_alloc>
   163be:	bba8      	cbnz	r0, 1642c <ip_interface_listen+0xa4>
   163c0:	f247 0308 	movw	r3, #28680	; 0x7008
   163c4:	2208      	movs	r2, #8
   163c6:	9c01      	ldr	r4, [sp, #4]
   163c8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   163cc:	60e3      	str	r3, [r4, #12]
   163ce:	6127      	str	r7, [r4, #16]
   163d0:	7260      	strb	r0, [r4, #9]
   163d2:	72a0      	strb	r0, [r4, #10]
   163d4:	72e0      	strb	r0, [r4, #11]
   163d6:	7222      	strb	r2, [r4, #8]
   163d8:	68a3      	ldr	r3, [r4, #8]
   163da:	f247 0108 	movw	r1, #28680	; 0x7008
   163de:	3304      	adds	r3, #4
   163e0:	60a3      	str	r3, [r4, #8]
   163e2:	682b      	ldr	r3, [r5, #0]
   163e4:	4620      	mov	r0, r4
   163e6:	0c1b      	lsrs	r3, r3, #16
   163e8:	041b      	lsls	r3, r3, #16
   163ea:	f043 0306 	orr.w	r3, r3, #6
   163ee:	602b      	str	r3, [r5, #0]
   163f0:	682f      	ldr	r7, [r5, #0]
   163f2:	f7fb fe95 	bl	12120 <rpc_ip_client_request_send>
   163f6:	4680      	mov	r8, r0
   163f8:	b9e8      	cbnz	r0, 16436 <ip_interface_listen+0xae>
   163fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   163fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16402:	2107      	movs	r1, #7
   16404:	4630      	mov	r0, r6
   16406:	f000 fe6d 	bl	170e4 <interface_socket_wait>
   1640a:	4604      	mov	r4, r0
   1640c:	b308      	cbz	r0, 16452 <ip_interface_listen+0xca>
   1640e:	682b      	ldr	r3, [r5, #0]
   16410:	0c1b      	lsrs	r3, r3, #16
   16412:	041b      	lsls	r3, r3, #16
   16414:	f043 0304 	orr.w	r3, r3, #4
   16418:	602b      	str	r3, [r5, #0]
   1641a:	4620      	mov	r0, r4
   1641c:	f7f9 face 	bl	f9bc <bsd_os_errno_set>
   16420:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16424:	4620      	mov	r0, r4
   16426:	b002      	add	sp, #8
   16428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1642c:	9c01      	ldr	r4, [sp, #4]
   1642e:	2c00      	cmp	r4, #0
   16430:	d1d2      	bne.n	163d8 <ip_interface_listen+0x50>
   16432:	240c      	movs	r4, #12
   16434:	e7f1      	b.n	1641a <ip_interface_listen+0x92>
   16436:	6820      	ldr	r0, [r4, #0]
   16438:	b108      	cbz	r0, 1643e <ip_interface_listen+0xb6>
   1643a:	f7fb fe8f 	bl	1215c <rpc_ip_client_data_free>
   1643e:	0c3f      	lsrs	r7, r7, #16
   16440:	043f      	lsls	r7, r7, #16
   16442:	4620      	mov	r0, r4
   16444:	f047 0704 	orr.w	r7, r7, #4
   16448:	f7fb fe80 	bl	1214c <rpc_ip_client_message_free>
   1644c:	2423      	movs	r4, #35	; 0x23
   1644e:	602f      	str	r7, [r5, #0]
   16450:	e7e3      	b.n	1641a <ip_interface_listen+0x92>
   16452:	4630      	mov	r0, r6
   16454:	f000 feba 	bl	171cc <interface_socket_from_handle_get>
   16458:	2800      	cmp	r0, #0
   1645a:	d0e3      	beq.n	16424 <ip_interface_listen+0x9c>
   1645c:	6844      	ldr	r4, [r0, #4]
   1645e:	2c00      	cmp	r4, #0
   16460:	d0e0      	beq.n	16424 <ip_interface_listen+0x9c>
   16462:	f8c0 8004 	str.w	r8, [r0, #4]
   16466:	e7d2      	b.n	1640e <ip_interface_listen+0x86>
   16468:	2409      	movs	r4, #9
   1646a:	e7d6      	b.n	1641a <ip_interface_listen+0x92>
   1646c:	2423      	movs	r4, #35	; 0x23
   1646e:	e7d4      	b.n	1641a <ip_interface_listen+0x92>
   16470:	00015919 	.word	0x00015919

00016474 <ip_interface_accept>:
   16474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16478:	2500      	movs	r5, #0
   1647a:	b085      	sub	sp, #20
   1647c:	460f      	mov	r7, r1
   1647e:	4690      	mov	r8, r2
   16480:	9502      	str	r5, [sp, #8]
   16482:	4606      	mov	r6, r0
   16484:	f000 fea2 	bl	171cc <interface_socket_from_handle_get>
   16488:	4604      	mov	r4, r0
   1648a:	2800      	cmp	r0, #0
   1648c:	f000 811c 	beq.w	166c8 <ip_interface_accept+0x254>
   16490:	6803      	ldr	r3, [r0, #0]
   16492:	b29b      	uxth	r3, r3
   16494:	2b07      	cmp	r3, #7
   16496:	d10a      	bne.n	164ae <ip_interface_accept+0x3a>
   16498:	6803      	ldr	r3, [r0, #0]
   1649a:	6805      	ldr	r5, [r0, #0]
   1649c:	00db      	lsls	r3, r3, #3
   1649e:	d416      	bmi.n	164ce <ip_interface_accept+0x5a>
   164a0:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   164a4:	d019      	beq.n	164da <ip_interface_accept+0x66>
   164a6:	6805      	ldr	r5, [r0, #0]
   164a8:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   164ac:	d124      	bne.n	164f8 <ip_interface_accept+0x84>
   164ae:	f04f 0909 	mov.w	r9, #9
   164b2:	9b02      	ldr	r3, [sp, #8]
   164b4:	b113      	cbz	r3, 164bc <ip_interface_accept+0x48>
   164b6:	4628      	mov	r0, r5
   164b8:	f000 fdc6 	bl	17048 <interface_socket_free>
   164bc:	4648      	mov	r0, r9
   164be:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   164c2:	f7f9 fa7b 	bl	f9bc <bsd_os_errno_set>
   164c6:	4648      	mov	r0, r9
   164c8:	b005      	add	sp, #20
   164ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164ce:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   164d2:	d16d      	bne.n	165b0 <ip_interface_accept+0x13c>
   164d4:	f04f 0923 	mov.w	r9, #35	; 0x23
   164d8:	e7eb      	b.n	164b2 <ip_interface_accept+0x3e>
   164da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   164de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   164e2:	4611      	mov	r1, r2
   164e4:	4630      	mov	r0, r6
   164e6:	f000 fdfd 	bl	170e4 <interface_socket_wait>
   164ea:	4681      	mov	r9, r0
   164ec:	2800      	cmp	r0, #0
   164ee:	d07e      	beq.n	165ee <ip_interface_accept+0x17a>
   164f0:	6825      	ldr	r5, [r4, #0]
   164f2:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   164f6:	d0dc      	beq.n	164b2 <ip_interface_accept+0x3e>
   164f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   164fc:	2300      	movs	r3, #0
   164fe:	e9cd 0300 	strd	r0, r3, [sp]
   16502:	4a75      	ldr	r2, [pc, #468]	; (166d8 <ip_interface_accept+0x264>)
   16504:	6921      	ldr	r1, [r4, #16]
   16506:	a802      	add	r0, sp, #8
   16508:	f000 fd40 	bl	16f8c <interface_socket_allocate>
   1650c:	9b02      	ldr	r3, [sp, #8]
   1650e:	4605      	mov	r5, r0
   16510:	2b00      	cmp	r3, #0
   16512:	f000 80dd 	beq.w	166d0 <ip_interface_accept+0x25c>
   16516:	2100      	movs	r1, #0
   16518:	6962      	ldr	r2, [r4, #20]
   1651a:	a804      	add	r0, sp, #16
   1651c:	615a      	str	r2, [r3, #20]
   1651e:	68e2      	ldr	r2, [r4, #12]
   16520:	f840 1d04 	str.w	r1, [r0, #-4]!
   16524:	60da      	str	r2, [r3, #12]
   16526:	6922      	ldr	r2, [r4, #16]
   16528:	611a      	str	r2, [r3, #16]
   1652a:	f8d4 9018 	ldr.w	r9, [r4, #24]
   1652e:	f7fb fde3 	bl	120f8 <rpc_ip_client_request_alloc>
   16532:	2800      	cmp	r0, #0
   16534:	d143      	bne.n	165be <ip_interface_accept+0x14a>
   16536:	f247 030c 	movw	r3, #28684	; 0x700c
   1653a:	2108      	movs	r1, #8
   1653c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   16540:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   16544:	f8cb 300c 	str.w	r3, [fp, #12]
   16548:	f8cb 9010 	str.w	r9, [fp, #16]
   1654c:	f88b 0009 	strb.w	r0, [fp, #9]
   16550:	f88b 000a 	strb.w	r0, [fp, #10]
   16554:	f88b 000b 	strb.w	r0, [fp, #11]
   16558:	f88b 1008 	strb.w	r1, [fp, #8]
   1655c:	6823      	ldr	r3, [r4, #0]
   1655e:	f247 010c 	movw	r1, #28684	; 0x700c
   16562:	0c1b      	lsrs	r3, r3, #16
   16564:	041b      	lsls	r3, r3, #16
   16566:	f043 0308 	orr.w	r3, r3, #8
   1656a:	6023      	str	r3, [r4, #0]
   1656c:	4658      	mov	r0, fp
   1656e:	f8d4 9000 	ldr.w	r9, [r4]
   16572:	f7fb fdd5 	bl	12120 <rpc_ip_client_request_send>
   16576:	4682      	mov	sl, r0
   16578:	bb48      	cbnz	r0, 165ce <ip_interface_accept+0x15a>
   1657a:	6822      	ldr	r2, [r4, #0]
   1657c:	9900      	ldr	r1, [sp, #0]
   1657e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16582:	400a      	ands	r2, r1
   16584:	6022      	str	r2, [r4, #0]
   16586:	2109      	movs	r1, #9
   16588:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1658c:	4630      	mov	r0, r6
   1658e:	f000 fda9 	bl	170e4 <interface_socket_wait>
   16592:	4681      	mov	r9, r0
   16594:	2800      	cmp	r0, #0
   16596:	f000 8085 	beq.w	166a4 <ip_interface_accept+0x230>
   1659a:	6823      	ldr	r3, [r4, #0]
   1659c:	9a01      	ldr	r2, [sp, #4]
   1659e:	431a      	orrs	r2, r3
   165a0:	6022      	str	r2, [r4, #0]
   165a2:	6823      	ldr	r3, [r4, #0]
   165a4:	0c1b      	lsrs	r3, r3, #16
   165a6:	041b      	lsls	r3, r3, #16
   165a8:	f043 0307 	orr.w	r3, r3, #7
   165ac:	6023      	str	r3, [r4, #0]
   165ae:	e780      	b.n	164b2 <ip_interface_accept+0x3e>
   165b0:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   165b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   165b8:	e9cd 2300 	strd	r2, r3, [sp]
   165bc:	e7a1      	b.n	16502 <ip_interface_accept+0x8e>
   165be:	f8dd b00c 	ldr.w	fp, [sp, #12]
   165c2:	f04f 090c 	mov.w	r9, #12
   165c6:	f1bb 0f00 	cmp.w	fp, #0
   165ca:	d1c7      	bne.n	1655c <ip_interface_accept+0xe8>
   165cc:	e771      	b.n	164b2 <ip_interface_accept+0x3e>
   165ce:	f8db 0000 	ldr.w	r0, [fp]
   165d2:	b108      	cbz	r0, 165d8 <ip_interface_accept+0x164>
   165d4:	f7fb fdc2 	bl	1215c <rpc_ip_client_data_free>
   165d8:	ea4f 4919 	mov.w	r9, r9, lsr #16
   165dc:	4658      	mov	r0, fp
   165de:	ea4f 4909 	mov.w	r9, r9, lsl #16
   165e2:	f7fb fdb3 	bl	1214c <rpc_ip_client_message_free>
   165e6:	f049 0307 	orr.w	r3, r9, #7
   165ea:	6023      	str	r3, [r4, #0]
   165ec:	e772      	b.n	164d4 <ip_interface_accept+0x60>
   165ee:	4630      	mov	r0, r6
   165f0:	f000 fdec 	bl	171cc <interface_socket_from_handle_get>
   165f4:	b130      	cbz	r0, 16604 <ip_interface_accept+0x190>
   165f6:	f8d0 9004 	ldr.w	r9, [r0, #4]
   165fa:	f1b9 0f00 	cmp.w	r9, #0
   165fe:	d001      	beq.n	16604 <ip_interface_accept+0x190>
   16600:	6045      	str	r5, [r0, #4]
   16602:	e775      	b.n	164f0 <ip_interface_accept+0x7c>
   16604:	6823      	ldr	r3, [r4, #0]
   16606:	03d9      	lsls	r1, r3, #15
   16608:	f53f af76 	bmi.w	164f8 <ip_interface_accept+0x84>
   1660c:	4d33      	ldr	r5, [pc, #204]	; (166dc <ip_interface_accept+0x268>)
   1660e:	9902      	ldr	r1, [sp, #8]
   16610:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   16614:	699b      	ldr	r3, [r3, #24]
   16616:	618b      	str	r3, [r1, #24]
   16618:	b147      	cbz	r7, 1662c <ip_interface_accept+0x1b8>
   1661a:	68cb      	ldr	r3, [r1, #12]
   1661c:	2b0a      	cmp	r3, #10
   1661e:	d024      	beq.n	1666a <ip_interface_accept+0x1f6>
   16620:	2b02      	cmp	r3, #2
   16622:	d103      	bne.n	1662c <ip_interface_accept+0x1b8>
   16624:	f8d8 2000 	ldr.w	r2, [r8]
   16628:	2a10      	cmp	r2, #16
   1662a:	d032      	beq.n	16692 <ip_interface_accept+0x21e>
   1662c:	680a      	ldr	r2, [r1, #0]
   1662e:	482c      	ldr	r0, [pc, #176]	; (166e0 <ip_interface_accept+0x26c>)
   16630:	4002      	ands	r2, r0
   16632:	f042 0205 	orr.w	r2, r2, #5
   16636:	600a      	str	r2, [r1, #0]
   16638:	9a02      	ldr	r2, [sp, #8]
   1663a:	6811      	ldr	r1, [r2, #0]
   1663c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   16640:	6011      	str	r1, [r2, #0]
   16642:	6811      	ldr	r1, [r2, #0]
   16644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   16648:	6011      	str	r1, [r2, #0]
   1664a:	6823      	ldr	r3, [r4, #0]
   1664c:	4003      	ands	r3, r0
   1664e:	f043 0307 	orr.w	r3, r3, #7
   16652:	6023      	str	r3, [r4, #0]
   16654:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   16658:	f7fb fd78 	bl	1214c <rpc_ip_client_message_free>
   1665c:	2300      	movs	r3, #0
   1665e:	4648      	mov	r0, r9
   16660:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   16664:	b005      	add	sp, #20
   16666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1666a:	f8d8 2000 	ldr.w	r2, [r8]
   1666e:	2a24      	cmp	r2, #36	; 0x24
   16670:	d1dc      	bne.n	1662c <ip_interface_accept+0x1b8>
   16672:	703a      	strb	r2, [r7, #0]
   16674:	2210      	movs	r2, #16
   16676:	607b      	str	r3, [r7, #4]
   16678:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   1667c:	f107 0010 	add.w	r0, r7, #16
   16680:	8b9b      	ldrh	r3, [r3, #28]
   16682:	813b      	strh	r3, [r7, #8]
   16684:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   16688:	3120      	adds	r1, #32
   1668a:	f005 fbc3 	bl	1be14 <memcpy>
   1668e:	9902      	ldr	r1, [sp, #8]
   16690:	e7cc      	b.n	1662c <ip_interface_accept+0x1b8>
   16692:	703a      	strb	r2, [r7, #0]
   16694:	607b      	str	r3, [r7, #4]
   16696:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   1669a:	f107 000c 	add.w	r0, r7, #12
   1669e:	8b9b      	ldrh	r3, [r3, #28]
   166a0:	2204      	movs	r2, #4
   166a2:	e7ee      	b.n	16682 <ip_interface_accept+0x20e>
   166a4:	4630      	mov	r0, r6
   166a6:	f000 fd91 	bl	171cc <interface_socket_from_handle_get>
   166aa:	b138      	cbz	r0, 166bc <ip_interface_accept+0x248>
   166ac:	f8d0 9004 	ldr.w	r9, [r0, #4]
   166b0:	f1b9 0f00 	cmp.w	r9, #0
   166b4:	d002      	beq.n	166bc <ip_interface_accept+0x248>
   166b6:	f8c0 a004 	str.w	sl, [r0, #4]
   166ba:	e76e      	b.n	1659a <ip_interface_accept+0x126>
   166bc:	6823      	ldr	r3, [r4, #0]
   166be:	9a01      	ldr	r2, [sp, #4]
   166c0:	46a9      	mov	r9, r5
   166c2:	4313      	orrs	r3, r2
   166c4:	6023      	str	r3, [r4, #0]
   166c6:	e7a1      	b.n	1660c <ip_interface_accept+0x198>
   166c8:	4605      	mov	r5, r0
   166ca:	f04f 0909 	mov.w	r9, #9
   166ce:	e6f0      	b.n	164b2 <ip_interface_accept+0x3e>
   166d0:	f04f 090c 	mov.w	r9, #12
   166d4:	e6f2      	b.n	164bc <ip_interface_accept+0x48>
   166d6:	bf00      	nop
   166d8:	00015919 	.word	0x00015919
   166dc:	20020978 	.word	0x20020978
   166e0:	ffff0000 	.word	0xffff0000

000166e4 <ip_interface_setopt>:
   166e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   166e8:	2901      	cmp	r1, #1
   166ea:	b084      	sub	sp, #16
   166ec:	f040 809c 	bne.w	16828 <ip_interface_setopt+0x144>
   166f0:	460e      	mov	r6, r1
   166f2:	4690      	mov	r8, r2
   166f4:	461d      	mov	r5, r3
   166f6:	4607      	mov	r7, r0
   166f8:	f000 fd68 	bl	171cc <interface_socket_from_handle_get>
   166fc:	4604      	mov	r4, r0
   166fe:	2800      	cmp	r0, #0
   16700:	f000 80a5 	beq.w	1684e <ip_interface_setopt+0x16a>
   16704:	f1b8 0f19 	cmp.w	r8, #25
   16708:	d16e      	bne.n	167e8 <ip_interface_setopt+0x104>
   1670a:	2d00      	cmp	r5, #0
   1670c:	f000 8092 	beq.w	16834 <ip_interface_setopt+0x150>
   16710:	4628      	mov	r0, r5
   16712:	f005 fb4d 	bl	1bdb0 <strlen>
   16716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16718:	4298      	cmp	r0, r3
   1671a:	f040 808b 	bne.w	16834 <ip_interface_setopt+0x150>
   1671e:	6823      	ldr	r3, [r4, #0]
   16720:	b29b      	uxth	r3, r3
   16722:	2b02      	cmp	r3, #2
   16724:	d173      	bne.n	1680e <ip_interface_setopt+0x12a>
   16726:	4629      	mov	r1, r5
   16728:	68e0      	ldr	r0, [r4, #12]
   1672a:	f7fe fb91 	bl	14e50 <pdn_interface_pdn_id_get>
   1672e:	9002      	str	r0, [sp, #8]
   16730:	3001      	adds	r0, #1
   16732:	bf08      	it	eq
   16734:	2516      	moveq	r5, #22
   16736:	d04e      	beq.n	167d6 <ip_interface_setopt+0xf2>
   16738:	6823      	ldr	r3, [r4, #0]
   1673a:	025b      	lsls	r3, r3, #9
   1673c:	d44a      	bmi.n	167d4 <ip_interface_setopt+0xf0>
   1673e:	6823      	ldr	r3, [r4, #0]
   16740:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
   16744:	d146      	bne.n	167d4 <ip_interface_setopt+0xf0>
   16746:	6826      	ldr	r6, [r4, #0]
   16748:	6822      	ldr	r2, [r4, #0]
   1674a:	a804      	add	r0, sp, #16
   1674c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   16750:	6022      	str	r2, [r4, #0]
   16752:	2104      	movs	r1, #4
   16754:	f840 3d04 	str.w	r3, [r0, #-4]!
   16758:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1675c:	f7fb fccc 	bl	120f8 <rpc_ip_client_request_alloc>
   16760:	2800      	cmp	r0, #0
   16762:	d14e      	bne.n	16802 <ip_interface_setopt+0x11e>
   16764:	f247 0203 	movw	r2, #28675	; 0x7003
   16768:	2300      	movs	r3, #0
   1676a:	2108      	movs	r1, #8
   1676c:	9d03      	ldr	r5, [sp, #12]
   1676e:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   16772:	60ea      	str	r2, [r5, #12]
   16774:	f8c5 8010 	str.w	r8, [r5, #16]
   16778:	7229      	strb	r1, [r5, #8]
   1677a:	726b      	strb	r3, [r5, #9]
   1677c:	72ab      	strb	r3, [r5, #10]
   1677e:	72eb      	strb	r3, [r5, #11]
   16780:	f04f 0c08 	mov.w	ip, #8
   16784:	2300      	movs	r3, #0
   16786:	2010      	movs	r0, #16
   16788:	2130      	movs	r1, #48	; 0x30
   1678a:	68aa      	ldr	r2, [r5, #8]
   1678c:	756b      	strb	r3, [r5, #21]
   1678e:	4462      	add	r2, ip
   16790:	60aa      	str	r2, [r5, #8]
   16792:	75ab      	strb	r3, [r5, #22]
   16794:	75eb      	strb	r3, [r5, #23]
   16796:	76ab      	strb	r3, [r5, #26]
   16798:	76eb      	strb	r3, [r5, #27]
   1679a:	f885 c014 	strb.w	ip, [r5, #20]
   1679e:	7628      	strb	r0, [r5, #24]
   167a0:	7669      	strb	r1, [r5, #25]
   167a2:	2204      	movs	r2, #4
   167a4:	eb0d 010c 	add.w	r1, sp, ip
   167a8:	6828      	ldr	r0, [r5, #0]
   167aa:	f005 fb33 	bl	1be14 <memcpy>
   167ae:	f247 0103 	movw	r1, #28675	; 0x7003
   167b2:	4628      	mov	r0, r5
   167b4:	f7fb fcb4 	bl	12120 <rpc_ip_client_request_send>
   167b8:	4680      	mov	r8, r0
   167ba:	bb50      	cbnz	r0, 16812 <ip_interface_setopt+0x12e>
   167bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   167c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   167c4:	4611      	mov	r1, r2
   167c6:	4638      	mov	r0, r7
   167c8:	f000 fc8c 	bl	170e4 <interface_socket_wait>
   167cc:	4605      	mov	r5, r0
   167ce:	b398      	cbz	r0, 16838 <ip_interface_setopt+0x154>
   167d0:	6026      	str	r6, [r4, #0]
   167d2:	e000      	b.n	167d6 <ip_interface_setopt+0xf2>
   167d4:	2523      	movs	r5, #35	; 0x23
   167d6:	4628      	mov	r0, r5
   167d8:	f7f9 f8f0 	bl	f9bc <bsd_os_errno_set>
   167dc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   167e0:	4628      	mov	r0, r5
   167e2:	b004      	add	sp, #16
   167e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   167e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   167ea:	4642      	mov	r2, r8
   167ec:	9300      	str	r3, [sp, #0]
   167ee:	4631      	mov	r1, r6
   167f0:	462b      	mov	r3, r5
   167f2:	4638      	mov	r0, r7
   167f4:	f000 fd12 	bl	1721c <interface_socket_setopt>
   167f8:	4605      	mov	r5, r0
   167fa:	4628      	mov	r0, r5
   167fc:	b004      	add	sp, #16
   167fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16802:	9d03      	ldr	r5, [sp, #12]
   16804:	2d00      	cmp	r5, #0
   16806:	d1bb      	bne.n	16780 <ip_interface_setopt+0x9c>
   16808:	6026      	str	r6, [r4, #0]
   1680a:	250c      	movs	r5, #12
   1680c:	e7e3      	b.n	167d6 <ip_interface_setopt+0xf2>
   1680e:	2509      	movs	r5, #9
   16810:	e7e1      	b.n	167d6 <ip_interface_setopt+0xf2>
   16812:	6828      	ldr	r0, [r5, #0]
   16814:	b108      	cbz	r0, 1681a <ip_interface_setopt+0x136>
   16816:	f7fb fca1 	bl	1215c <rpc_ip_client_data_free>
   1681a:	4628      	mov	r0, r5
   1681c:	f7fb fc96 	bl	1214c <rpc_ip_client_message_free>
   16820:	2523      	movs	r5, #35	; 0x23
   16822:	6026      	str	r6, [r4, #0]
   16824:	6026      	str	r6, [r4, #0]
   16826:	e7d6      	b.n	167d6 <ip_interface_setopt+0xf2>
   16828:	202a      	movs	r0, #42	; 0x2a
   1682a:	f7f9 f8c7 	bl	f9bc <bsd_os_errno_set>
   1682e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   16832:	e7d5      	b.n	167e0 <ip_interface_setopt+0xfc>
   16834:	250e      	movs	r5, #14
   16836:	e7ce      	b.n	167d6 <ip_interface_setopt+0xf2>
   16838:	4638      	mov	r0, r7
   1683a:	f000 fcc7 	bl	171cc <interface_socket_from_handle_get>
   1683e:	b120      	cbz	r0, 1684a <ip_interface_setopt+0x166>
   16840:	6845      	ldr	r5, [r0, #4]
   16842:	b115      	cbz	r5, 1684a <ip_interface_setopt+0x166>
   16844:	f8c0 8004 	str.w	r8, [r0, #4]
   16848:	e7c2      	b.n	167d0 <ip_interface_setopt+0xec>
   1684a:	6026      	str	r6, [r4, #0]
   1684c:	e7c8      	b.n	167e0 <ip_interface_setopt+0xfc>
   1684e:	2009      	movs	r0, #9
   16850:	f7f9 f8b4 	bl	f9bc <bsd_os_errno_set>
   16854:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   16858:	e7c2      	b.n	167e0 <ip_interface_setopt+0xfc>
   1685a:	bf00      	nop

0001685c <ip_interface_getopt>:
   1685c:	f000 bd14 	b.w	17288 <interface_socket_getopt>

00016860 <ip_interface_getaddrinfo>:
   16860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16864:	f04f 0c00 	mov.w	ip, #0
   16868:	2401      	movs	r4, #1
   1686a:	4e72      	ldr	r6, [pc, #456]	; (16a34 <ip_interface_getaddrinfo+0x1d4>)
   1686c:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 16a40 <ip_interface_getaddrinfo+0x1e0>
   16870:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 16a44 <ip_interface_getaddrinfo+0x1e4>
   16874:	b085      	sub	sp, #20
   16876:	4607      	mov	r7, r0
   16878:	4615      	mov	r5, r2
   1687a:	9301      	str	r3, [sp, #4]
   1687c:	f8a6 c000 	strh.w	ip, [r6]
   16880:	f8ca 4000 	str.w	r4, [sl]
   16884:	f8c9 4000 	str.w	r4, [r9]
   16888:	b171      	cbz	r1, 168a8 <ip_interface_getaddrinfo+0x48>
   1688a:	4608      	mov	r0, r1
   1688c:	220a      	movs	r2, #10
   1688e:	4661      	mov	r1, ip
   16890:	f005 f961 	bl	1bb56 <strtol>
   16894:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   16898:	1e42      	subs	r2, r0, #1
   1689a:	429a      	cmp	r2, r3
   1689c:	f200 8083 	bhi.w	169a6 <ip_interface_getaddrinfo+0x146>
   168a0:	0203      	lsls	r3, r0, #8
   168a2:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   168a6:	8030      	strh	r0, [r6, #0]
   168a8:	f8df 819c 	ldr.w	r8, [pc, #412]	; 16a48 <ip_interface_getaddrinfo+0x1e8>
   168ac:	f8d8 3000 	ldr.w	r3, [r8]
   168b0:	2b00      	cmp	r3, #0
   168b2:	d174      	bne.n	1699e <ip_interface_getaddrinfo+0x13e>
   168b4:	4a60      	ldr	r2, [pc, #384]	; (16a38 <ip_interface_getaddrinfo+0x1d8>)
   168b6:	6013      	str	r3, [r2, #0]
   168b8:	4a60      	ldr	r2, [pc, #384]	; (16a3c <ip_interface_getaddrinfo+0x1dc>)
   168ba:	6013      	str	r3, [r2, #0]
   168bc:	2f00      	cmp	r7, #0
   168be:	d062      	beq.n	16986 <ip_interface_getaddrinfo+0x126>
   168c0:	4638      	mov	r0, r7
   168c2:	f005 fa75 	bl	1bdb0 <strlen>
   168c6:	4683      	mov	fp, r0
   168c8:	b125      	cbz	r5, 168d4 <ip_interface_getaddrinfo+0x74>
   168ca:	69ea      	ldr	r2, [r5, #28]
   168cc:	b112      	cbz	r2, 168d4 <ip_interface_getaddrinfo+0x74>
   168ce:	6851      	ldr	r1, [r2, #4]
   168d0:	2966      	cmp	r1, #102	; 0x66
   168d2:	d06c      	beq.n	169ae <ip_interface_getaddrinfo+0x14e>
   168d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   168d8:	2100      	movs	r1, #0
   168da:	ae04      	add	r6, sp, #16
   168dc:	f846 1d04 	str.w	r1, [r6, #-4]!
   168e0:	4630      	mov	r0, r6
   168e2:	4659      	mov	r1, fp
   168e4:	9200      	str	r2, [sp, #0]
   168e6:	f7fb fc07 	bl	120f8 <rpc_ip_client_request_alloc>
   168ea:	9a00      	ldr	r2, [sp, #0]
   168ec:	2800      	cmp	r0, #0
   168ee:	d14c      	bne.n	1698a <ip_interface_getaddrinfo+0x12a>
   168f0:	f247 010d 	movw	r1, #28685	; 0x700d
   168f4:	f04f 0c08 	mov.w	ip, #8
   168f8:	9c03      	ldr	r4, [sp, #12]
   168fa:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   168fe:	60e1      	str	r1, [r4, #12]
   16900:	6122      	str	r2, [r4, #16]
   16902:	7260      	strb	r0, [r4, #9]
   16904:	72a0      	strb	r0, [r4, #10]
   16906:	72e0      	strb	r0, [r4, #11]
   16908:	f884 c008 	strb.w	ip, [r4, #8]
   1690c:	2d00      	cmp	r5, #0
   1690e:	d076      	beq.n	169fe <ip_interface_getaddrinfo+0x19e>
   16910:	686a      	ldr	r2, [r5, #4]
   16912:	f022 0108 	bic.w	r1, r2, #8
   16916:	2902      	cmp	r1, #2
   16918:	d05c      	beq.n	169d4 <ip_interface_getaddrinfo+0x174>
   1691a:	2a05      	cmp	r2, #5
   1691c:	d178      	bne.n	16a10 <ip_interface_getaddrinfo+0x1b0>
   1691e:	68a9      	ldr	r1, [r5, #8]
   16920:	2902      	cmp	r1, #2
   16922:	f8c9 1000 	str.w	r1, [r9]
   16926:	d061      	beq.n	169ec <ip_interface_getaddrinfo+0x18c>
   16928:	61a2      	str	r2, [r4, #24]
   1692a:	68ea      	ldr	r2, [r5, #12]
   1692c:	6222      	str	r2, [r4, #32]
   1692e:	68aa      	ldr	r2, [r5, #8]
   16930:	61e2      	str	r2, [r4, #28]
   16932:	682a      	ldr	r2, [r5, #0]
   16934:	6162      	str	r2, [r4, #20]
   16936:	68a2      	ldr	r2, [r4, #8]
   16938:	3210      	adds	r2, #16
   1693a:	60a2      	str	r2, [r4, #8]
   1693c:	b12f      	cbz	r7, 1694a <ip_interface_getaddrinfo+0xea>
   1693e:	6820      	ldr	r0, [r4, #0]
   16940:	b118      	cbz	r0, 1694a <ip_interface_getaddrinfo+0xea>
   16942:	465a      	mov	r2, fp
   16944:	4639      	mov	r1, r7
   16946:	f005 fa65 	bl	1be14 <memcpy>
   1694a:	2301      	movs	r3, #1
   1694c:	f247 010d 	movw	r1, #28685	; 0x700d
   16950:	4620      	mov	r0, r4
   16952:	f8c8 3000 	str.w	r3, [r8]
   16956:	f7fb fbe3 	bl	12120 <rpc_ip_client_request_send>
   1695a:	2800      	cmp	r0, #0
   1695c:	d156      	bne.n	16a0c <ip_interface_getaddrinfo+0x1ac>
   1695e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16962:	9303      	str	r3, [sp, #12]
   16964:	4631      	mov	r1, r6
   16966:	4620      	mov	r0, r4
   16968:	f7f8 ff94 	bl	f894 <bsd_os_timedwait>
   1696c:	f8d8 3000 	ldr.w	r3, [r8]
   16970:	2b01      	cmp	r3, #1
   16972:	d0f7      	beq.n	16964 <ip_interface_getaddrinfo+0x104>
   16974:	4b31      	ldr	r3, [pc, #196]	; (16a3c <ip_interface_getaddrinfo+0x1dc>)
   16976:	6818      	ldr	r0, [r3, #0]
   16978:	2800      	cmp	r0, #0
   1697a:	d13b      	bne.n	169f4 <ip_interface_getaddrinfo+0x194>
   1697c:	4b2e      	ldr	r3, [pc, #184]	; (16a38 <ip_interface_getaddrinfo+0x1d8>)
   1697e:	9a01      	ldr	r2, [sp, #4]
   16980:	681b      	ldr	r3, [r3, #0]
   16982:	6013      	str	r3, [r2, #0]
   16984:	e00c      	b.n	169a0 <ip_interface_getaddrinfo+0x140>
   16986:	46bb      	mov	fp, r7
   16988:	e79e      	b.n	168c8 <ip_interface_getaddrinfo+0x68>
   1698a:	9c03      	ldr	r4, [sp, #12]
   1698c:	2c00      	cmp	r4, #0
   1698e:	d1bd      	bne.n	1690c <ip_interface_getaddrinfo+0xac>
   16990:	200c      	movs	r0, #12
   16992:	2300      	movs	r3, #0
   16994:	f8c8 3000 	str.w	r3, [r8]
   16998:	b005      	add	sp, #20
   1699a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1699e:	2073      	movs	r0, #115	; 0x73
   169a0:	b005      	add	sp, #20
   169a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169a6:	2016      	movs	r0, #22
   169a8:	b005      	add	sp, #20
   169aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169ae:	6891      	ldr	r1, [r2, #8]
   169b0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   169b4:	d18e      	bne.n	168d4 <ip_interface_getaddrinfo+0x74>
   169b6:	f240 2102 	movw	r1, #514	; 0x202
   169ba:	68d0      	ldr	r0, [r2, #12]
   169bc:	4288      	cmp	r0, r1
   169be:	d189      	bne.n	168d4 <ip_interface_getaddrinfo+0x74>
   169c0:	6991      	ldr	r1, [r2, #24]
   169c2:	2900      	cmp	r1, #0
   169c4:	d086      	beq.n	168d4 <ip_interface_getaddrinfo+0x74>
   169c6:	6868      	ldr	r0, [r5, #4]
   169c8:	f7fe fa42 	bl	14e50 <pdn_interface_pdn_id_get>
   169cc:	1c43      	adds	r3, r0, #1
   169ce:	d081      	beq.n	168d4 <ip_interface_getaddrinfo+0x74>
   169d0:	4602      	mov	r2, r0
   169d2:	e781      	b.n	168d8 <ip_interface_getaddrinfo+0x78>
   169d4:	68a9      	ldr	r1, [r5, #8]
   169d6:	2902      	cmp	r1, #2
   169d8:	f8c9 1000 	str.w	r1, [r9]
   169dc:	d006      	beq.n	169ec <ip_interface_getaddrinfo+0x18c>
   169de:	2a05      	cmp	r2, #5
   169e0:	d0a2      	beq.n	16928 <ip_interface_getaddrinfo+0xc8>
   169e2:	2a0a      	cmp	r2, #10
   169e4:	bf14      	ite	ne
   169e6:	2201      	movne	r2, #1
   169e8:	2202      	moveq	r2, #2
   169ea:	e79d      	b.n	16928 <ip_interface_getaddrinfo+0xc8>
   169ec:	2102      	movs	r1, #2
   169ee:	f8ca 1000 	str.w	r1, [sl]
   169f2:	e7f4      	b.n	169de <ip_interface_getaddrinfo+0x17e>
   169f4:	4b11      	ldr	r3, [pc, #68]	; (16a3c <ip_interface_getaddrinfo+0x1dc>)
   169f6:	6818      	ldr	r0, [r3, #0]
   169f8:	2800      	cmp	r0, #0
   169fa:	d0d1      	beq.n	169a0 <ip_interface_getaddrinfo+0x140>
   169fc:	e7c9      	b.n	16992 <ip_interface_getaddrinfo+0x132>
   169fe:	4629      	mov	r1, r5
   16a00:	2210      	movs	r2, #16
   16a02:	f104 0014 	add.w	r0, r4, #20
   16a06:	f005 fa2f 	bl	1be68 <memset>
   16a0a:	e794      	b.n	16936 <ip_interface_getaddrinfo+0xd6>
   16a0c:	2023      	movs	r0, #35	; 0x23
   16a0e:	e7c0      	b.n	16992 <ip_interface_getaddrinfo+0x132>
   16a10:	202f      	movs	r0, #47	; 0x2f
   16a12:	f7f8 ffd3 	bl	f9bc <bsd_os_errno_set>
   16a16:	68a2      	ldr	r2, [r4, #8]
   16a18:	3210      	adds	r2, #16
   16a1a:	60a2      	str	r2, [r4, #8]
   16a1c:	b917      	cbnz	r7, 16a24 <ip_interface_getaddrinfo+0x1c4>
   16a1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16a22:	e7b6      	b.n	16992 <ip_interface_getaddrinfo+0x132>
   16a24:	6820      	ldr	r0, [r4, #0]
   16a26:	2800      	cmp	r0, #0
   16a28:	d0f9      	beq.n	16a1e <ip_interface_getaddrinfo+0x1be>
   16a2a:	465a      	mov	r2, fp
   16a2c:	4639      	mov	r1, r7
   16a2e:	f005 f9f1 	bl	1be14 <memcpy>
   16a32:	e7f4      	b.n	16a1e <ip_interface_getaddrinfo+0x1be>
   16a34:	20021e22 	.word	0x20021e22
   16a38:	20020970 	.word	0x20020970
   16a3c:	20020968 	.word	0x20020968
   16a40:	20020960 	.word	0x20020960
   16a44:	20020964 	.word	0x20020964
   16a48:	2002096c 	.word	0x2002096c

00016a4c <ip_interface_freeaddrinfo>:
   16a4c:	b538      	push	{r3, r4, r5, lr}
   16a4e:	4c0b      	ldr	r4, [pc, #44]	; (16a7c <ip_interface_freeaddrinfo+0x30>)
   16a50:	6823      	ldr	r3, [r4, #0]
   16a52:	2b02      	cmp	r3, #2
   16a54:	d000      	beq.n	16a58 <ip_interface_freeaddrinfo+0xc>
   16a56:	bd38      	pop	{r3, r4, r5, pc}
   16a58:	b130      	cbz	r0, 16a68 <ip_interface_freeaddrinfo+0x1c>
   16a5a:	4605      	mov	r5, r0
   16a5c:	6940      	ldr	r0, [r0, #20]
   16a5e:	f7fb fb1d 	bl	1209c <nrf_free>
   16a62:	4628      	mov	r0, r5
   16a64:	f7fb fb1a 	bl	1209c <nrf_free>
   16a68:	2300      	movs	r3, #0
   16a6a:	4a05      	ldr	r2, [pc, #20]	; (16a80 <ip_interface_freeaddrinfo+0x34>)
   16a6c:	4905      	ldr	r1, [pc, #20]	; (16a84 <ip_interface_freeaddrinfo+0x38>)
   16a6e:	6023      	str	r3, [r4, #0]
   16a70:	6013      	str	r3, [r2, #0]
   16a72:	6808      	ldr	r0, [r1, #0]
   16a74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16a78:	f7fb bb70 	b.w	1215c <rpc_ip_client_data_free>
   16a7c:	2002096c 	.word	0x2002096c
   16a80:	20020968 	.word	0x20020968
   16a84:	20020974 	.word	0x20020974

00016a88 <rpc_ip_event_handler>:
   16a88:	f248 030d 	movw	r3, #32781	; 0x800d
   16a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a90:	4299      	cmp	r1, r3
   16a92:	b089      	sub	sp, #36	; 0x24
   16a94:	4605      	mov	r5, r0
   16a96:	d062      	beq.n	16b5e <rpc_ip_event_handler+0xd6>
   16a98:	f248 030f 	movw	r3, #32783	; 0x800f
   16a9c:	4299      	cmp	r1, r3
   16a9e:	460c      	mov	r4, r1
   16aa0:	d04b      	beq.n	16b3a <rpc_ip_event_handler+0xb2>
   16aa2:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   16aa6:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   16aaa:	68c0      	ldr	r0, [r0, #12]
   16aac:	d07b      	beq.n	16ba6 <rpc_ip_event_handler+0x11e>
   16aae:	0c07      	lsrs	r7, r0, #16
   16ab0:	4638      	mov	r0, r7
   16ab2:	f000 fb8b 	bl	171cc <interface_socket_from_handle_get>
   16ab6:	4606      	mov	r6, r0
   16ab8:	2800      	cmp	r0, #0
   16aba:	d05f      	beq.n	16b7c <rpc_ip_event_handler+0xf4>
   16abc:	4601      	mov	r1, r0
   16abe:	4623      	mov	r3, r4
   16ac0:	462a      	mov	r2, r5
   16ac2:	4638      	mov	r0, r7
   16ac4:	f7fb ff8c 	bl	129e0 <tls_rpc_ip_event_handler>
   16ac8:	2800      	cmp	r0, #0
   16aca:	d053      	beq.n	16b74 <rpc_ip_event_handler+0xec>
   16acc:	f248 0307 	movw	r3, #32775	; 0x8007
   16ad0:	429c      	cmp	r4, r3
   16ad2:	d97c      	bls.n	16bce <rpc_ip_event_handler+0x146>
   16ad4:	f248 030c 	movw	r3, #32780	; 0x800c
   16ad8:	429c      	cmp	r4, r3
   16ada:	d068      	beq.n	16bae <rpc_ip_event_handler+0x126>
   16adc:	f240 8118 	bls.w	16d10 <rpc_ip_event_handler+0x288>
   16ae0:	f249 0302 	movw	r3, #36866	; 0x9002
   16ae4:	429c      	cmp	r4, r3
   16ae6:	f000 8191 	beq.w	16e0c <rpc_ip_event_handler+0x384>
   16aea:	f249 0303 	movw	r3, #36867	; 0x9003
   16aee:	429c      	cmp	r4, r3
   16af0:	f000 81a6 	beq.w	16e40 <rpc_ip_event_handler+0x3b8>
   16af4:	f249 0301 	movw	r3, #36865	; 0x9001
   16af8:	429c      	cmp	r4, r3
   16afa:	d13f      	bne.n	16b7c <rpc_ip_event_handler+0xf4>
   16afc:	6834      	ldr	r4, [r6, #0]
   16afe:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   16b02:	f000 81be 	beq.w	16e82 <rpc_ip_event_handler+0x3fa>
   16b06:	68ab      	ldr	r3, [r5, #8]
   16b08:	2b04      	cmp	r3, #4
   16b0a:	f200 81f4 	bhi.w	16ef6 <rpc_ip_event_handler+0x46e>
   16b0e:	2400      	movs	r4, #0
   16b10:	4627      	mov	r7, r4
   16b12:	6829      	ldr	r1, [r5, #0]
   16b14:	686a      	ldr	r2, [r5, #4]
   16b16:	e9cd 7406 	strd	r7, r4, [sp, #24]
   16b1a:	e9cd 1204 	strd	r1, r2, [sp, #16]
   16b1e:	69f0      	ldr	r0, [r6, #28]
   16b20:	a904      	add	r1, sp, #16
   16b22:	6803      	ldr	r3, [r0, #0]
   16b24:	685b      	ldr	r3, [r3, #4]
   16b26:	4798      	blx	r3
   16b28:	3001      	adds	r0, #1
   16b2a:	f000 81d0 	beq.w	16ece <rpc_ip_event_handler+0x446>
   16b2e:	6833      	ldr	r3, [r6, #0]
   16b30:	2000      	movs	r0, #0
   16b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   16b36:	6033      	str	r3, [r6, #0]
   16b38:	e00e      	b.n	16b58 <rpc_ip_event_handler+0xd0>
   16b3a:	6943      	ldr	r3, [r0, #20]
   16b3c:	2001      	movs	r0, #1
   16b3e:	2b10      	cmp	r3, #16
   16b40:	49b5      	ldr	r1, [pc, #724]	; (16e18 <rpc_ip_event_handler+0x390>)
   16b42:	bf88      	it	hi
   16b44:	222d      	movhi	r2, #45	; 0x2d
   16b46:	7008      	strb	r0, [r1, #0]
   16b48:	f04f 0000 	mov.w	r0, #0
   16b4c:	bf9c      	itt	ls
   16b4e:	4ab3      	ldrls	r2, [pc, #716]	; (16e1c <rpc_ip_event_handler+0x394>)
   16b50:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   16b54:	4bb2      	ldr	r3, [pc, #712]	; (16e20 <rpc_ip_event_handler+0x398>)
   16b56:	601a      	str	r2, [r3, #0]
   16b58:	b009      	add	sp, #36	; 0x24
   16b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b5e:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 16e34 <rpc_ip_event_handler+0x3ac>
   16b62:	6807      	ldr	r7, [r0, #0]
   16b64:	f8d9 3000 	ldr.w	r3, [r9]
   16b68:	2b01      	cmp	r3, #1
   16b6a:	d00b      	beq.n	16b84 <rpc_ip_event_handler+0xfc>
   16b6c:	b117      	cbz	r7, 16b74 <rpc_ip_event_handler+0xec>
   16b6e:	4638      	mov	r0, r7
   16b70:	f7fb faf4 	bl	1215c <rpc_ip_client_data_free>
   16b74:	2000      	movs	r0, #0
   16b76:	b009      	add	sp, #36	; 0x24
   16b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b7c:	6828      	ldr	r0, [r5, #0]
   16b7e:	2800      	cmp	r0, #0
   16b80:	d1f6      	bne.n	16b70 <rpc_ip_event_handler+0xe8>
   16b82:	e7f7      	b.n	16b74 <rpc_ip_event_handler+0xec>
   16b84:	6943      	ldr	r3, [r0, #20]
   16b86:	2b00      	cmp	r3, #0
   16b88:	d045      	beq.n	16c16 <rpc_ip_event_handler+0x18e>
   16b8a:	2b10      	cmp	r3, #16
   16b8c:	bf96      	itet	ls
   16b8e:	4aa3      	ldrls	r2, [pc, #652]	; (16e1c <rpc_ip_event_handler+0x394>)
   16b90:	232d      	movhi	r3, #45	; 0x2d
   16b92:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   16b96:	2202      	movs	r2, #2
   16b98:	49a2      	ldr	r1, [pc, #648]	; (16e24 <rpc_ip_event_handler+0x39c>)
   16b9a:	600b      	str	r3, [r1, #0]
   16b9c:	f8c9 2000 	str.w	r2, [r9]
   16ba0:	2f00      	cmp	r7, #0
   16ba2:	d1e4      	bne.n	16b6e <rpc_ip_event_handler+0xe6>
   16ba4:	e7e6      	b.n	16b74 <rpc_ip_event_handler+0xec>
   16ba6:	f000 fabf 	bl	17128 <interface_from_internal_id_search>
   16baa:	4607      	mov	r7, r0
   16bac:	e780      	b.n	16ab0 <rpc_ip_event_handler+0x28>
   16bae:	6833      	ldr	r3, [r6, #0]
   16bb0:	b29b      	uxth	r3, r3
   16bb2:	2b08      	cmp	r3, #8
   16bb4:	d1de      	bne.n	16b74 <rpc_ip_event_handler+0xec>
   16bb6:	696b      	ldr	r3, [r5, #20]
   16bb8:	2b00      	cmp	r3, #0
   16bba:	f000 818a 	beq.w	16ed2 <rpc_ip_event_handler+0x44a>
   16bbe:	2b10      	cmp	r3, #16
   16bc0:	f200 815d 	bhi.w	16e7e <rpc_ip_event_handler+0x3f6>
   16bc4:	4a95      	ldr	r2, [pc, #596]	; (16e1c <rpc_ip_event_handler+0x394>)
   16bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16bca:	6073      	str	r3, [r6, #4]
   16bcc:	e7d2      	b.n	16b74 <rpc_ip_event_handler+0xec>
   16bce:	f248 0306 	movw	r3, #32774	; 0x8006
   16bd2:	429c      	cmp	r4, r3
   16bd4:	f080 8109 	bcs.w	16dea <rpc_ip_event_handler+0x362>
   16bd8:	f248 0302 	movw	r3, #32770	; 0x8002
   16bdc:	429c      	cmp	r4, r3
   16bde:	f000 80ec 	beq.w	16dba <rpc_ip_event_handler+0x332>
   16be2:	f240 80be 	bls.w	16d62 <rpc_ip_event_handler+0x2da>
   16be6:	f248 0303 	movw	r3, #32771	; 0x8003
   16bea:	429c      	cmp	r4, r3
   16bec:	f000 80ca 	beq.w	16d84 <rpc_ip_event_handler+0x2fc>
   16bf0:	f248 0305 	movw	r3, #32773	; 0x8005
   16bf4:	429c      	cmp	r4, r3
   16bf6:	d1c1      	bne.n	16b7c <rpc_ip_event_handler+0xf4>
   16bf8:	6833      	ldr	r3, [r6, #0]
   16bfa:	b29b      	uxth	r3, r3
   16bfc:	2b03      	cmp	r3, #3
   16bfe:	d1b9      	bne.n	16b74 <rpc_ip_event_handler+0xec>
   16c00:	696b      	ldr	r3, [r5, #20]
   16c02:	2b00      	cmp	r3, #0
   16c04:	d1db      	bne.n	16bbe <rpc_ip_event_handler+0x136>
   16c06:	6833      	ldr	r3, [r6, #0]
   16c08:	2000      	movs	r0, #0
   16c0a:	0c1b      	lsrs	r3, r3, #16
   16c0c:	041b      	lsls	r3, r3, #16
   16c0e:	f043 0304 	orr.w	r3, r3, #4
   16c12:	6033      	str	r3, [r6, #0]
   16c14:	e7a0      	b.n	16b58 <rpc_ip_event_handler+0xd0>
   16c16:	4b84      	ldr	r3, [pc, #528]	; (16e28 <rpc_ip_event_handler+0x3a0>)
   16c18:	601f      	str	r7, [r3, #0]
   16c1a:	6984      	ldr	r4, [r0, #24]
   16c1c:	0163      	lsls	r3, r4, #5
   16c1e:	4618      	mov	r0, r3
   16c20:	9303      	str	r3, [sp, #12]
   16c22:	f7fb fa31 	bl	12088 <nrf_malloc>
   16c26:	9002      	str	r0, [sp, #8]
   16c28:	2800      	cmp	r0, #0
   16c2a:	f000 808a 	beq.w	16d42 <rpc_ip_event_handler+0x2ba>
   16c2e:	00e5      	lsls	r5, r4, #3
   16c30:	1928      	adds	r0, r5, r4
   16c32:	0080      	lsls	r0, r0, #2
   16c34:	f7fb fa28 	bl	12088 <nrf_malloc>
   16c38:	2800      	cmp	r0, #0
   16c3a:	f000 811c 	beq.w	16e76 <rpc_ip_event_handler+0x3ee>
   16c3e:	2c00      	cmp	r4, #0
   16c40:	d05e      	beq.n	16d00 <rpc_ip_event_handler+0x278>
   16c42:	3510      	adds	r5, #16
   16c44:	1943      	adds	r3, r0, r5
   16c46:	9301      	str	r3, [sp, #4]
   16c48:	9b02      	ldr	r3, [sp, #8]
   16c4a:	2404      	movs	r4, #4
   16c4c:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 16e38 <rpc_ip_event_handler+0x3b0>
   16c50:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 16e3c <rpc_ip_event_handler+0x3b4>
   16c54:	f100 0810 	add.w	r8, r0, #16
   16c58:	f103 0620 	add.w	r6, r3, #32
   16c5c:	e01d      	b.n	16c9a <rpc_ip_event_handler+0x212>
   16c5e:	220a      	movs	r2, #10
   16c60:	f848 2c0c 	str.w	r2, [r8, #-12]
   16c64:	f04f 0224 	mov.w	r2, #36	; 0x24
   16c68:	4640      	mov	r0, r8
   16c6a:	f808 2c10 	strb.w	r2, [r8, #-16]
   16c6e:	f828 3c08 	strh.w	r3, [r8, #-8]
   16c72:	f856 2c10 	ldr.w	r2, [r6, #-16]
   16c76:	f005 f8cd 	bl	1be14 <memcpy>
   16c7a:	f856 3c10 	ldr.w	r3, [r6, #-16]
   16c7e:	f108 0808 	add.w	r8, r8, #8
   16c82:	441c      	add	r4, r3
   16c84:	193b      	adds	r3, r7, r4
   16c86:	f846 3c08 	str.w	r3, [r6, #-8]
   16c8a:	9b01      	ldr	r3, [sp, #4]
   16c8c:	f846 6c04 	str.w	r6, [r6, #-4]
   16c90:	4598      	cmp	r8, r3
   16c92:	442c      	add	r4, r5
   16c94:	f106 0620 	add.w	r6, r6, #32
   16c98:	d02c      	beq.n	16cf4 <rpc_ip_event_handler+0x26c>
   16c9a:	593b      	ldr	r3, [r7, r4]
   16c9c:	193a      	adds	r2, r7, r4
   16c9e:	f846 3c20 	str.w	r3, [r6, #-32]
   16ca2:	6853      	ldr	r3, [r2, #4]
   16ca4:	f8da 1000 	ldr.w	r1, [sl]
   16ca8:	2b02      	cmp	r3, #2
   16caa:	bf14      	ite	ne
   16cac:	2002      	movne	r0, #2
   16cae:	200a      	moveq	r0, #10
   16cb0:	f8db 3000 	ldr.w	r3, [fp]
   16cb4:	e946 0107 	strd	r0, r1, [r6, #-28]
   16cb8:	f846 3c14 	str.w	r3, [r6, #-20]
   16cbc:	8a10      	ldrh	r0, [r2, #16]
   16cbe:	f1a8 0310 	sub.w	r3, r8, #16
   16cc2:	f846 0c10 	str.w	r0, [r6, #-16]
   16cc6:	8a55      	ldrh	r5, [r2, #18]
   16cc8:	f846 3c0c 	str.w	r3, [r6, #-12]
   16ccc:	4b57      	ldr	r3, [pc, #348]	; (16e2c <rpc_ip_event_handler+0x3a4>)
   16cce:	3414      	adds	r4, #20
   16cd0:	2804      	cmp	r0, #4
   16cd2:	eb07 0104 	add.w	r1, r7, r4
   16cd6:	881b      	ldrh	r3, [r3, #0]
   16cd8:	d1c1      	bne.n	16c5e <rpc_ip_event_handler+0x1d6>
   16cda:	2210      	movs	r2, #16
   16cdc:	2002      	movs	r0, #2
   16cde:	f828 3c08 	strh.w	r3, [r8, #-8]
   16ce2:	f848 0c0c 	str.w	r0, [r8, #-12]
   16ce6:	f808 2c10 	strb.w	r2, [r8, #-16]
   16cea:	f856 2c10 	ldr.w	r2, [r6, #-16]
   16cee:	f1a8 0004 	sub.w	r0, r8, #4
   16cf2:	e7c0      	b.n	16c76 <rpc_ip_event_handler+0x1ee>
   16cf4:	2200      	movs	r2, #0
   16cf6:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   16cfa:	440b      	add	r3, r1
   16cfc:	f843 2c04 	str.w	r2, [r3, #-4]
   16d00:	2202      	movs	r2, #2
   16d02:	4b4b      	ldr	r3, [pc, #300]	; (16e30 <rpc_ip_event_handler+0x3a8>)
   16d04:	f8c9 2000 	str.w	r2, [r9]
   16d08:	9a02      	ldr	r2, [sp, #8]
   16d0a:	2000      	movs	r0, #0
   16d0c:	601a      	str	r2, [r3, #0]
   16d0e:	e723      	b.n	16b58 <rpc_ip_event_handler+0xd0>
   16d10:	f248 0308 	movw	r3, #32776	; 0x8008
   16d14:	429c      	cmp	r4, r3
   16d16:	d041      	beq.n	16d9c <rpc_ip_event_handler+0x314>
   16d18:	f248 0309 	movw	r3, #32777	; 0x8009
   16d1c:	429c      	cmp	r4, r3
   16d1e:	f47f af2d 	bne.w	16b7c <rpc_ip_event_handler+0xf4>
   16d22:	6833      	ldr	r3, [r6, #0]
   16d24:	b29b      	uxth	r3, r3
   16d26:	2b0d      	cmp	r3, #13
   16d28:	f47f af24 	bne.w	16b74 <rpc_ip_event_handler+0xec>
   16d2c:	6968      	ldr	r0, [r5, #20]
   16d2e:	2800      	cmp	r0, #0
   16d30:	f000 80da 	beq.w	16ee8 <rpc_ip_event_handler+0x460>
   16d34:	2810      	cmp	r0, #16
   16d36:	f200 80a2 	bhi.w	16e7e <rpc_ip_event_handler+0x3f6>
   16d3a:	4b38      	ldr	r3, [pc, #224]	; (16e1c <rpc_ip_event_handler+0x394>)
   16d3c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   16d40:	e743      	b.n	16bca <rpc_ip_event_handler+0x142>
   16d42:	f7fb f9ab 	bl	1209c <nrf_free>
   16d46:	200c      	movs	r0, #12
   16d48:	2302      	movs	r3, #2
   16d4a:	4936      	ldr	r1, [pc, #216]	; (16e24 <rpc_ip_event_handler+0x39c>)
   16d4c:	4a38      	ldr	r2, [pc, #224]	; (16e30 <rpc_ip_event_handler+0x3a8>)
   16d4e:	6008      	str	r0, [r1, #0]
   16d50:	682f      	ldr	r7, [r5, #0]
   16d52:	9902      	ldr	r1, [sp, #8]
   16d54:	f8c9 3000 	str.w	r3, [r9]
   16d58:	6011      	str	r1, [r2, #0]
   16d5a:	2f00      	cmp	r7, #0
   16d5c:	f47f af07 	bne.w	16b6e <rpc_ip_event_handler+0xe6>
   16d60:	e708      	b.n	16b74 <rpc_ip_event_handler+0xec>
   16d62:	f248 0301 	movw	r3, #32769	; 0x8001
   16d66:	429c      	cmp	r4, r3
   16d68:	f47f af08 	bne.w	16b7c <rpc_ip_event_handler+0xf4>
   16d6c:	6833      	ldr	r3, [r6, #0]
   16d6e:	2b01      	cmp	r3, #1
   16d70:	f47f af00 	bne.w	16b74 <rpc_ip_event_handler+0xec>
   16d74:	6968      	ldr	r0, [r5, #20]
   16d76:	2800      	cmp	r0, #0
   16d78:	d1dc      	bne.n	16d34 <rpc_ip_event_handler+0x2ac>
   16d7a:	2302      	movs	r3, #2
   16d7c:	6033      	str	r3, [r6, #0]
   16d7e:	69ab      	ldr	r3, [r5, #24]
   16d80:	61b3      	str	r3, [r6, #24]
   16d82:	e6e9      	b.n	16b58 <rpc_ip_event_handler+0xd0>
   16d84:	6833      	ldr	r3, [r6, #0]
   16d86:	025b      	lsls	r3, r3, #9
   16d88:	f57f aef4 	bpl.w	16b74 <rpc_ip_event_handler+0xec>
   16d8c:	6968      	ldr	r0, [r5, #20]
   16d8e:	2800      	cmp	r0, #0
   16d90:	d1d0      	bne.n	16d34 <rpc_ip_event_handler+0x2ac>
   16d92:	6833      	ldr	r3, [r6, #0]
   16d94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   16d98:	6033      	str	r3, [r6, #0]
   16d9a:	e6dd      	b.n	16b58 <rpc_ip_event_handler+0xd0>
   16d9c:	6833      	ldr	r3, [r6, #0]
   16d9e:	b29b      	uxth	r3, r3
   16da0:	2b06      	cmp	r3, #6
   16da2:	f47f aee7 	bne.w	16b74 <rpc_ip_event_handler+0xec>
   16da6:	6968      	ldr	r0, [r5, #20]
   16da8:	2800      	cmp	r0, #0
   16daa:	d1c3      	bne.n	16d34 <rpc_ip_event_handler+0x2ac>
   16dac:	6833      	ldr	r3, [r6, #0]
   16dae:	0c1b      	lsrs	r3, r3, #16
   16db0:	041b      	lsls	r3, r3, #16
   16db2:	f043 0307 	orr.w	r3, r3, #7
   16db6:	6033      	str	r3, [r6, #0]
   16db8:	e6ce      	b.n	16b58 <rpc_ip_event_handler+0xd0>
   16dba:	6833      	ldr	r3, [r6, #0]
   16dbc:	0099      	lsls	r1, r3, #2
   16dbe:	f57f aed9 	bpl.w	16b74 <rpc_ip_event_handler+0xec>
   16dc2:	6833      	ldr	r3, [r6, #0]
   16dc4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   16dc8:	6033      	str	r3, [r6, #0]
   16dca:	6968      	ldr	r0, [r5, #20]
   16dcc:	2800      	cmp	r0, #0
   16dce:	d066      	beq.n	16e9e <rpc_ip_event_handler+0x416>
   16dd0:	2810      	cmp	r0, #16
   16dd2:	bf8e      	itee	hi
   16dd4:	232d      	movhi	r3, #45	; 0x2d
   16dd6:	4b11      	ldrls	r3, [pc, #68]	; (16e1c <rpc_ip_event_handler+0x394>)
   16dd8:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   16ddc:	2000      	movs	r0, #0
   16dde:	6073      	str	r3, [r6, #4]
   16de0:	6833      	ldr	r3, [r6, #0]
   16de2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   16de6:	6033      	str	r3, [r6, #0]
   16de8:	e6b6      	b.n	16b58 <rpc_ip_event_handler+0xd0>
   16dea:	6833      	ldr	r3, [r6, #0]
   16dec:	029a      	lsls	r2, r3, #10
   16dee:	f57f aec1 	bpl.w	16b74 <rpc_ip_event_handler+0xec>
   16df2:	696b      	ldr	r3, [r5, #20]
   16df4:	2b00      	cmp	r3, #0
   16df6:	d061      	beq.n	16ebc <rpc_ip_event_handler+0x434>
   16df8:	2b6b      	cmp	r3, #107	; 0x6b
   16dfa:	f47f aee0 	bne.w	16bbe <rpc_ip_event_handler+0x136>
   16dfe:	6933      	ldr	r3, [r6, #16]
   16e00:	2b01      	cmp	r3, #1
   16e02:	d07c      	beq.n	16efe <rpc_ip_event_handler+0x476>
   16e04:	230c      	movs	r3, #12
   16e06:	2000      	movs	r0, #0
   16e08:	6073      	str	r3, [r6, #4]
   16e0a:	e6a5      	b.n	16b58 <rpc_ip_event_handler+0xd0>
   16e0c:	6833      	ldr	r3, [r6, #0]
   16e0e:	b29b      	uxth	r3, r3
   16e10:	2b07      	cmp	r3, #7
   16e12:	f47f aeaf 	bne.w	16b74 <rpc_ip_event_handler+0xec>
   16e16:	e68a      	b.n	16b2e <rpc_ip_event_handler+0xa6>
   16e18:	20023355 	.word	0x20023355
   16e1c:	0001de04 	.word	0x0001de04
   16e20:	2002099c 	.word	0x2002099c
   16e24:	20020968 	.word	0x20020968
   16e28:	20020974 	.word	0x20020974
   16e2c:	20021e22 	.word	0x20021e22
   16e30:	20020970 	.word	0x20020970
   16e34:	2002096c 	.word	0x2002096c
   16e38:	20020964 	.word	0x20020964
   16e3c:	20020960 	.word	0x20020960
   16e40:	6833      	ldr	r3, [r6, #0]
   16e42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   16e46:	6033      	str	r3, [r6, #0]
   16e48:	6833      	ldr	r3, [r6, #0]
   16e4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   16e4e:	6033      	str	r3, [r6, #0]
   16e50:	6833      	ldr	r3, [r6, #0]
   16e52:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   16e56:	6033      	str	r3, [r6, #0]
   16e58:	692b      	ldr	r3, [r5, #16]
   16e5a:	2b6c      	cmp	r3, #108	; 0x6c
   16e5c:	d016      	beq.n	16e8c <rpc_ip_event_handler+0x404>
   16e5e:	2b10      	cmp	r3, #16
   16e60:	bf8c      	ite	hi
   16e62:	232d      	movhi	r3, #45	; 0x2d
   16e64:	4a40      	ldrls	r2, [pc, #256]	; (16f68 <rpc_ip_event_handler+0x4e0>)
   16e66:	f04f 0000 	mov.w	r0, #0
   16e6a:	bf98      	it	ls
   16e6c:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   16e70:	6073      	str	r3, [r6, #4]
   16e72:	60b3      	str	r3, [r6, #8]
   16e74:	e670      	b.n	16b58 <rpc_ip_event_handler+0xd0>
   16e76:	220c      	movs	r2, #12
   16e78:	4b3c      	ldr	r3, [pc, #240]	; (16f6c <rpc_ip_event_handler+0x4e4>)
   16e7a:	601a      	str	r2, [r3, #0]
   16e7c:	e740      	b.n	16d00 <rpc_ip_event_handler+0x278>
   16e7e:	232d      	movs	r3, #45	; 0x2d
   16e80:	e6a3      	b.n	16bca <rpc_ip_event_handler+0x142>
   16e82:	6828      	ldr	r0, [r5, #0]
   16e84:	f7fb f96a 	bl	1215c <rpc_ip_client_data_free>
   16e88:	4620      	mov	r0, r4
   16e8a:	e665      	b.n	16b58 <rpc_ip_event_handler+0xd0>
   16e8c:	2239      	movs	r2, #57	; 0x39
   16e8e:	6833      	ldr	r3, [r6, #0]
   16e90:	2000      	movs	r0, #0
   16e92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   16e96:	6033      	str	r3, [r6, #0]
   16e98:	6072      	str	r2, [r6, #4]
   16e9a:	60b2      	str	r2, [r6, #8]
   16e9c:	e65c      	b.n	16b58 <rpc_ip_event_handler+0xd0>
   16e9e:	6833      	ldr	r3, [r6, #0]
   16ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   16ea4:	6033      	str	r3, [r6, #0]
   16ea6:	6833      	ldr	r3, [r6, #0]
   16ea8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   16eac:	6033      	str	r3, [r6, #0]
   16eae:	6833      	ldr	r3, [r6, #0]
   16eb0:	0c1b      	lsrs	r3, r3, #16
   16eb2:	041b      	lsls	r3, r3, #16
   16eb4:	f043 0305 	orr.w	r3, r3, #5
   16eb8:	6033      	str	r3, [r6, #0]
   16eba:	e64d      	b.n	16b58 <rpc_ip_event_handler+0xd0>
   16ebc:	6833      	ldr	r3, [r6, #0]
   16ebe:	4a2c      	ldr	r2, [pc, #176]	; (16f70 <rpc_ip_event_handler+0x4e8>)
   16ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   16ec4:	6033      	str	r3, [r6, #0]
   16ec6:	2001      	movs	r0, #1
   16ec8:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
   16ecc:	e644      	b.n	16b58 <rpc_ip_event_handler+0xd0>
   16ece:	2002      	movs	r0, #2
   16ed0:	e642      	b.n	16b58 <rpc_ip_event_handler+0xd0>
   16ed2:	4b27      	ldr	r3, [pc, #156]	; (16f70 <rpc_ip_event_handler+0x4e8>)
   16ed4:	2001      	movs	r0, #1
   16ed6:	f843 5027 	str.w	r5, [r3, r7, lsl #2]
   16eda:	6833      	ldr	r3, [r6, #0]
   16edc:	0c1b      	lsrs	r3, r3, #16
   16ede:	041b      	lsls	r3, r3, #16
   16ee0:	f043 0309 	orr.w	r3, r3, #9
   16ee4:	6033      	str	r3, [r6, #0]
   16ee6:	e637      	b.n	16b58 <rpc_ip_event_handler+0xd0>
   16ee8:	6833      	ldr	r3, [r6, #0]
   16eea:	0c1b      	lsrs	r3, r3, #16
   16eec:	041b      	lsls	r3, r3, #16
   16eee:	f043 030e 	orr.w	r3, r3, #14
   16ef2:	6033      	str	r3, [r6, #0]
   16ef4:	e630      	b.n	16b58 <rpc_ip_event_handler+0xd0>
   16ef6:	8a6c      	ldrh	r4, [r5, #18]
   16ef8:	b94c      	cbnz	r4, 16f0e <rpc_ip_event_handler+0x486>
   16efa:	4627      	mov	r7, r4
   16efc:	e609      	b.n	16b12 <rpc_ip_event_handler+0x8a>
   16efe:	220c      	movs	r2, #12
   16f00:	6833      	ldr	r3, [r6, #0]
   16f02:	2000      	movs	r0, #0
   16f04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   16f08:	6033      	str	r3, [r6, #0]
   16f0a:	6072      	str	r2, [r6, #4]
   16f0c:	e624      	b.n	16b58 <rpc_ip_event_handler+0xd0>
   16f0e:	2024      	movs	r0, #36	; 0x24
   16f10:	f7fb f8ba 	bl	12088 <nrf_malloc>
   16f14:	4607      	mov	r7, r0
   16f16:	b318      	cbz	r0, 16f60 <rpc_ip_event_handler+0x4d8>
   16f18:	8a6a      	ldrh	r2, [r5, #18]
   16f1a:	2a10      	cmp	r2, #16
   16f1c:	d014      	beq.n	16f48 <rpc_ip_event_handler+0x4c0>
   16f1e:	2a04      	cmp	r2, #4
   16f20:	d006      	beq.n	16f30 <rpc_ip_event_handler+0x4a8>
   16f22:	6828      	ldr	r0, [r5, #0]
   16f24:	f7fb f91a 	bl	1215c <rpc_ip_client_data_free>
   16f28:	4638      	mov	r0, r7
   16f2a:	f7fb f8b7 	bl	1209c <nrf_free>
   16f2e:	e621      	b.n	16b74 <rpc_ip_event_handler+0xec>
   16f30:	2302      	movs	r3, #2
   16f32:	2410      	movs	r4, #16
   16f34:	6043      	str	r3, [r0, #4]
   16f36:	7004      	strb	r4, [r0, #0]
   16f38:	8a2b      	ldrh	r3, [r5, #16]
   16f3a:	f105 0114 	add.w	r1, r5, #20
   16f3e:	8103      	strh	r3, [r0, #8]
   16f40:	300c      	adds	r0, #12
   16f42:	f004 ff67 	bl	1be14 <memcpy>
   16f46:	e5e4      	b.n	16b12 <rpc_ip_event_handler+0x8a>
   16f48:	230a      	movs	r3, #10
   16f4a:	2424      	movs	r4, #36	; 0x24
   16f4c:	6043      	str	r3, [r0, #4]
   16f4e:	7004      	strb	r4, [r0, #0]
   16f50:	8a2b      	ldrh	r3, [r5, #16]
   16f52:	f105 0114 	add.w	r1, r5, #20
   16f56:	8103      	strh	r3, [r0, #8]
   16f58:	3010      	adds	r0, #16
   16f5a:	f004 ff5b 	bl	1be14 <memcpy>
   16f5e:	e5d8      	b.n	16b12 <rpc_ip_event_handler+0x8a>
   16f60:	6828      	ldr	r0, [r5, #0]
   16f62:	f7fb f8fb 	bl	1215c <rpc_ip_client_data_free>
   16f66:	e605      	b.n	16b74 <rpc_ip_event_handler+0xec>
   16f68:	0001de04 	.word	0x0001de04
   16f6c:	20020968 	.word	0x20020968
   16f70:	20020978 	.word	0x20020978

00016f74 <interface_init>:
   16f74:	b508      	push	{r3, lr}
   16f76:	f44f 72a2 	mov.w	r2, #324	; 0x144
   16f7a:	2100      	movs	r1, #0
   16f7c:	4802      	ldr	r0, [pc, #8]	; (16f88 <interface_init+0x14>)
   16f7e:	f004 ff73 	bl	1be68 <memset>
   16f82:	2000      	movs	r0, #0
   16f84:	bd08      	pop	{r3, pc}
   16f86:	bf00      	nop
   16f88:	20023358 	.word	0x20023358

00016f8c <interface_socket_allocate>:
   16f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16f8e:	4b2d      	ldr	r3, [pc, #180]	; (17044 <interface_socket_allocate+0xb8>)
   16f90:	4606      	mov	r6, r0
   16f92:	681d      	ldr	r5, [r3, #0]
   16f94:	4608      	mov	r0, r1
   16f96:	b315      	cbz	r5, 16fde <interface_socket_allocate+0x52>
   16f98:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   16f9a:	2c00      	cmp	r4, #0
   16f9c:	d043      	beq.n	17026 <interface_socket_allocate+0x9a>
   16f9e:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   16fa0:	2c00      	cmp	r4, #0
   16fa2:	d042      	beq.n	1702a <interface_socket_allocate+0x9e>
   16fa4:	6edc      	ldr	r4, [r3, #108]	; 0x6c
   16fa6:	2c00      	cmp	r4, #0
   16fa8:	d041      	beq.n	1702e <interface_socket_allocate+0xa2>
   16faa:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
   16fae:	2900      	cmp	r1, #0
   16fb0:	d03f      	beq.n	17032 <interface_socket_allocate+0xa6>
   16fb2:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
   16fb6:	b189      	cbz	r1, 16fdc <interface_socket_allocate+0x50>
   16fb8:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
   16fbc:	2900      	cmp	r1, #0
   16fbe:	d03c      	beq.n	1703a <interface_socket_allocate+0xae>
   16fc0:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
   16fc4:	2900      	cmp	r1, #0
   16fc6:	d03a      	beq.n	1703e <interface_socket_allocate+0xb2>
   16fc8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   16fcc:	b399      	cbz	r1, 17036 <interface_socket_allocate+0xaa>
   16fce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   16fd2:	200c      	movs	r0, #12
   16fd4:	f7f8 fcf2 	bl	f9bc <bsd_os_errno_set>
   16fd8:	4628      	mov	r0, r5
   16fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16fdc:	2505      	movs	r5, #5
   16fde:	f04f 0c01 	mov.w	ip, #1
   16fe2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   16fe6:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   16fea:	00a4      	lsls	r4, r4, #2
   16fec:	f843 c004 	str.w	ip, [r3, r4]
   16ff0:	441c      	add	r4, r3
   16ff2:	4611      	mov	r1, r2
   16ff4:	61a7      	str	r7, [r4, #24]
   16ff6:	4622      	mov	r2, r4
   16ff8:	f001 ffba 	bl	18f70 <packet_handler_create>
   16ffc:	4603      	mov	r3, r0
   16ffe:	61e0      	str	r0, [r4, #28]
   17000:	b158      	cbz	r0, 1701a <interface_socket_allocate+0x8e>
   17002:	681b      	ldr	r3, [r3, #0]
   17004:	681b      	ldr	r3, [r3, #0]
   17006:	4798      	blx	r3
   17008:	b910      	cbnz	r0, 17010 <interface_socket_allocate+0x84>
   1700a:	6034      	str	r4, [r6, #0]
   1700c:	4628      	mov	r0, r5
   1700e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17010:	69e0      	ldr	r0, [r4, #28]
   17012:	f001 ffcd 	bl	18fb0 <packet_handler_delete>
   17016:	2300      	movs	r3, #0
   17018:	61e3      	str	r3, [r4, #28]
   1701a:	4620      	mov	r0, r4
   1701c:	2224      	movs	r2, #36	; 0x24
   1701e:	2100      	movs	r1, #0
   17020:	f004 ff22 	bl	1be68 <memset>
   17024:	e7d3      	b.n	16fce <interface_socket_allocate+0x42>
   17026:	2501      	movs	r5, #1
   17028:	e7d9      	b.n	16fde <interface_socket_allocate+0x52>
   1702a:	2502      	movs	r5, #2
   1702c:	e7d7      	b.n	16fde <interface_socket_allocate+0x52>
   1702e:	2503      	movs	r5, #3
   17030:	e7d5      	b.n	16fde <interface_socket_allocate+0x52>
   17032:	2504      	movs	r5, #4
   17034:	e7d3      	b.n	16fde <interface_socket_allocate+0x52>
   17036:	2508      	movs	r5, #8
   17038:	e7d1      	b.n	16fde <interface_socket_allocate+0x52>
   1703a:	2506      	movs	r5, #6
   1703c:	e7cf      	b.n	16fde <interface_socket_allocate+0x52>
   1703e:	2507      	movs	r5, #7
   17040:	e7cd      	b.n	16fde <interface_socket_allocate+0x52>
   17042:	bf00      	nop
   17044:	20023358 	.word	0x20023358

00017048 <interface_socket_free>:
   17048:	2808      	cmp	r0, #8
   1704a:	d900      	bls.n	1704e <interface_socket_free+0x6>
   1704c:	4770      	bx	lr
   1704e:	b510      	push	{r4, lr}
   17050:	4c07      	ldr	r4, [pc, #28]	; (17070 <interface_socket_free+0x28>)
   17052:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   17056:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   1705a:	69e0      	ldr	r0, [r4, #28]
   1705c:	b108      	cbz	r0, 17062 <interface_socket_free+0x1a>
   1705e:	f001 ffa7 	bl	18fb0 <packet_handler_delete>
   17062:	4620      	mov	r0, r4
   17064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17068:	2224      	movs	r2, #36	; 0x24
   1706a:	2100      	movs	r1, #0
   1706c:	f004 befc 	b.w	1be68 <memset>
   17070:	20023358 	.word	0x20023358

00017074 <interface_socket_packet_handler_update>:
   17074:	2808      	cmp	r0, #8
   17076:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1707a:	d81e      	bhi.n	170ba <interface_socket_packet_handler_update+0x46>
   1707c:	ea4f 08c0 	mov.w	r8, r0, lsl #3
   17080:	4e17      	ldr	r6, [pc, #92]	; (170e0 <interface_socket_packet_handler_update+0x6c>)
   17082:	eb08 0300 	add.w	r3, r8, r0
   17086:	009b      	lsls	r3, r3, #2
   17088:	58f4      	ldr	r4, [r6, r3]
   1708a:	18f5      	adds	r5, r6, r3
   1708c:	b1ac      	cbz	r4, 170ba <interface_socket_packet_handler_update+0x46>
   1708e:	460b      	mov	r3, r1
   17090:	4604      	mov	r4, r0
   17092:	4611      	mov	r1, r2
   17094:	4618      	mov	r0, r3
   17096:	462a      	mov	r2, r5
   17098:	f8d5 901c 	ldr.w	r9, [r5, #28]
   1709c:	f001 ff68 	bl	18f70 <packet_handler_create>
   170a0:	61e8      	str	r0, [r5, #28]
   170a2:	b1d0      	cbz	r0, 170da <interface_socket_packet_handler_update+0x66>
   170a4:	6803      	ldr	r3, [r0, #0]
   170a6:	681b      	ldr	r3, [r3, #0]
   170a8:	4798      	blx	r3
   170aa:	4607      	mov	r7, r0
   170ac:	b948      	cbnz	r0, 170c2 <interface_socket_packet_handler_update+0x4e>
   170ae:	4648      	mov	r0, r9
   170b0:	f001 ff7e 	bl	18fb0 <packet_handler_delete>
   170b4:	4638      	mov	r0, r7
   170b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   170ba:	2705      	movs	r7, #5
   170bc:	4638      	mov	r0, r7
   170be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   170c2:	69e8      	ldr	r0, [r5, #28]
   170c4:	f001 ff74 	bl	18fb0 <packet_handler_delete>
   170c8:	eb08 0004 	add.w	r0, r8, r4
   170cc:	eb06 0680 	add.w	r6, r6, r0, lsl #2
   170d0:	f8c6 901c 	str.w	r9, [r6, #28]
   170d4:	4638      	mov	r0, r7
   170d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   170da:	2704      	movs	r7, #4
   170dc:	e7f4      	b.n	170c8 <interface_socket_packet_handler_update+0x54>
   170de:	bf00      	nop
   170e0:	20023358 	.word	0x20023358

000170e4 <interface_socket_wait>:
   170e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   170e6:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   170ea:	4c0e      	ldr	r4, [pc, #56]	; (17124 <interface_socket_wait+0x40>)
   170ec:	0080      	lsls	r0, r0, #2
   170ee:	5825      	ldr	r5, [r4, r0]
   170f0:	b083      	sub	sp, #12
   170f2:	4015      	ands	r5, r2
   170f4:	428d      	cmp	r5, r1
   170f6:	9301      	str	r3, [sp, #4]
   170f8:	4404      	add	r4, r0
   170fa:	d010      	beq.n	1711e <interface_socket_wait+0x3a>
   170fc:	6863      	ldr	r3, [r4, #4]
   170fe:	b973      	cbnz	r3, 1711e <interface_socket_wait+0x3a>
   17100:	460f      	mov	r7, r1
   17102:	4616      	mov	r6, r2
   17104:	4625      	mov	r5, r4
   17106:	e006      	b.n	17116 <interface_socket_wait+0x32>
   17108:	686b      	ldr	r3, [r5, #4]
   1710a:	b943      	cbnz	r3, 1711e <interface_socket_wait+0x3a>
   1710c:	a901      	add	r1, sp, #4
   1710e:	4620      	mov	r0, r4
   17110:	f7f8 fbc0 	bl	f894 <bsd_os_timedwait>
   17114:	b920      	cbnz	r0, 17120 <interface_socket_wait+0x3c>
   17116:	682b      	ldr	r3, [r5, #0]
   17118:	4033      	ands	r3, r6
   1711a:	42bb      	cmp	r3, r7
   1711c:	d1f4      	bne.n	17108 <interface_socket_wait+0x24>
   1711e:	2000      	movs	r0, #0
   17120:	b003      	add	sp, #12
   17122:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17124:	20023358 	.word	0x20023358

00017128 <interface_from_internal_id_search>:
   17128:	4b27      	ldr	r3, [pc, #156]	; (171c8 <interface_from_internal_id_search+0xa0>)
   1712a:	681a      	ldr	r2, [r3, #0]
   1712c:	b112      	cbz	r2, 17134 <interface_from_internal_id_search+0xc>
   1712e:	699a      	ldr	r2, [r3, #24]
   17130:	4282      	cmp	r2, r0
   17132:	d039      	beq.n	171a8 <interface_from_internal_id_search+0x80>
   17134:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   17136:	b112      	cbz	r2, 1713e <interface_from_internal_id_search+0x16>
   17138:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1713a:	4282      	cmp	r2, r0
   1713c:	d036      	beq.n	171ac <interface_from_internal_id_search+0x84>
   1713e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   17140:	b112      	cbz	r2, 17148 <interface_from_internal_id_search+0x20>
   17142:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   17144:	4282      	cmp	r2, r0
   17146:	d033      	beq.n	171b0 <interface_from_internal_id_search+0x88>
   17148:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   1714a:	b11a      	cbz	r2, 17154 <interface_from_internal_id_search+0x2c>
   1714c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   17150:	4282      	cmp	r2, r0
   17152:	d02f      	beq.n	171b4 <interface_from_internal_id_search+0x8c>
   17154:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   17158:	b11a      	cbz	r2, 17162 <interface_from_internal_id_search+0x3a>
   1715a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
   1715e:	4282      	cmp	r2, r0
   17160:	d02a      	beq.n	171b8 <interface_from_internal_id_search+0x90>
   17162:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   17166:	b11a      	cbz	r2, 17170 <interface_from_internal_id_search+0x48>
   17168:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   1716c:	4282      	cmp	r2, r0
   1716e:	d025      	beq.n	171bc <interface_from_internal_id_search+0x94>
   17170:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
   17174:	b11a      	cbz	r2, 1717e <interface_from_internal_id_search+0x56>
   17176:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   1717a:	4282      	cmp	r2, r0
   1717c:	d020      	beq.n	171c0 <interface_from_internal_id_search+0x98>
   1717e:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
   17182:	b11a      	cbz	r2, 1718c <interface_from_internal_id_search+0x64>
   17184:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
   17188:	4282      	cmp	r2, r0
   1718a:	d01b      	beq.n	171c4 <interface_from_internal_id_search+0x9c>
   1718c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   17190:	b13a      	cbz	r2, 171a2 <interface_from_internal_id_search+0x7a>
   17192:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
   17196:	4283      	cmp	r3, r0
   17198:	bf14      	ite	ne
   1719a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1719e:	2008      	moveq	r0, #8
   171a0:	4770      	bx	lr
   171a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   171a6:	4770      	bx	lr
   171a8:	2000      	movs	r0, #0
   171aa:	4770      	bx	lr
   171ac:	2001      	movs	r0, #1
   171ae:	4770      	bx	lr
   171b0:	2002      	movs	r0, #2
   171b2:	4770      	bx	lr
   171b4:	2003      	movs	r0, #3
   171b6:	4770      	bx	lr
   171b8:	2004      	movs	r0, #4
   171ba:	4770      	bx	lr
   171bc:	2005      	movs	r0, #5
   171be:	4770      	bx	lr
   171c0:	2006      	movs	r0, #6
   171c2:	4770      	bx	lr
   171c4:	2007      	movs	r0, #7
   171c6:	4770      	bx	lr
   171c8:	20023358 	.word	0x20023358

000171cc <interface_socket_from_handle_get>:
   171cc:	2808      	cmp	r0, #8
   171ce:	d807      	bhi.n	171e0 <interface_socket_from_handle_get+0x14>
   171d0:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   171d4:	4b03      	ldr	r3, [pc, #12]	; (171e4 <interface_socket_from_handle_get+0x18>)
   171d6:	0080      	lsls	r0, r0, #2
   171d8:	581a      	ldr	r2, [r3, r0]
   171da:	b10a      	cbz	r2, 171e0 <interface_socket_from_handle_get+0x14>
   171dc:	4418      	add	r0, r3
   171de:	4770      	bx	lr
   171e0:	2000      	movs	r0, #0
   171e2:	4770      	bx	lr
   171e4:	20023358 	.word	0x20023358

000171e8 <interface_socket_event_get>:
   171e8:	b119      	cbz	r1, 171f2 <interface_socket_event_get+0xa>
   171ea:	2808      	cmp	r0, #8
   171ec:	d902      	bls.n	171f4 <interface_socket_event_get+0xc>
   171ee:	2310      	movs	r3, #16
   171f0:	600b      	str	r3, [r1, #0]
   171f2:	4770      	bx	lr
   171f4:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   171f8:	4b07      	ldr	r3, [pc, #28]	; (17218 <interface_socket_event_get+0x30>)
   171fa:	0080      	lsls	r0, r0, #2
   171fc:	581a      	ldr	r2, [r3, r0]
   171fe:	2a00      	cmp	r2, #0
   17200:	d0f5      	beq.n	171ee <interface_socket_event_get+0x6>
   17202:	581b      	ldr	r3, [r3, r0]
   17204:	0c1b      	lsrs	r3, r3, #16
   17206:	f003 020a 	and.w	r2, r3, #10
   1720a:	2a0a      	cmp	r2, #10
   1720c:	bf14      	ite	ne
   1720e:	f003 030f 	andne.w	r3, r3, #15
   17212:	f003 030d 	andeq.w	r3, r3, #13
   17216:	e7eb      	b.n	171f0 <interface_socket_event_get+0x8>
   17218:	20023358 	.word	0x20023358

0001721c <interface_socket_setopt>:
   1721c:	2808      	cmp	r0, #8
   1721e:	b570      	push	{r4, r5, r6, lr}
   17220:	d827      	bhi.n	17272 <interface_socket_setopt+0x56>
   17222:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   17226:	4c16      	ldr	r4, [pc, #88]	; (17280 <interface_socket_setopt+0x64>)
   17228:	0080      	lsls	r0, r0, #2
   1722a:	5825      	ldr	r5, [r4, r0]
   1722c:	b30d      	cbz	r5, 17272 <interface_socket_setopt+0x56>
   1722e:	2901      	cmp	r1, #1
   17230:	d119      	bne.n	17266 <interface_socket_setopt+0x4a>
   17232:	2a14      	cmp	r2, #20
   17234:	d117      	bne.n	17266 <interface_socket_setopt+0x4a>
   17236:	b183      	cbz	r3, 1725a <interface_socket_setopt+0x3e>
   17238:	9a04      	ldr	r2, [sp, #16]
   1723a:	2a08      	cmp	r2, #8
   1723c:	d10d      	bne.n	1725a <interface_socket_setopt+0x3e>
   1723e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   17242:	685a      	ldr	r2, [r3, #4]
   17244:	4e0f      	ldr	r6, [pc, #60]	; (17284 <interface_socket_setopt+0x68>)
   17246:	6819      	ldr	r1, [r3, #0]
   17248:	fba6 2302 	umull	r2, r3, r6, r2
   1724c:	099b      	lsrs	r3, r3, #6
   1724e:	fb05 3301 	mla	r3, r5, r1, r3
   17252:	4420      	add	r0, r4
   17254:	6203      	str	r3, [r0, #32]
   17256:	2000      	movs	r0, #0
   17258:	bd70      	pop	{r4, r5, r6, pc}
   1725a:	2016      	movs	r0, #22
   1725c:	f7f8 fbae 	bl	f9bc <bsd_os_errno_set>
   17260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17264:	bd70      	pop	{r4, r5, r6, pc}
   17266:	202a      	movs	r0, #42	; 0x2a
   17268:	f7f8 fba8 	bl	f9bc <bsd_os_errno_set>
   1726c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17270:	bd70      	pop	{r4, r5, r6, pc}
   17272:	2009      	movs	r0, #9
   17274:	f7f8 fba2 	bl	f9bc <bsd_os_errno_set>
   17278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1727c:	bd70      	pop	{r4, r5, r6, pc}
   1727e:	bf00      	nop
   17280:	20023358 	.word	0x20023358
   17284:	10624dd3 	.word	0x10624dd3

00017288 <interface_socket_getopt>:
   17288:	b570      	push	{r4, r5, r6, lr}
   1728a:	2808      	cmp	r0, #8
   1728c:	9d04      	ldr	r5, [sp, #16]
   1728e:	d821      	bhi.n	172d4 <interface_socket_getopt+0x4c>
   17290:	4c13      	ldr	r4, [pc, #76]	; (172e0 <interface_socket_getopt+0x58>)
   17292:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   17296:	0080      	lsls	r0, r0, #2
   17298:	5826      	ldr	r6, [r4, r0]
   1729a:	4404      	add	r4, r0
   1729c:	b1d6      	cbz	r6, 172d4 <interface_socket_getopt+0x4c>
   1729e:	2901      	cmp	r1, #1
   172a0:	d112      	bne.n	172c8 <interface_socket_getopt+0x40>
   172a2:	2a04      	cmp	r2, #4
   172a4:	d110      	bne.n	172c8 <interface_socket_getopt+0x40>
   172a6:	b14b      	cbz	r3, 172bc <interface_socket_getopt+0x34>
   172a8:	b145      	cbz	r5, 172bc <interface_socket_getopt+0x34>
   172aa:	682a      	ldr	r2, [r5, #0]
   172ac:	2a04      	cmp	r2, #4
   172ae:	d105      	bne.n	172bc <interface_socket_getopt+0x34>
   172b0:	2200      	movs	r2, #0
   172b2:	6861      	ldr	r1, [r4, #4]
   172b4:	4610      	mov	r0, r2
   172b6:	6019      	str	r1, [r3, #0]
   172b8:	6062      	str	r2, [r4, #4]
   172ba:	bd70      	pop	{r4, r5, r6, pc}
   172bc:	2016      	movs	r0, #22
   172be:	f7f8 fb7d 	bl	f9bc <bsd_os_errno_set>
   172c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   172c6:	bd70      	pop	{r4, r5, r6, pc}
   172c8:	202a      	movs	r0, #42	; 0x2a
   172ca:	f7f8 fb77 	bl	f9bc <bsd_os_errno_set>
   172ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   172d2:	bd70      	pop	{r4, r5, r6, pc}
   172d4:	2009      	movs	r0, #9
   172d6:	f7f8 fb71 	bl	f9bc <bsd_os_errno_set>
   172da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   172de:	bd70      	pop	{r4, r5, r6, pc}
   172e0:	20023358 	.word	0x20023358

000172e4 <interface_socket_fcntl>:
   172e4:	2808      	cmp	r0, #8
   172e6:	b510      	push	{r4, lr}
   172e8:	d818      	bhi.n	1731c <interface_socket_fcntl+0x38>
   172ea:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   172ee:	4c11      	ldr	r4, [pc, #68]	; (17334 <interface_socket_fcntl+0x50>)
   172f0:	0083      	lsls	r3, r0, #2
   172f2:	58e0      	ldr	r0, [r4, r3]
   172f4:	b190      	cbz	r0, 1731c <interface_socket_fcntl+0x38>
   172f6:	2901      	cmp	r1, #1
   172f8:	d005      	beq.n	17306 <interface_socket_fcntl+0x22>
   172fa:	2902      	cmp	r1, #2
   172fc:	d114      	bne.n	17328 <interface_socket_fcntl+0x44>
   172fe:	58e0      	ldr	r0, [r4, r3]
   17300:	f3c0 7000 	ubfx	r0, r0, #28, #1
   17304:	bd10      	pop	{r4, pc}
   17306:	f012 0001 	ands.w	r0, r2, #1
   1730a:	58e2      	ldr	r2, [r4, r3]
   1730c:	bf1a      	itte	ne
   1730e:	2000      	movne	r0, #0
   17310:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
   17314:	f022 5280 	biceq.w	r2, r2, #268435456	; 0x10000000
   17318:	50e2      	str	r2, [r4, r3]
   1731a:	bd10      	pop	{r4, pc}
   1731c:	2009      	movs	r0, #9
   1731e:	f7f8 fb4d 	bl	f9bc <bsd_os_errno_set>
   17322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17326:	bd10      	pop	{r4, pc}
   17328:	2016      	movs	r0, #22
   1732a:	f7f8 fb47 	bl	f9bc <bsd_os_errno_set>
   1732e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17332:	bd10      	pop	{r4, pc}
   17334:	20023358 	.word	0x20023358

00017338 <bsd_os_application_irq_handler>:
   17338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1733c:	4c33      	ldr	r4, [pc, #204]	; (1740c <bsd_os_application_irq_handler+0xd4>)
   1733e:	f7f8 fbf1 	bl	fb24 <bsd_os_application_irq_clear>
   17342:	f04f 0803 	mov.w	r8, #3
   17346:	4d32      	ldr	r5, [pc, #200]	; (17410 <bsd_os_application_irq_handler+0xd8>)
   17348:	4f32      	ldr	r7, [pc, #200]	; (17414 <bsd_os_application_irq_handler+0xdc>)
   1734a:	f104 0680 	add.w	r6, r4, #128	; 0x80
   1734e:	e004      	b.n	1735a <bsd_os_application_irq_handler+0x22>
   17350:	2b04      	cmp	r3, #4
   17352:	d006      	beq.n	17362 <bsd_os_application_irq_handler+0x2a>
   17354:	3408      	adds	r4, #8
   17356:	42b4      	cmp	r4, r6
   17358:	d03b      	beq.n	173d2 <bsd_os_application_irq_handler+0x9a>
   1735a:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1735e:	2b02      	cmp	r3, #2
   17360:	d1f6      	bne.n	17350 <bsd_os_application_irq_handler+0x18>
   17362:	6820      	ldr	r0, [r4, #0]
   17364:	882a      	ldrh	r2, [r5, #0]
   17366:	6803      	ldr	r3, [r0, #0]
   17368:	b29b      	uxth	r3, r3
   1736a:	429a      	cmp	r2, r3
   1736c:	d033      	beq.n	173d6 <bsd_os_application_irq_handler+0x9e>
   1736e:	8a2a      	ldrh	r2, [r5, #16]
   17370:	429a      	cmp	r2, r3
   17372:	d032      	beq.n	173da <bsd_os_application_irq_handler+0xa2>
   17374:	8c2a      	ldrh	r2, [r5, #32]
   17376:	429a      	cmp	r2, r3
   17378:	d031      	beq.n	173de <bsd_os_application_irq_handler+0xa6>
   1737a:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
   1737c:	429a      	cmp	r2, r3
   1737e:	d030      	beq.n	173e2 <bsd_os_application_irq_handler+0xaa>
   17380:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
   17384:	429a      	cmp	r2, r3
   17386:	d036      	beq.n	173f6 <bsd_os_application_irq_handler+0xbe>
   17388:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
   1738c:	429a      	cmp	r2, r3
   1738e:	d034      	beq.n	173fa <bsd_os_application_irq_handler+0xc2>
   17390:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
   17394:	429a      	cmp	r2, r3
   17396:	d032      	beq.n	173fe <bsd_os_application_irq_handler+0xc6>
   17398:	f8b5 2070 	ldrh.w	r2, [r5, #112]	; 0x70
   1739c:	429a      	cmp	r2, r3
   1739e:	d030      	beq.n	17402 <bsd_os_application_irq_handler+0xca>
   173a0:	f8b5 2080 	ldrh.w	r2, [r5, #128]	; 0x80
   173a4:	429a      	cmp	r2, r3
   173a6:	d02e      	beq.n	17406 <bsd_os_application_irq_handler+0xce>
   173a8:	f8b5 2090 	ldrh.w	r2, [r5, #144]	; 0x90
   173ac:	429a      	cmp	r2, r3
   173ae:	bf08      	it	eq
   173b0:	2309      	moveq	r3, #9
   173b2:	d1cf      	bne.n	17354 <bsd_os_application_irq_handler+0x1c>
   173b4:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   173b8:	685a      	ldr	r2, [r3, #4]
   173ba:	68d9      	ldr	r1, [r3, #12]
   173bc:	4790      	blx	r2
   173be:	b990      	cbnz	r0, 173e6 <bsd_os_application_irq_handler+0xae>
   173c0:	2201      	movs	r2, #1
   173c2:	6820      	ldr	r0, [r4, #0]
   173c4:	f804 2c04 	strb.w	r2, [r4, #-4]
   173c8:	68fb      	ldr	r3, [r7, #12]
   173ca:	3408      	adds	r4, #8
   173cc:	4798      	blx	r3
   173ce:	42b4      	cmp	r4, r6
   173d0:	d1c3      	bne.n	1735a <bsd_os_application_irq_handler+0x22>
   173d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   173d6:	2300      	movs	r3, #0
   173d8:	e7ec      	b.n	173b4 <bsd_os_application_irq_handler+0x7c>
   173da:	2301      	movs	r3, #1
   173dc:	e7ea      	b.n	173b4 <bsd_os_application_irq_handler+0x7c>
   173de:	2302      	movs	r3, #2
   173e0:	e7e8      	b.n	173b4 <bsd_os_application_irq_handler+0x7c>
   173e2:	2303      	movs	r3, #3
   173e4:	e7e6      	b.n	173b4 <bsd_os_application_irq_handler+0x7c>
   173e6:	2802      	cmp	r0, #2
   173e8:	bf0a      	itet	eq
   173ea:	2304      	moveq	r3, #4
   173ec:	f804 8c04 	strbne.w	r8, [r4, #-4]
   173f0:	f804 3c04 	strbeq.w	r3, [r4, #-4]
   173f4:	e7ae      	b.n	17354 <bsd_os_application_irq_handler+0x1c>
   173f6:	2304      	movs	r3, #4
   173f8:	e7dc      	b.n	173b4 <bsd_os_application_irq_handler+0x7c>
   173fa:	2305      	movs	r3, #5
   173fc:	e7da      	b.n	173b4 <bsd_os_application_irq_handler+0x7c>
   173fe:	2306      	movs	r3, #6
   17400:	e7d8      	b.n	173b4 <bsd_os_application_irq_handler+0x7c>
   17402:	2307      	movs	r3, #7
   17404:	e7d6      	b.n	173b4 <bsd_os_application_irq_handler+0x7c>
   17406:	2308      	movs	r3, #8
   17408:	e7d4      	b.n	173b4 <bsd_os_application_irq_handler+0x7c>
   1740a:	bf00      	nop
   1740c:	20020adc 	.word	0x20020adc
   17410:	200209a0 	.word	0x200209a0
   17414:	20020a40 	.word	0x20020a40

00017418 <rpc_framework_init>:
   17418:	b508      	push	{r3, lr}
   1741a:	22a0      	movs	r2, #160	; 0xa0
   1741c:	2100      	movs	r1, #0
   1741e:	4802      	ldr	r0, [pc, #8]	; (17428 <rpc_framework_init+0x10>)
   17420:	f004 fd22 	bl	1be68 <memset>
   17424:	2000      	movs	r0, #0
   17426:	bd08      	pop	{r3, pc}
   17428:	200209a0 	.word	0x200209a0

0001742c <rpc_client_register>:
   1742c:	8803      	ldrh	r3, [r0, #0]
   1742e:	2b00      	cmp	r3, #0
   17430:	d045      	beq.n	174be <rpc_client_register+0x92>
   17432:	6842      	ldr	r2, [r0, #4]
   17434:	4601      	mov	r1, r0
   17436:	2a00      	cmp	r2, #0
   17438:	d050      	beq.n	174dc <rpc_client_register+0xb0>
   1743a:	4a30      	ldr	r2, [pc, #192]	; (174fc <rpc_client_register+0xd0>)
   1743c:	8810      	ldrh	r0, [r2, #0]
   1743e:	4283      	cmp	r3, r0
   17440:	d03d      	beq.n	174be <rpc_client_register+0x92>
   17442:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17446:	8a14      	ldrh	r4, [r2, #16]
   17448:	42a3      	cmp	r3, r4
   1744a:	d035      	beq.n	174b8 <rpc_client_register+0x8c>
   1744c:	8c15      	ldrh	r5, [r2, #32]
   1744e:	42ab      	cmp	r3, r5
   17450:	d032      	beq.n	174b8 <rpc_client_register+0x8c>
   17452:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   17454:	42b3      	cmp	r3, r6
   17456:	d02f      	beq.n	174b8 <rpc_client_register+0x8c>
   17458:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   1745c:	42bb      	cmp	r3, r7
   1745e:	d02b      	beq.n	174b8 <rpc_client_register+0x8c>
   17460:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   17464:	4563      	cmp	r3, ip
   17466:	d027      	beq.n	174b8 <rpc_client_register+0x8c>
   17468:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   1746c:	4573      	cmp	r3, lr
   1746e:	d023      	beq.n	174b8 <rpc_client_register+0x8c>
   17470:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   17474:	4543      	cmp	r3, r8
   17476:	d01f      	beq.n	174b8 <rpc_client_register+0x8c>
   17478:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   1747c:	454b      	cmp	r3, r9
   1747e:	d01b      	beq.n	174b8 <rpc_client_register+0x8c>
   17480:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   17484:	4553      	cmp	r3, sl
   17486:	d017      	beq.n	174b8 <rpc_client_register+0x8c>
   17488:	b1e0      	cbz	r0, 174c4 <rpc_client_register+0x98>
   1748a:	b35c      	cbz	r4, 174e4 <rpc_client_register+0xb8>
   1748c:	b365      	cbz	r5, 174e8 <rpc_client_register+0xbc>
   1748e:	b36e      	cbz	r6, 174ec <rpc_client_register+0xc0>
   17490:	b377      	cbz	r7, 174f0 <rpc_client_register+0xc4>
   17492:	f1bc 0f00 	cmp.w	ip, #0
   17496:	d02d      	beq.n	174f4 <rpc_client_register+0xc8>
   17498:	f1be 0f00 	cmp.w	lr, #0
   1749c:	d020      	beq.n	174e0 <rpc_client_register+0xb4>
   1749e:	f1b8 0f00 	cmp.w	r8, #0
   174a2:	d029      	beq.n	174f8 <rpc_client_register+0xcc>
   174a4:	f1b9 0f00 	cmp.w	r9, #0
   174a8:	d00b      	beq.n	174c2 <rpc_client_register+0x96>
   174aa:	2009      	movs	r0, #9
   174ac:	f1ba 0f00 	cmp.w	sl, #0
   174b0:	d008      	beq.n	174c4 <rpc_client_register+0x98>
   174b2:	2004      	movs	r0, #4
   174b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   174b8:	2007      	movs	r0, #7
   174ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   174be:	2007      	movs	r0, #7
   174c0:	4770      	bx	lr
   174c2:	2008      	movs	r0, #8
   174c4:	0100      	lsls	r0, r0, #4
   174c6:	5213      	strh	r3, [r2, r0]
   174c8:	684b      	ldr	r3, [r1, #4]
   174ca:	4402      	add	r2, r0
   174cc:	6053      	str	r3, [r2, #4]
   174ce:	688b      	ldr	r3, [r1, #8]
   174d0:	2000      	movs	r0, #0
   174d2:	6093      	str	r3, [r2, #8]
   174d4:	68cb      	ldr	r3, [r1, #12]
   174d6:	60d3      	str	r3, [r2, #12]
   174d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   174dc:	200e      	movs	r0, #14
   174de:	4770      	bx	lr
   174e0:	2006      	movs	r0, #6
   174e2:	e7ef      	b.n	174c4 <rpc_client_register+0x98>
   174e4:	2001      	movs	r0, #1
   174e6:	e7ed      	b.n	174c4 <rpc_client_register+0x98>
   174e8:	2002      	movs	r0, #2
   174ea:	e7eb      	b.n	174c4 <rpc_client_register+0x98>
   174ec:	2003      	movs	r0, #3
   174ee:	e7e9      	b.n	174c4 <rpc_client_register+0x98>
   174f0:	2004      	movs	r0, #4
   174f2:	e7e7      	b.n	174c4 <rpc_client_register+0x98>
   174f4:	2005      	movs	r0, #5
   174f6:	e7e5      	b.n	174c4 <rpc_client_register+0x98>
   174f8:	2007      	movs	r0, #7
   174fa:	e7e3      	b.n	174c4 <rpc_client_register+0x98>
   174fc:	200209a0 	.word	0x200209a0

00017500 <rpc_transport_input>:
   17500:	b538      	push	{r3, r4, r5, lr}
   17502:	4a82      	ldr	r2, [pc, #520]	; (1770c <rpc_transport_input+0x20c>)
   17504:	680b      	ldr	r3, [r1, #0]
   17506:	8810      	ldrh	r0, [r2, #0]
   17508:	b29b      	uxth	r3, r3
   1750a:	4298      	cmp	r0, r3
   1750c:	d027      	beq.n	1755e <rpc_transport_input+0x5e>
   1750e:	8a10      	ldrh	r0, [r2, #16]
   17510:	4298      	cmp	r0, r3
   17512:	d024      	beq.n	1755e <rpc_transport_input+0x5e>
   17514:	8c10      	ldrh	r0, [r2, #32]
   17516:	4298      	cmp	r0, r3
   17518:	d021      	beq.n	1755e <rpc_transport_input+0x5e>
   1751a:	8e10      	ldrh	r0, [r2, #48]	; 0x30
   1751c:	4298      	cmp	r0, r3
   1751e:	d01e      	beq.n	1755e <rpc_transport_input+0x5e>
   17520:	f8b2 0040 	ldrh.w	r0, [r2, #64]	; 0x40
   17524:	4298      	cmp	r0, r3
   17526:	d01a      	beq.n	1755e <rpc_transport_input+0x5e>
   17528:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
   1752c:	4298      	cmp	r0, r3
   1752e:	d016      	beq.n	1755e <rpc_transport_input+0x5e>
   17530:	f8b2 0060 	ldrh.w	r0, [r2, #96]	; 0x60
   17534:	4298      	cmp	r0, r3
   17536:	d012      	beq.n	1755e <rpc_transport_input+0x5e>
   17538:	f8b2 0070 	ldrh.w	r0, [r2, #112]	; 0x70
   1753c:	4298      	cmp	r0, r3
   1753e:	d00e      	beq.n	1755e <rpc_transport_input+0x5e>
   17540:	f8b2 0080 	ldrh.w	r0, [r2, #128]	; 0x80
   17544:	4298      	cmp	r0, r3
   17546:	d00a      	beq.n	1755e <rpc_transport_input+0x5e>
   17548:	f8b2 2090 	ldrh.w	r2, [r2, #144]	; 0x90
   1754c:	429a      	cmp	r2, r3
   1754e:	d006      	beq.n	1755e <rpc_transport_input+0x5e>
   17550:	6888      	ldr	r0, [r1, #8]
   17552:	b118      	cbz	r0, 1755c <rpc_transport_input+0x5c>
   17554:	4b6e      	ldr	r3, [pc, #440]	; (17710 <rpc_transport_input+0x210>)
   17556:	691b      	ldr	r3, [r3, #16]
   17558:	4798      	blx	r3
   1755a:	2000      	movs	r0, #0
   1755c:	bd38      	pop	{r3, r4, r5, pc}
   1755e:	6888      	ldr	r0, [r1, #8]
   17560:	2800      	cmp	r0, #0
   17562:	f000 8098 	beq.w	17696 <rpc_transport_input+0x196>
   17566:	4a6b      	ldr	r2, [pc, #428]	; (17714 <rpc_transport_input+0x214>)
   17568:	6814      	ldr	r4, [r2, #0]
   1756a:	2c00      	cmp	r4, #0
   1756c:	d03c      	beq.n	175e8 <rpc_transport_input+0xe8>
   1756e:	6894      	ldr	r4, [r2, #8]
   17570:	2c00      	cmp	r4, #0
   17572:	f000 809a 	beq.w	176aa <rpc_transport_input+0x1aa>
   17576:	6914      	ldr	r4, [r2, #16]
   17578:	2c00      	cmp	r4, #0
   1757a:	f000 809a 	beq.w	176b2 <rpc_transport_input+0x1b2>
   1757e:	6994      	ldr	r4, [r2, #24]
   17580:	2c00      	cmp	r4, #0
   17582:	f000 809a 	beq.w	176ba <rpc_transport_input+0x1ba>
   17586:	6a14      	ldr	r4, [r2, #32]
   17588:	2c00      	cmp	r4, #0
   1758a:	f000 809a 	beq.w	176c2 <rpc_transport_input+0x1c2>
   1758e:	6a94      	ldr	r4, [r2, #40]	; 0x28
   17590:	2c00      	cmp	r4, #0
   17592:	f000 8084 	beq.w	1769e <rpc_transport_input+0x19e>
   17596:	6b14      	ldr	r4, [r2, #48]	; 0x30
   17598:	2c00      	cmp	r4, #0
   1759a:	f000 8098 	beq.w	176ce <rpc_transport_input+0x1ce>
   1759e:	6b94      	ldr	r4, [r2, #56]	; 0x38
   175a0:	2c00      	cmp	r4, #0
   175a2:	f000 8096 	beq.w	176d2 <rpc_transport_input+0x1d2>
   175a6:	6c14      	ldr	r4, [r2, #64]	; 0x40
   175a8:	2c00      	cmp	r4, #0
   175aa:	f000 8096 	beq.w	176da <rpc_transport_input+0x1da>
   175ae:	6c94      	ldr	r4, [r2, #72]	; 0x48
   175b0:	2c00      	cmp	r4, #0
   175b2:	f000 8096 	beq.w	176e2 <rpc_transport_input+0x1e2>
   175b6:	6d14      	ldr	r4, [r2, #80]	; 0x50
   175b8:	2c00      	cmp	r4, #0
   175ba:	f000 8096 	beq.w	176ea <rpc_transport_input+0x1ea>
   175be:	6d94      	ldr	r4, [r2, #88]	; 0x58
   175c0:	2c00      	cmp	r4, #0
   175c2:	f000 8098 	beq.w	176f6 <rpc_transport_input+0x1f6>
   175c6:	6e14      	ldr	r4, [r2, #96]	; 0x60
   175c8:	2c00      	cmp	r4, #0
   175ca:	f000 8098 	beq.w	176fe <rpc_transport_input+0x1fe>
   175ce:	6e94      	ldr	r4, [r2, #104]	; 0x68
   175d0:	2c00      	cmp	r4, #0
   175d2:	f000 8096 	beq.w	17702 <rpc_transport_input+0x202>
   175d6:	6f14      	ldr	r4, [r2, #112]	; 0x70
   175d8:	2c00      	cmp	r4, #0
   175da:	f000 8094 	beq.w	17706 <rpc_transport_input+0x206>
   175de:	6f94      	ldr	r4, [r2, #120]	; 0x78
   175e0:	b10c      	cbz	r4, 175e6 <rpc_transport_input+0xe6>
   175e2:	2001      	movs	r0, #1
   175e4:	bd38      	pop	{r3, r4, r5, pc}
   175e6:	240f      	movs	r4, #15
   175e8:	eb02 05c4 	add.w	r5, r2, r4, lsl #3
   175ec:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
   175f0:	80ab      	strh	r3, [r5, #4]
   175f2:	4b49      	ldr	r3, [pc, #292]	; (17718 <rpc_transport_input+0x218>)
   175f4:	781a      	ldrb	r2, [r3, #0]
   175f6:	2a01      	cmp	r2, #1
   175f8:	d053      	beq.n	176a2 <rpc_transport_input+0x1a2>
   175fa:	7a1a      	ldrb	r2, [r3, #8]
   175fc:	2a01      	cmp	r2, #1
   175fe:	d041      	beq.n	17684 <rpc_transport_input+0x184>
   17600:	7c1a      	ldrb	r2, [r3, #16]
   17602:	2a01      	cmp	r2, #1
   17604:	d04f      	beq.n	176a6 <rpc_transport_input+0x1a6>
   17606:	7e1a      	ldrb	r2, [r3, #24]
   17608:	2a01      	cmp	r2, #1
   1760a:	d050      	beq.n	176ae <rpc_transport_input+0x1ae>
   1760c:	f893 2020 	ldrb.w	r2, [r3, #32]
   17610:	2a01      	cmp	r2, #1
   17612:	d050      	beq.n	176b6 <rpc_transport_input+0x1b6>
   17614:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   17618:	2a01      	cmp	r2, #1
   1761a:	d050      	beq.n	176be <rpc_transport_input+0x1be>
   1761c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   17620:	2a01      	cmp	r2, #1
   17622:	d03a      	beq.n	1769a <rpc_transport_input+0x19a>
   17624:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   17628:	2a01      	cmp	r2, #1
   1762a:	d04c      	beq.n	176c6 <rpc_transport_input+0x1c6>
   1762c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   17630:	2a01      	cmp	r2, #1
   17632:	d04a      	beq.n	176ca <rpc_transport_input+0x1ca>
   17634:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   17638:	2a01      	cmp	r2, #1
   1763a:	d04c      	beq.n	176d6 <rpc_transport_input+0x1d6>
   1763c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   17640:	2a01      	cmp	r2, #1
   17642:	d04c      	beq.n	176de <rpc_transport_input+0x1de>
   17644:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   17648:	2a01      	cmp	r2, #1
   1764a:	d04c      	beq.n	176e6 <rpc_transport_input+0x1e6>
   1764c:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   17650:	2a01      	cmp	r2, #1
   17652:	d04c      	beq.n	176ee <rpc_transport_input+0x1ee>
   17654:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   17658:	2a01      	cmp	r2, #1
   1765a:	d04a      	beq.n	176f2 <rpc_transport_input+0x1f2>
   1765c:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   17660:	2a01      	cmp	r2, #1
   17662:	d04a      	beq.n	176fa <rpc_transport_input+0x1fa>
   17664:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   17668:	2a01      	cmp	r2, #1
   1766a:	d00a      	beq.n	17682 <rpc_transport_input+0x182>
   1766c:	2c10      	cmp	r4, #16
   1766e:	d0b8      	beq.n	175e2 <rpc_transport_input+0xe2>
   17670:	2200      	movs	r2, #0
   17672:	4b28      	ldr	r3, [pc, #160]	; (17714 <rpc_transport_input+0x214>)
   17674:	2001      	movs	r0, #1
   17676:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
   1767a:	808a      	strh	r2, [r1, #4]
   1767c:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
   17680:	bd38      	pop	{r3, r4, r5, pc}
   17682:	220f      	movs	r2, #15
   17684:	2402      	movs	r4, #2
   17686:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
   1768a:	f803 4032 	strb.w	r4, [r3, r2, lsl #3]
   1768e:	6041      	str	r1, [r0, #4]
   17690:	f7f8 fa40 	bl	fb14 <bsd_os_application_irq_set>
   17694:	e7a5      	b.n	175e2 <rpc_transport_input+0xe2>
   17696:	2410      	movs	r4, #16
   17698:	e7ab      	b.n	175f2 <rpc_transport_input+0xf2>
   1769a:	2206      	movs	r2, #6
   1769c:	e7f2      	b.n	17684 <rpc_transport_input+0x184>
   1769e:	2405      	movs	r4, #5
   176a0:	e7a2      	b.n	175e8 <rpc_transport_input+0xe8>
   176a2:	2200      	movs	r2, #0
   176a4:	e7ee      	b.n	17684 <rpc_transport_input+0x184>
   176a6:	2202      	movs	r2, #2
   176a8:	e7ec      	b.n	17684 <rpc_transport_input+0x184>
   176aa:	2401      	movs	r4, #1
   176ac:	e79c      	b.n	175e8 <rpc_transport_input+0xe8>
   176ae:	2203      	movs	r2, #3
   176b0:	e7e8      	b.n	17684 <rpc_transport_input+0x184>
   176b2:	2402      	movs	r4, #2
   176b4:	e798      	b.n	175e8 <rpc_transport_input+0xe8>
   176b6:	2204      	movs	r2, #4
   176b8:	e7e4      	b.n	17684 <rpc_transport_input+0x184>
   176ba:	2403      	movs	r4, #3
   176bc:	e794      	b.n	175e8 <rpc_transport_input+0xe8>
   176be:	2205      	movs	r2, #5
   176c0:	e7e0      	b.n	17684 <rpc_transport_input+0x184>
   176c2:	2404      	movs	r4, #4
   176c4:	e790      	b.n	175e8 <rpc_transport_input+0xe8>
   176c6:	2207      	movs	r2, #7
   176c8:	e7dc      	b.n	17684 <rpc_transport_input+0x184>
   176ca:	2208      	movs	r2, #8
   176cc:	e7da      	b.n	17684 <rpc_transport_input+0x184>
   176ce:	2406      	movs	r4, #6
   176d0:	e78a      	b.n	175e8 <rpc_transport_input+0xe8>
   176d2:	2407      	movs	r4, #7
   176d4:	e788      	b.n	175e8 <rpc_transport_input+0xe8>
   176d6:	2209      	movs	r2, #9
   176d8:	e7d4      	b.n	17684 <rpc_transport_input+0x184>
   176da:	2408      	movs	r4, #8
   176dc:	e784      	b.n	175e8 <rpc_transport_input+0xe8>
   176de:	220a      	movs	r2, #10
   176e0:	e7d0      	b.n	17684 <rpc_transport_input+0x184>
   176e2:	2409      	movs	r4, #9
   176e4:	e780      	b.n	175e8 <rpc_transport_input+0xe8>
   176e6:	220b      	movs	r2, #11
   176e8:	e7cc      	b.n	17684 <rpc_transport_input+0x184>
   176ea:	240a      	movs	r4, #10
   176ec:	e77c      	b.n	175e8 <rpc_transport_input+0xe8>
   176ee:	220c      	movs	r2, #12
   176f0:	e7c8      	b.n	17684 <rpc_transport_input+0x184>
   176f2:	220d      	movs	r2, #13
   176f4:	e7c6      	b.n	17684 <rpc_transport_input+0x184>
   176f6:	240b      	movs	r4, #11
   176f8:	e776      	b.n	175e8 <rpc_transport_input+0xe8>
   176fa:	220e      	movs	r2, #14
   176fc:	e7c2      	b.n	17684 <rpc_transport_input+0x184>
   176fe:	240c      	movs	r4, #12
   17700:	e772      	b.n	175e8 <rpc_transport_input+0xe8>
   17702:	240d      	movs	r4, #13
   17704:	e770      	b.n	175e8 <rpc_transport_input+0xe8>
   17706:	240e      	movs	r4, #14
   17708:	e76e      	b.n	175e8 <rpc_transport_input+0xe8>
   1770a:	bf00      	nop
   1770c:	200209a0 	.word	0x200209a0
   17710:	20020a40 	.word	0x20020a40
   17714:	20020a58 	.word	0x20020a58
   17718:	20020ad8 	.word	0x20020ad8

0001771c <rpc_transport_register>:
   1771c:	b4f0      	push	{r4, r5, r6, r7}
   1771e:	2900      	cmp	r1, #0
   17720:	d052      	beq.n	177c8 <rpc_transport_register+0xac>
   17722:	2800      	cmp	r0, #0
   17724:	d050      	beq.n	177c8 <rpc_transport_register+0xac>
   17726:	6883      	ldr	r3, [r0, #8]
   17728:	2b00      	cmp	r3, #0
   1772a:	d04d      	beq.n	177c8 <rpc_transport_register+0xac>
   1772c:	6903      	ldr	r3, [r0, #16]
   1772e:	2b00      	cmp	r3, #0
   17730:	d04a      	beq.n	177c8 <rpc_transport_register+0xac>
   17732:	6843      	ldr	r3, [r0, #4]
   17734:	2b00      	cmp	r3, #0
   17736:	d047      	beq.n	177c8 <rpc_transport_register+0xac>
   17738:	68c3      	ldr	r3, [r0, #12]
   1773a:	2b00      	cmp	r3, #0
   1773c:	d044      	beq.n	177c8 <rpc_transport_register+0xac>
   1773e:	6803      	ldr	r3, [r0, #0]
   17740:	2b00      	cmp	r3, #0
   17742:	d041      	beq.n	177c8 <rpc_transport_register+0xac>
   17744:	6943      	ldr	r3, [r0, #20]
   17746:	2b00      	cmp	r3, #0
   17748:	d03e      	beq.n	177c8 <rpc_transport_register+0xac>
   1774a:	2601      	movs	r6, #1
   1774c:	2500      	movs	r5, #0
   1774e:	4604      	mov	r4, r0
   17750:	460f      	mov	r7, r1
   17752:	4a1f      	ldr	r2, [pc, #124]	; (177d0 <rpc_transport_register+0xb4>)
   17754:	4b1f      	ldr	r3, [pc, #124]	; (177d4 <rpc_transport_register+0xb8>)
   17756:	f8df c080 	ldr.w	ip, [pc, #128]	; 177d8 <rpc_transport_register+0xbc>
   1775a:	7416      	strb	r6, [r2, #16]
   1775c:	7616      	strb	r6, [r2, #24]
   1775e:	f882 6020 	strb.w	r6, [r2, #32]
   17762:	f882 6028 	strb.w	r6, [r2, #40]	; 0x28
   17766:	f882 6030 	strb.w	r6, [r2, #48]	; 0x30
   1776a:	f882 6038 	strb.w	r6, [r2, #56]	; 0x38
   1776e:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
   17772:	f882 6048 	strb.w	r6, [r2, #72]	; 0x48
   17776:	f882 6050 	strb.w	r6, [r2, #80]	; 0x50
   1777a:	f882 6058 	strb.w	r6, [r2, #88]	; 0x58
   1777e:	f882 6060 	strb.w	r6, [r2, #96]	; 0x60
   17782:	f882 6068 	strb.w	r6, [r2, #104]	; 0x68
   17786:	f882 6070 	strb.w	r6, [r2, #112]	; 0x70
   1778a:	f882 6078 	strb.w	r6, [r2, #120]	; 0x78
   1778e:	611d      	str	r5, [r3, #16]
   17790:	619d      	str	r5, [r3, #24]
   17792:	621d      	str	r5, [r3, #32]
   17794:	629d      	str	r5, [r3, #40]	; 0x28
   17796:	631d      	str	r5, [r3, #48]	; 0x30
   17798:	639d      	str	r5, [r3, #56]	; 0x38
   1779a:	641d      	str	r5, [r3, #64]	; 0x40
   1779c:	649d      	str	r5, [r3, #72]	; 0x48
   1779e:	651d      	str	r5, [r3, #80]	; 0x50
   177a0:	659d      	str	r5, [r3, #88]	; 0x58
   177a2:	661d      	str	r5, [r3, #96]	; 0x60
   177a4:	669d      	str	r5, [r3, #104]	; 0x68
   177a6:	671d      	str	r5, [r3, #112]	; 0x70
   177a8:	679d      	str	r5, [r3, #120]	; 0x78
   177aa:	7016      	strb	r6, [r2, #0]
   177ac:	7216      	strb	r6, [r2, #8]
   177ae:	601d      	str	r5, [r3, #0]
   177b0:	609d      	str	r5, [r3, #8]
   177b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   177b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   177b8:	e894 0003 	ldmia.w	r4, {r0, r1}
   177bc:	e88c 0003 	stmia.w	ip, {r0, r1}
   177c0:	603e      	str	r6, [r7, #0]
   177c2:	4628      	mov	r0, r5
   177c4:	bcf0      	pop	{r4, r5, r6, r7}
   177c6:	4770      	bx	lr
   177c8:	250e      	movs	r5, #14
   177ca:	4628      	mov	r0, r5
   177cc:	bcf0      	pop	{r4, r5, r6, r7}
   177ce:	4770      	bx	lr
   177d0:	20020ad8 	.word	0x20020ad8
   177d4:	20020a58 	.word	0x20020a58
   177d8:	20020a40 	.word	0x20020a40

000177dc <rpc_transport_unregister>:
   177dc:	2800      	cmp	r0, #0
   177de:	d03a      	beq.n	17856 <rpc_transport_unregister+0x7a>
   177e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   177e4:	4680      	mov	r8, r0
   177e6:	4c1d      	ldr	r4, [pc, #116]	; (1785c <rpc_transport_unregister+0x80>)
   177e8:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
   177ec:	68a3      	ldr	r3, [r4, #8]
   177ee:	3410      	adds	r4, #16
   177f0:	b103      	cbz	r3, 177f4 <rpc_transport_unregister+0x18>
   177f2:	4798      	blx	r3
   177f4:	42ac      	cmp	r4, r5
   177f6:	d1f9      	bne.n	177ec <rpc_transport_unregister+0x10>
   177f8:	f04f 0901 	mov.w	r9, #1
   177fc:	2600      	movs	r6, #0
   177fe:	4c18      	ldr	r4, [pc, #96]	; (17860 <rpc_transport_unregister+0x84>)
   17800:	4d18      	ldr	r5, [pc, #96]	; (17864 <rpc_transport_unregister+0x88>)
   17802:	f8df a064 	ldr.w	sl, [pc, #100]	; 17868 <rpc_transport_unregister+0x8c>
   17806:	f104 0780 	add.w	r7, r4, #128	; 0x80
   1780a:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1780e:	2b01      	cmp	r3, #1
   17810:	d005      	beq.n	1781e <rpc_transport_unregister+0x42>
   17812:	f8da 300c 	ldr.w	r3, [sl, #12]
   17816:	6820      	ldr	r0, [r4, #0]
   17818:	4798      	blx	r3
   1781a:	f804 9c04 	strb.w	r9, [r4, #-4]
   1781e:	f855 0c04 	ldr.w	r0, [r5, #-4]
   17822:	3408      	adds	r4, #8
   17824:	b128      	cbz	r0, 17832 <rpc_transport_unregister+0x56>
   17826:	f8da 3010 	ldr.w	r3, [sl, #16]
   1782a:	4798      	blx	r3
   1782c:	802e      	strh	r6, [r5, #0]
   1782e:	f845 6c04 	str.w	r6, [r5, #-4]
   17832:	42bc      	cmp	r4, r7
   17834:	f105 0508 	add.w	r5, r5, #8
   17838:	d1e7      	bne.n	1780a <rpc_transport_unregister+0x2e>
   1783a:	f8d8 0000 	ldr.w	r0, [r8]
   1783e:	2218      	movs	r2, #24
   17840:	3801      	subs	r0, #1
   17842:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17846:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
   1784a:	2100      	movs	r1, #0
   1784c:	f004 fb0c 	bl	1be68 <memset>
   17850:	2000      	movs	r0, #0
   17852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17856:	200e      	movs	r0, #14
   17858:	4770      	bx	lr
   1785a:	bf00      	nop
   1785c:	200209a0 	.word	0x200209a0
   17860:	20020adc 	.word	0x20020adc
   17864:	20020a5c 	.word	0x20020a5c
   17868:	20020a40 	.word	0x20020a40

0001786c <rpc_message_send>:
   1786c:	b168      	cbz	r0, 1788a <rpc_message_send+0x1e>
   1786e:	b171      	cbz	r1, 1788e <rpc_message_send+0x22>
   17870:	4a09      	ldr	r2, [pc, #36]	; (17898 <rpc_message_send+0x2c>)
   17872:	6853      	ldr	r3, [r2, #4]
   17874:	b16b      	cbz	r3, 17892 <rpc_message_send+0x26>
   17876:	684b      	ldr	r3, [r1, #4]
   17878:	8008      	strh	r0, [r1, #0]
   1787a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1787e:	f043 0302 	orr.w	r3, r3, #2
   17882:	6812      	ldr	r2, [r2, #0]
   17884:	604b      	str	r3, [r1, #4]
   17886:	4608      	mov	r0, r1
   17888:	4710      	bx	r2
   1788a:	2007      	movs	r0, #7
   1788c:	4770      	bx	lr
   1788e:	200e      	movs	r0, #14
   17890:	4770      	bx	lr
   17892:	2008      	movs	r0, #8
   17894:	4770      	bx	lr
   17896:	bf00      	nop
   17898:	20020a40 	.word	0x20020a40

0001789c <rpc_message_alloc>:
   1789c:	b35a      	cbz	r2, 178f6 <rpc_message_alloc+0x5a>
   1789e:	b330      	cbz	r0, 178ee <rpc_message_alloc+0x52>
   178a0:	2300      	movs	r3, #0
   178a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   178a6:	4f15      	ldr	r7, [pc, #84]	; (178fc <rpc_message_alloc+0x60>)
   178a8:	6013      	str	r3, [r2, #0]
   178aa:	687b      	ldr	r3, [r7, #4]
   178ac:	b30b      	cbz	r3, 178f2 <rpc_message_alloc+0x56>
   178ae:	4615      	mov	r5, r2
   178b0:	460c      	mov	r4, r1
   178b2:	4606      	mov	r6, r0
   178b4:	b959      	cbnz	r1, 178ce <rpc_message_alloc+0x32>
   178b6:	4798      	blx	r3
   178b8:	4603      	mov	r3, r0
   178ba:	b1a8      	cbz	r0, 178e8 <rpc_message_alloc+0x4c>
   178bc:	46a0      	mov	r8, r4
   178be:	60dc      	str	r4, [r3, #12]
   178c0:	f8c3 8008 	str.w	r8, [r3, #8]
   178c4:	801e      	strh	r6, [r3, #0]
   178c6:	602b      	str	r3, [r5, #0]
   178c8:	2000      	movs	r0, #0
   178ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   178ce:	68bb      	ldr	r3, [r7, #8]
   178d0:	4608      	mov	r0, r1
   178d2:	4798      	blx	r3
   178d4:	4680      	mov	r8, r0
   178d6:	b138      	cbz	r0, 178e8 <rpc_message_alloc+0x4c>
   178d8:	687b      	ldr	r3, [r7, #4]
   178da:	4798      	blx	r3
   178dc:	4603      	mov	r3, r0
   178de:	2800      	cmp	r0, #0
   178e0:	d1ed      	bne.n	178be <rpc_message_alloc+0x22>
   178e2:	693b      	ldr	r3, [r7, #16]
   178e4:	4640      	mov	r0, r8
   178e6:	4798      	blx	r3
   178e8:	2004      	movs	r0, #4
   178ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   178ee:	2007      	movs	r0, #7
   178f0:	4770      	bx	lr
   178f2:	2008      	movs	r0, #8
   178f4:	e7f9      	b.n	178ea <rpc_message_alloc+0x4e>
   178f6:	200e      	movs	r0, #14
   178f8:	4770      	bx	lr
   178fa:	bf00      	nop
   178fc:	20020a40 	.word	0x20020a40

00017900 <rpc_message_free>:
   17900:	2800      	cmp	r0, #0
   17902:	f000 808c 	beq.w	17a1e <rpc_message_free+0x11e>
   17906:	2900      	cmp	r1, #0
   17908:	f000 80e9 	beq.w	17ade <rpc_message_free+0x1de>
   1790c:	b538      	push	{r3, r4, r5, lr}
   1790e:	4a83      	ldr	r2, [pc, #524]	; (17b1c <rpc_message_free+0x21c>)
   17910:	6853      	ldr	r3, [r2, #4]
   17912:	2b00      	cmp	r3, #0
   17914:	f000 8085 	beq.w	17a22 <rpc_message_free+0x122>
   17918:	4c81      	ldr	r4, [pc, #516]	; (17b20 <rpc_message_free+0x220>)
   1791a:	4608      	mov	r0, r1
   1791c:	6863      	ldr	r3, [r4, #4]
   1791e:	4299      	cmp	r1, r3
   17920:	f000 8085 	beq.w	17a2e <rpc_message_free+0x12e>
   17924:	68e3      	ldr	r3, [r4, #12]
   17926:	4298      	cmp	r0, r3
   17928:	f000 808e 	beq.w	17a48 <rpc_message_free+0x148>
   1792c:	6963      	ldr	r3, [r4, #20]
   1792e:	4298      	cmp	r0, r3
   17930:	f000 8090 	beq.w	17a54 <rpc_message_free+0x154>
   17934:	69e3      	ldr	r3, [r4, #28]
   17936:	4298      	cmp	r0, r3
   17938:	f000 8092 	beq.w	17a60 <rpc_message_free+0x160>
   1793c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1793e:	4298      	cmp	r0, r3
   17940:	f000 8095 	beq.w	17a6e <rpc_message_free+0x16e>
   17944:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   17946:	4298      	cmp	r0, r3
   17948:	f000 8098 	beq.w	17a7c <rpc_message_free+0x17c>
   1794c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1794e:	4298      	cmp	r0, r3
   17950:	f000 809b 	beq.w	17a8a <rpc_message_free+0x18a>
   17954:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   17956:	4298      	cmp	r0, r3
   17958:	f000 809e 	beq.w	17a98 <rpc_message_free+0x198>
   1795c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1795e:	4298      	cmp	r0, r3
   17960:	f000 80a1 	beq.w	17aa6 <rpc_message_free+0x1a6>
   17964:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   17966:	4298      	cmp	r0, r3
   17968:	f000 80a4 	beq.w	17ab4 <rpc_message_free+0x1b4>
   1796c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1796e:	4298      	cmp	r0, r3
   17970:	f000 80a7 	beq.w	17ac2 <rpc_message_free+0x1c2>
   17974:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   17976:	4298      	cmp	r0, r3
   17978:	f000 80aa 	beq.w	17ad0 <rpc_message_free+0x1d0>
   1797c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1797e:	4298      	cmp	r0, r3
   17980:	f000 80af 	beq.w	17ae2 <rpc_message_free+0x1e2>
   17984:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   17986:	4298      	cmp	r0, r3
   17988:	f000 80b2 	beq.w	17af0 <rpc_message_free+0x1f0>
   1798c:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1798e:	4298      	cmp	r0, r3
   17990:	f000 80b5 	beq.w	17afe <rpc_message_free+0x1fe>
   17994:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   17996:	4283      	cmp	r3, r0
   17998:	f000 80b8 	beq.w	17b0c <rpc_message_free+0x20c>
   1799c:	68d3      	ldr	r3, [r2, #12]
   1799e:	4798      	blx	r3
   179a0:	7823      	ldrb	r3, [r4, #0]
   179a2:	2b04      	cmp	r3, #4
   179a4:	d03f      	beq.n	17a26 <rpc_message_free+0x126>
   179a6:	7a23      	ldrb	r3, [r4, #8]
   179a8:	2b04      	cmp	r3, #4
   179aa:	d03c      	beq.n	17a26 <rpc_message_free+0x126>
   179ac:	7c23      	ldrb	r3, [r4, #16]
   179ae:	2b04      	cmp	r3, #4
   179b0:	d039      	beq.n	17a26 <rpc_message_free+0x126>
   179b2:	7e23      	ldrb	r3, [r4, #24]
   179b4:	2b04      	cmp	r3, #4
   179b6:	d036      	beq.n	17a26 <rpc_message_free+0x126>
   179b8:	f894 3020 	ldrb.w	r3, [r4, #32]
   179bc:	2b04      	cmp	r3, #4
   179be:	d032      	beq.n	17a26 <rpc_message_free+0x126>
   179c0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   179c4:	2b04      	cmp	r3, #4
   179c6:	d02e      	beq.n	17a26 <rpc_message_free+0x126>
   179c8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   179cc:	2b04      	cmp	r3, #4
   179ce:	d02a      	beq.n	17a26 <rpc_message_free+0x126>
   179d0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   179d4:	2b04      	cmp	r3, #4
   179d6:	d026      	beq.n	17a26 <rpc_message_free+0x126>
   179d8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   179dc:	2b04      	cmp	r3, #4
   179de:	d022      	beq.n	17a26 <rpc_message_free+0x126>
   179e0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   179e4:	2b04      	cmp	r3, #4
   179e6:	d01e      	beq.n	17a26 <rpc_message_free+0x126>
   179e8:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   179ec:	2b04      	cmp	r3, #4
   179ee:	d01a      	beq.n	17a26 <rpc_message_free+0x126>
   179f0:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   179f4:	2b04      	cmp	r3, #4
   179f6:	d016      	beq.n	17a26 <rpc_message_free+0x126>
   179f8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   179fc:	2b04      	cmp	r3, #4
   179fe:	d012      	beq.n	17a26 <rpc_message_free+0x126>
   17a00:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   17a04:	2b04      	cmp	r3, #4
   17a06:	d00e      	beq.n	17a26 <rpc_message_free+0x126>
   17a08:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   17a0c:	2b04      	cmp	r3, #4
   17a0e:	d00a      	beq.n	17a26 <rpc_message_free+0x126>
   17a10:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   17a14:	2b04      	cmp	r3, #4
   17a16:	bf18      	it	ne
   17a18:	2000      	movne	r0, #0
   17a1a:	d004      	beq.n	17a26 <rpc_message_free+0x126>
   17a1c:	bd38      	pop	{r3, r4, r5, pc}
   17a1e:	2007      	movs	r0, #7
   17a20:	4770      	bx	lr
   17a22:	2008      	movs	r0, #8
   17a24:	bd38      	pop	{r3, r4, r5, pc}
   17a26:	f7f8 f875 	bl	fb14 <bsd_os_application_irq_set>
   17a2a:	2000      	movs	r0, #0
   17a2c:	bd38      	pop	{r3, r4, r5, pc}
   17a2e:	7821      	ldrb	r1, [r4, #0]
   17a30:	2903      	cmp	r1, #3
   17a32:	f47f af77 	bne.w	17924 <rpc_message_free+0x24>
   17a36:	2100      	movs	r1, #0
   17a38:	2501      	movs	r5, #1
   17a3a:	4618      	mov	r0, r3
   17a3c:	68d2      	ldr	r2, [r2, #12]
   17a3e:	f804 5031 	strb.w	r5, [r4, r1, lsl #3]
   17a42:	4790      	blx	r2
   17a44:	2000      	movs	r0, #0
   17a46:	bd38      	pop	{r3, r4, r5, pc}
   17a48:	7a21      	ldrb	r1, [r4, #8]
   17a4a:	2903      	cmp	r1, #3
   17a4c:	f47f af6e 	bne.w	1792c <rpc_message_free+0x2c>
   17a50:	2101      	movs	r1, #1
   17a52:	e7f1      	b.n	17a38 <rpc_message_free+0x138>
   17a54:	7c21      	ldrb	r1, [r4, #16]
   17a56:	2903      	cmp	r1, #3
   17a58:	f47f af6c 	bne.w	17934 <rpc_message_free+0x34>
   17a5c:	2102      	movs	r1, #2
   17a5e:	e7eb      	b.n	17a38 <rpc_message_free+0x138>
   17a60:	7e21      	ldrb	r1, [r4, #24]
   17a62:	2903      	cmp	r1, #3
   17a64:	d0e8      	beq.n	17a38 <rpc_message_free+0x138>
   17a66:	6a63      	ldr	r3, [r4, #36]	; 0x24
   17a68:	4298      	cmp	r0, r3
   17a6a:	f47f af6b 	bne.w	17944 <rpc_message_free+0x44>
   17a6e:	f894 1020 	ldrb.w	r1, [r4, #32]
   17a72:	2903      	cmp	r1, #3
   17a74:	f47f af66 	bne.w	17944 <rpc_message_free+0x44>
   17a78:	2104      	movs	r1, #4
   17a7a:	e7dd      	b.n	17a38 <rpc_message_free+0x138>
   17a7c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   17a80:	2903      	cmp	r1, #3
   17a82:	f47f af63 	bne.w	1794c <rpc_message_free+0x4c>
   17a86:	2105      	movs	r1, #5
   17a88:	e7d6      	b.n	17a38 <rpc_message_free+0x138>
   17a8a:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
   17a8e:	2903      	cmp	r1, #3
   17a90:	f47f af60 	bne.w	17954 <rpc_message_free+0x54>
   17a94:	2106      	movs	r1, #6
   17a96:	e7cf      	b.n	17a38 <rpc_message_free+0x138>
   17a98:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   17a9c:	2903      	cmp	r1, #3
   17a9e:	f47f af5d 	bne.w	1795c <rpc_message_free+0x5c>
   17aa2:	2107      	movs	r1, #7
   17aa4:	e7c8      	b.n	17a38 <rpc_message_free+0x138>
   17aa6:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   17aaa:	2903      	cmp	r1, #3
   17aac:	f47f af5a 	bne.w	17964 <rpc_message_free+0x64>
   17ab0:	2108      	movs	r1, #8
   17ab2:	e7c1      	b.n	17a38 <rpc_message_free+0x138>
   17ab4:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
   17ab8:	2903      	cmp	r1, #3
   17aba:	f47f af57 	bne.w	1796c <rpc_message_free+0x6c>
   17abe:	2109      	movs	r1, #9
   17ac0:	e7ba      	b.n	17a38 <rpc_message_free+0x138>
   17ac2:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   17ac6:	2903      	cmp	r1, #3
   17ac8:	f47f af54 	bne.w	17974 <rpc_message_free+0x74>
   17acc:	210a      	movs	r1, #10
   17ace:	e7b3      	b.n	17a38 <rpc_message_free+0x138>
   17ad0:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
   17ad4:	2903      	cmp	r1, #3
   17ad6:	f47f af51 	bne.w	1797c <rpc_message_free+0x7c>
   17ada:	210b      	movs	r1, #11
   17adc:	e7ac      	b.n	17a38 <rpc_message_free+0x138>
   17ade:	200e      	movs	r0, #14
   17ae0:	4770      	bx	lr
   17ae2:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   17ae6:	2903      	cmp	r1, #3
   17ae8:	f47f af4c 	bne.w	17984 <rpc_message_free+0x84>
   17aec:	210c      	movs	r1, #12
   17aee:	e7a3      	b.n	17a38 <rpc_message_free+0x138>
   17af0:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
   17af4:	2903      	cmp	r1, #3
   17af6:	f47f af49 	bne.w	1798c <rpc_message_free+0x8c>
   17afa:	210d      	movs	r1, #13
   17afc:	e79c      	b.n	17a38 <rpc_message_free+0x138>
   17afe:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
   17b02:	2903      	cmp	r1, #3
   17b04:	f47f af46 	bne.w	17994 <rpc_message_free+0x94>
   17b08:	210e      	movs	r1, #14
   17b0a:	e795      	b.n	17a38 <rpc_message_free+0x138>
   17b0c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   17b10:	2b03      	cmp	r3, #3
   17b12:	f47f af43 	bne.w	1799c <rpc_message_free+0x9c>
   17b16:	4603      	mov	r3, r0
   17b18:	210f      	movs	r1, #15
   17b1a:	e78d      	b.n	17a38 <rpc_message_free+0x138>
   17b1c:	20020a40 	.word	0x20020a40
   17b20:	20020ad8 	.word	0x20020ad8

00017b24 <rpc_message_data_free>:
   17b24:	2800      	cmp	r0, #0
   17b26:	f000 8091 	beq.w	17c4c <rpc_message_data_free+0x128>
   17b2a:	2900      	cmp	r1, #0
   17b2c:	f000 80e4 	beq.w	17cf8 <rpc_message_data_free+0x1d4>
   17b30:	b538      	push	{r3, r4, r5, lr}
   17b32:	4a81      	ldr	r2, [pc, #516]	; (17d38 <rpc_message_data_free+0x214>)
   17b34:	6853      	ldr	r3, [r2, #4]
   17b36:	2b00      	cmp	r3, #0
   17b38:	f000 808a 	beq.w	17c50 <rpc_message_data_free+0x12c>
   17b3c:	4b7f      	ldr	r3, [pc, #508]	; (17d3c <rpc_message_data_free+0x218>)
   17b3e:	681c      	ldr	r4, [r3, #0]
   17b40:	42a1      	cmp	r1, r4
   17b42:	f000 8087 	beq.w	17c54 <rpc_message_data_free+0x130>
   17b46:	689c      	ldr	r4, [r3, #8]
   17b48:	42a1      	cmp	r1, r4
   17b4a:	f000 808f 	beq.w	17c6c <rpc_message_data_free+0x148>
   17b4e:	691c      	ldr	r4, [r3, #16]
   17b50:	42a1      	cmp	r1, r4
   17b52:	f000 8091 	beq.w	17c78 <rpc_message_data_free+0x154>
   17b56:	699c      	ldr	r4, [r3, #24]
   17b58:	42a1      	cmp	r1, r4
   17b5a:	f000 8093 	beq.w	17c84 <rpc_message_data_free+0x160>
   17b5e:	6a1c      	ldr	r4, [r3, #32]
   17b60:	42a1      	cmp	r1, r4
   17b62:	f000 8095 	beq.w	17c90 <rpc_message_data_free+0x16c>
   17b66:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   17b68:	42a1      	cmp	r1, r4
   17b6a:	f000 8097 	beq.w	17c9c <rpc_message_data_free+0x178>
   17b6e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   17b70:	42a1      	cmp	r1, r4
   17b72:	f000 8099 	beq.w	17ca8 <rpc_message_data_free+0x184>
   17b76:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   17b78:	42a1      	cmp	r1, r4
   17b7a:	f000 809b 	beq.w	17cb4 <rpc_message_data_free+0x190>
   17b7e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
   17b80:	42a1      	cmp	r1, r4
   17b82:	f000 809d 	beq.w	17cc0 <rpc_message_data_free+0x19c>
   17b86:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   17b88:	42a1      	cmp	r1, r4
   17b8a:	f000 80a0 	beq.w	17cce <rpc_message_data_free+0x1aa>
   17b8e:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   17b90:	42a1      	cmp	r1, r4
   17b92:	f000 80a3 	beq.w	17cdc <rpc_message_data_free+0x1b8>
   17b96:	6d9c      	ldr	r4, [r3, #88]	; 0x58
   17b98:	42a1      	cmp	r1, r4
   17b9a:	f000 80a6 	beq.w	17cea <rpc_message_data_free+0x1c6>
   17b9e:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   17ba0:	42a1      	cmp	r1, r4
   17ba2:	f000 80ab 	beq.w	17cfc <rpc_message_data_free+0x1d8>
   17ba6:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   17ba8:	42a1      	cmp	r1, r4
   17baa:	f000 80ae 	beq.w	17d0a <rpc_message_data_free+0x1e6>
   17bae:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   17bb0:	42a1      	cmp	r1, r4
   17bb2:	f000 80b1 	beq.w	17d18 <rpc_message_data_free+0x1f4>
   17bb6:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   17bb8:	428c      	cmp	r4, r1
   17bba:	f000 80b4 	beq.w	17d26 <rpc_message_data_free+0x202>
   17bbe:	6913      	ldr	r3, [r2, #16]
   17bc0:	4608      	mov	r0, r1
   17bc2:	4798      	blx	r3
   17bc4:	4b5e      	ldr	r3, [pc, #376]	; (17d40 <rpc_message_data_free+0x21c>)
   17bc6:	781a      	ldrb	r2, [r3, #0]
   17bc8:	2a04      	cmp	r2, #4
   17bca:	d03b      	beq.n	17c44 <rpc_message_data_free+0x120>
   17bcc:	7a1a      	ldrb	r2, [r3, #8]
   17bce:	2a04      	cmp	r2, #4
   17bd0:	d038      	beq.n	17c44 <rpc_message_data_free+0x120>
   17bd2:	7c1a      	ldrb	r2, [r3, #16]
   17bd4:	2a04      	cmp	r2, #4
   17bd6:	d035      	beq.n	17c44 <rpc_message_data_free+0x120>
   17bd8:	7e1a      	ldrb	r2, [r3, #24]
   17bda:	2a04      	cmp	r2, #4
   17bdc:	d032      	beq.n	17c44 <rpc_message_data_free+0x120>
   17bde:	f893 2020 	ldrb.w	r2, [r3, #32]
   17be2:	2a04      	cmp	r2, #4
   17be4:	d02e      	beq.n	17c44 <rpc_message_data_free+0x120>
   17be6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   17bea:	2a04      	cmp	r2, #4
   17bec:	d02a      	beq.n	17c44 <rpc_message_data_free+0x120>
   17bee:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   17bf2:	2a04      	cmp	r2, #4
   17bf4:	d026      	beq.n	17c44 <rpc_message_data_free+0x120>
   17bf6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   17bfa:	2a04      	cmp	r2, #4
   17bfc:	d022      	beq.n	17c44 <rpc_message_data_free+0x120>
   17bfe:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   17c02:	2a04      	cmp	r2, #4
   17c04:	d01e      	beq.n	17c44 <rpc_message_data_free+0x120>
   17c06:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   17c0a:	2a04      	cmp	r2, #4
   17c0c:	d01a      	beq.n	17c44 <rpc_message_data_free+0x120>
   17c0e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   17c12:	2a04      	cmp	r2, #4
   17c14:	d016      	beq.n	17c44 <rpc_message_data_free+0x120>
   17c16:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   17c1a:	2a04      	cmp	r2, #4
   17c1c:	d012      	beq.n	17c44 <rpc_message_data_free+0x120>
   17c1e:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   17c22:	2a04      	cmp	r2, #4
   17c24:	d00e      	beq.n	17c44 <rpc_message_data_free+0x120>
   17c26:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   17c2a:	2a04      	cmp	r2, #4
   17c2c:	d00a      	beq.n	17c44 <rpc_message_data_free+0x120>
   17c2e:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   17c32:	2a04      	cmp	r2, #4
   17c34:	d006      	beq.n	17c44 <rpc_message_data_free+0x120>
   17c36:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   17c3a:	2b04      	cmp	r3, #4
   17c3c:	bf18      	it	ne
   17c3e:	2000      	movne	r0, #0
   17c40:	d000      	beq.n	17c44 <rpc_message_data_free+0x120>
   17c42:	bd38      	pop	{r3, r4, r5, pc}
   17c44:	f7f7 ff66 	bl	fb14 <bsd_os_application_irq_set>
   17c48:	2000      	movs	r0, #0
   17c4a:	bd38      	pop	{r3, r4, r5, pc}
   17c4c:	2007      	movs	r0, #7
   17c4e:	4770      	bx	lr
   17c50:	2008      	movs	r0, #8
   17c52:	bd38      	pop	{r3, r4, r5, pc}
   17c54:	889c      	ldrh	r4, [r3, #4]
   17c56:	4284      	cmp	r4, r0
   17c58:	f47f af75 	bne.w	17b46 <rpc_message_data_free+0x22>
   17c5c:	2400      	movs	r4, #0
   17c5e:	2000      	movs	r0, #0
   17c60:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   17c64:	f843 0034 	str.w	r0, [r3, r4, lsl #3]
   17c68:	80a8      	strh	r0, [r5, #4]
   17c6a:	e7a8      	b.n	17bbe <rpc_message_data_free+0x9a>
   17c6c:	899c      	ldrh	r4, [r3, #12]
   17c6e:	4284      	cmp	r4, r0
   17c70:	f47f af6d 	bne.w	17b4e <rpc_message_data_free+0x2a>
   17c74:	2401      	movs	r4, #1
   17c76:	e7f2      	b.n	17c5e <rpc_message_data_free+0x13a>
   17c78:	8a9c      	ldrh	r4, [r3, #20]
   17c7a:	4284      	cmp	r4, r0
   17c7c:	f47f af6b 	bne.w	17b56 <rpc_message_data_free+0x32>
   17c80:	2402      	movs	r4, #2
   17c82:	e7ec      	b.n	17c5e <rpc_message_data_free+0x13a>
   17c84:	8b9c      	ldrh	r4, [r3, #28]
   17c86:	4284      	cmp	r4, r0
   17c88:	f47f af69 	bne.w	17b5e <rpc_message_data_free+0x3a>
   17c8c:	2403      	movs	r4, #3
   17c8e:	e7e6      	b.n	17c5e <rpc_message_data_free+0x13a>
   17c90:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
   17c92:	4284      	cmp	r4, r0
   17c94:	f47f af67 	bne.w	17b66 <rpc_message_data_free+0x42>
   17c98:	2404      	movs	r4, #4
   17c9a:	e7e0      	b.n	17c5e <rpc_message_data_free+0x13a>
   17c9c:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
   17c9e:	4284      	cmp	r4, r0
   17ca0:	f47f af65 	bne.w	17b6e <rpc_message_data_free+0x4a>
   17ca4:	2405      	movs	r4, #5
   17ca6:	e7da      	b.n	17c5e <rpc_message_data_free+0x13a>
   17ca8:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
   17caa:	4284      	cmp	r4, r0
   17cac:	f47f af63 	bne.w	17b76 <rpc_message_data_free+0x52>
   17cb0:	2406      	movs	r4, #6
   17cb2:	e7d4      	b.n	17c5e <rpc_message_data_free+0x13a>
   17cb4:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
   17cb6:	4284      	cmp	r4, r0
   17cb8:	f47f af61 	bne.w	17b7e <rpc_message_data_free+0x5a>
   17cbc:	2407      	movs	r4, #7
   17cbe:	e7ce      	b.n	17c5e <rpc_message_data_free+0x13a>
   17cc0:	f8b3 4044 	ldrh.w	r4, [r3, #68]	; 0x44
   17cc4:	4284      	cmp	r4, r0
   17cc6:	f47f af5e 	bne.w	17b86 <rpc_message_data_free+0x62>
   17cca:	2408      	movs	r4, #8
   17ccc:	e7c7      	b.n	17c5e <rpc_message_data_free+0x13a>
   17cce:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
   17cd2:	4284      	cmp	r4, r0
   17cd4:	f47f af5b 	bne.w	17b8e <rpc_message_data_free+0x6a>
   17cd8:	2409      	movs	r4, #9
   17cda:	e7c0      	b.n	17c5e <rpc_message_data_free+0x13a>
   17cdc:	f8b3 4054 	ldrh.w	r4, [r3, #84]	; 0x54
   17ce0:	4284      	cmp	r4, r0
   17ce2:	f47f af58 	bne.w	17b96 <rpc_message_data_free+0x72>
   17ce6:	240a      	movs	r4, #10
   17ce8:	e7b9      	b.n	17c5e <rpc_message_data_free+0x13a>
   17cea:	f8b3 405c 	ldrh.w	r4, [r3, #92]	; 0x5c
   17cee:	4284      	cmp	r4, r0
   17cf0:	f47f af55 	bne.w	17b9e <rpc_message_data_free+0x7a>
   17cf4:	240b      	movs	r4, #11
   17cf6:	e7b2      	b.n	17c5e <rpc_message_data_free+0x13a>
   17cf8:	200e      	movs	r0, #14
   17cfa:	4770      	bx	lr
   17cfc:	f8b3 4064 	ldrh.w	r4, [r3, #100]	; 0x64
   17d00:	4284      	cmp	r4, r0
   17d02:	f47f af50 	bne.w	17ba6 <rpc_message_data_free+0x82>
   17d06:	240c      	movs	r4, #12
   17d08:	e7a9      	b.n	17c5e <rpc_message_data_free+0x13a>
   17d0a:	f8b3 406c 	ldrh.w	r4, [r3, #108]	; 0x6c
   17d0e:	4284      	cmp	r4, r0
   17d10:	f47f af4d 	bne.w	17bae <rpc_message_data_free+0x8a>
   17d14:	240d      	movs	r4, #13
   17d16:	e7a2      	b.n	17c5e <rpc_message_data_free+0x13a>
   17d18:	f8b3 4074 	ldrh.w	r4, [r3, #116]	; 0x74
   17d1c:	4284      	cmp	r4, r0
   17d1e:	f47f af4a 	bne.w	17bb6 <rpc_message_data_free+0x92>
   17d22:	240e      	movs	r4, #14
   17d24:	e79b      	b.n	17c5e <rpc_message_data_free+0x13a>
   17d26:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
   17d2a:	4284      	cmp	r4, r0
   17d2c:	bf08      	it	eq
   17d2e:	240f      	moveq	r4, #15
   17d30:	f47f af45 	bne.w	17bbe <rpc_message_data_free+0x9a>
   17d34:	e793      	b.n	17c5e <rpc_message_data_free+0x13a>
   17d36:	bf00      	nop
   17d38:	20020a40 	.word	0x20020a40
   17d3c:	20020a58 	.word	0x20020a58
   17d40:	20020ad8 	.word	0x20020ad8

00017d44 <packet_free_cb>:
   17d44:	b510      	push	{r4, lr}
   17d46:	4604      	mov	r4, r0
   17d48:	b118      	cbz	r0, 17d52 <packet_free_cb+0xe>
   17d4a:	6800      	ldr	r0, [r0, #0]
   17d4c:	b108      	cbz	r0, 17d52 <packet_free_cb+0xe>
   17d4e:	f001 f829 	bl	18da4 <rpc_gnss_client_data_free>
   17d52:	68a0      	ldr	r0, [r4, #8]
   17d54:	b118      	cbz	r0, 17d5e <packet_free_cb+0x1a>
   17d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17d5a:	f7fa b99f 	b.w	1209c <nrf_free>
   17d5e:	bd10      	pop	{r4, pc}

00017d60 <rpc_gnss_event_handler>:
   17d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17d64:	4b64      	ldr	r3, [pc, #400]	; (17ef8 <rpc_gnss_event_handler+0x198>)
   17d66:	4606      	mov	r6, r0
   17d68:	6800      	ldr	r0, [r0, #0]
   17d6a:	881b      	ldrh	r3, [r3, #0]
   17d6c:	6802      	ldr	r2, [r0, #0]
   17d6e:	4f63      	ldr	r7, [pc, #396]	; (17efc <rpc_gnss_event_handler+0x19c>)
   17d70:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   17d74:	b084      	sub	sp, #16
   17d76:	460d      	mov	r5, r1
   17d78:	6038      	str	r0, [r7, #0]
   17d7a:	d038      	beq.n	17dee <rpc_gnss_event_handler+0x8e>
   17d7c:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   17d80:	33ff      	adds	r3, #255	; 0xff
   17d82:	b29b      	uxth	r3, r3
   17d84:	2b02      	cmp	r3, #2
   17d86:	d810      	bhi.n	17daa <rpc_gnss_event_handler+0x4a>
   17d88:	4c5d      	ldr	r4, [pc, #372]	; (17f00 <rpc_gnss_event_handler+0x1a0>)
   17d8a:	6823      	ldr	r3, [r4, #0]
   17d8c:	075a      	lsls	r2, r3, #29
   17d8e:	d410      	bmi.n	17db2 <rpc_gnss_event_handler+0x52>
   17d90:	6823      	ldr	r3, [r4, #0]
   17d92:	079b      	lsls	r3, r3, #30
   17d94:	d503      	bpl.n	17d9e <rpc_gnss_event_handler+0x3e>
   17d96:	f244 0303 	movw	r3, #16387	; 0x4003
   17d9a:	429d      	cmp	r5, r3
   17d9c:	d009      	beq.n	17db2 <rpc_gnss_event_handler+0x52>
   17d9e:	6830      	ldr	r0, [r6, #0]
   17da0:	b118      	cbz	r0, 17daa <rpc_gnss_event_handler+0x4a>
   17da2:	f000 ffff 	bl	18da4 <rpc_gnss_client_data_free>
   17da6:	2300      	movs	r3, #0
   17da8:	603b      	str	r3, [r7, #0]
   17daa:	2000      	movs	r0, #0
   17dac:	b004      	add	sp, #16
   17dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17db2:	2002      	movs	r0, #2
   17db4:	f7fa f968 	bl	12088 <nrf_malloc>
   17db8:	4680      	mov	r8, r0
   17dba:	2800      	cmp	r0, #0
   17dbc:	f000 8093 	beq.w	17ee6 <rpc_gnss_event_handler+0x186>
   17dc0:	2302      	movs	r3, #2
   17dc2:	8005      	strh	r5, [r0, #0]
   17dc4:	6831      	ldr	r1, [r6, #0]
   17dc6:	6872      	ldr	r2, [r6, #4]
   17dc8:	484e      	ldr	r0, [pc, #312]	; (17f04 <rpc_gnss_event_handler+0x1a4>)
   17dca:	e88d 0106 	stmia.w	sp, {r1, r2, r8}
   17dce:	6800      	ldr	r0, [r0, #0]
   17dd0:	9303      	str	r3, [sp, #12]
   17dd2:	6803      	ldr	r3, [r0, #0]
   17dd4:	4669      	mov	r1, sp
   17dd6:	685b      	ldr	r3, [r3, #4]
   17dd8:	4798      	blx	r3
   17dda:	3001      	adds	r0, #1
   17ddc:	d070      	beq.n	17ec0 <rpc_gnss_event_handler+0x160>
   17dde:	2000      	movs	r0, #0
   17de0:	6823      	ldr	r3, [r4, #0]
   17de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17de6:	6023      	str	r3, [r4, #0]
   17de8:	b004      	add	sp, #16
   17dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17dee:	4c44      	ldr	r4, [pc, #272]	; (17f00 <rpc_gnss_event_handler+0x1a0>)
   17df0:	6823      	ldr	r3, [r4, #0]
   17df2:	01d9      	lsls	r1, r3, #7
   17df4:	d523      	bpl.n	17e3e <rpc_gnss_event_handler+0xde>
   17df6:	f242 1302 	movw	r3, #8450	; 0x2102
   17dfa:	429d      	cmp	r5, r3
   17dfc:	d11f      	bne.n	17e3e <rpc_gnss_event_handler+0xde>
   17dfe:	6843      	ldr	r3, [r0, #4]
   17e00:	b91b      	cbnz	r3, 17e0a <rpc_gnss_event_handler+0xaa>
   17e02:	6823      	ldr	r3, [r4, #0]
   17e04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   17e08:	6023      	str	r3, [r4, #0]
   17e0a:	6823      	ldr	r3, [r4, #0]
   17e0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   17e10:	6023      	str	r3, [r4, #0]
   17e12:	6823      	ldr	r3, [r4, #0]
   17e14:	025a      	lsls	r2, r3, #9
   17e16:	d430      	bmi.n	17e7a <rpc_gnss_event_handler+0x11a>
   17e18:	f242 0305 	movw	r3, #8197	; 0x2005
   17e1c:	429d      	cmp	r5, r3
   17e1e:	d12c      	bne.n	17e7a <rpc_gnss_event_handler+0x11a>
   17e20:	6823      	ldr	r3, [r4, #0]
   17e22:	0299      	lsls	r1, r3, #10
   17e24:	d529      	bpl.n	17e7a <rpc_gnss_event_handler+0x11a>
   17e26:	6843      	ldr	r3, [r0, #4]
   17e28:	2b00      	cmp	r3, #0
   17e2a:	d157      	bne.n	17edc <rpc_gnss_event_handler+0x17c>
   17e2c:	6823      	ldr	r3, [r4, #0]
   17e2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   17e32:	6023      	str	r3, [r4, #0]
   17e34:	6823      	ldr	r3, [r4, #0]
   17e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17e3a:	6023      	str	r3, [r4, #0]
   17e3c:	e01d      	b.n	17e7a <rpc_gnss_event_handler+0x11a>
   17e3e:	6823      	ldr	r3, [r4, #0]
   17e40:	025b      	lsls	r3, r3, #9
   17e42:	d50e      	bpl.n	17e62 <rpc_gnss_event_handler+0x102>
   17e44:	f242 1303 	movw	r3, #8451	; 0x2103
   17e48:	429d      	cmp	r5, r3
   17e4a:	d10a      	bne.n	17e62 <rpc_gnss_event_handler+0x102>
   17e4c:	6843      	ldr	r3, [r0, #4]
   17e4e:	b91b      	cbnz	r3, 17e58 <rpc_gnss_event_handler+0xf8>
   17e50:	6823      	ldr	r3, [r4, #0]
   17e52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   17e56:	6023      	str	r3, [r4, #0]
   17e58:	6823      	ldr	r3, [r4, #0]
   17e5a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   17e5e:	6023      	str	r3, [r4, #0]
   17e60:	e00b      	b.n	17e7a <rpc_gnss_event_handler+0x11a>
   17e62:	f242 0301 	movw	r3, #8193	; 0x2001
   17e66:	429d      	cmp	r5, r3
   17e68:	d10c      	bne.n	17e84 <rpc_gnss_event_handler+0x124>
   17e6a:	6843      	ldr	r3, [r0, #4]
   17e6c:	b92b      	cbnz	r3, 17e7a <rpc_gnss_event_handler+0x11a>
   17e6e:	6823      	ldr	r3, [r4, #0]
   17e70:	0c1b      	lsrs	r3, r3, #16
   17e72:	041b      	lsls	r3, r3, #16
   17e74:	f043 0302 	orr.w	r3, r3, #2
   17e78:	6023      	str	r3, [r4, #0]
   17e7a:	f000 ff93 	bl	18da4 <rpc_gnss_client_data_free>
   17e7e:	2300      	movs	r3, #0
   17e80:	603b      	str	r3, [r7, #0]
   17e82:	e77b      	b.n	17d7c <rpc_gnss_event_handler+0x1c>
   17e84:	f242 0304 	movw	r3, #8196	; 0x2004
   17e88:	429d      	cmp	r5, r3
   17e8a:	d1c5      	bne.n	17e18 <rpc_gnss_event_handler+0xb8>
   17e8c:	6843      	ldr	r3, [r0, #4]
   17e8e:	b993      	cbnz	r3, 17eb6 <rpc_gnss_event_handler+0x156>
   17e90:	6823      	ldr	r3, [r4, #0]
   17e92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   17e96:	6023      	str	r3, [r4, #0]
   17e98:	6823      	ldr	r3, [r4, #0]
   17e9a:	b29b      	uxth	r3, r3
   17e9c:	2b03      	cmp	r3, #3
   17e9e:	6823      	ldr	r3, [r4, #0]
   17ea0:	d016      	beq.n	17ed0 <rpc_gnss_event_handler+0x170>
   17ea2:	b29b      	uxth	r3, r3
   17ea4:	2b04      	cmp	r3, #4
   17ea6:	d1d7      	bne.n	17e58 <rpc_gnss_event_handler+0xf8>
   17ea8:	6823      	ldr	r3, [r4, #0]
   17eaa:	0c1b      	lsrs	r3, r3, #16
   17eac:	041b      	lsls	r3, r3, #16
   17eae:	f043 0302 	orr.w	r3, r3, #2
   17eb2:	6023      	str	r3, [r4, #0]
   17eb4:	e7d0      	b.n	17e58 <rpc_gnss_event_handler+0xf8>
   17eb6:	6823      	ldr	r3, [r4, #0]
   17eb8:	b29b      	uxth	r3, r3
   17eba:	2b03      	cmp	r3, #3
   17ebc:	d1cc      	bne.n	17e58 <rpc_gnss_event_handler+0xf8>
   17ebe:	e7f3      	b.n	17ea8 <rpc_gnss_event_handler+0x148>
   17ec0:	4640      	mov	r0, r8
   17ec2:	f7fa f8eb 	bl	1209c <nrf_free>
   17ec6:	6830      	ldr	r0, [r6, #0]
   17ec8:	2800      	cmp	r0, #0
   17eca:	f47f af6a 	bne.w	17da2 <rpc_gnss_event_handler+0x42>
   17ece:	e76c      	b.n	17daa <rpc_gnss_event_handler+0x4a>
   17ed0:	0c1b      	lsrs	r3, r3, #16
   17ed2:	041b      	lsls	r3, r3, #16
   17ed4:	f043 0304 	orr.w	r3, r3, #4
   17ed8:	6023      	str	r3, [r4, #0]
   17eda:	e7bd      	b.n	17e58 <rpc_gnss_event_handler+0xf8>
   17edc:	6823      	ldr	r3, [r4, #0]
   17ede:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   17ee2:	6023      	str	r3, [r4, #0]
   17ee4:	e7c9      	b.n	17e7a <rpc_gnss_event_handler+0x11a>
   17ee6:	6830      	ldr	r0, [r6, #0]
   17ee8:	2800      	cmp	r0, #0
   17eea:	f43f af5e 	beq.w	17daa <rpc_gnss_event_handler+0x4a>
   17eee:	f000 ff59 	bl	18da4 <rpc_gnss_client_data_free>
   17ef2:	f8c7 8000 	str.w	r8, [r7]
   17ef6:	e758      	b.n	17daa <rpc_gnss_event_handler+0x4a>
   17ef8:	20021e24 	.word	0x20021e24
   17efc:	20020b5c 	.word	0x20020b5c
   17f00:	20020b58 	.word	0x20020b58
   17f04:	20020b60 	.word	0x20020b60

00017f08 <gnss_interface_write>:
   17f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17f0c:	4a75      	ldr	r2, [pc, #468]	; (180e4 <gnss_interface_write+0x1dc>)
   17f0e:	b09f      	sub	sp, #124	; 0x7c
   17f10:	4290      	cmp	r0, r2
   17f12:	9d26      	ldr	r5, [sp, #152]	; 0x98
   17f14:	f040 80d4 	bne.w	180c0 <gnss_interface_write+0x1b8>
   17f18:	2900      	cmp	r1, #0
   17f1a:	f000 80c9 	beq.w	180b0 <gnss_interface_write+0x1a8>
   17f1e:	2d00      	cmp	r5, #0
   17f20:	f000 80c6 	beq.w	180b0 <gnss_interface_write+0x1a8>
   17f24:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   17f26:	2a02      	cmp	r2, #2
   17f28:	f040 80c2 	bne.w	180b0 <gnss_interface_write+0x1a8>
   17f2c:	4c6e      	ldr	r4, [pc, #440]	; (180e8 <gnss_interface_write+0x1e0>)
   17f2e:	6822      	ldr	r2, [r4, #0]
   17f30:	b292      	uxth	r2, r2
   17f32:	2a02      	cmp	r2, #2
   17f34:	d004      	beq.n	17f40 <gnss_interface_write+0x38>
   17f36:	6822      	ldr	r2, [r4, #0]
   17f38:	b292      	uxth	r2, r2
   17f3a:	2a04      	cmp	r2, #4
   17f3c:	f040 80c6 	bne.w	180cc <gnss_interface_write+0x1c4>
   17f40:	0798      	lsls	r0, r3, #30
   17f42:	f100 80c9 	bmi.w	180d8 <gnss_interface_write+0x1d0>
   17f46:	6820      	ldr	r0, [r4, #0]
   17f48:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
   17f4c:	d065      	beq.n	1801a <gnss_interface_write+0x112>
   17f4e:	6822      	ldr	r2, [r4, #0]
   17f50:	882b      	ldrh	r3, [r5, #0]
   17f52:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   17f56:	6022      	str	r2, [r4, #0]
   17f58:	6822      	ldr	r2, [r4, #0]
   17f5a:	3b01      	subs	r3, #1
   17f5c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   17f60:	6022      	str	r2, [r4, #0]
   17f62:	2b07      	cmp	r3, #7
   17f64:	f200 80a4 	bhi.w	180b0 <gnss_interface_write+0x1a8>
   17f68:	e8df f003 	tbb	[pc, r3]
   17f6c:	696e7378 	.word	0x696e7378
   17f70:	045f5a64 	.word	0x045f5a64
   17f74:	4608      	mov	r0, r1
   17f76:	a902      	add	r1, sp, #8
   17f78:	f000 fec8 	bl	18d0c <rpc_gnss_serialize_integrity>
   17f7c:	2172      	movs	r1, #114	; 0x72
   17f7e:	4668      	mov	r0, sp
   17f80:	f000 fede 	bl	18d40 <rpc_gnss_client_request_alloc>
   17f84:	4605      	mov	r5, r0
   17f86:	9800      	ldr	r0, [sp, #0]
   17f88:	2d00      	cmp	r5, #0
   17f8a:	d16c      	bne.n	18066 <gnss_interface_write+0x15e>
   17f8c:	2800      	cmp	r0, #0
   17f8e:	d071      	beq.n	18074 <gnss_interface_write+0x16c>
   17f90:	f241 0605 	movw	r6, #4101	; 0x1005
   17f94:	f04f 0c49 	mov.w	ip, #73	; 0x49
   17f98:	2272      	movs	r2, #114	; 0x72
   17f9a:	f04f 0e76 	mov.w	lr, #118	; 0x76
   17f9e:	f04f 0943 	mov.w	r9, #67	; 0x43
   17fa2:	f04f 0854 	mov.w	r8, #84	; 0x54
   17fa6:	4f51      	ldr	r7, [pc, #324]	; (180ec <gnss_interface_write+0x1e4>)
   17fa8:	a91e      	add	r1, sp, #120	; 0x78
   17faa:	883b      	ldrh	r3, [r7, #0]
   17fac:	f880 c00f 	strb.w	ip, [r0, #15]
   17fb0:	3301      	adds	r3, #1
   17fb2:	b29b      	uxth	r3, r3
   17fb4:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   17fb8:	f841 cd74 	str.w	ip, [r1, #-116]!
   17fbc:	7145      	strb	r5, [r0, #5]
   17fbe:	7185      	strb	r5, [r0, #6]
   17fc0:	71c5      	strb	r5, [r0, #7]
   17fc2:	7205      	strb	r5, [r0, #8]
   17fc4:	7245      	strb	r5, [r0, #9]
   17fc6:	7285      	strb	r5, [r0, #10]
   17fc8:	72c5      	strb	r5, [r0, #11]
   17fca:	7102      	strb	r2, [r0, #4]
   17fcc:	f880 900c 	strb.w	r9, [r0, #12]
   17fd0:	f880 800d 	strb.w	r8, [r0, #13]
   17fd4:	f880 e00e 	strb.w	lr, [r0, #14]
   17fd8:	6800      	ldr	r0, [r0, #0]
   17fda:	803b      	strh	r3, [r7, #0]
   17fdc:	f003 ff1a 	bl	1be14 <memcpy>
   17fe0:	4b43      	ldr	r3, [pc, #268]	; (180f0 <gnss_interface_write+0x1e8>)
   17fe2:	4631      	mov	r1, r6
   17fe4:	9800      	ldr	r0, [sp, #0]
   17fe6:	601d      	str	r5, [r3, #0]
   17fe8:	f000 febe 	bl	18d68 <rpc_gnss_client_request_send>
   17fec:	2800      	cmp	r0, #0
   17fee:	d148      	bne.n	18082 <gnss_interface_write+0x17a>
   17ff0:	6823      	ldr	r3, [r4, #0]
   17ff2:	0299      	lsls	r1, r3, #10
   17ff4:	d50d      	bpl.n	18012 <gnss_interface_write+0x10a>
   17ff6:	4e3f      	ldr	r6, [pc, #252]	; (180f4 <gnss_interface_write+0x1ec>)
   17ff8:	4d3a      	ldr	r5, [pc, #232]	; (180e4 <gnss_interface_write+0x1dc>)
   17ffa:	e001      	b.n	18000 <gnss_interface_write+0xf8>
   17ffc:	2800      	cmp	r0, #0
   17ffe:	d150      	bne.n	180a2 <gnss_interface_write+0x19a>
   18000:	4631      	mov	r1, r6
   18002:	4628      	mov	r0, r5
   18004:	f7f7 fc46 	bl	f894 <bsd_os_timedwait>
   18008:	6823      	ldr	r3, [r4, #0]
   1800a:	029a      	lsls	r2, r3, #10
   1800c:	d4f6      	bmi.n	17ffc <gnss_interface_write+0xf4>
   1800e:	2800      	cmp	r0, #0
   18010:	d147      	bne.n	180a2 <gnss_interface_write+0x19a>
   18012:	6823      	ldr	r3, [r4, #0]
   18014:	039b      	lsls	r3, r3, #14
   18016:	d53f      	bpl.n	18098 <gnss_interface_write+0x190>
   18018:	2000      	movs	r0, #0
   1801a:	b01f      	add	sp, #124	; 0x7c
   1801c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18020:	4608      	mov	r0, r1
   18022:	a902      	add	r1, sp, #8
   18024:	f000 fe2a 	bl	18c7c <rpc_gnss_serialize_time_and_sv_tow>
   18028:	e7a8      	b.n	17f7c <gnss_interface_write+0x74>
   1802a:	4608      	mov	r0, r1
   1802c:	a902      	add	r1, sp, #8
   1802e:	f000 fe4d 	bl	18ccc <rpc_gnss_serialize_location>
   18032:	e7a3      	b.n	17f7c <gnss_interface_write+0x74>
   18034:	4608      	mov	r0, r1
   18036:	a902      	add	r1, sp, #8
   18038:	f000 fe06 	bl	18c48 <rpc_gnss_serialize_nequick>
   1803c:	e79e      	b.n	17f7c <gnss_interface_write+0x74>
   1803e:	4608      	mov	r0, r1
   18040:	a902      	add	r1, sp, #8
   18042:	f000 fddd 	bl	18c00 <rpc_gnss_serialize_klob>
   18046:	e799      	b.n	17f7c <gnss_interface_write+0x74>
   18048:	4608      	mov	r0, r1
   1804a:	a902      	add	r1, sp, #8
   1804c:	f000 fda6 	bl	18b9c <rpc_gnss_serialize_alm>
   18050:	e794      	b.n	17f7c <gnss_interface_write+0x74>
   18052:	4608      	mov	r0, r1
   18054:	a902      	add	r1, sp, #8
   18056:	f000 fd4f 	bl	18af8 <rpc_gnss_serialize_ephe>
   1805a:	e78f      	b.n	17f7c <gnss_interface_write+0x74>
   1805c:	4608      	mov	r0, r1
   1805e:	a902      	add	r1, sp, #8
   18060:	f000 fd28 	bl	18ab4 <rpc_gnss_serialize_utc>
   18064:	e78a      	b.n	17f7c <gnss_interface_write+0x74>
   18066:	b128      	cbz	r0, 18074 <gnss_interface_write+0x16c>
   18068:	6803      	ldr	r3, [r0, #0]
   1806a:	b11b      	cbz	r3, 18074 <gnss_interface_write+0x16c>
   1806c:	4618      	mov	r0, r3
   1806e:	f000 fe99 	bl	18da4 <rpc_gnss_client_data_free>
   18072:	9800      	ldr	r0, [sp, #0]
   18074:	f000 fe8e 	bl	18d94 <rpc_gnss_client_message_free>
   18078:	2023      	movs	r0, #35	; 0x23
   1807a:	f7f7 fc9f 	bl	f9bc <bsd_os_errno_set>
   1807e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18082:	6823      	ldr	r3, [r4, #0]
   18084:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   18088:	6023      	str	r3, [r4, #0]
   1808a:	6823      	ldr	r3, [r4, #0]
   1808c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   18090:	6023      	str	r3, [r4, #0]
   18092:	b01f      	add	sp, #124	; 0x7c
   18094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18098:	2005      	movs	r0, #5
   1809a:	6823      	ldr	r3, [r4, #0]
   1809c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   180a0:	6023      	str	r3, [r4, #0]
   180a2:	f7f7 fc8b 	bl	f9bc <bsd_os_errno_set>
   180a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   180aa:	b01f      	add	sp, #124	; 0x7c
   180ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   180b0:	2016      	movs	r0, #22
   180b2:	f7f7 fc83 	bl	f9bc <bsd_os_errno_set>
   180b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   180ba:	b01f      	add	sp, #124	; 0x7c
   180bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   180c0:	2009      	movs	r0, #9
   180c2:	f7f7 fc7b 	bl	f9bc <bsd_os_errno_set>
   180c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   180ca:	e7a6      	b.n	1801a <gnss_interface_write+0x112>
   180cc:	2039      	movs	r0, #57	; 0x39
   180ce:	f7f7 fc75 	bl	f9bc <bsd_os_errno_set>
   180d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   180d6:	e7a0      	b.n	1801a <gnss_interface_write+0x112>
   180d8:	202d      	movs	r0, #45	; 0x2d
   180da:	f7f7 fc6f 	bl	f9bc <bsd_os_errno_set>
   180de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   180e2:	e79a      	b.n	1801a <gnss_interface_write+0x112>
   180e4:	49765443 	.word	0x49765443
   180e8:	20020b58 	.word	0x20020b58
   180ec:	20021e24 	.word	0x20021e24
   180f0:	20020b5c 	.word	0x20020b5c
   180f4:	20028520 	.word	0x20028520

000180f8 <gnss_interface_read>:
   180f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180fc:	4c4a      	ldr	r4, [pc, #296]	; (18228 <gnss_interface_read+0x130>)
   180fe:	b0b7      	sub	sp, #220	; 0xdc
   18100:	42a0      	cmp	r0, r4
   18102:	f040 81ec 	bne.w	184de <gnss_interface_read+0x3e6>
   18106:	4688      	mov	r8, r1
   18108:	2900      	cmp	r1, #0
   1810a:	f000 81e2 	beq.w	184d2 <gnss_interface_read+0x3da>
   1810e:	2ad7      	cmp	r2, #215	; 0xd7
   18110:	f240 81df 	bls.w	184d2 <gnss_interface_read+0x3da>
   18114:	4d45      	ldr	r5, [pc, #276]	; (1822c <gnss_interface_read+0x134>)
   18116:	4699      	mov	r9, r3
   18118:	682b      	ldr	r3, [r5, #0]
   1811a:	b29b      	uxth	r3, r3
   1811c:	2b04      	cmp	r3, #4
   1811e:	d004      	beq.n	1812a <gnss_interface_read+0x32>
   18120:	682b      	ldr	r3, [r5, #0]
   18122:	b29b      	uxth	r3, r3
   18124:	2b02      	cmp	r3, #2
   18126:	f040 81e0 	bne.w	184ea <gnss_interface_read+0x3f2>
   1812a:	2102      	movs	r1, #2
   1812c:	20b6      	movs	r0, #182	; 0xb6
   1812e:	2400      	movs	r4, #0
   18130:	682b      	ldr	r3, [r5, #0]
   18132:	f10d 020e 	add.w	r2, sp, #14
   18136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1813a:	602b      	str	r3, [r5, #0]
   1813c:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 18234 <gnss_interface_read+0x13c>
   18140:	ab08      	add	r3, sp, #32
   18142:	4f3b      	ldr	r7, [pc, #236]	; (18230 <gnss_interface_read+0x138>)
   18144:	4e38      	ldr	r6, [pc, #224]	; (18228 <gnss_interface_read+0x130>)
   18146:	9005      	str	r0, [sp, #20]
   18148:	9107      	str	r1, [sp, #28]
   1814a:	9304      	str	r3, [sp, #16]
   1814c:	9206      	str	r2, [sp, #24]
   1814e:	ea09 0b01 	and.w	fp, r9, r1
   18152:	f8da 0000 	ldr.w	r0, [sl]
   18156:	464a      	mov	r2, r9
   18158:	6803      	ldr	r3, [r0, #0]
   1815a:	a904      	add	r1, sp, #16
   1815c:	689b      	ldr	r3, [r3, #8]
   1815e:	4798      	blx	r3
   18160:	2800      	cmp	r0, #0
   18162:	da11      	bge.n	18188 <gnss_interface_read+0x90>
   18164:	f1bb 0f00 	cmp.w	fp, #0
   18168:	d138      	bne.n	181dc <gnss_interface_read+0xe4>
   1816a:	682b      	ldr	r3, [r5, #0]
   1816c:	03d8      	lsls	r0, r3, #15
   1816e:	d4f0      	bmi.n	18152 <gnss_interface_read+0x5a>
   18170:	b10c      	cbz	r4, 18176 <gnss_interface_read+0x7e>
   18172:	e7ee      	b.n	18152 <gnss_interface_read+0x5a>
   18174:	b930      	cbnz	r0, 18184 <gnss_interface_read+0x8c>
   18176:	4639      	mov	r1, r7
   18178:	4630      	mov	r0, r6
   1817a:	f7f7 fb8b 	bl	f894 <bsd_os_timedwait>
   1817e:	682b      	ldr	r3, [r5, #0]
   18180:	03d9      	lsls	r1, r3, #15
   18182:	d5f7      	bpl.n	18174 <gnss_interface_read+0x7c>
   18184:	4604      	mov	r4, r0
   18186:	e7e4      	b.n	18152 <gnss_interface_read+0x5a>
   18188:	f244 0202 	movw	r2, #16386	; 0x4002
   1818c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   18190:	4293      	cmp	r3, r2
   18192:	d039      	beq.n	18208 <gnss_interface_read+0x110>
   18194:	f244 0201 	movw	r2, #16385	; 0x4001
   18198:	4293      	cmp	r3, r2
   1819a:	d04d      	beq.n	18238 <gnss_interface_read+0x140>
   1819c:	f244 0203 	movw	r2, #16387	; 0x4003
   181a0:	4293      	cmp	r3, r2
   181a2:	f040 8196 	bne.w	184d2 <gnss_interface_read+0x3da>
   181a6:	2203      	movs	r2, #3
   181a8:	2414      	movs	r4, #20
   181aa:	9b08      	ldr	r3, [sp, #32]
   181ac:	f888 2000 	strb.w	r2, [r8]
   181b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   181b2:	f8c8 3008 	str.w	r3, [r8, #8]
   181b6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   181ba:	e9c8 2303 	strd	r2, r3, [r8, #12]
   181be:	f8da 0000 	ldr.w	r0, [sl]
   181c2:	6803      	ldr	r3, [r0, #0]
   181c4:	68db      	ldr	r3, [r3, #12]
   181c6:	4798      	blx	r3
   181c8:	2800      	cmp	r0, #0
   181ca:	dd03      	ble.n	181d4 <gnss_interface_read+0xdc>
   181cc:	682b      	ldr	r3, [r5, #0]
   181ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   181d2:	602b      	str	r3, [r5, #0]
   181d4:	4620      	mov	r0, r4
   181d6:	b037      	add	sp, #220	; 0xdc
   181d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181dc:	1c42      	adds	r2, r0, #1
   181de:	4603      	mov	r3, r0
   181e0:	d1d2      	bne.n	18188 <gnss_interface_read+0x90>
   181e2:	b93c      	cbnz	r4, 181f4 <gnss_interface_read+0xfc>
   181e4:	461c      	mov	r4, r3
   181e6:	2023      	movs	r0, #35	; 0x23
   181e8:	f7f7 fbe8 	bl	f9bc <bsd_os_errno_set>
   181ec:	4620      	mov	r0, r4
   181ee:	b037      	add	sp, #220	; 0xdc
   181f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181f4:	9001      	str	r0, [sp, #4]
   181f6:	4620      	mov	r0, r4
   181f8:	f7f7 fbe0 	bl	f9bc <bsd_os_errno_set>
   181fc:	9b01      	ldr	r3, [sp, #4]
   181fe:	461c      	mov	r4, r3
   18200:	4620      	mov	r0, r4
   18202:	b037      	add	sp, #220	; 0xdc
   18204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18208:	a808      	add	r0, sp, #32
   1820a:	f003 fdd1 	bl	1bdb0 <strlen>
   1820e:	2302      	movs	r3, #2
   18210:	1c44      	adds	r4, r0, #1
   18212:	b2a4      	uxth	r4, r4
   18214:	f808 3b08 	strb.w	r3, [r8], #8
   18218:	4622      	mov	r2, r4
   1821a:	a908      	add	r1, sp, #32
   1821c:	4640      	mov	r0, r8
   1821e:	f003 fdf9 	bl	1be14 <memcpy>
   18222:	3408      	adds	r4, #8
   18224:	e7cb      	b.n	181be <gnss_interface_read+0xc6>
   18226:	bf00      	nop
   18228:	49765443 	.word	0x49765443
   1822c:	20020b58 	.word	0x20020b58
   18230:	20028520 	.word	0x20028520
   18234:	20020b60 	.word	0x20020b60
   18238:	2401      	movs	r4, #1
   1823a:	a809      	add	r0, sp, #36	; 0x24
   1823c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   1823e:	e9c8 0102 	strd	r0, r1, [r8, #8]
   18242:	e9c8 2304 	strd	r2, r3, [r8, #16]
   18246:	990d      	ldr	r1, [sp, #52]	; 0x34
   18248:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1824a:	f888 4000 	strb.w	r4, [r8]
   1824e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18250:	f8c8 1018 	str.w	r1, [r8, #24]
   18254:	9910      	ldr	r1, [sp, #64]	; 0x40
   18256:	f8c8 201c 	str.w	r2, [r8, #28]
   1825a:	f8c8 3020 	str.w	r3, [r8, #32]
   1825e:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   18262:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   18266:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
   1826a:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   1826e:	f888 2044 	strb.w	r2, [r8, #68]	; 0x44
   18272:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   18276:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
   1827a:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   1827e:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
   18282:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   18286:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
   1828a:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
   1828e:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   18292:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   18296:	f8a8 1028 	strh.w	r1, [r8, #40]	; 0x28
   1829a:	f888 302e 	strb.w	r3, [r8, #46]	; 0x2e
   1829e:	f8c8 202a 	str.w	r2, [r8, #42]	; 0x2a
   182a2:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   182a6:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   182aa:	9b18      	ldr	r3, [sp, #96]	; 0x60
   182ac:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   182b0:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   182b4:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   182b8:	f3c3 210f 	ubfx	r1, r3, #8, #16
   182bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   182be:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   182c2:	f8a8 0030 	strh.w	r0, [r8, #48]	; 0x30
   182c6:	f8a8 104a 	strh.w	r1, [r8, #74]	; 0x4a
   182ca:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   182ce:	f3c3 230f 	ubfx	r3, r3, #8, #16
   182d2:	f8a8 2056 	strh.w	r2, [r8, #86]	; 0x56
   182d6:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   182da:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
   182de:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   182e2:	f8a8 1046 	strh.w	r1, [r8, #70]	; 0x46
   182e6:	f888 2048 	strb.w	r2, [r8, #72]	; 0x48
   182ea:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   182ee:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   182f2:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
   182f6:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   182fa:	f888 1050 	strb.w	r1, [r8, #80]	; 0x50
   182fe:	f8a8 2052 	strh.w	r2, [r8, #82]	; 0x52
   18302:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
   18306:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   1830a:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   1830e:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   18312:	f8c8 1058 	str.w	r1, [r8, #88]	; 0x58
   18316:	f888 205c 	strb.w	r2, [r8, #92]	; 0x5c
   1831a:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   1831e:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   18322:	f8a8 305e 	strh.w	r3, [r8, #94]	; 0x5e
   18326:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   1832a:	f888 1060 	strb.w	r1, [r8, #96]	; 0x60
   1832e:	f8c8 2064 	str.w	r2, [r8, #100]	; 0x64
   18332:	f888 3068 	strb.w	r3, [r8, #104]	; 0x68
   18336:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   1833a:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   1833e:	9a22      	ldr	r2, [sp, #136]	; 0x88
   18340:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   18344:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   18348:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   1834c:	f3c2 220f 	ubfx	r2, r2, #8, #16
   18350:	f8a8 106e 	strh.w	r1, [r8, #110]	; 0x6e
   18354:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   18358:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1835c:	f8a8 207a 	strh.w	r2, [r8, #122]	; 0x7a
   18360:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   18364:	f8a8 3086 	strh.w	r3, [r8, #134]	; 0x86
   18368:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   1836c:	f8a8 106a 	strh.w	r1, [r8, #106]	; 0x6a
   18370:	f888 206c 	strb.w	r2, [r8, #108]	; 0x6c
   18374:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   18378:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   1837c:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
   18380:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   18384:	f888 1074 	strb.w	r1, [r8, #116]	; 0x74
   18388:	f8a8 2076 	strh.w	r2, [r8, #118]	; 0x76
   1838c:	f888 3078 	strb.w	r3, [r8, #120]	; 0x78
   18390:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   18394:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   18398:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   1839c:	f8c8 107c 	str.w	r1, [r8, #124]	; 0x7c
   183a0:	f888 2080 	strb.w	r2, [r8, #128]	; 0x80
   183a4:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   183a8:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   183ac:	f8a8 3082 	strh.w	r3, [r8, #130]	; 0x82
   183b0:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   183b4:	f888 1084 	strb.w	r1, [r8, #132]	; 0x84
   183b8:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
   183bc:	f888 308c 	strb.w	r3, [r8, #140]	; 0x8c
   183c0:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   183c4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   183c6:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   183ca:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   183ce:	f3c3 210f 	ubfx	r1, r3, #8, #16
   183d2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   183d4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   183d8:	f8a8 1092 	strh.w	r1, [r8, #146]	; 0x92
   183dc:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   183e0:	f8a8 209e 	strh.w	r2, [r8, #158]	; 0x9e
   183e4:	f3c3 230f 	ubfx	r3, r3, #8, #16
   183e8:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   183ec:	f8a8 008e 	strh.w	r0, [r8, #142]	; 0x8e
   183f0:	f8a8 30aa 	strh.w	r3, [r8, #170]	; 0xaa
   183f4:	f888 1090 	strb.w	r1, [r8, #144]	; 0x90
   183f8:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   183fc:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   18400:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
   18404:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   18408:	f888 3098 	strb.w	r3, [r8, #152]	; 0x98
   1840c:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   18410:	f8a8 109a 	strh.w	r1, [r8, #154]	; 0x9a
   18414:	f888 209c 	strb.w	r2, [r8, #156]	; 0x9c
   18418:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   1841c:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   18420:	f8c8 30a0 	str.w	r3, [r8, #160]	; 0xa0
   18424:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   18428:	f888 10a4 	strb.w	r1, [r8, #164]	; 0xa4
   1842c:	f8a8 20a6 	strh.w	r2, [r8, #166]	; 0xa6
   18430:	f888 30a8 	strb.w	r3, [r8, #168]	; 0xa8
   18434:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   18438:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   1843c:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   18440:	f8c8 10ac 	str.w	r1, [r8, #172]	; 0xac
   18444:	f888 20b0 	strb.w	r2, [r8, #176]	; 0xb0
   18448:	f8a8 30b2 	strh.w	r3, [r8, #178]	; 0xb2
   1844c:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   18450:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   18454:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   18458:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   1845a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   1845e:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   18462:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   18466:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1846a:	f3c2 220f 	ubfx	r2, r2, #8, #16
   1846e:	f8a8 10b6 	strh.w	r1, [r8, #182]	; 0xb6
   18472:	f8a8 30ce 	strh.w	r3, [r8, #206]	; 0xce
   18476:	f888 40b4 	strb.w	r4, [r8, #180]	; 0xb4
   1847a:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
   1847e:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   18482:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   18486:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   1848a:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   1848e:	f888 10bc 	strb.w	r1, [r8, #188]	; 0xbc
   18492:	f8a8 20be 	strh.w	r2, [r8, #190]	; 0xbe
   18496:	f8c8 00b8 	str.w	r0, [r8, #184]	; 0xb8
   1849a:	f888 30c0 	strb.w	r3, [r8, #192]	; 0xc0
   1849e:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   184a2:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   184a6:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   184aa:	f8c8 10c4 	str.w	r1, [r8, #196]	; 0xc4
   184ae:	f888 20c8 	strb.w	r2, [r8, #200]	; 0xc8
   184b2:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   184b6:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   184ba:	f8a8 30ca 	strh.w	r3, [r8, #202]	; 0xca
   184be:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   184c2:	f888 10cc 	strb.w	r1, [r8, #204]	; 0xcc
   184c6:	f8c8 20d0 	str.w	r2, [r8, #208]	; 0xd0
   184ca:	f888 30d4 	strb.w	r3, [r8, #212]	; 0xd4
   184ce:	24d8      	movs	r4, #216	; 0xd8
   184d0:	e675      	b.n	181be <gnss_interface_read+0xc6>
   184d2:	2016      	movs	r0, #22
   184d4:	f7f7 fa72 	bl	f9bc <bsd_os_errno_set>
   184d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   184dc:	e67a      	b.n	181d4 <gnss_interface_read+0xdc>
   184de:	2009      	movs	r0, #9
   184e0:	f7f7 fa6c 	bl	f9bc <bsd_os_errno_set>
   184e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   184e8:	e674      	b.n	181d4 <gnss_interface_read+0xdc>
   184ea:	2039      	movs	r0, #57	; 0x39
   184ec:	f7f7 fa66 	bl	f9bc <bsd_os_errno_set>
   184f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   184f4:	e66e      	b.n	181d4 <gnss_interface_read+0xdc>
   184f6:	bf00      	nop

000184f8 <gnss_interface_setopt>:
   184f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   184fc:	f241 1402 	movw	r4, #4354	; 0x1102
   18500:	4222      	tst	r2, r4
   18502:	b086      	sub	sp, #24
   18504:	4d9c      	ldr	r5, [pc, #624]	; (18778 <gnss_interface_setopt+0x280>)
   18506:	d004      	beq.n	18512 <gnss_interface_setopt+0x1a>
   18508:	682c      	ldr	r4, [r5, #0]
   1850a:	b2a4      	uxth	r4, r4
   1850c:	2c02      	cmp	r4, #2
   1850e:	f040 8104 	bne.w	1871a <gnss_interface_setopt+0x222>
   18512:	682c      	ldr	r4, [r5, #0]
   18514:	0264      	lsls	r4, r4, #9
   18516:	f100 8128 	bmi.w	1876a <gnss_interface_setopt+0x272>
   1851a:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1851e:	f040 811e 	bne.w	1875e <gnss_interface_setopt+0x266>
   18522:	4996      	ldr	r1, [pc, #600]	; (1877c <gnss_interface_setopt+0x284>)
   18524:	4288      	cmp	r0, r1
   18526:	f040 8114 	bne.w	18752 <gnss_interface_setopt+0x25a>
   1852a:	3a01      	subs	r2, #1
   1852c:	2a08      	cmp	r2, #8
   1852e:	f200 80ec 	bhi.w	1870a <gnss_interface_setopt+0x212>
   18532:	e8df f012 	tbh	[pc, r2, lsl #1]
   18536:	0075      	.short	0x0075
   18538:	00c200d8 	.word	0x00c200d8
   1853c:	008100cc 	.word	0x008100cc
   18540:	0098008c 	.word	0x0098008c
   18544:	000900af 	.word	0x000900af
   18548:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1854a:	2a01      	cmp	r2, #1
   1854c:	f040 80dd 	bne.w	1870a <gnss_interface_setopt+0x212>
   18550:	f241 1603 	movw	r6, #4355	; 0x1103
   18554:	2240      	movs	r2, #64	; 0x40
   18556:	4637      	mov	r7, r6
   18558:	781b      	ldrb	r3, [r3, #0]
   1855a:	9202      	str	r2, [sp, #8]
   1855c:	f88d 3015 	strb.w	r3, [sp, #21]
   18560:	682b      	ldr	r3, [r5, #0]
   18562:	2112      	movs	r1, #18
   18564:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   18568:	4668      	mov	r0, sp
   1856a:	602b      	str	r3, [r5, #0]
   1856c:	f000 fbe8 	bl	18d40 <rpc_gnss_client_request_alloc>
   18570:	4604      	mov	r4, r0
   18572:	9800      	ldr	r0, [sp, #0]
   18574:	2c00      	cmp	r4, #0
   18576:	f040 80d6 	bne.w	18726 <gnss_interface_setopt+0x22e>
   1857a:	2800      	cmp	r0, #0
   1857c:	f000 80da 	beq.w	18734 <gnss_interface_setopt+0x23c>
   18580:	2212      	movs	r2, #18
   18582:	f04f 0876 	mov.w	r8, #118	; 0x76
   18586:	f04f 0e49 	mov.w	lr, #73	; 0x49
   1858a:	f04f 0a43 	mov.w	sl, #67	; 0x43
   1858e:	f04f 0954 	mov.w	r9, #84	; 0x54
   18592:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 18784 <gnss_interface_setopt+0x28c>
   18596:	a906      	add	r1, sp, #24
   18598:	f8bc 3000 	ldrh.w	r3, [ip]
   1859c:	f880 800e 	strb.w	r8, [r0, #14]
   185a0:	3301      	adds	r3, #1
   185a2:	b29b      	uxth	r3, r3
   185a4:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   185a8:	f841 6d14 	str.w	r6, [r1, #-20]!
   185ac:	7144      	strb	r4, [r0, #5]
   185ae:	7184      	strb	r4, [r0, #6]
   185b0:	71c4      	strb	r4, [r0, #7]
   185b2:	7204      	strb	r4, [r0, #8]
   185b4:	7244      	strb	r4, [r0, #9]
   185b6:	7284      	strb	r4, [r0, #10]
   185b8:	72c4      	strb	r4, [r0, #11]
   185ba:	7102      	strb	r2, [r0, #4]
   185bc:	f880 a00c 	strb.w	sl, [r0, #12]
   185c0:	f880 900d 	strb.w	r9, [r0, #13]
   185c4:	f880 e00f 	strb.w	lr, [r0, #15]
   185c8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 18788 <gnss_interface_setopt+0x290>
   185cc:	6800      	ldr	r0, [r0, #0]
   185ce:	f8ac 3000 	strh.w	r3, [ip]
   185d2:	f003 fc1f 	bl	1be14 <memcpy>
   185d6:	4639      	mov	r1, r7
   185d8:	9800      	ldr	r0, [sp, #0]
   185da:	f8c8 4000 	str.w	r4, [r8]
   185de:	f000 fbc3 	bl	18d68 <rpc_gnss_client_request_send>
   185e2:	2800      	cmp	r0, #0
   185e4:	f040 80ab 	bne.w	1873e <gnss_interface_setopt+0x246>
   185e8:	4f65      	ldr	r7, [pc, #404]	; (18780 <gnss_interface_setopt+0x288>)
   185ea:	4e64      	ldr	r6, [pc, #400]	; (1877c <gnss_interface_setopt+0x284>)
   185ec:	4639      	mov	r1, r7
   185ee:	4630      	mov	r0, r6
   185f0:	f7f7 f950 	bl	f894 <bsd_os_timedwait>
   185f4:	682c      	ldr	r4, [r5, #0]
   185f6:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   185fa:	d1f7      	bne.n	185ec <gnss_interface_setopt+0xf4>
   185fc:	f8d8 0000 	ldr.w	r0, [r8]
   18600:	b118      	cbz	r0, 1860a <gnss_interface_setopt+0x112>
   18602:	f000 fbcf 	bl	18da4 <rpc_gnss_client_data_free>
   18606:	f8c8 4000 	str.w	r4, [r8]
   1860a:	682b      	ldr	r3, [r5, #0]
   1860c:	021b      	lsls	r3, r3, #8
   1860e:	d576      	bpl.n	186fe <gnss_interface_setopt+0x206>
   18610:	2000      	movs	r0, #0
   18612:	682b      	ldr	r3, [r5, #0]
   18614:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   18618:	602b      	str	r3, [r5, #0]
   1861a:	b006      	add	sp, #24
   1861c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18620:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18622:	2a02      	cmp	r2, #2
   18624:	d171      	bne.n	1870a <gnss_interface_setopt+0x212>
   18626:	2208      	movs	r2, #8
   18628:	f241 1603 	movw	r6, #4355	; 0x1103
   1862c:	881b      	ldrh	r3, [r3, #0]
   1862e:	9202      	str	r2, [sp, #8]
   18630:	f8ad 300f 	strh.w	r3, [sp, #15]
   18634:	4637      	mov	r7, r6
   18636:	e793      	b.n	18560 <gnss_interface_setopt+0x68>
   18638:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1863a:	2a01      	cmp	r2, #1
   1863c:	d165      	bne.n	1870a <gnss_interface_setopt+0x212>
   1863e:	f241 1603 	movw	r6, #4355	; 0x1103
   18642:	781b      	ldrb	r3, [r3, #0]
   18644:	9202      	str	r2, [sp, #8]
   18646:	f88d 300c 	strb.w	r3, [sp, #12]
   1864a:	4637      	mov	r7, r6
   1864c:	e788      	b.n	18560 <gnss_interface_setopt+0x68>
   1864e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18650:	2a01      	cmp	r2, #1
   18652:	d15a      	bne.n	1870a <gnss_interface_setopt+0x212>
   18654:	2202      	movs	r2, #2
   18656:	f241 1603 	movw	r6, #4355	; 0x1103
   1865a:	781b      	ldrb	r3, [r3, #0]
   1865c:	9202      	str	r2, [sp, #8]
   1865e:	f88d 300d 	strb.w	r3, [sp, #13]
   18662:	4637      	mov	r7, r6
   18664:	e77c      	b.n	18560 <gnss_interface_setopt+0x68>
   18666:	682a      	ldr	r2, [r5, #0]
   18668:	b292      	uxth	r2, r2
   1866a:	2a02      	cmp	r2, #2
   1866c:	d155      	bne.n	1871a <gnss_interface_setopt+0x222>
   1866e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18670:	2a04      	cmp	r2, #4
   18672:	d14a      	bne.n	1870a <gnss_interface_setopt+0x212>
   18674:	2101      	movs	r1, #1
   18676:	f241 0604 	movw	r6, #4100	; 0x1004
   1867a:	682a      	ldr	r2, [r5, #0]
   1867c:	6818      	ldr	r0, [r3, #0]
   1867e:	0c13      	lsrs	r3, r2, #16
   18680:	041b      	lsls	r3, r3, #16
   18682:	f043 0303 	orr.w	r3, r3, #3
   18686:	f8cd 0009 	str.w	r0, [sp, #9]
   1868a:	602b      	str	r3, [r5, #0]
   1868c:	f88d 1008 	strb.w	r1, [sp, #8]
   18690:	4637      	mov	r7, r6
   18692:	e765      	b.n	18560 <gnss_interface_setopt+0x68>
   18694:	682b      	ldr	r3, [r5, #0]
   18696:	b29b      	uxth	r3, r3
   18698:	2b04      	cmp	r3, #4
   1869a:	d13e      	bne.n	1871a <gnss_interface_setopt+0x222>
   1869c:	2300      	movs	r3, #0
   1869e:	f241 0604 	movw	r6, #4100	; 0x1004
   186a2:	f88d 3008 	strb.w	r3, [sp, #8]
   186a6:	f88d 3009 	strb.w	r3, [sp, #9]
   186aa:	f88d 300a 	strb.w	r3, [sp, #10]
   186ae:	f88d 300b 	strb.w	r3, [sp, #11]
   186b2:	f88d 300c 	strb.w	r3, [sp, #12]
   186b6:	4637      	mov	r7, r6
   186b8:	e752      	b.n	18560 <gnss_interface_setopt+0x68>
   186ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   186bc:	2a01      	cmp	r2, #1
   186be:	d124      	bne.n	1870a <gnss_interface_setopt+0x212>
   186c0:	781b      	ldrb	r3, [r3, #0]
   186c2:	2b01      	cmp	r3, #1
   186c4:	d121      	bne.n	1870a <gnss_interface_setopt+0x212>
   186c6:	f241 1603 	movw	r6, #4355	; 0x1103
   186ca:	4637      	mov	r7, r6
   186cc:	e748      	b.n	18560 <gnss_interface_setopt+0x68>
   186ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   186d0:	2a02      	cmp	r2, #2
   186d2:	d11a      	bne.n	1870a <gnss_interface_setopt+0x212>
   186d4:	2220      	movs	r2, #32
   186d6:	f241 1603 	movw	r6, #4355	; 0x1103
   186da:	881b      	ldrh	r3, [r3, #0]
   186dc:	9202      	str	r2, [sp, #8]
   186de:	f8ad 3013 	strh.w	r3, [sp, #19]
   186e2:	4637      	mov	r7, r6
   186e4:	e73c      	b.n	18560 <gnss_interface_setopt+0x68>
   186e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   186e8:	2a02      	cmp	r2, #2
   186ea:	d10e      	bne.n	1870a <gnss_interface_setopt+0x212>
   186ec:	2210      	movs	r2, #16
   186ee:	f241 1603 	movw	r6, #4355	; 0x1103
   186f2:	881b      	ldrh	r3, [r3, #0]
   186f4:	9202      	str	r2, [sp, #8]
   186f6:	f8ad 3011 	strh.w	r3, [sp, #17]
   186fa:	4637      	mov	r7, r6
   186fc:	e730      	b.n	18560 <gnss_interface_setopt+0x68>
   186fe:	200e      	movs	r0, #14
   18700:	f7f7 f95c 	bl	f9bc <bsd_os_errno_set>
   18704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18708:	e783      	b.n	18612 <gnss_interface_setopt+0x11a>
   1870a:	2016      	movs	r0, #22
   1870c:	f7f7 f956 	bl	f9bc <bsd_os_errno_set>
   18710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18714:	b006      	add	sp, #24
   18716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1871a:	200e      	movs	r0, #14
   1871c:	f7f7 f94e 	bl	f9bc <bsd_os_errno_set>
   18720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18724:	e779      	b.n	1861a <gnss_interface_setopt+0x122>
   18726:	b128      	cbz	r0, 18734 <gnss_interface_setopt+0x23c>
   18728:	6803      	ldr	r3, [r0, #0]
   1872a:	b11b      	cbz	r3, 18734 <gnss_interface_setopt+0x23c>
   1872c:	4618      	mov	r0, r3
   1872e:	f000 fb39 	bl	18da4 <rpc_gnss_client_data_free>
   18732:	9800      	ldr	r0, [sp, #0]
   18734:	f000 fb2e 	bl	18d94 <rpc_gnss_client_message_free>
   18738:	2023      	movs	r0, #35	; 0x23
   1873a:	f7f7 f93f 	bl	f9bc <bsd_os_errno_set>
   1873e:	682b      	ldr	r3, [r5, #0]
   18740:	200e      	movs	r0, #14
   18742:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   18746:	602b      	str	r3, [r5, #0]
   18748:	f7f7 f938 	bl	f9bc <bsd_os_errno_set>
   1874c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18750:	e763      	b.n	1861a <gnss_interface_setopt+0x122>
   18752:	2009      	movs	r0, #9
   18754:	f7f7 f932 	bl	f9bc <bsd_os_errno_set>
   18758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1875c:	e75d      	b.n	1861a <gnss_interface_setopt+0x122>
   1875e:	202a      	movs	r0, #42	; 0x2a
   18760:	f7f7 f92c 	bl	f9bc <bsd_os_errno_set>
   18764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18768:	e757      	b.n	1861a <gnss_interface_setopt+0x122>
   1876a:	2073      	movs	r0, #115	; 0x73
   1876c:	f7f7 f926 	bl	f9bc <bsd_os_errno_set>
   18770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18774:	e751      	b.n	1861a <gnss_interface_setopt+0x122>
   18776:	bf00      	nop
   18778:	20020b58 	.word	0x20020b58
   1877c:	49765443 	.word	0x49765443
   18780:	20028520 	.word	0x20028520
   18784:	20021e24 	.word	0x20021e24
   18788:	20020b5c 	.word	0x20020b5c

0001878c <gnss_interface_getopt>:
   1878c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18790:	4c81      	ldr	r4, [pc, #516]	; (18998 <gnss_interface_getopt+0x20c>)
   18792:	b087      	sub	sp, #28
   18794:	6825      	ldr	r5, [r4, #0]
   18796:	4698      	mov	r8, r3
   18798:	b2ad      	uxth	r5, r5
   1879a:	2d02      	cmp	r5, #2
   1879c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1879e:	f040 80dd 	bne.w	1895c <gnss_interface_getopt+0x1d0>
   187a2:	6825      	ldr	r5, [r4, #0]
   187a4:	03ee      	lsls	r6, r5, #15
   187a6:	f100 80eb 	bmi.w	18980 <gnss_interface_getopt+0x1f4>
   187aa:	6825      	ldr	r5, [r4, #0]
   187ac:	01ed      	lsls	r5, r5, #7
   187ae:	f100 80ed 	bmi.w	1898c <gnss_interface_getopt+0x200>
   187b2:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   187b6:	f040 80d7 	bne.w	18968 <gnss_interface_getopt+0x1dc>
   187ba:	4978      	ldr	r1, [pc, #480]	; (1899c <gnss_interface_getopt+0x210>)
   187bc:	4288      	cmp	r0, r1
   187be:	f040 80d9 	bne.w	18974 <gnss_interface_getopt+0x1e8>
   187c2:	f1b8 0f00 	cmp.w	r8, #0
   187c6:	d00b      	beq.n	187e0 <gnss_interface_getopt+0x54>
   187c8:	b153      	cbz	r3, 187e0 <gnss_interface_getopt+0x54>
   187ca:	1e57      	subs	r7, r2, #1
   187cc:	2f05      	cmp	r7, #5
   187ce:	d807      	bhi.n	187e0 <gnss_interface_getopt+0x54>
   187d0:	e8df f007 	tbb	[pc, r7]
   187d4:	0f030f0f 	.word	0x0f030f0f
   187d8:	0303      	.short	0x0303
   187da:	681b      	ldr	r3, [r3, #0]
   187dc:	2b01      	cmp	r3, #1
   187de:	d00b      	beq.n	187f8 <gnss_interface_getopt+0x6c>
   187e0:	2016      	movs	r0, #22
   187e2:	f7f7 f8eb 	bl	f9bc <bsd_os_errno_set>
   187e6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   187ea:	4628      	mov	r0, r5
   187ec:	b007      	add	sp, #28
   187ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   187f2:	681b      	ldr	r3, [r3, #0]
   187f4:	2b02      	cmp	r3, #2
   187f6:	d1f3      	bne.n	187e0 <gnss_interface_getopt+0x54>
   187f8:	6823      	ldr	r3, [r4, #0]
   187fa:	2212      	movs	r2, #18
   187fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   18800:	2100      	movs	r1, #0
   18802:	a801      	add	r0, sp, #4
   18804:	6023      	str	r3, [r4, #0]
   18806:	f003 fb2f 	bl	1be68 <memset>
   1880a:	2112      	movs	r1, #18
   1880c:	4668      	mov	r0, sp
   1880e:	f000 fa97 	bl	18d40 <rpc_gnss_client_request_alloc>
   18812:	4605      	mov	r5, r0
   18814:	9800      	ldr	r0, [sp, #0]
   18816:	2d00      	cmp	r5, #0
   18818:	f040 808a 	bne.w	18930 <gnss_interface_getopt+0x1a4>
   1881c:	2800      	cmp	r0, #0
   1881e:	f000 808e 	beq.w	1893e <gnss_interface_getopt+0x1b2>
   18822:	f241 1602 	movw	r6, #4354	; 0x1102
   18826:	f04f 0e49 	mov.w	lr, #73	; 0x49
   1882a:	2212      	movs	r2, #18
   1882c:	f04f 0976 	mov.w	r9, #118	; 0x76
   18830:	f04f 0b43 	mov.w	fp, #67	; 0x43
   18834:	f04f 0a54 	mov.w	sl, #84	; 0x54
   18838:	f8df c168 	ldr.w	ip, [pc, #360]	; 189a4 <gnss_interface_getopt+0x218>
   1883c:	f880 e00f 	strb.w	lr, [r0, #15]
   18840:	f8bc 3000 	ldrh.w	r3, [ip]
   18844:	f880 900e 	strb.w	r9, [r0, #14]
   18848:	3301      	adds	r3, #1
   1884a:	b29b      	uxth	r3, r3
   1884c:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   18850:	f8cd e004 	str.w	lr, [sp, #4]
   18854:	7145      	strb	r5, [r0, #5]
   18856:	7185      	strb	r5, [r0, #6]
   18858:	71c5      	strb	r5, [r0, #7]
   1885a:	7205      	strb	r5, [r0, #8]
   1885c:	7245      	strb	r5, [r0, #9]
   1885e:	7285      	strb	r5, [r0, #10]
   18860:	72c5      	strb	r5, [r0, #11]
   18862:	a901      	add	r1, sp, #4
   18864:	7102      	strb	r2, [r0, #4]
   18866:	f880 b00c 	strb.w	fp, [r0, #12]
   1886a:	f880 a00d 	strb.w	sl, [r0, #13]
   1886e:	f8df 9138 	ldr.w	r9, [pc, #312]	; 189a8 <gnss_interface_getopt+0x21c>
   18872:	6800      	ldr	r0, [r0, #0]
   18874:	f8ac 3000 	strh.w	r3, [ip]
   18878:	f003 facc 	bl	1be14 <memcpy>
   1887c:	4631      	mov	r1, r6
   1887e:	9800      	ldr	r0, [sp, #0]
   18880:	f8c9 5000 	str.w	r5, [r9]
   18884:	f000 fa70 	bl	18d68 <rpc_gnss_client_request_send>
   18888:	2800      	cmp	r0, #0
   1888a:	d15d      	bne.n	18948 <gnss_interface_getopt+0x1bc>
   1888c:	4e44      	ldr	r6, [pc, #272]	; (189a0 <gnss_interface_getopt+0x214>)
   1888e:	4d43      	ldr	r5, [pc, #268]	; (1899c <gnss_interface_getopt+0x210>)
   18890:	4631      	mov	r1, r6
   18892:	4628      	mov	r0, r5
   18894:	f7f6 fffe 	bl	f894 <bsd_os_timedwait>
   18898:	6823      	ldr	r3, [r4, #0]
   1889a:	01db      	lsls	r3, r3, #7
   1889c:	d4f8      	bmi.n	18890 <gnss_interface_getopt+0x104>
   1889e:	f8d9 0000 	ldr.w	r0, [r9]
   188a2:	b1d8      	cbz	r0, 188dc <gnss_interface_getopt+0x150>
   188a4:	6825      	ldr	r5, [r4, #0]
   188a6:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   188aa:	d00f      	beq.n	188cc <gnss_interface_getopt+0x140>
   188ac:	2f05      	cmp	r7, #5
   188ae:	d837      	bhi.n	18920 <gnss_interface_getopt+0x194>
   188b0:	e8df f007 	tbb	[pc, r7]
   188b4:	2b26201a 	.word	0x2b26201a
   188b8:	0331      	.short	0x0331
   188ba:	2500      	movs	r5, #0
   188bc:	7b43      	ldrb	r3, [r0, #13]
   188be:	f888 3000 	strb.w	r3, [r8]
   188c2:	f000 fa6f 	bl	18da4 <rpc_gnss_client_data_free>
   188c6:	2300      	movs	r3, #0
   188c8:	f8c9 3000 	str.w	r3, [r9]
   188cc:	6823      	ldr	r3, [r4, #0]
   188ce:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   188d2:	6023      	str	r3, [r4, #0]
   188d4:	4628      	mov	r0, r5
   188d6:	b007      	add	sp, #28
   188d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188dc:	6823      	ldr	r3, [r4, #0]
   188de:	4605      	mov	r5, r0
   188e0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   188e4:	6023      	str	r3, [r4, #0]
   188e6:	e7f5      	b.n	188d4 <gnss_interface_getopt+0x148>
   188e8:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   188ec:	2500      	movs	r5, #0
   188ee:	f8a8 3000 	strh.w	r3, [r8]
   188f2:	e7e6      	b.n	188c2 <gnss_interface_getopt+0x136>
   188f4:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   188f8:	2500      	movs	r5, #0
   188fa:	f8a8 3000 	strh.w	r3, [r8]
   188fe:	e7e0      	b.n	188c2 <gnss_interface_getopt+0x136>
   18900:	7b83      	ldrb	r3, [r0, #14]
   18902:	2500      	movs	r5, #0
   18904:	f888 3000 	strb.w	r3, [r8]
   18908:	e7db      	b.n	188c2 <gnss_interface_getopt+0x136>
   1890a:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   1890e:	2500      	movs	r5, #0
   18910:	f8a8 3000 	strh.w	r3, [r8]
   18914:	e7d5      	b.n	188c2 <gnss_interface_getopt+0x136>
   18916:	7b03      	ldrb	r3, [r0, #12]
   18918:	2500      	movs	r5, #0
   1891a:	f888 3000 	strb.w	r3, [r8]
   1891e:	e7d0      	b.n	188c2 <gnss_interface_getopt+0x136>
   18920:	2016      	movs	r0, #22
   18922:	f7f7 f84b 	bl	f9bc <bsd_os_errno_set>
   18926:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1892a:	f8d9 0000 	ldr.w	r0, [r9]
   1892e:	e7c8      	b.n	188c2 <gnss_interface_getopt+0x136>
   18930:	b128      	cbz	r0, 1893e <gnss_interface_getopt+0x1b2>
   18932:	6803      	ldr	r3, [r0, #0]
   18934:	b11b      	cbz	r3, 1893e <gnss_interface_getopt+0x1b2>
   18936:	4618      	mov	r0, r3
   18938:	f000 fa34 	bl	18da4 <rpc_gnss_client_data_free>
   1893c:	9800      	ldr	r0, [sp, #0]
   1893e:	f000 fa29 	bl	18d94 <rpc_gnss_client_message_free>
   18942:	2023      	movs	r0, #35	; 0x23
   18944:	f7f7 f83a 	bl	f9bc <bsd_os_errno_set>
   18948:	6823      	ldr	r3, [r4, #0]
   1894a:	200e      	movs	r0, #14
   1894c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   18950:	6023      	str	r3, [r4, #0]
   18952:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18956:	f7f7 f831 	bl	f9bc <bsd_os_errno_set>
   1895a:	e746      	b.n	187ea <gnss_interface_getopt+0x5e>
   1895c:	200e      	movs	r0, #14
   1895e:	f7f7 f82d 	bl	f9bc <bsd_os_errno_set>
   18962:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18966:	e740      	b.n	187ea <gnss_interface_getopt+0x5e>
   18968:	202a      	movs	r0, #42	; 0x2a
   1896a:	f7f7 f827 	bl	f9bc <bsd_os_errno_set>
   1896e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18972:	e73a      	b.n	187ea <gnss_interface_getopt+0x5e>
   18974:	2009      	movs	r0, #9
   18976:	f7f7 f821 	bl	f9bc <bsd_os_errno_set>
   1897a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1897e:	e734      	b.n	187ea <gnss_interface_getopt+0x5e>
   18980:	2005      	movs	r0, #5
   18982:	f7f7 f81b 	bl	f9bc <bsd_os_errno_set>
   18986:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1898a:	e72e      	b.n	187ea <gnss_interface_getopt+0x5e>
   1898c:	2073      	movs	r0, #115	; 0x73
   1898e:	f7f7 f815 	bl	f9bc <bsd_os_errno_set>
   18992:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18996:	e728      	b.n	187ea <gnss_interface_getopt+0x5e>
   18998:	20020b58 	.word	0x20020b58
   1899c:	49765443 	.word	0x49765443
   189a0:	20028520 	.word	0x20028520
   189a4:	20021e24 	.word	0x20021e24
   189a8:	20020b5c 	.word	0x20020b5c

000189ac <gnss_interface_init>:
   189ac:	2100      	movs	r1, #0
   189ae:	b538      	push	{r3, r4, r5, lr}
   189b0:	4c09      	ldr	r4, [pc, #36]	; (189d8 <gnss_interface_init+0x2c>)
   189b2:	4d0a      	ldr	r5, [pc, #40]	; (189dc <gnss_interface_init+0x30>)
   189b4:	6822      	ldr	r2, [r4, #0]
   189b6:	480a      	ldr	r0, [pc, #40]	; (189e0 <gnss_interface_init+0x34>)
   189b8:	4b0a      	ldr	r3, [pc, #40]	; (189e4 <gnss_interface_init+0x38>)
   189ba:	402a      	ands	r2, r5
   189bc:	6022      	str	r2, [r4, #0]
   189be:	8001      	strh	r1, [r0, #0]
   189c0:	6019      	str	r1, [r3, #0]
   189c2:	f000 f9b7 	bl	18d34 <rpc_gnss_client_init>
   189c6:	b928      	cbnz	r0, 189d4 <gnss_interface_init+0x28>
   189c8:	6823      	ldr	r3, [r4, #0]
   189ca:	402b      	ands	r3, r5
   189cc:	f043 0301 	orr.w	r3, r3, #1
   189d0:	6023      	str	r3, [r4, #0]
   189d2:	bd38      	pop	{r3, r4, r5, pc}
   189d4:	2003      	movs	r0, #3
   189d6:	bd38      	pop	{r3, r4, r5, pc}
   189d8:	20020b58 	.word	0x20020b58
   189dc:	ffff0000 	.word	0xffff0000
   189e0:	20021e24 	.word	0x20021e24
   189e4:	20020b5c 	.word	0x20020b5c

000189e8 <gnss_interface_open>:
   189e8:	2801      	cmp	r0, #1
   189ea:	b510      	push	{r4, lr}
   189ec:	d120      	bne.n	18a30 <gnss_interface_open+0x48>
   189ee:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   189f2:	d11d      	bne.n	18a30 <gnss_interface_open+0x48>
   189f4:	2902      	cmp	r1, #2
   189f6:	d11b      	bne.n	18a30 <gnss_interface_open+0x48>
   189f8:	4c13      	ldr	r4, [pc, #76]	; (18a48 <gnss_interface_open+0x60>)
   189fa:	6823      	ldr	r3, [r4, #0]
   189fc:	b29b      	uxth	r3, r3
   189fe:	2b01      	cmp	r3, #1
   18a00:	d11c      	bne.n	18a3c <gnss_interface_open+0x54>
   18a02:	6823      	ldr	r3, [r4, #0]
   18a04:	4608      	mov	r0, r1
   18a06:	0c1b      	lsrs	r3, r3, #16
   18a08:	041b      	lsls	r3, r3, #16
   18a0a:	f043 0302 	orr.w	r3, r3, #2
   18a0e:	2200      	movs	r2, #0
   18a10:	490e      	ldr	r1, [pc, #56]	; (18a4c <gnss_interface_open+0x64>)
   18a12:	6023      	str	r3, [r4, #0]
   18a14:	f000 faac 	bl	18f70 <packet_handler_create>
   18a18:	4a0d      	ldr	r2, [pc, #52]	; (18a50 <gnss_interface_open+0x68>)
   18a1a:	6010      	str	r0, [r2, #0]
   18a1c:	b170      	cbz	r0, 18a3c <gnss_interface_open+0x54>
   18a1e:	6823      	ldr	r3, [r4, #0]
   18a20:	6802      	ldr	r2, [r0, #0]
   18a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   18a26:	6812      	ldr	r2, [r2, #0]
   18a28:	6023      	str	r3, [r4, #0]
   18a2a:	4790      	blx	r2
   18a2c:	4809      	ldr	r0, [pc, #36]	; (18a54 <gnss_interface_open+0x6c>)
   18a2e:	bd10      	pop	{r4, pc}
   18a30:	2016      	movs	r0, #22
   18a32:	f7f6 ffc3 	bl	f9bc <bsd_os_errno_set>
   18a36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18a3a:	bd10      	pop	{r4, pc}
   18a3c:	200e      	movs	r0, #14
   18a3e:	f7f6 ffbd 	bl	f9bc <bsd_os_errno_set>
   18a42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18a46:	bd10      	pop	{r4, pc}
   18a48:	20020b58 	.word	0x20020b58
   18a4c:	00017d45 	.word	0x00017d45
   18a50:	20020b60 	.word	0x20020b60
   18a54:	49765443 	.word	0x49765443

00018a58 <gnss_interface_close>:
   18a58:	b530      	push	{r4, r5, lr}
   18a5a:	4b13      	ldr	r3, [pc, #76]	; (18aa8 <gnss_interface_close+0x50>)
   18a5c:	b083      	sub	sp, #12
   18a5e:	4298      	cmp	r0, r3
   18a60:	d11c      	bne.n	18a9c <gnss_interface_close+0x44>
   18a62:	4c12      	ldr	r4, [pc, #72]	; (18aac <gnss_interface_close+0x54>)
   18a64:	6823      	ldr	r3, [r4, #0]
   18a66:	b29b      	uxth	r3, r3
   18a68:	2b04      	cmp	r3, #4
   18a6a:	d00f      	beq.n	18a8c <gnss_interface_close+0x34>
   18a6c:	4d10      	ldr	r5, [pc, #64]	; (18ab0 <gnss_interface_close+0x58>)
   18a6e:	6828      	ldr	r0, [r5, #0]
   18a70:	b118      	cbz	r0, 18a7a <gnss_interface_close+0x22>
   18a72:	f000 fa9d 	bl	18fb0 <packet_handler_delete>
   18a76:	2300      	movs	r3, #0
   18a78:	602b      	str	r3, [r5, #0]
   18a7a:	2000      	movs	r0, #0
   18a7c:	6823      	ldr	r3, [r4, #0]
   18a7e:	0c1b      	lsrs	r3, r3, #16
   18a80:	041b      	lsls	r3, r3, #16
   18a82:	f043 0301 	orr.w	r3, r3, #1
   18a86:	6023      	str	r3, [r4, #0]
   18a88:	b003      	add	sp, #12
   18a8a:	bd30      	pop	{r4, r5, pc}
   18a8c:	2300      	movs	r3, #0
   18a8e:	2208      	movs	r2, #8
   18a90:	9300      	str	r3, [sp, #0]
   18a92:	f44f 7101 	mov.w	r1, #516	; 0x204
   18a96:	f7fc febf 	bl	15818 <nrf_setsockopt>
   18a9a:	e7e7      	b.n	18a6c <gnss_interface_close+0x14>
   18a9c:	2009      	movs	r0, #9
   18a9e:	f7f6 ff8d 	bl	f9bc <bsd_os_errno_set>
   18aa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18aa6:	e7ef      	b.n	18a88 <gnss_interface_close+0x30>
   18aa8:	49765443 	.word	0x49765443
   18aac:	20020b58 	.word	0x20020b58
   18ab0:	20020b60 	.word	0x20020b60

00018ab4 <rpc_gnss_serialize_utc>:
   18ab4:	4603      	mov	r3, r0
   18ab6:	b1d8      	cbz	r0, 18af0 <rpc_gnss_serialize_utc+0x3c>
   18ab8:	b1d1      	cbz	r1, 18af0 <rpc_gnss_serialize_utc+0x3c>
   18aba:	2000      	movs	r0, #0
   18abc:	2201      	movs	r2, #1
   18abe:	7048      	strb	r0, [r1, #1]
   18ac0:	700a      	strb	r2, [r1, #0]
   18ac2:	685a      	ldr	r2, [r3, #4]
   18ac4:	2010      	movs	r0, #16
   18ac6:	f8c1 2006 	str.w	r2, [r1, #6]
   18aca:	681a      	ldr	r2, [r3, #0]
   18acc:	f8c1 2002 	str.w	r2, [r1, #2]
   18ad0:	f993 200a 	ldrsb.w	r2, [r3, #10]
   18ad4:	730a      	strb	r2, [r1, #12]
   18ad6:	f993 200d 	ldrsb.w	r2, [r3, #13]
   18ada:	73ca      	strb	r2, [r1, #15]
   18adc:	f993 200c 	ldrsb.w	r2, [r3, #12]
   18ae0:	738a      	strb	r2, [r1, #14]
   18ae2:	7a1a      	ldrb	r2, [r3, #8]
   18ae4:	728a      	strb	r2, [r1, #10]
   18ae6:	7ada      	ldrb	r2, [r3, #11]
   18ae8:	734a      	strb	r2, [r1, #13]
   18aea:	7a5b      	ldrb	r3, [r3, #9]
   18aec:	72cb      	strb	r3, [r1, #11]
   18aee:	4770      	bx	lr
   18af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18af4:	4770      	bx	lr
   18af6:	bf00      	nop

00018af8 <rpc_gnss_serialize_ephe>:
   18af8:	4603      	mov	r3, r0
   18afa:	2800      	cmp	r0, #0
   18afc:	d04b      	beq.n	18b96 <rpc_gnss_serialize_ephe+0x9e>
   18afe:	2900      	cmp	r1, #0
   18b00:	d049      	beq.n	18b96 <rpc_gnss_serialize_ephe+0x9e>
   18b02:	2000      	movs	r0, #0
   18b04:	2202      	movs	r2, #2
   18b06:	7048      	strb	r0, [r1, #1]
   18b08:	700a      	strb	r2, [r1, #0]
   18b0a:	68da      	ldr	r2, [r3, #12]
   18b0c:	2040      	movs	r0, #64	; 0x40
   18b0e:	f8c1 200b 	str.w	r2, [r1, #11]
   18b12:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   18b16:	f8a1 2009 	strh.w	r2, [r1, #9]
   18b1a:	f993 2006 	ldrsb.w	r2, [r3, #6]
   18b1e:	720a      	strb	r2, [r1, #8]
   18b20:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   18b24:	878a      	strh	r2, [r1, #60]	; 0x3c
   18b26:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   18b2a:	86ca      	strh	r2, [r1, #54]	; 0x36
   18b2c:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   18b30:	874a      	strh	r2, [r1, #58]	; 0x3a
   18b32:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   18b36:	868a      	strh	r2, [r1, #52]	; 0x34
   18b38:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   18b3c:	87ca      	strh	r2, [r1, #62]	; 0x3e
   18b3e:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   18b42:	870a      	strh	r2, [r1, #56]	; 0x38
   18b44:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   18b48:	830a      	strh	r2, [r1, #24]
   18b4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18b4c:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   18b50:	7c9a      	ldrb	r2, [r3, #18]
   18b52:	744a      	strb	r2, [r1, #17]
   18b54:	785a      	ldrb	r2, [r3, #1]
   18b56:	70ca      	strb	r2, [r1, #3]
   18b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   18b5a:	62ca      	str	r2, [r1, #44]	; 0x2c
   18b5c:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   18b60:	84ca      	strh	r2, [r1, #38]	; 0x26
   18b62:	885a      	ldrh	r2, [r3, #2]
   18b64:	808a      	strh	r2, [r1, #4]
   18b66:	6a1a      	ldr	r2, [r3, #32]
   18b68:	f8c1 201a 	str.w	r2, [r1, #26]
   18b6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   18b6e:	630a      	str	r2, [r1, #48]	; 0x30
   18b70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   18b72:	f8c1 201e 	str.w	r2, [r1, #30]
   18b76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   18b78:	628a      	str	r2, [r1, #40]	; 0x28
   18b7a:	781a      	ldrb	r2, [r3, #0]
   18b7c:	708a      	strb	r2, [r1, #2]
   18b7e:	f993 2010 	ldrsb.w	r2, [r3, #16]
   18b82:	73ca      	strb	r2, [r1, #15]
   18b84:	889a      	ldrh	r2, [r3, #4]
   18b86:	80ca      	strh	r2, [r1, #6]
   18b88:	8a9a      	ldrh	r2, [r3, #20]
   18b8a:	824a      	strh	r2, [r1, #18]
   18b8c:	7c5a      	ldrb	r2, [r3, #17]
   18b8e:	740a      	strb	r2, [r1, #16]
   18b90:	699b      	ldr	r3, [r3, #24]
   18b92:	614b      	str	r3, [r1, #20]
   18b94:	4770      	bx	lr
   18b96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18b9a:	4770      	bx	lr

00018b9c <rpc_gnss_serialize_alm>:
   18b9c:	4603      	mov	r3, r0
   18b9e:	b360      	cbz	r0, 18bfa <rpc_gnss_serialize_alm+0x5e>
   18ba0:	b359      	cbz	r1, 18bfa <rpc_gnss_serialize_alm+0x5e>
   18ba2:	2000      	movs	r0, #0
   18ba4:	2203      	movs	r2, #3
   18ba6:	7048      	strb	r0, [r1, #1]
   18ba8:	700a      	strb	r2, [r1, #0]
   18baa:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   18bae:	2021      	movs	r0, #33	; 0x21
   18bb0:	f8a1 201d 	strh.w	r2, [r1, #29]
   18bb4:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   18bb8:	f8a1 201f 	strh.w	r2, [r1, #31]
   18bbc:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   18bc0:	810a      	strh	r2, [r1, #8]
   18bc2:	889a      	ldrh	r2, [r3, #4]
   18bc4:	80ca      	strh	r2, [r1, #6]
   18bc6:	78da      	ldrb	r2, [r3, #3]
   18bc8:	714a      	strb	r2, [r1, #5]
   18bca:	699a      	ldr	r2, [r3, #24]
   18bcc:	f8c1 2019 	str.w	r2, [r1, #25]
   18bd0:	691a      	ldr	r2, [r3, #16]
   18bd2:	f8c1 2011 	str.w	r2, [r1, #17]
   18bd6:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   18bda:	814a      	strh	r2, [r1, #10]
   18bdc:	68da      	ldr	r2, [r3, #12]
   18bde:	f8c1 200d 	str.w	r2, [r1, #13]
   18be2:	7a9a      	ldrb	r2, [r3, #10]
   18be4:	730a      	strb	r2, [r1, #12]
   18be6:	781a      	ldrb	r2, [r3, #0]
   18be8:	708a      	strb	r2, [r1, #2]
   18bea:	789a      	ldrb	r2, [r3, #2]
   18bec:	710a      	strb	r2, [r1, #4]
   18bee:	695a      	ldr	r2, [r3, #20]
   18bf0:	f8c1 2015 	str.w	r2, [r1, #21]
   18bf4:	785b      	ldrb	r3, [r3, #1]
   18bf6:	70cb      	strb	r3, [r1, #3]
   18bf8:	4770      	bx	lr
   18bfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18bfe:	4770      	bx	lr

00018c00 <rpc_gnss_serialize_klob>:
   18c00:	4603      	mov	r3, r0
   18c02:	b1f0      	cbz	r0, 18c42 <rpc_gnss_serialize_klob+0x42>
   18c04:	b1e9      	cbz	r1, 18c42 <rpc_gnss_serialize_klob+0x42>
   18c06:	2000      	movs	r0, #0
   18c08:	2204      	movs	r2, #4
   18c0a:	7048      	strb	r0, [r1, #1]
   18c0c:	700a      	strb	r2, [r1, #0]
   18c0e:	f993 2000 	ldrsb.w	r2, [r3]
   18c12:	200a      	movs	r0, #10
   18c14:	708a      	strb	r2, [r1, #2]
   18c16:	f993 2001 	ldrsb.w	r2, [r3, #1]
   18c1a:	70ca      	strb	r2, [r1, #3]
   18c1c:	f993 2002 	ldrsb.w	r2, [r3, #2]
   18c20:	710a      	strb	r2, [r1, #4]
   18c22:	f993 2003 	ldrsb.w	r2, [r3, #3]
   18c26:	714a      	strb	r2, [r1, #5]
   18c28:	f993 2004 	ldrsb.w	r2, [r3, #4]
   18c2c:	718a      	strb	r2, [r1, #6]
   18c2e:	f993 2005 	ldrsb.w	r2, [r3, #5]
   18c32:	71ca      	strb	r2, [r1, #7]
   18c34:	f993 2006 	ldrsb.w	r2, [r3, #6]
   18c38:	720a      	strb	r2, [r1, #8]
   18c3a:	f993 3007 	ldrsb.w	r3, [r3, #7]
   18c3e:	724b      	strb	r3, [r1, #9]
   18c40:	4770      	bx	lr
   18c42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18c46:	4770      	bx	lr

00018c48 <rpc_gnss_serialize_nequick>:
   18c48:	4603      	mov	r3, r0
   18c4a:	b198      	cbz	r0, 18c74 <rpc_gnss_serialize_nequick+0x2c>
   18c4c:	b191      	cbz	r1, 18c74 <rpc_gnss_serialize_nequick+0x2c>
   18c4e:	2000      	movs	r0, #0
   18c50:	2205      	movs	r2, #5
   18c52:	7048      	strb	r0, [r1, #1]
   18c54:	700a      	strb	r2, [r1, #0]
   18c56:	f9b3 2000 	ldrsh.w	r2, [r3]
   18c5a:	200a      	movs	r0, #10
   18c5c:	804a      	strh	r2, [r1, #2]
   18c5e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   18c62:	808a      	strh	r2, [r1, #4]
   18c64:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   18c68:	80ca      	strh	r2, [r1, #6]
   18c6a:	799a      	ldrb	r2, [r3, #6]
   18c6c:	720a      	strb	r2, [r1, #8]
   18c6e:	79db      	ldrb	r3, [r3, #7]
   18c70:	724b      	strb	r3, [r1, #9]
   18c72:	4770      	bx	lr
   18c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18c78:	4770      	bx	lr
   18c7a:	bf00      	nop

00018c7c <rpc_gnss_serialize_time_and_sv_tow>:
   18c7c:	b310      	cbz	r0, 18cc4 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   18c7e:	b309      	cbz	r1, 18cc4 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   18c80:	b470      	push	{r4, r5, r6}
   18c82:	2500      	movs	r5, #0
   18c84:	2606      	movs	r6, #6
   18c86:	460c      	mov	r4, r1
   18c88:	704d      	strb	r5, [r1, #1]
   18c8a:	700e      	strb	r6, [r1, #0]
   18c8c:	462b      	mov	r3, r5
   18c8e:	8805      	ldrh	r5, [r0, #0]
   18c90:	4602      	mov	r2, r0
   18c92:	804d      	strh	r5, [r1, #2]
   18c94:	68c5      	ldr	r5, [r0, #12]
   18c96:	f8c1 500a 	str.w	r5, [r1, #10]
   18c9a:	8905      	ldrh	r5, [r0, #8]
   18c9c:	810d      	strh	r5, [r1, #8]
   18c9e:	6840      	ldr	r0, [r0, #4]
   18ca0:	6048      	str	r0, [r1, #4]
   18ca2:	8a15      	ldrh	r5, [r2, #16]
   18ca4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   18ca8:	4408      	add	r0, r1
   18caa:	81c5      	strh	r5, [r0, #14]
   18cac:	7c90      	ldrb	r0, [r2, #18]
   18cae:	3301      	adds	r3, #1
   18cb0:	2b20      	cmp	r3, #32
   18cb2:	7420      	strb	r0, [r4, #16]
   18cb4:	f102 0204 	add.w	r2, r2, #4
   18cb8:	f104 0403 	add.w	r4, r4, #3
   18cbc:	d1f1      	bne.n	18ca2 <rpc_gnss_serialize_time_and_sv_tow+0x26>
   18cbe:	206e      	movs	r0, #110	; 0x6e
   18cc0:	bc70      	pop	{r4, r5, r6}
   18cc2:	4770      	bx	lr
   18cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18cc8:	4770      	bx	lr
   18cca:	bf00      	nop

00018ccc <rpc_gnss_serialize_location>:
   18ccc:	4603      	mov	r3, r0
   18cce:	b1c8      	cbz	r0, 18d04 <rpc_gnss_serialize_location+0x38>
   18cd0:	b1c1      	cbz	r1, 18d04 <rpc_gnss_serialize_location+0x38>
   18cd2:	2000      	movs	r0, #0
   18cd4:	2207      	movs	r2, #7
   18cd6:	7048      	strb	r0, [r1, #1]
   18cd8:	700a      	strb	r2, [r1, #0]
   18cda:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   18cde:	2011      	movs	r0, #17
   18ce0:	814a      	strh	r2, [r1, #10]
   18ce2:	7b9a      	ldrb	r2, [r3, #14]
   18ce4:	740a      	strb	r2, [r1, #16]
   18ce6:	681a      	ldr	r2, [r3, #0]
   18ce8:	f8c1 2002 	str.w	r2, [r1, #2]
   18cec:	685a      	ldr	r2, [r3, #4]
   18cee:	f8c1 2006 	str.w	r2, [r1, #6]
   18cf2:	7b1a      	ldrb	r2, [r3, #12]
   18cf4:	738a      	strb	r2, [r1, #14]
   18cf6:	7b5a      	ldrb	r2, [r3, #13]
   18cf8:	73ca      	strb	r2, [r1, #15]
   18cfa:	7a9a      	ldrb	r2, [r3, #10]
   18cfc:	730a      	strb	r2, [r1, #12]
   18cfe:	7adb      	ldrb	r3, [r3, #11]
   18d00:	734b      	strb	r3, [r1, #13]
   18d02:	4770      	bx	lr
   18d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18d08:	4770      	bx	lr
   18d0a:	bf00      	nop

00018d0c <rpc_gnss_serialize_integrity>:
   18d0c:	b148      	cbz	r0, 18d22 <rpc_gnss_serialize_integrity+0x16>
   18d0e:	b141      	cbz	r1, 18d22 <rpc_gnss_serialize_integrity+0x16>
   18d10:	2200      	movs	r2, #0
   18d12:	2308      	movs	r3, #8
   18d14:	704a      	strb	r2, [r1, #1]
   18d16:	700b      	strb	r3, [r1, #0]
   18d18:	6803      	ldr	r3, [r0, #0]
   18d1a:	2006      	movs	r0, #6
   18d1c:	f8c1 3002 	str.w	r3, [r1, #2]
   18d20:	4770      	bx	lr
   18d22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18d26:	4770      	bx	lr

00018d28 <gnss_client_event_handler>:
   18d28:	f850 1b08 	ldr.w	r1, [r0], #8
   18d2c:	0c09      	lsrs	r1, r1, #16
   18d2e:	f7ff b817 	b.w	17d60 <rpc_gnss_event_handler>
   18d32:	bf00      	nop

00018d34 <rpc_gnss_client_init>:
   18d34:	4801      	ldr	r0, [pc, #4]	; (18d3c <rpc_gnss_client_init+0x8>)
   18d36:	f7fe bb79 	b.w	1742c <rpc_client_register>
   18d3a:	bf00      	nop
   18d3c:	0001de48 	.word	0x0001de48

00018d40 <rpc_gnss_client_request_alloc>:
   18d40:	2300      	movs	r3, #0
   18d42:	b510      	push	{r4, lr}
   18d44:	b082      	sub	sp, #8
   18d46:	9301      	str	r3, [sp, #4]
   18d48:	b158      	cbz	r0, 18d62 <rpc_gnss_client_request_alloc+0x22>
   18d4a:	4604      	mov	r4, r0
   18d4c:	aa01      	add	r2, sp, #4
   18d4e:	2007      	movs	r0, #7
   18d50:	f7fe fda4 	bl	1789c <rpc_message_alloc>
   18d54:	b918      	cbnz	r0, 18d5e <rpc_gnss_client_request_alloc+0x1e>
   18d56:	9b01      	ldr	r3, [sp, #4]
   18d58:	b10b      	cbz	r3, 18d5e <rpc_gnss_client_request_alloc+0x1e>
   18d5a:	3308      	adds	r3, #8
   18d5c:	6023      	str	r3, [r4, #0]
   18d5e:	b002      	add	sp, #8
   18d60:	bd10      	pop	{r4, pc}
   18d62:	2007      	movs	r0, #7
   18d64:	b002      	add	sp, #8
   18d66:	bd10      	pop	{r4, pc}

00018d68 <rpc_gnss_client_request_send>:
   18d68:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   18d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   18d70:	d10b      	bne.n	18d8a <rpc_gnss_client_request_send+0x22>
   18d72:	b160      	cbz	r0, 18d8e <rpc_gnss_client_request_send+0x26>
   18d74:	4603      	mov	r3, r0
   18d76:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   18d7a:	2007      	movs	r0, #7
   18d7c:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   18d80:	f843 1d08 	str.w	r1, [r3, #-8]!
   18d84:	4619      	mov	r1, r3
   18d86:	f7fe bd71 	b.w	1786c <rpc_message_send>
   18d8a:	200f      	movs	r0, #15
   18d8c:	4770      	bx	lr
   18d8e:	2007      	movs	r0, #7
   18d90:	4770      	bx	lr
   18d92:	bf00      	nop

00018d94 <rpc_gnss_client_message_free>:
   18d94:	b120      	cbz	r0, 18da0 <rpc_gnss_client_message_free+0xc>
   18d96:	f1a0 0108 	sub.w	r1, r0, #8
   18d9a:	2007      	movs	r0, #7
   18d9c:	f7fe bdb0 	b.w	17900 <rpc_message_free>
   18da0:	2007      	movs	r0, #7
   18da2:	4770      	bx	lr

00018da4 <rpc_gnss_client_data_free>:
   18da4:	b118      	cbz	r0, 18dae <rpc_gnss_client_data_free+0xa>
   18da6:	4601      	mov	r1, r0
   18da8:	2007      	movs	r0, #7
   18daa:	f7fe bebb 	b.w	17b24 <rpc_message_data_free>
   18dae:	2007      	movs	r0, #7
   18db0:	4770      	bx	lr
   18db2:	bf00      	nop

00018db4 <datagram_handler_init>:
   18db4:	b510      	push	{r4, lr}
   18db6:	4604      	mov	r4, r0
   18db8:	200c      	movs	r0, #12
   18dba:	f7f9 f965 	bl	12088 <nrf_malloc>
   18dbe:	60e0      	str	r0, [r4, #12]
   18dc0:	b118      	cbz	r0, 18dca <datagram_handler_init+0x16>
   18dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18dc6:	f7fc bc1d 	b.w	15604 <linked_list_init>
   18dca:	2004      	movs	r0, #4
   18dcc:	bd10      	pop	{r4, pc}
   18dce:	bf00      	nop

00018dd0 <datagram_handler_put>:
   18dd0:	b570      	push	{r4, r5, r6, lr}
   18dd2:	4606      	mov	r6, r0
   18dd4:	2014      	movs	r0, #20
   18dd6:	460d      	mov	r5, r1
   18dd8:	f7f9 f956 	bl	12088 <nrf_malloc>
   18ddc:	b178      	cbz	r0, 18dfe <datagram_handler_put+0x2e>
   18dde:	682b      	ldr	r3, [r5, #0]
   18de0:	4604      	mov	r4, r0
   18de2:	6043      	str	r3, [r0, #4]
   18de4:	686b      	ldr	r3, [r5, #4]
   18de6:	4601      	mov	r1, r0
   18de8:	6083      	str	r3, [r0, #8]
   18dea:	68eb      	ldr	r3, [r5, #12]
   18dec:	60c3      	str	r3, [r0, #12]
   18dee:	68ab      	ldr	r3, [r5, #8]
   18df0:	6103      	str	r3, [r0, #16]
   18df2:	68f0      	ldr	r0, [r6, #12]
   18df4:	f7fc fc10 	bl	15618 <linked_list_push>
   18df8:	b920      	cbnz	r0, 18e04 <datagram_handler_put+0x34>
   18dfa:	6868      	ldr	r0, [r5, #4]
   18dfc:	bd70      	pop	{r4, r5, r6, pc}
   18dfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18e02:	bd70      	pop	{r4, r5, r6, pc}
   18e04:	4620      	mov	r0, r4
   18e06:	f7f9 f949 	bl	1209c <nrf_free>
   18e0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18e0e:	bd70      	pop	{r4, r5, r6, pc}

00018e10 <datagram_handler_get>:
   18e10:	b5f0      	push	{r4, r5, r6, r7, lr}
   18e12:	4606      	mov	r6, r0
   18e14:	b085      	sub	sp, #20
   18e16:	68c0      	ldr	r0, [r0, #12]
   18e18:	460c      	mov	r4, r1
   18e1a:	4617      	mov	r7, r2
   18e1c:	f7fc fc1c 	bl	15658 <linked_list_peek>
   18e20:	2800      	cmp	r0, #0
   18e22:	d037      	beq.n	18e94 <datagram_handler_get+0x84>
   18e24:	6882      	ldr	r2, [r0, #8]
   18e26:	4605      	mov	r5, r0
   18e28:	e9d4 0300 	ldrd	r0, r3, [r4]
   18e2c:	429a      	cmp	r2, r3
   18e2e:	bf28      	it	cs
   18e30:	461a      	movcs	r2, r3
   18e32:	6062      	str	r2, [r4, #4]
   18e34:	b110      	cbz	r0, 18e3c <datagram_handler_get+0x2c>
   18e36:	6869      	ldr	r1, [r5, #4]
   18e38:	f002 ffec 	bl	1be14 <memcpy>
   18e3c:	68a0      	ldr	r0, [r4, #8]
   18e3e:	b118      	cbz	r0, 18e48 <datagram_handler_get+0x38>
   18e40:	692b      	ldr	r3, [r5, #16]
   18e42:	b10b      	cbz	r3, 18e48 <datagram_handler_get+0x38>
   18e44:	68ea      	ldr	r2, [r5, #12]
   18e46:	b9e2      	cbnz	r2, 18e82 <datagram_handler_get+0x72>
   18e48:	2300      	movs	r3, #0
   18e4a:	60e3      	str	r3, [r4, #12]
   18e4c:	073b      	lsls	r3, r7, #28
   18e4e:	d502      	bpl.n	18e56 <datagram_handler_get+0x46>
   18e50:	6860      	ldr	r0, [r4, #4]
   18e52:	b005      	add	sp, #20
   18e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18e56:	68f0      	ldr	r0, [r6, #12]
   18e58:	f7fc fbf4 	bl	15644 <linked_list_pop>
   18e5c:	4605      	mov	r5, r0
   18e5e:	2800      	cmp	r0, #0
   18e60:	d0f6      	beq.n	18e50 <datagram_handler_get+0x40>
   18e62:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   18e66:	6902      	ldr	r2, [r0, #16]
   18e68:	9300      	str	r3, [sp, #0]
   18e6a:	68c3      	ldr	r3, [r0, #12]
   18e6c:	e9cd 1201 	strd	r1, r2, [sp, #4]
   18e70:	9303      	str	r3, [sp, #12]
   18e72:	4668      	mov	r0, sp
   18e74:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
   18e78:	4798      	blx	r3
   18e7a:	4628      	mov	r0, r5
   18e7c:	f7f9 f90e 	bl	1209c <nrf_free>
   18e80:	e7e6      	b.n	18e50 <datagram_handler_get+0x40>
   18e82:	68e3      	ldr	r3, [r4, #12]
   18e84:	429a      	cmp	r2, r3
   18e86:	bf28      	it	cs
   18e88:	461a      	movcs	r2, r3
   18e8a:	60e2      	str	r2, [r4, #12]
   18e8c:	6929      	ldr	r1, [r5, #16]
   18e8e:	f002 ffc1 	bl	1be14 <memcpy>
   18e92:	e7db      	b.n	18e4c <datagram_handler_get+0x3c>
   18e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18e98:	e7db      	b.n	18e52 <datagram_handler_get+0x42>
   18e9a:	bf00      	nop

00018e9c <datagram_handler_available>:
   18e9c:	b508      	push	{r3, lr}
   18e9e:	68c0      	ldr	r0, [r0, #12]
   18ea0:	f7fc fbda 	bl	15658 <linked_list_peek>
   18ea4:	b108      	cbz	r0, 18eaa <datagram_handler_available+0xe>
   18ea6:	6880      	ldr	r0, [r0, #8]
   18ea8:	bd08      	pop	{r3, pc}
   18eaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18eae:	bd08      	pop	{r3, pc}

00018eb0 <datagram_handler_flush>:
   18eb0:	b530      	push	{r4, r5, lr}
   18eb2:	4605      	mov	r5, r0
   18eb4:	68c0      	ldr	r0, [r0, #12]
   18eb6:	b085      	sub	sp, #20
   18eb8:	b9a8      	cbnz	r0, 18ee6 <datagram_handler_flush+0x36>
   18eba:	e01a      	b.n	18ef2 <datagram_handler_flush+0x42>
   18ebc:	68e8      	ldr	r0, [r5, #12]
   18ebe:	f7fc fbc1 	bl	15644 <linked_list_pop>
   18ec2:	4604      	mov	r4, r0
   18ec4:	b170      	cbz	r0, 18ee4 <datagram_handler_flush+0x34>
   18ec6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   18eca:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   18ece:	e9cd 0100 	strd	r0, r1, [sp]
   18ed2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   18ed6:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   18eda:	4668      	mov	r0, sp
   18edc:	4798      	blx	r3
   18ede:	4620      	mov	r0, r4
   18ee0:	f7f9 f8dc 	bl	1209c <nrf_free>
   18ee4:	68e8      	ldr	r0, [r5, #12]
   18ee6:	f7fc fbbd 	bl	15664 <linked_list_size_get>
   18eea:	2800      	cmp	r0, #0
   18eec:	d1e6      	bne.n	18ebc <datagram_handler_flush+0xc>
   18eee:	b005      	add	sp, #20
   18ef0:	bd30      	pop	{r4, r5, pc}
   18ef2:	2008      	movs	r0, #8
   18ef4:	b005      	add	sp, #20
   18ef6:	bd30      	pop	{r4, r5, pc}

00018ef8 <datagram_handler_free>:
   18ef8:	b530      	push	{r4, r5, lr}
   18efa:	4605      	mov	r5, r0
   18efc:	68c0      	ldr	r0, [r0, #12]
   18efe:	b085      	sub	sp, #20
   18f00:	b9a0      	cbnz	r0, 18f2c <datagram_handler_free+0x34>
   18f02:	e01c      	b.n	18f3e <datagram_handler_free+0x46>
   18f04:	f7fc fb9e 	bl	15644 <linked_list_pop>
   18f08:	4604      	mov	r4, r0
   18f0a:	b170      	cbz	r0, 18f2a <datagram_handler_free+0x32>
   18f0c:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   18f10:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   18f14:	e9cd 0100 	strd	r0, r1, [sp]
   18f18:	e9cd 2302 	strd	r2, r3, [sp, #8]
   18f1c:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   18f20:	4668      	mov	r0, sp
   18f22:	4798      	blx	r3
   18f24:	4620      	mov	r0, r4
   18f26:	f7f9 f8b9 	bl	1209c <nrf_free>
   18f2a:	68e8      	ldr	r0, [r5, #12]
   18f2c:	f7fc fb9a 	bl	15664 <linked_list_size_get>
   18f30:	4604      	mov	r4, r0
   18f32:	68e8      	ldr	r0, [r5, #12]
   18f34:	2c00      	cmp	r4, #0
   18f36:	d1e5      	bne.n	18f04 <datagram_handler_free+0xc>
   18f38:	f7f9 f8b0 	bl	1209c <nrf_free>
   18f3c:	60ec      	str	r4, [r5, #12]
   18f3e:	b005      	add	sp, #20
   18f40:	bd30      	pop	{r4, r5, pc}
   18f42:	bf00      	nop

00018f44 <null_handler_init>:
   18f44:	2000      	movs	r0, #0
   18f46:	4770      	bx	lr

00018f48 <null_handler_put>:
   18f48:	b510      	push	{r4, lr}
   18f4a:	460c      	mov	r4, r1
   18f4c:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   18f50:	4620      	mov	r0, r4
   18f52:	4798      	blx	r3
   18f54:	6860      	ldr	r0, [r4, #4]
   18f56:	bd10      	pop	{r4, pc}

00018f58 <null_handler_get>:
   18f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18f5c:	4770      	bx	lr
   18f5e:	bf00      	nop

00018f60 <null_handler_available>:
   18f60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18f64:	4770      	bx	lr
   18f66:	bf00      	nop

00018f68 <null_handler_flush>:
   18f68:	2000      	movs	r0, #0
   18f6a:	4770      	bx	lr

00018f6c <null_handler_free>:
   18f6c:	4770      	bx	lr
   18f6e:	bf00      	nop

00018f70 <packet_handler_create>:
   18f70:	2801      	cmp	r0, #1
   18f72:	b538      	push	{r3, r4, r5, lr}
   18f74:	460d      	mov	r5, r1
   18f76:	4614      	mov	r4, r2
   18f78:	d00d      	beq.n	18f96 <packet_handler_create+0x26>
   18f7a:	db11      	blt.n	18fa0 <packet_handler_create+0x30>
   18f7c:	2803      	cmp	r0, #3
   18f7e:	dc0f      	bgt.n	18fa0 <packet_handler_create+0x30>
   18f80:	2010      	movs	r0, #16
   18f82:	f7f9 f881 	bl	12088 <nrf_malloc>
   18f86:	2218      	movs	r2, #24
   18f88:	b120      	cbz	r0, 18f94 <packet_handler_create+0x24>
   18f8a:	4b08      	ldr	r3, [pc, #32]	; (18fac <packet_handler_create+0x3c>)
   18f8c:	6045      	str	r5, [r0, #4]
   18f8e:	4413      	add	r3, r2
   18f90:	6084      	str	r4, [r0, #8]
   18f92:	6003      	str	r3, [r0, #0]
   18f94:	bd38      	pop	{r3, r4, r5, pc}
   18f96:	2014      	movs	r0, #20
   18f98:	f7f9 f876 	bl	12088 <nrf_malloc>
   18f9c:	2230      	movs	r2, #48	; 0x30
   18f9e:	e7f3      	b.n	18f88 <packet_handler_create+0x18>
   18fa0:	200c      	movs	r0, #12
   18fa2:	f7f9 f871 	bl	12088 <nrf_malloc>
   18fa6:	2200      	movs	r2, #0
   18fa8:	e7ee      	b.n	18f88 <packet_handler_create+0x18>
   18faa:	bf00      	nop
   18fac:	0001de58 	.word	0x0001de58

00018fb0 <packet_handler_delete>:
   18fb0:	b510      	push	{r4, lr}
   18fb2:	4604      	mov	r4, r0
   18fb4:	6803      	ldr	r3, [r0, #0]
   18fb6:	691b      	ldr	r3, [r3, #16]
   18fb8:	4798      	blx	r3
   18fba:	6823      	ldr	r3, [r4, #0]
   18fbc:	4620      	mov	r0, r4
   18fbe:	695b      	ldr	r3, [r3, #20]
   18fc0:	4798      	blx	r3
   18fc2:	4620      	mov	r0, r4
   18fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18fc8:	f7f9 b868 	b.w	1209c <nrf_free>

00018fcc <stream_handler_init>:
   18fcc:	b510      	push	{r4, lr}
   18fce:	4604      	mov	r4, r0
   18fd0:	200c      	movs	r0, #12
   18fd2:	f7f9 f859 	bl	12088 <nrf_malloc>
   18fd6:	60e0      	str	r0, [r4, #12]
   18fd8:	b128      	cbz	r0, 18fe6 <stream_handler_init+0x1a>
   18fda:	2300      	movs	r3, #0
   18fdc:	6123      	str	r3, [r4, #16]
   18fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18fe2:	f7fc bb0f 	b.w	15604 <linked_list_init>
   18fe6:	2004      	movs	r0, #4
   18fe8:	bd10      	pop	{r4, pc}
   18fea:	bf00      	nop

00018fec <stream_handler_put>:
   18fec:	b570      	push	{r4, r5, r6, lr}
   18fee:	4606      	mov	r6, r0
   18ff0:	2014      	movs	r0, #20
   18ff2:	460d      	mov	r5, r1
   18ff4:	f7f9 f848 	bl	12088 <nrf_malloc>
   18ff8:	b178      	cbz	r0, 1901a <stream_handler_put+0x2e>
   18ffa:	682b      	ldr	r3, [r5, #0]
   18ffc:	4604      	mov	r4, r0
   18ffe:	6043      	str	r3, [r0, #4]
   19000:	686b      	ldr	r3, [r5, #4]
   19002:	4601      	mov	r1, r0
   19004:	6083      	str	r3, [r0, #8]
   19006:	68eb      	ldr	r3, [r5, #12]
   19008:	60c3      	str	r3, [r0, #12]
   1900a:	68ab      	ldr	r3, [r5, #8]
   1900c:	6103      	str	r3, [r0, #16]
   1900e:	68f0      	ldr	r0, [r6, #12]
   19010:	f7fc fb02 	bl	15618 <linked_list_push>
   19014:	b920      	cbnz	r0, 19020 <stream_handler_put+0x34>
   19016:	6868      	ldr	r0, [r5, #4]
   19018:	bd70      	pop	{r4, r5, r6, pc}
   1901a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1901e:	bd70      	pop	{r4, r5, r6, pc}
   19020:	4620      	mov	r0, r4
   19022:	f7f9 f83b 	bl	1209c <nrf_free>
   19026:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1902a:	bd70      	pop	{r4, r5, r6, pc}

0001902c <stream_handler_get>:
   1902c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19030:	4682      	mov	sl, r0
   19032:	b087      	sub	sp, #28
   19034:	68c0      	ldr	r0, [r0, #12]
   19036:	4689      	mov	r9, r1
   19038:	4693      	mov	fp, r2
   1903a:	f7fc fb0d 	bl	15658 <linked_list_peek>
   1903e:	2800      	cmp	r0, #0
   19040:	d072      	beq.n	19128 <stream_handler_get+0xfc>
   19042:	4605      	mov	r5, r0
   19044:	f8d9 0008 	ldr.w	r0, [r9, #8]
   19048:	b120      	cbz	r0, 19054 <stream_handler_get+0x28>
   1904a:	692b      	ldr	r3, [r5, #16]
   1904c:	b113      	cbz	r3, 19054 <stream_handler_get+0x28>
   1904e:	68ea      	ldr	r2, [r5, #12]
   19050:	2a00      	cmp	r2, #0
   19052:	d15c      	bne.n	1910e <stream_handler_get+0xe2>
   19054:	2300      	movs	r3, #0
   19056:	f8c9 300c 	str.w	r3, [r9, #12]
   1905a:	f8d9 2000 	ldr.w	r2, [r9]
   1905e:	f8d9 8004 	ldr.w	r8, [r9, #4]
   19062:	f8da 1010 	ldr.w	r1, [sl, #16]
   19066:	9201      	str	r2, [sp, #4]
   19068:	f1b8 0f00 	cmp.w	r8, #0
   1906c:	d05a      	beq.n	19124 <stream_handler_get+0xf8>
   1906e:	f00b 0308 	and.w	r3, fp, #8
   19072:	2400      	movs	r4, #0
   19074:	9300      	str	r3, [sp, #0]
   19076:	e010      	b.n	1909a <stream_handler_get+0x6e>
   19078:	f8da 3010 	ldr.w	r3, [sl, #16]
   1907c:	443b      	add	r3, r7
   1907e:	f8ca 3010 	str.w	r3, [sl, #16]
   19082:	4628      	mov	r0, r5
   19084:	f7fc faf0 	bl	15668 <linked_list_get_next>
   19088:	443c      	add	r4, r7
   1908a:	4605      	mov	r5, r0
   1908c:	2800      	cmp	r0, #0
   1908e:	d038      	beq.n	19102 <stream_handler_get+0xd6>
   19090:	45a0      	cmp	r8, r4
   19092:	d936      	bls.n	19102 <stream_handler_get+0xd6>
   19094:	2100      	movs	r1, #0
   19096:	f8d9 2000 	ldr.w	r2, [r9]
   1909a:	68ae      	ldr	r6, [r5, #8]
   1909c:	eba8 0b04 	sub.w	fp, r8, r4
   190a0:	1a76      	subs	r6, r6, r1
   190a2:	455e      	cmp	r6, fp
   190a4:	4637      	mov	r7, r6
   190a6:	bf28      	it	cs
   190a8:	465f      	movcs	r7, fp
   190aa:	b132      	cbz	r2, 190ba <stream_handler_get+0x8e>
   190ac:	6868      	ldr	r0, [r5, #4]
   190ae:	9b01      	ldr	r3, [sp, #4]
   190b0:	4401      	add	r1, r0
   190b2:	463a      	mov	r2, r7
   190b4:	1918      	adds	r0, r3, r4
   190b6:	f002 fead 	bl	1be14 <memcpy>
   190ba:	9b00      	ldr	r3, [sp, #0]
   190bc:	2b00      	cmp	r3, #0
   190be:	d1e0      	bne.n	19082 <stream_handler_get+0x56>
   190c0:	455e      	cmp	r6, fp
   190c2:	d8d9      	bhi.n	19078 <stream_handler_get+0x4c>
   190c4:	f8da 000c 	ldr.w	r0, [sl, #12]
   190c8:	f7fc fabc 	bl	15644 <linked_list_pop>
   190cc:	4606      	mov	r6, r0
   190ce:	b170      	cbz	r0, 190ee <stream_handler_get+0xc2>
   190d0:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   190d4:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   190d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
   190dc:	e9cd 1004 	strd	r1, r0, [sp, #16]
   190e0:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   190e4:	a802      	add	r0, sp, #8
   190e6:	4798      	blx	r3
   190e8:	4630      	mov	r0, r6
   190ea:	f7f8 ffd7 	bl	1209c <nrf_free>
   190ee:	2300      	movs	r3, #0
   190f0:	4628      	mov	r0, r5
   190f2:	f8ca 3010 	str.w	r3, [sl, #16]
   190f6:	f7fc fab7 	bl	15668 <linked_list_get_next>
   190fa:	443c      	add	r4, r7
   190fc:	4605      	mov	r5, r0
   190fe:	2800      	cmp	r0, #0
   19100:	d1c6      	bne.n	19090 <stream_handler_get+0x64>
   19102:	4620      	mov	r0, r4
   19104:	f8c9 4004 	str.w	r4, [r9, #4]
   19108:	b007      	add	sp, #28
   1910a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1910e:	f8d9 300c 	ldr.w	r3, [r9, #12]
   19112:	429a      	cmp	r2, r3
   19114:	bf28      	it	cs
   19116:	461a      	movcs	r2, r3
   19118:	f8c9 200c 	str.w	r2, [r9, #12]
   1911c:	6929      	ldr	r1, [r5, #16]
   1911e:	f002 fe79 	bl	1be14 <memcpy>
   19122:	e79a      	b.n	1905a <stream_handler_get+0x2e>
   19124:	4644      	mov	r4, r8
   19126:	e7ec      	b.n	19102 <stream_handler_get+0xd6>
   19128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1912c:	e7ec      	b.n	19108 <stream_handler_get+0xdc>
   1912e:	bf00      	nop

00019130 <stream_handler_available>:
   19130:	b510      	push	{r4, lr}
   19132:	4604      	mov	r4, r0
   19134:	68c0      	ldr	r0, [r0, #12]
   19136:	f7fc fa8f 	bl	15658 <linked_list_peek>
   1913a:	b150      	cbz	r0, 19152 <stream_handler_available+0x22>
   1913c:	6924      	ldr	r4, [r4, #16]
   1913e:	4264      	negs	r4, r4
   19140:	6883      	ldr	r3, [r0, #8]
   19142:	441c      	add	r4, r3
   19144:	f7fc fa90 	bl	15668 <linked_list_get_next>
   19148:	2800      	cmp	r0, #0
   1914a:	d1f9      	bne.n	19140 <stream_handler_available+0x10>
   1914c:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   19150:	bd10      	pop	{r4, pc}
   19152:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19156:	bd10      	pop	{r4, pc}

00019158 <stream_handler_flush>:
   19158:	b530      	push	{r4, r5, lr}
   1915a:	4605      	mov	r5, r0
   1915c:	68c0      	ldr	r0, [r0, #12]
   1915e:	b085      	sub	sp, #20
   19160:	b9a8      	cbnz	r0, 1918e <stream_handler_flush+0x36>
   19162:	e01a      	b.n	1919a <stream_handler_flush+0x42>
   19164:	68e8      	ldr	r0, [r5, #12]
   19166:	f7fc fa6d 	bl	15644 <linked_list_pop>
   1916a:	4604      	mov	r4, r0
   1916c:	b170      	cbz	r0, 1918c <stream_handler_flush+0x34>
   1916e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   19172:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   19176:	e9cd 0100 	strd	r0, r1, [sp]
   1917a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1917e:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   19182:	4668      	mov	r0, sp
   19184:	4798      	blx	r3
   19186:	4620      	mov	r0, r4
   19188:	f7f8 ff88 	bl	1209c <nrf_free>
   1918c:	68e8      	ldr	r0, [r5, #12]
   1918e:	f7fc fa69 	bl	15664 <linked_list_size_get>
   19192:	2800      	cmp	r0, #0
   19194:	d1e6      	bne.n	19164 <stream_handler_flush+0xc>
   19196:	b005      	add	sp, #20
   19198:	bd30      	pop	{r4, r5, pc}
   1919a:	2008      	movs	r0, #8
   1919c:	b005      	add	sp, #20
   1919e:	bd30      	pop	{r4, r5, pc}

000191a0 <stream_handler_free>:
   191a0:	b530      	push	{r4, r5, lr}
   191a2:	4605      	mov	r5, r0
   191a4:	68c0      	ldr	r0, [r0, #12]
   191a6:	b085      	sub	sp, #20
   191a8:	b9a0      	cbnz	r0, 191d4 <stream_handler_free+0x34>
   191aa:	e01c      	b.n	191e6 <stream_handler_free+0x46>
   191ac:	f7fc fa4a 	bl	15644 <linked_list_pop>
   191b0:	4604      	mov	r4, r0
   191b2:	b170      	cbz	r0, 191d2 <stream_handler_free+0x32>
   191b4:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   191b8:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   191bc:	e9cd 0100 	strd	r0, r1, [sp]
   191c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
   191c4:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   191c8:	4668      	mov	r0, sp
   191ca:	4798      	blx	r3
   191cc:	4620      	mov	r0, r4
   191ce:	f7f8 ff65 	bl	1209c <nrf_free>
   191d2:	68e8      	ldr	r0, [r5, #12]
   191d4:	f7fc fa46 	bl	15664 <linked_list_size_get>
   191d8:	4604      	mov	r4, r0
   191da:	68e8      	ldr	r0, [r5, #12]
   191dc:	2c00      	cmp	r4, #0
   191de:	d1e5      	bne.n	191ac <stream_handler_free+0xc>
   191e0:	f7f8 ff5c 	bl	1209c <nrf_free>
   191e4:	60ec      	str	r4, [r5, #12]
   191e6:	b005      	add	sp, #20
   191e8:	bd30      	pop	{r4, r5, pc}
   191ea:	bf00      	nop

000191ec <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   191ec:	4a07      	ldr	r2, [pc, #28]	; (1920c <SystemInit+0x20>)
   191ee:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   191f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   191f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   191fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   191fe:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   19202:	4b03      	ldr	r3, [pc, #12]	; (19210 <SystemInit+0x24>)
   19204:	4a03      	ldr	r2, [pc, #12]	; (19214 <SystemInit+0x28>)
   19206:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   19208:	4770      	bx	lr
   1920a:	bf00      	nop
   1920c:	e000ed00 	.word	0xe000ed00
   19210:	20028524 	.word	0x20028524
   19214:	03d09000 	.word	0x03d09000

00019218 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   19218:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   1921a:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   1921c:	4b08      	ldr	r3, [pc, #32]	; (19240 <z_sys_device_do_config_level+0x28>)
   1921e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   19222:	3001      	adds	r0, #1
   19224:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   19228:	42a5      	cmp	r5, r4
   1922a:	d800      	bhi.n	1922e <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   1922c:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   1922e:	6823      	ldr	r3, [r4, #0]
   19230:	4620      	mov	r0, r4
   19232:	685b      	ldr	r3, [r3, #4]
   19234:	4798      	blx	r3
		if (retval != 0) {
   19236:	b100      	cbz	r0, 1923a <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   19238:	6066      	str	r6, [r4, #4]
								info++) {
   1923a:	340c      	adds	r4, #12
   1923c:	e7f4      	b.n	19228 <z_sys_device_do_config_level+0x10>
   1923e:	bf00      	nop
   19240:	0001dea0 	.word	0x0001dea0

00019244 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   19244:	4b10      	ldr	r3, [pc, #64]	; (19288 <z_impl_device_get_binding+0x44>)
{
   19246:	b570      	push	{r4, r5, r6, lr}
   19248:	4605      	mov	r5, r0
   1924a:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   1924c:	4c0f      	ldr	r4, [pc, #60]	; (1928c <z_impl_device_get_binding+0x48>)
   1924e:	429c      	cmp	r4, r3
   19250:	d104      	bne.n	1925c <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   19252:	4c0e      	ldr	r4, [pc, #56]	; (1928c <z_impl_device_get_binding+0x48>)
   19254:	42b4      	cmp	r4, r6
   19256:	d109      	bne.n	1926c <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   19258:	2400      	movs	r4, #0
   1925a:	e012      	b.n	19282 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   1925c:	6862      	ldr	r2, [r4, #4]
   1925e:	b11a      	cbz	r2, 19268 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   19260:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   19262:	6812      	ldr	r2, [r2, #0]
   19264:	42aa      	cmp	r2, r5
   19266:	d00c      	beq.n	19282 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   19268:	340c      	adds	r4, #12
   1926a:	e7f0      	b.n	1924e <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   1926c:	6863      	ldr	r3, [r4, #4]
   1926e:	b90b      	cbnz	r3, 19274 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   19270:	340c      	adds	r4, #12
   19272:	e7ef      	b.n	19254 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   19274:	6823      	ldr	r3, [r4, #0]
   19276:	4628      	mov	r0, r5
   19278:	6819      	ldr	r1, [r3, #0]
   1927a:	f002 fda0 	bl	1bdbe <strcmp>
   1927e:	2800      	cmp	r0, #0
   19280:	d1f6      	bne.n	19270 <z_impl_device_get_binding+0x2c>
}
   19282:	4620      	mov	r0, r4
   19284:	bd70      	pop	{r4, r5, r6, pc}
   19286:	bf00      	nop
   19288:	20028614 	.word	0x20028614
   1928c:	20028530 	.word	0x20028530

00019290 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   19290:	4b01      	ldr	r3, [pc, #4]	; (19298 <z_impl_z_errno+0x8>)
   19292:	6898      	ldr	r0, [r3, #8]
}
   19294:	3054      	adds	r0, #84	; 0x54
   19296:	4770      	bx	lr
   19298:	20021cfc 	.word	0x20021cfc

0001929c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1929c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   192a0:	4605      	mov	r5, r0
   192a2:	4688      	mov	r8, r1
	return z_impl_k_current_get();
   192a4:	f000 ff38 	bl	1a118 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   192a8:	2201      	movs	r2, #1
   192aa:	f04f 0300 	mov.w	r3, #0
   192ae:	4c26      	ldr	r4, [pc, #152]	; (19348 <z_fatal_error+0xac>)
   192b0:	f362 0307 	bfi	r3, r2, #0, #8
   192b4:	4a25      	ldr	r2, [pc, #148]	; (1934c <z_fatal_error+0xb0>)
   192b6:	2d04      	cmp	r5, #4
   192b8:	eba4 0402 	sub.w	r4, r4, r2
   192bc:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   192c0:	bf98      	it	ls
   192c2:	4a23      	ldrls	r2, [pc, #140]	; (19350 <z_fatal_error+0xb4>)
   192c4:	f364 138f 	bfi	r3, r4, #6, #10
   192c8:	f8ad 3000 	strh.w	r3, [sp]
   192cc:	4606      	mov	r6, r0
   192ce:	f04f 0300 	mov.w	r3, #0
   192d2:	bf94      	ite	ls
   192d4:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
   192d8:	4a1e      	ldrhi	r2, [pc, #120]	; (19354 <z_fatal_error+0xb8>)
   192da:	4629      	mov	r1, r5
   192dc:	481e      	ldr	r0, [pc, #120]	; (19358 <z_fatal_error+0xbc>)
   192de:	f001 fe2b 	bl	1af38 <log_3>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   192e2:	f8d8 301c 	ldr.w	r3, [r8, #28]
   192e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if (arch_is_in_nested_exception(esf)) {
   192ea:	b14b      	cbz	r3, 19300 <z_fatal_error+0x64>
		LOG_ERR("Fault during interrupt handling\n");
   192ec:	f04f 0100 	mov.w	r1, #0
   192f0:	2301      	movs	r3, #1
   192f2:	f363 0107 	bfi	r1, r3, #0, #8
   192f6:	f364 118f 	bfi	r1, r4, #6, #10
   192fa:	4818      	ldr	r0, [pc, #96]	; (1935c <z_fatal_error+0xc0>)
   192fc:	f001 fde3 	bl	1aec6 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   19300:	f04f 0700 	mov.w	r7, #0
   19304:	2301      	movs	r3, #1
	const char *thread_name = k_thread_name_get(thread);
   19306:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
   19308:	f363 0707 	bfi	r7, r3, #0, #8
   1930c:	f364 178f 	bfi	r7, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
   19310:	f004 f80f 	bl	1d332 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   19314:	b1b0      	cbz	r0, 19344 <z_fatal_error+0xa8>
   19316:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   19318:	4b11      	ldr	r3, [pc, #68]	; (19360 <z_fatal_error+0xc4>)
   1931a:	2a00      	cmp	r2, #0
   1931c:	bf08      	it	eq
   1931e:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   19320:	f7f3 fc62 	bl	cbe8 <log_strdup>
   19324:	463b      	mov	r3, r7
   19326:	4602      	mov	r2, r0
   19328:	4631      	mov	r1, r6
   1932a:	480e      	ldr	r0, [pc, #56]	; (19364 <z_fatal_error+0xc8>)
   1932c:	f001 fdec 	bl	1af08 <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   19330:	4641      	mov	r1, r8
   19332:	4628      	mov	r0, r5
   19334:	f7f7 fcee 	bl	10d14 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
   19338:	4630      	mov	r0, r6
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
   1933a:	b002      	add	sp, #8
   1933c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19340:	f7f4 bf3a 	b.w	e1b8 <z_impl_k_thread_abort>
		thread_name = "unknown";
   19344:	4806      	ldr	r0, [pc, #24]	; (19360 <z_fatal_error+0xc4>)
   19346:	e7eb      	b.n	19320 <z_fatal_error+0x84>
   19348:	0001d9cc 	.word	0x0001d9cc
   1934c:	0001d954 	.word	0x0001d954
   19350:	0001deb8 	.word	0x0001deb8
   19354:	0001efdd 	.word	0x0001efdd
   19358:	0001eff3 	.word	0x0001eff3
   1935c:	0001f01b 	.word	0x0001f01b
   19360:	0001efeb 	.word	0x0001efeb
   19364:	0001f03c 	.word	0x0001f03c

00019368 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   19368:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1936a:	4d0b      	ldr	r5, [pc, #44]	; (19398 <idle+0x30>)
	__asm__ volatile(
   1936c:	f04f 0220 	mov.w	r2, #32
   19370:	f3ef 8311 	mrs	r3, BASEPRI
   19374:	f382 8811 	msr	BASEPRI, r2
   19378:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   1937c:	f004 f800 	bl	1d380 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   19380:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   19382:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   19384:	2802      	cmp	r0, #2
   19386:	bfd8      	it	le
   19388:	4608      	movle	r0, r1
   1938a:	f004 f809 	bl	1d3a0 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1938e:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   19390:	f7f4 fb3c 	bl	da0c <arch_cpu_idle>
   19394:	e7ea      	b.n	1936c <idle+0x4>
   19396:	bf00      	nop
   19398:	20021cfc 	.word	0x20021cfc

0001939c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1939c:	4802      	ldr	r0, [pc, #8]	; (193a8 <z_bss_zero+0xc>)
   1939e:	4a03      	ldr	r2, [pc, #12]	; (193ac <z_bss_zero+0x10>)
   193a0:	2100      	movs	r1, #0
   193a2:	1a12      	subs	r2, r2, r0
   193a4:	f002 bd60 	b.w	1be68 <memset>
   193a8:	20020000 	.word	0x20020000
   193ac:	2002349c 	.word	0x2002349c

000193b0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   193b0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   193b2:	4806      	ldr	r0, [pc, #24]	; (193cc <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   193b4:	4a06      	ldr	r2, [pc, #24]	; (193d0 <z_data_copy+0x20>)
   193b6:	4907      	ldr	r1, [pc, #28]	; (193d4 <z_data_copy+0x24>)
   193b8:	1a12      	subs	r2, r2, r0
   193ba:	f002 fd2b 	bl	1be14 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   193be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   193c2:	4a05      	ldr	r2, [pc, #20]	; (193d8 <z_data_copy+0x28>)
   193c4:	4905      	ldr	r1, [pc, #20]	; (193dc <z_data_copy+0x2c>)
   193c6:	4806      	ldr	r0, [pc, #24]	; (193e0 <z_data_copy+0x30>)
   193c8:	f002 bd24 	b.w	1be14 <memcpy>
   193cc:	200284f0 	.word	0x200284f0
   193d0:	2002871c 	.word	0x2002871c
   193d4:	0001f0a8 	.word	0x0001f0a8
   193d8:	00000000 	.word	0x00000000
   193dc:	0001f0a8 	.word	0x0001f0a8
   193e0:	20020000 	.word	0x20020000

000193e4 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   193e4:	2201      	movs	r2, #1
{
   193e6:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   193e8:	4b0b      	ldr	r3, [pc, #44]	; (19418 <bg_thread_main+0x34>)

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   193ea:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   193ec:	701a      	strb	r2, [r3, #0]
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   193ee:	f7ff ff13 	bl	19218 <z_sys_device_do_config_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   193f2:	4a0a      	ldr	r2, [pc, #40]	; (1941c <bg_thread_main+0x38>)
   193f4:	490a      	ldr	r1, [pc, #40]	; (19420 <bg_thread_main+0x3c>)
   193f6:	480b      	ldr	r0, [pc, #44]	; (19424 <bg_thread_main+0x40>)
   193f8:	f001 fced 	bl	1add6 <printk>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   193fc:	2003      	movs	r0, #3
   193fe:	f7ff ff0b 	bl	19218 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   19402:	f000 ff85 	bl	1a310 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   19406:	f7f3 f89d 	bl	c544 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1940a:	4a07      	ldr	r2, [pc, #28]	; (19428 <bg_thread_main+0x44>)
   1940c:	7b13      	ldrb	r3, [r2, #12]
   1940e:	f023 0301 	bic.w	r3, r3, #1
   19412:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   19414:	bd08      	pop	{r3, pc}
   19416:	bf00      	nop
   19418:	20023356 	.word	0x20023356
   1941c:	0001eb74 	.word	0x0001eb74
   19420:	0001f054 	.word	0x0001f054
   19424:	0001f061 	.word	0x0001f061
   19428:	20020c14 	.word	0x20020c14

0001942c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1942c:	b580      	push	{r7, lr}
   1942e:	b0b2      	sub	sp, #200	; 0xc8
#endif	/* CONFIG_STACK_CANARIES */

	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   19430:	f7f3 fb3e 	bl	cab0 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   19434:	4b33      	ldr	r3, [pc, #204]	; (19504 <z_cstart+0xd8>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   19436:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1943a:	2400      	movs	r4, #0
   1943c:	23e0      	movs	r3, #224	; 0xe0
   1943e:	4d32      	ldr	r5, [pc, #200]	; (19508 <z_cstart+0xdc>)

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   19440:	2701      	movs	r7, #1
   19442:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   19446:	77ec      	strb	r4, [r5, #31]
   19448:	762c      	strb	r4, [r5, #24]
   1944a:	766c      	strb	r4, [r5, #25]
   1944c:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1944e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   19450:	4e2e      	ldr	r6, [pc, #184]	; (1950c <z_cstart+0xe0>)
   19452:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   19456:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   19458:	f7f4 fe88 	bl	e16c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1945c:	f7f4 fad0 	bl	da00 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   19460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19464:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   19466:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   19468:	ab06      	add	r3, sp, #24
   1946a:	22b0      	movs	r2, #176	; 0xb0
   1946c:	4621      	mov	r1, r4
   1946e:	4618      	mov	r0, r3
   19470:	f002 fcfa 	bl	1be68 <memset>
	_current = &dummy_thread;
   19474:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   19476:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   19478:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1947c:	f7ff fecc 	bl	19218 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   19480:	4638      	mov	r0, r7
   19482:	f7ff fec9 	bl	19218 <z_sys_device_do_config_level>
	_kernel.ready_q.cache = &z_main_thread;
   19486:	4d22      	ldr	r5, [pc, #136]	; (19510 <z_cstart+0xe4>)
	z_sched_init();
   19488:	f000 fdc6 	bl	1a018 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1948c:	4b21      	ldr	r3, [pc, #132]	; (19514 <z_cstart+0xe8>)
   1948e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   19492:	e9cd 7304 	strd	r7, r3, [sp, #16]
   19496:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1949a:	4b1f      	ldr	r3, [pc, #124]	; (19518 <z_cstart+0xec>)
   1949c:	e9cd 4400 	strd	r4, r4, [sp]
   194a0:	491e      	ldr	r1, [pc, #120]	; (1951c <z_cstart+0xf0>)
   194a2:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   194a4:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   194a6:	f000 fecb 	bl	1a240 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   194aa:	7b6b      	ldrb	r3, [r5, #13]
   194ac:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   194b0:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   194b4:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   194b6:	d104      	bne.n	194c2 <z_cstart+0x96>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   194b8:	69ab      	ldr	r3, [r5, #24]
   194ba:	b913      	cbnz	r3, 194c2 <z_cstart+0x96>
		z_add_thread_to_ready_q(thread);
   194bc:	4628      	mov	r0, r5
   194be:	f000 fb71 	bl	19ba4 <z_add_thread_to_ready_q>
	z_setup_new_thread(thread, stack,
   194c2:	4b17      	ldr	r3, [pc, #92]	; (19520 <z_cstart+0xf4>)
   194c4:	2201      	movs	r2, #1
   194c6:	9305      	str	r3, [sp, #20]
   194c8:	230f      	movs	r3, #15
   194ca:	e9cd 3203 	strd	r3, r2, [sp, #12]
   194ce:	2300      	movs	r3, #0
   194d0:	4d14      	ldr	r5, [pc, #80]	; (19524 <z_cstart+0xf8>)
   194d2:	e9cd 3301 	strd	r3, r3, [sp, #4]
   194d6:	9300      	str	r3, [sp, #0]
   194d8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   194dc:	4b12      	ldr	r3, [pc, #72]	; (19528 <z_cstart+0xfc>)
   194de:	4913      	ldr	r1, [pc, #76]	; (1952c <z_cstart+0x100>)
   194e0:	4628      	mov	r0, r5
   194e2:	f000 fead 	bl	1a240 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   194e6:	7b6b      	ldrb	r3, [r5, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   194e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   194ec:	f023 0304 	bic.w	r3, r3, #4
   194f0:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   194f2:	4b0f      	ldr	r3, [pc, #60]	; (19530 <z_cstart+0x104>)
   194f4:	4909      	ldr	r1, [pc, #36]	; (1951c <z_cstart+0xf0>)
	list->tail = (sys_dnode_t *)list;
   194f6:	e9c6 3306 	strd	r3, r3, [r6, #24]
   194fa:	4805      	ldr	r0, [pc, #20]	; (19510 <z_cstart+0xe4>)
   194fc:	4b06      	ldr	r3, [pc, #24]	; (19518 <z_cstart+0xec>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   194fe:	60f5      	str	r5, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   19500:	f7f4 fa54 	bl	d9ac <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   19504:	200266e0 	.word	0x200266e0
   19508:	e000ed00 	.word	0xe000ed00
   1950c:	20021cfc 	.word	0x20021cfc
   19510:	20020c14 	.word	0x20020c14
   19514:	0001df41 	.word	0x0001df41
   19518:	000193e5 	.word	0x000193e5
   1951c:	20024da0 	.word	0x20024da0
   19520:	0001f08b 	.word	0x0001f08b
   19524:	20020b64 	.word	0x20020b64
   19528:	00019369 	.word	0x00019369
   1952c:	20025da0 	.word	0x20025da0
   19530:	20021d14 	.word	0x20021d14

00019534 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   19534:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   19536:	4b0e      	ldr	r3, [pc, #56]	; (19570 <init_mem_slab_module+0x3c>)
   19538:	4c0e      	ldr	r4, [pc, #56]	; (19574 <init_mem_slab_module+0x40>)
   1953a:	42a3      	cmp	r3, r4
   1953c:	d301      	bcc.n	19542 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1953e:	2000      	movs	r0, #0
	return rc;
}
   19540:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   19542:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   19546:	ea41 0200 	orr.w	r2, r1, r0
   1954a:	f012 0203 	ands.w	r2, r2, #3
   1954e:	d10b      	bne.n	19568 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   19550:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   19552:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   19554:	42aa      	cmp	r2, r5
   19556:	d101      	bne.n	1955c <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   19558:	331c      	adds	r3, #28
   1955a:	e7ee      	b.n	1953a <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1955c:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1955e:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   19560:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   19562:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   19564:	4401      	add	r1, r0
   19566:	e7f5      	b.n	19554 <init_mem_slab_module+0x20>
		return -EINVAL;
   19568:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1956c:	e7e8      	b.n	19540 <init_mem_slab_module+0xc>
   1956e:	bf00      	nop
   19570:	20028614 	.word	0x20028614
   19574:	20028630 	.word	0x20028630

00019578 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   19578:	b510      	push	{r4, lr}
   1957a:	4613      	mov	r3, r2
   1957c:	460c      	mov	r4, r1
   1957e:	f04f 0220 	mov.w	r2, #32
   19582:	f3ef 8111 	mrs	r1, BASEPRI
   19586:	f382 8811 	msr	BASEPRI, r2
   1958a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1958e:	6942      	ldr	r2, [r0, #20]
   19590:	b15a      	cbz	r2, 195aa <k_mem_slab_alloc+0x32>
		/* take a free block */
		*mem = slab->free_list;
   19592:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   19594:	6813      	ldr	r3, [r2, #0]
   19596:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   19598:	6983      	ldr	r3, [r0, #24]
   1959a:	3301      	adds	r3, #1
   1959c:	6183      	str	r3, [r0, #24]
		result = 0;
   1959e:	2000      	movs	r0, #0
	__asm__ volatile(
   195a0:	f381 8811 	msr	BASEPRI, r1
   195a4:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   195a8:	e00d      	b.n	195c6 <k_mem_slab_alloc+0x4e>
	} else if (timeout == K_NO_WAIT) {
   195aa:	b91b      	cbnz	r3, 195b4 <k_mem_slab_alloc+0x3c>
		*mem = NULL;
   195ac:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   195ae:	f06f 000b 	mvn.w	r0, #11
   195b2:	e7f5      	b.n	195a0 <k_mem_slab_alloc+0x28>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   195b4:	4602      	mov	r2, r0
   195b6:	4804      	ldr	r0, [pc, #16]	; (195c8 <k_mem_slab_alloc+0x50>)
   195b8:	f000 fcaa 	bl	19f10 <z_pend_curr>
		if (result == 0) {
   195bc:	b918      	cbnz	r0, 195c6 <k_mem_slab_alloc+0x4e>
			*mem = _current->base.swap_data;
   195be:	4b03      	ldr	r3, [pc, #12]	; (195cc <k_mem_slab_alloc+0x54>)
   195c0:	689b      	ldr	r3, [r3, #8]
   195c2:	695b      	ldr	r3, [r3, #20]
   195c4:	6023      	str	r3, [r4, #0]
}
   195c6:	bd10      	pop	{r4, pc}
   195c8:	20023357 	.word	0x20023357
   195cc:	20021cfc 	.word	0x20021cfc

000195d0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   195d0:	b570      	push	{r4, r5, r6, lr}
   195d2:	4604      	mov	r4, r0
   195d4:	460d      	mov	r5, r1
	__asm__ volatile(
   195d6:	f04f 0320 	mov.w	r3, #32
   195da:	f3ef 8611 	mrs	r6, BASEPRI
   195de:	f383 8811 	msr	BASEPRI, r3
   195e2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   195e6:	f003 fe48 	bl	1d27a <z_unpend_first_thread>

	if (pending_thread != NULL) {
   195ea:	b180      	cbz	r0, 1960e <k_mem_slab_free+0x3e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   195ec:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   195ee:	682a      	ldr	r2, [r5, #0]
   195f0:	6681      	str	r1, [r0, #104]	; 0x68
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   195f2:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   195f4:	7b42      	ldrb	r2, [r0, #13]
   195f6:	06d2      	lsls	r2, r2, #27
   195f8:	d103      	bne.n	19602 <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
   195fa:	6983      	ldr	r3, [r0, #24]
   195fc:	b90b      	cbnz	r3, 19602 <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
   195fe:	f000 fad1 	bl	19ba4 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   19602:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   19604:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   19608:	4807      	ldr	r0, [pc, #28]	; (19628 <k_mem_slab_free+0x58>)
   1960a:	f003 bdc0 	b.w	1d18e <z_reschedule>
		**(char ***)mem = slab->free_list;
   1960e:	682b      	ldr	r3, [r5, #0]
   19610:	6962      	ldr	r2, [r4, #20]
   19612:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   19614:	682b      	ldr	r3, [r5, #0]
   19616:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   19618:	69a3      	ldr	r3, [r4, #24]
   1961a:	3b01      	subs	r3, #1
   1961c:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1961e:	f386 8811 	msr	BASEPRI, r6
   19622:	f3bf 8f6f 	isb	sy
}
   19626:	bd70      	pop	{r4, r5, r6, pc}
   19628:	20023357 	.word	0x20023357

0001962c <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   1962c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   1962e:	4c07      	ldr	r4, [pc, #28]	; (1964c <init_static_pools+0x20>)
   19630:	4d07      	ldr	r5, [pc, #28]	; (19650 <init_static_pools+0x24>)
   19632:	42ac      	cmp	r4, r5
   19634:	d301      	bcc.n	1963a <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   19636:	2000      	movs	r0, #0
   19638:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1963a:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   1963e:	4620      	mov	r0, r4
   19640:	e9c4 3305 	strd	r3, r3, [r4, #20]
   19644:	f001 f8b5 	bl	1a7b2 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   19648:	341c      	adds	r4, #28
   1964a:	e7f2      	b.n	19632 <init_static_pools+0x6>
   1964c:	20028630 	.word	0x20028630
   19650:	2002864c 	.word	0x2002864c

00019654 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   19654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   19658:	1e1c      	subs	r4, r3, #0
{
   1965a:	b085      	sub	sp, #20
   1965c:	4607      	mov	r7, r0
   1965e:	460d      	mov	r5, r1
   19660:	4692      	mov	sl, r2
	if (timeout > 0) {
   19662:	dd3b      	ble.n	196dc <k_mem_pool_alloc+0x88>
	return z_impl_k_uptime_get();
   19664:	f003 feba 	bl	1d3dc <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   19668:	eb10 0804 	adds.w	r8, r0, r4
	return pool - &_k_mem_pool_list_start[0];
   1966c:	4b1d      	ldr	r3, [pc, #116]	; (196e4 <k_mem_pool_alloc+0x90>)
   1966e:	4e1e      	ldr	r6, [pc, #120]	; (196e8 <k_mem_pool_alloc+0x94>)
   19670:	1afb      	subs	r3, r7, r3
   19672:	109b      	asrs	r3, r3, #2
   19674:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   19676:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
   1967a:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   1967c:	ab03      	add	r3, sp, #12
   1967e:	aa02      	add	r2, sp, #8
   19680:	9500      	str	r5, [sp, #0]
   19682:	4651      	mov	r1, sl
   19684:	4638      	mov	r0, r7
   19686:	f001 f8da 	bl	1a83e <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   1968a:	796b      	ldrb	r3, [r5, #5]
   1968c:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   1968e:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   19690:	f362 0303 	bfi	r3, r2, #0, #4
   19694:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   19696:	686b      	ldr	r3, [r5, #4]
   19698:	9a03      	ldr	r2, [sp, #12]
   1969a:	f362 331f 	bfi	r3, r2, #12, #20
   1969e:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   196a0:	b1c8      	cbz	r0, 196d6 <k_mem_pool_alloc+0x82>
   196a2:	b1c4      	cbz	r4, 196d6 <k_mem_pool_alloc+0x82>
   196a4:	f110 0f0c 	cmn.w	r0, #12
   196a8:	d115      	bne.n	196d6 <k_mem_pool_alloc+0x82>
	__asm__ volatile(
   196aa:	f04f 0320 	mov.w	r3, #32
   196ae:	f3ef 8011 	mrs	r0, BASEPRI
   196b2:	f383 8811 	msr	BASEPRI, r3
   196b6:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
   196ba:	4622      	mov	r2, r4
   196bc:	4659      	mov	r1, fp
   196be:	f000 fc03 	bl	19ec8 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   196c2:	1c63      	adds	r3, r4, #1
   196c4:	d0da      	beq.n	1967c <k_mem_pool_alloc+0x28>
   196c6:	f003 fe89 	bl	1d3dc <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   196ca:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   196ce:	2c00      	cmp	r4, #0
   196d0:	dcd4      	bgt.n	1967c <k_mem_pool_alloc+0x28>
				break;
			}
		}
	}

	return -EAGAIN;
   196d2:	f06f 000a 	mvn.w	r0, #10
}
   196d6:	b005      	add	sp, #20
   196d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   196dc:	f04f 0800 	mov.w	r8, #0
   196e0:	e7c4      	b.n	1966c <k_mem_pool_alloc+0x18>
   196e2:	bf00      	nop
   196e4:	20028630 	.word	0x20028630
   196e8:	b6db6db7 	.word	0xb6db6db7

000196ec <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   196ec:	b570      	push	{r4, r5, r6, lr}
   196ee:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   196f0:	6802      	ldr	r2, [r0, #0]
   196f2:	7841      	ldrb	r1, [r0, #1]
   196f4:	4e11      	ldr	r6, [pc, #68]	; (1973c <k_mem_pool_free_id+0x50>)
   196f6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   196fa:	00a4      	lsls	r4, r4, #2
   196fc:	0b12      	lsrs	r2, r2, #12
   196fe:	f001 010f 	and.w	r1, r1, #15
   19702:	1930      	adds	r0, r6, r4
   19704:	f001 f94d 	bl	1a9a2 <z_sys_mem_pool_block_free>
   19708:	f04f 0320 	mov.w	r3, #32
   1970c:	f3ef 8511 	mrs	r5, BASEPRI
   19710:	f383 8811 	msr	BASEPRI, r3
   19714:	f3bf 8f6f 	isb	sy
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   19718:	f104 0014 	add.w	r0, r4, #20
   1971c:	4430      	add	r0, r6
   1971e:	f003 fdd9 	bl	1d2d4 <z_unpend_all>

	if (need_sched != 0) {
   19722:	b128      	cbz	r0, 19730 <k_mem_pool_free_id+0x44>
		z_reschedule(&lock, key);
   19724:	4629      	mov	r1, r5
	} else {
		k_spin_unlock(&lock, key);
	}
}
   19726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1972a:	4805      	ldr	r0, [pc, #20]	; (19740 <k_mem_pool_free_id+0x54>)
   1972c:	f003 bd2f 	b.w	1d18e <z_reschedule>
	__asm__ volatile(
   19730:	f385 8811 	msr	BASEPRI, r5
   19734:	f3bf 8f6f 	isb	sy
}
   19738:	bd70      	pop	{r4, r5, r6, pc}
   1973a:	bf00      	nop
   1973c:	20028630 	.word	0x20028630
   19740:	20023357 	.word	0x20023357

00019744 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   19744:	4601      	mov	r1, r0
   19746:	4801      	ldr	r0, [pc, #4]	; (1974c <k_malloc+0x8>)
   19748:	f003 bbec 	b.w	1cf24 <k_mem_pool_malloc>
   1974c:	20028630 	.word	0x20028630

00019750 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   19750:	b510      	push	{r4, lr}
   19752:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   19754:	f003 fde4 	bl	1d320 <k_is_in_isr>
   19758:	b948      	cbnz	r0, 1976e <z_thread_malloc+0x1e>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   1975a:	4b06      	ldr	r3, [pc, #24]	; (19774 <z_thread_malloc+0x24>)
   1975c:	689b      	ldr	r3, [r3, #8]
   1975e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	}

	if (pool) {
   19760:	b13b      	cbz	r3, 19772 <z_thread_malloc+0x22>
		ret = k_mem_pool_malloc(pool, size);
   19762:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
   19764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   19768:	4618      	mov	r0, r3
   1976a:	f003 bbdb 	b.w	1cf24 <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   1976e:	4b02      	ldr	r3, [pc, #8]	; (19778 <z_thread_malloc+0x28>)
   19770:	e7f7      	b.n	19762 <z_thread_malloc+0x12>
}
   19772:	bd10      	pop	{r4, pc}
   19774:	20021cfc 	.word	0x20021cfc
   19778:	20028630 	.word	0x20028630

0001977c <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, s32_t timeout)
{
   1977c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19780:	4613      	mov	r3, r2
   19782:	4604      	mov	r4, r0
   19784:	460f      	mov	r7, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   19786:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   1978a:	f04f 0220 	mov.w	r2, #32
   1978e:	f3ef 8611 	mrs	r6, BASEPRI
   19792:	f382 8811 	msr	BASEPRI, r2
   19796:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
   1979a:	6a01      	ldr	r1, [r0, #32]
   1979c:	68c2      	ldr	r2, [r0, #12]
   1979e:	4291      	cmp	r1, r2
   197a0:	d22e      	bcs.n	19800 <z_impl_k_msgq_put+0x84>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   197a2:	f003 fd6a 	bl	1d27a <z_unpend_first_thread>
		if (pending_thread != NULL) {
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   197a6:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   197a8:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   197aa:	4639      	mov	r1, r7
		if (pending_thread != NULL) {
   197ac:	b198      	cbz	r0, 197d6 <z_impl_k_msgq_put+0x5a>
			(void)memcpy(pending_thread->base.swap_data, data,
   197ae:	6940      	ldr	r0, [r0, #20]
   197b0:	f002 fb30 	bl	1be14 <memcpy>
   197b4:	2300      	movs	r3, #0
   197b6:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   197b8:	7b6b      	ldrb	r3, [r5, #13]
   197ba:	06db      	lsls	r3, r3, #27
   197bc:	d104      	bne.n	197c8 <z_impl_k_msgq_put+0x4c>
	if (z_is_thread_ready(thread)) {
   197be:	69ab      	ldr	r3, [r5, #24]
   197c0:	b913      	cbnz	r3, 197c8 <z_impl_k_msgq_put+0x4c>
		z_add_thread_to_ready_q(thread);
   197c2:	4628      	mov	r0, r5
   197c4:	f000 f9ee 	bl	19ba4 <z_add_thread_to_ready_q>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   197c8:	4640      	mov	r0, r8
   197ca:	4631      	mov	r1, r6
   197cc:	f003 fcdf 	bl	1d18e <z_reschedule>
			return 0;
   197d0:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   197d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   197d6:	69e0      	ldr	r0, [r4, #28]
   197d8:	f002 fb1c 	bl	1be14 <memcpy>
		result = 0;
   197dc:	2000      	movs	r0, #0
			msgq->write_ptr += msgq->msg_size;
   197de:	69e3      	ldr	r3, [r4, #28]
   197e0:	68a2      	ldr	r2, [r4, #8]
   197e2:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   197e4:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   197e6:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   197e8:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   197ea:	bf04      	itt	eq
   197ec:	6923      	ldreq	r3, [r4, #16]
   197ee:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   197f0:	6a23      	ldr	r3, [r4, #32]
   197f2:	3301      	adds	r3, #1
   197f4:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
   197f6:	f386 8811 	msr	BASEPRI, r6
   197fa:	f3bf 8f6f 	isb	sy
	return result;
   197fe:	e7e8      	b.n	197d2 <z_impl_k_msgq_put+0x56>
	} else if (timeout == K_NO_WAIT) {
   19800:	b14b      	cbz	r3, 19816 <z_impl_k_msgq_put+0x9a>
		_current->base.swap_data = data;
   19802:	4a06      	ldr	r2, [pc, #24]	; (1981c <z_impl_k_msgq_put+0xa0>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   19804:	4631      	mov	r1, r6
		_current->base.swap_data = data;
   19806:	6892      	ldr	r2, [r2, #8]
   19808:	6157      	str	r7, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1980a:	4602      	mov	r2, r0
   1980c:	4640      	mov	r0, r8
}
   1980e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   19812:	f000 bb7d 	b.w	19f10 <z_pend_curr>
		result = -ENOMSG;
   19816:	f06f 004f 	mvn.w	r0, #79	; 0x4f
   1981a:	e7ec      	b.n	197f6 <z_impl_k_msgq_put+0x7a>
   1981c:	20021cfc 	.word	0x20021cfc

00019820 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, s32_t timeout)
{
   19820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19824:	4604      	mov	r4, r0
   19826:	4613      	mov	r3, r2
   19828:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   1982a:	f104 0708 	add.w	r7, r4, #8
	__asm__ volatile(
   1982e:	f04f 0220 	mov.w	r2, #32
   19832:	f3ef 8611 	mrs	r6, BASEPRI
   19836:	f382 8811 	msr	BASEPRI, r2
   1983a:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
   1983e:	6a22      	ldr	r2, [r4, #32]
   19840:	2a00      	cmp	r2, #0
   19842:	d037      	beq.n	198b4 <z_impl_k_msgq_get+0x94>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   19844:	68a2      	ldr	r2, [r4, #8]
   19846:	69a1      	ldr	r1, [r4, #24]
   19848:	f002 fae4 	bl	1be14 <memcpy>
		msgq->read_ptr += msgq->msg_size;
   1984c:	69a3      	ldr	r3, [r4, #24]
   1984e:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   19850:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   19852:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   19854:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   19856:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   19858:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   1985a:	bf04      	itt	eq
   1985c:	6923      	ldreq	r3, [r4, #16]
   1985e:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   19860:	6a23      	ldr	r3, [r4, #32]
   19862:	3b01      	subs	r3, #1
   19864:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   19866:	f003 fd08 	bl	1d27a <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1986a:	4605      	mov	r5, r0
   1986c:	2800      	cmp	r0, #0
   1986e:	d02e      	beq.n	198ce <z_impl_k_msgq_get+0xae>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   19870:	68a2      	ldr	r2, [r4, #8]
   19872:	6941      	ldr	r1, [r0, #20]
   19874:	69e0      	ldr	r0, [r4, #28]
   19876:	f002 facd 	bl	1be14 <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   1987a:	69e3      	ldr	r3, [r4, #28]
   1987c:	68a2      	ldr	r2, [r4, #8]
   1987e:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   19880:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   19882:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   19884:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   19886:	bf04      	itt	eq
   19888:	6923      	ldreq	r3, [r4, #16]
   1988a:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
   1988c:	6a23      	ldr	r3, [r4, #32]
   1988e:	3301      	adds	r3, #1
   19890:	6223      	str	r3, [r4, #32]
   19892:	2300      	movs	r3, #0
   19894:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   19896:	7b6b      	ldrb	r3, [r5, #13]
   19898:	06db      	lsls	r3, r3, #27
   1989a:	d104      	bne.n	198a6 <z_impl_k_msgq_get+0x86>
	if (z_is_thread_ready(thread)) {
   1989c:	69ab      	ldr	r3, [r5, #24]
   1989e:	b913      	cbnz	r3, 198a6 <z_impl_k_msgq_get+0x86>
		z_add_thread_to_ready_q(thread);
   198a0:	4628      	mov	r0, r5
   198a2:	f000 f97f 	bl	19ba4 <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   198a6:	4638      	mov	r0, r7
   198a8:	4631      	mov	r1, r6
   198aa:	f003 fc70 	bl	1d18e <z_reschedule>
			return 0;
   198ae:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   198b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
   198b4:	b14b      	cbz	r3, 198ca <z_impl_k_msgq_get+0xaa>
		_current->base.swap_data = data;
   198b6:	4a08      	ldr	r2, [pc, #32]	; (198d8 <z_impl_k_msgq_get+0xb8>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   198b8:	4638      	mov	r0, r7
		_current->base.swap_data = data;
   198ba:	6892      	ldr	r2, [r2, #8]
   198bc:	6151      	str	r1, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   198be:	4622      	mov	r2, r4
   198c0:	4631      	mov	r1, r6
}
   198c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   198c6:	f000 bb23 	b.w	19f10 <z_pend_curr>
		result = -ENOMSG;
   198ca:	f06f 004f 	mvn.w	r0, #79	; 0x4f
	__asm__ volatile(
   198ce:	f386 8811 	msr	BASEPRI, r6
   198d2:	f3bf 8f6f 	isb	sy
	return result;
   198d6:	e7eb      	b.n	198b0 <z_impl_k_msgq_get+0x90>
   198d8:	20021cfc 	.word	0x20021cfc

000198dc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   198dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   198de:	4604      	mov	r4, r0
   198e0:	460f      	mov	r7, r1
	__asm__ volatile(
   198e2:	f04f 0320 	mov.w	r3, #32
   198e6:	f3ef 8511 	mrs	r5, BASEPRI
   198ea:	f383 8811 	msr	BASEPRI, r3
   198ee:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   198f2:	68c2      	ldr	r2, [r0, #12]
   198f4:	4930      	ldr	r1, [pc, #192]	; (199b8 <z_impl_k_mutex_lock+0xdc>)
   198f6:	b15a      	cbz	r2, 19910 <z_impl_k_mutex_lock+0x34>
   198f8:	6880      	ldr	r0, [r0, #8]
   198fa:	688e      	ldr	r6, [r1, #8]
   198fc:	42b0      	cmp	r0, r6
   198fe:	d015      	beq.n	1992c <z_impl_k_mutex_lock+0x50>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   19900:	b9b7      	cbnz	r7, 19930 <z_impl_k_mutex_lock+0x54>
	__asm__ volatile(
   19902:	f385 8811 	msr	BASEPRI, r5
   19906:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1990a:	f06f 000f 	mvn.w	r0, #15
   1990e:	e00c      	b.n	1992a <z_impl_k_mutex_lock+0x4e>
					_current->base.prio :
   19910:	688b      	ldr	r3, [r1, #8]
   19912:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   19916:	6123      	str	r3, [r4, #16]
		mutex->owner = _current;
   19918:	688b      	ldr	r3, [r1, #8]
		mutex->lock_count++;
   1991a:	3201      	adds	r2, #1
   1991c:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
   1991e:	60a3      	str	r3, [r4, #8]
   19920:	f385 8811 	msr	BASEPRI, r5
   19924:	f3bf 8f6f 	isb	sy
		return 0;
   19928:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1992a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   1992c:	6923      	ldr	r3, [r4, #16]
   1992e:	e7f2      	b.n	19916 <z_impl_k_mutex_lock+0x3a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   19930:	f990 300e 	ldrsb.w	r3, [r0, #14]
   19934:	f996 100e 	ldrsb.w	r1, [r6, #14]
   19938:	4299      	cmp	r1, r3
   1993a:	bfa8      	it	ge
   1993c:	4619      	movge	r1, r3
   1993e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   19942:	4299      	cmp	r1, r3
   19944:	da2b      	bge.n	1999e <z_impl_k_mutex_lock+0xc2>
		return z_set_prio(mutex->owner, new_prio);
   19946:	f000 fb25 	bl	19f94 <z_set_prio>
   1994a:	4606      	mov	r6, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1994c:	463b      	mov	r3, r7
   1994e:	4622      	mov	r2, r4
   19950:	4629      	mov	r1, r5
   19952:	481a      	ldr	r0, [pc, #104]	; (199bc <z_impl_k_mutex_lock+0xe0>)
   19954:	f000 fadc 	bl	19f10 <z_pend_curr>
	if (got_mutex == 0) {
   19958:	2800      	cmp	r0, #0
   1995a:	d0e6      	beq.n	1992a <z_impl_k_mutex_lock+0x4e>
	__asm__ volatile(
   1995c:	f04f 0320 	mov.w	r3, #32
   19960:	f3ef 8511 	mrs	r5, BASEPRI
   19964:	f383 8811 	msr	BASEPRI, r3
   19968:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1996c:	6823      	ldr	r3, [r4, #0]
   1996e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19970:	429c      	cmp	r4, r3
   19972:	d007      	beq.n	19984 <z_impl_k_mutex_lock+0xa8>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   19974:	b133      	cbz	r3, 19984 <z_impl_k_mutex_lock+0xa8>
   19976:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1997a:	4299      	cmp	r1, r3
   1997c:	bfa8      	it	ge
   1997e:	4619      	movge	r1, r3
   19980:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   19984:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   19986:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1998a:	4299      	cmp	r1, r3
   1998c:	d109      	bne.n	199a2 <z_impl_k_mutex_lock+0xc6>
	if (resched) {
   1998e:	b16e      	cbz	r6, 199ac <z_impl_k_mutex_lock+0xd0>
		z_reschedule(&lock, key);
   19990:	4629      	mov	r1, r5
   19992:	480a      	ldr	r0, [pc, #40]	; (199bc <z_impl_k_mutex_lock+0xe0>)
   19994:	f003 fbfb 	bl	1d18e <z_reschedule>
	return -EAGAIN;
   19998:	f06f 000a 	mvn.w	r0, #10
   1999c:	e7c5      	b.n	1992a <z_impl_k_mutex_lock+0x4e>
	bool resched = false;
   1999e:	2600      	movs	r6, #0
   199a0:	e7d4      	b.n	1994c <z_impl_k_mutex_lock+0x70>
		return z_set_prio(mutex->owner, new_prio);
   199a2:	f000 faf7 	bl	19f94 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   199a6:	2800      	cmp	r0, #0
   199a8:	d1f2      	bne.n	19990 <z_impl_k_mutex_lock+0xb4>
   199aa:	e7f0      	b.n	1998e <z_impl_k_mutex_lock+0xb2>
	__asm__ volatile(
   199ac:	f385 8811 	msr	BASEPRI, r5
   199b0:	f3bf 8f6f 	isb	sy
   199b4:	e7f0      	b.n	19998 <z_impl_k_mutex_lock+0xbc>
   199b6:	bf00      	nop
   199b8:	20021cfc 	.word	0x20021cfc
   199bc:	20023357 	.word	0x20023357

000199c0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   199c0:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
   199c2:	6883      	ldr	r3, [r0, #8]
{
   199c4:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   199c6:	2b00      	cmp	r3, #0
   199c8:	d03b      	beq.n	19a42 <z_impl_k_mutex_unlock+0x82>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   199ca:	4a21      	ldr	r2, [pc, #132]	; (19a50 <z_impl_k_mutex_unlock+0x90>)
   199cc:	6892      	ldr	r2, [r2, #8]
   199ce:	4293      	cmp	r3, r2
   199d0:	d13a      	bne.n	19a48 <z_impl_k_mutex_unlock+0x88>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   199d2:	7bda      	ldrb	r2, [r3, #15]
   199d4:	3a01      	subs	r2, #1
   199d6:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   199d8:	68c3      	ldr	r3, [r0, #12]
   199da:	2b01      	cmp	r3, #1
   199dc:	d005      	beq.n	199ea <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   199de:	3b01      	subs	r3, #1
   199e0:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   199e2:	f000 f8c3 	bl	19b6c <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   199e6:	2000      	movs	r0, #0
}
   199e8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   199ea:	f04f 0320 	mov.w	r3, #32
   199ee:	f3ef 8511 	mrs	r5, BASEPRI
   199f2:	f383 8811 	msr	BASEPRI, r3
   199f6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   199fa:	6901      	ldr	r1, [r0, #16]
   199fc:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   199fe:	f990 300e 	ldrsb.w	r3, [r0, #14]
   19a02:	4299      	cmp	r1, r3
   19a04:	d001      	beq.n	19a0a <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   19a06:	f000 fac5 	bl	19f94 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   19a0a:	4620      	mov	r0, r4
   19a0c:	f003 fc35 	bl	1d27a <z_unpend_first_thread>
	mutex->owner = new_owner;
   19a10:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   19a12:	b180      	cbz	r0, 19a36 <z_impl_k_mutex_unlock+0x76>
		mutex->owner_orig_prio = new_owner->base.prio;
   19a14:	f990 200e 	ldrsb.w	r2, [r0, #14]
   19a18:	6122      	str	r2, [r4, #16]
   19a1a:	2200      	movs	r2, #0
   19a1c:	6682      	str	r2, [r0, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   19a1e:	7b42      	ldrb	r2, [r0, #13]
   19a20:	06d2      	lsls	r2, r2, #27
   19a22:	d103      	bne.n	19a2c <z_impl_k_mutex_unlock+0x6c>
	if (z_is_thread_ready(thread)) {
   19a24:	6983      	ldr	r3, [r0, #24]
   19a26:	b90b      	cbnz	r3, 19a2c <z_impl_k_mutex_unlock+0x6c>
		z_add_thread_to_ready_q(thread);
   19a28:	f000 f8bc 	bl	19ba4 <z_add_thread_to_ready_q>
		z_reschedule(&lock, key);
   19a2c:	4629      	mov	r1, r5
   19a2e:	4809      	ldr	r0, [pc, #36]	; (19a54 <z_impl_k_mutex_unlock+0x94>)
   19a30:	f003 fbad 	bl	1d18e <z_reschedule>
   19a34:	e7d5      	b.n	199e2 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   19a36:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   19a38:	f385 8811 	msr	BASEPRI, r5
   19a3c:	f3bf 8f6f 	isb	sy
   19a40:	e7cf      	b.n	199e2 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   19a42:	f06f 0015 	mvn.w	r0, #21
   19a46:	e7cf      	b.n	199e8 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   19a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19a4c:	e7cc      	b.n	199e8 <z_impl_k_mutex_unlock+0x28>
   19a4e:	bf00      	nop
   19a50:	20021cfc 	.word	0x20021cfc
   19a54:	20023357 	.word	0x20023357

00019a58 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   19a58:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   19a5a:	4c08      	ldr	r4, [pc, #32]	; (19a7c <z_reset_time_slice+0x24>)
   19a5c:	6823      	ldr	r3, [r4, #0]
   19a5e:	b15b      	cbz	r3, 19a78 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   19a60:	f7f3 fe86 	bl	d770 <z_clock_elapsed>
   19a64:	6823      	ldr	r3, [r4, #0]
   19a66:	4a06      	ldr	r2, [pc, #24]	; (19a80 <z_reset_time_slice+0x28>)
   19a68:	4418      	add	r0, r3
   19a6a:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   19a6c:	2100      	movs	r1, #0
	}
}
   19a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   19a72:	4618      	mov	r0, r3
   19a74:	f003 bc94 	b.w	1d3a0 <z_set_timeout_expiry>
}
   19a78:	bd10      	pop	{r4, pc}
   19a7a:	bf00      	nop
   19a7c:	20021d38 	.word	0x20021d38
   19a80:	20021cfc 	.word	0x20021cfc

00019a84 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
   19a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19a86:	460d      	mov	r5, r1
	__asm__ volatile(
   19a88:	f04f 0320 	mov.w	r3, #32
   19a8c:	f3ef 8411 	mrs	r4, BASEPRI
   19a90:	f383 8811 	msr	BASEPRI, r3
   19a94:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
   19a98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   19a9c:	f240 36e7 	movw	r6, #999	; 0x3e7
   19aa0:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   19aa2:	2200      	movs	r2, #0
   19aa4:	fbe1 6700 	umlal	r6, r7, r1, r0
   19aa8:	4b09      	ldr	r3, [pc, #36]	; (19ad0 <k_sched_time_slice_set+0x4c>)
   19aaa:	4630      	mov	r0, r6
   19aac:	611a      	str	r2, [r3, #16]
   19aae:	4639      	mov	r1, r7
   19ab0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19ab4:	2300      	movs	r3, #0
   19ab6:	f7f2 fbc1 	bl	c23c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   19aba:	4b06      	ldr	r3, [pc, #24]	; (19ad4 <k_sched_time_slice_set+0x50>)
   19abc:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   19abe:	4b06      	ldr	r3, [pc, #24]	; (19ad8 <k_sched_time_slice_set+0x54>)
   19ac0:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   19ac2:	f7ff ffc9 	bl	19a58 <z_reset_time_slice>
	__asm__ volatile(
   19ac6:	f384 8811 	msr	BASEPRI, r4
   19aca:	f3bf 8f6f 	isb	sy
	}
}
   19ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19ad0:	20021cfc 	.word	0x20021cfc
   19ad4:	20021d38 	.word	0x20021d38
   19ad8:	20021d34 	.word	0x20021d34

00019adc <k_sched_lock>:
	__asm__ volatile(
   19adc:	f04f 0320 	mov.w	r3, #32
   19ae0:	f3ef 8111 	mrs	r1, BASEPRI
   19ae4:	f383 8811 	msr	BASEPRI, r3
   19ae8:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   19aec:	4b04      	ldr	r3, [pc, #16]	; (19b00 <k_sched_lock+0x24>)
   19aee:	689a      	ldr	r2, [r3, #8]
   19af0:	7bd3      	ldrb	r3, [r2, #15]
   19af2:	3b01      	subs	r3, #1
   19af4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   19af6:	f381 8811 	msr	BASEPRI, r1
   19afa:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   19afe:	4770      	bx	lr
   19b00:	20021cfc 	.word	0x20021cfc

00019b04 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   19b04:	4b09      	ldr	r3, [pc, #36]	; (19b2c <z_priq_dumb_remove+0x28>)
   19b06:	f103 0228 	add.w	r2, r3, #40	; 0x28
   19b0a:	4282      	cmp	r2, r0
   19b0c:	d105      	bne.n	19b1a <z_priq_dumb_remove+0x16>
   19b0e:	689b      	ldr	r3, [r3, #8]
   19b10:	428b      	cmp	r3, r1
   19b12:	d102      	bne.n	19b1a <z_priq_dumb_remove+0x16>
   19b14:	7b4b      	ldrb	r3, [r1, #13]
   19b16:	06db      	lsls	r3, r3, #27
   19b18:	d106      	bne.n	19b28 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   19b1a:	e9d1 3200 	ldrd	r3, r2, [r1]
   19b1e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   19b20:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19b22:	2300      	movs	r3, #0
	node->prev = NULL;
   19b24:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   19b28:	4770      	bx	lr
   19b2a:	bf00      	nop
   19b2c:	20021cfc 	.word	0x20021cfc

00019b30 <update_cache>:
{
   19b30:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   19b32:	4c0d      	ldr	r4, [pc, #52]	; (19b68 <update_cache+0x38>)
{
   19b34:	4602      	mov	r2, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   19b36:	f104 0028 	add.w	r0, r4, #40	; 0x28
   19b3a:	f003 fb67 	bl	1d20c <z_priq_dumb_best>
	return thread ? thread : _current_cpu->idle_thread;
   19b3e:	4605      	mov	r5, r0
   19b40:	b900      	cbnz	r0, 19b44 <update_cache+0x14>
   19b42:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   19b44:	68a3      	ldr	r3, [r4, #8]
   19b46:	b94a      	cbnz	r2, 19b5c <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
   19b48:	7b5a      	ldrb	r2, [r3, #13]
   19b4a:	06d2      	lsls	r2, r2, #27
   19b4c:	d106      	bne.n	19b5c <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   19b4e:	69aa      	ldr	r2, [r5, #24]
   19b50:	b922      	cbnz	r2, 19b5c <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(thread)) {
   19b52:	89da      	ldrh	r2, [r3, #14]
   19b54:	2a7f      	cmp	r2, #127	; 0x7f
   19b56:	d901      	bls.n	19b5c <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
   19b58:	6263      	str	r3, [r4, #36]	; 0x24
}
   19b5a:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   19b5c:	429d      	cmp	r5, r3
   19b5e:	d001      	beq.n	19b64 <update_cache+0x34>
			z_reset_time_slice();
   19b60:	f7ff ff7a 	bl	19a58 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   19b64:	6265      	str	r5, [r4, #36]	; 0x24
}
   19b66:	e7f8      	b.n	19b5a <update_cache+0x2a>
   19b68:	20021cfc 	.word	0x20021cfc

00019b6c <k_sched_unlock>:
{
   19b6c:	b510      	push	{r4, lr}
	__asm__ volatile(
   19b6e:	f04f 0320 	mov.w	r3, #32
   19b72:	f3ef 8411 	mrs	r4, BASEPRI
   19b76:	f383 8811 	msr	BASEPRI, r3
   19b7a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   19b7e:	4b08      	ldr	r3, [pc, #32]	; (19ba0 <k_sched_unlock+0x34>)
		update_cache(0);
   19b80:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   19b82:	689a      	ldr	r2, [r3, #8]
   19b84:	7bd3      	ldrb	r3, [r2, #15]
   19b86:	3301      	adds	r3, #1
   19b88:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   19b8a:	f7ff ffd1 	bl	19b30 <update_cache>
	__asm__ volatile(
   19b8e:	f384 8811 	msr	BASEPRI, r4
   19b92:	f3bf 8f6f 	isb	sy
}
   19b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   19b9a:	f003 bb0f 	b.w	1d1bc <z_reschedule_unlocked>
   19b9e:	bf00      	nop
   19ba0:	20021cfc 	.word	0x20021cfc

00019ba4 <z_add_thread_to_ready_q>:
{
   19ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   19ba6:	f04f 0320 	mov.w	r3, #32
   19baa:	f3ef 8411 	mrs	r4, BASEPRI
   19bae:	f383 8811 	msr	BASEPRI, r3
   19bb2:	f3bf 8f6f 	isb	sy
	return list->head == list;
   19bb6:	4a15      	ldr	r2, [pc, #84]	; (19c0c <z_add_thread_to_ready_q+0x68>)
   19bb8:	4611      	mov	r1, r2
   19bba:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19bbe:	428b      	cmp	r3, r1
   19bc0:	d01d      	beq.n	19bfe <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19bc2:	b1e3      	cbz	r3, 19bfe <z_add_thread_to_ready_q+0x5a>
   19bc4:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   19bc6:	f990 500e 	ldrsb.w	r5, [r0, #14]
   19bca:	f993 700e 	ldrsb.w	r7, [r3, #14]
   19bce:	42af      	cmp	r7, r5
   19bd0:	dd10      	ble.n	19bf4 <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
   19bd2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   19bd4:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   19bd8:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   19bda:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   19bdc:	7b43      	ldrb	r3, [r0, #13]
   19bde:	f063 037f 	orn	r3, r3, #127	; 0x7f
   19be2:	7343      	strb	r3, [r0, #13]
		update_cache(0);
   19be4:	2000      	movs	r0, #0
   19be6:	f7ff ffa3 	bl	19b30 <update_cache>
	__asm__ volatile(
   19bea:	f384 8811 	msr	BASEPRI, r4
   19bee:	f3bf 8f6f 	isb	sy
}
   19bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   19bf4:	42b3      	cmp	r3, r6
   19bf6:	d002      	beq.n	19bfe <z_add_thread_to_ready_q+0x5a>
   19bf8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19bfa:	2b00      	cmp	r3, #0
   19bfc:	d1e5      	bne.n	19bca <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
   19bfe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   19c00:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   19c02:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   19c04:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   19c06:	6018      	str	r0, [r3, #0]
	list->tail = node;
   19c08:	62d0      	str	r0, [r2, #44]	; 0x2c
   19c0a:	e7e7      	b.n	19bdc <z_add_thread_to_ready_q+0x38>
   19c0c:	20021cfc 	.word	0x20021cfc

00019c10 <z_move_thread_to_end_of_prio_q>:
{
   19c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19c12:	4604      	mov	r4, r0
	__asm__ volatile(
   19c14:	f04f 0320 	mov.w	r3, #32
   19c18:	f3ef 8511 	mrs	r5, BASEPRI
   19c1c:	f383 8811 	msr	BASEPRI, r3
   19c20:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   19c24:	f990 300d 	ldrsb.w	r3, [r0, #13]
   19c28:	2b00      	cmp	r3, #0
   19c2a:	da03      	bge.n	19c34 <z_move_thread_to_end_of_prio_q+0x24>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   19c2c:	4601      	mov	r1, r0
   19c2e:	4818      	ldr	r0, [pc, #96]	; (19c90 <z_move_thread_to_end_of_prio_q+0x80>)
   19c30:	f7ff ff68 	bl	19b04 <z_priq_dumb_remove>
	return list->head == list;
   19c34:	4a17      	ldr	r2, [pc, #92]	; (19c94 <z_move_thread_to_end_of_prio_q+0x84>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19c36:	f102 0128 	add.w	r1, r2, #40	; 0x28
   19c3a:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   19c3e:	428b      	cmp	r3, r1
   19c40:	d01f      	beq.n	19c82 <z_move_thread_to_end_of_prio_q+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19c42:	b1f3      	cbz	r3, 19c82 <z_move_thread_to_end_of_prio_q+0x72>
	if (thread_1->base.prio < thread_2->base.prio) {
   19c44:	f994 600e 	ldrsb.w	r6, [r4, #14]
   19c48:	f993 700e 	ldrsb.w	r7, [r3, #14]
   19c4c:	42b7      	cmp	r7, r6
   19c4e:	dd13      	ble.n	19c78 <z_move_thread_to_end_of_prio_q+0x68>
	node->prev = successor->prev;
   19c50:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   19c52:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   19c56:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   19c58:	605c      	str	r4, [r3, #4]
   19c5a:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   19c5c:	6890      	ldr	r0, [r2, #8]
   19c5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   19c62:	7363      	strb	r3, [r4, #13]
   19c64:	1b03      	subs	r3, r0, r4
   19c66:	4258      	negs	r0, r3
   19c68:	4158      	adcs	r0, r3
   19c6a:	f7ff ff61 	bl	19b30 <update_cache>
	__asm__ volatile(
   19c6e:	f385 8811 	msr	BASEPRI, r5
   19c72:	f3bf 8f6f 	isb	sy
}
   19c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   19c78:	4298      	cmp	r0, r3
   19c7a:	d002      	beq.n	19c82 <z_move_thread_to_end_of_prio_q+0x72>
   19c7c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19c7e:	2b00      	cmp	r3, #0
   19c80:	d1e2      	bne.n	19c48 <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = list->tail;
   19c82:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   19c86:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   19c88:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19c8a:	62d4      	str	r4, [r2, #44]	; 0x2c
   19c8c:	e7e5      	b.n	19c5a <z_move_thread_to_end_of_prio_q+0x4a>
   19c8e:	bf00      	nop
   19c90:	20021d24 	.word	0x20021d24
   19c94:	20021cfc 	.word	0x20021cfc

00019c98 <z_time_slice>:
	if (pending_current == _current) {
   19c98:	4a15      	ldr	r2, [pc, #84]	; (19cf0 <z_time_slice+0x58>)
   19c9a:	4916      	ldr	r1, [pc, #88]	; (19cf4 <z_time_slice+0x5c>)
{
   19c9c:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   19c9e:	680c      	ldr	r4, [r1, #0]
   19ca0:	6893      	ldr	r3, [r2, #8]
   19ca2:	42a3      	cmp	r3, r4
   19ca4:	4614      	mov	r4, r2
   19ca6:	d103      	bne.n	19cb0 <z_time_slice+0x18>
}
   19ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   19cac:	f7ff bed4 	b.w	19a58 <z_reset_time_slice>
	pending_current = NULL;
   19cb0:	2500      	movs	r5, #0
   19cb2:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   19cb4:	4910      	ldr	r1, [pc, #64]	; (19cf8 <z_time_slice+0x60>)
   19cb6:	6809      	ldr	r1, [r1, #0]
   19cb8:	b1b9      	cbz	r1, 19cea <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   19cba:	89d9      	ldrh	r1, [r3, #14]
   19cbc:	297f      	cmp	r1, #127	; 0x7f
   19cbe:	d814      	bhi.n	19cea <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   19cc0:	490e      	ldr	r1, [pc, #56]	; (19cfc <z_time_slice+0x64>)
   19cc2:	f993 500e 	ldrsb.w	r5, [r3, #14]
   19cc6:	6809      	ldr	r1, [r1, #0]
   19cc8:	428d      	cmp	r5, r1
   19cca:	db0e      	blt.n	19cea <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   19ccc:	490c      	ldr	r1, [pc, #48]	; (19d00 <z_time_slice+0x68>)
   19cce:	428b      	cmp	r3, r1
   19cd0:	d00b      	beq.n	19cea <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   19cd2:	6999      	ldr	r1, [r3, #24]
   19cd4:	b949      	cbnz	r1, 19cea <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   19cd6:	6911      	ldr	r1, [r2, #16]
   19cd8:	4281      	cmp	r1, r0
   19cda:	dc03      	bgt.n	19ce4 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   19cdc:	4618      	mov	r0, r3
   19cde:	f7ff ff97 	bl	19c10 <z_move_thread_to_end_of_prio_q>
   19ce2:	e7e1      	b.n	19ca8 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   19ce4:	1a09      	subs	r1, r1, r0
   19ce6:	6111      	str	r1, [r2, #16]
}
   19ce8:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   19cea:	2300      	movs	r3, #0
   19cec:	6123      	str	r3, [r4, #16]
   19cee:	e7fb      	b.n	19ce8 <z_time_slice+0x50>
   19cf0:	20021cfc 	.word	0x20021cfc
   19cf4:	20021d30 	.word	0x20021d30
   19cf8:	20021d38 	.word	0x20021d38
   19cfc:	20021d34 	.word	0x20021d34
   19d00:	20020b64 	.word	0x20020b64

00019d04 <z_thread_single_suspend>:
{
   19d04:	b570      	push	{r4, r5, r6, lr}
   19d06:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   19d08:	3018      	adds	r0, #24
   19d0a:	f003 fb23 	bl	1d354 <z_abort_timeout>
	__asm__ volatile(
   19d0e:	f04f 0320 	mov.w	r3, #32
   19d12:	f3ef 8611 	mrs	r6, BASEPRI
   19d16:	f383 8811 	msr	BASEPRI, r3
   19d1a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   19d1e:	f994 300d 	ldrsb.w	r3, [r4, #13]
   19d22:	2b00      	cmp	r3, #0
   19d24:	da07      	bge.n	19d36 <z_thread_single_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   19d26:	4621      	mov	r1, r4
   19d28:	480e      	ldr	r0, [pc, #56]	; (19d64 <z_thread_single_suspend+0x60>)
   19d2a:	f7ff feeb 	bl	19b04 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   19d2e:	7b63      	ldrb	r3, [r4, #13]
   19d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19d34:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   19d36:	4d0c      	ldr	r5, [pc, #48]	; (19d68 <z_thread_single_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   19d38:	7b63      	ldrb	r3, [r4, #13]
   19d3a:	68a8      	ldr	r0, [r5, #8]
   19d3c:	f043 0310 	orr.w	r3, r3, #16
   19d40:	7363      	strb	r3, [r4, #13]
   19d42:	1b03      	subs	r3, r0, r4
   19d44:	4258      	negs	r0, r3
   19d46:	4158      	adcs	r0, r3
   19d48:	f7ff fef2 	bl	19b30 <update_cache>
	__asm__ volatile(
   19d4c:	f386 8811 	msr	BASEPRI, r6
   19d50:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   19d54:	68ab      	ldr	r3, [r5, #8]
   19d56:	42a3      	cmp	r3, r4
   19d58:	d103      	bne.n	19d62 <z_thread_single_suspend+0x5e>
}
   19d5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   19d5e:	f003 ba2d 	b.w	1d1bc <z_reschedule_unlocked>
}
   19d62:	bd70      	pop	{r4, r5, r6, pc}
   19d64:	20021d24 	.word	0x20021d24
   19d68:	20021cfc 	.word	0x20021cfc

00019d6c <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   19d6c:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   19d6e:	b570      	push	{r4, r5, r6, lr}
   19d70:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   19d72:	b103      	cbz	r3, 19d76 <z_thread_single_abort+0xa>
		thread->fn_abort();
   19d74:	4798      	blx	r3
   19d76:	f104 0018 	add.w	r0, r4, #24
   19d7a:	f003 faeb 	bl	1d354 <z_abort_timeout>
	__asm__ volatile(
   19d7e:	f04f 0320 	mov.w	r3, #32
   19d82:	f3ef 8511 	mrs	r5, BASEPRI
   19d86:	f383 8811 	msr	BASEPRI, r3
   19d8a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_ready(thread)) {
   19d8e:	4620      	mov	r0, r4
   19d90:	f003 f9c2 	bl	1d118 <z_is_thread_ready>
   19d94:	4606      	mov	r6, r0
   19d96:	b1d8      	cbz	r0, 19dd0 <z_thread_single_abort+0x64>
			if (z_is_thread_queued(thread)) {
   19d98:	f994 300d 	ldrsb.w	r3, [r4, #13]
   19d9c:	2b00      	cmp	r3, #0
   19d9e:	da07      	bge.n	19db0 <z_thread_single_abort+0x44>
				_priq_run_remove(&_kernel.ready_q.runq,
   19da0:	4621      	mov	r1, r4
   19da2:	4812      	ldr	r0, [pc, #72]	; (19dec <z_thread_single_abort+0x80>)
   19da4:	f7ff feae 	bl	19b04 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   19da8:	7b63      	ldrb	r3, [r4, #13]
   19daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19dae:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   19db0:	4b0f      	ldr	r3, [pc, #60]	; (19df0 <z_thread_single_abort+0x84>)
   19db2:	6898      	ldr	r0, [r3, #8]
   19db4:	1b02      	subs	r2, r0, r4
   19db6:	4250      	negs	r0, r2
   19db8:	4150      	adcs	r0, r2
   19dba:	f7ff feb9 	bl	19b30 <update_cache>
		thread->base.thread_state |= mask;
   19dbe:	7b63      	ldrb	r3, [r4, #13]
   19dc0:	f043 0308 	orr.w	r3, r3, #8
   19dc4:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   19dc6:	f385 8811 	msr	BASEPRI, r5
   19dca:	f3bf 8f6f 	isb	sy
}
   19dce:	bd70      	pop	{r4, r5, r6, pc}
			if (z_is_thread_pending(thread)) {
   19dd0:	7b63      	ldrb	r3, [r4, #13]
   19dd2:	079b      	lsls	r3, r3, #30
   19dd4:	d5f3      	bpl.n	19dbe <z_thread_single_abort+0x52>
				_priq_wait_remove(&pended_on(thread)->waitq,
   19dd6:	4621      	mov	r1, r4
   19dd8:	68a0      	ldr	r0, [r4, #8]
   19dda:	f7ff fe93 	bl	19b04 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   19dde:	7b63      	ldrb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   19de0:	60a6      	str	r6, [r4, #8]
   19de2:	f023 0302 	bic.w	r3, r3, #2
   19de6:	7363      	strb	r3, [r4, #13]
   19de8:	e7e9      	b.n	19dbe <z_thread_single_abort+0x52>
   19dea:	bf00      	nop
   19dec:	20021d24 	.word	0x20021d24
   19df0:	20021cfc 	.word	0x20021cfc

00019df4 <z_remove_thread_from_ready_q>:
{
   19df4:	b538      	push	{r3, r4, r5, lr}
   19df6:	4604      	mov	r4, r0
	__asm__ volatile(
   19df8:	f04f 0320 	mov.w	r3, #32
   19dfc:	f3ef 8511 	mrs	r5, BASEPRI
   19e00:	f383 8811 	msr	BASEPRI, r3
   19e04:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   19e08:	f990 300d 	ldrsb.w	r3, [r0, #13]
   19e0c:	2b00      	cmp	r3, #0
   19e0e:	da07      	bge.n	19e20 <z_remove_thread_from_ready_q+0x2c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   19e10:	4601      	mov	r1, r0
   19e12:	4809      	ldr	r0, [pc, #36]	; (19e38 <z_remove_thread_from_ready_q+0x44>)
   19e14:	f7ff fe76 	bl	19b04 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   19e18:	7b63      	ldrb	r3, [r4, #13]
   19e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19e1e:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   19e20:	4b06      	ldr	r3, [pc, #24]	; (19e3c <z_remove_thread_from_ready_q+0x48>)
   19e22:	6898      	ldr	r0, [r3, #8]
   19e24:	1b03      	subs	r3, r0, r4
   19e26:	4258      	negs	r0, r3
   19e28:	4158      	adcs	r0, r3
   19e2a:	f7ff fe81 	bl	19b30 <update_cache>
	__asm__ volatile(
   19e2e:	f385 8811 	msr	BASEPRI, r5
   19e32:	f3bf 8f6f 	isb	sy
}
   19e36:	bd38      	pop	{r3, r4, r5, pc}
   19e38:	20021d24 	.word	0x20021d24
   19e3c:	20021cfc 	.word	0x20021cfc

00019e40 <pend>:
{
   19e40:	b570      	push	{r4, r5, r6, lr}
   19e42:	4604      	mov	r4, r0
   19e44:	460d      	mov	r5, r1
   19e46:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   19e48:	f7ff ffd4 	bl	19df4 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   19e4c:	7b63      	ldrb	r3, [r4, #13]
   19e4e:	f043 0302 	orr.w	r3, r3, #2
   19e52:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   19e54:	b17d      	cbz	r5, 19e76 <pend+0x36>
	return list->head == list;
   19e56:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   19e58:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19e5a:	429d      	cmp	r5, r3
   19e5c:	d029      	beq.n	19eb2 <pend+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19e5e:	b343      	cbz	r3, 19eb2 <pend+0x72>
	if (thread_1->base.prio < thread_2->base.prio) {
   19e60:	f994 200e 	ldrsb.w	r2, [r4, #14]
   19e64:	f993 100e 	ldrsb.w	r1, [r3, #14]
   19e68:	4291      	cmp	r1, r2
   19e6a:	dd1c      	ble.n	19ea6 <pend+0x66>
	node->prev = successor->prev;
   19e6c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   19e6e:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   19e72:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   19e74:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   19e76:	1c73      	adds	r3, r6, #1
   19e78:	d022      	beq.n	19ec0 <pend+0x80>
   19e7a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   19e7e:	f240 30e7 	movw	r0, #999	; 0x3e7
   19e82:	2100      	movs	r1, #0
   19e84:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   19e88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19e8c:	fbc5 0106 	smlal	r0, r1, r5, r6
   19e90:	2300      	movs	r3, #0
   19e92:	f7f2 f9d3 	bl	c23c <__aeabi_uldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   19e96:	490b      	ldr	r1, [pc, #44]	; (19ec4 <pend+0x84>)
   19e98:	1c42      	adds	r2, r0, #1
   19e9a:	f104 0018 	add.w	r0, r4, #24
}
   19e9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   19ea2:	f000 baed 	b.w	1a480 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   19ea6:	6869      	ldr	r1, [r5, #4]
   19ea8:	428b      	cmp	r3, r1
   19eaa:	d002      	beq.n	19eb2 <pend+0x72>
   19eac:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19eae:	2b00      	cmp	r3, #0
   19eb0:	d1d8      	bne.n	19e64 <pend+0x24>
	node->prev = list->tail;
   19eb2:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   19eb4:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   19eb6:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   19eb8:	686b      	ldr	r3, [r5, #4]
   19eba:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19ebc:	606c      	str	r4, [r5, #4]
   19ebe:	e7da      	b.n	19e76 <pend+0x36>
}
   19ec0:	bd70      	pop	{r4, r5, r6, pc}
   19ec2:	bf00      	nop
   19ec4:	0001d219 	.word	0x0001d219

00019ec8 <z_pend_curr_irqlock>:
{
   19ec8:	b570      	push	{r4, r5, r6, lr}
   19eca:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   19ecc:	4d0e      	ldr	r5, [pc, #56]	; (19f08 <z_pend_curr_irqlock+0x40>)
	pending_current = _current;
   19ece:	4c0f      	ldr	r4, [pc, #60]	; (19f0c <z_pend_curr_irqlock+0x44>)
	pend(_current, wait_q, timeout);
   19ed0:	68a8      	ldr	r0, [r5, #8]
   19ed2:	f7ff ffb5 	bl	19e40 <pend>
	pending_current = _current;
   19ed6:	68ab      	ldr	r3, [r5, #8]
   19ed8:	4630      	mov	r0, r6
   19eda:	6023      	str	r3, [r4, #0]
   19edc:	f7f3 fc8a 	bl	d7f4 <arch_swap>
	__asm__ volatile(
   19ee0:	f04f 0220 	mov.w	r2, #32
   19ee4:	f3ef 8311 	mrs	r3, BASEPRI
   19ee8:	f382 8811 	msr	BASEPRI, r2
   19eec:	f3bf 8f6f 	isb	sy
		if (pending_current == _current) {
   19ef0:	6822      	ldr	r2, [r4, #0]
   19ef2:	68a9      	ldr	r1, [r5, #8]
   19ef4:	4291      	cmp	r1, r2
			pending_current = NULL;
   19ef6:	bf04      	itt	eq
   19ef8:	2200      	moveq	r2, #0
   19efa:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
   19efc:	f383 8811 	msr	BASEPRI, r3
   19f00:	f3bf 8f6f 	isb	sy
}
   19f04:	bd70      	pop	{r4, r5, r6, pc}
   19f06:	bf00      	nop
   19f08:	20021cfc 	.word	0x20021cfc
   19f0c:	20021d30 	.word	0x20021d30

00019f10 <z_pend_curr>:
{
   19f10:	b510      	push	{r4, lr}
   19f12:	460c      	mov	r4, r1
   19f14:	4611      	mov	r1, r2
	pending_current = _current;
   19f16:	4a06      	ldr	r2, [pc, #24]	; (19f30 <z_pend_curr+0x20>)
   19f18:	6890      	ldr	r0, [r2, #8]
   19f1a:	4a06      	ldr	r2, [pc, #24]	; (19f34 <z_pend_curr+0x24>)
   19f1c:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   19f1e:	461a      	mov	r2, r3
   19f20:	f7ff ff8e 	bl	19e40 <pend>
   19f24:	4620      	mov	r0, r4
}
   19f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19f2a:	f7f3 bc63 	b.w	d7f4 <arch_swap>
   19f2e:	bf00      	nop
   19f30:	20021cfc 	.word	0x20021cfc
   19f34:	20021d30 	.word	0x20021d30

00019f38 <z_tick_sleep.part.19>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
   19f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
   19f3a:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   19f3c:	f003 fa4a 	bl	1d3d4 <z_tick_get_32>
   19f40:	1834      	adds	r4, r6, r0
	__asm__ volatile(
   19f42:	f04f 0320 	mov.w	r3, #32
   19f46:	f3ef 8711 	mrs	r7, BASEPRI
   19f4a:	f383 8811 	msr	BASEPRI, r3
   19f4e:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   19f52:	4d0d      	ldr	r5, [pc, #52]	; (19f88 <z_tick_sleep.part.19+0x50>)
   19f54:	4b0d      	ldr	r3, [pc, #52]	; (19f8c <z_tick_sleep.part.19+0x54>)
   19f56:	68a8      	ldr	r0, [r5, #8]
   19f58:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   19f5a:	f7ff ff4b 	bl	19df4 <z_remove_thread_from_ready_q>
   19f5e:	68a8      	ldr	r0, [r5, #8]
   19f60:	490b      	ldr	r1, [pc, #44]	; (19f90 <z_tick_sleep.part.19+0x58>)
   19f62:	4632      	mov	r2, r6
   19f64:	3018      	adds	r0, #24
   19f66:	f000 fa8b 	bl	1a480 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
   19f6a:	68aa      	ldr	r2, [r5, #8]
   19f6c:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   19f6e:	7b53      	ldrb	r3, [r2, #13]
   19f70:	f043 0310 	orr.w	r3, r3, #16
   19f74:	7353      	strb	r3, [r2, #13]
   19f76:	f7f3 fc3d 	bl	d7f4 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   19f7a:	f003 fa2b 	bl	1d3d4 <z_tick_get_32>
   19f7e:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   19f80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   19f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19f86:	bf00      	nop
   19f88:	20021cfc 	.word	0x20021cfc
   19f8c:	20021d30 	.word	0x20021d30
   19f90:	0001d219 	.word	0x0001d219

00019f94 <z_set_prio>:
{
   19f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19f98:	4604      	mov	r4, r0
   19f9a:	f04f 0320 	mov.w	r3, #32
   19f9e:	f3ef 8911 	mrs	r9, BASEPRI
   19fa2:	f383 8811 	msr	BASEPRI, r3
   19fa6:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
   19faa:	f003 f8b5 	bl	1d118 <z_is_thread_ready>
		if (need_sched) {
   19fae:	b24e      	sxtb	r6, r1
   19fb0:	4680      	mov	r8, r0
   19fb2:	b360      	cbz	r0, 1a00e <z_set_prio+0x7a>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   19fb4:	4d17      	ldr	r5, [pc, #92]	; (1a014 <z_set_prio+0x80>)
   19fb6:	4621      	mov	r1, r4
   19fb8:	f105 0728 	add.w	r7, r5, #40	; 0x28
   19fbc:	4638      	mov	r0, r7
   19fbe:	f7ff fda1 	bl	19b04 <z_priq_dumb_remove>
	return list->head == list;
   19fc2:	6aab      	ldr	r3, [r5, #40]	; 0x28
				thread->base.prio = prio;
   19fc4:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19fc6:	42bb      	cmp	r3, r7
   19fc8:	462a      	mov	r2, r5
   19fca:	d019      	beq.n	1a000 <z_set_prio+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19fcc:	b1c3      	cbz	r3, 1a000 <z_set_prio+0x6c>
   19fce:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   19fd0:	f993 000e 	ldrsb.w	r0, [r3, #14]
   19fd4:	42b0      	cmp	r0, r6
   19fd6:	dd0e      	ble.n	19ff6 <z_set_prio+0x62>
	node->prev = successor->prev;
   19fd8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   19fda:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   19fde:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   19fe0:	605c      	str	r4, [r3, #4]
			update_cache(1);
   19fe2:	2001      	movs	r0, #1
   19fe4:	f7ff fda4 	bl	19b30 <update_cache>
	__asm__ volatile(
   19fe8:	f389 8811 	msr	BASEPRI, r9
   19fec:	f3bf 8f6f 	isb	sy
}
   19ff0:	4640      	mov	r0, r8
   19ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (node == list->tail) ? NULL : node->next;
   19ff6:	4299      	cmp	r1, r3
   19ff8:	d002      	beq.n	1a000 <z_set_prio+0x6c>
   19ffa:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19ffc:	2b00      	cmp	r3, #0
   19ffe:	d1e7      	bne.n	19fd0 <z_set_prio+0x3c>
	node->prev = list->tail;
   1a000:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   1a002:	6027      	str	r7, [r4, #0]
	node->prev = list->tail;
   1a004:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1a006:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1a008:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1a00a:	62d4      	str	r4, [r2, #44]	; 0x2c
   1a00c:	e7e9      	b.n	19fe2 <z_set_prio+0x4e>
			thread->base.prio = prio;
   1a00e:	73a6      	strb	r6, [r4, #14]
   1a010:	e7ea      	b.n	19fe8 <z_set_prio+0x54>
   1a012:	bf00      	nop
   1a014:	20021cfc 	.word	0x20021cfc

0001a018 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1a018:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   1a01a:	4b04      	ldr	r3, [pc, #16]	; (1a02c <z_sched_init+0x14>)
   1a01c:	4608      	mov	r0, r1
   1a01e:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1a022:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1a026:	f7ff bd2d 	b.w	19a84 <k_sched_time_slice_set>
   1a02a:	bf00      	nop
   1a02c:	20021cfc 	.word	0x20021cfc

0001a030 <z_impl_k_yield>:
{
   1a030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1a032:	4c23      	ldr	r4, [pc, #140]	; (1a0c0 <z_impl_k_yield+0x90>)
   1a034:	4b23      	ldr	r3, [pc, #140]	; (1a0c4 <z_impl_k_yield+0x94>)
   1a036:	68a2      	ldr	r2, [r4, #8]
   1a038:	429a      	cmp	r2, r3
   1a03a:	d029      	beq.n	1a090 <z_impl_k_yield+0x60>
	__asm__ volatile(
   1a03c:	f04f 0320 	mov.w	r3, #32
   1a040:	f3ef 8611 	mrs	r6, BASEPRI
   1a044:	f383 8811 	msr	BASEPRI, r3
   1a048:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   1a04c:	f104 0528 	add.w	r5, r4, #40	; 0x28
   1a050:	68a1      	ldr	r1, [r4, #8]
   1a052:	4628      	mov	r0, r5
   1a054:	f7ff fd56 	bl	19b04 <z_priq_dumb_remove>
	return list->head == list;
   1a058:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1a05a:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a05c:	42aa      	cmp	r2, r5
   1a05e:	d028      	beq.n	1a0b2 <z_impl_k_yield+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a060:	b33a      	cbz	r2, 1a0b2 <z_impl_k_yield+0x82>
   1a062:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   1a064:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1a068:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1a06c:	428f      	cmp	r7, r1
   1a06e:	dd1b      	ble.n	1a0a8 <z_impl_k_yield+0x78>
	node->prev = successor->prev;
   1a070:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1a072:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   1a076:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1a078:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   1a07a:	7b5a      	ldrb	r2, [r3, #13]
			update_cache(1);
   1a07c:	2001      	movs	r0, #1
   1a07e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1a082:	735a      	strb	r2, [r3, #13]
   1a084:	f7ff fd54 	bl	19b30 <update_cache>
	__asm__ volatile(
   1a088:	f386 8811 	msr	BASEPRI, r6
   1a08c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1a090:	f04f 0320 	mov.w	r3, #32
   1a094:	f3ef 8011 	mrs	r0, BASEPRI
   1a098:	f383 8811 	msr	BASEPRI, r3
   1a09c:	f3bf 8f6f 	isb	sy
}
   1a0a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1a0a4:	f7f3 bba6 	b.w	d7f4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1a0a8:	4282      	cmp	r2, r0
   1a0aa:	d002      	beq.n	1a0b2 <z_impl_k_yield+0x82>
   1a0ac:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a0ae:	2a00      	cmp	r2, #0
   1a0b0:	d1da      	bne.n	1a068 <z_impl_k_yield+0x38>
	node->prev = list->tail;
   1a0b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
   1a0b4:	601d      	str	r5, [r3, #0]
	node->prev = list->tail;
   1a0b6:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1a0b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1a0ba:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1a0bc:	62e3      	str	r3, [r4, #44]	; 0x2c
   1a0be:	e7dc      	b.n	1a07a <z_impl_k_yield+0x4a>
   1a0c0:	20021cfc 	.word	0x20021cfc
   1a0c4:	20020b64 	.word	0x20020b64

0001a0c8 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
   1a0c8:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (ms == K_FOREVER) {
   1a0ca:	1c43      	adds	r3, r0, #1
{
   1a0cc:	4604      	mov	r4, r0
	if (ms == K_FOREVER) {
   1a0ce:	d105      	bne.n	1a0dc <z_impl_k_sleep+0x14>
		k_thread_suspend(_current);
   1a0d0:	4b10      	ldr	r3, [pc, #64]	; (1a114 <z_impl_k_sleep+0x4c>)
   1a0d2:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1a0d4:	f000 f8fc 	bl	1a2d0 <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   1a0d8:	4620      	mov	r0, r4
   1a0da:	bd38      	pop	{r3, r4, r5, pc}
   1a0dc:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1a0e0:	f240 30e7 	movw	r0, #999	; 0x3e7
   1a0e4:	2100      	movs	r1, #0
   1a0e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a0ea:	fbe5 0104 	umlal	r0, r1, r5, r4
   1a0ee:	2300      	movs	r3, #0
   1a0f0:	f7f2 f8a4 	bl	c23c <__aeabi_uldivmod>
	if (ticks == 0) {
   1a0f4:	4604      	mov	r4, r0
   1a0f6:	b948      	cbnz	r0, 1a10c <z_impl_k_sleep+0x44>
	z_impl_k_yield();
   1a0f8:	f7ff ff9a 	bl	1a030 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
   1a0fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1a100:	fb84 0100 	smull	r0, r1, r4, r0
   1a104:	0bc4      	lsrs	r4, r0, #15
   1a106:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1a10a:	e7e5      	b.n	1a0d8 <z_impl_k_sleep+0x10>
   1a10c:	f7ff ff14 	bl	19f38 <z_tick_sleep.part.19>
   1a110:	4604      	mov	r4, r0
   1a112:	e7f3      	b.n	1a0fc <z_impl_k_sleep+0x34>
   1a114:	20021cfc 	.word	0x20021cfc

0001a118 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   1a118:	4b01      	ldr	r3, [pc, #4]	; (1a120 <z_impl_k_current_get+0x8>)
   1a11a:	6898      	ldr	r0, [r3, #8]
   1a11c:	4770      	bx	lr
   1a11e:	bf00      	nop
   1a120:	20021cfc 	.word	0x20021cfc

0001a124 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1a124:	b570      	push	{r4, r5, r6, lr}
   1a126:	4604      	mov	r4, r0
   1a128:	f04f 0320 	mov.w	r3, #32
   1a12c:	f3ef 8611 	mrs	r6, BASEPRI
   1a130:	f383 8811 	msr	BASEPRI, r3
   1a134:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   1a138:	f003 f89f 	bl	1d27a <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   1a13c:	4605      	mov	r5, r0
   1a13e:	b170      	cbz	r0, 1a15e <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1a140:	7b43      	ldrb	r3, [r0, #13]
   1a142:	06db      	lsls	r3, r3, #27
   1a144:	d103      	bne.n	1a14e <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
   1a146:	6983      	ldr	r3, [r0, #24]
   1a148:	b90b      	cbnz	r3, 1a14e <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
   1a14a:	f7ff fd2b 	bl	19ba4 <z_add_thread_to_ready_q>
   1a14e:	2300      	movs	r3, #0
   1a150:	66ab      	str	r3, [r5, #104]	; 0x68
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   1a152:	4631      	mov	r1, r6
}
   1a154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   1a158:	4807      	ldr	r0, [pc, #28]	; (1a178 <z_impl_k_sem_give+0x54>)
   1a15a:	f003 b818 	b.w	1d18e <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1a15e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1a162:	429a      	cmp	r2, r3
   1a164:	bf18      	it	ne
   1a166:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1a168:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1a16a:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1a16c:	f104 0010 	add.w	r0, r4, #16
   1a170:	f003 fa67 	bl	1d642 <z_handle_obj_poll_events>
   1a174:	e7ed      	b.n	1a152 <z_impl_k_sem_give+0x2e>
   1a176:	bf00      	nop
   1a178:	20023357 	.word	0x20023357

0001a17c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   1a17c:	b410      	push	{r4}
   1a17e:	4602      	mov	r2, r0
   1a180:	460b      	mov	r3, r1
   1a182:	f04f 0020 	mov.w	r0, #32
   1a186:	f3ef 8111 	mrs	r1, BASEPRI
   1a18a:	f380 8811 	msr	BASEPRI, r0
   1a18e:	f3bf 8f6f 	isb	sy
	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   1a192:	6894      	ldr	r4, [r2, #8]
   1a194:	b14c      	cbz	r4, 1a1aa <z_impl_k_sem_take+0x2e>
		sem->count--;
   1a196:	3c01      	subs	r4, #1
   1a198:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
   1a19a:	f381 8811 	msr	BASEPRI, r1
   1a19e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1a1a2:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1a1a4:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a1a8:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   1a1aa:	b933      	cbnz	r3, 1a1ba <z_impl_k_sem_take+0x3e>
   1a1ac:	f381 8811 	msr	BASEPRI, r1
   1a1b0:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1a1b4:	f06f 000f 	mvn.w	r0, #15
		goto out;
   1a1b8:	e7f4      	b.n	1a1a4 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1a1ba:	4802      	ldr	r0, [pc, #8]	; (1a1c4 <z_impl_k_sem_take+0x48>)
}
   1a1bc:	f85d 4b04 	ldr.w	r4, [sp], #4
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1a1c0:	f7ff bea6 	b.w	19f10 <z_pend_curr>
   1a1c4:	20023357 	.word	0x20023357

0001a1c8 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   1a1c8:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1a1ca:	4c08      	ldr	r4, [pc, #32]	; (1a1ec <k_sys_work_q_init+0x24>)
   1a1cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a1d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1a1d4:	4906      	ldr	r1, [pc, #24]	; (1a1f0 <k_sys_work_q_init+0x28>)
   1a1d6:	4620      	mov	r0, r4
   1a1d8:	f000 f8f4 	bl	1a3c4 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1a1dc:	4905      	ldr	r1, [pc, #20]	; (1a1f4 <k_sys_work_q_init+0x2c>)
   1a1de:	f104 0010 	add.w	r0, r4, #16
   1a1e2:	f003 f8a3 	bl	1d32c <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1a1e6:	2000      	movs	r0, #0
   1a1e8:	bd10      	pop	{r4, pc}
   1a1ea:	bf00      	nop
   1a1ec:	20021d3c 	.word	0x20021d3c
   1a1f0:	200266e0 	.word	0x200266e0
   1a1f4:	0001f090 	.word	0x0001f090

0001a1f8 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
   1a1f8:	b510      	push	{r4, lr}
	__asm__ volatile(
   1a1fa:	f04f 0220 	mov.w	r2, #32
   1a1fe:	f3ef 8411 	mrs	r4, BASEPRI
   1a202:	f382 8811 	msr	BASEPRI, r2
   1a206:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
   1a20a:	7b42      	ldrb	r2, [r0, #13]
   1a20c:	0751      	lsls	r1, r2, #29
   1a20e:	d404      	bmi.n	1a21a <z_impl_k_thread_start+0x22>
	__asm__ volatile(
   1a210:	f384 8811 	msr	BASEPRI, r4
   1a214:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
   1a218:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1a21a:	f022 0104 	bic.w	r1, r2, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1a21e:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1a222:	7341      	strb	r1, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1a224:	d103      	bne.n	1a22e <z_impl_k_thread_start+0x36>
	if (z_is_thread_ready(thread)) {
   1a226:	6983      	ldr	r3, [r0, #24]
   1a228:	b90b      	cbnz	r3, 1a22e <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
   1a22a:	f7ff fcbb 	bl	19ba4 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   1a22e:	4621      	mov	r1, r4
}
   1a230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   1a234:	4801      	ldr	r0, [pc, #4]	; (1a23c <z_impl_k_thread_start+0x44>)
   1a236:	f002 bfaa 	b.w	1d18e <z_reschedule>
   1a23a:	bf00      	nop
   1a23c:	20023357 	.word	0x20023357

0001a240 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   1a240:	b530      	push	{r4, r5, lr}
   1a242:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a244:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   1a246:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a248:	9504      	str	r5, [sp, #16]
   1a24a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1a24c:	9503      	str	r5, [sp, #12]
   1a24e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1a250:	9502      	str	r5, [sp, #8]
   1a252:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1a254:	9501      	str	r5, [sp, #4]
   1a256:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1a258:	9500      	str	r5, [sp, #0]
   1a25a:	f7f3 fb83 	bl	d964 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1a25e:	4b03      	ldr	r3, [pc, #12]	; (1a26c <z_setup_new_thread+0x2c>)
   1a260:	689b      	ldr	r3, [r3, #8]
   1a262:	b103      	cbz	r3, 1a266 <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   1a264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1a266:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   1a268:	b007      	add	sp, #28
   1a26a:	bd30      	pop	{r4, r5, pc}
   1a26c:	20021cfc 	.word	0x20021cfc

0001a270 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   1a270:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a272:	2600      	movs	r6, #0
{
   1a274:	b086      	sub	sp, #24
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a276:	9605      	str	r6, [sp, #20]
   1a278:	9e0e      	ldr	r6, [sp, #56]	; 0x38
{
   1a27a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a27c:	9604      	str	r6, [sp, #16]
   1a27e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
{
   1a280:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a282:	9603      	str	r6, [sp, #12]
   1a284:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1a286:	9602      	str	r6, [sp, #8]
   1a288:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1a28a:	9601      	str	r6, [sp, #4]
   1a28c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1a28e:	9600      	str	r6, [sp, #0]
   1a290:	f7ff ffd6 	bl	1a240 <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
   1a294:	1c6b      	adds	r3, r5, #1
   1a296:	d003      	beq.n	1a2a0 <z_impl_k_thread_create+0x30>
	if (delay == 0) {
   1a298:	b92d      	cbnz	r5, 1a2a6 <z_impl_k_thread_create+0x36>
	z_impl_k_thread_start(thread);
   1a29a:	4620      	mov	r0, r4
   1a29c:	f7ff ffac 	bl	1a1f8 <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
   1a2a0:	4620      	mov	r0, r4
   1a2a2:	b006      	add	sp, #24
   1a2a4:	bd70      	pop	{r4, r5, r6, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
   1a2a6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1a2aa:	f240 30e7 	movw	r0, #999	; 0x3e7
   1a2ae:	2100      	movs	r1, #0
   1a2b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a2b4:	2300      	movs	r3, #0
   1a2b6:	fbe6 0105 	umlal	r0, r1, r6, r5
   1a2ba:	f7f1 ffbf 	bl	c23c <__aeabi_uldivmod>
   1a2be:	4903      	ldr	r1, [pc, #12]	; (1a2cc <z_impl_k_thread_create+0x5c>)
   1a2c0:	1c42      	adds	r2, r0, #1
   1a2c2:	f104 0018 	add.w	r0, r4, #24
   1a2c6:	f000 f8db 	bl	1a480 <z_add_timeout>
   1a2ca:	e7e9      	b.n	1a2a0 <z_impl_k_thread_create+0x30>
   1a2cc:	0001d219 	.word	0x0001d219

0001a2d0 <z_impl_k_thread_suspend>:
#endif /* CONFIG_MULTITHREADING */

extern void z_thread_single_suspend(struct k_thread *thread);

void z_impl_k_thread_suspend(struct k_thread *thread)
{
   1a2d0:	b538      	push	{r3, r4, r5, lr}
   1a2d2:	4605      	mov	r5, r0
	__asm__ volatile(
   1a2d4:	f04f 0320 	mov.w	r3, #32
   1a2d8:	f3ef 8411 	mrs	r4, BASEPRI
   1a2dc:	f383 8811 	msr	BASEPRI, r3
   1a2e0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_suspend(thread);
   1a2e4:	f7ff fd0e 	bl	19d04 <z_thread_single_suspend>

	if (thread == _current) {
   1a2e8:	4b07      	ldr	r3, [pc, #28]	; (1a308 <z_impl_k_thread_suspend+0x38>)
   1a2ea:	689b      	ldr	r3, [r3, #8]
   1a2ec:	42ab      	cmp	r3, r5
   1a2ee:	d105      	bne.n	1a2fc <z_impl_k_thread_suspend+0x2c>
		z_reschedule(&lock, key);
   1a2f0:	4621      	mov	r1, r4
	} else {
		k_spin_unlock(&lock, key);
	}
}
   1a2f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   1a2f6:	4805      	ldr	r0, [pc, #20]	; (1a30c <z_impl_k_thread_suspend+0x3c>)
   1a2f8:	f002 bf49 	b.w	1d18e <z_reschedule>
	__asm__ volatile(
   1a2fc:	f384 8811 	msr	BASEPRI, r4
   1a300:	f3bf 8f6f 	isb	sy
}
   1a304:	bd38      	pop	{r3, r4, r5, pc}
   1a306:	bf00      	nop
   1a308:	20021cfc 	.word	0x20021cfc
   1a30c:	20023357 	.word	0x20023357

0001a310 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   1a310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1a314:	4e28      	ldr	r6, [pc, #160]	; (1a3b8 <z_init_static_threads+0xa8>)
   1a316:	4d29      	ldr	r5, [pc, #164]	; (1a3bc <z_init_static_threads+0xac>)
   1a318:	46b0      	mov	r8, r6
{
   1a31a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   1a31c:	42b5      	cmp	r5, r6
   1a31e:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1a322:	d310      	bcc.n	1a346 <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   1a324:	f7ff fbda 	bl	19adc <k_sched_lock>
   1a328:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1a32c:	f240 36e7 	movw	r6, #999	; 0x3e7
   1a330:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   1a332:	4c22      	ldr	r4, [pc, #136]	; (1a3bc <z_init_static_threads+0xac>)
   1a334:	f8df a088 	ldr.w	sl, [pc, #136]	; 1a3c0 <z_init_static_threads+0xb0>
   1a338:	4544      	cmp	r4, r8
   1a33a:	d321      	bcc.n	1a380 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
   1a33c:	b007      	add	sp, #28
   1a33e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   1a342:	f7ff bc13 	b.w	19b6c <k_sched_unlock>
		z_setup_new_thread(
   1a346:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a34a:	9305      	str	r3, [sp, #20]
   1a34c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1a350:	9304      	str	r3, [sp, #16]
   1a352:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1a356:	9303      	str	r3, [sp, #12]
   1a358:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1a35c:	9302      	str	r3, [sp, #8]
   1a35e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1a362:	9301      	str	r3, [sp, #4]
   1a364:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1a368:	9300      	str	r3, [sp, #0]
   1a36a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1a36e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1a372:	f7ff ff65 	bl	1a240 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1a376:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1a37a:	64dd      	str	r5, [r3, #76]	; 0x4c
   1a37c:	4625      	mov	r5, r4
   1a37e:	e7cd      	b.n	1a31c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
   1a380:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1a382:	1c4b      	adds	r3, r1, #1
   1a384:	d004      	beq.n	1a390 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
   1a386:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
   1a388:	b921      	cbnz	r1, 1a394 <z_init_static_threads+0x84>
   1a38a:	4628      	mov	r0, r5
   1a38c:	f7ff ff34 	bl	1a1f8 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1a390:	3430      	adds	r4, #48	; 0x30
   1a392:	e7d1      	b.n	1a338 <z_init_static_threads+0x28>
   1a394:	46b3      	mov	fp, r6
   1a396:	46bc      	mov	ip, r7
   1a398:	fbe9 bc01 	umlal	fp, ip, r9, r1
   1a39c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a3a0:	2300      	movs	r3, #0
   1a3a2:	4658      	mov	r0, fp
   1a3a4:	4661      	mov	r1, ip
   1a3a6:	f7f1 ff49 	bl	c23c <__aeabi_uldivmod>
   1a3aa:	4651      	mov	r1, sl
   1a3ac:	1c42      	adds	r2, r0, #1
   1a3ae:	f105 0018 	add.w	r0, r5, #24
   1a3b2:	f000 f865 	bl	1a480 <z_add_timeout>
   1a3b6:	e7eb      	b.n	1a390 <z_init_static_threads+0x80>
   1a3b8:	20028614 	.word	0x20028614
   1a3bc:	20028614 	.word	0x20028614
   1a3c0:	0001d219 	.word	0x0001d219

0001a3c4 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1a3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a3c8:	4605      	mov	r5, r0
   1a3ca:	b086      	sub	sp, #24
   1a3cc:	460e      	mov	r6, r1
   1a3ce:	4617      	mov	r7, r2
   1a3d0:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   1a3d2:	f002 fe2f 	bl	1d034 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1a3d6:	f105 0410 	add.w	r4, r5, #16
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1a3da:	2000      	movs	r0, #0
   1a3dc:	4b09      	ldr	r3, [pc, #36]	; (1a404 <k_work_q_start+0x40>)
   1a3de:	e9cd 0004 	strd	r0, r0, [sp, #16]
   1a3e2:	e9cd 0802 	strd	r0, r8, [sp, #8]
   1a3e6:	e9cd 5000 	strd	r5, r0, [sp]
   1a3ea:	463a      	mov	r2, r7
   1a3ec:	4631      	mov	r1, r6
   1a3ee:	4620      	mov	r0, r4
   1a3f0:	f7ff ff3e 	bl	1a270 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1a3f4:	4620      	mov	r0, r4
   1a3f6:	4904      	ldr	r1, [pc, #16]	; (1a408 <k_work_q_start+0x44>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1a3f8:	b006      	add	sp, #24
   1a3fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a3fe:	f002 bf95 	b.w	1d32c <z_impl_k_thread_name_set>
   1a402:	bf00      	nop
   1a404:	0001ae05 	.word	0x0001ae05
   1a408:	0001f099 	.word	0x0001f099

0001a40c <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   1a40c:	4b03      	ldr	r3, [pc, #12]	; (1a41c <elapsed+0x10>)
   1a40e:	681b      	ldr	r3, [r3, #0]
   1a410:	b90b      	cbnz	r3, 1a416 <elapsed+0xa>
   1a412:	f7f3 b9ad 	b.w	d770 <z_clock_elapsed>
}
   1a416:	2000      	movs	r0, #0
   1a418:	4770      	bx	lr
   1a41a:	bf00      	nop
   1a41c:	20021dfc 	.word	0x20021dfc

0001a420 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1a420:	6803      	ldr	r3, [r0, #0]
   1a422:	b140      	cbz	r0, 1a436 <remove_timeout+0x16>
   1a424:	4a07      	ldr	r2, [pc, #28]	; (1a444 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   1a426:	6852      	ldr	r2, [r2, #4]
   1a428:	4290      	cmp	r0, r2
   1a42a:	d004      	beq.n	1a436 <remove_timeout+0x16>
	if (next(t) != NULL) {
   1a42c:	b11b      	cbz	r3, 1a436 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   1a42e:	689a      	ldr	r2, [r3, #8]
   1a430:	6881      	ldr	r1, [r0, #8]
   1a432:	440a      	add	r2, r1
   1a434:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   1a436:	6842      	ldr	r2, [r0, #4]
   1a438:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1a43a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a43c:	2300      	movs	r3, #0
	node->prev = NULL;
   1a43e:	e9c0 3300 	strd	r3, r3, [r0]
}
   1a442:	4770      	bx	lr
   1a444:	20028528 	.word	0x20028528

0001a448 <next_timeout>:
	return list->head == list;
   1a448:	4b0b      	ldr	r3, [pc, #44]	; (1a478 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   1a44a:	b510      	push	{r4, lr}
   1a44c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a44e:	429c      	cmp	r4, r3
   1a450:	bf08      	it	eq
   1a452:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   1a454:	f7ff ffda 	bl	1a40c <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1a458:	b154      	cbz	r4, 1a470 <next_timeout+0x28>
   1a45a:	68a3      	ldr	r3, [r4, #8]
   1a45c:	1a18      	subs	r0, r3, r0
   1a45e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1a462:	4b06      	ldr	r3, [pc, #24]	; (1a47c <next_timeout+0x34>)
   1a464:	691b      	ldr	r3, [r3, #16]
   1a466:	b113      	cbz	r3, 1a46e <next_timeout+0x26>
   1a468:	4298      	cmp	r0, r3
   1a46a:	bfa8      	it	ge
   1a46c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1a46e:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1a470:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1a474:	e7f5      	b.n	1a462 <next_timeout+0x1a>
   1a476:	bf00      	nop
   1a478:	20028528 	.word	0x20028528
   1a47c:	20021cfc 	.word	0x20021cfc

0001a480 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
   1a480:	b570      	push	{r4, r5, r6, lr}
   1a482:	4604      	mov	r4, r0
   1a484:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1a486:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
   1a488:	f04f 0320 	mov.w	r3, #32
   1a48c:	f3ef 8511 	mrs	r5, BASEPRI
   1a490:	f383 8811 	msr	BASEPRI, r3
   1a494:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1a498:	f7ff ffb8 	bl	1a40c <elapsed>
   1a49c:	2e01      	cmp	r6, #1
   1a49e:	bfac      	ite	ge
   1a4a0:	1980      	addge	r0, r0, r6
   1a4a2:	3001      	addlt	r0, #1
	return list->head == list;
   1a4a4:	4b16      	ldr	r3, [pc, #88]	; (1a500 <z_add_timeout+0x80>)
   1a4a6:	60a0      	str	r0, [r4, #8]
   1a4a8:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a4aa:	429a      	cmp	r2, r3
   1a4ac:	d001      	beq.n	1a4b2 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1a4ae:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1a4b0:	b932      	cbnz	r2, 1a4c0 <z_add_timeout+0x40>
	node->prev = list->tail;
   1a4b2:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1a4b4:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   1a4b6:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   1a4b8:	685a      	ldr	r2, [r3, #4]
   1a4ba:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1a4bc:	605c      	str	r4, [r3, #4]
   1a4be:	e00a      	b.n	1a4d6 <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   1a4c0:	6890      	ldr	r0, [r2, #8]
   1a4c2:	68a1      	ldr	r1, [r4, #8]
   1a4c4:	4288      	cmp	r0, r1
   1a4c6:	dd15      	ble.n	1a4f4 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
   1a4c8:	1a41      	subs	r1, r0, r1
   1a4ca:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   1a4cc:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1a4ce:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
   1a4d2:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1a4d4:	6054      	str	r4, [r2, #4]
	return list->head == list;
   1a4d6:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a4d8:	429a      	cmp	r2, r3
   1a4da:	d006      	beq.n	1a4ea <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1a4dc:	4294      	cmp	r4, r2
   1a4de:	d104      	bne.n	1a4ea <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
   1a4e0:	f7ff ffb2 	bl	1a448 <next_timeout>
   1a4e4:	2100      	movs	r1, #0
   1a4e6:	f7f3 f8ed 	bl	d6c4 <z_clock_set_timeout>
	__asm__ volatile(
   1a4ea:	f385 8811 	msr	BASEPRI, r5
   1a4ee:	f3bf 8f6f 	isb	sy
		}
	}
}
   1a4f2:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
   1a4f4:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   1a4f6:	4296      	cmp	r6, r2
   1a4f8:	60a1      	str	r1, [r4, #8]
   1a4fa:	d0da      	beq.n	1a4b2 <z_add_timeout+0x32>
   1a4fc:	6812      	ldr	r2, [r2, #0]
   1a4fe:	e7d7      	b.n	1a4b0 <z_add_timeout+0x30>
   1a500:	20028528 	.word	0x20028528

0001a504 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   1a504:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   1a508:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1a50a:	f7ff fbc5 	bl	19c98 <z_time_slice>
	__asm__ volatile(
   1a50e:	f04f 0320 	mov.w	r3, #32
   1a512:	f3ef 8511 	mrs	r5, BASEPRI
   1a516:	f383 8811 	msr	BASEPRI, r3
   1a51a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1a51e:	4f21      	ldr	r7, [pc, #132]	; (1a5a4 <z_clock_announce+0xa0>)
   1a520:	4e21      	ldr	r6, [pc, #132]	; (1a5a8 <z_clock_announce+0xa4>)
   1a522:	46b8      	mov	r8, r7
	return list->head == list;
   1a524:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1a5ac <z_clock_announce+0xa8>
   1a528:	6034      	str	r4, [r6, #0]
   1a52a:	f8d9 4000 	ldr.w	r4, [r9]
   1a52e:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a530:	454c      	cmp	r4, r9
   1a532:	e9d7 bc00 	ldrd	fp, ip, [r7]
   1a536:	d005      	beq.n	1a544 <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1a538:	b124      	cbz	r4, 1a544 <z_clock_announce+0x40>
   1a53a:	68a3      	ldr	r3, [r4, #8]
   1a53c:	4293      	cmp	r3, r2
   1a53e:	dd14      	ble.n	1a56a <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1a540:	1a9b      	subs	r3, r3, r2
   1a542:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   1a544:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1a546:	eb1b 0002 	adds.w	r0, fp, r2
   1a54a:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   1a54e:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
   1a552:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   1a554:	f7ff ff78 	bl	1a448 <next_timeout>
   1a558:	4621      	mov	r1, r4
   1a55a:	f7f3 f8b3 	bl	d6c4 <z_clock_set_timeout>
	__asm__ volatile(
   1a55e:	f385 8811 	msr	BASEPRI, r5
   1a562:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1a566:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   1a56a:	eb1b 0003 	adds.w	r0, fp, r3
   1a56e:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   1a572:	1ad3      	subs	r3, r2, r3
   1a574:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1a576:	2300      	movs	r3, #0
		curr_tick += dt;
   1a578:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   1a57c:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   1a57e:	4620      	mov	r0, r4
   1a580:	f7ff ff4e 	bl	1a420 <remove_timeout>
   1a584:	f385 8811 	msr	BASEPRI, r5
   1a588:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1a58c:	68e3      	ldr	r3, [r4, #12]
   1a58e:	4798      	blx	r3
	__asm__ volatile(
   1a590:	f04f 0320 	mov.w	r3, #32
   1a594:	f3ef 8511 	mrs	r5, BASEPRI
   1a598:	f383 8811 	msr	BASEPRI, r3
   1a59c:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1a5a0:	e7c3      	b.n	1a52a <z_clock_announce+0x26>
   1a5a2:	bf00      	nop
   1a5a4:	20020000 	.word	0x20020000
   1a5a8:	20021dfc 	.word	0x20021dfc
   1a5ac:	20028528 	.word	0x20028528

0001a5b0 <z_tick_get>:

s64_t z_tick_get(void)
{
   1a5b0:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
   1a5b4:	f04f 0320 	mov.w	r3, #32
   1a5b8:	f3ef 8411 	mrs	r4, BASEPRI
   1a5bc:	f383 8811 	msr	BASEPRI, r3
   1a5c0:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1a5c4:	f7f3 f8d4 	bl	d770 <z_clock_elapsed>
   1a5c8:	4b07      	ldr	r3, [pc, #28]	; (1a5e8 <z_tick_get+0x38>)
   1a5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a5ce:	eb12 0b00 	adds.w	fp, r2, r0
   1a5d2:	f143 0c00 	adc.w	ip, r3, #0
   1a5d6:	4658      	mov	r0, fp
   1a5d8:	4661      	mov	r1, ip
	__asm__ volatile(
   1a5da:	f384 8811 	msr	BASEPRI, r4
   1a5de:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1a5e2:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   1a5e6:	bf00      	nop
   1a5e8:	20020000 	.word	0x20020000

0001a5ec <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   1a5ec:	6a02      	ldr	r2, [r0, #32]
{
   1a5ee:	b538      	push	{r3, r4, r5, lr}
	if (timer->period > 0) {
   1a5f0:	2a00      	cmp	r2, #0
{
   1a5f2:	4604      	mov	r4, r0
	if (timer->period > 0) {
   1a5f4:	dd02      	ble.n	1a5fc <z_timer_expiration_handler+0x10>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1a5f6:	490e      	ldr	r1, [pc, #56]	; (1a630 <z_timer_expiration_handler+0x44>)
   1a5f8:	f7ff ff42 	bl	1a480 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1a5fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a5fe:	3301      	adds	r3, #1
   1a600:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1a602:	69a3      	ldr	r3, [r4, #24]
   1a604:	b10b      	cbz	r3, 1a60a <z_timer_expiration_handler+0x1e>
		timer->expiry_fn(timer);
   1a606:	4620      	mov	r0, r4
   1a608:	4798      	blx	r3
	return list->head == list;
   1a60a:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a60e:	42a5      	cmp	r5, r4
   1a610:	d00d      	beq.n	1a62e <z_timer_expiration_handler+0x42>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1a612:	b165      	cbz	r5, 1a62e <z_timer_expiration_handler+0x42>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1a614:	4628      	mov	r0, r5
   1a616:	f002 fda1 	bl	1d15c <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1a61a:	7b6b      	ldrb	r3, [r5, #13]
   1a61c:	06db      	lsls	r3, r3, #27
   1a61e:	d104      	bne.n	1a62a <z_timer_expiration_handler+0x3e>
	if (z_is_thread_ready(thread)) {
   1a620:	69ab      	ldr	r3, [r5, #24]
   1a622:	b913      	cbnz	r3, 1a62a <z_timer_expiration_handler+0x3e>
		z_add_thread_to_ready_q(thread);
   1a624:	4628      	mov	r0, r5
   1a626:	f7ff fabd 	bl	19ba4 <z_add_thread_to_ready_q>
   1a62a:	2300      	movs	r3, #0
   1a62c:	66ab      	str	r3, [r5, #104]	; 0x68

	z_ready_thread(thread);

	arch_thread_return_value_set(thread, 0);
}
   1a62e:	bd38      	pop	{r3, r4, r5, pc}
   1a630:	0001a5ed 	.word	0x0001a5ed

0001a634 <z_impl_k_timer_start>:
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   1a634:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a638:	f240 36e7 	movw	r6, #999	; 0x3e7
   1a63c:	2700      	movs	r7, #0
   1a63e:	4604      	mov	r4, r0
   1a640:	4688      	mov	r8, r1
   1a642:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1a646:	4630      	mov	r0, r6
   1a648:	4639      	mov	r1, r7
   1a64a:	2300      	movs	r3, #0
   1a64c:	fbe5 0102 	umlal	r0, r1, r5, r2
   1a650:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a654:	f7f1 fdf2 	bl	c23c <__aeabi_uldivmod>
   1a658:	4639      	mov	r1, r7
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = k_ms_to_ticks_ceil32(period);
   1a65a:	9000      	str	r0, [sp, #0]
   1a65c:	4630      	mov	r0, r6
   1a65e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a662:	2300      	movs	r3, #0
   1a664:	fbe5 0108 	umlal	r0, r1, r5, r8
   1a668:	f7f1 fde8 	bl	c23c <__aeabi_uldivmod>
	duration_in_ticks = k_ms_to_ticks_ceil32(duration);
   1a66c:	9001      	str	r0, [sp, #4]

	(void)z_abort_timeout(&timer->timeout);
   1a66e:	4620      	mov	r0, r4
   1a670:	f002 fe70 	bl	1d354 <z_abort_timeout>
	timer->period = period_in_ticks;
   1a674:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0U;
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1a676:	4620      	mov	r0, r4
	timer->period = period_in_ticks;
   1a678:	6223      	str	r3, [r4, #32]
	timer->status = 0U;
   1a67a:	2300      	movs	r3, #0
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1a67c:	9a01      	ldr	r2, [sp, #4]
   1a67e:	4903      	ldr	r1, [pc, #12]	; (1a68c <z_impl_k_timer_start+0x58>)
	timer->status = 0U;
   1a680:	6263      	str	r3, [r4, #36]	; 0x24
		     duration_in_ticks);
}
   1a682:	b002      	add	sp, #8
   1a684:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1a688:	f7ff befa 	b.w	1a480 <z_add_timeout>
   1a68c:	0001a5ed 	.word	0x0001a5ed

0001a690 <k_poll_event_init>:
 */
static struct k_spinlock lock;

void k_poll_event_init(struct k_poll_event *event, u32_t type,
		       int mode, void *obj)
{
   1a690:	b510      	push	{r4, lr}
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
	__ASSERT(obj != NULL, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
   1a692:	7b44      	ldrb	r4, [r0, #13]
   1a694:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
	event->mode = mode;
   1a698:	7b81      	ldrb	r1, [r0, #14]
	event->type = type;
   1a69a:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
   1a69c:	f362 0141 	bfi	r1, r2, #1, #1
	event->poller = NULL;
   1a6a0:	2200      	movs	r2, #0
	event->mode = mode;
   1a6a2:	7381      	strb	r1, [r0, #14]
	event->state = K_POLL_STATE_NOT_READY;
   1a6a4:	68c1      	ldr	r1, [r0, #12]
	event->poller = NULL;
   1a6a6:	6082      	str	r2, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   1a6a8:	4a02      	ldr	r2, [pc, #8]	; (1a6b4 <k_poll_event_init+0x24>)
   1a6aa:	400a      	ands	r2, r1
	event->unused = 0U;
	event->obj = obj;
   1a6ac:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   1a6b0:	bd10      	pop	{r4, pc}
   1a6b2:	bf00      	nop
   1a6b4:	00020fff 	.word	0x00020fff

0001a6b8 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   1a6b8:	2301      	movs	r3, #1
{
   1a6ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a6be:	b086      	sub	sp, #24
	struct _poller poller = { .is_polling = true,
   1a6c0:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   1a6c4:	4b23      	ldr	r3, [pc, #140]	; (1a754 <z_impl_k_poll+0x9c>)

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, &poller,
   1a6c6:	4690      	mov	r8, r2
	struct _poller poller = { .is_polling = true,
   1a6c8:	689b      	ldr	r3, [r3, #8]
{
   1a6ca:	4606      	mov	r6, r0
	struct _poller poller = { .is_polling = true,
   1a6cc:	9304      	str	r3, [sp, #16]
   1a6ce:	4b22      	ldr	r3, [pc, #136]	; (1a758 <z_impl_k_poll+0xa0>)
   1a6d0:	9305      	str	r3, [sp, #20]
	events_registered = register_events(events, num_events, &poller,
   1a6d2:	fab2 f382 	clz	r3, r2
   1a6d6:	aa03      	add	r2, sp, #12
   1a6d8:	095b      	lsrs	r3, r3, #5
   1a6da:	f002 ff58 	bl	1d58e <register_events>
   1a6de:	4607      	mov	r7, r0
	__asm__ volatile(
   1a6e0:	f04f 0320 	mov.w	r3, #32
   1a6e4:	f3ef 8511 	mrs	r5, BASEPRI
   1a6e8:	f383 8811 	msr	BASEPRI, r3
   1a6ec:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   1a6f0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a6f4:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   1a6f8:	b94b      	cbnz	r3, 1a70e <z_impl_k_poll+0x56>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   1a6fa:	462a      	mov	r2, r5
   1a6fc:	4639      	mov	r1, r7
   1a6fe:	4630      	mov	r0, r6
   1a700:	f002 fead 	bl	1d45e <clear_event_registrations>
	__asm__ volatile(
   1a704:	f385 8811 	msr	BASEPRI, r5
   1a708:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return swap_rc;
   1a70c:	e00b      	b.n	1a726 <z_impl_k_poll+0x6e>
	poller.is_polling = false;
   1a70e:	2300      	movs	r3, #0
   1a710:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   1a714:	f1b8 0f00 	cmp.w	r8, #0
   1a718:	d109      	bne.n	1a72e <z_impl_k_poll+0x76>
   1a71a:	f385 8811 	msr	BASEPRI, r5
   1a71e:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1a722:	f06f 040a 	mvn.w	r4, #10
}
   1a726:	4620      	mov	r0, r4
   1a728:	b006      	add	sp, #24
   1a72a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1a72e:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1a730:	4643      	mov	r3, r8
   1a732:	4629      	mov	r1, r5
   1a734:	4809      	ldr	r0, [pc, #36]	; (1a75c <z_impl_k_poll+0xa4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1a736:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1a73a:	f7ff fbe9 	bl	19f10 <z_pend_curr>
   1a73e:	4604      	mov	r4, r0
	__asm__ volatile(
   1a740:	f04f 0320 	mov.w	r3, #32
   1a744:	f3ef 8511 	mrs	r5, BASEPRI
   1a748:	f383 8811 	msr	BASEPRI, r3
   1a74c:	f3bf 8f6f 	isb	sy
   1a750:	e7d3      	b.n	1a6fa <z_impl_k_poll+0x42>
   1a752:	bf00      	nop
   1a754:	20021cfc 	.word	0x20021cfc
   1a758:	0001d4ef 	.word	0x0001d4ef
   1a75c:	20023357 	.word	0x20023357

0001a760 <z_errno>:
   1a760:	f7fe bd96 	b.w	19290 <z_impl_z_errno>

0001a764 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
   1a764:	b570      	push	{r4, r5, r6, lr}
   1a766:	250c      	movs	r5, #12
   1a768:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   1a76a:	f990 000b 	ldrsb.w	r0, [r0, #11]
   1a76e:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
   1a770:	4288      	cmp	r0, r1

	*word = &bitarray[bn / 32];
   1a772:	4610      	mov	r0, r2
   1a774:	eb06 0405 	add.w	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
   1a778:	bfb8      	it	lt
   1a77a:	5974      	ldrlt	r4, [r6, r5]
	*word = &bitarray[bn / 32];
   1a77c:	2a00      	cmp	r2, #0
   1a77e:	bfb8      	it	lt
   1a780:	f102 001f 	addlt.w	r0, r2, #31
   1a784:	1140      	asrs	r0, r0, #5
   1a786:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   1a78a:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
   1a78c:	f002 001f 	and.w	r0, r2, #31
   1a790:	bd70      	pop	{r4, r5, r6, pc}

0001a792 <pool_irq_lock.isra.2.part.3>:
   1a792:	f04f 0320 	mov.w	r3, #32
   1a796:	f3ef 8011 	mrs	r0, BASEPRI
   1a79a:	f383 8811 	msr	BASEPRI, r3
   1a79e:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
		return irq_lock();
	} else {
		return 0;
	}
}
   1a7a2:	4770      	bx	lr

0001a7a4 <pool_irq_unlock.isra.4>:

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1a7a4:	07c3      	lsls	r3, r0, #31
   1a7a6:	d503      	bpl.n	1a7b0 <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   1a7a8:	f381 8811 	msr	BASEPRI, r1
   1a7ac:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
   1a7b0:	4770      	bx	lr

0001a7b2 <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
   1a7b2:	23ff      	movs	r3, #255	; 0xff
{
   1a7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1a7b8:	6846      	ldr	r6, [r0, #4]
	p->max_inline_level = -1;
   1a7ba:	72c3      	strb	r3, [r0, #11]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1a7bc:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
   1a7be:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
   1a7c0:	f04f 090c 	mov.w	r9, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1a7c4:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1a7c6:	6801      	ldr	r1, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1a7c8:	fb06 fc07 	mul.w	ip, r6, r7
	for (i = 0; i < p->n_levels; i++) {
   1a7cc:	f890 800a 	ldrb.w	r8, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1a7d0:	4461      	add	r1, ip
	for (i = 0; i < p->n_levels; i++) {
   1a7d2:	4598      	cmp	r8, r3
   1a7d4:	dc05      	bgt.n	1a7e2 <z_sys_mem_pool_base_init+0x30>
   1a7d6:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   1a7d8:	4619      	mov	r1, r3
   1a7da:	428f      	cmp	r7, r1
   1a7dc:	dc20      	bgt.n	1a820 <z_sys_mem_pool_base_init+0x6e>
}
   1a7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   1a7e2:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
   1a7e6:	fb09 fe03 	mul.w	lr, r9, r3
   1a7ea:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   1a7ee:	2d20      	cmp	r5, #32
		sys_dlist_init(&p->levels[i].free_list);
   1a7f0:	eb0a 040e 	add.w	r4, sl, lr
   1a7f4:	f104 0b04 	add.w	fp, r4, #4
	list->tail = (sys_dnode_t *)list;
   1a7f8:	e9c4 bb01 	strd	fp, fp, [r4, #4]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   1a7fc:	d805      	bhi.n	1a80a <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   1a7fe:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
   1a800:	0892      	lsrs	r2, r2, #2
   1a802:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
   1a806:	3301      	adds	r3, #1
   1a808:	e7e3      	b.n	1a7d2 <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
   1a80a:	f115 041f 	adds.w	r4, r5, #31
   1a80e:	bf48      	it	mi
   1a810:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
   1a814:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
   1a816:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
   1a81a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   1a81e:	e7ef      	b.n	1a800 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
   1a820:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   1a822:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   1a824:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
   1a828:	18ec      	adds	r4, r5, r3
	node->next = list;
   1a82a:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
   1a82e:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   1a830:	3101      	adds	r1, #1
   1a832:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
   1a834:	6895      	ldr	r5, [r2, #8]
   1a836:	4433      	add	r3, r6
   1a838:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1a83a:	6094      	str	r4, [r2, #8]
   1a83c:	e7cd      	b.n	1a7da <z_sys_mem_pool_base_init+0x28>

0001a83e <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
   1a83e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a842:	b087      	sub	sp, #28
	int i, from_l, alloc_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1a844:	7a84      	ldrb	r4, [r0, #10]
{
   1a846:	af00      	add	r7, sp, #0
   1a848:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1a84c:	00a3      	lsls	r3, r4, #2
   1a84e:	3307      	adds	r3, #7
   1a850:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1a854:	ebad 0d03 	sub.w	sp, sp, r3
   1a858:	46ea      	mov	sl, sp
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = p->max_sz;
   1a85a:	4653      	mov	r3, sl
   1a85c:	6842      	ldr	r2, [r0, #4]
{
   1a85e:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   1a860:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   1a864:	2200      	movs	r2, #0
   1a866:	4294      	cmp	r4, r2
   1a868:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   1a86c:	dd09      	ble.n	1a882 <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   1a86e:	b122      	cbz	r2, 1a87a <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1a870:	6818      	ldr	r0, [r3, #0]
   1a872:	0880      	lsrs	r0, r0, #2
   1a874:	f020 0003 	bic.w	r0, r0, #3
   1a878:	6058      	str	r0, [r3, #4]
		}

		if (lsizes[i] < size) {
   1a87a:	f853 0f04 	ldr.w	r0, [r3, #4]!
   1a87e:	4288      	cmp	r0, r1
   1a880:	d208      	bcs.n	1a894 <z_sys_mem_pool_block_alloc+0x56>
		}

		alloc_l = i;
	}

	if (alloc_l < 0) {
   1a882:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   1a886:	d107      	bne.n	1a898 <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   1a888:	2300      	movs	r3, #0
   1a88a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1a88c:	6013      	str	r3, [r2, #0]
	pool_irq_unlock(p, key);

	*data_p = data;

	if (data == NULL) {
		return -ENOMEM;
   1a88e:	f06f 000b 	mvn.w	r0, #11
   1a892:	e02c      	b.n	1a8ee <z_sys_mem_pool_block_alloc+0xb0>
	for (i = 0; i < p->n_levels; i++) {
   1a894:	3201      	adds	r2, #1
   1a896:	e7e6      	b.n	1a866 <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1a898:	7c28      	ldrb	r0, [r5, #16]
   1a89a:	f010 0001 	ands.w	r0, r0, #1
   1a89e:	d001      	beq.n	1a8a4 <z_sys_mem_pool_block_alloc+0x66>
   1a8a0:	f7ff ff77 	bl	1a792 <pool_irq_lock.isra.2.part.3>
   1a8a4:	230c      	movs	r3, #12
	key = pool_irq_lock(p);
   1a8a6:	4680      	mov	r8, r0
	block = sys_dlist_get(&p->levels[l].free_list);
   1a8a8:	464e      	mov	r6, r9
   1a8aa:	68ea      	ldr	r2, [r5, #12]
   1a8ac:	fb03 2309 	mla	r3, r3, r9, r2
	return list->head == list;
   1a8b0:	461a      	mov	r2, r3
   1a8b2:	f852 4f04 	ldr.w	r4, [r2, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1a8b6:	4294      	cmp	r4, r2
   1a8b8:	d11d      	bne.n	1a8f6 <z_sys_mem_pool_block_alloc+0xb8>
	for (i = alloc_l; i >= 0; i--) {
   1a8ba:	3e01      	subs	r6, #1
   1a8bc:	1c72      	adds	r2, r6, #1
   1a8be:	f1a3 030c 	sub.w	r3, r3, #12
   1a8c2:	d1f5      	bne.n	1a8b0 <z_sys_mem_pool_block_alloc+0x72>
   1a8c4:	2400      	movs	r4, #0
	pool_irq_unlock(p, key);
   1a8c6:	4641      	mov	r1, r8
   1a8c8:	7c28      	ldrb	r0, [r5, #16]
   1a8ca:	f7ff ff6b 	bl	1a7a4 <pool_irq_unlock.isra.4>
	*data_p = data;
   1a8ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a8d0:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   1a8d2:	2c00      	cmp	r4, #0
   1a8d4:	d0db      	beq.n	1a88e <z_sys_mem_pool_block_alloc+0x50>
	}

	*level_p = alloc_l;
   1a8d6:	68bb      	ldr	r3, [r7, #8]
	*block_p = block_num(p, data, lsizes[alloc_l]);

	return 0;
   1a8d8:	2000      	movs	r0, #0
	*level_p = alloc_l;
   1a8da:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1a8de:	682b      	ldr	r3, [r5, #0]
   1a8e0:	1ae4      	subs	r4, r4, r3
   1a8e2:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   1a8e6:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   1a8ea:	687b      	ldr	r3, [r7, #4]
   1a8ec:	601c      	str	r4, [r3, #0]
}
   1a8ee:	371c      	adds	r7, #28
   1a8f0:	46bd      	mov	sp, r7
   1a8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	node->prev->next = node->next;
   1a8f6:	e9d4 3200 	ldrd	r3, r2, [r4]
   1a8fa:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1a8fc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a8fe:	2300      	movs	r3, #0
	node->prev = NULL;
   1a900:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1a904:	682b      	ldr	r3, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
   1a906:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1a90a:	1ae2      	subs	r2, r4, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   1a90c:	f107 0b14 	add.w	fp, r7, #20
   1a910:	fb92 f2f1 	sdiv	r2, r2, r1
   1a914:	465b      	mov	r3, fp
   1a916:	4631      	mov	r1, r6
   1a918:	4628      	mov	r0, r5
   1a91a:	f7ff ff23 	bl	1a764 <get_bit_ptr>
	*word |= (1<<bit);
   1a91e:	2201      	movs	r2, #1
   1a920:	6979      	ldr	r1, [r7, #20]
   1a922:	fa02 f000 	lsl.w	r0, r2, r0
   1a926:	680b      	ldr	r3, [r1, #0]
   1a928:	603a      	str	r2, [r7, #0]
   1a92a:	4303      	orrs	r3, r0
   1a92c:	600b      	str	r3, [r1, #0]
			for (from_l = i; from_l < alloc_l; from_l++) {
   1a92e:	454e      	cmp	r6, r9
   1a930:	dac9      	bge.n	1a8c6 <z_sys_mem_pool_block_alloc+0x88>
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1a932:	682a      	ldr	r2, [r5, #0]
   1a934:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
   1a938:	1aa2      	subs	r2, r4, r2
   1a93a:	fb92 f2f3 	sdiv	r2, r2, r3
	set_alloc_bit(p, l + 1, 4*bn);
   1a93e:	3601      	adds	r6, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   1a940:	465b      	mov	r3, fp
   1a942:	0092      	lsls	r2, r2, #2
   1a944:	4631      	mov	r1, r6
   1a946:	4628      	mov	r0, r5
   1a948:	f7ff ff0c 	bl	1a764 <get_bit_ptr>
	*word |= (1<<bit);
   1a94c:	697a      	ldr	r2, [r7, #20]
   1a94e:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1a950:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   1a952:	fa03 f000 	lsl.w	r0, r3, r0
   1a956:	6813      	ldr	r3, [r2, #0]
   1a958:	4303      	orrs	r3, r0
   1a95a:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1a95c:	230c      	movs	r3, #12
   1a95e:	2203      	movs	r2, #3
   1a960:	fb03 1106 	mla	r1, r3, r6, r1
		int lsz = lsizes[l + 1];
   1a964:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1a968:	f101 0e04 	add.w	lr, r1, #4
   1a96c:	1823      	adds	r3, r4, r0
   1a96e:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
   1a970:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   1a972:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
   1a976:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1a978:	688a      	ldr	r2, [r1, #8]
   1a97a:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   1a97c:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
   1a97e:	608b      	str	r3, [r1, #8]
   1a980:	3a01      	subs	r2, #1
   1a982:	4403      	add	r3, r0
   1a984:	60fa      	str	r2, [r7, #12]
   1a986:	d1f3      	bne.n	1a970 <z_sys_mem_pool_block_alloc+0x132>
				pool_irq_unlock(p, key);
   1a988:	4641      	mov	r1, r8
   1a98a:	7c28      	ldrb	r0, [r5, #16]
   1a98c:	f7ff ff0a 	bl	1a7a4 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1a990:	7c2b      	ldrb	r3, [r5, #16]
   1a992:	07db      	lsls	r3, r3, #31
   1a994:	d503      	bpl.n	1a99e <z_sys_mem_pool_block_alloc+0x160>
   1a996:	f7ff fefc 	bl	1a792 <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   1a99a:	4680      	mov	r8, r0
   1a99c:	e7c7      	b.n	1a92e <z_sys_mem_pool_block_alloc+0xf0>
		return 0;
   1a99e:	68f8      	ldr	r0, [r7, #12]
   1a9a0:	e7fb      	b.n	1a99a <z_sys_mem_pool_block_alloc+0x15c>

0001a9a2 <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   1a9a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a9a6:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1a9a8:	7a83      	ldrb	r3, [r0, #10]
{
   1a9aa:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1a9ac:	009b      	lsls	r3, r3, #2
   1a9ae:	3307      	adds	r3, #7
   1a9b0:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1a9b4:	ebad 0d03 	sub.w	sp, sp, r3
   1a9b8:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   1a9ba:	6843      	ldr	r3, [r0, #4]
{
   1a9bc:	4606      	mov	r6, r0
	lsizes[0] = p->max_sz;
   1a9be:	465c      	mov	r4, fp
	for (i = 1; i <= level; i++) {
   1a9c0:	2001      	movs	r0, #1
	lsizes[0] = p->max_sz;
   1a9c2:	f8cb 3000 	str.w	r3, [fp]
	for (i = 1; i <= level; i++) {
   1a9c6:	4281      	cmp	r1, r0
   1a9c8:	d215      	bcs.n	1a9f6 <z_sys_mem_pool_block_free+0x54>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1a9ca:	7c30      	ldrb	r0, [r6, #16]
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   1a9cc:	4688      	mov	r8, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1a9ce:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
   1a9d2:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1a9d4:	d001      	beq.n	1a9da <z_sys_mem_pool_block_free+0x38>
   1a9d6:	f7ff fedc 	bl	1a792 <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
   1a9da:	4604      	mov	r4, r0
	while (level >= 0) {
   1a9dc:	f1b8 0f00 	cmp.w	r8, #0
   1a9e0:	da11      	bge.n	1aa06 <z_sys_mem_pool_block_free+0x64>
	return -1;
   1a9e2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	pool_irq_unlock(p, key);
   1a9e6:	4621      	mov	r1, r4
   1a9e8:	7c30      	ldrb	r0, [r6, #16]
   1a9ea:	f7ff fedb 	bl	1a7a4 <pool_irq_unlock.isra.4>
}
   1a9ee:	3714      	adds	r7, #20
   1a9f0:	46bd      	mov	sp, r7
   1a9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1a9f6:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
   1a9f8:	3001      	adds	r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1a9fa:	089b      	lsrs	r3, r3, #2
   1a9fc:	f023 0303 	bic.w	r3, r3, #3
   1aa00:	f844 3f04 	str.w	r3, [r4, #4]!
   1aa04:	e7df      	b.n	1a9c6 <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
   1aa06:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
   1aa0a:	462a      	mov	r2, r5
	return (u8_t *)p->buf + lsz * block;
   1aa0c:	fb03 fa05 	mul.w	sl, r3, r5
		int i, lsz = lsizes[level];
   1aa10:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   1aa12:	6833      	ldr	r3, [r6, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   1aa14:	4641      	mov	r1, r8
	return (u8_t *)p->buf + lsz * block;
   1aa16:	eb03 090a 	add.w	r9, r3, sl
   1aa1a:	603b      	str	r3, [r7, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   1aa1c:	4630      	mov	r0, r6
   1aa1e:	f107 030c 	add.w	r3, r7, #12
   1aa22:	f7ff fe9f 	bl	1a764 <get_bit_ptr>
	*word &= ~(1<<bit);
   1aa26:	2301      	movs	r3, #1
   1aa28:	68fa      	ldr	r2, [r7, #12]
   1aa2a:	fa03 f000 	lsl.w	r0, r3, r0
   1aa2e:	6813      	ldr	r3, [r2, #0]
	node->next = list;
   1aa30:	6839      	ldr	r1, [r7, #0]
   1aa32:	ea23 0300 	bic.w	r3, r3, r0
   1aa36:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
   1aa38:	220c      	movs	r2, #12
   1aa3a:	68f3      	ldr	r3, [r6, #12]
   1aa3c:	fb02 3308 	mla	r3, r2, r8, r3
   1aa40:	1d1a      	adds	r2, r3, #4
   1aa42:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
   1aa46:	689a      	ldr	r2, [r3, #8]
		pool_irq_unlock(p, key);
   1aa48:	4621      	mov	r1, r4
   1aa4a:	f8c9 2004 	str.w	r2, [r9, #4]
	list->tail->next = node;
   1aa4e:	689a      	ldr	r2, [r3, #8]
   1aa50:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
   1aa54:	f8c3 9008 	str.w	r9, [r3, #8]
   1aa58:	7c30      	ldrb	r0, [r6, #16]
   1aa5a:	f7ff fea3 	bl	1a7a4 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1aa5e:	7c30      	ldrb	r0, [r6, #16]
   1aa60:	f010 0001 	ands.w	r0, r0, #1
   1aa64:	d001      	beq.n	1aa6a <z_sys_mem_pool_block_free+0xc8>
   1aa66:	f7ff fe94 	bl	1a792 <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
   1aa6a:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1aa6c:	f1b8 0f00 	cmp.w	r8, #0
   1aa70:	d0b9      	beq.n	1a9e6 <z_sys_mem_pool_block_free+0x44>
	int bit = get_bit_ptr(p, level, bn, &word);
   1aa72:	f107 030c 	add.w	r3, r7, #12
   1aa76:	462a      	mov	r2, r5
   1aa78:	4641      	mov	r1, r8
   1aa7a:	4630      	mov	r0, r6
   1aa7c:	f7ff fe72 	bl	1a764 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   1aa80:	68fb      	ldr	r3, [r7, #12]
   1aa82:	2800      	cmp	r0, #0
   1aa84:	bfb8      	it	lt
   1aa86:	3003      	addlt	r0, #3
   1aa88:	681b      	ldr	r3, [r3, #0]
   1aa8a:	f020 0003 	bic.w	r0, r0, #3
   1aa8e:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1aa92:	f010 000f 	ands.w	r0, r0, #15
   1aa96:	d1a6      	bne.n	1a9e6 <z_sys_mem_pool_block_free+0x44>
	node->next = NULL;
   1aa98:	4684      	mov	ip, r0
			int b = (bn & ~3) + i;
   1aa9a:	f025 0a03 	bic.w	sl, r5, #3
	return (u8_t *)p->buf + lsz * block;
   1aa9e:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
   1aaa0:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
   1aaa4:	4353      	muls	r3, r2
   1aaa6:	6832      	ldr	r2, [r6, #0]
		for (i = 0; i < 4; i++) {
   1aaa8:	3001      	adds	r0, #1
	return (u8_t *)p->buf + lsz * block;
   1aaaa:	18d1      	adds	r1, r2, r3
	node->prev->next = node->next;
   1aaac:	f8d1 9004 	ldr.w	r9, [r1, #4]
   1aab0:	f852 e003 	ldr.w	lr, [r2, r3]
		for (i = 0; i < 4; i++) {
   1aab4:	2804      	cmp	r0, #4
   1aab6:	f8c9 e000 	str.w	lr, [r9]
	node->next->prev = node->prev;
   1aaba:	f8ce 9004 	str.w	r9, [lr, #4]
	node->next = NULL;
   1aabe:	f842 c003 	str.w	ip, [r2, r3]
	node->prev = NULL;
   1aac2:	f8c1 c004 	str.w	ip, [r1, #4]
   1aac6:	d1ea      	bne.n	1aa9e <z_sys_mem_pool_block_free+0xfc>
		bn = bn / 4;
   1aac8:	2d00      	cmp	r5, #0
   1aaca:	bfb8      	it	lt
   1aacc:	3503      	addlt	r5, #3
		level = level - 1;
   1aace:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		bn = bn / 4;
   1aad2:	10ad      	asrs	r5, r5, #2
   1aad4:	e782      	b.n	1a9dc <z_sys_mem_pool_block_free+0x3a>

0001aad6 <arch_printk_char_out>:
}
   1aad6:	2000      	movs	r0, #0
   1aad8:	4770      	bx	lr

0001aada <print_err>:
{
   1aada:	b570      	push	{r4, r5, r6, lr}
   1aadc:	460d      	mov	r5, r1
   1aade:	4604      	mov	r4, r0
	out('E', ctx);
   1aae0:	2045      	movs	r0, #69	; 0x45
   1aae2:	47a0      	blx	r4
	out('R', ctx);
   1aae4:	4629      	mov	r1, r5
   1aae6:	2052      	movs	r0, #82	; 0x52
   1aae8:	47a0      	blx	r4
	out('R', ctx);
   1aaea:	4629      	mov	r1, r5
   1aaec:	4623      	mov	r3, r4
}
   1aaee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   1aaf2:	2052      	movs	r0, #82	; 0x52
   1aaf4:	4718      	bx	r3

0001aaf6 <z_vprintk>:
{
   1aaf6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   1aafa:	f04f 0800 	mov.w	r8, #0
{
   1aafe:	4606      	mov	r6, r0
   1ab00:	460f      	mov	r7, r1
	int min_width = -1;
   1ab02:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   1ab06:	46c1      	mov	r9, r8
{
   1ab08:	b08b      	sub	sp, #44	; 0x2c
   1ab0a:	461c      	mov	r4, r3
	while (*fmt) {
   1ab0c:	1e53      	subs	r3, r2, #1
   1ab0e:	9302      	str	r3, [sp, #8]
			might_format = 0;
   1ab10:	2500      	movs	r5, #0
					break;
   1ab12:	e005      	b.n	1ab20 <z_vprintk+0x2a>
		if (!might_format) {
   1ab14:	b96d      	cbnz	r5, 1ab32 <z_vprintk+0x3c>
			if (*fmt != '%') {
   1ab16:	2825      	cmp	r0, #37	; 0x25
   1ab18:	f000 814f 	beq.w	1adba <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
   1ab1c:	4639      	mov	r1, r7
   1ab1e:	47b0      	blx	r6
	while (*fmt) {
   1ab20:	9b02      	ldr	r3, [sp, #8]
   1ab22:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1ab26:	9302      	str	r3, [sp, #8]
   1ab28:	2800      	cmp	r0, #0
   1ab2a:	d1f3      	bne.n	1ab14 <z_vprintk+0x1e>
}
   1ab2c:	b00b      	add	sp, #44	; 0x2c
   1ab2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   1ab32:	2864      	cmp	r0, #100	; 0x64
   1ab34:	d06e      	beq.n	1ac14 <z_vprintk+0x11e>
   1ab36:	d81a      	bhi.n	1ab6e <z_vprintk+0x78>
   1ab38:	2839      	cmp	r0, #57	; 0x39
   1ab3a:	d80a      	bhi.n	1ab52 <z_vprintk+0x5c>
   1ab3c:	2831      	cmp	r0, #49	; 0x31
   1ab3e:	d260      	bcs.n	1ac02 <z_vprintk+0x10c>
   1ab40:	282d      	cmp	r0, #45	; 0x2d
   1ab42:	f000 8140 	beq.w	1adc6 <z_vprintk+0x2d0>
   1ab46:	2830      	cmp	r0, #48	; 0x30
   1ab48:	d04c      	beq.n	1abe4 <z_vprintk+0xee>
   1ab4a:	2825      	cmp	r0, #37	; 0x25
   1ab4c:	d107      	bne.n	1ab5e <z_vprintk+0x68>
				out((int)'%', ctx);
   1ab4e:	4639      	mov	r1, r7
   1ab50:	e00b      	b.n	1ab6a <z_vprintk+0x74>
			switch (*fmt) {
   1ab52:	2858      	cmp	r0, #88	; 0x58
   1ab54:	f000 80bb 	beq.w	1acce <z_vprintk+0x1d8>
   1ab58:	2863      	cmp	r0, #99	; 0x63
   1ab5a:	f000 812a 	beq.w	1adb2 <z_vprintk+0x2bc>
					out((int)'%', ctx);
   1ab5e:	4639      	mov	r1, r7
   1ab60:	2025      	movs	r0, #37	; 0x25
   1ab62:	47b0      	blx	r6
					out((int)*fmt, ctx);
   1ab64:	4639      	mov	r1, r7
   1ab66:	9b02      	ldr	r3, [sp, #8]
   1ab68:	7818      	ldrb	r0, [r3, #0]
   1ab6a:	47b0      	blx	r6
   1ab6c:	e7d0      	b.n	1ab10 <z_vprintk+0x1a>
			switch (*fmt) {
   1ab6e:	2870      	cmp	r0, #112	; 0x70
   1ab70:	f000 80a3 	beq.w	1acba <z_vprintk+0x1c4>
   1ab74:	d811      	bhi.n	1ab9a <z_vprintk+0xa4>
   1ab76:	2869      	cmp	r0, #105	; 0x69
   1ab78:	d04c      	beq.n	1ac14 <z_vprintk+0x11e>
   1ab7a:	286c      	cmp	r0, #108	; 0x6c
   1ab7c:	d105      	bne.n	1ab8a <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
   1ab7e:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1ab82:	d12a      	bne.n	1abda <z_vprintk+0xe4>
					length_mod = 'L';
   1ab84:	f04f 084c 	mov.w	r8, #76	; 0x4c
   1ab88:	e7ca      	b.n	1ab20 <z_vprintk+0x2a>
			switch (*fmt) {
   1ab8a:	2868      	cmp	r0, #104	; 0x68
   1ab8c:	d1e7      	bne.n	1ab5e <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
   1ab8e:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   1ab92:	d122      	bne.n	1abda <z_vprintk+0xe4>
					length_mod = 'H';
   1ab94:	f04f 0848 	mov.w	r8, #72	; 0x48
   1ab98:	e7c2      	b.n	1ab20 <z_vprintk+0x2a>
			switch (*fmt) {
   1ab9a:	2875      	cmp	r0, #117	; 0x75
   1ab9c:	d071      	beq.n	1ac82 <z_vprintk+0x18c>
   1ab9e:	d818      	bhi.n	1abd2 <z_vprintk+0xdc>
   1aba0:	2873      	cmp	r0, #115	; 0x73
   1aba2:	d1dc      	bne.n	1ab5e <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   1aba4:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
   1aba8:	46ab      	mov	fp, r5
   1abaa:	465b      	mov	r3, fp
   1abac:	f81b 0b01 	ldrb.w	r0, [fp], #1
   1abb0:	2800      	cmp	r0, #0
   1abb2:	f040 80fb 	bne.w	1adac <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
   1abb6:	f1b9 0f03 	cmp.w	r9, #3
   1abba:	f040 810a 	bne.w	1add2 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
   1abbe:	1b5d      	subs	r5, r3, r5
   1abc0:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
   1abc4:	2d00      	cmp	r5, #0
   1abc6:	dda3      	ble.n	1ab10 <z_vprintk+0x1a>
						out(' ', ctx);
   1abc8:	4639      	mov	r1, r7
   1abca:	2020      	movs	r0, #32
   1abcc:	47b0      	blx	r6
   1abce:	3d01      	subs	r5, #1
   1abd0:	e7f8      	b.n	1abc4 <z_vprintk+0xce>
			switch (*fmt) {
   1abd2:	2878      	cmp	r0, #120	; 0x78
   1abd4:	d07b      	beq.n	1acce <z_vprintk+0x1d8>
   1abd6:	287a      	cmp	r0, #122	; 0x7a
   1abd8:	d1c1      	bne.n	1ab5e <z_vprintk+0x68>
				} else if (length_mod == 0) {
   1abda:	f1b8 0f00 	cmp.w	r8, #0
   1abde:	d1be      	bne.n	1ab5e <z_vprintk+0x68>
   1abe0:	4680      	mov	r8, r0
   1abe2:	e79d      	b.n	1ab20 <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
   1abe4:	f1ba 0f00 	cmp.w	sl, #0
   1abe8:	da0e      	bge.n	1ac08 <z_vprintk+0x112>
   1abea:	f1b9 0f00 	cmp.w	r9, #0
   1abee:	f000 80ed 	beq.w	1adcc <z_vprintk+0x2d6>
					min_width = *fmt - '0';
   1abf2:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   1abf6:	f1b9 0f00 	cmp.w	r9, #0
   1abfa:	bf08      	it	eq
   1abfc:	f04f 0902 	moveq.w	r9, #2
   1ac00:	e78e      	b.n	1ab20 <z_vprintk+0x2a>
				if (min_width < 0) {
   1ac02:	f1ba 0f00 	cmp.w	sl, #0
   1ac06:	dbf4      	blt.n	1abf2 <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
   1ac08:	230a      	movs	r3, #10
   1ac0a:	fb03 0a0a 	mla	sl, r3, sl, r0
   1ac0e:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   1ac12:	e7f0      	b.n	1abf6 <z_vprintk+0x100>
				if (length_mod == 'z') {
   1ac14:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   1ac18:	d102      	bne.n	1ac20 <z_vprintk+0x12a>
					d = va_arg(ap, int);
   1ac1a:	f854 5b04 	ldr.w	r5, [r4], #4
   1ac1e:	e01f      	b.n	1ac60 <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
   1ac20:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1ac24:	d0f9      	beq.n	1ac1a <z_vprintk+0x124>
				} else if (length_mod == 'L') {
   1ac26:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1ac2a:	d1f6      	bne.n	1ac1a <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
   1ac2c:	3407      	adds	r4, #7
   1ac2e:	f024 0407 	bic.w	r4, r4, #7
   1ac32:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
   1ac36:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
   1ac3a:	9106      	str	r1, [sp, #24]
   1ac3c:	f143 0100 	adc.w	r1, r3, #0
   1ac40:	9107      	str	r1, [sp, #28]
   1ac42:	2100      	movs	r1, #0
   1ac44:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   1ac48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ac4c:	4561      	cmp	r1, ip
   1ac4e:	bf08      	it	eq
   1ac50:	4558      	cmpeq	r0, fp
   1ac52:	d204      	bcs.n	1ac5e <z_vprintk+0x168>
						print_err(out, ctx);
   1ac54:	4639      	mov	r1, r7
   1ac56:	4630      	mov	r0, r6
   1ac58:	f7ff ff3f 	bl	1aada <print_err>
						break;
   1ac5c:	e758      	b.n	1ab10 <z_vprintk+0x1a>
					d = lld;
   1ac5e:	4615      	mov	r5, r2
				if (d < 0) {
   1ac60:	2d00      	cmp	r5, #0
   1ac62:	da05      	bge.n	1ac70 <z_vprintk+0x17a>
					out((int)'-', ctx);
   1ac64:	4639      	mov	r1, r7
   1ac66:	202d      	movs	r0, #45	; 0x2d
   1ac68:	47b0      	blx	r6
					d = -d;
   1ac6a:	426d      	negs	r5, r5
					min_width--;
   1ac6c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
   1ac70:	464b      	mov	r3, r9
   1ac72:	462a      	mov	r2, r5
   1ac74:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   1ac78:	4639      	mov	r1, r7
   1ac7a:	4630      	mov	r0, r6
   1ac7c:	f7f1 fe74 	bl	c968 <_printk_dec_ulong>
				break;
   1ac80:	e746      	b.n	1ab10 <z_vprintk+0x1a>
				if (length_mod == 'z') {
   1ac82:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   1ac86:	d102      	bne.n	1ac8e <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
   1ac88:	f854 2b04 	ldr.w	r2, [r4], #4
   1ac8c:	e011      	b.n	1acb2 <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
   1ac8e:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1ac92:	d0f9      	beq.n	1ac88 <z_vprintk+0x192>
				} else if (length_mod == 'L') {
   1ac94:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1ac98:	d1f6      	bne.n	1ac88 <z_vprintk+0x192>
					if (llu > ~0UL) {
   1ac9a:	2100      	movs	r1, #0
   1ac9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
   1aca0:	3407      	adds	r4, #7
   1aca2:	f024 0407 	bic.w	r4, r4, #7
   1aca6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   1acaa:	4299      	cmp	r1, r3
   1acac:	bf08      	it	eq
   1acae:	4290      	cmpeq	r0, r2
   1acb0:	d3d0      	bcc.n	1ac54 <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
   1acb2:	f8cd a000 	str.w	sl, [sp]
   1acb6:	464b      	mov	r3, r9
   1acb8:	e7de      	b.n	1ac78 <z_vprintk+0x182>
				out('0', ctx);
   1acba:	4639      	mov	r1, r7
   1acbc:	2030      	movs	r0, #48	; 0x30
   1acbe:	47b0      	blx	r6
				out('x', ctx);
   1acc0:	4639      	mov	r1, r7
   1acc2:	2078      	movs	r0, #120	; 0x78
   1acc4:	47b0      	blx	r6
					min_width = 8;
   1acc6:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
   1acca:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
   1acce:	9b02      	ldr	r3, [sp, #8]
   1acd0:	781b      	ldrb	r3, [r3, #0]
   1acd2:	2b70      	cmp	r3, #112	; 0x70
   1acd4:	d104      	bne.n	1ace0 <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
   1acd6:	f854 3b04 	ldr.w	r3, [r4], #4
   1acda:	9304      	str	r3, [sp, #16]
   1acdc:	2300      	movs	r3, #0
   1acde:	e00d      	b.n	1acfc <z_vprintk+0x206>
				} else if (length_mod == 'l') {
   1ace0:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1ace4:	d0f7      	beq.n	1acd6 <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
   1ace6:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1acea:	d1f4      	bne.n	1acd6 <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
   1acec:	3407      	adds	r4, #7
   1acee:	f024 0307 	bic.w	r3, r4, #7
   1acf2:	461c      	mov	r4, r3
   1acf4:	f854 2b08 	ldr.w	r2, [r4], #8
   1acf8:	685b      	ldr	r3, [r3, #4]
   1acfa:	9204      	str	r2, [sp, #16]
	int digits = 0;
   1acfc:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   1acfe:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
   1ad00:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
   1ad04:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
   1ad06:	9105      	str	r1, [sp, #20]
		shift -= 4;
   1ad08:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
   1ad0c:	9804      	ldr	r0, [sp, #16]
   1ad0e:	f1cb 0c20 	rsb	ip, fp, #32
   1ad12:	f1ab 0120 	sub.w	r1, fp, #32
   1ad16:	fa20 f00b 	lsr.w	r0, r0, fp
   1ad1a:	fa03 fc0c 	lsl.w	ip, r3, ip
   1ad1e:	ea40 000c 	orr.w	r0, r0, ip
   1ad22:	fa23 f101 	lsr.w	r1, r3, r1
   1ad26:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   1ad28:	f010 000f 	ands.w	r0, r0, #15
   1ad2c:	d106      	bne.n	1ad3c <z_vprintk+0x246>
   1ad2e:	9905      	ldr	r1, [sp, #20]
   1ad30:	b911      	cbnz	r1, 1ad38 <z_vprintk+0x242>
   1ad32:	f1bb 0f00 	cmp.w	fp, #0
   1ad36:	d122      	bne.n	1ad7e <z_vprintk+0x288>
			nibble += nibble > 9 ? 87 : 48;
   1ad38:	2130      	movs	r1, #48	; 0x30
   1ad3a:	e003      	b.n	1ad44 <z_vprintk+0x24e>
   1ad3c:	2809      	cmp	r0, #9
   1ad3e:	bf8c      	ite	hi
   1ad40:	2157      	movhi	r1, #87	; 0x57
   1ad42:	2130      	movls	r1, #48	; 0x30
   1ad44:	4408      	add	r0, r1
			out((int)nibble, ctx);
   1ad46:	b240      	sxtb	r0, r0
   1ad48:	4639      	mov	r1, r7
   1ad4a:	9308      	str	r3, [sp, #32]
   1ad4c:	9205      	str	r2, [sp, #20]
   1ad4e:	47b0      	blx	r6
			digits++;
   1ad50:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
   1ad52:	9a05      	ldr	r2, [sp, #20]
			digits++;
   1ad54:	3301      	adds	r3, #1
   1ad56:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   1ad58:	9b08      	ldr	r3, [sp, #32]
   1ad5a:	f1bb 0f00 	cmp.w	fp, #0
   1ad5e:	d123      	bne.n	1ada8 <z_vprintk+0x2b2>
	if (padding == PAD_SPACE_AFTER) {
   1ad60:	f1b9 0f03 	cmp.w	r9, #3
   1ad64:	f47f aed4 	bne.w	1ab10 <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
   1ad68:	9b03      	ldr	r3, [sp, #12]
   1ad6a:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
   1ad6e:	2d00      	cmp	r5, #0
   1ad70:	f77f aece 	ble.w	1ab10 <z_vprintk+0x1a>
			out(' ', ctx);
   1ad74:	4639      	mov	r1, r7
   1ad76:	2020      	movs	r0, #32
   1ad78:	47b0      	blx	r6
   1ad7a:	3d01      	subs	r5, #1
   1ad7c:	e7f7      	b.n	1ad6e <z_vprintk+0x278>
		if (remaining-- <= min_width) {
   1ad7e:	1e51      	subs	r1, r2, #1
   1ad80:	4592      	cmp	sl, r2
   1ad82:	9108      	str	r1, [sp, #32]
   1ad84:	db07      	blt.n	1ad96 <z_vprintk+0x2a0>
			if (padding == PAD_ZERO_BEFORE) {
   1ad86:	f1b9 0f01 	cmp.w	r9, #1
   1ad8a:	d106      	bne.n	1ad9a <z_vprintk+0x2a4>
				out('0', ctx);
   1ad8c:	4639      	mov	r1, r7
   1ad8e:	2030      	movs	r0, #48	; 0x30
   1ad90:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   1ad92:	47b0      	blx	r6
   1ad94:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
   1ad96:	9a08      	ldr	r2, [sp, #32]
   1ad98:	e7b6      	b.n	1ad08 <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
   1ad9a:	f1b9 0f02 	cmp.w	r9, #2
   1ad9e:	d1fa      	bne.n	1ad96 <z_vprintk+0x2a0>
   1ada0:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   1ada2:	4639      	mov	r1, r7
   1ada4:	2020      	movs	r0, #32
   1ada6:	e7f4      	b.n	1ad92 <z_vprintk+0x29c>
			found_largest_digit = 1;
   1ada8:	9505      	str	r5, [sp, #20]
   1adaa:	e7ad      	b.n	1ad08 <z_vprintk+0x212>
					out((int)(*s++), ctx);
   1adac:	4639      	mov	r1, r7
   1adae:	47b0      	blx	r6
   1adb0:	e6fb      	b.n	1abaa <z_vprintk+0xb4>
				out(c, ctx);
   1adb2:	4639      	mov	r1, r7
   1adb4:	f854 0b04 	ldr.w	r0, [r4], #4
   1adb8:	e6d7      	b.n	1ab6a <z_vprintk+0x74>
				length_mod = 0;
   1adba:	46a8      	mov	r8, r5
				padding = PAD_NONE;
   1adbc:	46a9      	mov	r9, r5
				min_width = -1;
   1adbe:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
   1adc2:	2501      	movs	r5, #1
   1adc4:	e6ac      	b.n	1ab20 <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
   1adc6:	f04f 0903 	mov.w	r9, #3
   1adca:	e6a9      	b.n	1ab20 <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
   1adcc:	f04f 0901 	mov.w	r9, #1
   1add0:	e6a6      	b.n	1ab20 <z_vprintk+0x2a>
			might_format = 0;
   1add2:	4605      	mov	r5, r0
		++fmt;
   1add4:	e6a4      	b.n	1ab20 <z_vprintk+0x2a>

0001add6 <printk>:
{
   1add6:	b40f      	push	{r0, r1, r2, r3}
   1add8:	b507      	push	{r0, r1, r2, lr}
   1adda:	a904      	add	r1, sp, #16
   1addc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1ade0:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1ade2:	f7f1 fe13 	bl	ca0c <vprintk>
}
   1ade6:	b003      	add	sp, #12
   1ade8:	f85d eb04 	ldr.w	lr, [sp], #4
   1adec:	b004      	add	sp, #16
   1adee:	4770      	bx	lr

0001adf0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1adf0:	4604      	mov	r4, r0
   1adf2:	b508      	push	{r3, lr}
   1adf4:	4608      	mov	r0, r1
   1adf6:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1adf8:	461a      	mov	r2, r3
   1adfa:	47a0      	blx	r4
	return z_impl_k_current_get();
   1adfc:	f7ff f98c 	bl	1a118 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1ae00:	f7f3 f9da 	bl	e1b8 <z_impl_k_thread_abort>

0001ae04 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1ae04:	b510      	push	{r4, lr}
   1ae06:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   1ae08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ae0c:	4620      	mov	r0, r4
   1ae0e:	f002 f91e 	bl	1d04e <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   1ae12:	4603      	mov	r3, r0
   1ae14:	2800      	cmp	r0, #0
   1ae16:	d0f7      	beq.n	1ae08 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   1ae18:	6842      	ldr	r2, [r0, #4]
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ae1a:	3308      	adds	r3, #8
   1ae1c:	e8d3 1fef 	ldaex	r1, [r3]
   1ae20:	f021 0c01 	bic.w	ip, r1, #1
   1ae24:	e8c3 cfee 	stlex	lr, ip, [r3]
   1ae28:	f1be 0f00 	cmp.w	lr, #0
   1ae2c:	d1f6      	bne.n	1ae1c <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1ae2e:	07cb      	lsls	r3, r1, #31
   1ae30:	d500      	bpl.n	1ae34 <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1ae32:	4790      	blx	r2
	z_impl_k_yield();
   1ae34:	f7ff f8fc 	bl	1a030 <z_impl_k_yield>
   1ae38:	e7e6      	b.n	1ae08 <z_work_q_main+0x4>

0001ae3a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1ae3a:	4770      	bx	lr

0001ae3c <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
   1ae3c:	f7fe b9d6 	b.w	191ec <SystemInit>

0001ae40 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1ae40:	2300      	movs	r3, #0
	list->head = NULL;
   1ae42:	e9c0 3300 	strd	r3, r3, [r0]
}
   1ae46:	4770      	bx	lr

0001ae48 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1ae48:	6803      	ldr	r3, [r0, #0]
   1ae4a:	b923      	cbnz	r3, 1ae56 <log_list_add_tail+0xe>
		list->head = msg;
   1ae4c:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1ae4e:	2300      	movs	r3, #0
	list->tail = msg;
   1ae50:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1ae52:	600b      	str	r3, [r1, #0]
}
   1ae54:	4770      	bx	lr
		list->tail->next = msg;
   1ae56:	6843      	ldr	r3, [r0, #4]
   1ae58:	6019      	str	r1, [r3, #0]
   1ae5a:	e7f8      	b.n	1ae4e <log_list_add_tail+0x6>

0001ae5c <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1ae5c:	6800      	ldr	r0, [r0, #0]
   1ae5e:	4770      	bx	lr

0001ae60 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   1ae60:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   1ae62:	b10b      	cbz	r3, 1ae68 <log_list_head_get+0x8>
		list->head = list->head->next;
   1ae64:	681a      	ldr	r2, [r3, #0]
   1ae66:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   1ae68:	4618      	mov	r0, r3
   1ae6a:	4770      	bx	lr

0001ae6c <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1ae6c:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1ae6e:	f7f2 f877 	bl	cf60 <log_msg_chunk_alloc>

	if (msg != NULL) {
   1ae72:	b118      	cbz	r0, 1ae7c <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1ae74:	2301      	movs	r3, #1
   1ae76:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1ae78:	2300      	movs	r3, #0
   1ae7a:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
   1ae7c:	bd08      	pop	{r3, pc}

0001ae7e <k_cycle_get_32_wrapper>:
   1ae7e:	f7f2 bc91 	b.w	d7a4 <z_timer_cycle_get_32>

0001ae82 <dummy_timestamp>:
   1ae82:	2000      	movs	r0, #0
   1ae84:	4770      	bx	lr

0001ae86 <z_log_get_s_mask>:
	u32_t mask = 0;
   1ae86:	2300      	movs	r3, #0
{
   1ae88:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t arg = 0;
   1ae8a:	461a      	mov	r2, r3
	bool arm = false;
   1ae8c:	461c      	mov	r4, r3
				mask |= BIT(arg);
   1ae8e:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   1ae90:	f810 5b01 	ldrb.w	r5, [r0], #1
   1ae94:	b10d      	cbz	r5, 1ae9a <z_log_get_s_mask+0x14>
   1ae96:	428a      	cmp	r2, r1
   1ae98:	d301      	bcc.n	1ae9e <z_log_get_s_mask+0x18>
}
   1ae9a:	4618      	mov	r0, r3
   1ae9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   1ae9e:	2d25      	cmp	r5, #37	; 0x25
   1aea0:	d102      	bne.n	1aea8 <z_log_get_s_mask+0x22>
			arm = !arm;
   1aea2:	f084 0401 	eor.w	r4, r4, #1
   1aea6:	e7f3      	b.n	1ae90 <z_log_get_s_mask+0xa>
		} else if (arm && isalpha((int)curr)) {
   1aea8:	2c00      	cmp	r4, #0
   1aeaa:	d0f1      	beq.n	1ae90 <z_log_get_s_mask+0xa>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1aeac:	f045 0620 	orr.w	r6, r5, #32
   1aeb0:	3e61      	subs	r6, #97	; 0x61
   1aeb2:	2e19      	cmp	r6, #25
   1aeb4:	d8ec      	bhi.n	1ae90 <z_log_get_s_mask+0xa>
			if (curr == 's') {
   1aeb6:	2d73      	cmp	r5, #115	; 0x73
				mask |= BIT(arg);
   1aeb8:	bf04      	itt	eq
   1aeba:	fa07 f402 	lsleq.w	r4, r7, r2
   1aebe:	4323      	orreq	r3, r4
			arg++;
   1aec0:	3201      	adds	r2, #1
			arm = false;
   1aec2:	2400      	movs	r4, #0
   1aec4:	e7e4      	b.n	1ae90 <z_log_get_s_mask+0xa>

0001aec6 <log_0>:
{
   1aec6:	b538      	push	{r3, r4, r5, lr}
   1aec8:	4605      	mov	r5, r0
   1aeca:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1aecc:	f7ff ffce 	bl	1ae6c <z_log_msg_std_alloc>

	if (msg != NULL) {
   1aed0:	b128      	cbz	r0, 1aede <log_0+0x18>
		msg->str = str;
   1aed2:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   1aed4:	4621      	mov	r1, r4
}
   1aed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1aeda:	f7f1 bf6b 	b.w	cdb4 <msg_finalize>
}
   1aede:	bd38      	pop	{r3, r4, r5, pc}

0001aee0 <log_1>:
{
   1aee0:	b570      	push	{r4, r5, r6, lr}
   1aee2:	4604      	mov	r4, r0
   1aee4:	460e      	mov	r6, r1
   1aee6:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1aee8:	f7ff ffc0 	bl	1ae6c <z_log_msg_std_alloc>

	if (msg != NULL) {
   1aeec:	b158      	cbz	r0, 1af06 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1aeee:	2201      	movs	r2, #1
		msg->str = str;
   1aef0:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1aef2:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1aef4:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   1aef6:	f362 1407 	bfi	r4, r2, #4, #4
   1aefa:	7244      	strb	r4, [r0, #9]
		msg_finalize(msg, src_level);
   1aefc:	4629      	mov	r1, r5
}
   1aefe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1af02:	f7f1 bf57 	b.w	cdb4 <msg_finalize>
}
   1af06:	bd70      	pop	{r4, r5, r6, pc}

0001af08 <log_2>:
{
   1af08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1af0c:	4605      	mov	r5, r0
   1af0e:	4688      	mov	r8, r1
   1af10:	4617      	mov	r7, r2
   1af12:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1af14:	f7ff ffaa 	bl	1ae6c <z_log_msg_std_alloc>

	if (msg != NULL) {
   1af18:	b160      	cbz	r0, 1af34 <log_2+0x2c>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1af1a:	2302      	movs	r3, #2
		msg->str = str;
   1af1c:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1af1e:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1af20:	e9c0 8705 	strd	r8, r7, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   1af24:	f363 1507 	bfi	r5, r3, #4, #4
   1af28:	7245      	strb	r5, [r0, #9]
		msg_finalize(msg, src_level);
   1af2a:	4631      	mov	r1, r6
}
   1af2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1af30:	f7f1 bf40 	b.w	cdb4 <msg_finalize>
}
   1af34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001af38 <log_3>:
{
   1af38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1af3c:	4605      	mov	r5, r0
   1af3e:	4689      	mov	r9, r1
   1af40:	4690      	mov	r8, r2
   1af42:	461f      	mov	r7, r3
   1af44:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1af48:	f7ff ff90 	bl	1ae6c <z_log_msg_std_alloc>

	if (msg != NULL) {
   1af4c:	b168      	cbz	r0, 1af6a <log_3+0x32>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1af4e:	2303      	movs	r3, #3
		msg->str = str;
   1af50:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1af52:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1af54:	e9c0 9805 	strd	r9, r8, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   1af58:	f363 1507 	bfi	r5, r3, #4, #4
   1af5c:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[2] = arg3;
   1af5e:	61c7      	str	r7, [r0, #28]
		msg_finalize(msg, src_level);
   1af60:	4631      	mov	r1, r6
}
   1af62:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   1af66:	f7f1 bf25 	b.w	cdb4 <msg_finalize>
}
   1af6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001af6e <log_n>:
{
   1af6e:	b510      	push	{r4, lr}
   1af70:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1af72:	f000 f893 	bl	1b09c <log_msg_create_n>
		if (msg == NULL) {
   1af76:	b120      	cbz	r0, 1af82 <log_n+0x14>
		msg_finalize(msg, src_level);
   1af78:	4621      	mov	r1, r4
}
   1af7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1af7e:	f7f1 bf19 	b.w	cdb4 <msg_finalize>
}
   1af82:	bd10      	pop	{r4, pc}

0001af84 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1af84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1af88:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
   1af8a:	8903      	ldrh	r3, [r0, #8]
{
   1af8c:	460e      	mov	r6, r1
	u32_t available_len = msg->hdr.params.hexdump.length;
   1af8e:	089b      	lsrs	r3, r3, #2
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
   1af90:	42a3      	cmp	r3, r4
{
   1af92:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   1af96:	d803      	bhi.n	1afa0 <log_msg_hexdump_data_op+0x1c>
		*length = 0;
   1af98:	2300      	movs	r3, #0
   1af9a:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1af9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1afa0:	6811      	ldr	r1, [r2, #0]
   1afa2:	4421      	add	r1, r4
   1afa4:	4299      	cmp	r1, r3
		*length = available_len - offset;
   1afa6:	bf84      	itt	hi
   1afa8:	1b19      	subhi	r1, r3, r4
   1afaa:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1afac:	2b0c      	cmp	r3, #12
	req_len = *length;
   1afae:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1afb2:	d928      	bls.n	1b006 <log_msg_hexdump_data_op+0x82>
	if (offset < chunk_len) {
   1afb4:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1afb6:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   1afba:	d82b      	bhi.n	1b014 <log_msg_hexdump_data_op+0x90>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1afbc:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   1afbe:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1afc0:	454b      	cmp	r3, r9
   1afc2:	bf28      	it	cs
   1afc4:	464b      	movcs	r3, r9
   1afc6:	4420      	add	r0, r4
   1afc8:	461d      	mov	r5, r3
			(void)memcpy(&head_data[offset], data, cpy_len);
   1afca:	461a      	mov	r2, r3
		if (put_op) {
   1afcc:	b1ff      	cbz	r7, 1b00e <log_msg_hexdump_data_op+0x8a>
			(void)memcpy(&head_data[offset], data, cpy_len);
   1afce:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   1afd0:	f000 ff20 	bl	1be14 <memcpy>
		req_len -= cpy_len;
   1afd4:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1afd8:	442e      	add	r6, r5
	while (req_len > 0) {
   1afda:	f1b9 0f00 	cmp.w	r9, #0
   1afde:	d0dd      	beq.n	1af9c <log_msg_hexdump_data_op+0x18>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1afe0:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1afe4:	454d      	cmp	r5, r9
   1afe6:	bf28      	it	cs
   1afe8:	464d      	movcs	r5, r9
		if (put_op) {
   1afea:	1d20      	adds	r0, r4, #4
   1afec:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
   1afee:	462a      	mov	r2, r5
		if (put_op) {
   1aff0:	b1bf      	cbz	r7, 1b022 <log_msg_hexdump_data_op+0x9e>
			(void)memcpy(&cont->payload.bytes[offset],
   1aff2:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   1aff4:	f000 ff0e 	bl	1be14 <memcpy>
		req_len -= cpy_len;
   1aff8:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   1affc:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   1b000:	442e      	add	r6, r5
		offset = 0;
   1b002:	2400      	movs	r4, #0
   1b004:	e7e9      	b.n	1afda <log_msg_hexdump_data_op+0x56>
		head_data = msg->payload.single.bytes;
   1b006:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1b008:	f04f 0800 	mov.w	r8, #0
   1b00c:	e7d8      	b.n	1afc0 <log_msg_hexdump_data_op+0x3c>
			(void)memcpy(data, &head_data[offset], cpy_len);
   1b00e:	4601      	mov	r1, r0
   1b010:	4630      	mov	r0, r6
   1b012:	e7dd      	b.n	1afd0 <log_msg_hexdump_data_op+0x4c>
		offset -= chunk_len;
   1b014:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1b016:	2c1b      	cmp	r4, #27
   1b018:	d9df      	bls.n	1afda <log_msg_hexdump_data_op+0x56>
			cont = cont->next;
   1b01a:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   1b01e:	3c1c      	subs	r4, #28
   1b020:	e7f9      	b.n	1b016 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(data, &cont->payload.bytes[offset],
   1b022:	4601      	mov	r1, r0
   1b024:	4630      	mov	r0, r6
   1b026:	e7e5      	b.n	1aff4 <log_msg_hexdump_data_op+0x70>

0001b028 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1b028:	3004      	adds	r0, #4
   1b02a:	e8d0 3fef 	ldaex	r3, [r0]
   1b02e:	3301      	adds	r3, #1
   1b030:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1b034:	2a00      	cmp	r2, #0
   1b036:	d1f8      	bne.n	1b02a <log_msg_get+0x2>
}
   1b038:	4770      	bx	lr

0001b03a <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1b03a:	7a40      	ldrb	r0, [r0, #9]
}
   1b03c:	0900      	lsrs	r0, r0, #4
   1b03e:	4770      	bx	lr

0001b040 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1b040:	7a43      	ldrb	r3, [r0, #9]
   1b042:	091b      	lsrs	r3, r3, #4
   1b044:	428b      	cmp	r3, r1
   1b046:	d916      	bls.n	1b076 <log_msg_arg_get+0x36>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1b048:	2b03      	cmp	r3, #3
   1b04a:	d803      	bhi.n	1b054 <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
   1b04c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1b050:	6948      	ldr	r0, [r1, #20]
   1b052:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1b054:	2901      	cmp	r1, #1
   1b056:	d803      	bhi.n	1b060 <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
   1b058:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1b05c:	6988      	ldr	r0, [r1, #24]
   1b05e:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1b060:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1b062:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1b064:	2906      	cmp	r1, #6
   1b066:	d803      	bhi.n	1b070 <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
   1b068:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1b06c:	6848      	ldr	r0, [r1, #4]
   1b06e:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
   1b070:	3907      	subs	r1, #7
		cont = cont->next;
   1b072:	681b      	ldr	r3, [r3, #0]
   1b074:	e7f6      	b.n	1b064 <log_msg_arg_get+0x24>
		return 0;
   1b076:	2000      	movs	r0, #0
}
   1b078:	4770      	bx	lr

0001b07a <log_msg_put>:
{
   1b07a:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1b07c:	1d02      	adds	r2, r0, #4
   1b07e:	e8d2 1fef 	ldaex	r1, [r2]
   1b082:	3901      	subs	r1, #1
   1b084:	e8c2 1fec 	stlex	ip, r1, [r2]
   1b088:	f1bc 0f00 	cmp.w	ip, #0
   1b08c:	d1f7      	bne.n	1b07e <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   1b08e:	685b      	ldr	r3, [r3, #4]
   1b090:	b90b      	cbnz	r3, 1b096 <log_msg_put+0x1c>
		msg_free(msg);
   1b092:	f7f1 bf77 	b.w	cf84 <msg_free>
}
   1b096:	4770      	bx	lr

0001b098 <log_msg_str_get>:
}
   1b098:	6900      	ldr	r0, [r0, #16]
   1b09a:	4770      	bx	lr

0001b09c <log_msg_create_n>:
{
   1b09c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0a0:	4682      	mov	sl, r0
   1b0a2:	4688      	mov	r8, r1
   1b0a4:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1b0a6:	f7f1 ff5b 	bl	cf60 <log_msg_chunk_alloc>
	if (msg != NULL) {
   1b0aa:	4604      	mov	r4, r0
   1b0ac:	b330      	cbz	r0, 1b0fc <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   1b0ae:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1b0b0:	2600      	movs	r6, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1b0b2:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1b0b4:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1b0b6:	8106      	strh	r6, [r0, #8]
   1b0b8:	d909      	bls.n	1b0ce <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   1b0ba:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1b0bc:	f1a5 0902 	sub.w	r9, r5, #2
	msg->hdr.params.generic.ext = 1;
   1b0c0:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
   1b0c2:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1b0c6:	6146      	str	r6, [r0, #20]
	while (n > 0) {
   1b0c8:	f1b9 0f00 	cmp.w	r9, #0
   1b0cc:	dc0e      	bgt.n	1b0ec <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   1b0ce:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1b0d0:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1b0d2:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   1b0d6:	f8c4 a010 	str.w	sl, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1b0da:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1b0dc:	d818      	bhi.n	1b110 <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   1b0de:	00aa      	lsls	r2, r5, #2
   1b0e0:	4641      	mov	r1, r8
   1b0e2:	f104 0014 	add.w	r0, r4, #20
   1b0e6:	f000 fe95 	bl	1be14 <memcpy>
		nargs  = 0U;
   1b0ea:	e007      	b.n	1b0fc <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1b0ec:	f7f1 ff38 	bl	cf60 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1b0f0:	4607      	mov	r7, r0
   1b0f2:	b930      	cbnz	r0, 1b102 <log_msg_create_n+0x66>
			msg_free(msg);
   1b0f4:	4620      	mov	r0, r4
   1b0f6:	f7f1 ff45 	bl	cf84 <msg_free>
			return NULL;
   1b0fa:	463c      	mov	r4, r7
}
   1b0fc:	4620      	mov	r0, r4
   1b0fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1b102:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1b106:	f1a9 0907 	sub.w	r9, r9, #7
   1b10a:	6006      	str	r6, [r0, #0]
		next = &cont->next;
   1b10c:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1b10e:	e7db      	b.n	1b0c8 <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   1b110:	4641      	mov	r1, r8
   1b112:	2208      	movs	r2, #8
   1b114:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1b118:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   1b11a:	f000 fe7b 	bl	1be14 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1b11e:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1b120:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1b124:	2d07      	cmp	r5, #7
   1b126:	462e      	mov	r6, r5
   1b128:	bf28      	it	cs
   1b12a:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1b12c:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1b130:	4641      	mov	r1, r8
   1b132:	1d38      	adds	r0, r7, #4
   1b134:	464a      	mov	r2, r9
   1b136:	f000 fe6d 	bl	1be14 <memcpy>
	while (nargs != 0U) {
   1b13a:	1bad      	subs	r5, r5, r6
		args += cpy_args;
   1b13c:	44c8      	add	r8, r9
		cont = cont->next;
   1b13e:	683f      	ldr	r7, [r7, #0]
	while (nargs != 0U) {
   1b140:	d1f0      	bne.n	1b124 <log_msg_create_n+0x88>
   1b142:	e7db      	b.n	1b0fc <log_msg_create_n+0x60>

0001b144 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
   1b144:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1b146:	2400      	movs	r4, #0
   1b148:	9400      	str	r4, [sp, #0]
   1b14a:	f7ff ff1b 	bl	1af84 <log_msg_hexdump_data_op>
}
   1b14e:	b002      	add	sp, #8
   1b150:	bd10      	pop	{r4, pc}

0001b152 <buffer_write>:
{
   1b152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b154:	4606      	mov	r6, r0
   1b156:	460d      	mov	r5, r1
   1b158:	4614      	mov	r4, r2
   1b15a:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1b15c:	4621      	mov	r1, r4
   1b15e:	4628      	mov	r0, r5
   1b160:	463a      	mov	r2, r7
   1b162:	47b0      	blx	r6
	} while (len != 0);
   1b164:	1a24      	subs	r4, r4, r0
		buf += processed;
   1b166:	4405      	add	r5, r0
	} while (len != 0);
   1b168:	d1f8      	bne.n	1b15c <buffer_write+0xa>
}
   1b16a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b16c <std_print>:
{
   1b16c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b170:	b08e      	sub	sp, #56	; 0x38
   1b172:	af0e      	add	r7, sp, #56	; 0x38
   1b174:	4681      	mov	r9, r0
   1b176:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1b178:	f7ff ff8e 	bl	1b098 <log_msg_str_get>
   1b17c:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
   1b17e:	4648      	mov	r0, r9
   1b180:	f7ff ff5b 	bl	1b03a <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   1b184:	f04f 0800 	mov.w	r8, #0
	u32_t nargs = log_msg_nargs_get(msg);
   1b188:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   1b18a:	0083      	lsls	r3, r0, #2
   1b18c:	3307      	adds	r3, #7
   1b18e:	f023 0307 	bic.w	r3, r3, #7
   1b192:	ebad 0d03 	sub.w	sp, sp, r3
   1b196:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1b198:	45d0      	cmp	r8, sl
   1b19a:	d116      	bne.n	1b1ca <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1b19c:	4648      	mov	r0, r9
   1b19e:	f7ff ff4c 	bl	1b03a <log_msg_nargs_get>
   1b1a2:	280f      	cmp	r0, #15
   1b1a4:	d81e      	bhi.n	1b1e4 <std_print+0x78>
   1b1a6:	e8df f010 	tbh	[pc, r0, lsl #1]
   1b1aa:	0019      	.short	0x0019
   1b1ac:	00260020 	.word	0x00260020
   1b1b0:	0036002d 	.word	0x0036002d
   1b1b4:	004e0041 	.word	0x004e0041
   1b1b8:	006e005d 	.word	0x006e005d
   1b1bc:	00960081 	.word	0x00960081
   1b1c0:	00c600ad 	.word	0x00c600ad
   1b1c4:	00fe00e1 	.word	0x00fe00e1
   1b1c8:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   1b1ca:	4641      	mov	r1, r8
   1b1cc:	4648      	mov	r0, r9
   1b1ce:	f7ff ff37 	bl	1b040 <log_msg_arg_get>
   1b1d2:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
	for (i = 0; i < nargs; i++) {
   1b1d6:	f108 0801 	add.w	r8, r8, #1
   1b1da:	e7dd      	b.n	1b198 <std_print+0x2c>
		print_formatted(log_output, str);
   1b1dc:	4631      	mov	r1, r6
   1b1de:	4628      	mov	r0, r5
   1b1e0:	f7f1 ff12 	bl	d008 <print_formatted>
}
   1b1e4:	46bd      	mov	sp, r7
   1b1e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   1b1ea:	6822      	ldr	r2, [r4, #0]
   1b1ec:	4631      	mov	r1, r6
   1b1ee:	4628      	mov	r0, r5
   1b1f0:	f7f1 ff0a 	bl	d008 <print_formatted>
		break;
   1b1f4:	e7f6      	b.n	1b1e4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   1b1f6:	e9d4 2300 	ldrd	r2, r3, [r4]
   1b1fa:	4631      	mov	r1, r6
   1b1fc:	4628      	mov	r0, r5
   1b1fe:	f7f1 ff03 	bl	d008 <print_formatted>
		break;
   1b202:	e7ef      	b.n	1b1e4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   1b204:	68a3      	ldr	r3, [r4, #8]
   1b206:	4631      	mov	r1, r6
   1b208:	9300      	str	r3, [sp, #0]
   1b20a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1b20e:	4628      	mov	r0, r5
   1b210:	f7f1 fefa 	bl	d008 <print_formatted>
		break;
   1b214:	e7e6      	b.n	1b1e4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1b216:	68e3      	ldr	r3, [r4, #12]
   1b218:	4631      	mov	r1, r6
   1b21a:	9301      	str	r3, [sp, #4]
   1b21c:	68a3      	ldr	r3, [r4, #8]
   1b21e:	4628      	mov	r0, r5
   1b220:	9300      	str	r3, [sp, #0]
   1b222:	e9d4 2300 	ldrd	r2, r3, [r4]
   1b226:	f7f1 feef 	bl	d008 <print_formatted>
		break;
   1b22a:	e7db      	b.n	1b1e4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1b22c:	6923      	ldr	r3, [r4, #16]
   1b22e:	4631      	mov	r1, r6
   1b230:	9302      	str	r3, [sp, #8]
   1b232:	68e3      	ldr	r3, [r4, #12]
   1b234:	4628      	mov	r0, r5
   1b236:	9301      	str	r3, [sp, #4]
   1b238:	68a3      	ldr	r3, [r4, #8]
   1b23a:	9300      	str	r3, [sp, #0]
   1b23c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1b240:	f7f1 fee2 	bl	d008 <print_formatted>
		break;
   1b244:	e7ce      	b.n	1b1e4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1b246:	6963      	ldr	r3, [r4, #20]
   1b248:	4631      	mov	r1, r6
   1b24a:	9303      	str	r3, [sp, #12]
   1b24c:	6923      	ldr	r3, [r4, #16]
   1b24e:	4628      	mov	r0, r5
   1b250:	9302      	str	r3, [sp, #8]
   1b252:	68e3      	ldr	r3, [r4, #12]
   1b254:	9301      	str	r3, [sp, #4]
   1b256:	68a3      	ldr	r3, [r4, #8]
   1b258:	9300      	str	r3, [sp, #0]
   1b25a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1b25e:	f7f1 fed3 	bl	d008 <print_formatted>
		break;
   1b262:	e7bf      	b.n	1b1e4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1b264:	69a3      	ldr	r3, [r4, #24]
   1b266:	4631      	mov	r1, r6
   1b268:	9304      	str	r3, [sp, #16]
   1b26a:	6963      	ldr	r3, [r4, #20]
   1b26c:	4628      	mov	r0, r5
   1b26e:	9303      	str	r3, [sp, #12]
   1b270:	6923      	ldr	r3, [r4, #16]
   1b272:	9302      	str	r3, [sp, #8]
   1b274:	68e3      	ldr	r3, [r4, #12]
   1b276:	9301      	str	r3, [sp, #4]
   1b278:	68a3      	ldr	r3, [r4, #8]
   1b27a:	9300      	str	r3, [sp, #0]
   1b27c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1b280:	f7f1 fec2 	bl	d008 <print_formatted>
		break;
   1b284:	e7ae      	b.n	1b1e4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1b286:	69e3      	ldr	r3, [r4, #28]
   1b288:	4631      	mov	r1, r6
   1b28a:	9305      	str	r3, [sp, #20]
   1b28c:	69a3      	ldr	r3, [r4, #24]
   1b28e:	4628      	mov	r0, r5
   1b290:	9304      	str	r3, [sp, #16]
   1b292:	6963      	ldr	r3, [r4, #20]
   1b294:	9303      	str	r3, [sp, #12]
   1b296:	6923      	ldr	r3, [r4, #16]
   1b298:	9302      	str	r3, [sp, #8]
   1b29a:	68e3      	ldr	r3, [r4, #12]
   1b29c:	9301      	str	r3, [sp, #4]
   1b29e:	68a3      	ldr	r3, [r4, #8]
   1b2a0:	9300      	str	r3, [sp, #0]
   1b2a2:	e9d4 2300 	ldrd	r2, r3, [r4]
   1b2a6:	f7f1 feaf 	bl	d008 <print_formatted>
		break;
   1b2aa:	e79b      	b.n	1b1e4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1b2ac:	6a23      	ldr	r3, [r4, #32]
   1b2ae:	4631      	mov	r1, r6
   1b2b0:	9306      	str	r3, [sp, #24]
   1b2b2:	69e3      	ldr	r3, [r4, #28]
   1b2b4:	4628      	mov	r0, r5
   1b2b6:	9305      	str	r3, [sp, #20]
   1b2b8:	69a3      	ldr	r3, [r4, #24]
   1b2ba:	9304      	str	r3, [sp, #16]
   1b2bc:	6963      	ldr	r3, [r4, #20]
   1b2be:	9303      	str	r3, [sp, #12]
   1b2c0:	6923      	ldr	r3, [r4, #16]
   1b2c2:	9302      	str	r3, [sp, #8]
   1b2c4:	68e3      	ldr	r3, [r4, #12]
   1b2c6:	9301      	str	r3, [sp, #4]
   1b2c8:	68a3      	ldr	r3, [r4, #8]
   1b2ca:	9300      	str	r3, [sp, #0]
   1b2cc:	e9d4 2300 	ldrd	r2, r3, [r4]
   1b2d0:	f7f1 fe9a 	bl	d008 <print_formatted>
		break;
   1b2d4:	e786      	b.n	1b1e4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1b2d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b2d8:	4631      	mov	r1, r6
   1b2da:	9307      	str	r3, [sp, #28]
   1b2dc:	6a23      	ldr	r3, [r4, #32]
   1b2de:	4628      	mov	r0, r5
   1b2e0:	9306      	str	r3, [sp, #24]
   1b2e2:	69e3      	ldr	r3, [r4, #28]
   1b2e4:	9305      	str	r3, [sp, #20]
   1b2e6:	69a3      	ldr	r3, [r4, #24]
   1b2e8:	9304      	str	r3, [sp, #16]
   1b2ea:	6963      	ldr	r3, [r4, #20]
   1b2ec:	9303      	str	r3, [sp, #12]
   1b2ee:	6923      	ldr	r3, [r4, #16]
   1b2f0:	9302      	str	r3, [sp, #8]
   1b2f2:	68e3      	ldr	r3, [r4, #12]
   1b2f4:	9301      	str	r3, [sp, #4]
   1b2f6:	68a3      	ldr	r3, [r4, #8]
   1b2f8:	9300      	str	r3, [sp, #0]
   1b2fa:	e9d4 2300 	ldrd	r2, r3, [r4]
   1b2fe:	f7f1 fe83 	bl	d008 <print_formatted>
		break;
   1b302:	e76f      	b.n	1b1e4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1b304:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1b306:	4631      	mov	r1, r6
   1b308:	9308      	str	r3, [sp, #32]
   1b30a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b30c:	4628      	mov	r0, r5
   1b30e:	9307      	str	r3, [sp, #28]
   1b310:	6a23      	ldr	r3, [r4, #32]
   1b312:	9306      	str	r3, [sp, #24]
   1b314:	69e3      	ldr	r3, [r4, #28]
   1b316:	9305      	str	r3, [sp, #20]
   1b318:	69a3      	ldr	r3, [r4, #24]
   1b31a:	9304      	str	r3, [sp, #16]
   1b31c:	6963      	ldr	r3, [r4, #20]
   1b31e:	9303      	str	r3, [sp, #12]
   1b320:	6923      	ldr	r3, [r4, #16]
   1b322:	9302      	str	r3, [sp, #8]
   1b324:	68e3      	ldr	r3, [r4, #12]
   1b326:	9301      	str	r3, [sp, #4]
   1b328:	68a3      	ldr	r3, [r4, #8]
   1b32a:	9300      	str	r3, [sp, #0]
   1b32c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1b330:	f7f1 fe6a 	bl	d008 <print_formatted>
		break;
   1b334:	e756      	b.n	1b1e4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1b336:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b338:	4631      	mov	r1, r6
   1b33a:	9309      	str	r3, [sp, #36]	; 0x24
   1b33c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1b33e:	4628      	mov	r0, r5
   1b340:	9308      	str	r3, [sp, #32]
   1b342:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b344:	9307      	str	r3, [sp, #28]
   1b346:	6a23      	ldr	r3, [r4, #32]
   1b348:	9306      	str	r3, [sp, #24]
   1b34a:	69e3      	ldr	r3, [r4, #28]
   1b34c:	9305      	str	r3, [sp, #20]
   1b34e:	69a3      	ldr	r3, [r4, #24]
   1b350:	9304      	str	r3, [sp, #16]
   1b352:	6963      	ldr	r3, [r4, #20]
   1b354:	9303      	str	r3, [sp, #12]
   1b356:	6923      	ldr	r3, [r4, #16]
   1b358:	9302      	str	r3, [sp, #8]
   1b35a:	68e3      	ldr	r3, [r4, #12]
   1b35c:	9301      	str	r3, [sp, #4]
   1b35e:	68a3      	ldr	r3, [r4, #8]
   1b360:	9300      	str	r3, [sp, #0]
   1b362:	e9d4 2300 	ldrd	r2, r3, [r4]
   1b366:	f7f1 fe4f 	bl	d008 <print_formatted>
		break;
   1b36a:	e73b      	b.n	1b1e4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1b36c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1b36e:	4631      	mov	r1, r6
   1b370:	930a      	str	r3, [sp, #40]	; 0x28
   1b372:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b374:	4628      	mov	r0, r5
   1b376:	9309      	str	r3, [sp, #36]	; 0x24
   1b378:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1b37a:	9308      	str	r3, [sp, #32]
   1b37c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b37e:	9307      	str	r3, [sp, #28]
   1b380:	6a23      	ldr	r3, [r4, #32]
   1b382:	9306      	str	r3, [sp, #24]
   1b384:	69e3      	ldr	r3, [r4, #28]
   1b386:	9305      	str	r3, [sp, #20]
   1b388:	69a3      	ldr	r3, [r4, #24]
   1b38a:	9304      	str	r3, [sp, #16]
   1b38c:	6963      	ldr	r3, [r4, #20]
   1b38e:	9303      	str	r3, [sp, #12]
   1b390:	6923      	ldr	r3, [r4, #16]
   1b392:	9302      	str	r3, [sp, #8]
   1b394:	68e3      	ldr	r3, [r4, #12]
   1b396:	9301      	str	r3, [sp, #4]
   1b398:	68a3      	ldr	r3, [r4, #8]
   1b39a:	9300      	str	r3, [sp, #0]
   1b39c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1b3a0:	f7f1 fe32 	bl	d008 <print_formatted>
		break;
   1b3a4:	e71e      	b.n	1b1e4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1b3a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1b3a8:	4631      	mov	r1, r6
   1b3aa:	930b      	str	r3, [sp, #44]	; 0x2c
   1b3ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1b3ae:	4628      	mov	r0, r5
   1b3b0:	930a      	str	r3, [sp, #40]	; 0x28
   1b3b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b3b4:	9309      	str	r3, [sp, #36]	; 0x24
   1b3b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1b3b8:	9308      	str	r3, [sp, #32]
   1b3ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b3bc:	9307      	str	r3, [sp, #28]
   1b3be:	6a23      	ldr	r3, [r4, #32]
   1b3c0:	9306      	str	r3, [sp, #24]
   1b3c2:	69e3      	ldr	r3, [r4, #28]
   1b3c4:	9305      	str	r3, [sp, #20]
   1b3c6:	69a3      	ldr	r3, [r4, #24]
   1b3c8:	9304      	str	r3, [sp, #16]
   1b3ca:	6963      	ldr	r3, [r4, #20]
   1b3cc:	9303      	str	r3, [sp, #12]
   1b3ce:	6923      	ldr	r3, [r4, #16]
   1b3d0:	9302      	str	r3, [sp, #8]
   1b3d2:	68e3      	ldr	r3, [r4, #12]
   1b3d4:	9301      	str	r3, [sp, #4]
   1b3d6:	68a3      	ldr	r3, [r4, #8]
   1b3d8:	9300      	str	r3, [sp, #0]
   1b3da:	e9d4 2300 	ldrd	r2, r3, [r4]
   1b3de:	f7f1 fe13 	bl	d008 <print_formatted>
		break;
   1b3e2:	e6ff      	b.n	1b1e4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1b3e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1b3e6:	4631      	mov	r1, r6
   1b3e8:	930c      	str	r3, [sp, #48]	; 0x30
   1b3ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1b3ec:	4628      	mov	r0, r5
   1b3ee:	930b      	str	r3, [sp, #44]	; 0x2c
   1b3f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1b3f2:	930a      	str	r3, [sp, #40]	; 0x28
   1b3f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b3f6:	9309      	str	r3, [sp, #36]	; 0x24
   1b3f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1b3fa:	9308      	str	r3, [sp, #32]
   1b3fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b3fe:	9307      	str	r3, [sp, #28]
   1b400:	6a23      	ldr	r3, [r4, #32]
   1b402:	9306      	str	r3, [sp, #24]
   1b404:	69e3      	ldr	r3, [r4, #28]
   1b406:	9305      	str	r3, [sp, #20]
   1b408:	69a3      	ldr	r3, [r4, #24]
   1b40a:	9304      	str	r3, [sp, #16]
   1b40c:	6963      	ldr	r3, [r4, #20]
   1b40e:	9303      	str	r3, [sp, #12]
   1b410:	6923      	ldr	r3, [r4, #16]
   1b412:	9302      	str	r3, [sp, #8]
   1b414:	68e3      	ldr	r3, [r4, #12]
   1b416:	9301      	str	r3, [sp, #4]
   1b418:	68a3      	ldr	r3, [r4, #8]
   1b41a:	9300      	str	r3, [sp, #0]
   1b41c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1b420:	f7f1 fdf2 	bl	d008 <print_formatted>
}
   1b424:	e6de      	b.n	1b1e4 <std_print+0x78>

0001b426 <log_output_flush>:
		     log_output->control_block->offset,
   1b426:	6842      	ldr	r2, [r0, #4]
{
   1b428:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   1b42a:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   1b42e:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   1b430:	6881      	ldr	r1, [r0, #8]
   1b432:	6800      	ldr	r0, [r0, #0]
   1b434:	f7ff fe8d 	bl	1b152 <buffer_write>
	log_output->control_block->offset = 0;
   1b438:	2200      	movs	r2, #0
   1b43a:	6863      	ldr	r3, [r4, #4]
   1b43c:	601a      	str	r2, [r3, #0]
}
   1b43e:	bd10      	pop	{r4, pc}

0001b440 <out_func>:
{
   1b440:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1b442:	684b      	ldr	r3, [r1, #4]
{
   1b444:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   1b446:	681a      	ldr	r2, [r3, #0]
   1b448:	68cb      	ldr	r3, [r1, #12]
{
   1b44a:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1b44c:	429a      	cmp	r2, r3
   1b44e:	d102      	bne.n	1b456 <out_func+0x16>
		log_output_flush(out_ctx);
   1b450:	4608      	mov	r0, r1
   1b452:	f7ff ffe8 	bl	1b426 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1b456:	6863      	ldr	r3, [r4, #4]
   1b458:	e8d3 2fef 	ldaex	r2, [r3]
   1b45c:	1c51      	adds	r1, r2, #1
   1b45e:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1b462:	2800      	cmp	r0, #0
   1b464:	d1f8      	bne.n	1b458 <out_func+0x18>
	out_ctx->buf[idx] = (u8_t)c;
   1b466:	68a3      	ldr	r3, [r4, #8]
}
   1b468:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (u8_t)c;
   1b46a:	549d      	strb	r5, [r3, r2]
}
   1b46c:	bd38      	pop	{r3, r4, r5, pc}

0001b46e <char_out>:
{
   1b46e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b470:	460d      	mov	r5, r1
   1b472:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
   1b474:	4604      	mov	r4, r0
   1b476:	1847      	adds	r7, r0, r1
   1b478:	42bc      	cmp	r4, r7
   1b47a:	d101      	bne.n	1b480 <char_out+0x12>
}
   1b47c:	4628      	mov	r0, r5
   1b47e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
   1b480:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   1b484:	6873      	ldr	r3, [r6, #4]
   1b486:	4630      	mov	r0, r6
   1b488:	685b      	ldr	r3, [r3, #4]
   1b48a:	4798      	blx	r3
   1b48c:	e7f4      	b.n	1b478 <char_out+0xa>

0001b48e <append_u8>:
{
   1b48e:	b510      	push	{r4, lr}
	if (!cpkt) {
   1b490:	b158      	cbz	r0, 1b4aa <append_u8+0x1c>
	if (cpkt->max_len - cpkt->offset < 1) {
   1b492:	8883      	ldrh	r3, [r0, #4]
   1b494:	88c2      	ldrh	r2, [r0, #6]
   1b496:	1ad2      	subs	r2, r2, r3
   1b498:	2a00      	cmp	r2, #0
	cpkt->data[cpkt->offset++] = data;
   1b49a:	bfc3      	ittte	gt
   1b49c:	1c5c      	addgt	r4, r3, #1
   1b49e:	6802      	ldrgt	r2, [r0, #0]
   1b4a0:	8084      	strhgt	r4, [r0, #4]
		return false;
   1b4a2:	2000      	movle	r0, #0
	return true;
   1b4a4:	bfc4      	itt	gt
   1b4a6:	2001      	movgt	r0, #1
	cpkt->data[cpkt->offset++] = data;
   1b4a8:	54d1      	strbgt	r1, [r2, r3]
}
   1b4aa:	bd10      	pop	{r4, pc}

0001b4ac <append_be16>:
{
   1b4ac:	b510      	push	{r4, lr}
	if (!cpkt) {
   1b4ae:	b178      	cbz	r0, 1b4d0 <append_be16+0x24>
	if (cpkt->max_len - cpkt->offset < 2) {
   1b4b0:	8883      	ldrh	r3, [r0, #4]
   1b4b2:	88c2      	ldrh	r2, [r0, #6]
   1b4b4:	1ad2      	subs	r2, r2, r3
   1b4b6:	2a01      	cmp	r2, #1
   1b4b8:	dd0b      	ble.n	1b4d2 <append_be16+0x26>
	cpkt->data[cpkt->offset++] = data >> 8;
   1b4ba:	6802      	ldr	r2, [r0, #0]
   1b4bc:	1c5c      	adds	r4, r3, #1
   1b4be:	8084      	strh	r4, [r0, #4]
   1b4c0:	0a0c      	lsrs	r4, r1, #8
   1b4c2:	54d4      	strb	r4, [r2, r3]
	cpkt->data[cpkt->offset++] = (u8_t) data;
   1b4c4:	8883      	ldrh	r3, [r0, #4]
   1b4c6:	6802      	ldr	r2, [r0, #0]
   1b4c8:	1c5c      	adds	r4, r3, #1
   1b4ca:	8084      	strh	r4, [r0, #4]
	return true;
   1b4cc:	2001      	movs	r0, #1
	cpkt->data[cpkt->offset++] = (u8_t) data;
   1b4ce:	54d1      	strb	r1, [r2, r3]
}
   1b4d0:	bd10      	pop	{r4, pc}
		return false;
   1b4d2:	2000      	movs	r0, #0
   1b4d4:	e7fc      	b.n	1b4d0 <append_be16+0x24>

0001b4d6 <decode_delta>:
{
   1b4d6:	b570      	push	{r4, r5, r6, lr}
   1b4d8:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   1b4dc:	9d06      	ldr	r5, [sp, #24]
	if (opt == COAP_OPTION_EXT_13) {
   1b4de:	2c0d      	cmp	r4, #13
   1b4e0:	d111      	bne.n	1b506 <decode_delta+0x30>
		*hdr_len = 1U;
   1b4e2:	2401      	movs	r4, #1
   1b4e4:	802c      	strh	r4, [r5, #0]
	if (max_len - offset < 1) {
   1b4e6:	1a5c      	subs	r4, r3, r1
   1b4e8:	2c00      	cmp	r4, #0
   1b4ea:	dc02      	bgt.n	1b4f2 <decode_delta+0x1c>
			return -EINVAL;
   1b4ec:	f06f 0015 	mvn.w	r0, #21
}
   1b4f0:	bd70      	pop	{r4, r5, r6, pc}
	*value = data[offset++];
   1b4f2:	1c4d      	adds	r5, r1, #1
   1b4f4:	b2ad      	uxth	r5, r5
   1b4f6:	5c44      	ldrb	r4, [r0, r1]
		if (ret < 0) {
   1b4f8:	1b58      	subs	r0, r3, r5
	*pos = offset;
   1b4fa:	8015      	strh	r5, [r2, #0]
		if (ret < 0) {
   1b4fc:	d4f6      	bmi.n	1b4ec <decode_delta+0x16>
		opt = val + COAP_OPTION_EXT_13;
   1b4fe:	340d      	adds	r4, #13
	*opt_ext = opt;
   1b500:	9b05      	ldr	r3, [sp, #20]
   1b502:	801c      	strh	r4, [r3, #0]
	return ret;
   1b504:	e7f4      	b.n	1b4f0 <decode_delta+0x1a>
	} else if (opt == COAP_OPTION_EXT_14) {
   1b506:	2c0e      	cmp	r4, #14
   1b508:	d113      	bne.n	1b532 <decode_delta+0x5c>
		*hdr_len = 2U;
   1b50a:	2402      	movs	r4, #2
   1b50c:	802c      	strh	r4, [r5, #0]
	if (max_len - offset < 2) {
   1b50e:	1a5c      	subs	r4, r3, r1
   1b510:	2c01      	cmp	r4, #1
   1b512:	ddeb      	ble.n	1b4ec <decode_delta+0x16>
	*value = data[offset++] << 8;
   1b514:	5c46      	ldrb	r6, [r0, r1]
	*value |= data[offset++];
   1b516:	1c8d      	adds	r5, r1, #2
	*value = data[offset++] << 8;
   1b518:	3101      	adds	r1, #1
	*value |= data[offset++];
   1b51a:	b289      	uxth	r1, r1
   1b51c:	5c44      	ldrb	r4, [r0, r1]
   1b51e:	b2ad      	uxth	r5, r5
		if (ret < 0) {
   1b520:	1b58      	subs	r0, r3, r5
	*value |= data[offset++];
   1b522:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
	*pos = offset;
   1b526:	8015      	strh	r5, [r2, #0]
		if (ret < 0) {
   1b528:	d4e0      	bmi.n	1b4ec <decode_delta+0x16>
		opt = val + COAP_OPTION_EXT_269;
   1b52a:	f204 140d 	addw	r4, r4, #269	; 0x10d
   1b52e:	b2a4      	uxth	r4, r4
   1b530:	e7e6      	b.n	1b500 <decode_delta+0x2a>
	} else if (opt == COAP_OPTION_EXT_15) {
   1b532:	2c0f      	cmp	r4, #15
   1b534:	d0da      	beq.n	1b4ec <decode_delta+0x16>
	int ret = 0;
   1b536:	2000      	movs	r0, #0
   1b538:	e7e2      	b.n	1b500 <decode_delta+0x2a>

0001b53a <append>:
{
   1b53a:	b538      	push	{r3, r4, r5, lr}
   1b53c:	4615      	mov	r5, r2
	if (!cpkt || !data) {
   1b53e:	4604      	mov	r4, r0
   1b540:	b170      	cbz	r0, 1b560 <append+0x26>
   1b542:	b169      	cbz	r1, 1b560 <append+0x26>
	if (cpkt->max_len - cpkt->offset < len) {
   1b544:	8880      	ldrh	r0, [r0, #4]
   1b546:	88e3      	ldrh	r3, [r4, #6]
   1b548:	1a1b      	subs	r3, r3, r0
   1b54a:	4293      	cmp	r3, r2
   1b54c:	db08      	blt.n	1b560 <append+0x26>
	memcpy(cpkt->data + cpkt->offset, data, len);
   1b54e:	6823      	ldr	r3, [r4, #0]
   1b550:	4418      	add	r0, r3
   1b552:	f000 fc5f 	bl	1be14 <memcpy>
	return true;
   1b556:	2001      	movs	r0, #1
	cpkt->offset += len;
   1b558:	88a3      	ldrh	r3, [r4, #4]
   1b55a:	441d      	add	r5, r3
   1b55c:	80a5      	strh	r5, [r4, #4]
}
   1b55e:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1b560:	2000      	movs	r0, #0
   1b562:	e7fc      	b.n	1b55e <append+0x24>

0001b564 <parse_option>:
{
   1b564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max_len - offset < 1) {
   1b568:	1a5f      	subs	r7, r3, r1
{
   1b56a:	b086      	sub	sp, #24
	if (max_len - offset < 1) {
   1b56c:	2f00      	cmp	r7, #0
{
   1b56e:	4681      	mov	r9, r0
   1b570:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   1b574:	4616      	mov	r6, r2
   1b576:	461d      	mov	r5, r3
   1b578:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
	if (max_len - offset < 1) {
   1b57c:	dd13      	ble.n	1b5a6 <parse_option+0x42>
	*value = data[offset++];
   1b57e:	f101 0c01 	add.w	ip, r1, #1
   1b582:	fa1f fc8c 	uxth.w	ip, ip
   1b586:	5c47      	ldrb	r7, [r0, r1]
	if (r < 0) {
   1b588:	ebb3 010c 	subs.w	r1, r3, ip
	*pos = offset;
   1b58c:	f8a2 c000 	strh.w	ip, [r2]
	if (r < 0) {
   1b590:	d40b      	bmi.n	1b5aa <parse_option+0x46>
	*opt_len += 1U;
   1b592:	f8b4 c000 	ldrh.w	ip, [r4]
	if (opt == COAP_MARKER) {
   1b596:	2fff      	cmp	r7, #255	; 0xff
	*opt_len += 1U;
   1b598:	f10c 0c01 	add.w	ip, ip, #1
   1b59c:	f8a4 c000 	strh.w	ip, [r4]
	if (opt == COAP_MARKER) {
   1b5a0:	d107      	bne.n	1b5b2 <parse_option+0x4e>
		return r > 0 ? 0 : -EINVAL;
   1b5a2:	2900      	cmp	r1, #0
   1b5a4:	d13a      	bne.n	1b61c <parse_option+0xb8>
   1b5a6:	f06f 0115 	mvn.w	r1, #21
}
   1b5aa:	4608      	mov	r0, r1
   1b5ac:	b006      	add	sp, #24
   1b5ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (opt & 0xF0) >> 4;
   1b5b2:	ea4f 1c17 	mov.w	ip, r7, lsr #4
	delta = option_header_get_delta(opt);
   1b5b6:	fa1f fe8c 	uxth.w	lr, ip
	len = option_header_get_len(opt);
   1b5ba:	f007 070f 	and.w	r7, r7, #15
	delta = option_header_get_delta(opt);
   1b5be:	f8ad e014 	strh.w	lr, [sp, #20]
	len = option_header_get_len(opt);
   1b5c2:	f8ad 7016 	strh.w	r7, [sp, #22]
	if (r == 0 && delta > COAP_OPTION_NO_EXT) {
   1b5c6:	bb59      	cbnz	r1, 1b620 <parse_option+0xbc>
   1b5c8:	f1bc 0f0c 	cmp.w	ip, #12
   1b5cc:	d8eb      	bhi.n	1b5a6 <parse_option+0x42>
	if (len > COAP_OPTION_NO_EXT) {
   1b5ce:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1b5d2:	2b0c      	cmp	r3, #12
   1b5d4:	d913      	bls.n	1b5fe <parse_option+0x9a>
		r = decode_delta(data, *pos, pos, max_len,
   1b5d6:	f10d 0212 	add.w	r2, sp, #18
   1b5da:	9202      	str	r2, [sp, #8]
   1b5dc:	f10d 0216 	add.w	r2, sp, #22
   1b5e0:	e9cd 3200 	strd	r3, r2, [sp]
   1b5e4:	8831      	ldrh	r1, [r6, #0]
   1b5e6:	462b      	mov	r3, r5
   1b5e8:	4632      	mov	r2, r6
   1b5ea:	4648      	mov	r0, r9
   1b5ec:	f7ff ff73 	bl	1b4d6 <decode_delta>
		if (r < 0) {
   1b5f0:	1e01      	subs	r1, r0, #0
   1b5f2:	dbd8      	blt.n	1b5a6 <parse_option+0x42>
		*opt_len += hdr_len;
   1b5f4:	8823      	ldrh	r3, [r4, #0]
   1b5f6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1b5fa:	4413      	add	r3, r2
   1b5fc:	8023      	strh	r3, [r4, #0]
	*opt_delta += delta;
   1b5fe:	f8ba 3000 	ldrh.w	r3, [sl]
   1b602:	f8bd 2014 	ldrh.w	r2, [sp, #20]
	*opt_len += len;
   1b606:	f8bd 7016 	ldrh.w	r7, [sp, #22]
	*opt_delta += delta;
   1b60a:	4413      	add	r3, r2
   1b60c:	f8aa 3000 	strh.w	r3, [sl]
	*opt_len += len;
   1b610:	8823      	ldrh	r3, [r4, #0]
   1b612:	443b      	add	r3, r7
   1b614:	8023      	strh	r3, [r4, #0]
	if (r == 0) {
   1b616:	b9e1      	cbnz	r1, 1b652 <parse_option+0xee>
		if (len == 0U) {
   1b618:	2f00      	cmp	r7, #0
   1b61a:	d1c4      	bne.n	1b5a6 <parse_option+0x42>
			return r;
   1b61c:	2100      	movs	r1, #0
   1b61e:	e7c4      	b.n	1b5aa <parse_option+0x46>
	if (delta > COAP_OPTION_NO_EXT) {
   1b620:	f1bc 0f0c 	cmp.w	ip, #12
   1b624:	d9d3      	bls.n	1b5ce <parse_option+0x6a>
		r = decode_delta(data, *pos, pos, max_len,
   1b626:	f10d 0112 	add.w	r1, sp, #18
   1b62a:	9102      	str	r1, [sp, #8]
   1b62c:	a905      	add	r1, sp, #20
   1b62e:	e9cd e100 	strd	lr, r1, [sp]
   1b632:	8811      	ldrh	r1, [r2, #0]
   1b634:	f7ff ff4f 	bl	1b4d6 <decode_delta>
		if ((r < 0) || (r == 0 && len > COAP_OPTION_NO_EXT)) {
   1b638:	1e01      	subs	r1, r0, #0
   1b63a:	dbb4      	blt.n	1b5a6 <parse_option+0x42>
   1b63c:	d103      	bne.n	1b646 <parse_option+0xe2>
   1b63e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1b642:	2b0c      	cmp	r3, #12
   1b644:	d8af      	bhi.n	1b5a6 <parse_option+0x42>
		*opt_len += hdr_len;
   1b646:	8823      	ldrh	r3, [r4, #0]
   1b648:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1b64c:	4413      	add	r3, r2
   1b64e:	8023      	strh	r3, [r4, #0]
   1b650:	e7bd      	b.n	1b5ce <parse_option+0x6a>
	if (option) {
   1b652:	f1b8 0f00 	cmp.w	r8, #0
   1b656:	d018      	beq.n	1b68a <parse_option+0x126>
		if (len > sizeof(option->value)) {
   1b658:	2f0c      	cmp	r7, #12
   1b65a:	d8a4      	bhi.n	1b5a6 <parse_option+0x42>
		option->delta = *opt_delta;
   1b65c:	f8ba 3000 	ldrh.w	r3, [sl]
		option->len = len;
   1b660:	f888 7002 	strb.w	r7, [r8, #2]
		option->delta = *opt_delta;
   1b664:	f8a8 3000 	strh.w	r3, [r8]
		r = read(data, *pos, pos, max_len, len, &option->value[0]);
   1b668:	8834      	ldrh	r4, [r6, #0]
   1b66a:	f108 0003 	add.w	r0, r8, #3
	if (max_len - offset < len) {
   1b66e:	1b2b      	subs	r3, r5, r4
   1b670:	42bb      	cmp	r3, r7
   1b672:	db98      	blt.n	1b5a6 <parse_option+0x42>
	memcpy(value, data + offset, len);
   1b674:	eb09 0104 	add.w	r1, r9, r4
   1b678:	463a      	mov	r2, r7
   1b67a:	f000 fbcb 	bl	1be14 <memcpy>
	offset += len;
   1b67e:	1939      	adds	r1, r7, r4
   1b680:	b289      	uxth	r1, r1
	*pos = offset;
   1b682:	8031      	strh	r1, [r6, #0]
		if (r < 0) {
   1b684:	1a69      	subs	r1, r5, r1
   1b686:	d590      	bpl.n	1b5aa <parse_option+0x46>
   1b688:	e78d      	b.n	1b5a6 <parse_option+0x42>
		*pos += len;
   1b68a:	8831      	ldrh	r1, [r6, #0]
   1b68c:	4439      	add	r1, r7
   1b68e:	b289      	uxth	r1, r1
   1b690:	8031      	strh	r1, [r6, #0]
		r = max_len - *pos;
   1b692:	1a69      	subs	r1, r5, r1
   1b694:	e789      	b.n	1b5aa <parse_option+0x46>

0001b696 <coap_packet_init>:
{
   1b696:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b69a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1b69c:	4689      	mov	r9, r1
   1b69e:	4615      	mov	r5, r2
   1b6a0:	4698      	mov	r8, r3
   1b6a2:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
	if (!cpkt || !data || !max_len) {
   1b6a6:	4604      	mov	r4, r0
   1b6a8:	b918      	cbnz	r0, 1b6b2 <coap_packet_init+0x1c>
		return -EINVAL;
   1b6aa:	f06f 0015 	mvn.w	r0, #21
}
   1b6ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!cpkt || !data || !max_len) {
   1b6b2:	2900      	cmp	r1, #0
   1b6b4:	d0f9      	beq.n	1b6aa <coap_packet_init+0x14>
   1b6b6:	2a00      	cmp	r2, #0
   1b6b8:	d0f7      	beq.n	1b6aa <coap_packet_init+0x14>
	memset(cpkt, 0, sizeof(*cpkt));
   1b6ba:	2210      	movs	r2, #16
   1b6bc:	2100      	movs	r1, #0
   1b6be:	f000 fbd3 	bl	1be68 <memset>
	cpkt->offset = 0U;
   1b6c2:	2200      	movs	r2, #0
	hdr |= (type & 0x3) << 4;
   1b6c4:	f89d 1020 	ldrb.w	r1, [sp, #32]
	cpkt->max_len = max_len;
   1b6c8:	80e5      	strh	r5, [r4, #6]
	hdr |= (type & 0x3) << 4;
   1b6ca:	0109      	lsls	r1, r1, #4
	hdr |= tokenlen & 0xF;
   1b6cc:	b275      	sxtb	r5, r6
	hdr |= (type & 0x3) << 4;
   1b6ce:	f001 0130 	and.w	r1, r1, #48	; 0x30
   1b6d2:	ea41 1188 	orr.w	r1, r1, r8, lsl #6
	hdr |= tokenlen & 0xF;
   1b6d6:	f005 030f 	and.w	r3, r5, #15
   1b6da:	4319      	orrs	r1, r3
	cpkt->data = data;
   1b6dc:	f8c4 9000 	str.w	r9, [r4]
	cpkt->offset = 0U;
   1b6e0:	80a2      	strh	r2, [r4, #4]
	cpkt->delta = 0U;
   1b6e2:	81a2      	strh	r2, [r4, #12]
	res = append_u8(cpkt, hdr);
   1b6e4:	b2c9      	uxtb	r1, r1
   1b6e6:	4620      	mov	r0, r4
   1b6e8:	f7ff fed1 	bl	1b48e <append_u8>
	if (!res) {
   1b6ec:	2800      	cmp	r0, #0
   1b6ee:	d0dc      	beq.n	1b6aa <coap_packet_init+0x14>
	res = append_u8(cpkt, code);
   1b6f0:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
   1b6f4:	4620      	mov	r0, r4
   1b6f6:	f7ff feca 	bl	1b48e <append_u8>
	if (!res) {
   1b6fa:	2800      	cmp	r0, #0
   1b6fc:	d0d5      	beq.n	1b6aa <coap_packet_init+0x14>
	res = append_be16(cpkt, id);
   1b6fe:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
   1b702:	4620      	mov	r0, r4
   1b704:	f7ff fed2 	bl	1b4ac <append_be16>
	if (!res) {
   1b708:	2800      	cmp	r0, #0
   1b70a:	d0ce      	beq.n	1b6aa <coap_packet_init+0x14>
	if (token && tokenlen) {
   1b70c:	b91f      	cbnz	r7, 1b716 <coap_packet_init+0x80>
	cpkt->hdr_len = 1 + 1 + 2 + tokenlen;
   1b70e:	3504      	adds	r5, #4
   1b710:	7225      	strb	r5, [r4, #8]
	return 0;
   1b712:	2000      	movs	r0, #0
   1b714:	e7cb      	b.n	1b6ae <coap_packet_init+0x18>
	if (token && tokenlen) {
   1b716:	2e00      	cmp	r6, #0
   1b718:	d0f9      	beq.n	1b70e <coap_packet_init+0x78>
		res = append(cpkt, token, tokenlen);
   1b71a:	4632      	mov	r2, r6
   1b71c:	4639      	mov	r1, r7
   1b71e:	4620      	mov	r0, r4
   1b720:	f7ff ff0b 	bl	1b53a <append>
		if (!res) {
   1b724:	2800      	cmp	r0, #0
   1b726:	d1f2      	bne.n	1b70e <coap_packet_init+0x78>
   1b728:	e7bf      	b.n	1b6aa <coap_packet_init+0x14>

0001b72a <coap_packet_append_option>:
{
   1b72a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b72e:	460f      	mov	r7, r1
   1b730:	4692      	mov	sl, r2
   1b732:	461c      	mov	r4, r3
	if (!cpkt) {
   1b734:	4606      	mov	r6, r0
   1b736:	b918      	cbnz	r0, 1b740 <coap_packet_append_option+0x16>
		return -EINVAL;
   1b738:	f06f 0015 	mvn.w	r0, #21
}
   1b73c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (len && !value) {
   1b740:	b10b      	cbz	r3, 1b746 <coap_packet_append_option+0x1c>
   1b742:	2a00      	cmp	r2, #0
   1b744:	d0f8      	beq.n	1b738 <coap_packet_append_option+0xe>
	if (code < cpkt->delta) {
   1b746:	89b3      	ldrh	r3, [r6, #12]
   1b748:	42bb      	cmp	r3, r7
   1b74a:	d8f5      	bhi.n	1b738 <coap_packet_append_option+0xe>
	if (cpkt->opt_len) {
   1b74c:	8972      	ldrh	r2, [r6, #10]
   1b74e:	b11a      	cbz	r2, 1b758 <coap_packet_append_option+0x2e>
		code = (code == cpkt->delta) ? 0 : code - cpkt->delta;
   1b750:	42bb      	cmp	r3, r7
   1b752:	d034      	beq.n	1b7be <coap_packet_append_option+0x94>
   1b754:	1aff      	subs	r7, r7, r3
   1b756:	b2bf      	uxth	r7, r7
	if (num < COAP_OPTION_EXT_13) {
   1b758:	2f0c      	cmp	r7, #12
   1b75a:	d832      	bhi.n	1b7c2 <coap_packet_append_option+0x98>
		*ext = 0U;
   1b75c:	f04f 0b00 	mov.w	fp, #0
		return 0;
   1b760:	46d9      	mov	r9, fp
		*opt = num;
   1b762:	b2fb      	uxtb	r3, r7
	if (num < COAP_OPTION_EXT_13) {
   1b764:	2c0c      	cmp	r4, #12
   1b766:	d842      	bhi.n	1b7ee <coap_packet_append_option+0xc4>
		*ext = 0U;
   1b768:	2500      	movs	r5, #0
		return 0;
   1b76a:	46a8      	mov	r8, r5
		*opt = num;
   1b76c:	b2e1      	uxtb	r1, r4
	*opt |= (len & 0xF);
   1b76e:	ea41 1103 	orr.w	r1, r1, r3, lsl #4
	res = append_u8(cpkt, opt);
   1b772:	b2c9      	uxtb	r1, r1
   1b774:	4630      	mov	r0, r6
   1b776:	f7ff fe8a 	bl	1b48e <append_u8>
	if (!res) {
   1b77a:	2800      	cmp	r0, #0
   1b77c:	d0dc      	beq.n	1b738 <coap_packet_append_option+0xe>
	if (delta_size == 1U) {
   1b77e:	f1b9 0f01 	cmp.w	r9, #1
   1b782:	d146      	bne.n	1b812 <coap_packet_append_option+0xe8>
		res = append_u8(cpkt, (u8_t)delta_ext);
   1b784:	fa5f f18b 	uxtb.w	r1, fp
   1b788:	4630      	mov	r0, r6
   1b78a:	f7ff fe80 	bl	1b48e <append_u8>
		if (!res) {
   1b78e:	2800      	cmp	r0, #0
   1b790:	d0d2      	beq.n	1b738 <coap_packet_append_option+0xe>
	if (len_size == 1U) {
   1b792:	f1b8 0f01 	cmp.w	r8, #1
   1b796:	d105      	bne.n	1b7a4 <coap_packet_append_option+0x7a>
		res = append_u8(cpkt, (u8_t)len_ext);
   1b798:	b2e9      	uxtb	r1, r5
   1b79a:	4630      	mov	r0, r6
   1b79c:	f7ff fe77 	bl	1b48e <append_u8>
		if (!res) {
   1b7a0:	2800      	cmp	r0, #0
   1b7a2:	d0c9      	beq.n	1b738 <coap_packet_append_option+0xe>
	if (len && value) {
   1b7a4:	2c00      	cmp	r4, #0
   1b7a6:	d145      	bne.n	1b834 <coap_packet_append_option+0x10a>
	return  (1 + delta_size + len_size + len);
   1b7a8:	3401      	adds	r4, #1
	cpkt->opt_len += r;
   1b7aa:	8973      	ldrh	r3, [r6, #10]
	return  (1 + delta_size + len_size + len);
   1b7ac:	444c      	add	r4, r9
   1b7ae:	4444      	add	r4, r8
	cpkt->opt_len += r;
   1b7b0:	441c      	add	r4, r3
	cpkt->delta += code;
   1b7b2:	89b3      	ldrh	r3, [r6, #12]
	cpkt->opt_len += r;
   1b7b4:	8174      	strh	r4, [r6, #10]
	cpkt->delta += code;
   1b7b6:	441f      	add	r7, r3
   1b7b8:	81b7      	strh	r7, [r6, #12]
	return 0;
   1b7ba:	2000      	movs	r0, #0
   1b7bc:	e7be      	b.n	1b73c <coap_packet_append_option+0x12>
		code = (code == cpkt->delta) ? 0 : code - cpkt->delta;
   1b7be:	2700      	movs	r7, #0
   1b7c0:	e7cc      	b.n	1b75c <coap_packet_append_option+0x32>
	} else if (num < COAP_OPTION_EXT_269) {
   1b7c2:	f5b7 7f86 	cmp.w	r7, #268	; 0x10c
   1b7c6:	fa0f fb87 	sxth.w	fp, r7
   1b7ca:	d807      	bhi.n	1b7dc <coap_packet_append_option+0xb2>
		*ext = num - COAP_OPTION_EXT_13;
   1b7cc:	f1ab 0b0d 	sub.w	fp, fp, #13
   1b7d0:	fa1f fb8b 	uxth.w	fp, fp
		*opt = COAP_OPTION_EXT_13;
   1b7d4:	230d      	movs	r3, #13
		return 1;
   1b7d6:	f04f 0901 	mov.w	r9, #1
   1b7da:	e7c3      	b.n	1b764 <coap_packet_append_option+0x3a>
	*ext = num - COAP_OPTION_EXT_269;
   1b7dc:	f46f 7186 	mvn.w	r1, #268	; 0x10c
   1b7e0:	448b      	add	fp, r1
   1b7e2:	fa1f fb8b 	uxth.w	fp, fp
	*opt = COAP_OPTION_EXT_14;
   1b7e6:	230e      	movs	r3, #14
	return 2;
   1b7e8:	f04f 0902 	mov.w	r9, #2
   1b7ec:	e7ba      	b.n	1b764 <coap_packet_append_option+0x3a>
	} else if (num < COAP_OPTION_EXT_269) {
   1b7ee:	f5b4 7f86 	cmp.w	r4, #268	; 0x10c
   1b7f2:	b225      	sxth	r5, r4
   1b7f4:	d805      	bhi.n	1b802 <coap_packet_append_option+0xd8>
		*ext = num - COAP_OPTION_EXT_13;
   1b7f6:	3d0d      	subs	r5, #13
   1b7f8:	b2ad      	uxth	r5, r5
		*opt = COAP_OPTION_EXT_13;
   1b7fa:	210d      	movs	r1, #13
		return 1;
   1b7fc:	f04f 0801 	mov.w	r8, #1
   1b800:	e7b5      	b.n	1b76e <coap_packet_append_option+0x44>
	*ext = num - COAP_OPTION_EXT_269;
   1b802:	f46f 7286 	mvn.w	r2, #268	; 0x10c
   1b806:	4415      	add	r5, r2
   1b808:	b2ad      	uxth	r5, r5
	*opt = COAP_OPTION_EXT_14;
   1b80a:	210e      	movs	r1, #14
	return 2;
   1b80c:	f04f 0802 	mov.w	r8, #2
   1b810:	e7ad      	b.n	1b76e <coap_packet_append_option+0x44>
	} else if (delta_size == 2U) {
   1b812:	f1b9 0f02 	cmp.w	r9, #2
   1b816:	d1bc      	bne.n	1b792 <coap_packet_append_option+0x68>
		res = append_be16(cpkt, delta_ext);
   1b818:	4659      	mov	r1, fp
   1b81a:	4630      	mov	r0, r6
   1b81c:	f7ff fe46 	bl	1b4ac <append_be16>
		if (!res) {
   1b820:	2800      	cmp	r0, #0
   1b822:	d089      	beq.n	1b738 <coap_packet_append_option+0xe>
	if (len_size == 1U) {
   1b824:	f1b8 0f01 	cmp.w	r8, #1
   1b828:	d0b6      	beq.n	1b798 <coap_packet_append_option+0x6e>
		res = append_be16(cpkt, len_ext);
   1b82a:	4629      	mov	r1, r5
   1b82c:	4630      	mov	r0, r6
   1b82e:	f7ff fe3d 	bl	1b4ac <append_be16>
   1b832:	e7b5      	b.n	1b7a0 <coap_packet_append_option+0x76>
	if (len && value) {
   1b834:	f1ba 0f00 	cmp.w	sl, #0
   1b838:	d0b6      	beq.n	1b7a8 <coap_packet_append_option+0x7e>
		res = append(cpkt, value, len);
   1b83a:	4622      	mov	r2, r4
   1b83c:	4651      	mov	r1, sl
   1b83e:	4630      	mov	r0, r6
   1b840:	f7ff fe7b 	bl	1b53a <append>
		if (!res) {
   1b844:	2800      	cmp	r0, #0
   1b846:	d1af      	bne.n	1b7a8 <coap_packet_append_option+0x7e>
   1b848:	e776      	b.n	1b738 <coap_packet_append_option+0xe>

0001b84a <coap_packet_parse>:
{
   1b84a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b84e:	b086      	sub	sp, #24
   1b850:	4688      	mov	r8, r1
   1b852:	4617      	mov	r7, r2
   1b854:	461d      	mov	r5, r3
   1b856:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
	if (!cpkt || !data) {
   1b85a:	4604      	mov	r4, r0
   1b85c:	b920      	cbnz	r0, 1b868 <coap_packet_parse+0x1e>
		return -EINVAL;
   1b85e:	f06f 0015 	mvn.w	r0, #21
}
   1b862:	b006      	add	sp, #24
   1b864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!cpkt || !data) {
   1b868:	2900      	cmp	r1, #0
   1b86a:	d0f8      	beq.n	1b85e <coap_packet_parse+0x14>
	if (len < BASIC_HEADER_SIZE) {
   1b86c:	2a03      	cmp	r2, #3
   1b86e:	d9f6      	bls.n	1b85e <coap_packet_parse+0x14>
	if (options) {
   1b870:	b123      	cbz	r3, 1b87c <coap_packet_parse+0x32>
		memset(options, 0, opt_num * sizeof(struct coap_option));
   1b872:	0132      	lsls	r2, r6, #4
   1b874:	2100      	movs	r1, #0
   1b876:	4618      	mov	r0, r3
   1b878:	f000 faf6 	bl	1be68 <memset>
	cpkt->offset = 0U;
   1b87c:	2000      	movs	r0, #0
	cpkt->data = data;
   1b87e:	f8c4 8000 	str.w	r8, [r4]
	cpkt->offset = 0U;
   1b882:	80a0      	strh	r0, [r4, #4]
	cpkt->max_len = len;
   1b884:	80e7      	strh	r7, [r4, #6]
	cpkt->opt_len = 0U;
   1b886:	8160      	strh	r0, [r4, #10]
	cpkt->hdr_len = 0U;
   1b888:	7220      	strb	r0, [r4, #8]
	cpkt->delta = 0U;
   1b88a:	81a0      	strh	r0, [r4, #12]
	tkl = cpkt->data[0] & 0x0f;
   1b88c:	f898 3000 	ldrb.w	r3, [r8]
   1b890:	f003 030f 	and.w	r3, r3, #15
	if (tkl > 8) {
   1b894:	2b08      	cmp	r3, #8
   1b896:	d8e2      	bhi.n	1b85e <coap_packet_parse+0x14>
	cpkt->hdr_len = BASIC_HEADER_SIZE + tkl;
   1b898:	3304      	adds	r3, #4
   1b89a:	7223      	strb	r3, [r4, #8]
	if (cpkt->hdr_len > len) {
   1b89c:	b29b      	uxth	r3, r3
   1b89e:	42bb      	cmp	r3, r7
   1b8a0:	d8dd      	bhi.n	1b85e <coap_packet_parse+0x14>
	cpkt->offset = cpkt->hdr_len;
   1b8a2:	80a3      	strh	r3, [r4, #4]
	if (cpkt->hdr_len == len) {
   1b8a4:	d0dd      	beq.n	1b862 <coap_packet_parse+0x18>
	num = 0U;
   1b8a6:	4607      	mov	r7, r0
	offset = cpkt->offset;
   1b8a8:	f8ad 3014 	strh.w	r3, [sp, #20]
	opt_len = 0U;
   1b8ac:	f8ad 0012 	strh.w	r0, [sp, #18]
	delta = 0U;
   1b8b0:	f8ad 0016 	strh.w	r0, [sp, #22]
		ret = parse_option(cpkt->data, offset, &offset, cpkt->max_len,
   1b8b4:	f10d 0812 	add.w	r8, sp, #18
		option = num < opt_num ? &options[num++] : NULL;
   1b8b8:	42b7      	cmp	r7, r6
   1b8ba:	bf2c      	ite	cs
   1b8bc:	2300      	movcs	r3, #0
   1b8be:	eb05 1307 	addcc.w	r3, r5, r7, lsl #4
		ret = parse_option(cpkt->data, offset, &offset, cpkt->max_len,
   1b8c2:	e9cd 8301 	strd	r8, r3, [sp, #4]
   1b8c6:	f10d 0316 	add.w	r3, sp, #22
		option = num < opt_num ? &options[num++] : NULL;
   1b8ca:	bf38      	it	cc
   1b8cc:	1c7a      	addcc	r2, r7, #1
		ret = parse_option(cpkt->data, offset, &offset, cpkt->max_len,
   1b8ce:	9300      	str	r3, [sp, #0]
		option = num < opt_num ? &options[num++] : NULL;
   1b8d0:	bf38      	it	cc
   1b8d2:	b2d7      	uxtbcc	r7, r2
		ret = parse_option(cpkt->data, offset, &offset, cpkt->max_len,
   1b8d4:	88e3      	ldrh	r3, [r4, #6]
   1b8d6:	aa05      	add	r2, sp, #20
   1b8d8:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   1b8dc:	6820      	ldr	r0, [r4, #0]
   1b8de:	f7ff fe41 	bl	1b564 <parse_option>
		if (ret < 0) {
   1b8e2:	2800      	cmp	r0, #0
   1b8e4:	dbbd      	blt.n	1b862 <coap_packet_parse+0x18>
		} else if (ret == 0) {
   1b8e6:	d1e7      	bne.n	1b8b8 <coap_packet_parse+0x6e>
	cpkt->opt_len = opt_len;
   1b8e8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1b8ec:	8163      	strh	r3, [r4, #10]
	cpkt->delta = delta;
   1b8ee:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1b8f2:	81a3      	strh	r3, [r4, #12]
	cpkt->offset = offset;
   1b8f4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1b8f8:	80a3      	strh	r3, [r4, #4]
	return 0;
   1b8fa:	e7b2      	b.n	1b862 <coap_packet_parse+0x18>

0001b8fc <coap_header_get_token>:
{
   1b8fc:	b510      	push	{r4, lr}
   1b8fe:	460b      	mov	r3, r1
	if (!cpkt || !cpkt->data) {
   1b900:	b160      	cbz	r0, 1b91c <coap_header_get_token+0x20>
   1b902:	6801      	ldr	r1, [r0, #0]
   1b904:	b161      	cbz	r1, 1b920 <coap_header_get_token+0x24>
	tkl = cpkt->data[0] & 0x0f;
   1b906:	780c      	ldrb	r4, [r1, #0]
	if (tkl) {
   1b908:	f014 040f 	ands.w	r4, r4, #15
   1b90c:	d004      	beq.n	1b918 <coap_header_get_token+0x1c>
		memcpy(token, cpkt->data + BASIC_HEADER_SIZE, tkl);
   1b90e:	4622      	mov	r2, r4
   1b910:	3104      	adds	r1, #4
   1b912:	4618      	mov	r0, r3
   1b914:	f000 fa7e 	bl	1be14 <memcpy>
}
   1b918:	4620      	mov	r0, r4
   1b91a:	bd10      	pop	{r4, pc}
		return 0;
   1b91c:	4604      	mov	r4, r0
   1b91e:	e7fb      	b.n	1b918 <coap_header_get_token+0x1c>
   1b920:	460c      	mov	r4, r1
   1b922:	e7f9      	b.n	1b918 <coap_header_get_token+0x1c>

0001b924 <coap_header_get_code>:
	if (!cpkt || !cpkt->data) {
   1b924:	b308      	cbz	r0, 1b96a <coap_header_get_code+0x46>
   1b926:	6800      	ldr	r0, [r0, #0]
   1b928:	b1f8      	cbz	r0, 1b96a <coap_header_get_code+0x46>
	return cpkt->data[1];
   1b92a:	7840      	ldrb	r0, [r0, #1]
	switch (code) {
   1b92c:	2886      	cmp	r0, #134	; 0x86
   1b92e:	d80d      	bhi.n	1b94c <coap_header_get_code+0x28>
   1b930:	2880      	cmp	r0, #128	; 0x80
   1b932:	d21a      	bcs.n	1b96a <coap_header_get_code+0x46>
   1b934:	2845      	cmp	r0, #69	; 0x45
   1b936:	d805      	bhi.n	1b944 <coap_header_get_code+0x20>
   1b938:	2840      	cmp	r0, #64	; 0x40
   1b93a:	d216      	bcs.n	1b96a <coap_header_get_code+0x46>
		return COAP_CODE_EMPTY;
   1b93c:	2805      	cmp	r0, #5
   1b93e:	bf28      	it	cs
   1b940:	2000      	movcs	r0, #0
   1b942:	4770      	bx	lr
   1b944:	285f      	cmp	r0, #95	; 0x5f
   1b946:	bf18      	it	ne
   1b948:	2000      	movne	r0, #0
   1b94a:	4770      	bx	lr
	switch (code) {
   1b94c:	288d      	cmp	r0, #141	; 0x8d
   1b94e:	d803      	bhi.n	1b958 <coap_header_get_code+0x34>
   1b950:	288c      	cmp	r0, #140	; 0x8c
   1b952:	d20a      	bcs.n	1b96a <coap_header_get_code+0x46>
		return COAP_CODE_EMPTY;
   1b954:	2888      	cmp	r0, #136	; 0x88
   1b956:	e7f6      	b.n	1b946 <coap_header_get_code+0x22>
	switch (code) {
   1b958:	288f      	cmp	r0, #143	; 0x8f
   1b95a:	d006      	beq.n	1b96a <coap_header_get_code+0x46>
   1b95c:	d304      	bcc.n	1b968 <coap_header_get_code+0x44>
   1b95e:	f100 0360 	add.w	r3, r0, #96	; 0x60
   1b962:	b2db      	uxtb	r3, r3
		return COAP_CODE_EMPTY;
   1b964:	2b06      	cmp	r3, #6
   1b966:	e7ea      	b.n	1b93e <coap_header_get_code+0x1a>
   1b968:	2000      	movs	r0, #0
}
   1b96a:	4770      	bx	lr

0001b96c <coap_packet_get_payload>:
{
   1b96c:	b510      	push	{r4, lr}
	if (!cpkt || !len) {
   1b96e:	b908      	cbnz	r0, 1b974 <coap_packet_get_payload+0x8>
		return NULL;
   1b970:	2000      	movs	r0, #0
}
   1b972:	bd10      	pop	{r4, pc}
	if (!cpkt || !len) {
   1b974:	2900      	cmp	r1, #0
   1b976:	d0fb      	beq.n	1b970 <coap_packet_get_payload+0x4>
	payload_len = cpkt->max_len - cpkt->hdr_len - cpkt->opt_len;
   1b978:	7a02      	ldrb	r2, [r0, #8]
   1b97a:	8944      	ldrh	r4, [r0, #10]
   1b97c:	88c3      	ldrh	r3, [r0, #6]
   1b97e:	4422      	add	r2, r4
   1b980:	1a9b      	subs	r3, r3, r2
	if (payload_len > 0) {
   1b982:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
	return !(*len) ? NULL :
   1b986:	2b00      	cmp	r3, #0
   1b988:	800a      	strh	r2, [r1, #0]
   1b98a:	ddf1      	ble.n	1b970 <coap_packet_get_payload+0x4>
		cpkt->data + cpkt->hdr_len + cpkt->opt_len;
   1b98c:	7a03      	ldrb	r3, [r0, #8]
   1b98e:	8942      	ldrh	r2, [r0, #10]
	return !(*len) ? NULL :
   1b990:	6800      	ldr	r0, [r0, #0]
		cpkt->data + cpkt->hdr_len + cpkt->opt_len;
   1b992:	4413      	add	r3, r2
	return !(*len) ? NULL :
   1b994:	4418      	add	r0, r3
   1b996:	e7ec      	b.n	1b972 <coap_packet_get_payload+0x6>

0001b998 <get_status>:
	if (data->started) {
   1b998:	220c      	movs	r2, #12
	data = get_sub_data(dev, type);
   1b99a:	6883      	ldr	r3, [r0, #8]
	return &data->subsys[type];
   1b99c:	b2c9      	uxtb	r1, r1
	if (data->started) {
   1b99e:	fb02 3101 	mla	r1, r2, r1, r3
   1b9a2:	7a4b      	ldrb	r3, [r1, #9]
   1b9a4:	b923      	cbnz	r3, 1b9b0 <get_status+0x18>
	if (data->ref > 0) {
   1b9a6:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
   1b9a8:	fab0 f080 	clz	r0, r0
   1b9ac:	0940      	lsrs	r0, r0, #5
   1b9ae:	4770      	bx	lr
   1b9b0:	2002      	movs	r0, #2
}
   1b9b2:	4770      	bx	lr

0001b9b4 <clock_stop>:
	const struct nrf_clock_control_config *config =
   1b9b4:	6802      	ldr	r2, [r0, #0]
{
   1b9b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct nrf_clock_control_config *config =
   1b9ba:	f8d2 8008 	ldr.w	r8, [r2, #8]
	return &config->subsys[type];
   1b9be:	b2cc      	uxtb	r4, r1
	data = get_sub_data(dev, type);
   1b9c0:	6887      	ldr	r7, [r0, #8]
	__asm__ volatile(
   1b9c2:	f04f 0320 	mov.w	r3, #32
   1b9c6:	f3ef 8611 	mrs	r6, BASEPRI
   1b9ca:	f383 8811 	msr	BASEPRI, r3
   1b9ce:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
   1b9d2:	220c      	movs	r2, #12
   1b9d4:	4362      	muls	r2, r4
   1b9d6:	18b9      	adds	r1, r7, r2
   1b9d8:	7a0b      	ldrb	r3, [r1, #8]
   1b9da:	b343      	cbz	r3, 1ba2e <clock_stop+0x7a>
	data->ref--;
   1b9dc:	3b01      	subs	r3, #1
   1b9de:	b2db      	uxtb	r3, r3
   1b9e0:	720b      	strb	r3, [r1, #8]
	if (data->ref == 0) {
   1b9e2:	bb3b      	cbnz	r3, 1ba34 <clock_stop+0x80>
		do_stop =  (config->stop_handler) ?
   1b9e4:	0125      	lsls	r5, r4, #4
	list->head = NULL;
   1b9e6:	50bb      	str	r3, [r7, r2]
	list->tail = NULL;
   1b9e8:	604b      	str	r3, [r1, #4]
   1b9ea:	eb08 0305 	add.w	r3, r8, r5
   1b9ee:	685b      	ldr	r3, [r3, #4]
				config->stop_handler(dev) : true;
   1b9f0:	b9cb      	cbnz	r3, 1ba26 <clock_stop+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b9f2:	2201      	movs	r2, #1
			nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
   1b9f4:	4445      	add	r5, r8
   1b9f6:	7aeb      	ldrb	r3, [r5, #11]
   1b9f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b9fc:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1ba00:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ba02:	2200      	movs	r2, #0
   1ba04:	892b      	ldrh	r3, [r5, #8]
   1ba06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ba0a:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1ba0e:	601a      	str	r2, [r3, #0]
		data->started = false;
   1ba10:	210c      	movs	r1, #12
   1ba12:	2000      	movs	r0, #0
   1ba14:	fb01 7404 	mla	r4, r1, r4, r7
   1ba18:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
   1ba1a:	f386 8811 	msr	BASEPRI, r6
   1ba1e:	f3bf 8f6f 	isb	sy
}
   1ba22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				config->stop_handler(dev) : true;
   1ba26:	4798      	blx	r3
   1ba28:	2800      	cmp	r0, #0
   1ba2a:	d1e2      	bne.n	1b9f2 <clock_stop+0x3e>
   1ba2c:	e7f0      	b.n	1ba10 <clock_stop+0x5c>
		err = -EALREADY;
   1ba2e:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1ba32:	e7f2      	b.n	1ba1a <clock_stop+0x66>
	int err = 0;
   1ba34:	2000      	movs	r0, #0
   1ba36:	e7f0      	b.n	1ba1a <clock_stop+0x66>

0001ba38 <clkstarted_handle>:
{
   1ba38:	b538      	push	{r3, r4, r5, lr}
	sub_data->started = true;
   1ba3a:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   1ba3c:	6883      	ldr	r3, [r0, #8]
{
   1ba3e:	4605      	mov	r5, r0
	sub_data->started = true;
   1ba40:	fb04 3401 	mla	r4, r4, r1, r3
   1ba44:	2301      	movs	r3, #1
   1ba46:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   1ba48:	f04f 0320 	mov.w	r3, #32
   1ba4c:	f3ef 8111 	mrs	r1, BASEPRI
   1ba50:	f383 8811 	msr	BASEPRI, r3
   1ba54:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1ba58:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1ba5a:	b12b      	cbz	r3, 1ba68 <clkstarted_handle+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ba5c:	6860      	ldr	r0, [r4, #4]
   1ba5e:	681a      	ldr	r2, [r3, #0]
   1ba60:	4283      	cmp	r3, r0
	list->head = node;
   1ba62:	6022      	str	r2, [r4, #0]
	list->tail = node;
   1ba64:	bf08      	it	eq
   1ba66:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
   1ba68:	f381 8811 	msr	BASEPRI, r1
   1ba6c:	f3bf 8f6f 	isb	sy
	while ((async_data = list_get(&sub_data->list)) != NULL) {
   1ba70:	b903      	cbnz	r3, 1ba74 <clkstarted_handle+0x3c>
}
   1ba72:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   1ba74:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   1ba78:	4628      	mov	r0, r5
   1ba7a:	4790      	blx	r2
   1ba7c:	e7e4      	b.n	1ba48 <clkstarted_handle+0x10>

0001ba7e <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   1ba7e:	2200      	movs	r2, #0
   1ba80:	f7f1 bd12 	b.w	d4a8 <clock_async_start>

0001ba84 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1ba84:	4770      	bx	lr

0001ba86 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1ba86:	4770      	bx	lr

0001ba88 <z_irq_spurious>:
	z_arm_reserved();
   1ba88:	f7f1 bfc6 	b.w	da18 <z_arm_bus_fault>

0001ba8c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1ba8c:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   1ba8e:	6800      	ldr	r0, [r0, #0]
   1ba90:	f7f1 bfcc 	b.w	da2c <z_arm_fatal_error>

0001ba94 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1ba94:	b508      	push	{r3, lr}
	handler();
   1ba96:	f7f2 f863 	bl	db60 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   1ba9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   1ba9e:	f7f1 be9b 	b.w	d7d8 <z_arm_exc_exit>

0001baa2 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   1baa2:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   1baa4:	2100      	movs	r1, #0
   1baa6:	a801      	add	r0, sp, #4
   1baa8:	f7f2 fd6c 	bl	e584 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   1baac:	b003      	add	sp, #12
   1baae:	f85d fb04 	ldr.w	pc, [sp], #4

0001bab2 <mpu_configure_region>:
{
   1bab2:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   1bab4:	684b      	ldr	r3, [r1, #4]
{
   1bab6:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   1bab8:	680c      	ldr	r4, [r1, #0]
	p_attr->rbar = attr->rbar &
   1baba:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1babe:	890d      	ldrh	r5, [r1, #8]
   1bac0:	9400      	str	r4, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   1bac2:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1bac4:	f024 041f 	bic.w	r4, r4, #31
   1bac8:	3b01      	subs	r3, #1
   1baca:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   1bacc:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   1bad0:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1bad4:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   1bad8:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
   1bada:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1bade:	9303      	str	r3, [sp, #12]
   1bae0:	4604      	mov	r4, r0
   1bae2:	d905      	bls.n	1baf0 <mpu_configure_region+0x3e>
   1bae4:	f7f2 fbd0 	bl	e288 <region_allocate_and_init.part.0>
   1bae8:	4604      	mov	r4, r0
}
   1baea:	4620      	mov	r0, r4
   1baec:	b005      	add	sp, #20
   1baee:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   1baf0:	4669      	mov	r1, sp
   1baf2:	f7f2 fbb1 	bl	e258 <region_init>
	return region_allocate_and_init(index,
   1baf6:	e7f8      	b.n	1baea <mpu_configure_region+0x38>

0001baf8 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1baf8:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   1bafc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1bb00:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   1bb02:	bf08      	it	eq
   1bb04:	f06f 0015 	mvneq.w	r0, #21
   1bb08:	4770      	bx	lr

0001bb0a <atoi>:

#include <stdlib.h>
#include <ctype.h>

int atoi(const char *s)
{
   1bb0a:	b530      	push	{r4, r5, lr}
	int n = 0;
	int neg = 0;

	while (isspace(*s)) {
   1bb0c:	7802      	ldrb	r2, [r0, #0]
   1bb0e:	4603      	mov	r3, r0
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1bb10:	2a20      	cmp	r2, #32
   1bb12:	f100 0001 	add.w	r0, r0, #1
   1bb16:	d0f9      	beq.n	1bb0c <atoi+0x2>
   1bb18:	f1a2 0109 	sub.w	r1, r2, #9
   1bb1c:	2904      	cmp	r1, #4
   1bb1e:	d9f5      	bls.n	1bb0c <atoi+0x2>
		s++;
	}
	switch (*s) {
   1bb20:	2a2b      	cmp	r2, #43	; 0x2b
   1bb22:	d008      	beq.n	1bb36 <atoi+0x2c>
	case '-':
		neg = 1;
		s++;
   1bb24:	2a2d      	cmp	r2, #45	; 0x2d
   1bb26:	bf0a      	itet	eq
   1bb28:	4603      	moveq	r3, r0
   1bb2a:	2100      	movne	r1, #0
   1bb2c:	2101      	moveq	r1, #1
   1bb2e:	3b01      	subs	r3, #1
	int neg = 0;
   1bb30:	2000      	movs	r0, #0
	case '+':
		s++;
	}
	/* Compute n as a negative number to avoid overflow on INT_MIN */
	while (isdigit(*s)) {
		n = 10*n - (*s++ - '0');
   1bb32:	250a      	movs	r5, #10
   1bb34:	e006      	b.n	1bb44 <atoi+0x3a>
		s++;
   1bb36:	4603      	mov	r3, r0
	int neg = 0;
   1bb38:	2100      	movs	r1, #0
   1bb3a:	e7f8      	b.n	1bb2e <atoi+0x24>
		n = 10*n - (*s++ - '0');
   1bb3c:	f1c2 0230 	rsb	r2, r2, #48	; 0x30
   1bb40:	fb05 2000 	mla	r0, r5, r0, r2
	while (isdigit(*s)) {
   1bb44:	f813 2f01 	ldrb.w	r2, [r3, #1]!
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1bb48:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   1bb4c:	2c09      	cmp	r4, #9
   1bb4e:	d9f5      	bls.n	1bb3c <atoi+0x32>
	}
	return neg ? n : -n;
   1bb50:	b901      	cbnz	r1, 1bb54 <atoi+0x4a>
   1bb52:	4240      	negs	r0, r0
}
   1bb54:	bd30      	pop	{r4, r5, pc}

0001bb56 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1bb56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bb5a:	4684      	mov	ip, r0
   1bb5c:	460f      	mov	r7, r1
	register const char *s = nptr;
   1bb5e:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1bb60:	462c      	mov	r4, r5
   1bb62:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1bb66:	2b20      	cmp	r3, #32
   1bb68:	d036      	beq.n	1bbd8 <strtol+0x82>
   1bb6a:	f1a3 0109 	sub.w	r1, r3, #9
   1bb6e:	2904      	cmp	r1, #4
   1bb70:	d932      	bls.n	1bbd8 <strtol+0x82>
	} while (isspace(c));
	if (c == '-') {
   1bb72:	2b2d      	cmp	r3, #45	; 0x2d
   1bb74:	d132      	bne.n	1bbdc <strtol+0x86>
		neg = 1;
   1bb76:	2101      	movs	r1, #1
		c = *s++;
   1bb78:	786b      	ldrb	r3, [r5, #1]
   1bb7a:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1bb7c:	2a00      	cmp	r2, #0
   1bb7e:	d05c      	beq.n	1bc3a <strtol+0xe4>
   1bb80:	2a10      	cmp	r2, #16
   1bb82:	d109      	bne.n	1bb98 <strtol+0x42>
   1bb84:	2b30      	cmp	r3, #48	; 0x30
   1bb86:	d107      	bne.n	1bb98 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1bb88:	7823      	ldrb	r3, [r4, #0]
   1bb8a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1bb8e:	2b58      	cmp	r3, #88	; 0x58
   1bb90:	d14e      	bne.n	1bc30 <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
   1bb92:	2210      	movs	r2, #16
		c = s[1];
   1bb94:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1bb96:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1bb98:	2900      	cmp	r1, #0
   1bb9a:	bf14      	ite	ne
   1bb9c:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
   1bba0:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1bba4:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   1bba6:	fbb8 fef2 	udiv	lr, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
   1bbaa:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1bbac:	fb02 891e 	mls	r9, r2, lr, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1bbb0:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1bbb4:	2d09      	cmp	r5, #9
   1bbb6:	d817      	bhi.n	1bbe8 <strtol+0x92>
			c -= '0';
   1bbb8:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1bbba:	429a      	cmp	r2, r3
   1bbbc:	dd24      	ble.n	1bc08 <strtol+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1bbbe:	1c75      	adds	r5, r6, #1
   1bbc0:	d007      	beq.n	1bbd2 <strtol+0x7c>
   1bbc2:	4570      	cmp	r0, lr
   1bbc4:	d81d      	bhi.n	1bc02 <strtol+0xac>
   1bbc6:	d101      	bne.n	1bbcc <strtol+0x76>
   1bbc8:	454b      	cmp	r3, r9
   1bbca:	dc1a      	bgt.n	1bc02 <strtol+0xac>
			any = -1;
		} else {
			any = 1;
   1bbcc:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1bbce:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1bbd2:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1bbd6:	e7eb      	b.n	1bbb0 <strtol+0x5a>
{
   1bbd8:	4625      	mov	r5, r4
   1bbda:	e7c1      	b.n	1bb60 <strtol+0xa>
	} else if (c == '+') {
   1bbdc:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1bbde:	bf04      	itt	eq
   1bbe0:	1cac      	addeq	r4, r5, #2
   1bbe2:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   1bbe4:	2100      	movs	r1, #0
   1bbe6:	e7c9      	b.n	1bb7c <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1bbe8:	f043 0520 	orr.w	r5, r3, #32
   1bbec:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1bbee:	2d19      	cmp	r5, #25
   1bbf0:	d80a      	bhi.n	1bc08 <strtol+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1bbf2:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1bbf6:	2d1a      	cmp	r5, #26
   1bbf8:	bf34      	ite	cc
   1bbfa:	2537      	movcc	r5, #55	; 0x37
   1bbfc:	2557      	movcs	r5, #87	; 0x57
   1bbfe:	1b5b      	subs	r3, r3, r5
   1bc00:	e7db      	b.n	1bbba <strtol+0x64>
			any = -1;
   1bc02:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1bc06:	e7e4      	b.n	1bbd2 <strtol+0x7c>
		}
	}

	if (any < 0) {
   1bc08:	1c73      	adds	r3, r6, #1
   1bc0a:	d107      	bne.n	1bc1c <strtol+0xc6>
   1bc0c:	f7fd fb40 	bl	19290 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1bc10:	2326      	movs	r3, #38	; 0x26
   1bc12:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1bc14:	4640      	mov	r0, r8
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1bc16:	b937      	cbnz	r7, 1bc26 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1bc18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1bc1c:	b101      	cbz	r1, 1bc20 <strtol+0xca>
		acc = -acc;
   1bc1e:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1bc20:	2f00      	cmp	r7, #0
   1bc22:	d0f9      	beq.n	1bc18 <strtol+0xc2>
		*endptr = (char *)(any ? s - 1 : nptr);
   1bc24:	b10e      	cbz	r6, 1bc2a <strtol+0xd4>
   1bc26:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   1bc2a:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   1bc2e:	e7f3      	b.n	1bc18 <strtol+0xc2>
	if (base == 0) {
   1bc30:	2330      	movs	r3, #48	; 0x30
   1bc32:	2a00      	cmp	r2, #0
   1bc34:	d1b0      	bne.n	1bb98 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1bc36:	2208      	movs	r2, #8
   1bc38:	e7ae      	b.n	1bb98 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1bc3a:	2b30      	cmp	r3, #48	; 0x30
   1bc3c:	d0a4      	beq.n	1bb88 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1bc3e:	220a      	movs	r2, #10
   1bc40:	e7aa      	b.n	1bb98 <strtol+0x42>

0001bc42 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   1bc42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bc46:	4684      	mov	ip, r0
   1bc48:	460f      	mov	r7, r1
	register const char *s = nptr;
   1bc4a:	4605      	mov	r5, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   1bc4c:	462c      	mov	r4, r5
   1bc4e:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1bc52:	2b20      	cmp	r3, #32
   1bc54:	d035      	beq.n	1bcc2 <strtoul+0x80>
   1bc56:	f1a3 0109 	sub.w	r1, r3, #9
   1bc5a:	2904      	cmp	r1, #4
   1bc5c:	d931      	bls.n	1bcc2 <strtoul+0x80>
	} while (isspace(c));
	if (c == '-') {
   1bc5e:	2b2d      	cmp	r3, #45	; 0x2d
   1bc60:	d131      	bne.n	1bcc6 <strtoul+0x84>
		neg = 1;
   1bc62:	f04f 0e01 	mov.w	lr, #1
		c = *s++;
   1bc66:	786b      	ldrb	r3, [r5, #1]
   1bc68:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1bc6a:	2a00      	cmp	r2, #0
   1bc6c:	d05e      	beq.n	1bd2c <strtoul+0xea>
   1bc6e:	2a10      	cmp	r2, #16
   1bc70:	d109      	bne.n	1bc86 <strtoul+0x44>
   1bc72:	2b30      	cmp	r3, #48	; 0x30
   1bc74:	d107      	bne.n	1bc86 <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1bc76:	7823      	ldrb	r3, [r4, #0]
   1bc78:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1bc7c:	2b58      	cmp	r3, #88	; 0x58
   1bc7e:	d150      	bne.n	1bd22 <strtoul+0xe0>
		c = s[1];
		s += 2;
		base = 16;
   1bc80:	2210      	movs	r2, #16
		c = s[1];
   1bc82:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1bc84:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   1bc86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1bc8a:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1bc8e:	2600      	movs	r6, #0
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   1bc90:	fb02 f801 	mul.w	r8, r2, r1
	for (acc = 0, any = 0;; c = *s++) {
   1bc94:	4630      	mov	r0, r6
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   1bc96:	ea6f 0808 	mvn.w	r8, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1bc9a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1bc9e:	2d09      	cmp	r5, #9
   1bca0:	d818      	bhi.n	1bcd4 <strtoul+0x92>
			c -= '0';
   1bca2:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1bca4:	429a      	cmp	r2, r3
   1bca6:	dd25      	ble.n	1bcf4 <strtoul+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1bca8:	2e00      	cmp	r6, #0
   1bcaa:	db20      	blt.n	1bcee <strtoul+0xac>
   1bcac:	4288      	cmp	r0, r1
   1bcae:	d81e      	bhi.n	1bcee <strtoul+0xac>
   1bcb0:	d101      	bne.n	1bcb6 <strtoul+0x74>
   1bcb2:	4543      	cmp	r3, r8
   1bcb4:	dc1b      	bgt.n	1bcee <strtoul+0xac>
			any = -1;
		} else {
			any = 1;
   1bcb6:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1bcb8:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1bcbc:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1bcc0:	e7eb      	b.n	1bc9a <strtoul+0x58>
{
   1bcc2:	4625      	mov	r5, r4
   1bcc4:	e7c2      	b.n	1bc4c <strtoul+0xa>
	} else if (c == '+') {
   1bcc6:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1bcc8:	bf04      	itt	eq
   1bcca:	1cac      	addeq	r4, r5, #2
   1bccc:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   1bcce:	f04f 0e00 	mov.w	lr, #0
   1bcd2:	e7ca      	b.n	1bc6a <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1bcd4:	f043 0520 	orr.w	r5, r3, #32
   1bcd8:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1bcda:	2d19      	cmp	r5, #25
   1bcdc:	d80a      	bhi.n	1bcf4 <strtoul+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1bcde:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1bce2:	2d1a      	cmp	r5, #26
   1bce4:	bf34      	ite	cc
   1bce6:	2537      	movcc	r5, #55	; 0x37
   1bce8:	2557      	movcs	r5, #87	; 0x57
   1bcea:	1b5b      	subs	r3, r3, r5
   1bcec:	e7da      	b.n	1bca4 <strtoul+0x62>
			any = -1;
   1bcee:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1bcf2:	e7e3      	b.n	1bcbc <strtoul+0x7a>
		}
	}
	if (any < 0) {
   1bcf4:	2e00      	cmp	r6, #0
   1bcf6:	da08      	bge.n	1bd0a <strtoul+0xc8>
   1bcf8:	f7fd faca 	bl	19290 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   1bcfc:	2326      	movs	r3, #38	; 0x26
   1bcfe:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   1bd00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   1bd04:	b947      	cbnz	r7, 1bd18 <strtoul+0xd6>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1bd06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   1bd0a:	f1be 0f00 	cmp.w	lr, #0
   1bd0e:	d000      	beq.n	1bd12 <strtoul+0xd0>
		acc = -acc;
   1bd10:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1bd12:	2f00      	cmp	r7, #0
   1bd14:	d0f7      	beq.n	1bd06 <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   1bd16:	b10e      	cbz	r6, 1bd1c <strtoul+0xda>
   1bd18:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   1bd1c:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   1bd20:	e7f1      	b.n	1bd06 <strtoul+0xc4>
	if (base == 0) {
   1bd22:	2330      	movs	r3, #48	; 0x30
   1bd24:	2a00      	cmp	r2, #0
   1bd26:	d1ae      	bne.n	1bc86 <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   1bd28:	2208      	movs	r2, #8
   1bd2a:	e7ac      	b.n	1bc86 <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   1bd2c:	2b30      	cmp	r3, #48	; 0x30
   1bd2e:	d0a2      	beq.n	1bc76 <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   1bd30:	220a      	movs	r2, #10
   1bd32:	e7a8      	b.n	1bc86 <strtoul+0x44>

0001bd34 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   1bd34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   1bd38:	780f      	ldrb	r7, [r1, #0]
{
   1bd3a:	4605      	mov	r5, r0
	if (c != 0) {
   1bd3c:	b187      	cbz	r7, 1bd60 <strstr+0x2c>
	c = *find++;
   1bd3e:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   1bd40:	4620      	mov	r0, r4
   1bd42:	f000 f835 	bl	1bdb0 <strlen>
   1bd46:	4680      	mov	r8, r0
		do {
			do {
				sc = *s++;
   1bd48:	462e      	mov	r6, r5
   1bd4a:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   1bd4e:	b163      	cbz	r3, 1bd6a <strstr+0x36>
					return NULL;
				}
			} while (sc != c);
   1bd50:	429f      	cmp	r7, r3
   1bd52:	d108      	bne.n	1bd66 <strstr+0x32>
		} while (strncmp(s, find, len) != 0);
   1bd54:	4642      	mov	r2, r8
   1bd56:	4621      	mov	r1, r4
   1bd58:	4630      	mov	r0, r6
   1bd5a:	f000 f83c 	bl	1bdd6 <strncmp>
   1bd5e:	b910      	cbnz	r0, 1bd66 <strstr+0x32>
	s--;
	}
	return (char *)s;
}
   1bd60:	4628      	mov	r0, r5
   1bd62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   1bd66:	4635      	mov	r5, r6
   1bd68:	e7ee      	b.n	1bd48 <strstr+0x14>
					return NULL;
   1bd6a:	461d      	mov	r5, r3
   1bd6c:	e7f8      	b.n	1bd60 <strstr+0x2c>

0001bd6e <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1bd6e:	b570      	push	{r4, r5, r6, lr}
   1bd70:	4605      	mov	r5, r0
   1bd72:	3901      	subs	r1, #1
   1bd74:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1bd76:	b142      	cbz	r2, 1bd8a <strncpy+0x1c>
   1bd78:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1bd7c:	1e56      	subs	r6, r2, #1
   1bd7e:	b92b      	cbnz	r3, 1bd8c <strncpy+0x1e>
   1bd80:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   1bd82:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   1bd86:	42a2      	cmp	r2, r4
   1bd88:	d1fb      	bne.n	1bd82 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   1bd8a:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   1bd8c:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   1bd90:	4632      	mov	r2, r6
   1bd92:	e7ef      	b.n	1bd74 <strncpy+0x6>

0001bd94 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   1bd94:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   1bd96:	7802      	ldrb	r2, [r0, #0]
   1bd98:	4603      	mov	r3, r0
   1bd9a:	428a      	cmp	r2, r1
   1bd9c:	f100 0001 	add.w	r0, r0, #1
   1bda0:	d004      	beq.n	1bdac <strchr+0x18>
   1bda2:	2a00      	cmp	r2, #0
   1bda4:	d1f7      	bne.n	1bd96 <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   1bda6:	2900      	cmp	r1, #0
   1bda8:	bf18      	it	ne
   1bdaa:	2300      	movne	r3, #0
}
   1bdac:	4618      	mov	r0, r3
   1bdae:	4770      	bx	lr

0001bdb0 <strlen>:
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
	size_t n = 0;
   1bdb0:	2300      	movs	r3, #0

	while (*s != '\0') {
   1bdb2:	5cc2      	ldrb	r2, [r0, r3]
   1bdb4:	b90a      	cbnz	r2, 1bdba <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1bdb6:	4618      	mov	r0, r3
   1bdb8:	4770      	bx	lr
		n++;
   1bdba:	3301      	adds	r3, #1
   1bdbc:	e7f9      	b.n	1bdb2 <strlen+0x2>

0001bdbe <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1bdbe:	3801      	subs	r0, #1
   1bdc0:	3901      	subs	r1, #1
   1bdc2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1bdc6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1bdca:	4293      	cmp	r3, r2
   1bdcc:	d101      	bne.n	1bdd2 <strcmp+0x14>
   1bdce:	2b00      	cmp	r3, #0
   1bdd0:	d1f7      	bne.n	1bdc2 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1bdd2:	1a98      	subs	r0, r3, r2
   1bdd4:	4770      	bx	lr

0001bdd6 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1bdd6:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1bdd8:	2400      	movs	r4, #0
   1bdda:	42a2      	cmp	r2, r4
   1bddc:	d008      	beq.n	1bdf0 <strncmp+0x1a>
   1bdde:	5d03      	ldrb	r3, [r0, r4]
   1bde0:	5d0d      	ldrb	r5, [r1, r4]
   1bde2:	42ab      	cmp	r3, r5
   1bde4:	d102      	bne.n	1bdec <strncmp+0x16>
   1bde6:	3401      	adds	r4, #1
   1bde8:	2b00      	cmp	r3, #0
   1bdea:	d1f6      	bne.n	1bdda <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1bdec:	1b58      	subs	r0, r3, r5
   1bdee:	e000      	b.n	1bdf2 <strncmp+0x1c>
   1bdf0:	2000      	movs	r0, #0
}
   1bdf2:	bd30      	pop	{r4, r5, pc}

0001bdf4 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1bdf4:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1bdf6:	b15a      	cbz	r2, 1be10 <memcmp+0x1c>
   1bdf8:	3901      	subs	r1, #1
   1bdfa:	1884      	adds	r4, r0, r2
   1bdfc:	f810 2b01 	ldrb.w	r2, [r0], #1
   1be00:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1be04:	42a0      	cmp	r0, r4
   1be06:	d001      	beq.n	1be0c <memcmp+0x18>
   1be08:	429a      	cmp	r2, r3
   1be0a:	d0f7      	beq.n	1bdfc <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1be0c:	1ad0      	subs	r0, r2, r3
}
   1be0e:	bd10      	pop	{r4, pc}
		return 0;
   1be10:	4610      	mov	r0, r2
   1be12:	e7fc      	b.n	1be0e <memcmp+0x1a>

0001be14 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1be14:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1be16:	ea81 0400 	eor.w	r4, r1, r0
   1be1a:	07a5      	lsls	r5, r4, #30
   1be1c:	4603      	mov	r3, r0
   1be1e:	d00b      	beq.n	1be38 <memcpy+0x24>
   1be20:	3b01      	subs	r3, #1
   1be22:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1be24:	4291      	cmp	r1, r2
   1be26:	d11a      	bne.n	1be5e <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1be28:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1be2a:	2a00      	cmp	r2, #0
   1be2c:	d0fc      	beq.n	1be28 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1be2e:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1be32:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1be34:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   1be38:	079c      	lsls	r4, r3, #30
   1be3a:	d1f6      	bne.n	1be2a <memcpy+0x16>
   1be3c:	0895      	lsrs	r5, r2, #2
   1be3e:	00ac      	lsls	r4, r5, #2
   1be40:	1f1e      	subs	r6, r3, #4
   1be42:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1be44:	42b9      	cmp	r1, r7
   1be46:	d105      	bne.n	1be54 <memcpy+0x40>
   1be48:	f06f 0603 	mvn.w	r6, #3
   1be4c:	4423      	add	r3, r4
   1be4e:	fb06 2205 	mla	r2, r6, r5, r2
   1be52:	e7e5      	b.n	1be20 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1be54:	f851 cb04 	ldr.w	ip, [r1], #4
   1be58:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
   1be5c:	e7f2      	b.n	1be44 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
   1be5e:	f811 4b01 	ldrb.w	r4, [r1], #1
   1be62:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1be66:	e7dd      	b.n	1be24 <memcpy+0x10>

0001be68 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1be68:	4603      	mov	r3, r0
{
   1be6a:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   1be6c:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1be6e:	079c      	lsls	r4, r3, #30
   1be70:	d110      	bne.n	1be94 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1be72:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1be76:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1be7a:	0894      	lsrs	r4, r2, #2
   1be7c:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   1be80:	42b3      	cmp	r3, r6
   1be82:	d10d      	bne.n	1bea0 <memset+0x38>
   1be84:	f06f 0503 	mvn.w	r5, #3
   1be88:	fb05 2404 	mla	r4, r5, r4, r2
   1be8c:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1be8e:	42a3      	cmp	r3, r4
   1be90:	d109      	bne.n	1bea6 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1be92:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1be94:	2a00      	cmp	r2, #0
   1be96:	d0fc      	beq.n	1be92 <memset+0x2a>
		*(d_byte++) = c_byte;
   1be98:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1be9c:	3a01      	subs	r2, #1
   1be9e:	e7e6      	b.n	1be6e <memset+0x6>
		*(d_word++) = c_word;
   1bea0:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   1bea4:	e7ec      	b.n	1be80 <memset+0x18>
		*(d_byte++) = c_byte;
   1bea6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1beaa:	e7f0      	b.n	1be8e <memset+0x26>

0001beac <_to_x>:
{
   1beac:	4603      	mov	r3, r0
   1beae:	b5f0      	push	{r4, r5, r6, r7, lr}
		unsigned int d = n % base;
   1beb0:	fbb1 f7f2 	udiv	r7, r1, r2
   1beb4:	fb02 1517 	mls	r5, r2, r7, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1beb8:	2d09      	cmp	r5, #9
   1beba:	bf8c      	ite	hi
   1bebc:	2627      	movhi	r6, #39	; 0x27
   1bebe:	2600      	movls	r6, #0
   1bec0:	461c      	mov	r4, r3
   1bec2:	3530      	adds	r5, #48	; 0x30
   1bec4:	4435      	add	r5, r6
	} while (n);
   1bec6:	4291      	cmp	r1, r2
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1bec8:	f804 5b01 	strb.w	r5, [r4], #1
	} while (n);
   1becc:	d206      	bcs.n	1bedc <_to_x+0x30>
	*buf = 0;
   1bece:	2200      	movs	r2, #0
   1bed0:	7022      	strb	r2, [r4, #0]
	len = buf - start;
   1bed2:	1a24      	subs	r4, r4, r0
	for (buf--; buf > start; buf--, start++) {
   1bed4:	4283      	cmp	r3, r0
   1bed6:	d804      	bhi.n	1bee2 <_to_x+0x36>
}
   1bed8:	4620      	mov	r0, r4
   1beda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n /= base;
   1bedc:	4639      	mov	r1, r7
   1bede:	4623      	mov	r3, r4
   1bee0:	e7e6      	b.n	1beb0 <_to_x+0x4>
		char tmp = *buf;
   1bee2:	781a      	ldrb	r2, [r3, #0]
		*buf = *start;
   1bee4:	7801      	ldrb	r1, [r0, #0]
   1bee6:	f803 1901 	strb.w	r1, [r3], #-1
		*start = tmp;
   1beea:	f800 2b01 	strb.w	r2, [r0], #1
   1beee:	e7f1      	b.n	1bed4 <_to_x+0x28>

0001bef0 <_rlrshift>:
	*v = (*v & 1) + (*v >> 1);
   1bef0:	2100      	movs	r1, #0
{
   1bef2:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
   1bef4:	e9d0 6500 	ldrd	r6, r5, [r0]
   1bef8:	0872      	lsrs	r2, r6, #1
   1befa:	f006 0301 	and.w	r3, r6, #1
   1befe:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   1bf02:	189b      	adds	r3, r3, r2
   1bf04:	ea4f 0455 	mov.w	r4, r5, lsr #1
   1bf08:	eb44 0101 	adc.w	r1, r4, r1
   1bf0c:	e9c0 3100 	strd	r3, r1, [r0]
}
   1bf10:	bd70      	pop	{r4, r5, r6, pc}

0001bf12 <_ldiv5>:
{
   1bf12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint64_t rem = *v, quot = 0U, q;
   1bf16:	e9d0 3200 	ldrd	r3, r2, [r0]
		q = (uint64_t)(hi / 5U) << shifts[i];
   1bf1a:	2705      	movs	r7, #5
	rem += 2U;
   1bf1c:	3302      	adds	r3, #2
   1bf1e:	f142 0200 	adc.w	r2, r2, #0
		q = (uint64_t)(hi / 5U) << shifts[i];
   1bf22:	fbb2 fef7 	udiv	lr, r2, r7
   1bf26:	f04f 0c00 	mov.w	ip, #0
		rem -= q * 5U;
   1bf2a:	fb07 f10e 	mul.w	r1, r7, lr
   1bf2e:	ebb3 060c 	subs.w	r6, r3, ip
   1bf32:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
   1bf36:	08f2      	lsrs	r2, r6, #3
   1bf38:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
   1bf3c:	fbb2 f1f7 	udiv	r1, r2, r7
   1bf40:	00ca      	lsls	r2, r1, #3
		quot += q;
   1bf42:	eb1c 0802 	adds.w	r8, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1bf46:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
   1bf4a:	eb4e 0903 	adc.w	r9, lr, r3
		rem -= q * 5U;
   1bf4e:	fba2 2307 	umull	r2, r3, r2, r7
   1bf52:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1bf54:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
   1bf58:	eb18 0403 	adds.w	r4, r8, r3
   1bf5c:	f149 0500 	adc.w	r5, r9, #0
	*v = quot;
   1bf60:	e9c0 4500 	strd	r4, r5, [r0]
}
   1bf64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001bf68 <_get_digit>:
	if (*digit_count > 0) {
   1bf68:	680b      	ldr	r3, [r1, #0]
{
   1bf6a:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   1bf6c:	2b00      	cmp	r3, #0
   1bf6e:	dd10      	ble.n	1bf92 <_get_digit+0x2a>
		*digit_count -= 1;
   1bf70:	3b01      	subs	r3, #1
   1bf72:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
   1bf74:	210a      	movs	r1, #10
   1bf76:	6802      	ldr	r2, [r0, #0]
   1bf78:	6844      	ldr	r4, [r0, #4]
   1bf7a:	fba2 5601 	umull	r5, r6, r2, r1
   1bf7e:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   1bf82:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   1bf86:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   1bf8a:	0f31      	lsrs	r1, r6, #28
   1bf8c:	3130      	adds	r1, #48	; 0x30
}
   1bf8e:	4608      	mov	r0, r1
   1bf90:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   1bf92:	2130      	movs	r1, #48	; 0x30
   1bf94:	e7fb      	b.n	1bf8e <_get_digit+0x26>

0001bf96 <_stdout_hook_default>:
}
   1bf96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bf9a:	4770      	bx	lr

0001bf9c <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   1bf9c:	684b      	ldr	r3, [r1, #4]
   1bf9e:	2b01      	cmp	r3, #1
   1bfa0:	dd07      	ble.n	1bfb2 <sprintf_out+0x16>
		*(p->ptr) = c;
   1bfa2:	680b      	ldr	r3, [r1, #0]
   1bfa4:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   1bfa6:	680b      	ldr	r3, [r1, #0]
   1bfa8:	3301      	adds	r3, #1
   1bfaa:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   1bfac:	684b      	ldr	r3, [r1, #4]
   1bfae:	3b01      	subs	r3, #1
   1bfb0:	604b      	str	r3, [r1, #4]
}
   1bfb2:	2000      	movs	r0, #0
   1bfb4:	4770      	bx	lr

0001bfb6 <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   1bfb6:	b508      	push	{r3, lr}
	net_if_init();
   1bfb8:	f7f2 fffe 	bl	efb8 <net_if_init>
	net_if_post_init();
   1bfbc:	f7f3 f810 	bl	efe0 <net_if_post_init>
	net_coap_init();
   1bfc0:	f7f1 fa2e 	bl	d420 <net_coap_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   1bfc4:	2000      	movs	r0, #0
   1bfc6:	bd08      	pop	{r3, pc}

0001bfc8 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   1bfc8:	b110      	cbz	r0, 1bfd0 <net_if_l2+0x8>
   1bfca:	6800      	ldr	r0, [r0, #0]
   1bfcc:	b100      	cbz	r0, 1bfd0 <net_if_l2+0x8>
	return iface->if_dev->l2;
   1bfce:	6840      	ldr	r0, [r0, #4]
}
   1bfd0:	4770      	bx	lr

0001bfd2 <l2_flags_get>:
{
   1bfd2:	b510      	push	{r4, lr}
   1bfd4:	4602      	mov	r2, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   1bfd6:	f7ff fff7 	bl	1bfc8 <net_if_l2>
   1bfda:	b128      	cbz	r0, 1bfe8 <l2_flags_get+0x16>
   1bfdc:	68c3      	ldr	r3, [r0, #12]
   1bfde:	b11b      	cbz	r3, 1bfe8 <l2_flags_get+0x16>
}
   1bfe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   1bfe4:	4610      	mov	r0, r2
   1bfe6:	4718      	bx	r3
}
   1bfe8:	2000      	movs	r0, #0
   1bfea:	bd10      	pop	{r4, pc}

0001bfec <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bfec:	e8d0 0faf 	lda	r0, [r0]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1bff0:	4108      	asrs	r0, r1
}
   1bff2:	f000 0001 	and.w	r0, r0, #1
   1bff6:	4770      	bx	lr

0001bff8 <net_if_up>:
{
   1bff8:	b510      	push	{r4, lr}
   1bffa:	4604      	mov	r4, r0
	return atomic_test_bit(iface->if_dev->flags, value);
   1bffc:	6800      	ldr	r0, [r0, #0]
   1bffe:	2100      	movs	r1, #0
   1c000:	300c      	adds	r0, #12
   1c002:	f7ff fff3 	bl	1bfec <atomic_test_bit>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1c006:	b9e8      	cbnz	r0, 1c044 <net_if_up+0x4c>
	     net_if_is_socket_offloaded(iface))) {
   1c008:	6823      	ldr	r3, [r4, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1c00a:	7e9a      	ldrb	r2, [r3, #26]
   1c00c:	b14a      	cbz	r2, 1c022 <net_if_up+0x2a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c00e:	330c      	adds	r3, #12
   1c010:	e8d3 2fef 	ldaex	r2, [r3]
   1c014:	f042 0201 	orr.w	r2, r2, #1
   1c018:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1c01c:	2900      	cmp	r1, #0
   1c01e:	d1f7      	bne.n	1c010 <net_if_up+0x18>
}
   1c020:	bd10      	pop	{r4, pc}
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1c022:	4620      	mov	r0, r4
   1c024:	f7ff ffd0 	bl	1bfc8 <net_if_l2>
   1c028:	b970      	cbnz	r0, 1c048 <net_if_up+0x50>
   1c02a:	6823      	ldr	r3, [r4, #0]
   1c02c:	330c      	adds	r3, #12
   1c02e:	e8d3 2fef 	ldaex	r2, [r3]
   1c032:	f042 0201 	orr.w	r2, r2, #1
   1c036:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1c03a:	2900      	cmp	r1, #0
   1c03c:	d1f7      	bne.n	1c02e <net_if_up+0x36>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   1c03e:	4620      	mov	r0, r4
   1c040:	f7ff ffc7 	bl	1bfd2 <l2_flags_get>
		return 0;
   1c044:	2000      	movs	r0, #0
   1c046:	e7eb      	b.n	1c020 <net_if_up+0x28>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1c048:	6883      	ldr	r3, [r0, #8]
   1c04a:	2b00      	cmp	r3, #0
   1c04c:	d0ed      	beq.n	1c02a <net_if_up+0x32>
	status = net_if_l2(iface)->enable(iface, true);
   1c04e:	2101      	movs	r1, #1
   1c050:	4620      	mov	r0, r4
   1c052:	4798      	blx	r3
	if (status < 0) {
   1c054:	2800      	cmp	r0, #0
   1c056:	dae8      	bge.n	1c02a <net_if_up+0x32>
   1c058:	e7e2      	b.n	1c020 <net_if_up+0x28>

0001c05a <net_byte_to_hex>:
{
   1c05a:	b570      	push	{r4, r5, r6, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1c05c:	090e      	lsrs	r6, r1, #4
		if (i == 0 && !pad && !val) {
   1c05e:	b1b3      	cbz	r3, 1c08e <net_byte_to_hex+0x34>
		if (val < 10) {
   1c060:	2e09      	cmp	r6, #9
			*ptr++ = (char) (val - 10 + base);
   1c062:	b274      	sxtb	r4, r6
   1c064:	bf86      	itte	hi
   1c066:	f1a2 030a 	subhi.w	r3, r2, #10
   1c06a:	18e4      	addhi	r4, r4, r3
			*ptr++ = (char) (val + '0');
   1c06c:	3430      	addls	r4, #48	; 0x30
   1c06e:	1c45      	adds	r5, r0, #1
   1c070:	7004      	strb	r4, [r0, #0]
   1c072:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
   1c076:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
   1c078:	b24b      	sxtb	r3, r1
   1c07a:	bf83      	ittte	hi
   1c07c:	3a0a      	subhi	r2, #10
   1c07e:	189b      	addhi	r3, r3, r2
   1c080:	b2db      	uxtbhi	r3, r3
			*ptr++ = (char) (val + '0');
   1c082:	3330      	addls	r3, #48	; 0x30
   1c084:	702b      	strb	r3, [r5, #0]
	*ptr = '\0';
   1c086:	2300      	movs	r3, #0
   1c088:	706b      	strb	r3, [r5, #1]
   1c08a:	1c68      	adds	r0, r5, #1
}
   1c08c:	bd70      	pop	{r4, r5, r6, pc}
		if (i == 0 && !pad && !val) {
   1c08e:	2e00      	cmp	r6, #0
   1c090:	d1e6      	bne.n	1c060 <net_byte_to_hex+0x6>
   1c092:	4605      	mov	r5, r0
   1c094:	e7ed      	b.n	1c072 <net_byte_to_hex+0x18>

0001c096 <gpio_nrfx_write>:
{
   1c096:	b510      	push	{r4, lr}
	return port->config->config_info;
   1c098:	6804      	ldr	r4, [r0, #0]
   1c09a:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c09c:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1c09e:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c0a0:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1c0a2:	69c0      	ldr	r0, [r0, #28]
   1c0a4:	d103      	bne.n	1c0ae <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   1c0a6:	4058      	eors	r0, r3
    p_reg->OUT = value;
   1c0a8:	6060      	str	r0, [r4, #4]
}
   1c0aa:	2000      	movs	r0, #0
   1c0ac:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   1c0ae:	3300      	adds	r3, #0
   1c0b0:	f04f 0101 	mov.w	r1, #1
   1c0b4:	bf18      	it	ne
   1c0b6:	2301      	movne	r3, #1
   1c0b8:	40d0      	lsrs	r0, r2
   1c0ba:	f000 0001 	and.w	r0, r0, #1
   1c0be:	4091      	lsls	r1, r2
   1c0c0:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   1c0c2:	bf14      	ite	ne
   1c0c4:	60a1      	strne	r1, [r4, #8]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   1c0c6:	60e1      	streq	r1, [r4, #12]
   1c0c8:	e7ef      	b.n	1c0aa <gpio_nrfx_write+0x14>

0001c0ca <gpio_nrfx_read>:
{
   1c0ca:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   1c0cc:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1c0ce:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c0d0:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1c0d2:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c0d4:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1c0d6:	2901      	cmp	r1, #1
    return p_reg->DIR;
   1c0d8:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   1c0da:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   1c0dc:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1c0de:	ea80 0004 	eor.w	r0, r0, r4
   1c0e2:	ea84 0405 	eor.w	r4, r4, r5
   1c0e6:	ea04 0406 	and.w	r4, r4, r6
   1c0ea:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   1c0ee:	bf1c      	itt	ne
   1c0f0:	40d0      	lsrne	r0, r2
   1c0f2:	f000 0001 	andne.w	r0, r0, #1
   1c0f6:	6018      	str	r0, [r3, #0]
}
   1c0f8:	2000      	movs	r0, #0
   1c0fa:	bd70      	pop	{r4, r5, r6, pc}

0001c0fc <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1c0fc:	6883      	ldr	r3, [r0, #8]
{
   1c0fe:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   1c100:	6818      	ldr	r0, [r3, #0]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   1c102:	b158      	cbz	r0, 1c11c <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c104:	2400      	movs	r4, #0
   1c106:	4281      	cmp	r1, r0
   1c108:	d113      	bne.n	1c132 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1c10a:	6808      	ldr	r0, [r1, #0]
   1c10c:	b95c      	cbnz	r4, 1c126 <gpio_nrfx_manage_callback+0x2a>
   1c10e:	685c      	ldr	r4, [r3, #4]
	list->head = node;
   1c110:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c112:	42a1      	cmp	r1, r4
   1c114:	d100      	bne.n	1c118 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1c116:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1c118:	2000      	movs	r0, #0
   1c11a:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1c11c:	b972      	cbnz	r2, 1c13c <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1c11e:	2000      	movs	r0, #0
}
   1c120:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c122:	4628      	mov	r0, r5
   1c124:	e7ef      	b.n	1c106 <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
   1c126:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c128:	6858      	ldr	r0, [r3, #4]
   1c12a:	4281      	cmp	r1, r0
	list->tail = node;
   1c12c:	bf08      	it	eq
   1c12e:	605c      	streq	r4, [r3, #4]
   1c130:	e7f2      	b.n	1c118 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c132:	6805      	ldr	r5, [r0, #0]
	return node->next;
   1c134:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c136:	2d00      	cmp	r5, #0
   1c138:	d1f3      	bne.n	1c122 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1c13a:	b13a      	cbz	r2, 1c14c <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1c13c:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   1c13e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c140:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   1c142:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c144:	2800      	cmp	r0, #0
   1c146:	d1ea      	bne.n	1c11e <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1c148:	6059      	str	r1, [r3, #4]
   1c14a:	e7e9      	b.n	1c120 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1c14c:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1c150:	e7e6      	b.n	1c120 <gpio_nrfx_manage_callback+0x24>

0001c152 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1c152:	2901      	cmp	r1, #1
{
   1c154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   1c158:	bf18      	it	ne
   1c15a:	b2d4      	uxtbne	r4, r2
{
   1c15c:	4606      	mov	r6, r0
		to_pin   = pin;
   1c15e:	bf12      	itee	ne
   1c160:	4625      	movne	r5, r4
		to_pin   = 31U;
   1c162:	251f      	moveq	r5, #31
		from_pin = 0U;
   1c164:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   1c166:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   1c16a:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1c16c:	42ac      	cmp	r4, r5
   1c16e:	d902      	bls.n	1c176 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   1c170:	2000      	movs	r0, #0
}
   1c172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   1c176:	68fb      	ldr	r3, [r7, #12]
   1c178:	fa08 f204 	lsl.w	r2, r8, r4
   1c17c:	ea23 0302 	bic.w	r3, r3, r2
   1c180:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1c182:	4621      	mov	r1, r4
   1c184:	4630      	mov	r0, r6
   1c186:	f7f3 f84d 	bl	f224 <gpiote_pin_int_cfg>
		if (res != 0) {
   1c18a:	2800      	cmp	r0, #0
   1c18c:	d1f1      	bne.n	1c172 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1c18e:	3401      	adds	r4, #1
   1c190:	b2e4      	uxtb	r4, r4
   1c192:	e7eb      	b.n	1c16c <gpio_nrfx_pin_disable_callback+0x1a>

0001c194 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1c194:	2901      	cmp	r1, #1
{
   1c196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   1c19a:	bf18      	it	ne
   1c19c:	b2d4      	uxtbne	r4, r2
{
   1c19e:	4606      	mov	r6, r0
		to_pin   = pin;
   1c1a0:	bf12      	itee	ne
   1c1a2:	4625      	movne	r5, r4
		to_pin   = 31U;
   1c1a4:	251f      	moveq	r5, #31
		from_pin = 0U;
   1c1a6:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   1c1a8:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   1c1ac:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1c1ae:	42ac      	cmp	r4, r5
   1c1b0:	d902      	bls.n	1c1b8 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   1c1b2:	2000      	movs	r0, #0
}
   1c1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   1c1b8:	68fb      	ldr	r3, [r7, #12]
   1c1ba:	fa08 f204 	lsl.w	r2, r8, r4
   1c1be:	4313      	orrs	r3, r2
   1c1c0:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1c1c2:	4621      	mov	r1, r4
   1c1c4:	4630      	mov	r0, r6
   1c1c6:	f7f3 f82d 	bl	f224 <gpiote_pin_int_cfg>
		if (res != 0) {
   1c1ca:	2800      	cmp	r0, #0
   1c1cc:	d1f2      	bne.n	1c1b4 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1c1ce:	3401      	adds	r4, #1
   1c1d0:	b2e4      	uxtb	r4, r4
   1c1d2:	e7ec      	b.n	1c1ae <gpio_nrfx_pin_enable_callback+0x1a>

0001c1d4 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   1c1d4:	6882      	ldr	r2, [r0, #8]
	return dev->config->config_info;
   1c1d6:	6803      	ldr	r3, [r0, #0]
	if (data->int_driven->disable_tx_irq &&
   1c1d8:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   1c1da:	689b      	ldr	r3, [r3, #8]
	if (data->int_driven->disable_tx_irq &&
   1c1dc:	7b91      	ldrb	r1, [r2, #14]
	return config->uarte_regs;
   1c1de:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   1c1e0:	b159      	cbz	r1, 1c1fa <uarte_nrfx_isr_int+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c1e2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1c1e6:	b141      	cbz	r1, 1c1fa <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   1c1e8:	f44f 7180 	mov.w	r1, #256	; 0x100
   1c1ec:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c1f0:	2101      	movs	r1, #1
   1c1f2:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   1c1f4:	2300      	movs	r3, #0
   1c1f6:	7393      	strb	r3, [r2, #14]
		return;
   1c1f8:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c1fa:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1c1fe:	b111      	cbz	r1, 1c206 <uarte_nrfx_isr_int+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c200:	2100      	movs	r1, #0
   1c202:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   1c206:	6813      	ldr	r3, [r2, #0]
   1c208:	b10b      	cbz	r3, 1c20e <uarte_nrfx_isr_int+0x3a>
		data->int_driven->cb(data->int_driven->cb_data);
   1c20a:	6850      	ldr	r0, [r2, #4]
   1c20c:	4718      	bx	r3
}
   1c20e:	4770      	bx	lr

0001c210 <uarte_nrfx_config_get>:
{
   1c210:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1c212:	6882      	ldr	r2, [r0, #8]
   1c214:	e892 0003 	ldmia.w	r2, {r0, r1}
   1c218:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1c21c:	2000      	movs	r0, #0
   1c21e:	4770      	bx	lr

0001c220 <uarte_nrfx_err_check>:
	return dev->config->config_info;
   1c220:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1c222:	689b      	ldr	r3, [r3, #8]
   1c224:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1c226:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1c22a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1c22e:	4770      	bx	lr

0001c230 <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   1c230:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1c232:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   1c234:	689b      	ldr	r3, [r3, #8]
   1c236:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c238:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1c23c:	b138      	cbz	r0, 1c24e <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   1c23e:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c240:	2000      	movs	r0, #0
   1c242:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c244:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c246:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c24a:	601a      	str	r2, [r3, #0]
	return 0;
   1c24c:	4770      	bx	lr
		return -1;
   1c24e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1c252:	4770      	bx	lr

0001c254 <uarte_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c254:	2200      	movs	r2, #0
	return dev->config->config_info;
   1c256:	6803      	ldr	r3, [r0, #0]
{
   1c258:	b082      	sub	sp, #8
	return config->uarte_regs;
   1c25a:	689b      	ldr	r3, [r3, #8]
{
   1c25c:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   1c260:	681b      	ldr	r3, [r3, #0]
   1c262:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1c266:	f10d 0207 	add.w	r2, sp, #7
   1c26a:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1c26e:	2201      	movs	r2, #1
   1c270:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c274:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c276:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1c27a:	2900      	cmp	r1, #0
   1c27c:	d0fb      	beq.n	1c276 <uarte_nrfx_poll_out+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c27e:	60da      	str	r2, [r3, #12]
}
   1c280:	b002      	add	sp, #8
   1c282:	4770      	bx	lr

0001c284 <uarte_nrfx_fifo_fill>:
	return dev->config->config_info;
   1c284:	6803      	ldr	r3, [r0, #0]
{
   1c286:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   1c288:	689b      	ldr	r3, [r3, #8]
   1c28a:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c28c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1c290:	b1bb      	cbz	r3, 1c2c2 <uarte_nrfx_fifo_fill+0x3e>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1c292:	6885      	ldr	r5, [r0, #8]
	if (len > data->int_driven->tx_buff_size) {
   1c294:	68ab      	ldr	r3, [r5, #8]
   1c296:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c298:	2300      	movs	r3, #0
   1c29a:	4290      	cmp	r0, r2
   1c29c:	bfa8      	it	ge
   1c29e:	4610      	movge	r0, r2
   1c2a0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   1c2a4:	68aa      	ldr	r2, [r5, #8]
   1c2a6:	4283      	cmp	r3, r0
   1c2a8:	6892      	ldr	r2, [r2, #8]
   1c2aa:	db06      	blt.n	1c2ba <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c2ac:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1c2ae:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1c2b2:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c2b6:	60a3      	str	r3, [r4, #8]
}
   1c2b8:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   1c2ba:	5cce      	ldrb	r6, [r1, r3]
   1c2bc:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   1c2be:	3301      	adds	r3, #1
   1c2c0:	e7f0      	b.n	1c2a4 <uarte_nrfx_fifo_fill+0x20>
		return 0;
   1c2c2:	4618      	mov	r0, r3
   1c2c4:	e7f8      	b.n	1c2b8 <uarte_nrfx_fifo_fill+0x34>

0001c2c6 <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
   1c2c6:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1c2c8:	689b      	ldr	r3, [r3, #8]
   1c2ca:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c2cc:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1c2d0:	b143      	cbz	r3, 1c2e4 <uarte_nrfx_fifo_read+0x1e>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1c2d2:	6883      	ldr	r3, [r0, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c2d4:	2000      	movs	r0, #0
   1c2d6:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c2da:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   1c2dc:	7b1b      	ldrb	r3, [r3, #12]
   1c2de:	700b      	strb	r3, [r1, #0]
   1c2e0:	6010      	str	r0, [r2, #0]
   1c2e2:	4770      	bx	lr
	int num_rx = 0;
   1c2e4:	4618      	mov	r0, r3
}
   1c2e6:	4770      	bx	lr

0001c2e8 <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   1c2e8:	2100      	movs	r1, #0
	return dev->config->config_info;
   1c2ea:	6803      	ldr	r3, [r0, #0]
	data->int_driven->disable_tx_irq = false;
   1c2ec:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   1c2ee:	689b      	ldr	r3, [r3, #8]
	data->int_driven->disable_tx_irq = false;
   1c2f0:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   1c2f2:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   1c2f4:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   1c2f6:	f44f 7280 	mov.w	r2, #256	; 0x100
   1c2fa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1c2fe:	4770      	bx	lr

0001c300 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   1c300:	2201      	movs	r2, #1
   1c302:	6883      	ldr	r3, [r0, #8]
   1c304:	689b      	ldr	r3, [r3, #8]
   1c306:	739a      	strb	r2, [r3, #14]
}
   1c308:	4770      	bx	lr

0001c30a <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
   1c30a:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1c30c:	689b      	ldr	r3, [r3, #8]
   1c30e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c310:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   1c314:	b118      	cbz	r0, 1c31e <uarte_nrfx_irq_tx_ready_complete+0x14>
    return p_reg->INTENSET & mask;
   1c316:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   1c31a:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   1c31e:	4770      	bx	lr

0001c320 <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
   1c320:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1c322:	689b      	ldr	r3, [r3, #8]
   1c324:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c326:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1c32a:	3000      	adds	r0, #0
   1c32c:	bf18      	it	ne
   1c32e:	2001      	movne	r0, #1
   1c330:	4770      	bx	lr

0001c332 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   1c332:	2210      	movs	r2, #16
	return dev->config->config_info;
   1c334:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1c336:	689b      	ldr	r3, [r3, #8]
   1c338:	681b      	ldr	r3, [r3, #0]
   1c33a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1c33e:	4770      	bx	lr

0001c340 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   1c340:	2210      	movs	r2, #16
	return dev->config->config_info;
   1c342:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1c344:	689b      	ldr	r3, [r3, #8]
   1c346:	681b      	ldr	r3, [r3, #0]
   1c348:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1c34c:	4770      	bx	lr

0001c34e <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   1c34e:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   1c352:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1c354:	689b      	ldr	r3, [r3, #8]
   1c356:	681b      	ldr	r3, [r3, #0]
   1c358:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1c35c:	4770      	bx	lr

0001c35e <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   1c35e:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   1c362:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1c364:	689b      	ldr	r3, [r3, #8]
   1c366:	681b      	ldr	r3, [r3, #0]
   1c368:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1c36c:	4770      	bx	lr

0001c36e <uarte_nrfx_irq_update>:
}
   1c36e:	2001      	movs	r0, #1
   1c370:	4770      	bx	lr

0001c372 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   1c372:	6883      	ldr	r3, [r0, #8]
   1c374:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   1c376:	e9c3 1200 	strd	r1, r2, [r3]
}
   1c37a:	4770      	bx	lr

0001c37c <uarte_nrfx_irq_is_pending>:
{
   1c37c:	b508      	push	{r3, lr}
	return dev->config->config_info;
   1c37e:	6803      	ldr	r3, [r0, #0]
{
   1c380:	4602      	mov	r2, r0
	return config->uarte_regs;
   1c382:	689b      	ldr	r3, [r3, #8]
   1c384:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   1c386:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   1c38a:	05db      	lsls	r3, r3, #23
   1c38c:	d405      	bmi.n	1c39a <uarte_nrfx_irq_is_pending+0x1e>
   1c38e:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   1c392:	f010 0010 	ands.w	r0, r0, #16
   1c396:	d106      	bne.n	1c3a6 <uarte_nrfx_irq_is_pending+0x2a>
}
   1c398:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1c39a:	f7ff ffb6 	bl	1c30a <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   1c39e:	2800      	cmp	r0, #0
   1c3a0:	d0f5      	beq.n	1c38e <uarte_nrfx_irq_is_pending+0x12>
		||
   1c3a2:	2001      	movs	r0, #1
   1c3a4:	e7f8      	b.n	1c398 <uarte_nrfx_irq_is_pending+0x1c>
		 uarte_nrfx_irq_rx_ready(dev)));
   1c3a6:	4610      	mov	r0, r2
   1c3a8:	f7ff ffba 	bl	1c320 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1c3ac:	3000      	adds	r0, #0
   1c3ae:	bf18      	it	ne
   1c3b0:	2001      	movne	r0, #1
   1c3b2:	e7f1      	b.n	1c398 <uarte_nrfx_irq_is_pending+0x1c>

0001c3b4 <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   1c3b4:	2000      	movs	r0, #0
   1c3b6:	4770      	bx	lr

0001c3b8 <entropy_cc310_rng_get_entropy>:
{
   1c3b8:	b513      	push	{r0, r1, r4, lr}
   1c3ba:	4614      	mov	r4, r2
   1c3bc:	4608      	mov	r0, r1
	res = spm_request_random_number(buffer, length, &olen);
   1c3be:	aa01      	add	r2, sp, #4
   1c3c0:	4621      	mov	r1, r4
   1c3c2:	f7eb fe15 	bl	7ff0 <spm_request_random_number>
	if (olen != length) {
   1c3c6:	9b01      	ldr	r3, [sp, #4]
   1c3c8:	429c      	cmp	r4, r3
}
   1c3ca:	bf18      	it	ne
   1c3cc:	f06f 0015 	mvnne.w	r0, #21
   1c3d0:	b002      	add	sp, #8
   1c3d2:	bd10      	pop	{r4, pc}

0001c3d4 <z_errno>:
   1c3d4:	f7fc bf5c 	b.w	19290 <z_impl_z_errno>

0001c3d8 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1c3d8:	4668      	mov	r0, sp
   1c3da:	f020 0107 	bic.w	r1, r0, #7
   1c3de:	468d      	mov	sp, r1
   1c3e0:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   1c3e2:	f7f7 f833 	bl	1344c <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1c3e6:	f7f1 faaf 	bl	d948 <_arch_isr_direct_pm>
   1c3ea:	f7f1 f9f5 	bl	d7d8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1c3ee:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1c3f2:	4685      	mov	sp, r0
   1c3f4:	4770      	bx	lr

0001c3f6 <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   1c3f6:	4668      	mov	r0, sp
   1c3f8:	f020 0107 	bic.w	r1, r0, #7
   1c3fc:	468d      	mov	sp, r1
   1c3fe:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   1c400:	f7f7 fc1c 	bl	13c3c <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1c404:	f7f1 faa0 	bl	d948 <_arch_isr_direct_pm>
   1c408:	f7f1 f9e6 	bl	d7d8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   1c40c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1c410:	4685      	mov	sp, r0
   1c412:	4770      	bx	lr

0001c414 <trace_task_create>:
{
   1c414:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   1c416:	201d      	movs	r0, #29
   1c418:	2200      	movs	r2, #0
   1c41a:	2106      	movs	r1, #6
   1c41c:	f7f1 fa7c 	bl	d918 <z_arm_irq_priority_set>
}
   1c420:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   1c424:	201d      	movs	r0, #29
   1c426:	f7f1 ba67 	b.w	d8f8 <arch_irq_enable>

0001c42a <read_task_create>:
{
   1c42a:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   1c42c:	201c      	movs	r0, #28
   1c42e:	2200      	movs	r2, #0
   1c430:	2106      	movs	r1, #6
   1c432:	f7f1 fa71 	bl	d918 <z_arm_irq_priority_set>
}
   1c436:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   1c43a:	201c      	movs	r0, #28
   1c43c:	f7f1 ba5c 	b.w	d8f8 <arch_irq_enable>

0001c440 <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   1c440:	2000      	movs	r0, #0
   1c442:	4770      	bx	lr

0001c444 <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   1c444:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   1c448:	bf18      	it	ne
   1c44a:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   1c44c:	0782      	lsls	r2, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   1c44e:	bf48      	it	mi
   1c450:	f043 0308 	orrmi.w	r3, r3, #8
}
   1c454:	4618      	mov	r0, r3
   1c456:	4770      	bx	lr

0001c458 <z_to_nrf_family>:
	switch (z_family) {
   1c458:	2803      	cmp	r0, #3
   1c45a:	d00f      	beq.n	1c47c <z_to_nrf_family+0x24>
   1c45c:	d808      	bhi.n	1c470 <z_to_nrf_family+0x18>
   1c45e:	2801      	cmp	r0, #1
   1c460:	d00e      	beq.n	1c480 <z_to_nrf_family+0x28>
   1c462:	2802      	cmp	r0, #2
		return -EAFNOSUPPORT;
   1c464:	bf08      	it	eq
   1c466:	200a      	moveq	r0, #10
   1c468:	bf18      	it	ne
   1c46a:	f06f 002e 	mvnne.w	r0, #46	; 0x2e
   1c46e:	4770      	bx	lr
	switch (z_family) {
   1c470:	2866      	cmp	r0, #102	; 0x66
   1c472:	d006      	beq.n	1c482 <z_to_nrf_family+0x2a>
   1c474:	2867      	cmp	r0, #103	; 0x67
		return -EAFNOSUPPORT;
   1c476:	bf08      	it	eq
   1c478:	2001      	moveq	r0, #1
   1c47a:	e7f5      	b.n	1c468 <z_to_nrf_family+0x10>
		return NRF_AF_PACKET;
   1c47c:	2005      	movs	r0, #5
   1c47e:	4770      	bx	lr
		return NRF_AF_INET;
   1c480:	2002      	movs	r0, #2
}
   1c482:	4770      	bx	lr

0001c484 <z_to_nrf_protocol>:
	switch (proto) {
   1c484:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   1c488:	d01d      	beq.n	1c4c6 <z_to_nrf_protocol+0x42>
   1c48a:	dc08      	bgt.n	1c49e <z_to_nrf_protocol+0x1a>
   1c48c:	2806      	cmp	r0, #6
   1c48e:	d01d      	beq.n	1c4cc <z_to_nrf_protocol+0x48>
   1c490:	2811      	cmp	r0, #17
   1c492:	d01d      	beq.n	1c4d0 <z_to_nrf_protocol+0x4c>
   1c494:	2800      	cmp	r0, #0
		return -EPROTONOSUPPORT;
   1c496:	bf18      	it	ne
   1c498:	f06f 002a 	mvnne.w	r0, #42	; 0x2a
   1c49c:	4770      	bx	lr
	switch (proto) {
   1c49e:	f240 2301 	movw	r3, #513	; 0x201
   1c4a2:	4298      	cmp	r0, r3
   1c4a4:	d015      	beq.n	1c4d2 <z_to_nrf_protocol+0x4e>
   1c4a6:	dc06      	bgt.n	1c4b6 <z_to_nrf_protocol+0x32>
   1c4a8:	f240 1311 	movw	r3, #273	; 0x111
   1c4ac:	4298      	cmp	r0, r3
		return -EPROTONOSUPPORT;
   1c4ae:	bf08      	it	eq
   1c4b0:	f44f 7087 	moveq.w	r0, #270	; 0x10e
   1c4b4:	e7ef      	b.n	1c496 <z_to_nrf_protocol+0x12>
	switch (proto) {
   1c4b6:	f240 2302 	movw	r3, #514	; 0x202
   1c4ba:	4298      	cmp	r0, r3
   1c4bc:	d009      	beq.n	1c4d2 <z_to_nrf_protocol+0x4e>
   1c4be:	f240 2303 	movw	r3, #515	; 0x203
   1c4c2:	4298      	cmp	r0, r3
   1c4c4:	e7e7      	b.n	1c496 <z_to_nrf_protocol+0x12>
		return NRF_SPROTO_TLS1v2;
   1c4c6:	f44f 7082 	mov.w	r0, #260	; 0x104
   1c4ca:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   1c4cc:	2001      	movs	r0, #1
   1c4ce:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   1c4d0:	2002      	movs	r0, #2
}
   1c4d2:	4770      	bx	lr

0001c4d4 <nrf91_bsdlib_socket_offload_init>:
}
   1c4d4:	2000      	movs	r0, #0
   1c4d6:	4770      	bx	lr

0001c4d8 <z_errno>:
   1c4d8:	f7fc beda 	b.w	19290 <z_impl_z_errno>

0001c4dc <nrf91_socket_offload_freeaddrinfo>:
{
   1c4dc:	b538      	push	{r3, r4, r5, lr}
   1c4de:	4604      	mov	r4, r0
	while (next != NULL) {
   1c4e0:	b904      	cbnz	r4, 1c4e4 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   1c4e2:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   1c4e4:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   1c4e6:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   1c4e8:	f000 fd30 	bl	1cf4c <k_free>
		k_free(this);
   1c4ec:	4620      	mov	r0, r4
   1c4ee:	f000 fd2d 	bl	1cf4c <k_free>
		next = next->ai_next;
   1c4f2:	462c      	mov	r4, r5
   1c4f4:	e7f4      	b.n	1c4e0 <nrf91_socket_offload_freeaddrinfo+0x4>

0001c4f6 <z_to_nrf_addrinfo_hints>:
{
   1c4f6:	b538      	push	{r3, r4, r5, lr}
   1c4f8:	460c      	mov	r4, r1
   1c4fa:	4605      	mov	r5, r0
	memset(nrf_out, 0, sizeof(struct nrf_addrinfo));
   1c4fc:	2220      	movs	r2, #32
   1c4fe:	2100      	movs	r1, #0
   1c500:	4620      	mov	r0, r4
   1c502:	f7ff fcb1 	bl	1be68 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   1c506:	2300      	movs	r3, #0
   1c508:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1c50a:	68ab      	ldr	r3, [r5, #8]
	switch (socktype) {
   1c50c:	2b03      	cmp	r3, #3
   1c50e:	d003      	beq.n	1c518 <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   1c510:	2b04      	cmp	r3, #4
   1c512:	bf08      	it	eq
   1c514:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1c518:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   1c51a:	88a8      	ldrh	r0, [r5, #4]
   1c51c:	f7ff ff9c 	bl	1c458 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1c520:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
   1c524:	d00b      	beq.n	1c53e <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   1c526:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1c528:	68e8      	ldr	r0, [r5, #12]
   1c52a:	f7ff ffab 	bl	1c484 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1c52e:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1c532:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1c534:	d003      	beq.n	1c53e <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   1c536:	69a8      	ldr	r0, [r5, #24]
   1c538:	b108      	cbz	r0, 1c53e <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   1c53a:	61a0      	str	r0, [r4, #24]
	return 0;
   1c53c:	2000      	movs	r0, #0
}
   1c53e:	bd38      	pop	{r3, r4, r5, pc}

0001c540 <nrf91_socket_offload_send>:
{
   1c540:	b570      	push	{r4, r5, r6, lr}
   1c542:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1c544:	4618      	mov	r0, r3
{
   1c546:	4615      	mov	r5, r2
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1c548:	f7ff ff7c 	bl	1c444 <z_to_nrf_flags>
   1c54c:	462a      	mov	r2, r5
   1c54e:	4603      	mov	r3, r0
   1c550:	4620      	mov	r0, r4
}
   1c552:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1c556:	f7f9 b8c5 	b.w	156e4 <nrf_send>

0001c55a <nrf91_socket_offload_recv>:
{
   1c55a:	b570      	push	{r4, r5, r6, lr}
   1c55c:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1c55e:	4618      	mov	r0, r3
{
   1c560:	4615      	mov	r5, r2
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1c562:	f7ff ff6f 	bl	1c444 <z_to_nrf_flags>
   1c566:	462a      	mov	r2, r5
   1c568:	4603      	mov	r3, r0
   1c56a:	4620      	mov	r0, r4
}
   1c56c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1c570:	f7f9 b8ee 	b.w	15750 <nrf_recv>

0001c574 <nrf91_socket_offload_getsockopt>:
{
   1c574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c578:	461d      	mov	r5, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   1c57a:	2300      	movs	r3, #0
{
   1c57c:	b086      	sub	sp, #24
   1c57e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   1c582:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1c586:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   1c58a:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   1c58e:	4607      	mov	r7, r0
   1c590:	460c      	mov	r4, r1
   1c592:	4616      	mov	r6, r2
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1c594:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   1c596:	d002      	beq.n	1c59e <nrf91_socket_offload_getsockopt+0x2a>
   1c598:	dc2b      	bgt.n	1c5f2 <nrf91_socket_offload_getsockopt+0x7e>
   1c59a:	2901      	cmp	r1, #1
   1c59c:	d13d      	bne.n	1c61a <nrf91_socket_offload_getsockopt+0xa6>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   1c59e:	aa02      	add	r2, sp, #8
   1c5a0:	4631      	mov	r1, r6
   1c5a2:	4620      	mov	r0, r4
   1c5a4:	f7f3 faec 	bl	fb80 <z_to_nrf_optname>
   1c5a8:	2800      	cmp	r0, #0
   1c5aa:	db36      	blt.n	1c61a <nrf91_socket_offload_getsockopt+0xa6>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   1c5ac:	2c01      	cmp	r4, #1
   1c5ae:	d128      	bne.n	1c602 <nrf91_socket_offload_getsockopt+0x8e>
   1c5b0:	2e14      	cmp	r6, #20
   1c5b2:	d126      	bne.n	1c602 <nrf91_socket_offload_getsockopt+0x8e>
		nrf_optlen = sizeof(struct nrf_timeval);
   1c5b4:	2308      	movs	r3, #8
   1c5b6:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   1c5b8:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1c5ba:	aa03      	add	r2, sp, #12
   1c5bc:	9200      	str	r2, [sp, #0]
   1c5be:	4638      	mov	r0, r7
   1c5c0:	9a02      	ldr	r2, [sp, #8]
   1c5c2:	4621      	mov	r1, r4
   1c5c4:	f7f9 f944 	bl	15850 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   1c5c8:	4607      	mov	r7, r0
   1c5ca:	b970      	cbnz	r0, 1c5ea <nrf91_socket_offload_getsockopt+0x76>
   1c5cc:	b16d      	cbz	r5, 1c5ea <nrf91_socket_offload_getsockopt+0x76>
		*optlen = nrf_optlen;
   1c5ce:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   1c5d0:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   1c5d2:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   1c5d6:	d108      	bne.n	1c5ea <nrf91_socket_offload_getsockopt+0x76>
			if (optname == SO_ERROR) {
   1c5d8:	2e04      	cmp	r6, #4
   1c5da:	d114      	bne.n	1c606 <nrf91_socket_offload_getsockopt+0x92>
				bsd_os_errno_set(*(int *)optval);
   1c5dc:	6828      	ldr	r0, [r5, #0]
   1c5de:	f7f3 f9ed 	bl	f9bc <bsd_os_errno_set>
				*(int *)optval = errno;
   1c5e2:	f7ff ff79 	bl	1c4d8 <z_errno>
   1c5e6:	6803      	ldr	r3, [r0, #0]
   1c5e8:	602b      	str	r3, [r5, #0]
}
   1c5ea:	4638      	mov	r0, r7
   1c5ec:	b006      	add	sp, #24
   1c5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1c5f2:	f240 2302 	movw	r3, #514	; 0x202
   1c5f6:	4299      	cmp	r1, r3
   1c5f8:	d0d1      	beq.n	1c59e <nrf91_socket_offload_getsockopt+0x2a>
   1c5fa:	f240 2303 	movw	r3, #515	; 0x203
   1c5fe:	4299      	cmp	r1, r3
   1c600:	e7cc      	b.n	1c59c <nrf91_socket_offload_getsockopt+0x28>
   1c602:	462b      	mov	r3, r5
   1c604:	e7d9      	b.n	1c5ba <nrf91_socket_offload_getsockopt+0x46>
			} else if (optname == SO_RCVTIMEO) {
   1c606:	2e14      	cmp	r6, #20
   1c608:	d1ef      	bne.n	1c5ea <nrf91_socket_offload_getsockopt+0x76>
				((struct timeval *)optval)->tv_sec =
   1c60a:	9b04      	ldr	r3, [sp, #16]
   1c60c:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   1c60e:	9b05      	ldr	r3, [sp, #20]
   1c610:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   1c612:	2308      	movs	r3, #8
   1c614:	f8c8 3000 	str.w	r3, [r8]
   1c618:	e7e7      	b.n	1c5ea <nrf91_socket_offload_getsockopt+0x76>
	errno = ENOPROTOOPT;
   1c61a:	f7ff ff5d 	bl	1c4d8 <z_errno>
   1c61e:	232a      	movs	r3, #42	; 0x2a
	return retval;
   1c620:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	errno = ENOPROTOOPT;
   1c624:	6003      	str	r3, [r0, #0]
	return retval;
   1c626:	e7e0      	b.n	1c5ea <nrf91_socket_offload_getsockopt+0x76>

0001c628 <nrf91_socket_offload_poll>:
{
   1c628:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c62a:	b091      	sub	sp, #68	; 0x44
   1c62c:	4605      	mov	r5, r0
   1c62e:	460c      	mov	r4, r1
   1c630:	4616      	mov	r6, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   1c632:	2100      	movs	r1, #0
   1c634:	2240      	movs	r2, #64	; 0x40
   1c636:	4668      	mov	r0, sp
   1c638:	f7ff fc16 	bl	1be68 <memset>
	for (int i = 0; i < nfds; i++) {
   1c63c:	466a      	mov	r2, sp
   1c63e:	2100      	movs	r1, #0
		if (fds[i].events & POLLIN) {
   1c640:	1d2f      	adds	r7, r5, #4
	for (int i = 0; i < nfds; i++) {
   1c642:	42a1      	cmp	r1, r4
   1c644:	db0c      	blt.n	1c660 <nrf91_socket_offload_poll+0x38>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   1c646:	4632      	mov	r2, r6
   1c648:	4621      	mov	r1, r4
   1c64a:	4668      	mov	r0, sp
   1c64c:	f7f9 f920 	bl	15890 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   1c650:	2200      	movs	r2, #0
   1c652:	462b      	mov	r3, r5
		fds[i].revents = 0;
   1c654:	4616      	mov	r6, r2
			fds[i].revents |= POLLIN;
   1c656:	2701      	movs	r7, #1
	for (int i = 0; i < nfds; i++) {
   1c658:	42a2      	cmp	r2, r4
   1c65a:	db1a      	blt.n	1c692 <nrf91_socket_offload_poll+0x6a>
}
   1c65c:	b011      	add	sp, #68	; 0x44
   1c65e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   1c660:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   1c664:	f837 0031 	ldrh.w	r0, [r7, r1, lsl #3]
		tmp[i].handle = fds[i].fd;
   1c668:	6013      	str	r3, [r2, #0]
		if (fds[i].events & POLLIN) {
   1c66a:	07c3      	lsls	r3, r0, #31
			tmp[i].requested |= NRF_POLLIN;
   1c66c:	bf48      	it	mi
   1c66e:	8893      	ldrhmi	r3, [r2, #4]
	for (int i = 0; i < nfds; i++) {
   1c670:	f101 0101 	add.w	r1, r1, #1
			tmp[i].requested |= NRF_POLLIN;
   1c674:	bf44      	itt	mi
   1c676:	f043 0301 	orrmi.w	r3, r3, #1
   1c67a:	8093      	strhmi	r3, [r2, #4]
		if (fds[i].events & POLLOUT) {
   1c67c:	0743      	lsls	r3, r0, #29
			tmp[i].requested |= NRF_POLLOUT;
   1c67e:	bf48      	it	mi
   1c680:	8893      	ldrhmi	r3, [r2, #4]
   1c682:	f102 0208 	add.w	r2, r2, #8
   1c686:	bf44      	itt	mi
   1c688:	f043 0302 	orrmi.w	r3, r3, #2
   1c68c:	f822 3c04 	strhmi.w	r3, [r2, #-4]
   1c690:	e7d7      	b.n	1c642 <nrf91_socket_offload_poll+0x1a>
		if (tmp[i].returned & NRF_POLLIN) {
   1c692:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   1c696:	88c9      	ldrh	r1, [r1, #6]
		fds[i].revents = 0;
   1c698:	80de      	strh	r6, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   1c69a:	07cd      	lsls	r5, r1, #31
			fds[i].revents |= POLLIN;
   1c69c:	bf48      	it	mi
   1c69e:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   1c6a0:	078d      	lsls	r5, r1, #30
			fds[i].revents |= POLLOUT;
   1c6a2:	bf48      	it	mi
   1c6a4:	88dd      	ldrhmi	r5, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   1c6a6:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   1c6aa:	bf44      	itt	mi
   1c6ac:	f045 0504 	orrmi.w	r5, r5, #4
   1c6b0:	80dd      	strhmi	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   1c6b2:	074d      	lsls	r5, r1, #29
			fds[i].revents |= POLLERR;
   1c6b4:	bf48      	it	mi
   1c6b6:	88dd      	ldrhmi	r5, [r3, #6]
   1c6b8:	f103 0308 	add.w	r3, r3, #8
   1c6bc:	bf44      	itt	mi
   1c6be:	f045 0508 	orrmi.w	r5, r5, #8
   1c6c2:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   1c6c6:	06cd      	lsls	r5, r1, #27
			fds[i].revents |= POLLNVAL;
   1c6c8:	bf42      	ittt	mi
   1c6ca:	f833 5c02 	ldrhmi.w	r5, [r3, #-2]
   1c6ce:	f045 0520 	orrmi.w	r5, r5, #32
   1c6d2:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   1c6d6:	0709      	lsls	r1, r1, #28
			fds[i].revents |= POLLHUP;
   1c6d8:	bf42      	ittt	mi
   1c6da:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   1c6de:	f041 0110 	orrmi.w	r1, r1, #16
   1c6e2:	f823 1c02 	strhmi.w	r1, [r3, #-2]
   1c6e6:	e7b7      	b.n	1c658 <nrf91_socket_offload_poll+0x30>

0001c6e8 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   1c6e8:	f7f9 b85e 	b.w	157a8 <nrf_listen>

0001c6ec <nrf91_socket_offload_close>:
	return nrf_close(sd);
   1c6ec:	f7f8 bfd0 	b.w	15690 <nrf_close>

0001c6f0 <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   1c6f0:	2903      	cmp	r1, #3
{
   1c6f2:	b508      	push	{r3, lr}
	switch (cmd) {
   1c6f4:	d00b      	beq.n	1c70e <nrf91_socket_offload_fcntl+0x1e>
   1c6f6:	2904      	cmp	r1, #4
   1c6f8:	d111      	bne.n	1c71e <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   1c6fa:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   1c6fc:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   1c700:	d10d      	bne.n	1c71e <nrf91_socket_offload_fcntl+0x2e>
}
   1c702:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1c706:	1392      	asrs	r2, r2, #14
   1c708:	2101      	movs	r1, #1
   1c70a:	f7f9 b8c3 	b.w	15894 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   1c70e:	2200      	movs	r2, #0
   1c710:	2102      	movs	r1, #2
   1c712:	f7f9 f8bf 	bl	15894 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   1c716:	0380      	lsls	r0, r0, #14
   1c718:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   1c71c:	bd08      	pop	{r3, pc}
	errno = EINVAL;
   1c71e:	f7ff fedb 	bl	1c4d8 <z_errno>
   1c722:	2316      	movs	r3, #22
   1c724:	6003      	str	r3, [r0, #0]
	return retval;
   1c726:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c72a:	e7f7      	b.n	1c71c <nrf91_socket_offload_fcntl+0x2c>

0001c72c <nrf91_socket_offload_recvfrom>:
{
   1c72c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c72e:	4605      	mov	r5, r0
   1c730:	b08d      	sub	sp, #52	; 0x34
   1c732:	4618      	mov	r0, r3
   1c734:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   1c738:	4617      	mov	r7, r2
	if (from == NULL) {
   1c73a:	f7ff fe83 	bl	1c444 <z_to_nrf_flags>
   1c73e:	4603      	mov	r3, r0
   1c740:	b94c      	cbnz	r4, 1c756 <nrf91_socket_offload_recvfrom+0x2a>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1c742:	4628      	mov	r0, r5
   1c744:	e9cd 4400 	strd	r4, r4, [sp]
   1c748:	463a      	mov	r2, r7
   1c74a:	f7f8 ffe5 	bl	15718 <nrf_recvfrom>
   1c74e:	4605      	mov	r5, r0
}
   1c750:	4628      	mov	r0, r5
   1c752:	b00d      	add	sp, #52	; 0x34
   1c754:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   1c756:	2224      	movs	r2, #36	; 0x24
   1c758:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1c75a:	aa02      	add	r2, sp, #8
   1c75c:	9201      	str	r2, [sp, #4]
   1c75e:	aa03      	add	r2, sp, #12
   1c760:	9200      	str	r2, [sp, #0]
   1c762:	4628      	mov	r0, r5
   1c764:	463a      	mov	r2, r7
   1c766:	f7f8 ffd7 	bl	15718 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   1c76a:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1c76c:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   1c76e:	2b02      	cmp	r3, #2
   1c770:	d109      	bne.n	1c786 <nrf91_socket_offload_recvfrom+0x5a>
	ptr->sin_port = nrf_in->sin_port;
   1c772:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1c776:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1c778:	2301      	movs	r3, #1
   1c77a:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1c77c:	9b06      	ldr	r3, [sp, #24]
   1c77e:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   1c780:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   1c782:	6033      	str	r3, [r6, #0]
	return retval;
   1c784:	e7e4      	b.n	1c750 <nrf91_socket_offload_recvfrom+0x24>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   1c786:	2b0a      	cmp	r3, #10
   1c788:	d1e2      	bne.n	1c750 <nrf91_socket_offload_recvfrom+0x24>
	ptr->sin6_port = nrf_in->sin6_port;
   1c78a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
	ptr->sin6_family = AF_INET6;
   1c78e:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   1c790:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   1c792:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1c794:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   1c796:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1c79a:	a907      	add	r1, sp, #28
   1c79c:	f7ff fb3a 	bl	1be14 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1c7a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c7a2:	7523      	strb	r3, [r4, #20]
			*fromlen = sizeof(struct sockaddr_in6);
   1c7a4:	2318      	movs	r3, #24
   1c7a6:	e7ec      	b.n	1c782 <nrf91_socket_offload_recvfrom+0x56>

0001c7a8 <nrf91_socket_offload_connect>:
{
   1c7a8:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   1c7aa:	880b      	ldrh	r3, [r1, #0]
{
   1c7ac:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   1c7ae:	2b01      	cmp	r3, #1
{
   1c7b0:	4606      	mov	r6, r0
   1c7b2:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   1c7b4:	d10e      	bne.n	1c7d4 <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   1c7b6:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1c7b8:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1c7ba:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   1c7be:	2302      	movs	r3, #2
   1c7c0:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1c7c2:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1c7c4:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1c7c8:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   1c7ca:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1c7cc:	f7f8 ffda 	bl	15784 <nrf_connect>
}
   1c7d0:	b00a      	add	sp, #40	; 0x28
   1c7d2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   1c7d4:	2b02      	cmp	r3, #2
   1c7d6:	d112      	bne.n	1c7fe <nrf91_socket_offload_connect+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   1c7d8:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1c7da:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1c7dc:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   1c7e0:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1c7e2:	2210      	movs	r2, #16
   1c7e4:	3104      	adds	r1, #4
   1c7e6:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   1c7e8:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1c7ea:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1c7ee:	f7ff fb11 	bl	1be14 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1c7f2:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1c7f4:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1c7f6:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1c7f8:	a901      	add	r1, sp, #4
   1c7fa:	4630      	mov	r0, r6
   1c7fc:	e7e6      	b.n	1c7cc <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   1c7fe:	f7f8 ffc1 	bl	15784 <nrf_connect>
		if (retval < 0) {
   1c802:	2800      	cmp	r0, #0
   1c804:	dae4      	bge.n	1c7d0 <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   1c806:	f7ff fe67 	bl	1c4d8 <z_errno>
   1c80a:	2323      	movs	r3, #35	; 0x23
   1c80c:	6003      	str	r3, [r0, #0]
   1c80e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c812:	e7dd      	b.n	1c7d0 <nrf91_socket_offload_connect+0x28>

0001c814 <nrf91_socket_offload_socket>:
{
   1c814:	b510      	push	{r4, lr}
	family = z_to_nrf_family(family);
   1c816:	b280      	uxth	r0, r0
   1c818:	f7ff fe1e 	bl	1c458 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1c81c:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
	family = z_to_nrf_family(family);
   1c820:	4604      	mov	r4, r0
	if (family == -EAFNOSUPPORT) {
   1c822:	d106      	bne.n	1c832 <nrf91_socket_offload_socket+0x1e>
		errno = EAFNOSUPPORT;
   1c824:	f7ff fe58 	bl	1c4d8 <z_errno>
   1c828:	232f      	movs	r3, #47	; 0x2f
		errno = EPROTONOSUPPORT;
   1c82a:	6003      	str	r3, [r0, #0]
}
   1c82c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c830:	bd10      	pop	{r4, pc}
	switch (socktype) {
   1c832:	2903      	cmp	r1, #3
   1c834:	d003      	beq.n	1c83e <nrf91_socket_offload_socket+0x2a>
		return NRF_SOCK_MGMT;
   1c836:	2904      	cmp	r1, #4
   1c838:	bf08      	it	eq
   1c83a:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   1c83e:	4610      	mov	r0, r2
   1c840:	f7ff fe20 	bl	1c484 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   1c844:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	proto = z_to_nrf_protocol(proto);
   1c848:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   1c84a:	d103      	bne.n	1c854 <nrf91_socket_offload_socket+0x40>
		errno = EPROTONOSUPPORT;
   1c84c:	f7ff fe44 	bl	1c4d8 <z_errno>
   1c850:	232b      	movs	r3, #43	; 0x2b
   1c852:	e7ea      	b.n	1c82a <nrf91_socket_offload_socket+0x16>
	retval = nrf_socket(family, type, proto);
   1c854:	4620      	mov	r0, r4
}
   1c856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   1c85a:	f7f8 bf07 	b.w	1566c <nrf_socket>

0001c85e <nrf91_socket_offload_accept>:
{
   1c85e:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   1c860:	2708      	movs	r7, #8
{
   1c862:	b085      	sub	sp, #20
   1c864:	460c      	mov	r4, r1
   1c866:	4616      	mov	r6, r2
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   1c868:	eb0d 0107 	add.w	r1, sp, r7
   1c86c:	aa01      	add	r2, sp, #4
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   1c86e:	9701      	str	r7, [sp, #4]
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   1c870:	f7f8 ffaa 	bl	157c8 <nrf_accept>
	if (retval < 0) {
   1c874:	1e05      	subs	r5, r0, #0
   1c876:	db23      	blt.n	1c8c0 <nrf91_socket_offload_accept+0x62>
	if (nrf_addr.sa_family == NRF_AF_INET) {
   1c878:	9b03      	ldr	r3, [sp, #12]
   1c87a:	2b02      	cmp	r3, #2
   1c87c:	d10a      	bne.n	1c894 <nrf91_socket_offload_accept+0x36>
	ptr->sin_port = nrf_in->sin_port;
   1c87e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		*addrlen = sizeof(struct sockaddr_in);
   1c882:	6037      	str	r7, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   1c884:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1c886:	2301      	movs	r3, #1
   1c888:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1c88a:	9b05      	ldr	r3, [sp, #20]
   1c88c:	6063      	str	r3, [r4, #4]
}
   1c88e:	4628      	mov	r0, r5
   1c890:	b005      	add	sp, #20
   1c892:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (nrf_addr.sa_family == NRF_AF_INET6) {
   1c894:	2b0a      	cmp	r3, #10
   1c896:	d10f      	bne.n	1c8b8 <nrf91_socket_offload_accept+0x5a>
		*addrlen = sizeof(struct sockaddr_in6);
   1c898:	2318      	movs	r3, #24
   1c89a:	6033      	str	r3, [r6, #0]
	ptr->sin6_port = nrf_in->sin6_port;
   1c89c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	ptr->sin6_family = AF_INET6;
   1c8a0:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   1c8a2:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   1c8a4:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1c8a6:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   1c8a8:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1c8ac:	a906      	add	r1, sp, #24
   1c8ae:	f7ff fab1 	bl	1be14 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1c8b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c8b4:	7523      	strb	r3, [r4, #20]
   1c8b6:	e7ea      	b.n	1c88e <nrf91_socket_offload_accept+0x30>
	errno = ENOTSUP;
   1c8b8:	f7ff fe0e 	bl	1c4d8 <z_errno>
   1c8bc:	2323      	movs	r3, #35	; 0x23
   1c8be:	6003      	str	r3, [r0, #0]
		return -1;
   1c8c0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1c8c4:	e7e3      	b.n	1c88e <nrf91_socket_offload_accept+0x30>

0001c8c6 <nrf91_socket_offload_getaddrinfo>:
{
   1c8c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c8ca:	4614      	mov	r4, r2
   1c8cc:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   1c8ce:	2100      	movs	r1, #0
{
   1c8d0:	b093      	sub	sp, #76	; 0x4c
   1c8d2:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1c8d4:	2220      	movs	r2, #32
   1c8d6:	a802      	add	r0, sp, #8
{
   1c8d8:	4698      	mov	r8, r3
	struct nrf_addrinfo *nrf_res = NULL;
   1c8da:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1c8dc:	f7ff fac4 	bl	1be68 <memset>
	if (hints != NULL) {
   1c8e0:	b194      	cbz	r4, 1c908 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   1c8e2:	a902      	add	r1, sp, #8
   1c8e4:	4620      	mov	r0, r4
   1c8e6:	f7ff fe06 	bl	1c4f6 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   1c8ea:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
   1c8ee:	f000 80bf 	beq.w	1ca70 <nrf91_socket_offload_getaddrinfo+0x1aa>
		} else if (error == -EAFNOSUPPORT) {
   1c8f2:	302f      	adds	r0, #47	; 0x2f
   1c8f4:	f000 80bf 	beq.w	1ca76 <nrf91_socket_offload_getaddrinfo+0x1b0>
		if (hints->ai_next != NULL) {
   1c8f8:	69e0      	ldr	r0, [r4, #28]
   1c8fa:	b120      	cbz	r0, 1c906 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   1c8fc:	ac0a      	add	r4, sp, #40	; 0x28
   1c8fe:	4621      	mov	r1, r4
   1c900:	f7ff fdf9 	bl	1c4f6 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   1c904:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   1c906:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   1c908:	4631      	mov	r1, r6
   1c90a:	4628      	mov	r0, r5
   1c90c:	ab01      	add	r3, sp, #4
   1c90e:	4622      	mov	r2, r4
   1c910:	f7f8 ffba 	bl	15888 <nrf_getaddrinfo>
	*res = NULL;
   1c914:	2700      	movs	r7, #0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   1c916:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   1c918:	f8c8 7000 	str.w	r7, [r8]
		return AF_INET6;
   1c91c:	f04f 0902 	mov.w	r9, #2
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1c920:	4605      	mov	r5, r0
   1c922:	2800      	cmp	r0, #0
   1c924:	d04a      	beq.n	1c9bc <nrf91_socket_offload_getaddrinfo+0xf6>
		nrf91_socket_offload_freeaddrinfo(*res);
   1c926:	f8d8 0000 	ldr.w	r0, [r8]
   1c92a:	f7ff fdd7 	bl	1c4dc <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   1c92e:	2300      	movs	r3, #0
   1c930:	f8c8 3000 	str.w	r3, [r8]
   1c934:	e044      	b.n	1c9c0 <nrf91_socket_offload_getaddrinfo+0xfa>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   1c936:	2020      	movs	r0, #32
   1c938:	f7fc ff04 	bl	19744 <k_malloc>
		if (next_z_res == NULL) {
   1c93c:	4604      	mov	r4, r0
   1c93e:	2800      	cmp	r0, #0
   1c940:	f000 8091 	beq.w	1ca66 <nrf91_socket_offload_getaddrinfo+0x1a0>
	family = nrf_to_z_family(nrf_in->ai_family);
   1c944:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1c946:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   1c948:	2a05      	cmp	r2, #5
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   1c94a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   1c94e:	6005      	str	r5, [r0, #0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1c950:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   1c952:	d03c      	beq.n	1c9ce <nrf91_socket_offload_getaddrinfo+0x108>
   1c954:	dc09      	bgt.n	1c96a <nrf91_socket_offload_getaddrinfo+0xa4>
   1c956:	2a01      	cmp	r2, #1
   1c958:	d03b      	beq.n	1c9d2 <nrf91_socket_offload_getaddrinfo+0x10c>
   1c95a:	2a02      	cmp	r2, #2
   1c95c:	d03b      	beq.n	1c9d6 <nrf91_socket_offload_getaddrinfo+0x110>
			k_free(next_z_res);
   1c95e:	4620      	mov	r0, r4
   1c960:	f000 faf4 	bl	1cf4c <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   1c964:	f06f 0508 	mvn.w	r5, #8
   1c968:	e7dd      	b.n	1c926 <nrf91_socket_offload_getaddrinfo+0x60>
	switch (nrf_family) {
   1c96a:	2a0a      	cmp	r2, #10
   1c96c:	d035      	beq.n	1c9da <nrf91_socket_offload_getaddrinfo+0x114>
   1c96e:	2a66      	cmp	r2, #102	; 0x66
   1c970:	d1f5      	bne.n	1c95e <nrf91_socket_offload_getaddrinfo+0x98>
		return AF_LTE;
   1c972:	4613      	mov	r3, r2
	z_out->ai_family = family;
   1c974:	6063      	str	r3, [r4, #4]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1c976:	68f3      	ldr	r3, [r6, #12]
	switch (proto) {
   1c978:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1c97c:	d04e      	beq.n	1ca1c <nrf91_socket_offload_getaddrinfo+0x156>
   1c97e:	dc2e      	bgt.n	1c9de <nrf91_socket_offload_getaddrinfo+0x118>
   1c980:	2b01      	cmp	r3, #1
   1c982:	d050      	beq.n	1ca26 <nrf91_socket_offload_getaddrinfo+0x160>
   1c984:	2b02      	cmp	r3, #2
   1c986:	d04c      	beq.n	1ca22 <nrf91_socket_offload_getaddrinfo+0x15c>
   1c988:	2b00      	cmp	r3, #0
   1c98a:	d130      	bne.n	1c9ee <nrf91_socket_offload_getaddrinfo+0x128>
	if (nrf_in->ai_family == NRF_AF_INET) {
   1c98c:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1c98e:	60e3      	str	r3, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   1c990:	d14b      	bne.n	1ca2a <nrf91_socket_offload_getaddrinfo+0x164>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   1c992:	2008      	movs	r0, #8
   1c994:	f7fc fed6 	bl	19744 <k_malloc>
   1c998:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   1c99a:	2800      	cmp	r0, #0
   1c99c:	d060      	beq.n	1ca60 <nrf91_socket_offload_getaddrinfo+0x19a>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   1c99e:	2308      	movs	r3, #8
   1c9a0:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   1c9a2:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   1c9a4:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1c9a6:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   1c9a8:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   1c9aa:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1c9ac:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   1c9ae:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   1c9b0:	2f00      	cmp	r7, #0
   1c9b2:	d15b      	bne.n	1ca6c <nrf91_socket_offload_getaddrinfo+0x1a6>
			*res = next_z_res;
   1c9b4:	f8c8 4000 	str.w	r4, [r8]
		next_nrf_res = next_nrf_res->ai_next;
   1c9b8:	4627      	mov	r7, r4
   1c9ba:	69f6      	ldr	r6, [r6, #28]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1c9bc:	2e00      	cmp	r6, #0
   1c9be:	d1ba      	bne.n	1c936 <nrf91_socket_offload_getaddrinfo+0x70>
	nrf_freeaddrinfo(nrf_res);
   1c9c0:	9801      	ldr	r0, [sp, #4]
   1c9c2:	f7f8 ff63 	bl	1588c <nrf_freeaddrinfo>
}
   1c9c6:	4628      	mov	r0, r5
   1c9c8:	b013      	add	sp, #76	; 0x4c
   1c9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return AF_PACKET;
   1c9ce:	2303      	movs	r3, #3
   1c9d0:	e7d0      	b.n	1c974 <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_LOCAL;
   1c9d2:	2367      	movs	r3, #103	; 0x67
   1c9d4:	e7ce      	b.n	1c974 <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_INET;
   1c9d6:	2301      	movs	r3, #1
   1c9d8:	e7cc      	b.n	1c974 <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_INET6;
   1c9da:	2302      	movs	r3, #2
   1c9dc:	e7ca      	b.n	1c974 <nrf91_socket_offload_getaddrinfo+0xae>
	switch (proto) {
   1c9de:	f240 2101 	movw	r1, #513	; 0x201
   1c9e2:	428b      	cmp	r3, r1
   1c9e4:	d0d2      	beq.n	1c98c <nrf91_socket_offload_getaddrinfo+0xc6>
   1c9e6:	dc0d      	bgt.n	1ca04 <nrf91_socket_offload_getaddrinfo+0x13e>
   1c9e8:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1c9ec:	d013      	beq.n	1ca16 <nrf91_socket_offload_getaddrinfo+0x150>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1c9ee:	f06f 032a 	mvn.w	r3, #42	; 0x2a
   1c9f2:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   1c9f4:	2300      	movs	r3, #0
   1c9f6:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   1c9f8:	4620      	mov	r0, r4
   1c9fa:	f000 faa7 	bl	1cf4c <k_free>
			retval = DNS_EAI_SOCKTYPE;
   1c9fe:	f06f 0506 	mvn.w	r5, #6
   1ca02:	e790      	b.n	1c926 <nrf91_socket_offload_getaddrinfo+0x60>
	switch (proto) {
   1ca04:	f240 2102 	movw	r1, #514	; 0x202
   1ca08:	428b      	cmp	r3, r1
   1ca0a:	d0bf      	beq.n	1c98c <nrf91_socket_offload_getaddrinfo+0xc6>
   1ca0c:	f240 2103 	movw	r1, #515	; 0x203
   1ca10:	428b      	cmp	r3, r1
   1ca12:	d0bb      	beq.n	1c98c <nrf91_socket_offload_getaddrinfo+0xc6>
   1ca14:	e7eb      	b.n	1c9ee <nrf91_socket_offload_getaddrinfo+0x128>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1ca16:	f240 1311 	movw	r3, #273	; 0x111
   1ca1a:	e7b7      	b.n	1c98c <nrf91_socket_offload_getaddrinfo+0xc6>
   1ca1c:	f44f 7381 	mov.w	r3, #258	; 0x102
   1ca20:	e7b4      	b.n	1c98c <nrf91_socket_offload_getaddrinfo+0xc6>
   1ca22:	2311      	movs	r3, #17
   1ca24:	e7b2      	b.n	1c98c <nrf91_socket_offload_getaddrinfo+0xc6>
   1ca26:	2306      	movs	r3, #6
   1ca28:	e7b0      	b.n	1c98c <nrf91_socket_offload_getaddrinfo+0xc6>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   1ca2a:	2a0a      	cmp	r2, #10
   1ca2c:	d1e4      	bne.n	1c9f8 <nrf91_socket_offload_getaddrinfo+0x132>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1ca2e:	2018      	movs	r0, #24
   1ca30:	f7fc fe88 	bl	19744 <k_malloc>
   1ca34:	4682      	mov	sl, r0
   1ca36:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   1ca38:	b190      	cbz	r0, 1ca60 <nrf91_socket_offload_getaddrinfo+0x19a>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1ca3a:	2318      	movs	r3, #24
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1ca3c:	2210      	movs	r2, #16
			(const struct nrf_sockaddr_in6 *)nrf_in->ai_addr);
   1ca3e:	f8d6 b014 	ldr.w	fp, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1ca42:	6123      	str	r3, [r4, #16]
	ptr->sin6_port = nrf_in->sin6_port;
   1ca44:	f8bb 3008 	ldrh.w	r3, [fp, #8]
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1ca48:	eb0b 0102 	add.w	r1, fp, r2
	ptr->sin6_port = nrf_in->sin6_port;
   1ca4c:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   1ca4e:	f820 9b04 	strh.w	r9, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1ca52:	f7ff f9df 	bl	1be14 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1ca56:	f8db 3020 	ldr.w	r3, [fp, #32]
   1ca5a:	f88a 3014 	strb.w	r3, [sl, #20]
		} else if (error == -EAFNOSUPPORT) {
   1ca5e:	e7a7      	b.n	1c9b0 <nrf91_socket_offload_getaddrinfo+0xea>
			k_free(next_z_res);
   1ca60:	4620      	mov	r0, r4
   1ca62:	f000 fa73 	bl	1cf4c <k_free>
			retval = DNS_EAI_MEMORY;
   1ca66:	f06f 0509 	mvn.w	r5, #9
   1ca6a:	e75c      	b.n	1c926 <nrf91_socket_offload_getaddrinfo+0x60>
			latest_z_res->ai_next = next_z_res;
   1ca6c:	61fc      	str	r4, [r7, #28]
   1ca6e:	e7a3      	b.n	1c9b8 <nrf91_socket_offload_getaddrinfo+0xf2>
			return DNS_EAI_SOCKTYPE;
   1ca70:	f06f 0506 	mvn.w	r5, #6
   1ca74:	e7a7      	b.n	1c9c6 <nrf91_socket_offload_getaddrinfo+0x100>
			return DNS_EAI_ADDRFAMILY;
   1ca76:	f06f 0508 	mvn.w	r5, #8
   1ca7a:	e7a4      	b.n	1c9c6 <nrf91_socket_offload_getaddrinfo+0x100>

0001ca7c <nrf91_socket_offload_setsockopt>:
{
   1ca7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   1ca80:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   1ca84:	b086      	sub	sp, #24
   1ca86:	4680      	mov	r8, r0
   1ca88:	460c      	mov	r4, r1
   1ca8a:	4617      	mov	r7, r2
   1ca8c:	461d      	mov	r5, r3
   1ca8e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	switch (z_in_level) {
   1ca90:	d002      	beq.n	1ca98 <nrf91_socket_offload_setsockopt+0x1c>
   1ca92:	dc1c      	bgt.n	1cace <nrf91_socket_offload_setsockopt+0x52>
   1ca94:	2901      	cmp	r1, #1
   1ca96:	d122      	bne.n	1cade <nrf91_socket_offload_setsockopt+0x62>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   1ca98:	aa03      	add	r2, sp, #12
   1ca9a:	4639      	mov	r1, r7
   1ca9c:	4620      	mov	r0, r4
   1ca9e:	f7f3 f86f 	bl	fb80 <z_to_nrf_optname>
   1caa2:	2800      	cmp	r0, #0
   1caa4:	db1b      	blt.n	1cade <nrf91_socket_offload_setsockopt+0x62>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   1caa6:	2c01      	cmp	r4, #1
   1caa8:	d107      	bne.n	1caba <nrf91_socket_offload_setsockopt+0x3e>
   1caaa:	2f14      	cmp	r7, #20
   1caac:	d105      	bne.n	1caba <nrf91_socket_offload_setsockopt+0x3e>
		nrf_optlen = sizeof(struct nrf_timeval);
   1caae:	2608      	movs	r6, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   1cab0:	682b      	ldr	r3, [r5, #0]
   1cab2:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1cab4:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   1cab6:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1cab8:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1caba:	9600      	str	r6, [sp, #0]
   1cabc:	462b      	mov	r3, r5
   1cabe:	9a03      	ldr	r2, [sp, #12]
   1cac0:	4621      	mov	r1, r4
   1cac2:	4640      	mov	r0, r8
   1cac4:	f7f8 fea8 	bl	15818 <nrf_setsockopt>
}
   1cac8:	b006      	add	sp, #24
   1caca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1cace:	f240 2302 	movw	r3, #514	; 0x202
   1cad2:	4299      	cmp	r1, r3
   1cad4:	d0e0      	beq.n	1ca98 <nrf91_socket_offload_setsockopt+0x1c>
   1cad6:	f240 2303 	movw	r3, #515	; 0x203
   1cada:	4299      	cmp	r1, r3
   1cadc:	e7db      	b.n	1ca96 <nrf91_socket_offload_setsockopt+0x1a>
	errno = ENOPROTOOPT;
   1cade:	f7ff fcfb 	bl	1c4d8 <z_errno>
   1cae2:	232a      	movs	r3, #42	; 0x2a
   1cae4:	6003      	str	r3, [r0, #0]
   1cae6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1caea:	e7ed      	b.n	1cac8 <nrf91_socket_offload_setsockopt+0x4c>

0001caec <nrf91_socket_offload_sendto>:
{
   1caec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1caf0:	b08d      	sub	sp, #52	; 0x34
   1caf2:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1caf4:	4605      	mov	r5, r0
   1caf6:	460e      	mov	r6, r1
   1caf8:	4617      	mov	r7, r2
   1cafa:	4698      	mov	r8, r3
	if (to == NULL) {
   1cafc:	b96c      	cbnz	r4, 1cb1a <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1cafe:	4618      	mov	r0, r3
   1cb00:	f7ff fca0 	bl	1c444 <z_to_nrf_flags>
   1cb04:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1cb08:	4603      	mov	r3, r0
   1cb0a:	463a      	mov	r2, r7
   1cb0c:	4631      	mov	r1, r6
   1cb0e:	4628      	mov	r0, r5
   1cb10:	f7f8 fdcc 	bl	156ac <nrf_sendto>
}
   1cb14:	b00d      	add	sp, #52	; 0x34
   1cb16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   1cb1a:	8823      	ldrh	r3, [r4, #0]
   1cb1c:	2b01      	cmp	r3, #1
   1cb1e:	d110      	bne.n	1cb42 <nrf91_socket_offload_sendto+0x56>
	nrf_out->sin_port = ptr->sin_port;
   1cb20:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1cb22:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   1cb24:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   1cb28:	2302      	movs	r3, #2
   1cb2a:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1cb2c:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1cb2e:	4640      	mov	r0, r8
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1cb30:	f88d 100c 	strb.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1cb34:	9306      	str	r3, [sp, #24]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1cb36:	f7ff fc85 	bl	1c444 <z_to_nrf_flags>
   1cb3a:	9101      	str	r1, [sp, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1cb3c:	ab03      	add	r3, sp, #12
   1cb3e:	9300      	str	r3, [sp, #0]
   1cb40:	e7e2      	b.n	1cb08 <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   1cb42:	2b02      	cmp	r3, #2
   1cb44:	d115      	bne.n	1cb72 <nrf91_socket_offload_sendto+0x86>
	nrf_out->sin6_port = ptr->sin6_port;
   1cb46:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1cb48:	f04f 0924 	mov.w	r9, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1cb4c:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin6_family = NRF_AF_INET6;
   1cb50:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1cb52:	2210      	movs	r2, #16
   1cb54:	1d21      	adds	r1, r4, #4
   1cb56:	a807      	add	r0, sp, #28
	nrf_out->sin6_family = NRF_AF_INET6;
   1cb58:	9304      	str	r3, [sp, #16]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1cb5a:	f88d 900c 	strb.w	r9, [sp, #12]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1cb5e:	f7ff f959 	bl	1be14 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1cb62:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1cb64:	4640      	mov	r0, r8
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1cb66:	930b      	str	r3, [sp, #44]	; 0x2c
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1cb68:	f7ff fc6c 	bl	1c444 <z_to_nrf_flags>
   1cb6c:	f8cd 9004 	str.w	r9, [sp, #4]
   1cb70:	e7e4      	b.n	1cb3c <nrf91_socket_offload_sendto+0x50>
	errno = ENOTSUP;
   1cb72:	f7ff fcb1 	bl	1c4d8 <z_errno>
   1cb76:	2323      	movs	r3, #35	; 0x23
   1cb78:	6003      	str	r3, [r0, #0]
	return retval;
   1cb7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cb7e:	e7c9      	b.n	1cb14 <nrf91_socket_offload_sendto+0x28>

0001cb80 <nrf91_socket_offload_bind>:
{
   1cb80:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   1cb82:	880b      	ldrh	r3, [r1, #0]
{
   1cb84:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   1cb86:	2b01      	cmp	r3, #1
{
   1cb88:	4606      	mov	r6, r0
   1cb8a:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   1cb8c:	d10e      	bne.n	1cbac <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   1cb8e:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1cb90:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1cb92:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   1cb96:	2302      	movs	r3, #2
   1cb98:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1cb9a:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1cb9c:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1cba0:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   1cba2:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1cba4:	f7f8 fe26 	bl	157f4 <nrf_bind>
}
   1cba8:	b00a      	add	sp, #40	; 0x28
   1cbaa:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   1cbac:	2b02      	cmp	r3, #2
   1cbae:	d112      	bne.n	1cbd6 <nrf91_socket_offload_bind+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   1cbb0:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1cbb2:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1cbb4:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   1cbb8:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1cbba:	2210      	movs	r2, #16
   1cbbc:	3104      	adds	r1, #4
   1cbbe:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   1cbc0:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1cbc2:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1cbc6:	f7ff f925 	bl	1be14 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1cbca:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1cbcc:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1cbce:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1cbd0:	a901      	add	r1, sp, #4
   1cbd2:	4630      	mov	r0, r6
   1cbd4:	e7e6      	b.n	1cba4 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   1cbd6:	f7ff fc7f 	bl	1c4d8 <z_errno>
   1cbda:	2323      	movs	r3, #35	; 0x23
   1cbdc:	6003      	str	r3, [r0, #0]
   1cbde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cbe2:	e7e1      	b.n	1cba8 <nrf91_socket_offload_bind+0x28>

0001cbe4 <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   1cbe4:	6843      	ldr	r3, [r0, #4]
   1cbe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1cbe8:	b103      	cbz	r3, 1cbec <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   1cbea:	4718      	bx	r3
}
   1cbec:	4770      	bx	lr

0001cbee <response_handler>:
	write_uart_string(response);
   1cbee:	4608      	mov	r0, r1
   1cbf0:	f7f3 bb76 	b.w	102e0 <write_uart_string>

0001cbf4 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   1cbf4:	280d      	cmp	r0, #13
   1cbf6:	d004      	beq.n	1cc02 <is_lfcr+0xe>
   1cbf8:	f1a0 030a 	sub.w	r3, r0, #10
   1cbfc:	4258      	negs	r0, r3
   1cbfe:	4158      	adcs	r0, r3
   1cc00:	4770      	bx	lr
		return true;
   1cc02:	2001      	movs	r0, #1
}
   1cc04:	4770      	bx	lr

0001cc06 <skip_command_prefix>:
{
   1cc06:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   1cc08:	6802      	ldr	r2, [r0, #0]
{
   1cc0a:	4601      	mov	r1, r0
	*cmd += sizeof("AT") - 1;
   1cc0c:	1c93      	adds	r3, r2, #2
   1cc0e:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   1cc10:	7894      	ldrb	r4, [r2, #2]
   1cc12:	4620      	mov	r0, r4
   1cc14:	f7ff ffee 	bl	1cbf4 <is_lfcr>
   1cc18:	b910      	cbnz	r0, 1cc20 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1cc1a:	b10c      	cbz	r4, 1cc20 <skip_command_prefix+0x1a>
	(*cmd)++;
   1cc1c:	3203      	adds	r2, #3
   1cc1e:	600a      	str	r2, [r1, #0]
}
   1cc20:	bd10      	pop	{r4, pc}

0001cc22 <is_valid_notification_char>:
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
}

static inline int toupper(int chr)
{
	return (int)((chr >= (int)'a' && chr <=
   1cc22:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1cc26:	2b19      	cmp	r3, #25
   1cc28:	bf98      	it	ls
   1cc2a:	3820      	subls	r0, #32
	if ((chr >= 'A') && (chr <= 'Z')) {
   1cc2c:	3841      	subs	r0, #65	; 0x41
   1cc2e:	b2c0      	uxtb	r0, r0
}
   1cc30:	2819      	cmp	r0, #25
   1cc32:	bf8c      	ite	hi
   1cc34:	2000      	movhi	r0, #0
   1cc36:	2001      	movls	r0, #1
   1cc38:	4770      	bx	lr

0001cc3a <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   1cc3a:	b510      	push	{r4, lr}
   1cc3c:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   1cc3e:	f7ff f8b7 	bl	1bdb0 <strlen>
   1cc42:	2801      	cmp	r0, #1
   1cc44:	d91e      	bls.n	1cc84 <is_command+0x4a>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   1cc46:	7823      	ldrb	r3, [r4, #0]
   1cc48:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1cc4c:	2a19      	cmp	r2, #25
   1cc4e:	bf98      	it	ls
   1cc50:	3b20      	subls	r3, #32
   1cc52:	2b41      	cmp	r3, #65	; 0x41
   1cc54:	d116      	bne.n	1cc84 <is_command+0x4a>
   1cc56:	7863      	ldrb	r3, [r4, #1]
   1cc58:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1cc5c:	2a19      	cmp	r2, #25
   1cc5e:	bf98      	it	ls
   1cc60:	3b20      	subls	r3, #32
   1cc62:	2b54      	cmp	r3, #84	; 0x54
   1cc64:	d10e      	bne.n	1cc84 <is_command+0x4a>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1cc66:	78a2      	ldrb	r2, [r4, #2]
   1cc68:	2a25      	cmp	r2, #37	; 0x25
   1cc6a:	d00d      	beq.n	1cc88 <is_command+0x4e>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   1cc6c:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   1cc70:	2b23      	cmp	r3, #35	; 0x23
   1cc72:	d009      	beq.n	1cc88 <is_command+0x4e>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   1cc74:	4610      	mov	r0, r2
   1cc76:	f7ff ffbd 	bl	1cbf4 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   1cc7a:	b910      	cbnz	r0, 1cc82 <is_command+0x48>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1cc7c:	fab2 f082 	clz	r0, r2
   1cc80:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   1cc82:	bd10      	pop	{r4, pc}
		return false;
   1cc84:	2000      	movs	r0, #0
   1cc86:	e7fc      	b.n	1cc82 <is_command+0x48>
		return true;
   1cc88:	2001      	movs	r0, #1
   1cc8a:	e7fa      	b.n	1cc82 <is_command+0x48>

0001cc8c <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   1cc8c:	6803      	ldr	r3, [r0, #0]
   1cc8e:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   1cc90:	bf83      	ittte	hi
   1cc92:	230c      	movhi	r3, #12
   1cc94:	6840      	ldrhi	r0, [r0, #4]
   1cc96:	fb03 0001 	mlahi	r0, r3, r1, r0
		return NULL;
   1cc9a:	2000      	movls	r0, #0
}
   1cc9c:	4770      	bx	lr

0001cc9e <at_param_size>:
/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
	__ASSERT(param != NULL, "Parameter cannot be NULL.");

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   1cc9e:	7803      	ldrb	r3, [r0, #0]
   1cca0:	2b01      	cmp	r3, #1
   1cca2:	d006      	beq.n	1ccb2 <at_param_size+0x14>
		return sizeof(u16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   1cca4:	2b02      	cmp	r3, #2
   1cca6:	d006      	beq.n	1ccb6 <at_param_size+0x18>
		return sizeof(u32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   1cca8:	3b03      	subs	r3, #3
   1ccaa:	2b01      	cmp	r3, #1
   1ccac:	d805      	bhi.n	1ccba <at_param_size+0x1c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   1ccae:	6840      	ldr	r0, [r0, #4]
   1ccb0:	4770      	bx	lr
		return sizeof(u16_t);
   1ccb2:	2002      	movs	r0, #2
   1ccb4:	4770      	bx	lr
		return sizeof(u32_t);
   1ccb6:	2004      	movs	r0, #4
   1ccb8:	4770      	bx	lr
	}

	return 0;
   1ccba:	2000      	movs	r0, #0
}
   1ccbc:	4770      	bx	lr

0001ccbe <at_param_clear>:
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1ccbe:	7803      	ldrb	r3, [r0, #0]
{
   1ccc0:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1ccc2:	3b03      	subs	r3, #3
   1ccc4:	2b01      	cmp	r3, #1
{
   1ccc6:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1ccc8:	d802      	bhi.n	1ccd0 <at_param_clear+0x12>
		k_free(param->value.str_val);
   1ccca:	6880      	ldr	r0, [r0, #8]
   1cccc:	f000 f93e 	bl	1cf4c <k_free>
	param->value.int_val = 0;
   1ccd0:	2300      	movs	r3, #0
   1ccd2:	60a3      	str	r3, [r4, #8]
}
   1ccd4:	bd10      	pop	{r4, pc}

0001ccd6 <at_params_list_init>:

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   1ccd6:	b538      	push	{r3, r4, r5, lr}
   1ccd8:	460d      	mov	r5, r1
	if (list == NULL) {
   1ccda:	4604      	mov	r4, r0
   1ccdc:	b140      	cbz	r0, 1ccf0 <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   1ccde:	210c      	movs	r1, #12
   1cce0:	4628      	mov	r0, r5
   1cce2:	f000 f938 	bl	1cf56 <k_calloc>
   1cce6:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   1cce8:	b128      	cbz	r0, 1ccf6 <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   1ccea:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   1ccec:	6025      	str	r5, [r4, #0]
}
   1ccee:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1ccf0:	f06f 0015 	mvn.w	r0, #21
   1ccf4:	e7fb      	b.n	1ccee <at_params_list_init+0x18>
		return -ENOMEM;
   1ccf6:	f06f 000b 	mvn.w	r0, #11
   1ccfa:	e7f8      	b.n	1ccee <at_params_list_init+0x18>

0001ccfc <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   1ccfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (list == NULL || list->params == NULL) {
   1ccfe:	4605      	mov	r5, r0
   1cd00:	b130      	cbz	r0, 1cd10 <at_params_list_clear+0x14>
   1cd02:	6843      	ldr	r3, [r0, #4]
   1cd04:	b123      	cbz	r3, 1cd10 <at_params_list_clear+0x14>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   1cd06:	2400      	movs	r4, #0
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
   1cd08:	270c      	movs	r7, #12
	for (size_t i = 0; i < list->param_count; ++i) {
   1cd0a:	682b      	ldr	r3, [r5, #0]
   1cd0c:	429c      	cmp	r4, r3
   1cd0e:	d300      	bcc.n	1cd12 <at_params_list_clear+0x16>
		at_param_init(&params[i]);
	}
}
   1cd10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		at_param_clear(&params[i]);
   1cd12:	686e      	ldr	r6, [r5, #4]
   1cd14:	fb07 6604 	mla	r6, r7, r4, r6
   1cd18:	4630      	mov	r0, r6
   1cd1a:	f7ff ffd0 	bl	1ccbe <at_param_clear>
	memset(param, 0, sizeof(struct at_param));
   1cd1e:	220c      	movs	r2, #12
   1cd20:	2100      	movs	r1, #0
   1cd22:	4630      	mov	r0, r6
   1cd24:	f7ff f8a0 	bl	1be68 <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   1cd28:	3401      	adds	r4, #1
   1cd2a:	e7ee      	b.n	1cd0a <at_params_list_clear+0xe>

0001cd2c <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   1cd2c:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   1cd2e:	4604      	mov	r4, r0
   1cd30:	b148      	cbz	r0, 1cd46 <at_params_list_free+0x1a>
   1cd32:	6843      	ldr	r3, [r0, #4]
   1cd34:	b13b      	cbz	r3, 1cd46 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   1cd36:	2500      	movs	r5, #0
	at_params_list_clear(list);
   1cd38:	f7ff ffe0 	bl	1ccfc <at_params_list_clear>
	list->param_count = 0;
   1cd3c:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   1cd3e:	6860      	ldr	r0, [r4, #4]
   1cd40:	f000 f904 	bl	1cf4c <k_free>
	list->params = NULL;
   1cd44:	6065      	str	r5, [r4, #4]
}
   1cd46:	bd38      	pop	{r3, r4, r5, pc}

0001cd48 <at_params_short_put>:

int at_params_short_put(const struct at_param_list *list, size_t index,
			u16_t value)
{
   1cd48:	b538      	push	{r3, r4, r5, lr}
   1cd4a:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   1cd4c:	b160      	cbz	r0, 1cd68 <at_params_short_put+0x20>
   1cd4e:	6843      	ldr	r3, [r0, #4]
   1cd50:	b153      	cbz	r3, 1cd68 <at_params_short_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1cd52:	f7ff ff9b 	bl	1cc8c <at_params_get>

	if (param == NULL) {
   1cd56:	4604      	mov	r4, r0
   1cd58:	b130      	cbz	r0, 1cd68 <at_params_short_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   1cd5a:	f7ff ffb0 	bl	1ccbe <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_SHORT;
   1cd5e:	2301      	movs	r3, #1
	param->value.int_val = (u32_t)(value & USHRT_MAX);
	return 0;
   1cd60:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   1cd62:	7023      	strb	r3, [r4, #0]
	param->value.int_val = (u32_t)(value & USHRT_MAX);
   1cd64:	60a5      	str	r5, [r4, #8]
}
   1cd66:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1cd68:	f06f 0015 	mvn.w	r0, #21
   1cd6c:	e7fb      	b.n	1cd66 <at_params_short_put+0x1e>

0001cd6e <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   1cd6e:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   1cd70:	b160      	cbz	r0, 1cd8c <at_params_empty_put+0x1e>
   1cd72:	6843      	ldr	r3, [r0, #4]
   1cd74:	b153      	cbz	r3, 1cd8c <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1cd76:	f7ff ff89 	bl	1cc8c <at_params_get>

	if (param == NULL) {
   1cd7a:	4604      	mov	r4, r0
   1cd7c:	b130      	cbz	r0, 1cd8c <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	at_param_clear(param);
   1cd7e:	f7ff ff9e 	bl	1ccbe <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   1cd82:	2305      	movs	r3, #5
	param->value.int_val = 0;
   1cd84:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   1cd86:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   1cd88:	60a0      	str	r0, [r4, #8]

	return 0;
}
   1cd8a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1cd8c:	f06f 0015 	mvn.w	r0, #21
   1cd90:	e7fb      	b.n	1cd8a <at_params_empty_put+0x1c>

0001cd92 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      u32_t value)
{
   1cd92:	b538      	push	{r3, r4, r5, lr}
   1cd94:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   1cd96:	b160      	cbz	r0, 1cdb2 <at_params_int_put+0x20>
   1cd98:	6843      	ldr	r3, [r0, #4]
   1cd9a:	b153      	cbz	r3, 1cdb2 <at_params_int_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1cd9c:	f7ff ff76 	bl	1cc8c <at_params_get>

	if (param == NULL) {
   1cda0:	4604      	mov	r4, r0
   1cda2:	b130      	cbz	r0, 1cdb2 <at_params_int_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   1cda4:	f7ff ff8b 	bl	1ccbe <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   1cda8:	2302      	movs	r3, #2
	param->value.int_val = value;
	return 0;
   1cdaa:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_INT;
   1cdac:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   1cdae:	60a5      	str	r5, [r4, #8]
}
   1cdb0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1cdb2:	f06f 0015 	mvn.w	r0, #21
   1cdb6:	e7fb      	b.n	1cdb0 <at_params_int_put+0x1e>

0001cdb8 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   1cdb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cdba:	4616      	mov	r6, r2
   1cdbc:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   1cdbe:	b1c0      	cbz	r0, 1cdf2 <at_params_string_put+0x3a>
   1cdc0:	6843      	ldr	r3, [r0, #4]
   1cdc2:	b1b3      	cbz	r3, 1cdf2 <at_params_string_put+0x3a>
   1cdc4:	b1aa      	cbz	r2, 1cdf2 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1cdc6:	f7ff ff61 	bl	1cc8c <at_params_get>

	if (param == NULL) {
   1cdca:	4604      	mov	r4, r0
   1cdcc:	b188      	cbz	r0, 1cdf2 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   1cdce:	1c68      	adds	r0, r5, #1
   1cdd0:	f7fc fcb8 	bl	19744 <k_malloc>

	if (param_value == NULL) {
   1cdd4:	4607      	mov	r7, r0
   1cdd6:	b178      	cbz	r0, 1cdf8 <at_params_string_put+0x40>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);
   1cdd8:	462a      	mov	r2, r5
   1cdda:	4631      	mov	r1, r6
   1cddc:	f7ff f81a 	bl	1be14 <memcpy>

	at_param_clear(param);
   1cde0:	4620      	mov	r0, r4
   1cde2:	f7ff ff6c 	bl	1ccbe <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   1cde6:	2303      	movs	r3, #3
	param->value.str_val = param_value;

	return 0;
   1cde8:	2000      	movs	r0, #0
	param->size = str_len;
   1cdea:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   1cdec:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   1cdee:	60a7      	str	r7, [r4, #8]
}
   1cdf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   1cdf2:	f06f 0015 	mvn.w	r0, #21
   1cdf6:	e7fb      	b.n	1cdf0 <at_params_string_put+0x38>
		return -ENOMEM;
   1cdf8:	f06f 000b 	mvn.w	r0, #11
   1cdfc:	e7f8      	b.n	1cdf0 <at_params_string_put+0x38>

0001cdfe <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const u32_t *array, size_t array_len)
{
   1cdfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ce00:	4616      	mov	r6, r2
   1ce02:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   1ce04:	b1c0      	cbz	r0, 1ce38 <at_params_array_put+0x3a>
   1ce06:	6843      	ldr	r3, [r0, #4]
   1ce08:	b1b3      	cbz	r3, 1ce38 <at_params_array_put+0x3a>
   1ce0a:	b1aa      	cbz	r2, 1ce38 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1ce0c:	f7ff ff3e 	bl	1cc8c <at_params_get>

	if (param == NULL) {
   1ce10:	4604      	mov	r4, r0
   1ce12:	b188      	cbz	r0, 1ce38 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	u32_t *param_value = (u32_t *)k_malloc(array_len);
   1ce14:	4628      	mov	r0, r5
   1ce16:	f7fc fc95 	bl	19744 <k_malloc>

	if (param_value == NULL) {
   1ce1a:	4607      	mov	r7, r0
   1ce1c:	b178      	cbz	r0, 1ce3e <at_params_array_put+0x40>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);
   1ce1e:	462a      	mov	r2, r5
   1ce20:	4631      	mov	r1, r6
   1ce22:	f7fe fff7 	bl	1be14 <memcpy>

	at_param_clear(param);
   1ce26:	4620      	mov	r0, r4
   1ce28:	f7ff ff49 	bl	1ccbe <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   1ce2c:	2304      	movs	r3, #4
	param->value.array_val = param_value;

	return 0;
   1ce2e:	2000      	movs	r0, #0
	param->size = array_len;
   1ce30:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   1ce32:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   1ce34:	60a7      	str	r7, [r4, #8]
}
   1ce36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   1ce38:	f06f 0015 	mvn.w	r0, #21
   1ce3c:	e7fb      	b.n	1ce36 <at_params_array_put+0x38>
		return -ENOMEM;
   1ce3e:	f06f 000b 	mvn.w	r0, #11
   1ce42:	e7f8      	b.n	1ce36 <at_params_array_put+0x38>

0001ce44 <at_params_int_get>:
	return 0;
}

int at_params_int_get(const struct at_param_list *list, size_t index,
		      u32_t *value)
{
   1ce44:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   1ce46:	b168      	cbz	r0, 1ce64 <at_params_int_get+0x20>
   1ce48:	6843      	ldr	r3, [r0, #4]
   1ce4a:	b15b      	cbz	r3, 1ce64 <at_params_int_get+0x20>
   1ce4c:	b152      	cbz	r2, 1ce64 <at_params_int_get+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1ce4e:	f7ff ff1d 	bl	1cc8c <at_params_get>

	if (param == NULL) {
   1ce52:	b138      	cbz	r0, 1ce64 <at_params_int_get+0x20>
		return -EINVAL;
	}

	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   1ce54:	7803      	ldrb	r3, [r0, #0]
   1ce56:	3b01      	subs	r3, #1
   1ce58:	2b01      	cmp	r3, #1
   1ce5a:	d803      	bhi.n	1ce64 <at_params_int_get+0x20>
	    (param->type != AT_PARAM_TYPE_NUM_SHORT)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   1ce5c:	6883      	ldr	r3, [r0, #8]
	return 0;
   1ce5e:	2000      	movs	r0, #0
	*value = param->value.int_val;
   1ce60:	6013      	str	r3, [r2, #0]
}
   1ce62:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1ce64:	f06f 0015 	mvn.w	r0, #21
   1ce68:	e7fb      	b.n	1ce62 <at_params_int_get+0x1e>

0001ce6a <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   1ce6a:	b570      	push	{r4, r5, r6, lr}
   1ce6c:	4616      	mov	r6, r2
   1ce6e:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   1ce70:	b1c0      	cbz	r0, 1cea4 <at_params_string_get+0x3a>
   1ce72:	6843      	ldr	r3, [r0, #4]
   1ce74:	b1b3      	cbz	r3, 1cea4 <at_params_string_get+0x3a>
   1ce76:	b1aa      	cbz	r2, 1cea4 <at_params_string_get+0x3a>
	    value == NULL || len == NULL) {
   1ce78:	b1a4      	cbz	r4, 1cea4 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1ce7a:	f7ff ff07 	bl	1cc8c <at_params_get>

	if (param == NULL) {
   1ce7e:	4601      	mov	r1, r0
   1ce80:	b180      	cbz	r0, 1cea4 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   1ce82:	7803      	ldrb	r3, [r0, #0]
   1ce84:	2b03      	cmp	r3, #3
   1ce86:	d10d      	bne.n	1cea4 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);
   1ce88:	f7ff ff09 	bl	1cc9e <at_param_size>

	if (*len < param_len) {
   1ce8c:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   1ce8e:	4605      	mov	r5, r0
	if (*len < param_len) {
   1ce90:	4283      	cmp	r3, r0
   1ce92:	d30a      	bcc.n	1ceaa <at_params_string_get+0x40>
		return -ENOMEM;
	}

	memcpy(value, param->value.str_val, param_len);
   1ce94:	4602      	mov	r2, r0
   1ce96:	6889      	ldr	r1, [r1, #8]
   1ce98:	4630      	mov	r0, r6
   1ce9a:	f7fe ffbb 	bl	1be14 <memcpy>
	*len = param_len;

	return 0;
   1ce9e:	2000      	movs	r0, #0
	*len = param_len;
   1cea0:	6025      	str	r5, [r4, #0]
}
   1cea2:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1cea4:	f06f 0015 	mvn.w	r0, #21
   1cea8:	e7fb      	b.n	1cea2 <at_params_string_get+0x38>
		return -ENOMEM;
   1ceaa:	f06f 000b 	mvn.w	r0, #11
   1ceae:	e7f8      	b.n	1cea2 <at_params_string_get+0x38>

0001ceb0 <response_is_valid>:
{
   1ceb0:	b570      	push	{r4, r5, r6, lr}
   1ceb2:	4606      	mov	r6, r0
	if ((response_len < strlen(check)) ||
   1ceb4:	4610      	mov	r0, r2
{
   1ceb6:	460d      	mov	r5, r1
   1ceb8:	4614      	mov	r4, r2
	if ((response_len < strlen(check)) ||
   1ceba:	f7fe ff79 	bl	1bdb0 <strlen>
   1cebe:	42a8      	cmp	r0, r5
   1cec0:	d808      	bhi.n	1ced4 <response_is_valid+0x24>
	    (memcmp(response, check, response_len) != 0)) {
   1cec2:	462a      	mov	r2, r5
   1cec4:	4621      	mov	r1, r4
   1cec6:	4630      	mov	r0, r6
   1cec8:	f7fe ff94 	bl	1bdf4 <memcmp>
	if ((response_len < strlen(check)) ||
   1cecc:	fab0 f080 	clz	r0, r0
   1ced0:	0940      	lsrs	r0, r0, #5
}
   1ced2:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   1ced4:	2000      	movs	r0, #0
   1ced6:	e7fc      	b.n	1ced2 <response_is_valid+0x22>

0001ced8 <lte_lc_init_and_connect>:
{
   1ced8:	b508      	push	{r3, lr}
	ret = w_lte_lc_init();
   1ceda:	f7f3 fd93 	bl	10a04 <w_lte_lc_init>
	if (ret) {
   1cede:	b918      	cbnz	r0, 1cee8 <lte_lc_init_and_connect+0x10>
}
   1cee0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return w_lte_lc_connect();
   1cee4:	f7f3 be86 	b.w	10bf4 <w_lte_lc_connect>
}
   1cee8:	bd08      	pop	{r3, pc}

0001ceea <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   1ceea:	f7fe bdcc 	b.w	1ba86 <z_clock_idle_exit>

0001ceee <k_mem_slab_init>:
{
   1ceee:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1cef0:	2400      	movs	r4, #0
   1cef2:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1cef4:	ea41 0402 	orr.w	r4, r1, r2
   1cef8:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   1cefc:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   1cf00:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1cf02:	d10c      	bne.n	1cf1e <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   1cf04:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1cf06:	42a3      	cmp	r3, r4
   1cf08:	d103      	bne.n	1cf12 <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
   1cf0a:	e9c0 0000 	strd	r0, r0, [r0]
   1cf0e:	2000      	movs	r0, #0
}
   1cf10:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1cf12:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1cf14:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   1cf16:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   1cf18:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   1cf1a:	4411      	add	r1, r2
   1cf1c:	e7f3      	b.n	1cf06 <k_mem_slab_init+0x18>
		return -EINVAL;
   1cf1e:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1cf22:	e7f5      	b.n	1cf10 <k_mem_slab_init+0x22>

0001cf24 <k_mem_pool_malloc>:
{
   1cf24:	b513      	push	{r0, r1, r4, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1cf26:	2404      	movs	r4, #4
   1cf28:	190a      	adds	r2, r1, r4
   1cf2a:	d204      	bcs.n	1cf36 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   1cf2c:	2300      	movs	r3, #0
   1cf2e:	4669      	mov	r1, sp
   1cf30:	f7fc fb90 	bl	19654 <k_mem_pool_alloc>
   1cf34:	b110      	cbz	r0, 1cf3c <k_mem_pool_malloc+0x18>
		return NULL;
   1cf36:	2000      	movs	r0, #0
}
   1cf38:	b002      	add	sp, #8
   1cf3a:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   1cf3c:	4622      	mov	r2, r4
   1cf3e:	a901      	add	r1, sp, #4
   1cf40:	9800      	ldr	r0, [sp, #0]
   1cf42:	f7fe ff67 	bl	1be14 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   1cf46:	9800      	ldr	r0, [sp, #0]
   1cf48:	3004      	adds	r0, #4
   1cf4a:	e7f5      	b.n	1cf38 <k_mem_pool_malloc+0x14>

0001cf4c <k_free>:
	if (ptr != NULL) {
   1cf4c:	b110      	cbz	r0, 1cf54 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   1cf4e:	3804      	subs	r0, #4
   1cf50:	f7fc bbcc 	b.w	196ec <k_mem_pool_free_id>
}
   1cf54:	4770      	bx	lr

0001cf56 <k_calloc>:
{
   1cf56:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   1cf58:	fba0 4501 	umull	r4, r5, r0, r1
   1cf5c:	b935      	cbnz	r5, 1cf6c <k_calloc+0x16>
	ret = k_malloc(bounds);
   1cf5e:	4620      	mov	r0, r4
   1cf60:	f7fc fbf0 	bl	19744 <k_malloc>
	if (ret != NULL) {
   1cf64:	4606      	mov	r6, r0
   1cf66:	b918      	cbnz	r0, 1cf70 <k_calloc+0x1a>
}
   1cf68:	4630      	mov	r0, r6
   1cf6a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1cf6c:	2600      	movs	r6, #0
   1cf6e:	e7fb      	b.n	1cf68 <k_calloc+0x12>
		(void)memset(ret, 0, bounds);
   1cf70:	4622      	mov	r2, r4
   1cf72:	4629      	mov	r1, r5
   1cf74:	f7fe ff78 	bl	1be68 <memset>
   1cf78:	e7f6      	b.n	1cf68 <k_calloc+0x12>

0001cf7a <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   1cf7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cf7e:	4604      	mov	r4, r0
   1cf80:	460f      	mov	r7, r1
   1cf82:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1cf84:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1cf88:	f04f 0220 	mov.w	r2, #32
   1cf8c:	f3ef 8611 	mrs	r6, BASEPRI
   1cf90:	f382 8811 	msr	BASEPRI, r2
   1cf94:	f3bf 8f6f 	isb	sy
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   1cf98:	b1db      	cbz	r3, 1cfd2 <queue_insert+0x58>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   1cf9a:	2008      	movs	r0, #8
   1cf9c:	f7fc fbd8 	bl	19750 <z_thread_malloc>
		if (anode == NULL) {
   1cfa0:	b938      	cbnz	r0, 1cfb2 <queue_insert+0x38>
	__asm__ volatile(
   1cfa2:	f386 8811 	msr	BASEPRI, r6
   1cfa6:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   1cfaa:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   1cfae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   1cfb2:	2301      	movs	r3, #1
		anode->data = data;
   1cfb4:	f8c0 8004 	str.w	r8, [r0, #4]
   1cfb8:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   1cfba:	6803      	ldr	r3, [r0, #0]
   1cfbc:	f003 0203 	and.w	r2, r3, #3
   1cfc0:	b95f      	cbnz	r7, 1cfda <queue_insert+0x60>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1cfc2:	6823      	ldr	r3, [r4, #0]
   1cfc4:	4313      	orrs	r3, r2
   1cfc6:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1cfc8:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1cfca:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1cfcc:	b973      	cbnz	r3, 1cfec <queue_insert+0x72>
	list->tail = node;
   1cfce:	6060      	str	r0, [r4, #4]
   1cfd0:	e00c      	b.n	1cfec <queue_insert+0x72>
	node->next_and_flags = flags;
   1cfd2:	f8c8 3000 	str.w	r3, [r8]
   1cfd6:	4640      	mov	r0, r8
   1cfd8:	e7ef      	b.n	1cfba <queue_insert+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1cfda:	683b      	ldr	r3, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1cfdc:	f033 0303 	bics.w	r3, r3, #3
   1cfe0:	d114      	bne.n	1d00c <queue_insert+0x92>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1cfe2:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   1cfe4:	6862      	ldr	r2, [r4, #4]
   1cfe6:	b95a      	cbnz	r2, 1d000 <queue_insert+0x86>
	list->head = node;
   1cfe8:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1cfec:	2104      	movs	r1, #4
   1cfee:	4628      	mov	r0, r5
   1cff0:	f000 fb27 	bl	1d642 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1cff4:	4628      	mov	r0, r5
   1cff6:	4631      	mov	r1, r6
   1cff8:	f000 f8c9 	bl	1d18e <z_reschedule>
	return 0;
   1cffc:	2000      	movs	r0, #0
   1cffe:	e7d6      	b.n	1cfae <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1d000:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d002:	f003 0303 	and.w	r3, r3, #3
   1d006:	4303      	orrs	r3, r0
   1d008:	6013      	str	r3, [r2, #0]
   1d00a:	e7e0      	b.n	1cfce <queue_insert+0x54>
   1d00c:	4313      	orrs	r3, r2
   1d00e:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1d010:	683b      	ldr	r3, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d012:	f003 0303 	and.w	r3, r3, #3
   1d016:	4318      	orrs	r0, r3
   1d018:	6038      	str	r0, [r7, #0]
   1d01a:	e7e7      	b.n	1cfec <queue_insert+0x72>

0001d01c <z_queue_node_peek>:
{
   1d01c:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   1d01e:	4604      	mov	r4, r0
   1d020:	b130      	cbz	r0, 1d030 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1d022:	6802      	ldr	r2, [r0, #0]
   1d024:	0793      	lsls	r3, r2, #30
   1d026:	d003      	beq.n	1d030 <z_queue_node_peek+0x14>
		ret = anode->data;
   1d028:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1d02a:	b109      	cbz	r1, 1d030 <z_queue_node_peek+0x14>
			k_free(anode);
   1d02c:	f7ff ff8e 	bl	1cf4c <k_free>
}
   1d030:	4620      	mov	r0, r4
   1d032:	bd10      	pop	{r4, pc}

0001d034 <z_impl_k_queue_init>:
	list->head = NULL;
   1d034:	2300      	movs	r3, #0
	list->tail = NULL;
   1d036:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&queue->poll_events);
   1d03a:	f100 0308 	add.w	r3, r0, #8
   1d03e:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   1d042:	4770      	bx	lr

0001d044 <k_queue_append>:
	(void)queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   1d044:	460a      	mov	r2, r1
   1d046:	2300      	movs	r3, #0
   1d048:	6841      	ldr	r1, [r0, #4]
   1d04a:	f7ff bf96 	b.w	1cf7a <queue_insert>

0001d04e <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   1d04e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d052:	4604      	mov	r4, r0
   1d054:	b086      	sub	sp, #24
   1d056:	460d      	mov	r5, r1
	__asm__ volatile(
   1d058:	f04f 0320 	mov.w	r3, #32
   1d05c:	f3ef 8711 	mrs	r7, BASEPRI
   1d060:	f383 8811 	msr	BASEPRI, r3
   1d064:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   1d068:	6800      	ldr	r0, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1d06a:	b188      	cbz	r0, 1d090 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d06c:	6803      	ldr	r3, [r0, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1d06e:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d070:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1d074:	4290      	cmp	r0, r2
	list->head = node;
   1d076:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1d078:	bf08      	it	eq
   1d07a:	6063      	streq	r3, [r4, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1d07c:	2101      	movs	r1, #1
   1d07e:	f7ff ffcd 	bl	1d01c <z_queue_node_peek>
	__asm__ volatile(
   1d082:	f387 8811 	msr	BASEPRI, r7
   1d086:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   1d08a:	b006      	add	sp, #24
   1d08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   1d090:	2900      	cmp	r1, #0
   1d092:	d0f6      	beq.n	1d082 <z_impl_k_queue_get+0x34>
   1d094:	f387 8811 	msr	BASEPRI, r7
   1d098:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   1d09c:	2104      	movs	r1, #4
   1d09e:	4602      	mov	r2, r0
   1d0a0:	4623      	mov	r3, r4
   1d0a2:	eb0d 0001 	add.w	r0, sp, r1
   1d0a6:	f7fd faf3 	bl	1a690 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   1d0aa:	1c6a      	adds	r2, r5, #1
   1d0ac:	d002      	beq.n	1d0b4 <z_impl_k_queue_get+0x66>
	return z_impl_k_uptime_get();
   1d0ae:	f000 f995 	bl	1d3dc <z_impl_k_uptime_get>
   1d0b2:	4606      	mov	r6, r0
{
   1d0b4:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   1d0b6:	9b04      	ldr	r3, [sp, #16]
   1d0b8:	f36f 3310 	bfc	r3, #12, #5
   1d0bc:	9304      	str	r3, [sp, #16]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&events, *(uintptr_t *)&num_events, *(uintptr_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1d0be:	2101      	movs	r1, #1
   1d0c0:	1bea      	subs	r2, r5, r7
   1d0c2:	a801      	add	r0, sp, #4
   1d0c4:	f7fd faf8 	bl	1a6b8 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   1d0c8:	b118      	cbz	r0, 1d0d2 <z_impl_k_queue_get+0x84>
   1d0ca:	300b      	adds	r0, #11
   1d0cc:	d001      	beq.n	1d0d2 <z_impl_k_queue_get+0x84>
			return NULL;
   1d0ce:	2000      	movs	r0, #0
   1d0d0:	e7db      	b.n	1d08a <z_impl_k_queue_get+0x3c>
	__asm__ volatile(
   1d0d2:	f04f 0320 	mov.w	r3, #32
   1d0d6:	f3ef 8811 	mrs	r8, BASEPRI
   1d0da:	f383 8811 	msr	BASEPRI, r3
   1d0de:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   1d0e2:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   1d0e4:	b138      	cbz	r0, 1d0f6 <z_impl_k_queue_get+0xa8>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d0e6:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1d0e8:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d0ea:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1d0ee:	4290      	cmp	r0, r2
	list->head = node;
   1d0f0:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1d0f2:	bf08      	it	eq
   1d0f4:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   1d0f6:	2101      	movs	r1, #1
   1d0f8:	f7ff ff90 	bl	1d01c <z_queue_node_peek>
	__asm__ volatile(
   1d0fc:	f388 8811 	msr	BASEPRI, r8
   1d100:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   1d104:	2800      	cmp	r0, #0
   1d106:	d1c0      	bne.n	1d08a <z_impl_k_queue_get+0x3c>
   1d108:	1c6b      	adds	r3, r5, #1
   1d10a:	d0d4      	beq.n	1d0b6 <z_impl_k_queue_get+0x68>
	return z_impl_k_uptime_get();
   1d10c:	f000 f966 	bl	1d3dc <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   1d110:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   1d112:	42bd      	cmp	r5, r7
   1d114:	dacf      	bge.n	1d0b6 <z_impl_k_queue_get+0x68>
   1d116:	e7da      	b.n	1d0ce <z_impl_k_queue_get+0x80>

0001d118 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1d118:	7b43      	ldrb	r3, [r0, #13]
   1d11a:	06db      	lsls	r3, r3, #27
   1d11c:	bf03      	ittte	eq
   1d11e:	6980      	ldreq	r0, [r0, #24]
   1d120:	fab0 f080 	clzeq	r0, r0
   1d124:	0940      	lsreq	r0, r0, #5
   1d126:	2000      	movne	r0, #0
}
   1d128:	4770      	bx	lr

0001d12a <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   1d12a:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1d12e:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1d132:	4298      	cmp	r0, r3
   1d134:	bfac      	ite	ge
   1d136:	2000      	movge	r0, #0
   1d138:	2001      	movlt	r0, #1
   1d13a:	4770      	bx	lr

0001d13c <z_find_first_thread_to_unpend>:
{
   1d13c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d13e:	f04f 0320 	mov.w	r3, #32
   1d142:	f3ef 8411 	mrs	r4, BASEPRI
   1d146:	f383 8811 	msr	BASEPRI, r3
   1d14a:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1d14e:	f000 f85d 	bl	1d20c <z_priq_dumb_best>
	__asm__ volatile(
   1d152:	f384 8811 	msr	BASEPRI, r4
   1d156:	f3bf 8f6f 	isb	sy
}
   1d15a:	bd10      	pop	{r4, pc}

0001d15c <z_unpend_thread_no_timeout>:
{
   1d15c:	b538      	push	{r3, r4, r5, lr}
   1d15e:	4604      	mov	r4, r0
	__asm__ volatile(
   1d160:	f04f 0320 	mov.w	r3, #32
   1d164:	f3ef 8511 	mrs	r5, BASEPRI
   1d168:	f383 8811 	msr	BASEPRI, r3
   1d16c:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1d170:	4601      	mov	r1, r0
   1d172:	6880      	ldr	r0, [r0, #8]
   1d174:	f7fc fcc6 	bl	19b04 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1d178:	7b63      	ldrb	r3, [r4, #13]
   1d17a:	f023 0302 	bic.w	r3, r3, #2
   1d17e:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1d180:	f385 8811 	msr	BASEPRI, r5
   1d184:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1d188:	2300      	movs	r3, #0
   1d18a:	60a3      	str	r3, [r4, #8]
}
   1d18c:	bd38      	pop	{r3, r4, r5, pc}

0001d18e <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1d18e:	b921      	cbnz	r1, 1d19a <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1d190:	f3ef 8005 	mrs	r0, IPSR
   1d194:	b908      	cbnz	r0, 1d19a <z_reschedule+0xc>
   1d196:	f7f0 bb2d 	b.w	d7f4 <arch_swap>
   1d19a:	f381 8811 	msr	BASEPRI, r1
   1d19e:	f3bf 8f6f 	isb	sy
}
   1d1a2:	4770      	bx	lr

0001d1a4 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1d1a4:	4603      	mov	r3, r0
   1d1a6:	b920      	cbnz	r0, 1d1b2 <z_reschedule_irqlock+0xe>
   1d1a8:	f3ef 8205 	mrs	r2, IPSR
   1d1ac:	b90a      	cbnz	r2, 1d1b2 <z_reschedule_irqlock+0xe>
   1d1ae:	f7f0 bb21 	b.w	d7f4 <arch_swap>
   1d1b2:	f383 8811 	msr	BASEPRI, r3
   1d1b6:	f3bf 8f6f 	isb	sy
}
   1d1ba:	4770      	bx	lr

0001d1bc <z_reschedule_unlocked>:
	__asm__ volatile(
   1d1bc:	f04f 0320 	mov.w	r3, #32
   1d1c0:	f3ef 8011 	mrs	r0, BASEPRI
   1d1c4:	f383 8811 	msr	BASEPRI, r3
   1d1c8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1d1cc:	f7ff bfea 	b.w	1d1a4 <z_reschedule_irqlock>

0001d1d0 <z_unpend_thread>:
{
   1d1d0:	b538      	push	{r3, r4, r5, lr}
   1d1d2:	4604      	mov	r4, r0
   1d1d4:	f04f 0320 	mov.w	r3, #32
   1d1d8:	f3ef 8511 	mrs	r5, BASEPRI
   1d1dc:	f383 8811 	msr	BASEPRI, r3
   1d1e0:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1d1e4:	4601      	mov	r1, r0
   1d1e6:	6880      	ldr	r0, [r0, #8]
   1d1e8:	f7fc fc8c 	bl	19b04 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1d1ec:	7b63      	ldrb	r3, [r4, #13]
   1d1ee:	f023 0302 	bic.w	r3, r3, #2
   1d1f2:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1d1f4:	f385 8811 	msr	BASEPRI, r5
   1d1f8:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1d1fc:	2300      	movs	r3, #0
	return z_abort_timeout(&thread->base.timeout);
   1d1fe:	f104 0018 	add.w	r0, r4, #24
   1d202:	60a3      	str	r3, [r4, #8]
}
   1d204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1d208:	f000 b8a4 	b.w	1d354 <z_abort_timeout>

0001d20c <z_priq_dumb_best>:
	return list->head == list;
   1d20c:	6803      	ldr	r3, [r0, #0]
}
   1d20e:	4298      	cmp	r0, r3
   1d210:	bf14      	ite	ne
   1d212:	4618      	movne	r0, r3
   1d214:	2000      	moveq	r0, #0
   1d216:	4770      	bx	lr

0001d218 <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
   1d218:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   1d21c:	b570      	push	{r4, r5, r6, lr}
   1d21e:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   1d220:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
   1d224:	b1cb      	cbz	r3, 1d25a <z_thread_timeout+0x42>
	__asm__ volatile(
   1d226:	f04f 0320 	mov.w	r3, #32
   1d22a:	f3ef 8611 	mrs	r6, BASEPRI
   1d22e:	f383 8811 	msr	BASEPRI, r3
   1d232:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1d236:	4629      	mov	r1, r5
   1d238:	f850 0c10 	ldr.w	r0, [r0, #-16]
   1d23c:	f7fc fc62 	bl	19b04 <z_priq_dumb_remove>
   1d240:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1d244:	f023 0302 	bic.w	r3, r3, #2
   1d248:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
   1d24c:	f386 8811 	msr	BASEPRI, r6
   1d250:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1d254:	2300      	movs	r3, #0
   1d256:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1d25a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   1d25e:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1d260:	f023 0314 	bic.w	r3, r3, #20
   1d264:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   1d268:	f7ff ff56 	bl	1d118 <z_is_thread_ready>
   1d26c:	b120      	cbz	r0, 1d278 <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
   1d26e:	4628      	mov	r0, r5
}
   1d270:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d274:	f7fc bc96 	b.w	19ba4 <z_add_thread_to_ready_q>
   1d278:	bd70      	pop	{r4, r5, r6, pc}

0001d27a <z_unpend_first_thread>:
{
   1d27a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1d27c:	f04f 0320 	mov.w	r3, #32
   1d280:	f3ef 8211 	mrs	r2, BASEPRI
   1d284:	f383 8811 	msr	BASEPRI, r3
   1d288:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1d28c:	f7ff ffbe 	bl	1d20c <z_priq_dumb_best>
   1d290:	4604      	mov	r4, r0
	__asm__ volatile(
   1d292:	f382 8811 	msr	BASEPRI, r2
   1d296:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   1d29a:	b1c8      	cbz	r0, 1d2d0 <z_unpend_first_thread+0x56>
	__asm__ volatile(
   1d29c:	f04f 0320 	mov.w	r3, #32
   1d2a0:	f3ef 8511 	mrs	r5, BASEPRI
   1d2a4:	f383 8811 	msr	BASEPRI, r3
   1d2a8:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1d2ac:	4601      	mov	r1, r0
   1d2ae:	6880      	ldr	r0, [r0, #8]
   1d2b0:	f7fc fc28 	bl	19b04 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1d2b4:	7b63      	ldrb	r3, [r4, #13]
   1d2b6:	f023 0302 	bic.w	r3, r3, #2
   1d2ba:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1d2bc:	f385 8811 	msr	BASEPRI, r5
   1d2c0:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1d2c4:	2300      	movs	r3, #0
   1d2c6:	f104 0018 	add.w	r0, r4, #24
   1d2ca:	60a3      	str	r3, [r4, #8]
   1d2cc:	f000 f842 	bl	1d354 <z_abort_timeout>
}
   1d2d0:	4620      	mov	r0, r4
   1d2d2:	bd38      	pop	{r3, r4, r5, pc}

0001d2d4 <z_unpend_all>:
{
   1d2d4:	b570      	push	{r4, r5, r6, lr}
   1d2d6:	4606      	mov	r6, r0
	int need_sched = 0;
   1d2d8:	2500      	movs	r5, #0
   1d2da:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d2dc:	42a6      	cmp	r6, r4
   1d2de:	d000      	beq.n	1d2e2 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1d2e0:	b90c      	cbnz	r4, 1d2e6 <z_unpend_all+0x12>
}
   1d2e2:	4628      	mov	r0, r5
   1d2e4:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(thread);
   1d2e6:	4620      	mov	r0, r4
   1d2e8:	f7ff ff72 	bl	1d1d0 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   1d2ec:	4620      	mov	r0, r4
   1d2ee:	f7ff ff13 	bl	1d118 <z_is_thread_ready>
		need_sched = 1;
   1d2f2:	2501      	movs	r5, #1
   1d2f4:	2800      	cmp	r0, #0
   1d2f6:	d0f0      	beq.n	1d2da <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   1d2f8:	4620      	mov	r0, r4
   1d2fa:	f7fc fc53 	bl	19ba4 <z_add_thread_to_ready_q>
   1d2fe:	e7ec      	b.n	1d2da <z_unpend_all+0x6>

0001d300 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   1d300:	b15a      	cbz	r2, 1d31a <z_impl_k_sem_init+0x1a>
   1d302:	428a      	cmp	r2, r1
   1d304:	d309      	bcc.n	1d31a <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1d306:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1d30a:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1d30e:	e9c0 0000 	strd	r0, r0, [r0]
   1d312:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1d316:	2000      	movs	r0, #0
   1d318:	4770      	bx	lr
		return -EINVAL;
   1d31a:	f06f 0015 	mvn.w	r0, #21
}
   1d31e:	4770      	bx	lr

0001d320 <k_is_in_isr>:
   1d320:	f3ef 8005 	mrs	r0, IPSR
}
   1d324:	3000      	adds	r0, #0
   1d326:	bf18      	it	ne
   1d328:	2001      	movne	r0, #1
   1d32a:	4770      	bx	lr

0001d32c <z_impl_k_thread_name_set>:
}
   1d32c:	f06f 0046 	mvn.w	r0, #70	; 0x46
   1d330:	4770      	bx	lr

0001d332 <k_thread_name_get>:
}
   1d332:	2000      	movs	r0, #0
   1d334:	4770      	bx	lr

0001d336 <z_new_thread_init>:
{
   1d336:	b510      	push	{r4, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   1d338:	9c02      	ldr	r4, [sp, #8]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
   1d33a:	7383      	strb	r3, [r0, #14]
	thread_base->user_options = (u8_t)options;
   1d33c:	7304      	strb	r4, [r0, #12]

	thread_base->sched_locked = 0U;
   1d33e:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   1d340:	2404      	movs	r4, #4
	thread_base->sched_locked = 0U;
   1d342:	73c3      	strb	r3, [r0, #15]
	thread_base->thread_state = (u8_t)initial_state;
   1d344:	7344      	strb	r4, [r0, #13]
	node->prev = NULL;
   1d346:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
   1d34a:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
   1d34e:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
   1d352:	bd10      	pop	{r4, pc}

0001d354 <z_abort_timeout>:
{
   1d354:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d356:	f04f 0220 	mov.w	r2, #32
   1d35a:	f3ef 8411 	mrs	r4, BASEPRI
   1d35e:	f382 8811 	msr	BASEPRI, r2
   1d362:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1d366:	6803      	ldr	r3, [r0, #0]
   1d368:	b13b      	cbz	r3, 1d37a <z_abort_timeout+0x26>
			remove_timeout(to);
   1d36a:	f7fd f859 	bl	1a420 <remove_timeout>
			ret = 0;
   1d36e:	2000      	movs	r0, #0
	__asm__ volatile(
   1d370:	f384 8811 	msr	BASEPRI, r4
   1d374:	f3bf 8f6f 	isb	sy
}
   1d378:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1d37a:	f06f 0015 	mvn.w	r0, #21
   1d37e:	e7f7      	b.n	1d370 <z_abort_timeout+0x1c>

0001d380 <z_get_next_timeout_expiry>:
{
   1d380:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d382:	f04f 0320 	mov.w	r3, #32
   1d386:	f3ef 8411 	mrs	r4, BASEPRI
   1d38a:	f383 8811 	msr	BASEPRI, r3
   1d38e:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1d392:	f7fd f859 	bl	1a448 <next_timeout>
	__asm__ volatile(
   1d396:	f384 8811 	msr	BASEPRI, r4
   1d39a:	f3bf 8f6f 	isb	sy
}
   1d39e:	bd10      	pop	{r4, pc}

0001d3a0 <z_set_timeout_expiry>:
{
   1d3a0:	b570      	push	{r4, r5, r6, lr}
   1d3a2:	4604      	mov	r4, r0
   1d3a4:	460e      	mov	r6, r1
	__asm__ volatile(
   1d3a6:	f04f 0320 	mov.w	r3, #32
   1d3aa:	f3ef 8511 	mrs	r5, BASEPRI
   1d3ae:	f383 8811 	msr	BASEPRI, r3
   1d3b2:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   1d3b6:	f7fd f847 	bl	1a448 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1d3ba:	2801      	cmp	r0, #1
   1d3bc:	dd05      	ble.n	1d3ca <z_set_timeout_expiry+0x2a>
   1d3be:	42a0      	cmp	r0, r4
   1d3c0:	dd03      	ble.n	1d3ca <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   1d3c2:	4631      	mov	r1, r6
   1d3c4:	4620      	mov	r0, r4
   1d3c6:	f7f0 f97d 	bl	d6c4 <z_clock_set_timeout>
	__asm__ volatile(
   1d3ca:	f385 8811 	msr	BASEPRI, r5
   1d3ce:	f3bf 8f6f 	isb	sy
}
   1d3d2:	bd70      	pop	{r4, r5, r6, pc}

0001d3d4 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   1d3d4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   1d3d6:	f7fd f8eb 	bl	1a5b0 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   1d3da:	bd08      	pop	{r3, pc}

0001d3dc <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   1d3dc:	b510      	push	{r4, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
   1d3de:	f7fd f8e7 	bl	1a5b0 <z_tick_get>
			return (t * to_hz + off) / from_hz;
   1d3e2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1d3e6:	fba0 2304 	umull	r2, r3, r0, r4
   1d3ea:	fb04 3301 	mla	r3, r4, r1, r3
   1d3ee:	0bd0      	lsrs	r0, r2, #15
}
   1d3f0:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1d3f4:	0bd9      	lsrs	r1, r3, #15
   1d3f6:	bd10      	pop	{r4, pc}

0001d3f8 <k_timer_init>:
	timer->status = 0U;
   1d3f8:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1d3fa:	e9c0 1206 	strd	r1, r2, [r0, #24]
   1d3fe:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0U;
   1d402:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   1d404:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   1d408:	e9c0 3300 	strd	r3, r3, [r0]
	timer->user_data = NULL;
   1d40c:	6283      	str	r3, [r0, #40]	; 0x28
}
   1d40e:	4770      	bx	lr

0001d410 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1d410:	b510      	push	{r4, lr}
   1d412:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   1d414:	f7ff ff9e 	bl	1d354 <z_abort_timeout>

	if (inactive) {
   1d418:	bb00      	cbnz	r0, 1d45c <z_impl_k_timer_stop+0x4c>
		return;
	}

	if (timer->stop_fn != NULL) {
   1d41a:	69e3      	ldr	r3, [r4, #28]
   1d41c:	b10b      	cbz	r3, 1d422 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1d41e:	4620      	mov	r0, r4
   1d420:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   1d422:	f104 0010 	add.w	r0, r4, #16
   1d426:	2100      	movs	r1, #0
   1d428:	f7ff fe88 	bl	1d13c <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   1d42c:	4604      	mov	r4, r0
   1d42e:	b1a8      	cbz	r0, 1d45c <z_impl_k_timer_stop+0x4c>
		z_unpend_thread_no_timeout(thread);
   1d430:	f7ff fe94 	bl	1d15c <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1d434:	7b63      	ldrb	r3, [r4, #13]
   1d436:	06db      	lsls	r3, r3, #27
   1d438:	d104      	bne.n	1d444 <z_impl_k_timer_stop+0x34>
	if (z_is_thread_ready(thread)) {
   1d43a:	69a3      	ldr	r3, [r4, #24]
   1d43c:	b913      	cbnz	r3, 1d444 <z_impl_k_timer_stop+0x34>
		z_add_thread_to_ready_q(thread);
   1d43e:	4620      	mov	r0, r4
   1d440:	f7fc fbb0 	bl	19ba4 <z_add_thread_to_ready_q>
	__asm__ volatile(
   1d444:	f04f 0320 	mov.w	r3, #32
   1d448:	f3ef 8011 	mrs	r0, BASEPRI
   1d44c:	f383 8811 	msr	BASEPRI, r3
   1d450:	f3bf 8f6f 	isb	sy

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
		z_reschedule_unlocked();
	}
}
   1d454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   1d458:	f7ff bea4 	b.w	1d1a4 <z_reschedule_irqlock>
   1d45c:	bd10      	pop	{r4, pc}

0001d45e <clear_event_registrations>:
	while (num_events--) {
   1d45e:	2314      	movs	r3, #20
{
   1d460:	b570      	push	{r4, r5, r6, lr}
	event->poller = NULL;
   1d462:	2400      	movs	r4, #0
   1d464:	2601      	movs	r6, #1
   1d466:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   1d46a:	4281      	cmp	r1, r0
   1d46c:	d100      	bne.n	1d470 <clear_event_registrations+0x12>
}
   1d46e:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   1d470:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   1d474:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   1d478:	f003 030f 	and.w	r3, r3, #15
   1d47c:	2b04      	cmp	r3, #4
   1d47e:	d80d      	bhi.n	1d49c <clear_event_registrations+0x3e>
   1d480:	fa06 f303 	lsl.w	r3, r6, r3
   1d484:	f013 0f16 	tst.w	r3, #22
   1d488:	d008      	beq.n	1d49c <clear_event_registrations+0x3e>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   1d48a:	f851 3c14 	ldr.w	r3, [r1, #-20]
   1d48e:	b12b      	cbz	r3, 1d49c <clear_event_registrations+0x3e>
	node->prev->next = node->next;
   1d490:	f851 5c10 	ldr.w	r5, [r1, #-16]
   1d494:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   1d496:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1d498:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
   1d49c:	f382 8811 	msr	BASEPRI, r2
   1d4a0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1d4a4:	f04f 0320 	mov.w	r3, #32
   1d4a8:	f3ef 8211 	mrs	r2, BASEPRI
   1d4ac:	f383 8811 	msr	BASEPRI, r3
   1d4b0:	f3bf 8f6f 	isb	sy
   1d4b4:	3914      	subs	r1, #20
   1d4b6:	e7d8      	b.n	1d46a <clear_event_registrations+0xc>

0001d4b8 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   1d4b8:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   1d4ba:	6884      	ldr	r4, [r0, #8]
{
   1d4bc:	4605      	mov	r5, r0
   1d4be:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   1d4c0:	b19c      	cbz	r4, 1d4ea <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   1d4c2:	68a3      	ldr	r3, [r4, #8]
   1d4c4:	b95b      	cbnz	r3, 1d4de <signal_poll_event+0x26>
	int retcode = 0;
   1d4c6:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   1d4c8:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1d4ca:	2300      	movs	r3, #0
   1d4cc:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   1d4ce:	68eb      	ldr	r3, [r5, #12]
   1d4d0:	f3c3 3204 	ubfx	r2, r3, #12, #5
   1d4d4:	4316      	orrs	r6, r2
   1d4d6:	f366 3310 	bfi	r3, r6, #12, #5
   1d4da:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   1d4dc:	e004      	b.n	1d4e8 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   1d4de:	4798      	blx	r3
		poller->is_polling = false;
   1d4e0:	2300      	movs	r3, #0
		if (retcode < 0) {
   1d4e2:	2800      	cmp	r0, #0
		poller->is_polling = false;
   1d4e4:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   1d4e6:	daf0      	bge.n	1d4ca <signal_poll_event+0x12>
}
   1d4e8:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   1d4ea:	4620      	mov	r0, r4
   1d4ec:	e7ed      	b.n	1d4ca <signal_poll_event+0x12>

0001d4ee <k_poll_poller_cb>:
{
   1d4ee:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   1d4f0:	6883      	ldr	r3, [r0, #8]
{
   1d4f2:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   1d4f4:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   1d4f6:	7b63      	ldrb	r3, [r4, #13]
   1d4f8:	079a      	lsls	r2, r3, #30
   1d4fa:	d401      	bmi.n	1d500 <k_poll_poller_cb+0x12>
		return 0;
   1d4fc:	2000      	movs	r0, #0
}
   1d4fe:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   1d500:	6a23      	ldr	r3, [r4, #32]
   1d502:	3302      	adds	r3, #2
   1d504:	d012      	beq.n	1d52c <k_poll_poller_cb+0x3e>
	z_unpend_thread(thread);
   1d506:	4620      	mov	r0, r4
   1d508:	f7ff fe62 	bl	1d1d0 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1d50c:	2d08      	cmp	r5, #8
   1d50e:	bf0c      	ite	eq
   1d510:	f06f 0303 	mvneq.w	r3, #3
   1d514:	2300      	movne	r3, #0
   1d516:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1d518:	7b63      	ldrb	r3, [r4, #13]
   1d51a:	06db      	lsls	r3, r3, #27
   1d51c:	d1ee      	bne.n	1d4fc <k_poll_poller_cb+0xe>
	if (!z_is_thread_ready(thread)) {
   1d51e:	69a5      	ldr	r5, [r4, #24]
   1d520:	2d00      	cmp	r5, #0
   1d522:	d1eb      	bne.n	1d4fc <k_poll_poller_cb+0xe>
		z_add_thread_to_ready_q(thread);
   1d524:	4620      	mov	r0, r4
   1d526:	f7fc fb3d 	bl	19ba4 <z_add_thread_to_ready_q>
	return 0;
   1d52a:	e7e7      	b.n	1d4fc <k_poll_poller_cb+0xe>
		return -EAGAIN;
   1d52c:	f06f 000a 	mvn.w	r0, #10
   1d530:	e7e5      	b.n	1d4fe <k_poll_poller_cb+0x10>

0001d532 <add_event>:
{
   1d532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d534:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1d536:	e9d0 2300 	ldrd	r2, r3, [r0]
   1d53a:	4290      	cmp	r0, r2
   1d53c:	4604      	mov	r4, r0
   1d53e:	460d      	mov	r5, r1
   1d540:	d106      	bne.n	1d550 <add_event+0x1e>
	node->prev = list->tail;
   1d542:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1d544:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   1d546:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   1d548:	6863      	ldr	r3, [r4, #4]
   1d54a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1d54c:	6065      	str	r5, [r4, #4]
}
   1d54e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1d550:	2b00      	cmp	r3, #0
   1d552:	d0f6      	beq.n	1d542 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   1d554:	689b      	ldr	r3, [r3, #8]
   1d556:	6879      	ldr	r1, [r7, #4]
   1d558:	6858      	ldr	r0, [r3, #4]
   1d55a:	f7ff fde6 	bl	1d12a <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   1d55e:	2800      	cmp	r0, #0
   1d560:	d1ef      	bne.n	1d542 <add_event+0x10>
	return list->head == list;
   1d562:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d564:	42b4      	cmp	r4, r6
   1d566:	d0ec      	beq.n	1d542 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1d568:	2e00      	cmp	r6, #0
   1d56a:	d0ea      	beq.n	1d542 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   1d56c:	68b3      	ldr	r3, [r6, #8]
   1d56e:	6878      	ldr	r0, [r7, #4]
   1d570:	6859      	ldr	r1, [r3, #4]
   1d572:	f7ff fdda 	bl	1d12a <z_is_t1_higher_prio_than_t2>
   1d576:	b128      	cbz	r0, 1d584 <add_event+0x52>
	node->prev = successor->prev;
   1d578:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1d57a:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   1d57e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1d580:	6075      	str	r5, [r6, #4]
			return;
   1d582:	e7e4      	b.n	1d54e <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1d584:	6863      	ldr	r3, [r4, #4]
   1d586:	429e      	cmp	r6, r3
   1d588:	d0db      	beq.n	1d542 <add_event+0x10>
   1d58a:	6836      	ldr	r6, [r6, #0]
   1d58c:	e7ec      	b.n	1d568 <add_event+0x36>

0001d58e <register_events>:
{
   1d58e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1d592:	f04f 0b00 	mov.w	fp, #0
{
   1d596:	4688      	mov	r8, r1
   1d598:	4615      	mov	r5, r2
   1d59a:	4699      	mov	r9, r3
   1d59c:	4604      	mov	r4, r0
	int events_registered = 0;
   1d59e:	465e      	mov	r6, fp
	event->poller = NULL;
   1d5a0:	465f      	mov	r7, fp
	for (int ii = 0; ii < num_events; ii++) {
   1d5a2:	45c3      	cmp	fp, r8
   1d5a4:	db02      	blt.n	1d5ac <register_events+0x1e>
}
   1d5a6:	4630      	mov	r0, r6
   1d5a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d5ac:	f04f 0320 	mov.w	r3, #32
   1d5b0:	f3ef 8a11 	mrs	sl, BASEPRI
   1d5b4:	f383 8811 	msr	BASEPRI, r3
   1d5b8:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1d5bc:	7b63      	ldrb	r3, [r4, #13]
   1d5be:	f003 030f 	and.w	r3, r3, #15
   1d5c2:	2b02      	cmp	r3, #2
   1d5c4:	d005      	beq.n	1d5d2 <register_events+0x44>
   1d5c6:	2b04      	cmp	r3, #4
   1d5c8:	d006      	beq.n	1d5d8 <register_events+0x4a>
   1d5ca:	2b01      	cmp	r3, #1
   1d5cc:	d118      	bne.n	1d600 <register_events+0x72>
		if (event->signal->signaled != 0U) {
   1d5ce:	6922      	ldr	r2, [r4, #16]
   1d5d0:	e000      	b.n	1d5d4 <register_events+0x46>
		if (k_sem_count_get(event->sem) > 0) {
   1d5d2:	6922      	ldr	r2, [r4, #16]
		if (event->signal->signaled != 0U) {
   1d5d4:	6892      	ldr	r2, [r2, #8]
   1d5d6:	e001      	b.n	1d5dc <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
   1d5d8:	6922      	ldr	r2, [r4, #16]
   1d5da:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled != 0U) {
   1d5dc:	b182      	cbz	r2, 1d600 <register_events+0x72>
	event->state |= state;
   1d5de:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   1d5e0:	60a7      	str	r7, [r4, #8]
	event->state |= state;
   1d5e2:	f3c2 3104 	ubfx	r1, r2, #12, #5
   1d5e6:	430b      	orrs	r3, r1
   1d5e8:	f363 3210 	bfi	r2, r3, #12, #5
   1d5ec:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   1d5ee:	702f      	strb	r7, [r5, #0]
	__asm__ volatile(
   1d5f0:	f38a 8811 	msr	BASEPRI, sl
   1d5f4:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1d5f8:	f10b 0b01 	add.w	fp, fp, #1
   1d5fc:	3414      	adds	r4, #20
   1d5fe:	e7d0      	b.n	1d5a2 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   1d600:	f1b9 0f00 	cmp.w	r9, #0
   1d604:	d1f4      	bne.n	1d5f0 <register_events+0x62>
   1d606:	782b      	ldrb	r3, [r5, #0]
   1d608:	2b00      	cmp	r3, #0
   1d60a:	d0f1      	beq.n	1d5f0 <register_events+0x62>
	switch (event->type) {
   1d60c:	7b63      	ldrb	r3, [r4, #13]
   1d60e:	f003 030f 	and.w	r3, r3, #15
   1d612:	2b02      	cmp	r3, #2
   1d614:	d007      	beq.n	1d626 <register_events+0x98>
   1d616:	2b04      	cmp	r3, #4
   1d618:	d00e      	beq.n	1d638 <register_events+0xaa>
   1d61a:	2b01      	cmp	r3, #1
   1d61c:	d109      	bne.n	1d632 <register_events+0xa4>
		add_event(&event->signal->poll_events, event, poller);
   1d61e:	462a      	mov	r2, r5
   1d620:	4621      	mov	r1, r4
   1d622:	6920      	ldr	r0, [r4, #16]
   1d624:	e003      	b.n	1d62e <register_events+0xa0>
		add_event(&event->sem->poll_events, event, poller);
   1d626:	462a      	mov	r2, r5
   1d628:	4621      	mov	r1, r4
   1d62a:	6920      	ldr	r0, [r4, #16]
   1d62c:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   1d62e:	f7ff ff80 	bl	1d532 <add_event>
	event->poller = poller;
   1d632:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   1d634:	3601      	adds	r6, #1
   1d636:	e7db      	b.n	1d5f0 <register_events+0x62>
		add_event(&event->queue->poll_events, event, poller);
   1d638:	6920      	ldr	r0, [r4, #16]
   1d63a:	462a      	mov	r2, r5
   1d63c:	4621      	mov	r1, r4
   1d63e:	3008      	adds	r0, #8
   1d640:	e7f5      	b.n	1d62e <register_events+0xa0>

0001d642 <z_handle_obj_poll_events>:
	return list->head == list;
   1d642:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1d644:	4298      	cmp	r0, r3
   1d646:	d009      	beq.n	1d65c <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1d648:	e9d3 2000 	ldrd	r2, r0, [r3]
   1d64c:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   1d64e:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   1d650:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   1d652:	4618      	mov	r0, r3
	node->prev = NULL;
   1d654:	e9c3 2200 	strd	r2, r2, [r3]
   1d658:	f7ff bf2e 	b.w	1d4b8 <signal_poll_event>
	}
}
   1d65c:	4770      	bx	lr

0001d65e <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   1d65e:	4770      	bx	lr
