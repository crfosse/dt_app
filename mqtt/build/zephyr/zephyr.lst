
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_table>:
    c000:	200240c0 	.word	0x200240c0
    c004:	0000dc55 	.word	0x0000dc55
    c008:	0001b977 	.word	0x0001b977
    c00c:	0000da75 	.word	0x0000da75
    c010:	0000da75 	.word	0x0000da75
    c014:	0000da75 	.word	0x0000da75
    c018:	0000da75 	.word	0x0000da75
    c01c:	0000da75 	.word	0x0000da75
    c020:	0000da75 	.word	0x0000da75
    c024:	0000da75 	.word	0x0000da75
    c028:	0000da75 	.word	0x0000da75
    c02c:	0000d935 	.word	0x0000d935
    c030:	0000da75 	.word	0x0000da75
    c034:	0000da75 	.word	0x0000da75
    c038:	0000d885 	.word	0x0000d885
    c03c:	0001b967 	.word	0x0001b967

0000c040 <_irq_vector_table>:
    c040:	0000dc15 0000dc15 0000dc15 0000dc15     ................
    c050:	0000dc15 0000dc15 0000dc15 0000dc15     ................
    c060:	0000dc15 0000dc15 0000dc15 0000dc15     ................
    c070:	0000dc15 0000dc15 0000dc15 0000dc15     ................
    c080:	0000dc15 0000dc15 0000dc15 0000dc15     ................
    c090:	0000dc15 0000dc15 0000dc15 0000dc15     ................
    c0a0:	0000dc15 0000dc15 0000dc15 0000dc15     ................
    c0b0:	0000f90d 0001c9ab 0000dc15 0000dc15     ................
    c0c0:	0000dc15 0000dc15 0000dc15 0000dc15     ................
    c0d0:	0000dc15 0000dc15 0000dc15 0000dc15     ................
    c0e0:	0000dc15 0000dc15 0001c9c9 0000dc15     ................
    c0f0:	0000dc15 0000dc15 0000dc15 0000dc15     ................
    c100:	0000dc15 0000dc15 0000dc15 0000dc15     ................
    c110:	0000dc15 0000dc15 0000dc15 0000dc15     ................
    c120:	0000dc15 0000dc15 0000dc15 0000dc15     ................
    c130:	0000dc15 0000dc15 0000dc15 0000dc15     ................
    c140:	0000dc15                                ....

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	00014544 00000001 0000c000 0000c000     DE..............
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c23c <__aeabi_uldivmod>:
    c23c:	b953      	cbnz	r3, c254 <__aeabi_uldivmod+0x18>
    c23e:	b94a      	cbnz	r2, c254 <__aeabi_uldivmod+0x18>
    c240:	2900      	cmp	r1, #0
    c242:	bf08      	it	eq
    c244:	2800      	cmpeq	r0, #0
    c246:	bf1c      	itt	ne
    c248:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c24c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c250:	f000 b970 	b.w	c534 <__aeabi_idiv0>
    c254:	f1ad 0c08 	sub.w	ip, sp, #8
    c258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c25c:	f000 f806 	bl	c26c <__udivmoddi4>
    c260:	f8dd e004 	ldr.w	lr, [sp, #4]
    c264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c268:	b004      	add	sp, #16
    c26a:	4770      	bx	lr

0000c26c <__udivmoddi4>:
    c26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c270:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c272:	4604      	mov	r4, r0
    c274:	4689      	mov	r9, r1
    c276:	2b00      	cmp	r3, #0
    c278:	f040 8083 	bne.w	c382 <__udivmoddi4+0x116>
    c27c:	428a      	cmp	r2, r1
    c27e:	4615      	mov	r5, r2
    c280:	d945      	bls.n	c30e <__udivmoddi4+0xa2>
    c282:	fab2 f282 	clz	r2, r2
    c286:	b14a      	cbz	r2, c29c <__udivmoddi4+0x30>
    c288:	f1c2 0720 	rsb	r7, r2, #32
    c28c:	fa01 f302 	lsl.w	r3, r1, r2
    c290:	4095      	lsls	r5, r2
    c292:	4094      	lsls	r4, r2
    c294:	fa20 f707 	lsr.w	r7, r0, r7
    c298:	ea47 0903 	orr.w	r9, r7, r3
    c29c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c2a0:	0c23      	lsrs	r3, r4, #16
    c2a2:	fa1f f885 	uxth.w	r8, r5
    c2a6:	fbb9 fcfe 	udiv	ip, r9, lr
    c2aa:	fb0e 991c 	mls	r9, lr, ip, r9
    c2ae:	fb0c f108 	mul.w	r1, ip, r8
    c2b2:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
    c2b6:	4299      	cmp	r1, r3
    c2b8:	d90a      	bls.n	c2d0 <__udivmoddi4+0x64>
    c2ba:	18eb      	adds	r3, r5, r3
    c2bc:	bf2c      	ite	cs
    c2be:	2001      	movcs	r0, #1
    c2c0:	2000      	movcc	r0, #0
    c2c2:	4299      	cmp	r1, r3
    c2c4:	d902      	bls.n	c2cc <__udivmoddi4+0x60>
    c2c6:	2800      	cmp	r0, #0
    c2c8:	f000 811d 	beq.w	c506 <__udivmoddi4+0x29a>
    c2cc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c2d0:	1a59      	subs	r1, r3, r1
    c2d2:	b2a3      	uxth	r3, r4
    c2d4:	fbb1 f0fe 	udiv	r0, r1, lr
    c2d8:	fb0e 1110 	mls	r1, lr, r0, r1
    c2dc:	fb00 f808 	mul.w	r8, r0, r8
    c2e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c2e4:	45a0      	cmp	r8, r4
    c2e6:	d905      	bls.n	c2f4 <__udivmoddi4+0x88>
    c2e8:	192c      	adds	r4, r5, r4
    c2ea:	d202      	bcs.n	c2f2 <__udivmoddi4+0x86>
    c2ec:	45a0      	cmp	r8, r4
    c2ee:	f200 810e 	bhi.w	c50e <__udivmoddi4+0x2a2>
    c2f2:	3801      	subs	r0, #1
    c2f4:	eba4 0408 	sub.w	r4, r4, r8
    c2f8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c2fc:	2700      	movs	r7, #0
    c2fe:	b11e      	cbz	r6, c308 <__udivmoddi4+0x9c>
    c300:	40d4      	lsrs	r4, r2
    c302:	2300      	movs	r3, #0
    c304:	e9c6 4300 	strd	r4, r3, [r6]
    c308:	4639      	mov	r1, r7
    c30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c30e:	2a00      	cmp	r2, #0
    c310:	d051      	beq.n	c3b6 <__udivmoddi4+0x14a>
    c312:	fab2 f282 	clz	r2, r2
    c316:	2a00      	cmp	r2, #0
    c318:	f040 80af 	bne.w	c47a <__udivmoddi4+0x20e>
    c31c:	1b49      	subs	r1, r1, r5
    c31e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c322:	fa1f f885 	uxth.w	r8, r5
    c326:	2701      	movs	r7, #1
    c328:	0c23      	lsrs	r3, r4, #16
    c32a:	fbb1 fcfe 	udiv	ip, r1, lr
    c32e:	fb0e 111c 	mls	r1, lr, ip, r1
    c332:	fb08 f00c 	mul.w	r0, r8, ip
    c336:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c33a:	4298      	cmp	r0, r3
    c33c:	d90a      	bls.n	c354 <__udivmoddi4+0xe8>
    c33e:	18eb      	adds	r3, r5, r3
    c340:	bf2c      	ite	cs
    c342:	2101      	movcs	r1, #1
    c344:	2100      	movcc	r1, #0
    c346:	4298      	cmp	r0, r3
    c348:	d902      	bls.n	c350 <__udivmoddi4+0xe4>
    c34a:	2900      	cmp	r1, #0
    c34c:	f000 80d7 	beq.w	c4fe <__udivmoddi4+0x292>
    c350:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c354:	1a19      	subs	r1, r3, r0
    c356:	b2a3      	uxth	r3, r4
    c358:	fbb1 f0fe 	udiv	r0, r1, lr
    c35c:	fb0e 1110 	mls	r1, lr, r0, r1
    c360:	fb08 f800 	mul.w	r8, r8, r0
    c364:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c368:	45a0      	cmp	r8, r4
    c36a:	d905      	bls.n	c378 <__udivmoddi4+0x10c>
    c36c:	192c      	adds	r4, r5, r4
    c36e:	d202      	bcs.n	c376 <__udivmoddi4+0x10a>
    c370:	45a0      	cmp	r8, r4
    c372:	f200 80c1 	bhi.w	c4f8 <__udivmoddi4+0x28c>
    c376:	3801      	subs	r0, #1
    c378:	eba4 0408 	sub.w	r4, r4, r8
    c37c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c380:	e7bd      	b.n	c2fe <__udivmoddi4+0x92>
    c382:	428b      	cmp	r3, r1
    c384:	d908      	bls.n	c398 <__udivmoddi4+0x12c>
    c386:	2e00      	cmp	r6, #0
    c388:	d074      	beq.n	c474 <__udivmoddi4+0x208>
    c38a:	2700      	movs	r7, #0
    c38c:	e9c6 0100 	strd	r0, r1, [r6]
    c390:	4638      	mov	r0, r7
    c392:	4639      	mov	r1, r7
    c394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c398:	fab3 f783 	clz	r7, r3
    c39c:	b967      	cbnz	r7, c3b8 <__udivmoddi4+0x14c>
    c39e:	428b      	cmp	r3, r1
    c3a0:	f0c0 80a4 	bcc.w	c4ec <__udivmoddi4+0x280>
    c3a4:	4282      	cmp	r2, r0
    c3a6:	f240 80a1 	bls.w	c4ec <__udivmoddi4+0x280>
    c3aa:	4638      	mov	r0, r7
    c3ac:	2e00      	cmp	r6, #0
    c3ae:	d0ab      	beq.n	c308 <__udivmoddi4+0x9c>
    c3b0:	e9c6 4900 	strd	r4, r9, [r6]
    c3b4:	e7a8      	b.n	c308 <__udivmoddi4+0x9c>
    c3b6:	deff      	udf	#255	; 0xff
    c3b8:	f1c7 0520 	rsb	r5, r7, #32
    c3bc:	40bb      	lsls	r3, r7
    c3be:	fa02 fc07 	lsl.w	ip, r2, r7
    c3c2:	fa01 f407 	lsl.w	r4, r1, r7
    c3c6:	40ea      	lsrs	r2, r5
    c3c8:	fa20 f805 	lsr.w	r8, r0, r5
    c3cc:	40e9      	lsrs	r1, r5
    c3ce:	fa00 fe07 	lsl.w	lr, r0, r7
    c3d2:	431a      	orrs	r2, r3
    c3d4:	ea48 0404 	orr.w	r4, r8, r4
    c3d8:	ea4f 4812 	mov.w	r8, r2, lsr #16
    c3dc:	0c20      	lsrs	r0, r4, #16
    c3de:	fa1f f982 	uxth.w	r9, r2
    c3e2:	fbb1 faf8 	udiv	sl, r1, r8
    c3e6:	fb08 111a 	mls	r1, r8, sl, r1
    c3ea:	fb0a fb09 	mul.w	fp, sl, r9
    c3ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    c3f2:	458b      	cmp	fp, r1
    c3f4:	d90a      	bls.n	c40c <__udivmoddi4+0x1a0>
    c3f6:	1851      	adds	r1, r2, r1
    c3f8:	bf2c      	ite	cs
    c3fa:	2301      	movcs	r3, #1
    c3fc:	2300      	movcc	r3, #0
    c3fe:	458b      	cmp	fp, r1
    c400:	d902      	bls.n	c408 <__udivmoddi4+0x19c>
    c402:	2b00      	cmp	r3, #0
    c404:	f000 8088 	beq.w	c518 <__udivmoddi4+0x2ac>
    c408:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    c40c:	eba1 010b 	sub.w	r1, r1, fp
    c410:	b2a4      	uxth	r4, r4
    c412:	fbb1 f0f8 	udiv	r0, r1, r8
    c416:	fb08 1110 	mls	r1, r8, r0, r1
    c41a:	fb00 f909 	mul.w	r9, r0, r9
    c41e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
    c422:	4589      	cmp	r9, r1
    c424:	d904      	bls.n	c430 <__udivmoddi4+0x1c4>
    c426:	1851      	adds	r1, r2, r1
    c428:	d201      	bcs.n	c42e <__udivmoddi4+0x1c2>
    c42a:	4589      	cmp	r9, r1
    c42c:	d87b      	bhi.n	c526 <__udivmoddi4+0x2ba>
    c42e:	3801      	subs	r0, #1
    c430:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    c434:	eba1 0109 	sub.w	r1, r1, r9
    c438:	fba0 890c 	umull	r8, r9, r0, ip
    c43c:	4549      	cmp	r1, r9
    c43e:	4644      	mov	r4, r8
    c440:	464b      	mov	r3, r9
    c442:	d302      	bcc.n	c44a <__udivmoddi4+0x1de>
    c444:	d106      	bne.n	c454 <__udivmoddi4+0x1e8>
    c446:	45c6      	cmp	lr, r8
    c448:	d204      	bcs.n	c454 <__udivmoddi4+0x1e8>
    c44a:	3801      	subs	r0, #1
    c44c:	ebb8 040c 	subs.w	r4, r8, ip
    c450:	eb69 0302 	sbc.w	r3, r9, r2
    c454:	2e00      	cmp	r6, #0
    c456:	d05d      	beq.n	c514 <__udivmoddi4+0x2a8>
    c458:	ebbe 0204 	subs.w	r2, lr, r4
    c45c:	eb61 0103 	sbc.w	r1, r1, r3
    c460:	fa01 f505 	lsl.w	r5, r1, r5
    c464:	fa22 f307 	lsr.w	r3, r2, r7
    c468:	40f9      	lsrs	r1, r7
    c46a:	2700      	movs	r7, #0
    c46c:	431d      	orrs	r5, r3
    c46e:	e9c6 5100 	strd	r5, r1, [r6]
    c472:	e749      	b.n	c308 <__udivmoddi4+0x9c>
    c474:	4637      	mov	r7, r6
    c476:	4630      	mov	r0, r6
    c478:	e746      	b.n	c308 <__udivmoddi4+0x9c>
    c47a:	f1c2 0020 	rsb	r0, r2, #32
    c47e:	4095      	lsls	r5, r2
    c480:	fa01 f702 	lsl.w	r7, r1, r2
    c484:	fa21 f300 	lsr.w	r3, r1, r0
    c488:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c48c:	fa24 f100 	lsr.w	r1, r4, r0
    c490:	fa1f f885 	uxth.w	r8, r5
    c494:	4094      	lsls	r4, r2
    c496:	4339      	orrs	r1, r7
    c498:	fbb3 f0fe 	udiv	r0, r3, lr
    c49c:	0c0f      	lsrs	r7, r1, #16
    c49e:	fb0e 3310 	mls	r3, lr, r0, r3
    c4a2:	fb00 fc08 	mul.w	ip, r0, r8
    c4a6:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
    c4aa:	459c      	cmp	ip, r3
    c4ac:	d907      	bls.n	c4be <__udivmoddi4+0x252>
    c4ae:	18eb      	adds	r3, r5, r3
    c4b0:	bf2c      	ite	cs
    c4b2:	2701      	movcs	r7, #1
    c4b4:	2700      	movcc	r7, #0
    c4b6:	459c      	cmp	ip, r3
    c4b8:	d900      	bls.n	c4bc <__udivmoddi4+0x250>
    c4ba:	b38f      	cbz	r7, c520 <__udivmoddi4+0x2b4>
    c4bc:	3801      	subs	r0, #1
    c4be:	eba3 030c 	sub.w	r3, r3, ip
    c4c2:	b289      	uxth	r1, r1
    c4c4:	fbb3 f7fe 	udiv	r7, r3, lr
    c4c8:	fb0e 3317 	mls	r3, lr, r7, r3
    c4cc:	fb07 fc08 	mul.w	ip, r7, r8
    c4d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c4d4:	458c      	cmp	ip, r1
    c4d6:	d904      	bls.n	c4e2 <__udivmoddi4+0x276>
    c4d8:	1869      	adds	r1, r5, r1
    c4da:	d201      	bcs.n	c4e0 <__udivmoddi4+0x274>
    c4dc:	458c      	cmp	ip, r1
    c4de:	d825      	bhi.n	c52c <__udivmoddi4+0x2c0>
    c4e0:	3f01      	subs	r7, #1
    c4e2:	eba1 010c 	sub.w	r1, r1, ip
    c4e6:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
    c4ea:	e71d      	b.n	c328 <__udivmoddi4+0xbc>
    c4ec:	1a84      	subs	r4, r0, r2
    c4ee:	eb61 0303 	sbc.w	r3, r1, r3
    c4f2:	2001      	movs	r0, #1
    c4f4:	4699      	mov	r9, r3
    c4f6:	e759      	b.n	c3ac <__udivmoddi4+0x140>
    c4f8:	3802      	subs	r0, #2
    c4fa:	442c      	add	r4, r5
    c4fc:	e73c      	b.n	c378 <__udivmoddi4+0x10c>
    c4fe:	f1ac 0c02 	sub.w	ip, ip, #2
    c502:	442b      	add	r3, r5
    c504:	e726      	b.n	c354 <__udivmoddi4+0xe8>
    c506:	f1ac 0c02 	sub.w	ip, ip, #2
    c50a:	442b      	add	r3, r5
    c50c:	e6e0      	b.n	c2d0 <__udivmoddi4+0x64>
    c50e:	3802      	subs	r0, #2
    c510:	442c      	add	r4, r5
    c512:	e6ef      	b.n	c2f4 <__udivmoddi4+0x88>
    c514:	4637      	mov	r7, r6
    c516:	e6f7      	b.n	c308 <__udivmoddi4+0x9c>
    c518:	f1aa 0a02 	sub.w	sl, sl, #2
    c51c:	4411      	add	r1, r2
    c51e:	e775      	b.n	c40c <__udivmoddi4+0x1a0>
    c520:	3802      	subs	r0, #2
    c522:	442b      	add	r3, r5
    c524:	e7cb      	b.n	c4be <__udivmoddi4+0x252>
    c526:	3802      	subs	r0, #2
    c528:	4411      	add	r1, r2
    c52a:	e781      	b.n	c430 <__udivmoddi4+0x1c4>
    c52c:	3f02      	subs	r7, #2
    c52e:	4429      	add	r1, r5
    c530:	e7d7      	b.n	c4e2 <__udivmoddi4+0x276>
    c532:	bf00      	nop

0000c534 <__aeabi_idiv0>:
    c534:	4770      	bx	lr
    c536:	bf00      	nop

0000c538 <rsrp_notification_handler>:


/* @brief updates the global RSRP value when it is received from the modem.*/
// TODO: make this atomic, so it's not updated while in use.
static void rsrp_notification_handler(char rsrp_value) {
	rsrp.value = rsrp_value;
    c538:	4b01      	ldr	r3, [pc, #4]	; (c540 <rsrp_notification_handler+0x8>)
    c53a:	8018      	strh	r0, [r3, #0]
}
    c53c:	4770      	bx	lr
    c53e:	bf00      	nop
    c540:	20026834 	.word	0x20026834

0000c544 <app_timer_handler>:
	minutes++;
    c544:	4b0d      	ldr	r3, [pc, #52]	; (c57c <app_timer_handler+0x38>)
    c546:	6819      	ldr	r1, [r3, #0]
    c548:	3101      	adds	r1, #1
    c54a:	6019      	str	r1, [r3, #0]
	if (minutes % actual_tau == 0) {
    c54c:	4b0c      	ldr	r3, [pc, #48]	; (c580 <app_timer_handler+0x3c>)
    c54e:	681a      	ldr	r2, [r3, #0]
    c550:	fbb1 f3f2 	udiv	r3, r1, r2
    c554:	fb02 1313 	mls	r3, r2, r3, r1
    c558:	b913      	cbnz	r3, c560 <app_timer_handler+0x1c>
		transmit = true;
    c55a:	2201      	movs	r2, #1
    c55c:	4b09      	ldr	r3, [pc, #36]	; (c584 <app_timer_handler+0x40>)
    c55e:	701a      	strb	r2, [r3, #0]
	LOG_INF("Elapsed time: %d\n", minutes);
    c560:	2303      	movs	r3, #3
    c562:	f04f 0200 	mov.w	r2, #0
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    c566:	4808      	ldr	r0, [pc, #32]	; (c588 <app_timer_handler+0x44>)
    c568:	f363 0207 	bfi	r2, r3, #0, #8
    c56c:	4b07      	ldr	r3, [pc, #28]	; (c58c <app_timer_handler+0x48>)
    c56e:	1a1b      	subs	r3, r3, r0
    c570:	08db      	lsrs	r3, r3, #3
    c572:	f363 128f 	bfi	r2, r3, #6, #10
    c576:	4806      	ldr	r0, [pc, #24]	; (c590 <app_timer_handler+0x4c>)
    c578:	f00f b8a8 	b.w	1b6cc <log_1>
    c57c:	20020884 	.word	0x20020884
    c580:	20020880 	.word	0x20020880
    c584:	20021eea 	.word	0x20021eea
    c588:	0001e02c 	.word	0x0001e02c
    c58c:	0001e02c 	.word	0x0001e02c
    c590:	0001e6d0 	.word	0x0001e6d0

0000c594 <button_handler>:
	if (has_changed & button_states & DK_BTN1_MSK) {
    c594:	4001      	ands	r1, r0
    c596:	07ca      	lsls	r2, r1, #31
{
    c598:	b510      	push	{r4, lr}
	if (has_changed & button_states & DK_BTN1_MSK) {
    c59a:	d526      	bpl.n	c5ea <button_handler+0x56>
		LOG_INF("DEV_DBG: button 1 pressed\n");
    c59c:	2303      	movs	r3, #3
    c59e:	f04f 0100 	mov.w	r1, #0
    c5a2:	4c15      	ldr	r4, [pc, #84]	; (c5f8 <button_handler+0x64>)
    c5a4:	f363 0107 	bfi	r1, r3, #0, #8
    c5a8:	4b14      	ldr	r3, [pc, #80]	; (c5fc <button_handler+0x68>)
    c5aa:	4815      	ldr	r0, [pc, #84]	; (c600 <button_handler+0x6c>)
    c5ac:	1ae4      	subs	r4, r4, r3
    c5ae:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    c5b2:	f364 118f 	bfi	r1, r4, #6, #10
    c5b6:	f00f f87c 	bl	1b6b2 <log_0>
		LOG_INF("Current test_index: %d", test_index);
    c5ba:	2303      	movs	r3, #3
    c5bc:	f04f 0200 	mov.w	r2, #0
    c5c0:	f363 0207 	bfi	r2, r3, #0, #8
    c5c4:	f364 128f 	bfi	r2, r4, #6, #10
    c5c8:	4c0e      	ldr	r4, [pc, #56]	; (c604 <button_handler+0x70>)
    c5ca:	480f      	ldr	r0, [pc, #60]	; (c608 <button_handler+0x74>)
    c5cc:	6821      	ldr	r1, [r4, #0]
    c5ce:	f00f f87d 	bl	1b6cc <log_1>
		if(test_index < TEST_DATA_SIZE) {
    c5d2:	6821      	ldr	r1, [r4, #0]
    c5d4:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    c5d8:	d209      	bcs.n	c5ee <button_handler+0x5a>
			mqtt_data_publish(testData,test_index);
    c5da:	4b0c      	ldr	r3, [pc, #48]	; (c60c <button_handler+0x78>)
    c5dc:	6818      	ldr	r0, [r3, #0]
    c5de:	f000 fbcb 	bl	cd78 <mqtt_data_publish>
			test_index += 5;
    c5e2:	6823      	ldr	r3, [r4, #0]
    c5e4:	3305      	adds	r3, #5
    c5e6:	6023      	str	r3, [r4, #0]
}
    c5e8:	bd10      	pop	{r4, pc}
	else if (has_changed & button_states & DK_BTN2_MSK) {
    c5ea:	078b      	lsls	r3, r1, #30
    c5ec:	d5fc      	bpl.n	c5e8 <button_handler+0x54>
			test_index = 0;
    c5ee:	2200      	movs	r2, #0
    c5f0:	4b04      	ldr	r3, [pc, #16]	; (c604 <button_handler+0x70>)
    c5f2:	601a      	str	r2, [r3, #0]
    c5f4:	e7f8      	b.n	c5e8 <button_handler+0x54>
    c5f6:	bf00      	nop
    c5f8:	0001e02c 	.word	0x0001e02c
    c5fc:	0001e02c 	.word	0x0001e02c
    c600:	0001e700 	.word	0x0001e700
    c604:	20026814 	.word	0x20026814
    c608:	0001e71b 	.word	0x0001e71b
    c60c:	20026810 	.word	0x20026810

0000c610 <bsd_recoverable_error_handler>:
	LOG_ERR("bsdlib recoverable error: %u\n", (unsigned int)err);
    c610:	2301      	movs	r3, #1
    c612:	f04f 0200 	mov.w	r2, #0
    c616:	4906      	ldr	r1, [pc, #24]	; (c630 <bsd_recoverable_error_handler+0x20>)
    c618:	f363 0207 	bfi	r2, r3, #0, #8
    c61c:	4b05      	ldr	r3, [pc, #20]	; (c634 <bsd_recoverable_error_handler+0x24>)
    c61e:	1a5b      	subs	r3, r3, r1
    c620:	08db      	lsrs	r3, r3, #3
    c622:	4601      	mov	r1, r0
    c624:	f363 128f 	bfi	r2, r3, #6, #10
    c628:	4803      	ldr	r0, [pc, #12]	; (c638 <bsd_recoverable_error_handler+0x28>)
    c62a:	f00f b84f 	b.w	1b6cc <log_1>
    c62e:	bf00      	nop
    c630:	0001e02c 	.word	0x0001e02c
    c634:	0001e02c 	.word	0x0001e02c
    c638:	0001e6e2 	.word	0x0001e6e2

0000c63c <timer_init>:
		arch_syscall_invoke3(*(uintptr_t *)&timer, *(uintptr_t *)&duration, *(uintptr_t *)&period, K_SYSCALL_K_TIMER_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_start(timer, duration, period);
    c63c:	f64e 2260 	movw	r2, #60000	; 0xea60
    c640:	4801      	ldr	r0, [pc, #4]	; (c648 <timer_init+0xc>)
    c642:	4611      	mov	r1, r2
    c644:	f00e bbee 	b.w	1ae24 <z_impl_k_timer_start>
    c648:	200268fc 	.word	0x200268fc

0000c64c <main>:
	return err;
}


void main(void)
{
    c64c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	int err;

	printk("\nDT Sensor application example started\n");
    c650:	4875      	ldr	r0, [pc, #468]	; (c828 <main+0x1dc>)
    c652:	f00e ffb6 	bl	1b5c2 <printk>
	LOG_INF("DEV_DBG: Initalizing buttons and leds.\n");
    c656:	2303      	movs	r3, #3
    c658:	f04f 0100 	mov.w	r1, #0
    c65c:	4c73      	ldr	r4, [pc, #460]	; (c82c <main+0x1e0>)
    c65e:	f363 0107 	bfi	r1, r3, #0, #8
    c662:	4b73      	ldr	r3, [pc, #460]	; (c830 <main+0x1e4>)
    c664:	4873      	ldr	r0, [pc, #460]	; (c834 <main+0x1e8>)
    c666:	1ae4      	subs	r4, r4, r3
    c668:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    c66c:	f364 118f 	bfi	r1, r4, #6, #10
    c670:	f00f f81f 	bl	1b6b2 <log_0>
	err = dk_buttons_init(button_handler);
    c674:	4870      	ldr	r0, [pc, #448]	; (c838 <main+0x1ec>)
    c676:	f003 fd09 	bl	1008c <dk_buttons_init>
	if (err) {
    c67a:	4601      	mov	r1, r0
    c67c:	b148      	cbz	r0, c692 <main+0x46>
		LOG_ERR("Could not initialize buttons, err code: %d\n", err);
    c67e:	f04f 0200 	mov.w	r2, #0
    c682:	2301      	movs	r3, #1
    c684:	f363 0207 	bfi	r2, r3, #0, #8
    c688:	f364 128f 	bfi	r2, r4, #6, #10
    c68c:	486b      	ldr	r0, [pc, #428]	; (c83c <main+0x1f0>)
    c68e:	f00f f81d 	bl	1b6cc <log_1>
	err = dk_leds_init();
    c692:	f003 fca1 	bl	ffd8 <dk_leds_init>
	if (err) {
    c696:	4601      	mov	r1, r0
    c698:	b148      	cbz	r0, c6ae <main+0x62>
		LOG_ERR("Could not initialize leds, err code: %d\n", err);
    c69a:	f04f 0200 	mov.w	r2, #0
    c69e:	2301      	movs	r3, #1
    c6a0:	f363 0207 	bfi	r2, r3, #0, #8
    c6a4:	f364 128f 	bfi	r2, r4, #6, #10
    c6a8:	4865      	ldr	r0, [pc, #404]	; (c840 <main+0x1f4>)
    c6aa:	f00f f80f 	bl	1b6cc <log_1>
	err = dk_set_leds_state(0x00, DK_ALL_LEDS_MSK);
    c6ae:	210f      	movs	r1, #15
    c6b0:	2000      	movs	r0, #0
    c6b2:	f010 fd80 	bl	1d1b6 <dk_set_leds_state>
	if (err) {
    c6b6:	4601      	mov	r1, r0
    c6b8:	b148      	cbz	r0, c6ce <main+0x82>
		LOG_ERR("Could not set leds state, err code: %d\n", err);
    c6ba:	f04f 0200 	mov.w	r2, #0
    c6be:	2301      	movs	r3, #1
    c6c0:	f363 0207 	bfi	r2, r3, #0, #8
    c6c4:	f364 128f 	bfi	r2, r4, #6, #10
    c6c8:	485e      	ldr	r0, [pc, #376]	; (c844 <main+0x1f8>)
    c6ca:	f00e ffff 	bl	1b6cc <log_1>
	err = modem_info_init();
    c6ce:	f004 fe89 	bl	113e4 <modem_info_init>
	err = modem_info_params_init(modem_params);
    c6d2:	485d      	ldr	r0, [pc, #372]	; (c848 <main+0x1fc>)
    c6d4:	f004 fe8c 	bl	113f0 <modem_info_params_init>
	err = modem_info_rsrp_register(rsrp_notification_handler);
    c6d8:	485c      	ldr	r0, [pc, #368]	; (c84c <main+0x200>)
    c6da:	f004 fe51 	bl	11380 <modem_info_rsrp_register>
		LOG_INF("LTE Link Connecting ...\n");
    c6de:	2303      	movs	r3, #3
    c6e0:	f04f 0100 	mov.w	r1, #0
    c6e4:	f363 0107 	bfi	r1, r3, #0, #8
    c6e8:	f364 118f 	bfi	r1, r4, #6, #10
    c6ec:	4858      	ldr	r0, [pc, #352]	; (c850 <main+0x204>)
    c6ee:	f00e ffe0 	bl	1b6b2 <log_0>
		err = lte_lc_init_and_connect();
    c6f2:	f010 ff04 	bl	1d4fe <lte_lc_init_and_connect>
		LOG_INF("LTE Link Connected!\n");
    c6f6:	2303      	movs	r3, #3
    c6f8:	f04f 0100 	mov.w	r1, #0
    c6fc:	f363 0107 	bfi	r1, r3, #0, #8
    c700:	f364 118f 	bfi	r1, r4, #6, #10
    c704:	4853      	ldr	r0, [pc, #332]	; (c854 <main+0x208>)
    c706:	f00e ffd4 	bl	1b6b2 <log_0>
	err = modem_info_init();
    c70a:	f004 fe6b 	bl	113e4 <modem_info_init>
	err = modem_info_params_init(modem_params);
    c70e:	484e      	ldr	r0, [pc, #312]	; (c848 <main+0x1fc>)
    c710:	f004 fe6e 	bl	113f0 <modem_info_params_init>
	err = modem_info_rsrp_register(rsrp_notification_handler);
    c714:	484d      	ldr	r0, [pc, #308]	; (c84c <main+0x200>)
    c716:	f004 fe33 	bl	11380 <modem_info_rsrp_register>

	//setup_psm();

	init_modem_info(&info_params);

	mqtt_start_thread();
    c71a:	f000 fb5d 	bl	cdd8 <mqtt_start_thread>

	uint8_t sample_acc = 0;

	while(!mqtt_connected()) {
    c71e:	f000 fb89 	bl	ce34 <mqtt_connected>
    c722:	2800      	cmp	r0, #0
    c724:	d07b      	beq.n	c81e <main+0x1d2>
	}

	u8_t current_sample;
	uint8_t sample_cnt = 0;

	LOG_INF("----LOG_START----");
    c726:	2303      	movs	r3, #3
    c728:	f04f 0100 	mov.w	r1, #0
    c72c:	f363 0107 	bfi	r1, r3, #0, #8
    c730:	f364 118f 	bfi	r1, r4, #6, #10
    c734:	4848      	ldr	r0, [pc, #288]	; (c858 <main+0x20c>)
    c736:	f00e ffbc 	bl	1b6b2 <log_0>
	LOG_INF("TYPE | TIME | RSRP | SAMPLE");
    c73a:	2303      	movs	r3, #3
    c73c:	f04f 0100 	mov.w	r1, #0
    c740:	f363 0107 	bfi	r1, r3, #0, #8
	modem_info_string_get(MODEM_INFO_UE_MODE, modem_info_buff);

	int curr_active;
	lte_lc_psm_get(&actual_tau, &curr_active);
    c744:	4d45      	ldr	r5, [pc, #276]	; (c85c <main+0x210>)
	LOG_INF("TYPE | TIME | RSRP | SAMPLE");
    c746:	f364 118f 	bfi	r1, r4, #6, #10
    c74a:	4845      	ldr	r0, [pc, #276]	; (c860 <main+0x214>)
    c74c:	f00e ffb1 	bl	1b6b2 <log_0>
	modem_info_string_get(MODEM_INFO_UE_MODE, modem_info_buff);
    c750:	4944      	ldr	r1, [pc, #272]	; (c864 <main+0x218>)
    c752:	2004      	movs	r0, #4
    c754:	f004 fd7e 	bl	11254 <modem_info_string_get>
	lte_lc_psm_get(&actual_tau, &curr_active);
    c758:	a903      	add	r1, sp, #12
    c75a:	4628      	mov	r0, r5
    c75c:	f004 fc0e 	bl	10f7c <lte_lc_psm_get>
	LOG_INF("Reqested: TAU = %s | AT = %s", log_strdup(CONFIG_LTE_PSM_REQ_RPTAU), log_strdup(CONFIG_LTE_PSM_REQ_RAT));
    c760:	f04f 0700 	mov.w	r7, #0
    c764:	2303      	movs	r3, #3
    c766:	4840      	ldr	r0, [pc, #256]	; (c868 <main+0x21c>)
    c768:	f363 0707 	bfi	r7, r3, #0, #8
    c76c:	f000 fc9c 	bl	d0a8 <log_strdup>
    c770:	4680      	mov	r8, r0
    c772:	483e      	ldr	r0, [pc, #248]	; (c86c <main+0x220>)
    c774:	f000 fc98 	bl	d0a8 <log_strdup>
    c778:	f364 178f 	bfi	r7, r4, #6, #10
    c77c:	463b      	mov	r3, r7
    c77e:	4602      	mov	r2, r0
    c780:	4641      	mov	r1, r8
    c782:	483b      	ldr	r0, [pc, #236]	; (c870 <main+0x224>)
    c784:	f00e ffb6 	bl	1b6f4 <log_2>
	LOG_INF("Got: TAU = %d | AT = %d", actual_tau, curr_active);
    c788:	2203      	movs	r2, #3
    c78a:	f04f 0300 	mov.w	r3, #0
    c78e:	f362 0307 	bfi	r3, r2, #0, #8
    c792:	6829      	ldr	r1, [r5, #0]
    c794:	f364 138f 	bfi	r3, r4, #6, #10
    c798:	9a03      	ldr	r2, [sp, #12]
    c79a:	4836      	ldr	r0, [pc, #216]	; (c874 <main+0x228>)
    c79c:	f00e ffaa 	bl	1b6f4 <log_2>

	// Converting TAU to minutes
	actual_tau = actual_tau/60;
    c7a0:	233c      	movs	r3, #60	; 0x3c
    c7a2:	6829      	ldr	r1, [r5, #0]

	LOG_INF("Actual TAU [minutes]: %d", actual_tau);
    c7a4:	f04f 0200 	mov.w	r2, #0
	actual_tau = actual_tau/60;
    c7a8:	fb91 f1f3 	sdiv	r1, r1, r3
	LOG_INF("Actual TAU [minutes]: %d", actual_tau);
    c7ac:	2303      	movs	r3, #3
    c7ae:	f363 0207 	bfi	r2, r3, #0, #8
    c7b2:	f364 128f 	bfi	r2, r4, #6, #10
    c7b6:	4830      	ldr	r0, [pc, #192]	; (c878 <main+0x22c>)
	actual_tau = actual_tau/60;
    c7b8:	6029      	str	r1, [r5, #0]
	LOG_INF("Actual TAU [minutes]: %d", actual_tau);
    c7ba:	f00e ff87 	bl	1b6cc <log_1>

	timer_init();
    c7be:	f7ff ff3d 	bl	c63c <timer_init>
			//alarm_already = true;
		}*/
	
		//sensor_data_buffer[sample_cnt] = sensor_data_get();

		if (transmit) {
    c7c2:	4d2e      	ldr	r5, [pc, #184]	; (c87c <main+0x230>)
			//Data upload
			mqtt_data_publish(&current_sample,1);
			LOG_INF("periodic,%s,%d,%d", log_strdup(modem_info_buff), rsrp.value, sample_acc/sample_cnt);
    c7c4:	4f27      	ldr	r7, [pc, #156]	; (c864 <main+0x218>)
    c7c6:	f8df 80bc 	ldr.w	r8, [pc, #188]	; c884 <main+0x238>
	random_sample = sys_rand32_get() % 255;
    c7ca:	f002 fe57 	bl	f47c <sys_rand32_get>
    c7ce:	23ff      	movs	r3, #255	; 0xff
    c7d0:	fbb0 f3f3 	udiv	r3, r0, r3
    c7d4:	4418      	add	r0, r3
		if (transmit) {
    c7d6:	782b      	ldrb	r3, [r5, #0]
	random_sample = sys_rand32_get() % 255;
    c7d8:	f88d 000b 	strb.w	r0, [sp, #11]
		if (transmit) {
    c7dc:	b1d3      	cbz	r3, c814 <main+0x1c8>
			mqtt_data_publish(&current_sample,1);
    c7de:	2101      	movs	r1, #1
    c7e0:	f10d 000b 	add.w	r0, sp, #11
    c7e4:	f000 fac8 	bl	cd78 <mqtt_data_publish>
			LOG_INF("periodic,%s,%d,%d", log_strdup(modem_info_buff), rsrp.value, sample_acc/sample_cnt);
    c7e8:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
    c7ec:	f043 0303 	orr.w	r3, r3, #3
    c7f0:	4638      	mov	r0, r7
    c7f2:	f363 0607 	bfi	r6, r3, #0, #8
    c7f6:	f000 fc57 	bl	d0a8 <log_strdup>
    c7fa:	f364 168f 	bfi	r6, r4, #6, #10
    c7fe:	f8ad 6000 	strh.w	r6, [sp]
    c802:	2300      	movs	r3, #0
    c804:	4601      	mov	r1, r0
    c806:	f8b8 2000 	ldrh.w	r2, [r8]
    c80a:	481d      	ldr	r0, [pc, #116]	; (c880 <main+0x234>)
    c80c:	f00e ff8a 	bl	1b724 <log_3>
			transmit = false;
    c810:	2300      	movs	r3, #0
    c812:	702b      	strb	r3, [r5, #0]
	return z_impl_k_sleep(ms);
    c814:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    c818:	f00e f80a 	bl	1a830 <z_impl_k_sleep>
    c81c:	e7d5      	b.n	c7ca <main+0x17e>
    c81e:	2064      	movs	r0, #100	; 0x64
    c820:	f00e f806 	bl	1a830 <z_impl_k_sleep>
    c824:	e77b      	b.n	c71e <main+0xd2>
    c826:	bf00      	nop
    c828:	0001e732 	.word	0x0001e732
    c82c:	0001e02c 	.word	0x0001e02c
    c830:	0001e02c 	.word	0x0001e02c
    c834:	0001e75a 	.word	0x0001e75a
    c838:	0000c595 	.word	0x0000c595
    c83c:	0001e782 	.word	0x0001e782
    c840:	0001e7ae 	.word	0x0001e7ae
    c844:	0001e7d7 	.word	0x0001e7d7
    c848:	20020000 	.word	0x20020000
    c84c:	0000c539 	.word	0x0000c539
    c850:	0001e7ff 	.word	0x0001e7ff
    c854:	0001e818 	.word	0x0001e818
    c858:	0001e82d 	.word	0x0001e82d
    c85c:	20020880 	.word	0x20020880
    c860:	0001e83f 	.word	0x0001e83f
    c864:	20021e86 	.word	0x20021e86
    c868:	0001e85b 	.word	0x0001e85b
    c86c:	0001e864 	.word	0x0001e864
    c870:	0001e86d 	.word	0x0001e86d
    c874:	0001e88a 	.word	0x0001e88a
    c878:	0001e8a2 	.word	0x0001e8a2
    c87c:	20021eea 	.word	0x20021eea
    c880:	0001e8bb 	.word	0x0001e8bb
    c884:	20026834 	.word	0x20026834

0000c888 <mqtt_thread>:
int mqtt_connected(void) {
	return connected;
}

static void mqtt_thread(void *blank1, void *blank2, void *blank3)
{
    c888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mqtt_client_init(client);
    c88c:	4884      	ldr	r0, [pc, #528]	; (caa0 <mqtt_thread+0x218>)
{
    c88e:	b090      	sub	sp, #64	; 0x40
	mqtt_client_init(client);
    c890:	f00f fe72 	bl	1c578 <mqtt_client_init>
	struct addrinfo hints = {
    c894:	2220      	movs	r2, #32
    c896:	2401      	movs	r4, #1
			      struct addrinfo **res)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->getaddrinfo);

	return socket_ops->getaddrinfo(node, service, hints, res);
    c898:	4f82      	ldr	r7, [pc, #520]	; (caa4 <mqtt_thread+0x21c>)
    c89a:	2100      	movs	r1, #0
    c89c:	eb0d 0002 	add.w	r0, sp, r2
    c8a0:	f00f fa5d 	bl	1bd5e <memset>
    c8a4:	683b      	ldr	r3, [r7, #0]
    c8a6:	2100      	movs	r1, #0
    c8a8:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    c8aa:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    c8ae:	ab03      	add	r3, sp, #12
    c8b0:	aa08      	add	r2, sp, #32
    c8b2:	487d      	ldr	r0, [pc, #500]	; (caa8 <mqtt_thread+0x220>)
    c8b4:	47a8      	blx	r5
	if (err) {
    c8b6:	4d7d      	ldr	r5, [pc, #500]	; (caac <mqtt_thread+0x224>)
    c8b8:	4b7d      	ldr	r3, [pc, #500]	; (cab0 <mqtt_thread+0x228>)
    c8ba:	4601      	mov	r1, r0
    c8bc:	1aed      	subs	r5, r5, r3
    c8be:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    c8c2:	4e7c      	ldr	r6, [pc, #496]	; (cab4 <mqtt_thread+0x22c>)
    c8c4:	2800      	cmp	r0, #0
    c8c6:	d033      	beq.n	c930 <mqtt_thread+0xa8>
		LOG_ERR("ERROR: getaddrinfo failed %d\n", err);
    c8c8:	f04f 0200 	mov.w	r2, #0
    c8cc:	f364 0207 	bfi	r2, r4, #0, #8
    c8d0:	f365 128f 	bfi	r2, r5, #6, #10
    c8d4:	4878      	ldr	r0, [pc, #480]	; (cab8 <mqtt_thread+0x230>)
    c8d6:	f00e fef9 	bl	1b6cc <log_1>
	client->broker = &broker;
    c8da:	4c71      	ldr	r4, [pc, #452]	; (caa0 <mqtt_thread+0x218>)
	client->evt_cb = mqtt_evt_handler;
    c8dc:	4b77      	ldr	r3, [pc, #476]	; (cabc <mqtt_thread+0x234>)
	client->client_id.utf8 = (u8_t *)CONFIG_MQTT_CLIENT_ID;
    c8de:	4878      	ldr	r0, [pc, #480]	; (cac0 <mqtt_thread+0x238>)
	client->evt_cb = mqtt_evt_handler;
    c8e0:	64a3      	str	r3, [r4, #72]	; 0x48
	client->broker = &broker;
    c8e2:	6366      	str	r6, [r4, #52]	; 0x34
	client->client_id.utf8 = (u8_t *)CONFIG_MQTT_CLIENT_ID;
    c8e4:	62e0      	str	r0, [r4, #44]	; 0x2c
	client->client_id.size = strlen(CONFIG_MQTT_CLIENT_ID);
    c8e6:	f00f f9de 	bl	1bca6 <strlen>
	client->protocol_version = MQTT_VERSION_3_1_1;
    c8ea:	2204      	movs	r2, #4
    c8ec:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
	client->rx_buf = rx_buffer;
    c8f0:	4a74      	ldr	r2, [pc, #464]	; (cac4 <mqtt_thread+0x23c>)
	client->password = NULL;
    c8f2:	2300      	movs	r3, #0
	client->rx_buf = rx_buffer;
    c8f4:	64e2      	str	r2, [r4, #76]	; 0x4c
	client->rx_buf_size = sizeof(rx_buffer);
    c8f6:	2280      	movs	r2, #128	; 0x80
	client->tx_buf = tx_buffer;
    c8f8:	4973      	ldr	r1, [pc, #460]	; (cac8 <mqtt_thread+0x240>)
	client->client_id.size = strlen(CONFIG_MQTT_CLIENT_ID);
    c8fa:	6320      	str	r0, [r4, #48]	; 0x30
	int err;

	client_init(&client);

	err = mqtt_connect(&client);
    c8fc:	4620      	mov	r0, r4
	client->tx_buf_size = sizeof(tx_buffer);
    c8fe:	e9c4 1215 	strd	r1, r2, [r4, #84]	; 0x54
	client->user_name = NULL;
    c902:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
	client->rx_buf_size = sizeof(rx_buffer);
    c906:	6522      	str	r2, [r4, #80]	; 0x50
	client->transport.type = MQTT_TRANSPORT_NON_SECURE;
    c908:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	err = mqtt_connect(&client);
    c90c:	f00f fe4d 	bl	1c5aa <mqtt_connect>
	if (err != 0) {
    c910:	4601      	mov	r1, r0
    c912:	2800      	cmp	r0, #0
    c914:	d042      	beq.n	c99c <mqtt_thread+0x114>
		LOG_ERR("ERROR: mqtt_connect %d\n", err);
    c916:	f04f 0200 	mov.w	r2, #0
    c91a:	2301      	movs	r3, #1
    c91c:	486b      	ldr	r0, [pc, #428]	; (cacc <mqtt_thread+0x244>)
    c91e:	f363 0207 	bfi	r2, r3, #0, #8
    c922:	f365 128f 	bfi	r2, r5, #6, #10

	LOG_INF("Disconnecting MQTT client...\n");

	err = mqtt_disconnect(&client);
	if (err) {
		LOG_ERR("Could not disconnect MQTT client. Error: %d\n", err);
    c926:	f00e fed1 	bl	1b6cc <log_1>
	}
}
    c92a:	b010      	add	sp, #64	; 0x40
    c92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	addr = result;
    c930:	9b03      	ldr	r3, [sp, #12]
	while (addr != NULL) {
    c932:	b1fb      	cbz	r3, c974 <mqtt_thread+0xec>
		if (addr->ai_addrlen == sizeof(struct sockaddr_in)) {
    c934:	6919      	ldr	r1, [r3, #16]
    c936:	2908      	cmp	r1, #8
    c938:	d121      	bne.n	c97e <mqtt_thread+0xf6>
				->sin_addr.s_addr;
    c93a:	695b      	ldr	r3, [r3, #20]
			broker4->sin_family = AF_INET;
    c93c:	8034      	strh	r4, [r6, #0]
				->sin_addr.s_addr;
    c93e:	685b      	ldr	r3, [r3, #4]
			broker4->sin_addr.s_addr =
    c940:	6073      	str	r3, [r6, #4]
			broker4->sin_port = htons(CONFIG_MQTT_BROKER_PORT);
    c942:	f645 3307 	movw	r3, #23303	; 0x5b07
    c946:	8073      	strh	r3, [r6, #2]
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
    c948:	2310      	movs	r3, #16
    c94a:	1d31      	adds	r1, r6, #4
    c94c:	eb0d 0203 	add.w	r2, sp, r3
    c950:	4620      	mov	r0, r4
    c952:	f002 fb6b 	bl	f02c <z_impl_net_addr_ntop>
			LOG_INF("IPv4 Address found %s\n", log_strdup(ipv4_addr));
    c956:	f04f 0400 	mov.w	r4, #0
    c95a:	2303      	movs	r3, #3
    c95c:	a804      	add	r0, sp, #16
    c95e:	f363 0407 	bfi	r4, r3, #0, #8
    c962:	f000 fba1 	bl	d0a8 <log_strdup>
    c966:	f365 148f 	bfi	r4, r5, #6, #10
    c96a:	4601      	mov	r1, r0
    c96c:	4622      	mov	r2, r4
    c96e:	4858      	ldr	r0, [pc, #352]	; (cad0 <mqtt_thread+0x248>)
    c970:	f00e feac 	bl	1b6cc <log_1>
static inline void freeaddrinfo(struct addrinfo *res)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->freeaddrinfo);

	return socket_ops->freeaddrinfo(res);
    c974:	683b      	ldr	r3, [r7, #0]
    c976:	9803      	ldr	r0, [sp, #12]
    c978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c97a:	4798      	blx	r3
    c97c:	e7ad      	b.n	c8da <mqtt_thread+0x52>
			LOG_WRN("ai_addrlen = %u should be %u or %u\n",
    c97e:	2202      	movs	r2, #2
    c980:	f04f 0300 	mov.w	r3, #0
    c984:	f362 0307 	bfi	r3, r2, #0, #8
    c988:	f365 138f 	bfi	r3, r5, #6, #10
    c98c:	f8ad 3000 	strh.w	r3, [sp]
    c990:	2208      	movs	r2, #8
    c992:	2318      	movs	r3, #24
    c994:	484f      	ldr	r0, [pc, #316]	; (cad4 <mqtt_thread+0x24c>)
    c996:	f00e fec5 	bl	1b724 <log_3>
		break;
    c99a:	e7eb      	b.n	c974 <mqtt_thread+0xec>
	if (c->transport.type == MQTT_TRANSPORT_NON_SECURE) {
    c99c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    c9a0:	b153      	cbz	r3, c9b8 <mqtt_thread+0x130>
		LOG_ERR("ERROR: fds_init %d\n", err);
    c9a2:	f04f 0200 	mov.w	r2, #0
    c9a6:	2301      	movs	r3, #1
    c9a8:	f363 0207 	bfi	r2, r3, #0, #8
    c9ac:	f365 128f 	bfi	r2, r5, #6, #10
    c9b0:	f06f 0122 	mvn.w	r1, #34	; 0x22
    c9b4:	4848      	ldr	r0, [pc, #288]	; (cad8 <mqtt_thread+0x250>)
    c9b6:	e7b6      	b.n	c926 <mqtt_thread+0x9e>
		fds.fd = c->transport.tcp.sock;
    c9b8:	4e48      	ldr	r6, [pc, #288]	; (cadc <mqtt_thread+0x254>)
    c9ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	return socket_ops->poll(fds, nfds, timeout);
    c9bc:	46b0      	mov	r8, r6
    c9be:	6033      	str	r3, [r6, #0]
	fds.events = POLLIN;
    c9c0:	2301      	movs	r3, #1
    c9c2:	80b3      	strh	r3, [r6, #4]
		err = poll(&fds, 1, mqtt_keepalive_time_left(&client));
    c9c4:	4620      	mov	r0, r4
    c9c6:	f00f ff04 	bl	1c7d2 <mqtt_keepalive_time_left>
    c9ca:	683b      	ldr	r3, [r7, #0]
    c9cc:	4602      	mov	r2, r0
    c9ce:	699b      	ldr	r3, [r3, #24]
    c9d0:	2101      	movs	r1, #1
    c9d2:	4640      	mov	r0, r8
    c9d4:	4798      	blx	r3
		if (err < 0) {
    c9d6:	2800      	cmp	r0, #0
    c9d8:	da26      	bge.n	ca28 <mqtt_thread+0x1a0>
			LOG_ERR("ERROR: poll %d\n", errno);
    c9da:	2301      	movs	r3, #1
    c9dc:	f04f 0400 	mov.w	r4, #0
    c9e0:	f363 0407 	bfi	r4, r3, #0, #8
    c9e4:	f365 148f 	bfi	r4, r5, #6, #10
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    c9e8:	f00d f810 	bl	19a0c <z_impl_z_errno>
    c9ec:	4622      	mov	r2, r4
    c9ee:	6801      	ldr	r1, [r0, #0]
    c9f0:	483b      	ldr	r0, [pc, #236]	; (cae0 <mqtt_thread+0x258>)
			LOG_ERR("ERROR: mqtt_live %d\n", err);
    c9f2:	f00e fe6b 	bl	1b6cc <log_1>
	LOG_INF("Disconnecting MQTT client...\n");
    c9f6:	2303      	movs	r3, #3
    c9f8:	f04f 0100 	mov.w	r1, #0
    c9fc:	f363 0107 	bfi	r1, r3, #0, #8
    ca00:	f365 118f 	bfi	r1, r5, #6, #10
    ca04:	4837      	ldr	r0, [pc, #220]	; (cae4 <mqtt_thread+0x25c>)
    ca06:	f00e fe54 	bl	1b6b2 <log_0>
	err = mqtt_disconnect(&client);
    ca0a:	4825      	ldr	r0, [pc, #148]	; (caa0 <mqtt_thread+0x218>)
    ca0c:	f00f fe3f 	bl	1c68e <mqtt_disconnect>
	if (err) {
    ca10:	4601      	mov	r1, r0
    ca12:	2800      	cmp	r0, #0
    ca14:	d089      	beq.n	c92a <mqtt_thread+0xa2>
		LOG_ERR("Could not disconnect MQTT client. Error: %d\n", err);
    ca16:	f04f 0200 	mov.w	r2, #0
    ca1a:	2301      	movs	r3, #1
    ca1c:	f363 0207 	bfi	r2, r3, #0, #8
    ca20:	f365 128f 	bfi	r2, r5, #6, #10
    ca24:	4830      	ldr	r0, [pc, #192]	; (cae8 <mqtt_thread+0x260>)
    ca26:	e77e      	b.n	c926 <mqtt_thread+0x9e>
		err = mqtt_live(&client);
    ca28:	4620      	mov	r0, r4
    ca2a:	f00f feab 	bl	1c784 <mqtt_live>
		if ((err != 0) && (err != -EAGAIN)) {
    ca2e:	4601      	mov	r1, r0
    ca30:	b158      	cbz	r0, ca4a <mqtt_thread+0x1c2>
    ca32:	f110 0f0b 	cmn.w	r0, #11
    ca36:	d008      	beq.n	ca4a <mqtt_thread+0x1c2>
			LOG_ERR("ERROR: mqtt_live %d\n", err);
    ca38:	f04f 0200 	mov.w	r2, #0
    ca3c:	2301      	movs	r3, #1
    ca3e:	f363 0207 	bfi	r2, r3, #0, #8
    ca42:	f365 128f 	bfi	r2, r5, #6, #10
    ca46:	4829      	ldr	r0, [pc, #164]	; (caec <mqtt_thread+0x264>)
    ca48:	e7d3      	b.n	c9f2 <mqtt_thread+0x16a>
		if ((fds.revents & POLLIN) == POLLIN) {
    ca4a:	88f3      	ldrh	r3, [r6, #6]
    ca4c:	07d9      	lsls	r1, r3, #31
    ca4e:	d50d      	bpl.n	ca6c <mqtt_thread+0x1e4>
			err = mqtt_input(&client);
    ca50:	4620      	mov	r0, r4
    ca52:	f00f fed5 	bl	1c800 <mqtt_input>
			if (err != 0) {
    ca56:	4601      	mov	r1, r0
    ca58:	b140      	cbz	r0, ca6c <mqtt_thread+0x1e4>
				LOG_ERR("ERROR: mqtt_input %d\n", err);
    ca5a:	f04f 0200 	mov.w	r2, #0
    ca5e:	2301      	movs	r3, #1
    ca60:	f363 0207 	bfi	r2, r3, #0, #8
    ca64:	f365 128f 	bfi	r2, r5, #6, #10
    ca68:	4821      	ldr	r0, [pc, #132]	; (caf0 <mqtt_thread+0x268>)
    ca6a:	e7c2      	b.n	c9f2 <mqtt_thread+0x16a>
		if ((fds.revents & POLLERR) == POLLERR) {
    ca6c:	88f3      	ldrh	r3, [r6, #6]
    ca6e:	071a      	lsls	r2, r3, #28
    ca70:	d50a      	bpl.n	ca88 <mqtt_thread+0x200>
			LOG_ERR("POLLERR\n");
    ca72:	f04f 0100 	mov.w	r1, #0
    ca76:	2301      	movs	r3, #1
    ca78:	481e      	ldr	r0, [pc, #120]	; (caf4 <mqtt_thread+0x26c>)
    ca7a:	f363 0107 	bfi	r1, r3, #0, #8
    ca7e:	f365 118f 	bfi	r1, r5, #6, #10
			LOG_ERR("POLLNVAL\n");
    ca82:	f00e fe16 	bl	1b6b2 <log_0>
    ca86:	e7b6      	b.n	c9f6 <mqtt_thread+0x16e>
		if ((fds.revents & POLLNVAL) == POLLNVAL) {
    ca88:	069b      	lsls	r3, r3, #26
    ca8a:	d59b      	bpl.n	c9c4 <mqtt_thread+0x13c>
			LOG_ERR("POLLNVAL\n");
    ca8c:	f04f 0100 	mov.w	r1, #0
    ca90:	2301      	movs	r3, #1
    ca92:	f363 0107 	bfi	r1, r3, #0, #8
    ca96:	f365 118f 	bfi	r1, r5, #6, #10
    ca9a:	4817      	ldr	r0, [pc, #92]	; (caf8 <mqtt_thread+0x270>)
    ca9c:	e7f1      	b.n	ca82 <mqtt_thread+0x1fa>
    ca9e:	bf00      	nop
    caa0:	20020888 	.word	0x20020888
    caa4:	20020ad8 	.word	0x20020ad8
    caa8:	0001f339 	.word	0x0001f339
    caac:	0001e034 	.word	0x0001e034
    cab0:	0001e02c 	.word	0x0001e02c
    cab4:	20021e64 	.word	0x20021e64
    cab8:	0001f34a 	.word	0x0001f34a
    cabc:	0000cafd 	.word	0x0000cafd
    cac0:	0001f3a3 	.word	0x0001f3a3
    cac4:	20021f6c 	.word	0x20021f6c
    cac8:	20021fec 	.word	0x20021fec
    cacc:	0001f3b1 	.word	0x0001f3b1
    cad0:	0001f368 	.word	0x0001f368
    cad4:	0001f37f 	.word	0x0001f37f
    cad8:	0001f3c9 	.word	0x0001f3c9
    cadc:	200208ec 	.word	0x200208ec
    cae0:	0001f3dd 	.word	0x0001f3dd
    cae4:	0001f42b 	.word	0x0001f42b
    cae8:	0001f449 	.word	0x0001f449
    caec:	0001f3ed 	.word	0x0001f3ed
    caf0:	0001f402 	.word	0x0001f402
    caf4:	0001f418 	.word	0x0001f418
    caf8:	0001f421 	.word	0x0001f421

0000cafc <mqtt_evt_handler>:
{
    cafc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cb00:	b088      	sub	sp, #32
	switch (evt->type) {
    cb02:	780b      	ldrb	r3, [r1, #0]
{
    cb04:	af02      	add	r7, sp, #8
    cb06:	4606      	mov	r6, r0
    cb08:	460c      	mov	r4, r1
	switch (evt->type) {
    cb0a:	2b07      	cmp	r3, #7
    cb0c:	d852      	bhi.n	cbb4 <mqtt_evt_handler+0xb8>
    cb0e:	e8df f013 	tbh	[pc, r3, lsl #1]
    cb12:	0008      	.short	0x0008
    cb14:	006f0055 	.word	0x006f0055
    cb18:	005100d7 	.word	0x005100d7
    cb1c:	00510051 	.word	0x00510051
    cb20:	00e8      	.short	0x00e8
		if (evt->result != 0) {
    cb22:	4c81      	ldr	r4, [pc, #516]	; (cd28 <mqtt_evt_handler+0x22c>)
    cb24:	4b81      	ldr	r3, [pc, #516]	; (cd2c <mqtt_evt_handler+0x230>)
    cb26:	69c9      	ldr	r1, [r1, #28]
    cb28:	1ae4      	subs	r4, r4, r3
    cb2a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    cb2e:	b151      	cbz	r1, cb46 <mqtt_evt_handler+0x4a>
			LOG_WRN("MQTT connect failed %d\n", evt->result);
    cb30:	f04f 0200 	mov.w	r2, #0
    cb34:	2302      	movs	r3, #2
    cb36:	487e      	ldr	r0, [pc, #504]	; (cd30 <mqtt_evt_handler+0x234>)
    cb38:	f363 0207 	bfi	r2, r3, #0, #8
    cb3c:	f364 128f 	bfi	r2, r4, #6, #10
			LOG_WRN("MQTT SUBACK error %d\n", evt->result);
    cb40:	f00e fdc4 	bl	1b6cc <log_1>
    cb44:	e036      	b.n	cbb4 <mqtt_evt_handler+0xb8>
		connected = true;
    cb46:	2601      	movs	r6, #1
    cb48:	4b7a      	ldr	r3, [pc, #488]	; (cd34 <mqtt_evt_handler+0x238>)
		LOG_INF("[%s:%d] MQTT client connected!\n", log_strdup(__func__), __LINE__);
    cb4a:	f04f 0500 	mov.w	r5, #0
		connected = true;
    cb4e:	701e      	strb	r6, [r3, #0]
		LOG_INF("[%s:%d] MQTT client connected!\n", log_strdup(__func__), __LINE__);
    cb50:	2303      	movs	r3, #3
    cb52:	4879      	ldr	r0, [pc, #484]	; (cd38 <mqtt_evt_handler+0x23c>)
    cb54:	f363 0507 	bfi	r5, r3, #0, #8
    cb58:	f000 faa6 	bl	d0a8 <log_strdup>
    cb5c:	f364 158f 	bfi	r5, r4, #6, #10
    cb60:	462b      	mov	r3, r5
	struct mqtt_topic subscribe_topic = {
    cb62:	4d76      	ldr	r5, [pc, #472]	; (cd3c <mqtt_evt_handler+0x240>)
		LOG_INF("[%s:%d] MQTT client connected!\n", log_strdup(__func__), __LINE__);
    cb64:	4601      	mov	r1, r0
    cb66:	22a7      	movs	r2, #167	; 0xa7
    cb68:	4875      	ldr	r0, [pc, #468]	; (cd40 <mqtt_evt_handler+0x244>)
    cb6a:	f00e fdc3 	bl	1b6f4 <log_2>
			.size = strlen(CONFIG_MQTT_SUB_TOPIC)
    cb6e:	4628      	mov	r0, r5
	struct mqtt_topic subscribe_topic = {
    cb70:	60fd      	str	r5, [r7, #12]
			.size = strlen(CONFIG_MQTT_SUB_TOPIC)
    cb72:	f00f f898 	bl	1bca6 <strlen>
	const struct mqtt_subscription_list subscription_list = {
    cb76:	f107 030c 	add.w	r3, r7, #12
    cb7a:	607b      	str	r3, [r7, #4]
    cb7c:	4b71      	ldr	r3, [pc, #452]	; (cd44 <mqtt_evt_handler+0x248>)
	struct mqtt_topic subscribe_topic = {
    cb7e:	753e      	strb	r6, [r7, #20]
	const struct mqtt_subscription_list subscription_list = {
    cb80:	60bb      	str	r3, [r7, #8]
	LOG_INF("Subscribing to: %s len %u\n", log_strdup(CONFIG_MQTT_SUB_TOPIC),
    cb82:	f04f 0600 	mov.w	r6, #0
    cb86:	2303      	movs	r3, #3
	struct mqtt_topic subscribe_topic = {
    cb88:	6138      	str	r0, [r7, #16]
	LOG_INF("Subscribing to: %s len %u\n", log_strdup(CONFIG_MQTT_SUB_TOPIC),
    cb8a:	4628      	mov	r0, r5
    cb8c:	f363 0607 	bfi	r6, r3, #0, #8
    cb90:	f000 fa8a 	bl	d0a8 <log_strdup>
    cb94:	f364 168f 	bfi	r6, r4, #6, #10
    cb98:	4604      	mov	r4, r0
    cb9a:	4628      	mov	r0, r5
    cb9c:	f00f f883 	bl	1bca6 <strlen>
    cba0:	4621      	mov	r1, r4
    cba2:	4602      	mov	r2, r0
    cba4:	4633      	mov	r3, r6
    cba6:	4868      	ldr	r0, [pc, #416]	; (cd48 <mqtt_evt_handler+0x24c>)
    cba8:	f00e fda4 	bl	1b6f4 <log_2>
	return mqtt_subscribe(&client, &subscription_list);
    cbac:	1d39      	adds	r1, r7, #4
    cbae:	4867      	ldr	r0, [pc, #412]	; (cd4c <mqtt_evt_handler+0x250>)
    cbb0:	f00f fd96 	bl	1c6e0 <mqtt_subscribe>
}
    cbb4:	3718      	adds	r7, #24
    cbb6:	46bd      	mov	sp, r7
    cbb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_WRN("[%s:%d] MQTT client disconnected %d\n", log_strdup(__func__),
    cbbc:	2302      	movs	r3, #2
    cbbe:	f04f 0500 	mov.w	r5, #0
    cbc2:	4a5a      	ldr	r2, [pc, #360]	; (cd2c <mqtt_evt_handler+0x230>)
    cbc4:	f363 0507 	bfi	r5, r3, #0, #8
    cbc8:	4b57      	ldr	r3, [pc, #348]	; (cd28 <mqtt_evt_handler+0x22c>)
    cbca:	485b      	ldr	r0, [pc, #364]	; (cd38 <mqtt_evt_handler+0x23c>)
    cbcc:	1a9b      	subs	r3, r3, r2
    cbce:	08db      	lsrs	r3, r3, #3
    cbd0:	f363 158f 	bfi	r5, r3, #6, #10
    cbd4:	f000 fa68 	bl	d0a8 <log_strdup>
    cbd8:	f8ad 5000 	strh.w	r5, [sp]
    cbdc:	69e3      	ldr	r3, [r4, #28]
    cbde:	22ad      	movs	r2, #173	; 0xad
    cbe0:	4601      	mov	r1, r0
    cbe2:	485b      	ldr	r0, [pc, #364]	; (cd50 <mqtt_evt_handler+0x254>)
    cbe4:	f00e fd9e 	bl	1b724 <log_3>
		connected = false;
    cbe8:	2200      	movs	r2, #0
    cbea:	4b52      	ldr	r3, [pc, #328]	; (cd34 <mqtt_evt_handler+0x238>)
    cbec:	701a      	strb	r2, [r3, #0]
		break;
    cbee:	e7e1      	b.n	cbb4 <mqtt_evt_handler+0xb8>
		err = publish_get_payload(c, p->message.payload.len);
    cbf0:	694b      	ldr	r3, [r1, #20]
	u8_t *end = buf + length;
    cbf2:	4d58      	ldr	r5, [pc, #352]	; (cd54 <mqtt_evt_handler+0x258>)
	if (length > sizeof(payload_buf)) {
    cbf4:	2b80      	cmp	r3, #128	; 0x80
	u8_t *end = buf + length;
    cbf6:	eb05 0803 	add.w	r8, r5, r3
	if (length > sizeof(payload_buf)) {
    cbfa:	d85e      	bhi.n	ccba <mqtt_evt_handler+0x1be>
    cbfc:	f8df 9158 	ldr.w	r9, [pc, #344]	; cd58 <mqtt_evt_handler+0x25c>
    cc00:	f8df a170 	ldr.w	sl, [pc, #368]	; cd74 <mqtt_evt_handler+0x278>
	while (buf < end) {
    cc04:	45a8      	cmp	r8, r5
    cc06:	d811      	bhi.n	cc2c <mqtt_evt_handler+0x130>
			data_print("Received:", payload_buf,
    cc08:	6964      	ldr	r4, [r4, #20]
{
    cc0a:	466e      	mov	r6, sp
	char buf[len + 1];
    cc0c:	f104 0308 	add.w	r3, r4, #8
    cc10:	f023 0307 	bic.w	r3, r3, #7
    cc14:	ebad 0d03 	sub.w	sp, sp, r3
    cc18:	ad02      	add	r5, sp, #8
	memcpy(buf, data, len);
    cc1a:	4622      	mov	r2, r4
    cc1c:	494d      	ldr	r1, [pc, #308]	; (cd54 <mqtt_evt_handler+0x258>)
    cc1e:	4628      	mov	r0, r5
    cc20:	f00f f873 	bl	1bd0a <memcpy>
	buf[len] = 0;
    cc24:	2300      	movs	r3, #0
    cc26:	552b      	strb	r3, [r5, r4]
	LOG_DBG("%s%s\n", log_strdup(prefix), log_strdup(buf));
    cc28:	46b5      	mov	sp, r6
    cc2a:	e7c3      	b.n	cbb4 <mqtt_evt_handler+0xb8>
		int ret = mqtt_read_publish_payload(c, buf, end - buf);
    cc2c:	4629      	mov	r1, r5
    cc2e:	eba8 0205 	sub.w	r2, r8, r5
    cc32:	4630      	mov	r0, r6
    cc34:	f00f fe05 	bl	1c842 <mqtt_read_publish_payload>
		if (ret < 0) {
    cc38:	1e01      	subs	r1, r0, #0
    cc3a:	da3b      	bge.n	ccb4 <mqtt_evt_handler+0x1b8>
			if (ret != -EAGAIN) {
    cc3c:	f111 0f0b 	cmn.w	r1, #11
    cc40:	d10b      	bne.n	cc5a <mqtt_evt_handler+0x15e>
    cc42:	f8da 3000 	ldr.w	r3, [sl]
    cc46:	f64e 2260 	movw	r2, #60000	; 0xea60
    cc4a:	699b      	ldr	r3, [r3, #24]
    cc4c:	2101      	movs	r1, #1
    cc4e:	4842      	ldr	r0, [pc, #264]	; (cd58 <mqtt_evt_handler+0x25c>)
    cc50:	4798      	blx	r3
			if (err > 0 && (fds.revents & POLLIN) == POLLIN) {
    cc52:	2800      	cmp	r0, #0
    cc54:	dc29      	bgt.n	ccaa <mqtt_evt_handler+0x1ae>
				return -EIO;
    cc56:	f06f 0104 	mvn.w	r1, #4
			LOG_WRN("mqtt_read_publish_payload: Failed! %d\n", err);
    cc5a:	2302      	movs	r3, #2
    cc5c:	f04f 0200 	mov.w	r2, #0
    cc60:	4832      	ldr	r0, [pc, #200]	; (cd2c <mqtt_evt_handler+0x230>)
    cc62:	f363 0207 	bfi	r2, r3, #0, #8
    cc66:	4b30      	ldr	r3, [pc, #192]	; (cd28 <mqtt_evt_handler+0x22c>)
    cc68:	1a1b      	subs	r3, r3, r0
    cc6a:	f3c3 04c9 	ubfx	r4, r3, #3, #10
    cc6e:	f364 128f 	bfi	r2, r4, #6, #10
    cc72:	483a      	ldr	r0, [pc, #232]	; (cd5c <mqtt_evt_handler+0x260>)
    cc74:	f00e fd2a 	bl	1b6cc <log_1>
			LOG_WRN("Disconnecting MQTT client...\n");
    cc78:	2302      	movs	r3, #2
    cc7a:	f04f 0100 	mov.w	r1, #0
    cc7e:	f363 0107 	bfi	r1, r3, #0, #8
    cc82:	f364 118f 	bfi	r1, r4, #6, #10
    cc86:	4836      	ldr	r0, [pc, #216]	; (cd60 <mqtt_evt_handler+0x264>)
    cc88:	f00e fd13 	bl	1b6b2 <log_0>
			err = mqtt_disconnect(c);
    cc8c:	4630      	mov	r0, r6
    cc8e:	f00f fcfe 	bl	1c68e <mqtt_disconnect>
			if (err) {
    cc92:	4601      	mov	r1, r0
    cc94:	2800      	cmp	r0, #0
    cc96:	d08d      	beq.n	cbb4 <mqtt_evt_handler+0xb8>
				LOG_WRN("Could not disconnect: %d\n", err);
    cc98:	f04f 0200 	mov.w	r2, #0
    cc9c:	2302      	movs	r3, #2
    cc9e:	f363 0207 	bfi	r2, r3, #0, #8
    cca2:	f364 128f 	bfi	r2, r4, #6, #10
    cca6:	482f      	ldr	r0, [pc, #188]	; (cd64 <mqtt_evt_handler+0x268>)
    cca8:	e74a      	b.n	cb40 <mqtt_evt_handler+0x44>
			if (err > 0 && (fds.revents & POLLIN) == POLLIN) {
    ccaa:	f8b9 3006 	ldrh.w	r3, [r9, #6]
    ccae:	07db      	lsls	r3, r3, #31
    ccb0:	d4a8      	bmi.n	cc04 <mqtt_evt_handler+0x108>
    ccb2:	e7d0      	b.n	cc56 <mqtt_evt_handler+0x15a>
		if (ret == 0) {
    ccb4:	d0cf      	beq.n	cc56 <mqtt_evt_handler+0x15a>
		buf += ret;
    ccb6:	440d      	add	r5, r1
    ccb8:	e7a4      	b.n	cc04 <mqtt_evt_handler+0x108>
		return -EMSGSIZE;
    ccba:	f06f 0123 	mvn.w	r1, #35	; 0x23
    ccbe:	e7cc      	b.n	cc5a <mqtt_evt_handler+0x15e>
		if (evt->result != 0) {
    ccc0:	69c9      	ldr	r1, [r1, #28]
    ccc2:	2900      	cmp	r1, #0
    ccc4:	f43f af76 	beq.w	cbb4 <mqtt_evt_handler+0xb8>
			LOG_WRN("MQTT PUBACK error %d\n", evt->result);
    ccc8:	2302      	movs	r3, #2
    ccca:	f04f 0200 	mov.w	r2, #0
    ccce:	4817      	ldr	r0, [pc, #92]	; (cd2c <mqtt_evt_handler+0x230>)
    ccd0:	f363 0207 	bfi	r2, r3, #0, #8
    ccd4:	4b14      	ldr	r3, [pc, #80]	; (cd28 <mqtt_evt_handler+0x22c>)
    ccd6:	1a1b      	subs	r3, r3, r0
    ccd8:	08db      	lsrs	r3, r3, #3
    ccda:	f363 128f 	bfi	r2, r3, #6, #10
    ccde:	4822      	ldr	r0, [pc, #136]	; (cd68 <mqtt_evt_handler+0x26c>)
    cce0:	e72e      	b.n	cb40 <mqtt_evt_handler+0x44>
		if (evt->result != 0) {
    cce2:	4b11      	ldr	r3, [pc, #68]	; (cd28 <mqtt_evt_handler+0x22c>)
    cce4:	4a11      	ldr	r2, [pc, #68]	; (cd2c <mqtt_evt_handler+0x230>)
    cce6:	69c9      	ldr	r1, [r1, #28]
    cce8:	1a9b      	subs	r3, r3, r2
    ccea:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    ccee:	b141      	cbz	r1, cd02 <mqtt_evt_handler+0x206>
			LOG_WRN("MQTT SUBACK error %d\n", evt->result);
    ccf0:	2002      	movs	r0, #2
    ccf2:	f04f 0200 	mov.w	r2, #0
    ccf6:	f360 0207 	bfi	r2, r0, #0, #8
    ccfa:	f363 128f 	bfi	r2, r3, #6, #10
    ccfe:	481b      	ldr	r0, [pc, #108]	; (cd6c <mqtt_evt_handler+0x270>)
    cd00:	e71e      	b.n	cb40 <mqtt_evt_handler+0x44>
		LOG_INF("[%s:%d] SUBACK packet id: %u\n", log_strdup(__func__), __LINE__,
    cd02:	2203      	movs	r2, #3
    cd04:	f04f 0500 	mov.w	r5, #0
    cd08:	480b      	ldr	r0, [pc, #44]	; (cd38 <mqtt_evt_handler+0x23c>)
    cd0a:	f362 0507 	bfi	r5, r2, #0, #8
    cd0e:	f363 158f 	bfi	r5, r3, #6, #10
    cd12:	f000 f9c9 	bl	d0a8 <log_strdup>
    cd16:	88a3      	ldrh	r3, [r4, #4]
    cd18:	4601      	mov	r1, r0
    cd1a:	f8ad 5000 	strh.w	r5, [sp]
    cd1e:	22d7      	movs	r2, #215	; 0xd7
    cd20:	4813      	ldr	r0, [pc, #76]	; (cd70 <mqtt_evt_handler+0x274>)
    cd22:	f00e fcff 	bl	1b724 <log_3>
}
    cd26:	e745      	b.n	cbb4 <mqtt_evt_handler+0xb8>
    cd28:	0001e034 	.word	0x0001e034
    cd2c:	0001e02c 	.word	0x0001e02c
    cd30:	0001f201 	.word	0x0001f201
    cd34:	20021eeb 	.word	0x20021eeb
    cd38:	0001f1db 	.word	0x0001f1db
    cd3c:	0001f239 	.word	0x0001f239
    cd40:	0001f219 	.word	0x0001f219
    cd44:	04d20001 	.word	0x04d20001
    cd48:	0001f250 	.word	0x0001f250
    cd4c:	20020888 	.word	0x20020888
    cd50:	0001f26b 	.word	0x0001f26b
    cd54:	20021eec 	.word	0x20021eec
    cd58:	200208ec 	.word	0x200208ec
    cd5c:	0001f290 	.word	0x0001f290
    cd60:	0001f42b 	.word	0x0001f42b
    cd64:	0001f2b7 	.word	0x0001f2b7
    cd68:	0001f2d1 	.word	0x0001f2d1
    cd6c:	0001f2e7 	.word	0x0001f2e7
    cd70:	0001f2fd 	.word	0x0001f2fd
    cd74:	20020ad8 	.word	0x20020ad8

0000cd78 <mqtt_data_publish>:
	param.message.topic.qos = qos;
    cd78:	2301      	movs	r3, #1
int mqtt_data_publish(u8_t *data, size_t len) {
    cd7a:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd7c:	4605      	mov	r5, r0
    cd7e:	b087      	sub	sp, #28
	param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
    cd80:	4813      	ldr	r0, [pc, #76]	; (cdd0 <mqtt_data_publish+0x58>)
int mqtt_data_publish(u8_t *data, size_t len) {
    cd82:	af00      	add	r7, sp, #0
    cd84:	460c      	mov	r4, r1
	param.message.topic.qos = qos;
    cd86:	723b      	strb	r3, [r7, #8]
	param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
    cd88:	6038      	str	r0, [r7, #0]
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
    cd8a:	f00e ff8c 	bl	1bca6 <strlen>
	param.message.payload.len = len;
    cd8e:	e9c7 5403 	strd	r5, r4, [r7, #12]
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
    cd92:	6078      	str	r0, [r7, #4]
	param.message_id = sys_rand32_get();
    cd94:	f002 fb72 	bl	f47c <sys_rand32_get>
	param.dup_flag = 0;
    cd98:	7dbb      	ldrb	r3, [r7, #22]
{
    cd9a:	466e      	mov	r6, sp
	param.dup_flag = 0;
    cd9c:	f023 0303 	bic.w	r3, r3, #3
    cda0:	75bb      	strb	r3, [r7, #22]
	char buf[len + 1];
    cda2:	f104 0308 	add.w	r3, r4, #8
    cda6:	f023 0307 	bic.w	r3, r3, #7
    cdaa:	ebad 0d03 	sub.w	sp, sp, r3
	param.message_id = sys_rand32_get();
    cdae:	82b8      	strh	r0, [r7, #20]
	memcpy(buf, data, len);
    cdb0:	4622      	mov	r2, r4
    cdb2:	4629      	mov	r1, r5
    cdb4:	4668      	mov	r0, sp
    cdb6:	f00e ffa8 	bl	1bd0a <memcpy>
	buf[len] = 0;
    cdba:	2300      	movs	r3, #0
	return mqtt_publish(c, &param);
    cdbc:	4639      	mov	r1, r7
	buf[len] = 0;
    cdbe:	f80d 3004 	strb.w	r3, [sp, r4]
	return mqtt_publish(c, &param);
    cdc2:	4804      	ldr	r0, [pc, #16]	; (cdd4 <mqtt_data_publish+0x5c>)
    cdc4:	46b5      	mov	sp, r6
    cdc6:	f00f fc34 	bl	1c632 <mqtt_publish>
}
    cdca:	371c      	adds	r7, #28
    cdcc:	46bd      	mov	sp, r7
    cdce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cdd0:	0001f1ec 	.word	0x0001f1ec
    cdd4:	20020888 	.word	0x20020888

0000cdd8 <mqtt_start_thread>:
void mqtt_start_thread() {
    cdd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    LOG_INF("--- starting mqtt thread ---\n");
    cdda:	2303      	movs	r3, #3
    cddc:	f04f 0100 	mov.w	r1, #0
    cde0:	4a0e      	ldr	r2, [pc, #56]	; (ce1c <mqtt_start_thread+0x44>)
    cde2:	f363 0107 	bfi	r1, r3, #0, #8
    cde6:	4b0e      	ldr	r3, [pc, #56]	; (ce20 <mqtt_start_thread+0x48>)
    cde8:	480e      	ldr	r0, [pc, #56]	; (ce24 <mqtt_start_thread+0x4c>)
    cdea:	1a9b      	subs	r3, r3, r2
    cdec:	08db      	lsrs	r3, r3, #3
    cdee:	f363 118f 	bfi	r1, r3, #6, #10
    cdf2:	f00e fc5e 	bl	1b6b2 <log_0>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    cdf6:	2300      	movs	r3, #0
    cdf8:	2208      	movs	r2, #8
    cdfa:	e9cd 3304 	strd	r3, r3, [sp, #16]
    cdfe:	e9cd 3202 	strd	r3, r2, [sp, #8]
    ce02:	e9cd 3300 	strd	r3, r3, [sp]
    ce06:	f44f 6200 	mov.w	r2, #2048	; 0x800
    ce0a:	4b07      	ldr	r3, [pc, #28]	; (ce28 <mqtt_start_thread+0x50>)
    ce0c:	4907      	ldr	r1, [pc, #28]	; (ce2c <mqtt_start_thread+0x54>)
    ce0e:	4808      	ldr	r0, [pc, #32]	; (ce30 <mqtt_start_thread+0x58>)
    ce10:	f00d fde2 	bl	1a9d8 <z_impl_k_thread_create>
}
    ce14:	b007      	add	sp, #28
    ce16:	f85d fb04 	ldr.w	pc, [sp], #4
    ce1a:	bf00      	nop
    ce1c:	0001e02c 	.word	0x0001e02c
    ce20:	0001e034 	.word	0x0001e034
    ce24:	0001f31b 	.word	0x0001f31b
    ce28:	0000c889 	.word	0x0000c889
    ce2c:	200221c0 	.word	0x200221c0
    ce30:	200208f4 	.word	0x200208f4

0000ce34 <mqtt_connected>:
}
    ce34:	4b01      	ldr	r3, [pc, #4]	; (ce3c <mqtt_connected+0x8>)
    ce36:	7818      	ldrb	r0, [r3, #0]
    ce38:	4770      	bx	lr
    ce3a:	bf00      	nop
    ce3c:	20021eeb 	.word	0x20021eeb

0000ce40 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    ce40:	680b      	ldr	r3, [r1, #0]
    ce42:	3301      	adds	r3, #1
    ce44:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    ce46:	4b01      	ldr	r3, [pc, #4]	; (ce4c <char_out+0xc>)
    ce48:	681b      	ldr	r3, [r3, #0]
    ce4a:	4718      	bx	r3
    ce4c:	20026818 	.word	0x20026818

0000ce50 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    ce50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce54:	b085      	sub	sp, #20
    ce56:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    ce58:	469b      	mov	fp, r3
    ce5a:	2c01      	cmp	r4, #1
    ce5c:	bfb8      	it	lt
    ce5e:	2401      	movlt	r4, #1
    ce60:	2b01      	cmp	r3, #1
    ce62:	bf0c      	ite	eq
    ce64:	2330      	moveq	r3, #48	; 0x30
    ce66:	2320      	movne	r3, #32
    ce68:	4616      	mov	r6, r2
    ce6a:	4682      	mov	sl, r0
    ce6c:	4688      	mov	r8, r1
    ce6e:	2501      	movs	r5, #1
    ce70:	270a      	movs	r7, #10
    ce72:	2200      	movs	r2, #0
    ce74:	f8df 906c 	ldr.w	r9, [pc, #108]	; cee4 <_printk_dec_ulong+0x94>
    ce78:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    ce7a:	fbb6 f3f9 	udiv	r3, r6, r9
    ce7e:	9301      	str	r3, [sp, #4]
    ce80:	b90a      	cbnz	r2, ce86 <_printk_dec_ulong+0x36>
    ce82:	45b1      	cmp	r9, r6
    ce84:	d81c      	bhi.n	cec0 <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    ce86:	9b01      	ldr	r3, [sp, #4]
    ce88:	4641      	mov	r1, r8
    ce8a:	f103 0030 	add.w	r0, r3, #48	; 0x30
    ce8e:	47d0      	blx	sl
			found_largest_digit = 1;
    ce90:	2201      	movs	r2, #1
			digits++;
    ce92:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    ce94:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    ce96:	3f01      	subs	r7, #1
		remainder %= pos;
    ce98:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
    ce9c:	230a      	movs	r3, #10
	while (pos >= 10) {
    ce9e:	2f01      	cmp	r7, #1
		pos /= 10;
    cea0:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    cea4:	d1e9      	bne.n	ce7a <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
    cea6:	4641      	mov	r1, r8
    cea8:	f106 0030 	add.w	r0, r6, #48	; 0x30
    ceac:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    ceae:	f1bb 0f03 	cmp.w	fp, #3
    ceb2:	d102      	bne.n	ceba <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
    ceb4:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
    ceb6:	2c00      	cmp	r4, #0
    ceb8:	dc0e      	bgt.n	ced8 <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
    ceba:	b005      	add	sp, #20
    cebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    cec0:	42bc      	cmp	r4, r7
    cec2:	dbe7      	blt.n	ce94 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    cec4:	f1bb 0f02 	cmp.w	fp, #2
    cec8:	d8e4      	bhi.n	ce94 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    ceca:	4641      	mov	r1, r8
    cecc:	9802      	ldr	r0, [sp, #8]
    cece:	9203      	str	r2, [sp, #12]
			digits++;
    ced0:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    ced2:	47d0      	blx	sl
			digits++;
    ced4:	9a03      	ldr	r2, [sp, #12]
    ced6:	e7dd      	b.n	ce94 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    ced8:	4641      	mov	r1, r8
    ceda:	2020      	movs	r0, #32
    cedc:	47d0      	blx	sl
    cede:	3c01      	subs	r4, #1
    cee0:	e7e9      	b.n	ceb6 <_printk_dec_ulong+0x66>
    cee2:	bf00      	nop
    cee4:	3b9aca00 	.word	0x3b9aca00

0000cee8 <vprintk>:
	struct out_context ctx = { 0 };
    cee8:	2300      	movs	r3, #0
{
    ceea:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
    ceec:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    ceee:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    cef0:	4803      	ldr	r0, [pc, #12]	; (cf00 <vprintk+0x18>)
    cef2:	460b      	mov	r3, r1
    cef4:	a901      	add	r1, sp, #4
    cef6:	f00e f9f4 	bl	1b2e2 <z_vprintk>
}
    cefa:	b003      	add	sp, #12
    cefc:	f85d fb04 	ldr.w	pc, [sp], #4
    cf00:	0000ce41 	.word	0x0000ce41

0000cf04 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    cf04:	f04f 0220 	mov.w	r2, #32
    cf08:	f3ef 8311 	mrs	r3, BASEPRI
    cf0c:	f382 8811 	msr	BASEPRI, r2
    cf10:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    cf14:	2101      	movs	r1, #1
    cf16:	4a04      	ldr	r2, [pc, #16]	; (cf28 <nordicsemi_nrf91_init+0x24>)
    cf18:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    cf1c:	f383 8811 	msr	BASEPRI, r3
    cf20:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    cf24:	2000      	movs	r0, #0
    cf26:	4770      	bx	lr
    cf28:	40039000 	.word	0x40039000

0000cf2c <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    cf2c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    cf2e:	2200      	movs	r2, #0
{
    cf30:	b087      	sub	sp, #28
		k_timer_init(&log_process_thread_timer,
    cf32:	490d      	ldr	r1, [pc, #52]	; (cf68 <enable_logger+0x3c>)
    cf34:	480d      	ldr	r0, [pc, #52]	; (cf6c <enable_logger+0x40>)
    cf36:	f010 fddc 	bl	1daf2 <k_timer_init>
    cf3a:	2400      	movs	r4, #0
    cf3c:	230e      	movs	r3, #14
    cf3e:	4d0c      	ldr	r5, [pc, #48]	; (cf70 <enable_logger+0x44>)
    cf40:	e9cd 4302 	strd	r4, r3, [sp, #8]
    cf44:	e9cd 4404 	strd	r4, r4, [sp, #16]
    cf48:	e9cd 4400 	strd	r4, r4, [sp]
    cf4c:	4b09      	ldr	r3, [pc, #36]	; (cf74 <enable_logger+0x48>)
    cf4e:	f44f 7240 	mov.w	r2, #768	; 0x300
    cf52:	4909      	ldr	r1, [pc, #36]	; (cf78 <enable_logger+0x4c>)
    cf54:	4628      	mov	r0, r5
    cf56:	f00d fd3f 	bl	1a9d8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    cf5a:	4908      	ldr	r1, [pc, #32]	; (cf7c <enable_logger+0x50>)
    cf5c:	4628      	mov	r0, r5
    cf5e:	f010 fcff 	bl	1d960 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    cf62:	4620      	mov	r0, r4
    cf64:	b007      	add	sp, #28
    cf66:	bd30      	pop	{r4, r5, pc}
    cf68:	0000cf81 	.word	0x0000cf81
    cf6c:	200209b8 	.word	0x200209b8
    cf70:	20020a00 	.word	0x20020a00
    cf74:	0000d325 	.word	0x0000d325
    cf78:	200229c0 	.word	0x200229c0
    cf7c:	0001f48a 	.word	0x0001f48a

0000cf80 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    cf80:	4801      	ldr	r0, [pc, #4]	; (cf88 <log_process_thread_timer_expiry_fn+0x8>)
    cf82:	f00d bc83 	b.w	1a88c <z_impl_k_sem_give>
    cf86:	bf00      	nop
    cf88:	20026960 	.word	0x20026960

0000cf8c <log_core_init>:
{
    cf8c:	b508      	push	{r3, lr}
		log_msg_pool_init();
    cf8e:	f000 fa25 	bl	d3dc <log_msg_pool_init>
		log_list_init(&list);
    cf92:	4809      	ldr	r0, [pc, #36]	; (cfb8 <log_core_init+0x2c>)
    cf94:	f00e fb4a 	bl	1b62c <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    cf98:	2304      	movs	r3, #4
    cf9a:	2234      	movs	r2, #52	; 0x34
    cf9c:	4907      	ldr	r1, [pc, #28]	; (cfbc <log_core_init+0x30>)
    cf9e:	4808      	ldr	r0, [pc, #32]	; (cfc0 <log_core_init+0x34>)
    cfa0:	f010 fab8 	bl	1d514 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    cfa4:	4b07      	ldr	r3, [pc, #28]	; (cfc4 <log_core_init+0x38>)
    cfa6:	4a08      	ldr	r2, [pc, #32]	; (cfc8 <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
    cfa8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
    cfac:	601a      	str	r2, [r3, #0]
}
    cfae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    cfb2:	f000 ba89 	b.w	d4c8 <log_output_timestamp_freq_set>
    cfb6:	bf00      	nop
    cfb8:	200209b0 	.word	0x200209b0
    cfbc:	20024e00 	.word	0x20024e00
    cfc0:	200209e4 	.word	0x200209e4
    cfc4:	2002681c 	.word	0x2002681c
    cfc8:	0001b66b 	.word	0x0001b66b

0000cfcc <dropped_notify>:
{
    cfcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    cfce:	2500      	movs	r5, #0
    cfd0:	4b0c      	ldr	r3, [pc, #48]	; (d004 <dropped_notify+0x38>)
    cfd2:	e8d3 7fef 	ldaex	r7, [r3]
    cfd6:	e8c3 5fe2 	stlex	r2, r5, [r3]
    cfda:	2a00      	cmp	r2, #0
    cfdc:	d1f9      	bne.n	cfd2 <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    cfde:	4c0a      	ldr	r4, [pc, #40]	; (d008 <dropped_notify+0x3c>)
    cfe0:	4e0a      	ldr	r6, [pc, #40]	; (d00c <dropped_notify+0x40>)
    cfe2:	1b36      	subs	r6, r6, r4
    cfe4:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    cfe6:	42b5      	cmp	r5, r6
    cfe8:	db00      	blt.n	cfec <dropped_notify+0x20>
}
    cfea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    cfec:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    cfee:	795b      	ldrb	r3, [r3, #5]
    cff0:	b12b      	cbz	r3, cffe <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
    cff2:	6823      	ldr	r3, [r4, #0]
    cff4:	68db      	ldr	r3, [r3, #12]
    cff6:	b113      	cbz	r3, cffe <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
    cff8:	4639      	mov	r1, r7
    cffa:	4620      	mov	r0, r4
    cffc:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    cffe:	3501      	adds	r5, #1
    d000:	3410      	adds	r4, #16
    d002:	e7f0      	b.n	cfe6 <dropped_notify+0x1a>
    d004:	200209a8 	.word	0x200209a8
    d008:	0001e0b4 	.word	0x0001e0b4
    d00c:	0001e0b4 	.word	0x0001e0b4

0000d010 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    d010:	4b04      	ldr	r3, [pc, #16]	; (d024 <log_dropped+0x14>)
    d012:	e8d3 2fef 	ldaex	r2, [r3]
    d016:	3201      	adds	r2, #1
    d018:	e8c3 2fe1 	stlex	r1, r2, [r3]
    d01c:	2900      	cmp	r1, #0
    d01e:	d1f8      	bne.n	d012 <log_dropped+0x2>
}
    d020:	4770      	bx	lr
    d022:	bf00      	nop
    d024:	200209a8 	.word	0x200209a8

0000d028 <log_backend_enable>:
	id += backend - log_backend_get(0);
    d028:	4b09      	ldr	r3, [pc, #36]	; (d050 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    d02a:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    d02c:	1ac3      	subs	r3, r0, r3
    d02e:	111b      	asrs	r3, r3, #4
    d030:	3301      	adds	r3, #1
{
    d032:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    d034:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
    d036:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
    d038:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    d03a:	4c06      	ldr	r4, [pc, #24]	; (d054 <log_backend_enable+0x2c>)
    d03c:	715a      	strb	r2, [r3, #5]
    d03e:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
    d040:	6019      	str	r1, [r3, #0]
    d042:	b912      	cbnz	r2, d04a <log_backend_enable+0x22>
    d044:	4804      	ldr	r0, [pc, #16]	; (d058 <log_backend_enable+0x30>)
    d046:	f00d fc21 	bl	1a88c <z_impl_k_sem_give>
	backend_attached = true;
    d04a:	2301      	movs	r3, #1
    d04c:	7023      	strb	r3, [r4, #0]
}
    d04e:	bd10      	pop	{r4, pc}
    d050:	0001e0b4 	.word	0x0001e0b4
    d054:	2002206c 	.word	0x2002206c
    d058:	20026960 	.word	0x20026960

0000d05c <log_init>:
{
    d05c:	b570      	push	{r4, r5, r6, lr}
    d05e:	4b0f      	ldr	r3, [pc, #60]	; (d09c <log_init+0x40>)
    d060:	e8d3 5fef 	ldaex	r5, [r3]
    d064:	1c6a      	adds	r2, r5, #1
    d066:	e8c3 2fe1 	stlex	r1, r2, [r3]
    d06a:	2900      	cmp	r1, #0
    d06c:	d1f8      	bne.n	d060 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    d06e:	b92d      	cbnz	r5, d07c <log_init+0x20>
	return __log_backends_end - __log_backends_start;
    d070:	4c0b      	ldr	r4, [pc, #44]	; (d0a0 <log_init+0x44>)
    d072:	4e0c      	ldr	r6, [pc, #48]	; (d0a4 <log_init+0x48>)
    d074:	1b36      	subs	r6, r6, r4
    d076:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    d078:	42b5      	cmp	r5, r6
    d07a:	db00      	blt.n	d07e <log_init+0x22>
}
    d07c:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    d07e:	7b23      	ldrb	r3, [r4, #12]
    d080:	b143      	cbz	r3, d094 <log_init+0x38>
			if (backend->api->init != NULL) {
    d082:	6823      	ldr	r3, [r4, #0]
    d084:	695b      	ldr	r3, [r3, #20]
    d086:	b103      	cbz	r3, d08a <log_init+0x2e>
				backend->api->init();
    d088:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    d08a:	2204      	movs	r2, #4
    d08c:	2100      	movs	r1, #0
    d08e:	4620      	mov	r0, r4
    d090:	f7ff ffca 	bl	d028 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    d094:	3501      	adds	r5, #1
    d096:	3410      	adds	r4, #16
    d098:	e7ee      	b.n	d078 <log_init+0x1c>
    d09a:	bf00      	nop
    d09c:	200209ac 	.word	0x200209ac
    d0a0:	0001e0b4 	.word	0x0001e0b4
    d0a4:	0001e0b4 	.word	0x0001e0b4

0000d0a8 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    d0a8:	4b14      	ldr	r3, [pc, #80]	; (d0fc <log_strdup+0x54>)
{
    d0aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
    d0ac:	4298      	cmp	r0, r3
{
    d0ae:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    d0b0:	d302      	bcc.n	d0b8 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    d0b2:	4b13      	ldr	r3, [pc, #76]	; (d100 <log_strdup+0x58>)
    d0b4:	4298      	cmp	r0, r3
    d0b6:	d31b      	bcc.n	d0f0 <log_strdup+0x48>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    d0b8:	2200      	movs	r2, #0
    d0ba:	a901      	add	r1, sp, #4
    d0bc:	4811      	ldr	r0, [pc, #68]	; (d104 <log_strdup+0x5c>)
    d0be:	f00c fe0f 	bl	19ce0 <k_mem_slab_alloc>
	if (err != 0) {
    d0c2:	4605      	mov	r5, r0
    d0c4:	b9b8      	cbnz	r0, d0f6 <log_strdup+0x4e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d0c6:	2201      	movs	r2, #1
    d0c8:	9b01      	ldr	r3, [sp, #4]
    d0ca:	e8d3 1fef 	ldaex	r1, [r3]
    d0ce:	e8c3 2fe0 	stlex	r0, r2, [r3]
    d0d2:	2800      	cmp	r0, #0
    d0d4:	d1f9      	bne.n	d0ca <log_strdup+0x22>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    d0d6:	9801      	ldr	r0, [sp, #4]
    d0d8:	4621      	mov	r1, r4
    d0da:	222d      	movs	r2, #45	; 0x2d
    d0dc:	3004      	adds	r0, #4
    d0de:	f00e fdc1 	bl	1bc64 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    d0e2:	237e      	movs	r3, #126	; 0x7e
    d0e4:	9c01      	ldr	r4, [sp, #4]
    d0e6:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    d0ea:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	return dup->buf;
    d0ee:	3404      	adds	r4, #4
}
    d0f0:	4620      	mov	r0, r4
    d0f2:	b003      	add	sp, #12
    d0f4:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    d0f6:	4c04      	ldr	r4, [pc, #16]	; (d108 <log_strdup+0x60>)
    d0f8:	e7fa      	b.n	d0f0 <log_strdup+0x48>
    d0fa:	bf00      	nop
    d0fc:	0001dd64 	.word	0x0001dd64
    d100:	00020338 	.word	0x00020338
    d104:	200209e4 	.word	0x200209e4
    d108:	0001f492 	.word	0x0001f492

0000d10c <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
    d10c:	b148      	cbz	r0, d122 <log_is_strdup+0x16>
    d10e:	4b05      	ldr	r3, [pc, #20]	; (d124 <log_is_strdup+0x18>)
    d110:	4298      	cmp	r0, r3
    d112:	d305      	bcc.n	d120 <log_is_strdup+0x14>
    d114:	33d0      	adds	r3, #208	; 0xd0
    d116:	4298      	cmp	r0, r3
    d118:	bf2c      	ite	cs
    d11a:	2000      	movcs	r0, #0
    d11c:	2001      	movcc	r0, #1
    d11e:	4770      	bx	lr
    d120:	2000      	movs	r0, #0
}
    d122:	4770      	bx	lr
    d124:	20024e00 	.word	0x20024e00

0000d128 <z_impl_log_process>:
{
    d128:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    d12c:	4b44      	ldr	r3, [pc, #272]	; (d240 <z_impl_log_process+0x118>)
{
    d12e:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    d130:	781b      	ldrb	r3, [r3, #0]
    d132:	b903      	cbnz	r3, d136 <z_impl_log_process+0xe>
    d134:	b340      	cbz	r0, d188 <z_impl_log_process+0x60>
	__asm__ volatile(
    d136:	f04f 0320 	mov.w	r3, #32
    d13a:	f3ef 8611 	mrs	r6, BASEPRI
    d13e:	f383 8811 	msr	BASEPRI, r3
    d142:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    d146:	483f      	ldr	r0, [pc, #252]	; (d244 <z_impl_log_process+0x11c>)
    d148:	f00e fa80 	bl	1b64c <log_list_head_get>
    d14c:	4604      	mov	r4, r0
	__asm__ volatile(
    d14e:	f386 8811 	msr	BASEPRI, r6
    d152:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    d156:	b158      	cbz	r0, d170 <z_impl_log_process+0x48>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    d158:	4b3b      	ldr	r3, [pc, #236]	; (d248 <z_impl_log_process+0x120>)
    d15a:	e8d3 2fef 	ldaex	r2, [r3]
    d15e:	3a01      	subs	r2, #1
    d160:	e8c3 2fe1 	stlex	r1, r2, [r3]
    d164:	2900      	cmp	r1, #0
    d166:	d1f8      	bne.n	d15a <z_impl_log_process+0x32>
	if (!bypass) {
    d168:	b18d      	cbz	r5, d18e <z_impl_log_process+0x66>
	log_msg_put(msg);
    d16a:	4620      	mov	r0, r4
    d16c:	f00e fb20 	bl	1b7b0 <log_msg_put>
	if (!bypass && dropped_cnt) {
    d170:	b925      	cbnz	r5, d17c <z_impl_log_process+0x54>
    d172:	4b36      	ldr	r3, [pc, #216]	; (d24c <z_impl_log_process+0x124>)
    d174:	681b      	ldr	r3, [r3, #0]
    d176:	b10b      	cbz	r3, d17c <z_impl_log_process+0x54>
		dropped_notify();
    d178:	f7ff ff28 	bl	cfcc <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    d17c:	4831      	ldr	r0, [pc, #196]	; (d244 <z_impl_log_process+0x11c>)
    d17e:	f00e fa63 	bl	1b648 <log_list_head_peek>
    d182:	1c05      	adds	r5, r0, #0
    d184:	bf18      	it	ne
    d186:	2501      	movne	r5, #1
}
    d188:	4628      	mov	r0, r5
    d18a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    d18e:	4b30      	ldr	r3, [pc, #192]	; (d250 <z_impl_log_process+0x128>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    d190:	781b      	ldrb	r3, [r3, #0]
    d192:	b9ab      	cbnz	r3, d1c0 <z_impl_log_process+0x98>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    d194:	7a23      	ldrb	r3, [r4, #8]
	if (!log_msg_is_std(msg)) {
    d196:	07db      	lsls	r3, r3, #31
    d198:	d412      	bmi.n	d1c0 <z_impl_log_process+0x98>
	msg_str = log_msg_str_get(msg);
    d19a:	f00e fb18 	bl	1b7ce <log_msg_str_get>
    d19e:	4681      	mov	r9, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    d1a0:	4620      	mov	r0, r4
    d1a2:	f00e fae5 	bl	1b770 <log_msg_nargs_get>
    d1a6:	4601      	mov	r1, r0
    d1a8:	4648      	mov	r0, r9
    d1aa:	f00e fa62 	bl	1b672 <z_log_get_s_mask>
    d1ae:	4607      	mov	r7, r0
    d1b0:	4b28      	ldr	r3, [pc, #160]	; (d254 <z_impl_log_process+0x12c>)
				LOG_ERR(ERR_MSG, idx, msg_str);
    d1b2:	4a29      	ldr	r2, [pc, #164]	; (d258 <z_impl_log_process+0x130>)
    d1b4:	f8df b0b8 	ldr.w	fp, [pc, #184]	; d270 <z_impl_log_process+0x148>
    d1b8:	1a9b      	subs	r3, r3, r2
    d1ba:	f3c3 0ac9 	ubfx	sl, r3, #3, #10
	while (mask) {
    d1be:	b937      	cbnz	r7, d1ce <z_impl_log_process+0xa6>
    d1c0:	4e26      	ldr	r6, [pc, #152]	; (d25c <z_impl_log_process+0x134>)
    d1c2:	4f27      	ldr	r7, [pc, #156]	; (d260 <z_impl_log_process+0x138>)
    d1c4:	f04f 0800 	mov.w	r8, #0
    d1c8:	1bbf      	subs	r7, r7, r6
    d1ca:	113f      	asrs	r7, r7, #4
    d1cc:	e034      	b.n	d238 <z_impl_log_process+0x110>
		idx = 31 - __builtin_clz(mask);
    d1ce:	fab7 f687 	clz	r6, r7
    d1d2:	f1c6 061f 	rsb	r6, r6, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    d1d6:	4631      	mov	r1, r6
    d1d8:	4620      	mov	r0, r4
    d1da:	f00e facc 	bl	1b776 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    d1de:	4b21      	ldr	r3, [pc, #132]	; (d264 <z_impl_log_process+0x13c>)
		str = (const char *)log_msg_arg_get(msg, idx);
    d1e0:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    d1e2:	4298      	cmp	r0, r3
    d1e4:	d302      	bcc.n	d1ec <z_impl_log_process+0xc4>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    d1e6:	4b20      	ldr	r3, [pc, #128]	; (d268 <z_impl_log_process+0x140>)
    d1e8:	4298      	cmp	r0, r3
    d1ea:	d314      	bcc.n	d216 <z_impl_log_process+0xee>
    d1ec:	4610      	mov	r0, r2
    d1ee:	f7ff ff8d 	bl	d10c <log_is_strdup>
    d1f2:	b980      	cbnz	r0, d216 <z_impl_log_process+0xee>
    d1f4:	4b1d      	ldr	r3, [pc, #116]	; (d26c <z_impl_log_process+0x144>)
    d1f6:	429a      	cmp	r2, r3
    d1f8:	d00d      	beq.n	d216 <z_impl_log_process+0xee>
				LOG_ERR(ERR_MSG, idx, msg_str);
    d1fa:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    d1fe:	f043 0301 	orr.w	r3, r3, #1
    d202:	f363 0807 	bfi	r8, r3, #0, #8
    d206:	f36a 188f 	bfi	r8, sl, #6, #10
    d20a:	4643      	mov	r3, r8
    d20c:	464a      	mov	r2, r9
    d20e:	4631      	mov	r1, r6
    d210:	4658      	mov	r0, fp
    d212:	f00e fa6f 	bl	1b6f4 <log_2>
		mask &= ~BIT(idx);
    d216:	2301      	movs	r3, #1
    d218:	fa03 f606 	lsl.w	r6, r3, r6
    d21c:	ea27 0706 	bic.w	r7, r7, r6
    d220:	e7cd      	b.n	d1be <z_impl_log_process+0x96>
	return backend->cb->active;
    d222:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    d224:	795b      	ldrb	r3, [r3, #5]
    d226:	b123      	cbz	r3, d232 <z_impl_log_process+0x10a>
	backend->api->put(backend, msg);
    d228:	6833      	ldr	r3, [r6, #0]
    d22a:	4621      	mov	r1, r4
    d22c:	681b      	ldr	r3, [r3, #0]
    d22e:	4630      	mov	r0, r6
    d230:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    d232:	f108 0801 	add.w	r8, r8, #1
    d236:	3610      	adds	r6, #16
    d238:	45b8      	cmp	r8, r7
    d23a:	dbf2      	blt.n	d222 <z_impl_log_process+0xfa>
    d23c:	e795      	b.n	d16a <z_impl_log_process+0x42>
    d23e:	bf00      	nop
    d240:	2002206c 	.word	0x2002206c
    d244:	200209b0 	.word	0x200209b0
    d248:	200209a4 	.word	0x200209a4
    d24c:	200209a8 	.word	0x200209a8
    d250:	2002206d 	.word	0x2002206d
    d254:	0001e06c 	.word	0x0001e06c
    d258:	0001e02c 	.word	0x0001e02c
    d25c:	0001e0b4 	.word	0x0001e0b4
    d260:	0001e0b4 	.word	0x0001e0b4
    d264:	0001dd64 	.word	0x0001dd64
    d268:	00020338 	.word	0x00020338
    d26c:	0001f492 	.word	0x0001f492
    d270:	0001f4b0 	.word	0x0001f4b0

0000d274 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    d274:	4b24      	ldr	r3, [pc, #144]	; (d308 <msg_finalize+0x94>)
{
    d276:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    d278:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    d27a:	8141      	strh	r1, [r0, #10]
{
    d27c:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    d27e:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    d280:	4c22      	ldr	r4, [pc, #136]	; (d30c <msg_finalize+0x98>)
    d282:	60e8      	str	r0, [r5, #12]
    d284:	e8d4 3fef 	ldaex	r3, [r4]
    d288:	3301      	adds	r3, #1
    d28a:	e8c4 3fe2 	stlex	r2, r3, [r4]
    d28e:	2a00      	cmp	r2, #0
    d290:	d1f8      	bne.n	d284 <msg_finalize+0x10>
	__asm__ volatile(
    d292:	f04f 0320 	mov.w	r3, #32
    d296:	f3ef 8611 	mrs	r6, BASEPRI
    d29a:	f383 8811 	msr	BASEPRI, r3
    d29e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    d2a2:	481b      	ldr	r0, [pc, #108]	; (d310 <msg_finalize+0x9c>)
    d2a4:	4629      	mov	r1, r5
    d2a6:	f00e f9c5 	bl	1b634 <log_list_add_tail>
	__asm__ volatile(
    d2aa:	f386 8811 	msr	BASEPRI, r6
    d2ae:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    d2b2:	4b18      	ldr	r3, [pc, #96]	; (d314 <msg_finalize+0xa0>)
    d2b4:	781a      	ldrb	r2, [r3, #0]
    d2b6:	b17a      	cbz	r2, d2d8 <msg_finalize+0x64>
	__asm__ volatile(
    d2b8:	f04f 0320 	mov.w	r3, #32
    d2bc:	f3ef 8411 	mrs	r4, BASEPRI
    d2c0:	f383 8811 	msr	BASEPRI, r3
    d2c4:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    d2c8:	2000      	movs	r0, #0
    d2ca:	f7ff ff2d 	bl	d128 <z_impl_log_process>
	__asm__ volatile(
    d2ce:	f384 8811 	msr	BASEPRI, r4
    d2d2:	f3bf 8f6f 	isb	sy
}
    d2d6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    d2d8:	490f      	ldr	r1, [pc, #60]	; (d318 <msg_finalize+0xa4>)
    d2da:	6823      	ldr	r3, [r4, #0]
    d2dc:	6809      	ldr	r1, [r1, #0]
    d2de:	2900      	cmp	r1, #0
    d2e0:	d0f9      	beq.n	d2d6 <msg_finalize+0x62>
    d2e2:	2b01      	cmp	r3, #1
    d2e4:	d106      	bne.n	d2f4 <msg_finalize+0x80>
}
    d2e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_timer_start(timer, duration, period);
    d2ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    d2ee:	480b      	ldr	r0, [pc, #44]	; (d31c <msg_finalize+0xa8>)
    d2f0:	f00d bd98 	b.w	1ae24 <z_impl_k_timer_start>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    d2f4:	2b0a      	cmp	r3, #10
    d2f6:	d1ee      	bne.n	d2d6 <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
    d2f8:	4808      	ldr	r0, [pc, #32]	; (d31c <msg_finalize+0xa8>)
    d2fa:	f010 fc06 	bl	1db0a <z_impl_k_timer_stop>
}
    d2fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_sem_give(sem);
    d302:	4807      	ldr	r0, [pc, #28]	; (d320 <msg_finalize+0xac>)
    d304:	f00d bac2 	b.w	1a88c <z_impl_k_sem_give>
    d308:	2002681c 	.word	0x2002681c
    d30c:	200209a4 	.word	0x200209a4
    d310:	200209b0 	.word	0x200209b0
    d314:	2002206d 	.word	0x2002206d
    d318:	20020ab0 	.word	0x20020ab0
    d31c:	200209b8 	.word	0x200209b8
    d320:	20026960 	.word	0x20026960

0000d324 <log_process_thread_func>:
{
    d324:	b508      	push	{r3, lr}
	log_init();
    d326:	f7ff fe99 	bl	d05c <log_init>
	return z_impl_k_current_get();
    d32a:	f00d faa9 	bl	1a880 <z_impl_k_current_get>
	proc_tid = process_tid;
    d32e:	4b0b      	ldr	r3, [pc, #44]	; (d35c <log_process_thread_func+0x38>)
    d330:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    d332:	b130      	cbz	r0, d342 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    d334:	4b0a      	ldr	r3, [pc, #40]	; (d360 <log_process_thread_func+0x3c>)
	    process_tid &&
    d336:	681b      	ldr	r3, [r3, #0]
    d338:	2b09      	cmp	r3, #9
    d33a:	dd02      	ble.n	d342 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    d33c:	4809      	ldr	r0, [pc, #36]	; (d364 <log_process_thread_func+0x40>)
    d33e:	f00d faa5 	bl	1a88c <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    d342:	4c08      	ldr	r4, [pc, #32]	; (d364 <log_process_thread_func+0x40>)
    d344:	2000      	movs	r0, #0
    d346:	f7ff feef 	bl	d128 <z_impl_log_process>
		if (log_process(false) == false) {
    d34a:	2800      	cmp	r0, #0
    d34c:	d1fa      	bne.n	d344 <log_process_thread_func+0x20>
    d34e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d352:	4620      	mov	r0, r4
    d354:	f00d fac6 	bl	1a8e4 <z_impl_k_sem_take>
    d358:	e7f4      	b.n	d344 <log_process_thread_func+0x20>
    d35a:	bf00      	nop
    d35c:	20020ab0 	.word	0x20020ab0
    d360:	200209a4 	.word	0x200209a4
    d364:	20026960 	.word	0x20026960

0000d368 <z_impl_log_panic>:
{
    d368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    d36a:	4f0e      	ldr	r7, [pc, #56]	; (d3a4 <z_impl_log_panic+0x3c>)
    d36c:	783d      	ldrb	r5, [r7, #0]
    d36e:	b975      	cbnz	r5, d38e <z_impl_log_panic+0x26>
	log_init();
    d370:	f7ff fe74 	bl	d05c <log_init>
	return __log_backends_end - __log_backends_start;
    d374:	4c0c      	ldr	r4, [pc, #48]	; (d3a8 <z_impl_log_panic+0x40>)
    d376:	4e0d      	ldr	r6, [pc, #52]	; (d3ac <z_impl_log_panic+0x44>)
    d378:	1b36      	subs	r6, r6, r4
    d37a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    d37c:	42b5      	cmp	r5, r6
    d37e:	db07      	blt.n	d390 <z_impl_log_panic+0x28>
    d380:	2000      	movs	r0, #0
    d382:	f7ff fed1 	bl	d128 <z_impl_log_process>
		while (log_process(false) == true) {
    d386:	2800      	cmp	r0, #0
    d388:	d1fa      	bne.n	d380 <z_impl_log_panic+0x18>
	panic_mode = true;
    d38a:	2301      	movs	r3, #1
    d38c:	703b      	strb	r3, [r7, #0]
}
    d38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    d390:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    d392:	795b      	ldrb	r3, [r3, #5]
    d394:	b11b      	cbz	r3, d39e <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    d396:	6823      	ldr	r3, [r4, #0]
    d398:	4620      	mov	r0, r4
    d39a:	691b      	ldr	r3, [r3, #16]
    d39c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    d39e:	3501      	adds	r5, #1
    d3a0:	3410      	adds	r4, #16
    d3a2:	e7eb      	b.n	d37c <z_impl_log_panic+0x14>
    d3a4:	2002206d 	.word	0x2002206d
    d3a8:	0001e0b4 	.word	0x0001e0b4
    d3ac:	0001e0b4 	.word	0x0001e0b4

0000d3b0 <log_free>:
{
    d3b0:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    d3b2:	3804      	subs	r0, #4
    d3b4:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    d3b6:	e8d0 3fef 	ldaex	r3, [r0]
    d3ba:	1e5a      	subs	r2, r3, #1
    d3bc:	e8c0 2fe1 	stlex	r1, r2, [r0]
    d3c0:	2900      	cmp	r1, #0
    d3c2:	d1f8      	bne.n	d3b6 <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
    d3c4:	2b01      	cmp	r3, #1
    d3c6:	d103      	bne.n	d3d0 <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    d3c8:	a901      	add	r1, sp, #4
    d3ca:	4803      	ldr	r0, [pc, #12]	; (d3d8 <log_free+0x28>)
    d3cc:	f00c fcb4 	bl	19d38 <k_mem_slab_free>
}
    d3d0:	b003      	add	sp, #12
    d3d2:	f85d fb04 	ldr.w	pc, [sp], #4
    d3d6:	bf00      	nop
    d3d8:	200209e4 	.word	0x200209e4

0000d3dc <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    d3dc:	2320      	movs	r3, #32
    d3de:	4902      	ldr	r1, [pc, #8]	; (d3e8 <log_msg_pool_init+0xc>)
    d3e0:	461a      	mov	r2, r3
    d3e2:	4802      	ldr	r0, [pc, #8]	; (d3ec <log_msg_pool_init+0x10>)
    d3e4:	f010 b896 	b.w	1d514 <k_mem_slab_init>
    d3e8:	20024ed0 	.word	0x20024ed0
    d3ec:	20020ab4 	.word	0x20020ab4

0000d3f0 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
    d3f0:	2300      	movs	r3, #0
{
    d3f2:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    d3f4:	4d09      	ldr	r5, [pc, #36]	; (d41c <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    d3f6:	9301      	str	r3, [sp, #4]
    d3f8:	2001      	movs	r0, #1
    d3fa:	f7ff fe95 	bl	d128 <z_impl_log_process>
    d3fe:	4604      	mov	r4, r0
			log_dropped();
    d400:	f7ff fe06 	bl	d010 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    d404:	2200      	movs	r2, #0
    d406:	a901      	add	r1, sp, #4
    d408:	4628      	mov	r0, r5
    d40a:	f00c fc69 	bl	19ce0 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    d40e:	b108      	cbz	r0, d414 <log_msg_no_space_handle+0x24>
    d410:	2c00      	cmp	r4, #0
    d412:	d1f1      	bne.n	d3f8 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    d414:	9801      	ldr	r0, [sp, #4]
    d416:	b003      	add	sp, #12
    d418:	bd30      	pop	{r4, r5, pc}
    d41a:	bf00      	nop
    d41c:	20020ab4 	.word	0x20020ab4

0000d420 <log_msg_chunk_alloc>:
{
    d420:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    d422:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    d424:	a901      	add	r1, sp, #4
    d426:	4806      	ldr	r0, [pc, #24]	; (d440 <log_msg_chunk_alloc+0x20>)
	union log_msg_chunk *msg = NULL;
    d428:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    d42a:	f00c fc59 	bl	19ce0 <k_mem_slab_alloc>
	if (err != 0) {
    d42e:	b110      	cbz	r0, d436 <log_msg_chunk_alloc+0x16>
		msg = log_msg_no_space_handle();
    d430:	f7ff ffde 	bl	d3f0 <log_msg_no_space_handle>
    d434:	9001      	str	r0, [sp, #4]
}
    d436:	9801      	ldr	r0, [sp, #4]
    d438:	b003      	add	sp, #12
    d43a:	f85d fb04 	ldr.w	pc, [sp], #4
    d43e:	bf00      	nop
    d440:	20020ab4 	.word	0x20020ab4

0000d444 <msg_free>:
{
    d444:	b5f0      	push	{r4, r5, r6, r7, lr}
    d446:	7a04      	ldrb	r4, [r0, #8]
	}
}

u32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    d448:	7a46      	ldrb	r6, [r0, #9]
{
    d44a:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
    d44c:	f014 0401 	ands.w	r4, r4, #1
{
    d450:	9001      	str	r0, [sp, #4]
	return msg->hdr.params.std.nargs;
    d452:	ea4f 1616 	mov.w	r6, r6, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    d456:	d00e      	beq.n	d476 <msg_free+0x32>
	if (msg->hdr.params.generic.ext == 1) {
    d458:	9b01      	ldr	r3, [sp, #4]
    d45a:	7a1a      	ldrb	r2, [r3, #8]
    d45c:	0792      	lsls	r2, r2, #30
    d45e:	d504      	bpl.n	d46a <msg_free+0x26>
		cont_free(msg->payload.ext.next);
    d460:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    d462:	4c18      	ldr	r4, [pc, #96]	; (d4c4 <msg_free+0x80>)
    d464:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    d466:	9b03      	ldr	r3, [sp, #12]
    d468:	bb2b      	cbnz	r3, d4b6 <msg_free+0x72>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    d46a:	a901      	add	r1, sp, #4
    d46c:	4815      	ldr	r0, [pc, #84]	; (d4c4 <msg_free+0x80>)
    d46e:	f00c fc63 	bl	19d38 <k_mem_slab_free>
}
    d472:	b005      	add	sp, #20
    d474:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (log_msg_is_std(msg) && nargs) {
    d476:	2e00      	cmp	r6, #0
    d478:	d0ee      	beq.n	d458 <msg_free+0x14>
		for (i = 0; i < nargs; i++) {
    d47a:	4625      	mov	r5, r4
    d47c:	e017      	b.n	d4ae <msg_free+0x6a>
			void *buf = (void *)log_msg_arg_get(msg, i);
    d47e:	4629      	mov	r1, r5
    d480:	f00e f979 	bl	1b776 <log_msg_arg_get>
    d484:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    d486:	f7ff fe41 	bl	d10c <log_is_strdup>
    d48a:	b178      	cbz	r0, d4ac <msg_free+0x68>
				if (smask == 0) {
    d48c:	b93c      	cbnz	r4, d49e <msg_free+0x5a>
					smask = z_log_get_s_mask(
    d48e:	9b01      	ldr	r3, [sp, #4]
    d490:	4631      	mov	r1, r6
    d492:	6918      	ldr	r0, [r3, #16]
    d494:	f00e f8ed 	bl	1b672 <z_log_get_s_mask>
					if (smask == 0) {
    d498:	4604      	mov	r4, r0
    d49a:	2800      	cmp	r0, #0
    d49c:	d0dc      	beq.n	d458 <msg_free+0x14>
				if (smask & BIT(i)) {
    d49e:	fa24 f305 	lsr.w	r3, r4, r5
    d4a2:	07db      	lsls	r3, r3, #31
    d4a4:	d502      	bpl.n	d4ac <msg_free+0x68>
					log_free(buf);
    d4a6:	4638      	mov	r0, r7
    d4a8:	f7ff ff82 	bl	d3b0 <log_free>
		for (i = 0; i < nargs; i++) {
    d4ac:	3501      	adds	r5, #1
    d4ae:	42ae      	cmp	r6, r5
    d4b0:	9801      	ldr	r0, [sp, #4]
    d4b2:	d8e4      	bhi.n	d47e <msg_free+0x3a>
    d4b4:	e7d0      	b.n	d458 <msg_free+0x14>
		next = cont->next;
    d4b6:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    d4b8:	a903      	add	r1, sp, #12
    d4ba:	4620      	mov	r0, r4
    d4bc:	f00c fc3c 	bl	19d38 <k_mem_slab_free>
		cont = next;
    d4c0:	9503      	str	r5, [sp, #12]
    d4c2:	e7d0      	b.n	d466 <msg_free+0x22>
    d4c4:	20020ab4 	.word	0x20020ab4

0000d4c8 <log_output_timestamp_freq_set>:
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
}

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    d4c8:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    d4ca:	2100      	movs	r1, #0
	timestamp_div = 1U;
    d4cc:	4a07      	ldr	r2, [pc, #28]	; (d4ec <log_output_timestamp_freq_set+0x24>)
{
    d4ce:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    d4d0:	4c07      	ldr	r4, [pc, #28]	; (d4f0 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    d4d2:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    d4d4:	42a0      	cmp	r0, r4
    d4d6:	d804      	bhi.n	d4e2 <log_output_timestamp_freq_set+0x1a>
    d4d8:	b101      	cbz	r1, d4dc <log_output_timestamp_freq_set+0x14>
    d4da:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    d4dc:	4b05      	ldr	r3, [pc, #20]	; (d4f4 <log_output_timestamp_freq_set+0x2c>)
    d4de:	6018      	str	r0, [r3, #0]
}
    d4e0:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    d4e2:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    d4e4:	005b      	lsls	r3, r3, #1
    d4e6:	2101      	movs	r1, #1
    d4e8:	e7f4      	b.n	d4d4 <log_output_timestamp_freq_set+0xc>
    d4ea:	bf00      	nop
    d4ec:	20020ad4 	.word	0x20020ad4
    d4f0:	000f4240 	.word	0x000f4240
    d4f4:	20020ad0 	.word	0x20020ad0

0000d4f8 <socket_offload_register>:
void socket_offload_register(const struct socket_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(socket_ops == NULL);

	socket_ops = ops;
    d4f8:	4b01      	ldr	r3, [pc, #4]	; (d500 <socket_offload_register+0x8>)
    d4fa:	6018      	str	r0, [r3, #0]
}
    d4fc:	4770      	bx	lr
    d4fe:	bf00      	nop
    d500:	20020ad8 	.word	0x20020ad8

0000d504 <clock_async_start>:

static const struct nrf_clock_control_sub_config *get_sub_config(
					struct device *dev,
					enum clock_control_nrf_type type)
{
	const struct nrf_clock_control_config *config =
    d504:	6803      	ldr	r3, [r0, #0]
}

static int clock_async_start(struct device *dev,
			     clock_control_subsys_t subsys,
			     struct clock_control_async_data *data)
{
    d506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int key;
	u8_t ref;

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
	config = get_sub_config(dev, type);
	clk_data = get_sub_data(dev, type);
    d50a:	f8d0 c008 	ldr.w	ip, [r0, #8]
{
    d50e:	4605      	mov	r5, r0
	const struct nrf_clock_control_config *config =
    d510:	689f      	ldr	r7, [r3, #8]
	return &config->subsys[type];
    d512:	b2ce      	uxtb	r6, r1
			((data != NULL) && (data->cb != NULL)));

	/* if node is in the list it means that it is scheduled for
	 * the second time.
	 */
	if ((data != NULL)
    d514:	b14a      	cbz	r2, d52a <clock_async_start+0x26>
	sys_snode_t *item = sys_slist_peek_head(list);
    d516:	230c      	movs	r3, #12
    d518:	4373      	muls	r3, r6
    d51a:	f85c 3003 	ldr.w	r3, [ip, r3]
		if (item == node) {
    d51e:	429a      	cmp	r2, r3
    d520:	d05b      	beq.n	d5da <clock_async_start+0xd6>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    d522:	b113      	cbz	r3, d52a <clock_async_start+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d524:	681b      	ldr	r3, [r3, #0]
	} while (item);
    d526:	2b00      	cmp	r3, #0
    d528:	d1f9      	bne.n	d51e <clock_async_start+0x1a>
	__asm__ volatile(
    d52a:	f04f 0320 	mov.w	r3, #32
    d52e:	f3ef 8011 	mrs	r0, BASEPRI
    d532:	f383 8811 	msr	BASEPRI, r3
    d536:	f3bf 8f6f 	isb	sy
	    && is_in_list(&clk_data->list, &data->node)) {
		return -EBUSY;
	}

	key = irq_lock();
	ref = ++clk_data->ref;
    d53a:	210c      	movs	r1, #12
    d53c:	4371      	muls	r1, r6
    d53e:	eb0c 0301 	add.w	r3, ip, r1
    d542:	7a1c      	ldrb	r4, [r3, #8]
    d544:	3401      	adds	r4, #1
    d546:	b2e4      	uxtb	r4, r4
    d548:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
    d54a:	f380 8811 	msr	BASEPRI, r0
    d54e:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(clk_data->ref > 0);
	irq_unlock(key);

	if (data) {
    d552:	b322      	cbz	r2, d59e <clock_async_start+0x9a>
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    d554:	f04f 0e03 	mov.w	lr, #3
    d558:	4822      	ldr	r0, [pc, #136]	; (d5e4 <clock_async_start+0xe0>)
    d55a:	f8c0 e308 	str.w	lr, [r0, #776]	; 0x308
		bool already_started;

		clock_irqs_disable();
		already_started = clk_data->started;
    d55e:	7a58      	ldrb	r0, [r3, #9]
		if (!already_started) {
    d560:	b9a0      	cbnz	r0, d58c <clock_async_start+0x88>
	__asm__ volatile(
    d562:	f04f 0e20 	mov.w	lr, #32
    d566:	f3ef 8811 	mrs	r8, BASEPRI
    d56a:	f38e 8811 	msr	BASEPRI, lr
    d56e:	f3bf 8f6f 	isb	sy
	parent->next = child;
    d572:	6010      	str	r0, [r2, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    d574:	f8d3 e004 	ldr.w	lr, [r3, #4]
    d578:	f1be 0f00 	cmp.w	lr, #0
    d57c:	d120      	bne.n	d5c0 <clock_async_start+0xbc>
	list->tail = node;
    d57e:	605a      	str	r2, [r3, #4]
	list->head = node;
    d580:	f84c 2001 	str.w	r2, [ip, r1]
	__asm__ volatile(
    d584:	f388 8811 	msr	BASEPRI, r8
    d588:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    d58c:	2103      	movs	r1, #3
    d58e:	4b15      	ldr	r3, [pc, #84]	; (d5e4 <clock_async_start+0xe0>)
    d590:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
			list_append(&clk_data->list, &data->node);
		}
		clock_irqs_enable();

		if (already_started) {
    d594:	b118      	cbz	r0, d59e <clock_async_start+0x9a>
			data->cb(dev, data->user_data);
    d596:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
    d59a:	4628      	mov	r0, r5
    d59c:	4798      	blx	r3
		}
	}

	if (ref == 1) {
    d59e:	2c01      	cmp	r4, #1
    d5a0:	d10c      	bne.n	d5bc <clock_async_start+0xb8>
		bool do_start;

		do_start =  (config->start_handler) ?
    d5a2:	ea4f 1806 	mov.w	r8, r6, lsl #4
    d5a6:	f857 3008 	ldr.w	r3, [r7, r8]
				config->start_handler(dev) : true;
    d5aa:	b96b      	cbnz	r3, d5c8 <clock_async_start+0xc4>
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_clock_task_trigger(NRF_CLOCK_Type * p_reg, nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d5ac:	2201      	movs	r2, #1
			if (IS_ENABLED(CONFIG_NRF52_ANOMALY_132_WORKAROUND) &&
			    (subsys == CLOCK_CONTROL_NRF_SUBSYS_LF)) {
				anomaly_132_workaround();
			}

			nrf_clock_task_trigger(NRF_CLOCK,
    d5ae:	4447      	add	r7, r8
    d5b0:	7abb      	ldrb	r3, [r7, #10]
    d5b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d5b6:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
    d5ba:	601a      	str	r2, [r3, #0]
			 */
			clkstarted_handle(dev, type);
		}
	}

	return 0;
    d5bc:	2000      	movs	r0, #0
    d5be:	e00e      	b.n	d5de <clock_async_start+0xda>
	parent->next = child;
    d5c0:	f8ce 2000 	str.w	r2, [lr]
	list->tail = node;
    d5c4:	605a      	str	r2, [r3, #4]
    d5c6:	e7dd      	b.n	d584 <clock_async_start+0x80>
				config->start_handler(dev) : true;
    d5c8:	4628      	mov	r0, r5
    d5ca:	4798      	blx	r3
    d5cc:	2800      	cmp	r0, #0
    d5ce:	d1ed      	bne.n	d5ac <clock_async_start+0xa8>
			clkstarted_handle(dev, type);
    d5d0:	4631      	mov	r1, r6
    d5d2:	4628      	mov	r0, r5
    d5d4:	f00e f9a1 	bl	1b91a <clkstarted_handle>
    d5d8:	e7f0      	b.n	d5bc <clock_async_start+0xb8>
		return -EBUSY;
    d5da:	f06f 000f 	mvn.w	r0, #15
}
    d5de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d5e2:	bf00      	nop
    d5e4:	40005000 	.word	0x40005000

0000d5e8 <clk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int clk_init(struct device *dev)
{
    d5e8:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    d5ea:	2200      	movs	r2, #0
{
    d5ec:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    d5ee:	2101      	movs	r1, #1
    d5f0:	2005      	movs	r0, #5
    d5f2:	f000 f9bf 	bl	d974 <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    d5f6:	2005      	movs	r0, #5
    d5f8:	f000 f9ac 	bl	d954 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    d5fc:	2202      	movs	r2, #2
    d5fe:	4b07      	ldr	r3, [pc, #28]	; (d61c <clk_init+0x34>)
	list->head = NULL;
    d600:	2000      	movs	r0, #0
    d602:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    d606:	2203      	movs	r2, #3
    d608:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	clock_irqs_enable();

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		sys_slist_init(&(get_sub_data(dev, i)->list));
    d60c:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
    d60e:	e9c3 0000 	strd	r0, r0, [r3]
    d612:	68a3      	ldr	r3, [r4, #8]
    d614:	e9c3 0003 	strd	r0, r0, [r3, #12]
	}

	return 0;
}
    d618:	bd10      	pop	{r4, pc}
    d61a:	bf00      	nop
    d61c:	40005000 	.word	0x40005000

0000d620 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    d620:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    d622:	4b10      	ldr	r3, [pc, #64]	; (d664 <nrf_power_clock_isr+0x44>)
    d624:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    d626:	b162      	cbz	r2, d642 <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
    d628:	4a0f      	ldr	r2, [pc, #60]	; (d668 <nrf_power_clock_isr+0x48>)
    d62a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    d62e:	07d1      	lsls	r1, r2, #31
    d630:	d507      	bpl.n	d642 <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d632:	2200      	movs	r2, #0
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    d634:	480d      	ldr	r0, [pc, #52]	; (d66c <nrf_power_clock_isr+0x4c>)
    d636:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    d638:	6883      	ldr	r3, [r0, #8]
    d63a:	7a59      	ldrb	r1, [r3, #9]
    d63c:	b909      	cbnz	r1, d642 <nrf_power_clock_isr+0x22>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    d63e:	f00e f96c 	bl	1b91a <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    d642:	4b0b      	ldr	r3, [pc, #44]	; (d670 <nrf_power_clock_isr+0x50>)
    d644:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    d646:	b162      	cbz	r2, d662 <nrf_power_clock_isr+0x42>
    return p_reg->INTENSET & mask;
    d648:	4a07      	ldr	r2, [pc, #28]	; (d668 <nrf_power_clock_isr+0x48>)
    d64a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    d64e:	0792      	lsls	r2, r2, #30
    d650:	d507      	bpl.n	d662 <nrf_power_clock_isr+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d652:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(dev);
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    d654:	2101      	movs	r1, #1
    d656:	601a      	str	r2, [r3, #0]
    d658:	4804      	ldr	r0, [pc, #16]	; (d66c <nrf_power_clock_isr+0x4c>)
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    d65a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    d65e:	f00e b95c 	b.w	1b91a <clkstarted_handle>
}
    d662:	bd08      	pop	{r3, pc}
    d664:	40005100 	.word	0x40005100
    d668:	40005000 	.word	0x40005000
    d66c:	2002686c 	.word	0x2002686c
    d670:	40005104 	.word	0x40005104

0000d674 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    d674:	2200      	movs	r2, #0
    d676:	4b0d      	ldr	r3, [pc, #52]	; (d6ac <rtc1_nrf_isr+0x38>)
    d678:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    d67c:	f04f 0220 	mov.w	r2, #32
    d680:	f3ef 8111 	mrs	r1, BASEPRI
    d684:	f382 8811 	msr	BASEPRI, r2
    d688:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    d68c:	4a08      	ldr	r2, [pc, #32]	; (d6b0 <rtc1_nrf_isr+0x3c>)
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    d68e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    d692:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    d694:	1ac0      	subs	r0, r0, r3
    d696:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    d69a:	4403      	add	r3, r0
    d69c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    d69e:	f381 8811 	msr	BASEPRI, r1
    d6a2:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    d6a6:	f00d bb25 	b.w	1acf4 <z_clock_announce>
    d6aa:	bf00      	nop
    d6ac:	40015000 	.word	0x40015000
    d6b0:	20020af4 	.word	0x20020af4

0000d6b4 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    d6b4:	b570      	push	{r4, r5, r6, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    d6b6:	4815      	ldr	r0, [pc, #84]	; (d70c <z_clock_driver_init+0x58>)
    d6b8:	f00c f982 	bl	199c0 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL);
	if (!clock) {
    d6bc:	b310      	cbz	r0, d704 <z_clock_driver_init+0x50>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    d6be:	6843      	ldr	r3, [r0, #4]
    d6c0:	2101      	movs	r1, #1
    d6c2:	681b      	ldr	r3, [r3, #0]
    d6c4:	4798      	blx	r3
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    d6c6:	2400      	movs	r4, #0
    p_reg->CC[ch] = cc_val;
    d6c8:	2601      	movs	r6, #1
    p_reg->INTENSET = mask;
    d6ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d6ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    d6d2:	4d0f      	ldr	r5, [pc, #60]	; (d710 <z_clock_driver_init+0x5c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    d6d4:	4631      	mov	r1, r6
    d6d6:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    d6da:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    d6de:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d6e2:	4b0c      	ldr	r3, [pc, #48]	; (d714 <z_clock_driver_init+0x60>)
    d6e4:	2015      	movs	r0, #21
    d6e6:	601c      	str	r4, [r3, #0]
    d6e8:	4b0b      	ldr	r3, [pc, #44]	; (d718 <z_clock_driver_init+0x64>)
    d6ea:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    d6ee:	4622      	mov	r2, r4
    d6f0:	f000 f940 	bl	d974 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    d6f4:	2015      	movs	r0, #21
    d6f6:	f000 f92d 	bl	d954 <arch_irq_enable>

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    d6fa:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    d6fc:	4b07      	ldr	r3, [pc, #28]	; (d71c <z_clock_driver_init+0x68>)
    d6fe:	601e      	str	r6, [r3, #0]
    d700:	602e      	str	r6, [r5, #0]
}
    d702:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    d704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d708:	e7fb      	b.n	d702 <z_clock_driver_init+0x4e>
    d70a:	bf00      	nop
    d70c:	0001f4ec 	.word	0x0001f4ec
    d710:	40015000 	.word	0x40015000
    d714:	40015140 	.word	0x40015140
    d718:	e000e100 	.word	0xe000e100
    d71c:	40015008 	.word	0x40015008

0000d720 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    d720:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    d722:	4c25      	ldr	r4, [pc, #148]	; (d7b8 <z_clock_set_timeout+0x98>)
    d724:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    d728:	bf08      	it	eq
    d72a:	4620      	moveq	r0, r4
	__asm__ volatile(
    d72c:	f04f 0320 	mov.w	r3, #32
    d730:	f3ef 8511 	mrs	r5, BASEPRI
    d734:	f383 8811 	msr	BASEPRI, r3
    d738:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    d73c:	4b1f      	ldr	r3, [pc, #124]	; (d7bc <z_clock_set_timeout+0x9c>)
    d73e:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
    d742:	4b1f      	ldr	r3, [pc, #124]	; (d7c0 <z_clock_set_timeout+0xa0>)
    d744:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
    d746:	1aca      	subs	r2, r1, r3
    d748:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    d74c:	0212      	lsls	r2, r2, #8
    d74e:	d41a      	bmi.n	d786 <z_clock_set_timeout+0x66>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    d750:	1e42      	subs	r2, r0, #1
    d752:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    d756:	42a2      	cmp	r2, r4
    d758:	bfa8      	it	ge
    d75a:	4622      	movge	r2, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    d75c:	1c70      	adds	r0, r6, #1
    d75e:	4410      	add	r0, r2
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    d760:	42a0      	cmp	r0, r4
    d762:	bf94      	ite	ls
    d764:	1818      	addls	r0, r3, r0
    d766:	1918      	addhi	r0, r3, r4
	return (a - b) & COUNTER_MAX;
    d768:	1a41      	subs	r1, r0, r1
    d76a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    d76e:	4a13      	ldr	r2, [pc, #76]	; (d7bc <z_clock_set_timeout+0x9c>)
    d770:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    d774:	2902      	cmp	r1, #2
    p_reg->CC[ch] = cc_val;
    d776:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    d77a:	d906      	bls.n	d78a <z_clock_set_timeout+0x6a>
	__asm__ volatile(
    d77c:	f385 8811 	msr	BASEPRI, r5
    d780:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    d784:	bd70      	pop	{r4, r5, r6, pc}
		ticks = 0;
    d786:	2200      	movs	r2, #0
    d788:	e7e8      	b.n	d75c <z_clock_set_timeout+0x3c>
     return p_reg->COUNTER;
    d78a:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    d78e:	490d      	ldr	r1, [pc, #52]	; (d7c4 <z_clock_set_timeout+0xa4>)
	return (a - b) & COUNTER_MAX;
    d790:	1ac3      	subs	r3, r0, r3
    d792:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    d796:	1e5c      	subs	r4, r3, #1
    d798:	428c      	cmp	r4, r1
    d79a:	d905      	bls.n	d7a8 <z_clock_set_timeout+0x88>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d79c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    d7a0:	4b09      	ldr	r3, [pc, #36]	; (d7c8 <z_clock_set_timeout+0xa8>)
    d7a2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    d7a6:	e7e9      	b.n	d77c <z_clock_set_timeout+0x5c>
		} else if (dt == 1) {
    d7a8:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
    d7aa:	bf02      	ittt	eq
    d7ac:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    d7ae:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    d7b2:	f8c2 0540 	streq.w	r0, [r2, #1344]	; 0x540
    d7b6:	e7e1      	b.n	d77c <z_clock_set_timeout+0x5c>
    d7b8:	00fffffe 	.word	0x00fffffe
    d7bc:	40015000 	.word	0x40015000
    d7c0:	20020af4 	.word	0x20020af4
    d7c4:	007ffffe 	.word	0x007ffffe
    d7c8:	e000e100 	.word	0xe000e100

0000d7cc <z_clock_elapsed>:
	__asm__ volatile(
    d7cc:	f04f 0220 	mov.w	r2, #32
    d7d0:	f3ef 8311 	mrs	r3, BASEPRI
    d7d4:	f382 8811 	msr	BASEPRI, r2
    d7d8:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    d7dc:	4a06      	ldr	r2, [pc, #24]	; (d7f8 <z_clock_elapsed+0x2c>)
    d7de:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    d7e2:	4a06      	ldr	r2, [pc, #24]	; (d7fc <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    d7e4:	6812      	ldr	r2, [r2, #0]
    d7e6:	1a80      	subs	r0, r0, r2
    d7e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    d7ec:	f383 8811 	msr	BASEPRI, r3
    d7f0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    d7f4:	4770      	bx	lr
    d7f6:	bf00      	nop
    d7f8:	40015000 	.word	0x40015000
    d7fc:	20020af4 	.word	0x20020af4

0000d800 <z_timer_cycle_get_32>:
	__asm__ volatile(
    d800:	f04f 0320 	mov.w	r3, #32
    d804:	f3ef 8211 	mrs	r2, BASEPRI
    d808:	f383 8811 	msr	BASEPRI, r3
    d80c:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    d810:	4906      	ldr	r1, [pc, #24]	; (d82c <z_timer_cycle_get_32+0x2c>)
    d812:	4b07      	ldr	r3, [pc, #28]	; (d830 <z_timer_cycle_get_32+0x30>)
    d814:	6808      	ldr	r0, [r1, #0]
    d816:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    d81a:	f382 8811 	msr	BASEPRI, r2
    d81e:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    d822:	1a1b      	subs	r3, r3, r0
    d824:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    d828:	4418      	add	r0, r3
    d82a:	4770      	bx	lr
    d82c:	20020af4 	.word	0x20020af4
    d830:	40015000 	.word	0x40015000

0000d834 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    d834:	4804      	ldr	r0, [pc, #16]	; (d848 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    d836:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    d838:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    d83a:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    d83c:	d003      	beq.n	d846 <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    d83e:	4903      	ldr	r1, [pc, #12]	; (d84c <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    d840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    d844:	600a      	str	r2, [r1, #0]

0000d846 <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    d846:	4770      	bx	lr
    ldr r0, =_kernel
    d848:	20021d60 	.word	0x20021d60
    ldr r1, =_SCS_ICSR
    d84c:	e000ed04 	.word	0xe000ed04

0000d850 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    d850:	4a09      	ldr	r2, [pc, #36]	; (d878 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    d852:	490a      	ldr	r1, [pc, #40]	; (d87c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    d854:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    d856:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    d858:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    d85a:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    d85c:	4908      	ldr	r1, [pc, #32]	; (d880 <arch_swap+0x30>)
    d85e:	684b      	ldr	r3, [r1, #4]
    d860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    d864:	604b      	str	r3, [r1, #4]
    d866:	2300      	movs	r3, #0
    d868:	f383 8811 	msr	BASEPRI, r3
    d86c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    d870:	6893      	ldr	r3, [r2, #8]
}
    d872:	6e98      	ldr	r0, [r3, #104]	; 0x68
    d874:	4770      	bx	lr
    d876:	bf00      	nop
    d878:	20021d60 	.word	0x20021d60
    d87c:	0001e6b8 	.word	0x0001e6b8
    d880:	e000ed00 	.word	0xe000ed00

0000d884 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    d884:	4929      	ldr	r1, [pc, #164]	; (d92c <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    d886:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    d888:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    d88c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    d88e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    d892:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
    d896:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    d89a:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
    d89e:	d004      	beq.n	d8aa <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
    d8a0:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
    d8a4:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
    d8a8:	e007      	b.n	d8ba <out_fp_endif>

0000d8aa <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
    d8aa:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
    d8ae:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
    d8b2:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
    d8b6:	f050 0004 	orrs.w	r0, r0, #4

0000d8ba <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
    d8ba:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    d8be:	2020      	movs	r0, #32
    msr BASEPRI, r0
    d8c0:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    d8c4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    d8c8:	4f19      	ldr	r7, [pc, #100]	; (d930 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    d8ca:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    d8ce:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    d8d0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    d8d2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    d8d4:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    d8d6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    d8d8:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    d8da:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
    d8de:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
    d8e2:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
    d8e6:	d105      	bne.n	d8f4 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    d8e8:	2300      	movs	r3, #0
    vmsr fpscr, r3
    d8ea:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    d8ee:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
    d8f2:	e005      	b.n	d900 <in_fp_endif>

0000d8f4 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
    d8f4:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
    d8f8:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
    d8fc:	ec90 8a10 	vldmia	r0, {s16-s31}

0000d900 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    d900:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
    d904:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    d908:	f383 8814 	msr	CONTROL, r3
    isb
    d90c:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    d910:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    d912:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    d914:	f00e f836 	bl	1b984 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    d918:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    d91c:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    d920:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    d924:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    d928:	4770      	bx	lr
    d92a:	0000      	.short	0x0000
    ldr r1, =_kernel
    d92c:	20021d60 	.word	0x20021d60
    ldr v4, =_SCS_ICSR
    d930:	e000ed04 	.word	0xe000ed04

0000d934 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    d934:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    d938:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    d93a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    d93e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    d942:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    d944:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    d948:	2902      	cmp	r1, #2
    beq _oops
    d94a:	d0ff      	beq.n	d94c <_oops>

0000d94c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    d94c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    d94e:	f00e f80e 	bl	1b96e <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    d952:	bd01      	pop	{r0, pc}

0000d954 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    d954:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    d956:	2b00      	cmp	r3, #0
    d958:	db08      	blt.n	d96c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d95a:	2201      	movs	r2, #1
    d95c:	f000 001f 	and.w	r0, r0, #31
    d960:	fa02 f000 	lsl.w	r0, r2, r0
    d964:	4a02      	ldr	r2, [pc, #8]	; (d970 <arch_irq_enable+0x1c>)
    d966:	095b      	lsrs	r3, r3, #5
    d968:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    d96c:	4770      	bx	lr
    d96e:	bf00      	nop
    d970:	e000e100 	.word	0xe000e100

0000d974 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    d974:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    d976:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    d978:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d97c:	bfa8      	it	ge
    d97e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    d982:	ea4f 1141 	mov.w	r1, r1, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d986:	bfb8      	it	lt
    d988:	4b05      	ldrlt	r3, [pc, #20]	; (d9a0 <z_arm_irq_priority_set+0x2c>)
    d98a:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d98c:	bfab      	itete	ge
    d98e:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d992:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d996:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d99a:	5419      	strblt	r1, [r3, r0]
}
    d99c:	4770      	bx	lr
    d99e:	bf00      	nop
    d9a0:	e000ed14 	.word	0xe000ed14

0000d9a4 <_arch_isr_direct_pm>:
	z_arm_reserved();
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    d9a4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    d9a6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    d9a8:	4b04      	ldr	r3, [pc, #16]	; (d9bc <_arch_isr_direct_pm+0x18>)
    d9aa:	6a18      	ldr	r0, [r3, #32]
    d9ac:	b118      	cbz	r0, d9b6 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    d9ae:	2200      	movs	r2, #0
    d9b0:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    d9b2:	f00f fdad 	bl	1d510 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    d9b6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    d9b8:	bd08      	pop	{r3, pc}
    d9ba:	bf00      	nop
    d9bc:	20021d60 	.word	0x20021d60

0000d9c0 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
    d9c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d9c2:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
    d9c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
    d9c6:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    d9c8:	9300      	str	r3, [sp, #0]
    d9ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
	stackEnd = pStackMem + stackSize;
    d9cc:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    d9ce:	f00f ffcc 	bl	1d96a <z_new_thread_init>
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    d9d2:	4a0c      	ldr	r2, [pc, #48]	; (da04 <arch_new_thread+0x44>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    d9d4:	f1a4 0320 	sub.w	r3, r4, #32
    d9d8:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    d9dc:	f022 0201 	bic.w	r2, r2, #1
    d9e0:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    d9e2:	9a06      	ldr	r2, [sp, #24]
	pInitCtx->basic.a1 = (u32_t)pEntry;
    d9e4:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    d9e6:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    d9e8:	9a07      	ldr	r2, [sp, #28]
    d9ea:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    d9ec:	9a08      	ldr	r2, [sp, #32]
    d9ee:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
    d9f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    d9f4:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    d9f6:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    d9f8:	2300      	movs	r3, #0
    d9fa:	666b      	str	r3, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
    d9fc:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    da00:	b002      	add	sp, #8
    da02:	bd70      	pop	{r4, r5, r6, pc}
    da04:	0001b5dd 	.word	0x0001b5dd

0000da08 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    da08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    da0c:	461f      	mov	r7, r3
    da0e:	4606      	mov	r6, r0
    da10:	460c      	mov	r4, r1
    da12:	4690      	mov	r8, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    da14:	2300      	movs	r3, #0
    da16:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    da1a:	f3ef 8514 	mrs	r5, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    da1e:	f025 0504 	bic.w	r5, r5, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    da22:	f385 8814 	msr	CONTROL, r5
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    da26:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    da2a:	f000 fc19 	bl	e260 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    da2e:	4b0a      	ldr	r3, [pc, #40]	; (da58 <arch_switch_to_main_thread+0x50>)
	start_of_main_stack =
    da30:	4444      	add	r4, r8
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    da32:	4630      	mov	r0, r6
	_current = main_thread;
    da34:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    da36:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    da3a:	f00d ffa3 	bl	1b984 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    da3e:	4638      	mov	r0, r7
    da40:	f384 8809 	msr	PSP, r4
    da44:	2100      	movs	r1, #0
    da46:	b663      	cpsie	if
    da48:	f381 8811 	msr	BASEPRI, r1
    da4c:	f3bf 8f6f 	isb	sy
    da50:	2200      	movs	r2, #0
    da52:	2300      	movs	r3, #0
    da54:	f00d fdc2 	bl	1b5dc <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    da58:	20021d60 	.word	0x20021d60

0000da5c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    da5c:	4901      	ldr	r1, [pc, #4]	; (da64 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    da5e:	2210      	movs	r2, #16
	str r2, [r1]
    da60:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    da62:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    da64:	e000ed10 	.word	0xe000ed10

0000da68 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    da68:	4040      	eors	r0, r0
	msr BASEPRI, r0
    da6a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    da6e:	bf30      	wfi

	bx lr
    da70:	4770      	bx	lr
    da72:	bf00      	nop

0000da74 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
    da74:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    da78:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    da7c:	4672      	mov	r2, lr

	push {r0, lr}
    da7e:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
    da80:	f000 fab0 	bl	dfe4 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    da84:	bd01      	pop	{r0, pc}
    da86:	bf00      	nop

0000da88 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    da88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    da8c:	4681      	mov	r9, r0
    da8e:	b08a      	sub	sp, #40	; 0x28

	if (esf != NULL) {
    da90:	460c      	mov	r4, r1
    da92:	2900      	cmp	r1, #0
    da94:	d07a      	beq.n	db8c <z_arm_fatal_error+0x104>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    da96:	2201      	movs	r2, #1
    da98:	f04f 0300 	mov.w	r3, #0
    da9c:	4d3f      	ldr	r5, [pc, #252]	; (db9c <z_arm_fatal_error+0x114>)
    da9e:	f362 0307 	bfi	r3, r2, #0, #8
    daa2:	4a3f      	ldr	r2, [pc, #252]	; (dba0 <z_arm_fatal_error+0x118>)
    daa4:	483f      	ldr	r0, [pc, #252]	; (dba4 <z_arm_fatal_error+0x11c>)
    daa6:	1aad      	subs	r5, r5, r2
    daa8:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    daac:	f365 138f 	bfi	r3, r5, #6, #10
    dab0:	f8ad 3000 	strh.w	r3, [sp]
    dab4:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    dab8:	6809      	ldr	r1, [r1, #0]
    daba:	f00d fe33 	bl	1b724 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    dabe:	2201      	movs	r2, #1
    dac0:	f04f 0300 	mov.w	r3, #0
    dac4:	f362 0307 	bfi	r3, r2, #0, #8
    dac8:	f365 138f 	bfi	r3, r5, #6, #10
    dacc:	f8ad 3000 	strh.w	r3, [sp]
    dad0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    dad4:	68e1      	ldr	r1, [r4, #12]
    dad6:	4834      	ldr	r0, [pc, #208]	; (dba8 <z_arm_fatal_error+0x120>)
    dad8:	f00d fe24 	bl	1b724 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    dadc:	2301      	movs	r3, #1
    dade:	f04f 0200 	mov.w	r2, #0
    dae2:	f363 0207 	bfi	r2, r3, #0, #8
    dae6:	f365 128f 	bfi	r2, r5, #6, #10
    daea:	69e1      	ldr	r1, [r4, #28]
    daec:	482f      	ldr	r0, [pc, #188]	; (dbac <z_arm_fatal_error+0x124>)
    daee:	f00d fded 	bl	1b6cc <log_1>
	for (int i = 0; i < 16; i += 4) {
    daf2:	4627      	mov	r7, r4
    daf4:	2600      	movs	r6, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    daf6:	f8df a0c0 	ldr.w	sl, [pc, #192]	; dbb8 <z_arm_fatal_error+0x130>
    dafa:	edd7 7a08 	vldr	s15, [r7, #32]
    dafe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    db02:	edcd 7a03 	vstr	s15, [sp, #12]
    db06:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
    db0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    db0e:	edcd 7a05 	vstr	s15, [sp, #20]
    db12:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    db16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    db1a:	edcd 7a07 	vstr	s15, [sp, #28]
    db1e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    db22:	2208      	movs	r2, #8
    db24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    db28:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    db2c:	f043 0301 	orr.w	r3, r3, #1
    db30:	f363 0807 	bfi	r8, r3, #0, #8
    db34:	1c73      	adds	r3, r6, #1
    db36:	9304      	str	r3, [sp, #16]
    db38:	1cb3      	adds	r3, r6, #2
    db3a:	9306      	str	r3, [sp, #24]
    db3c:	f365 188f 	bfi	r8, r5, #6, #10
    db40:	1cf3      	adds	r3, r6, #3
    db42:	9602      	str	r6, [sp, #8]
    db44:	9308      	str	r3, [sp, #32]
    db46:	eb0d 0102 	add.w	r1, sp, r2
    db4a:	4643      	mov	r3, r8
    db4c:	4650      	mov	r0, sl
	for (int i = 0; i < 16; i += 4) {
    db4e:	3604      	adds	r6, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    db50:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
    db54:	f00d fe01 	bl	1b75a <log_n>
	for (int i = 0; i < 16; i += 4) {
    db58:	2e10      	cmp	r6, #16
    db5a:	f107 0710 	add.w	r7, r7, #16
    db5e:	d1cc      	bne.n	dafa <z_arm_fatal_error+0x72>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
    db60:	2301      	movs	r3, #1
    db62:	f04f 0200 	mov.w	r2, #0
    db66:	f363 0207 	bfi	r2, r3, #0, #8
    db6a:	f365 128f 	bfi	r2, r5, #6, #10
    db6e:	6e21      	ldr	r1, [r4, #96]	; 0x60
    db70:	480f      	ldr	r0, [pc, #60]	; (dbb0 <z_arm_fatal_error+0x128>)
    db72:	f00d fdab 	bl	1b6cc <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    db76:	f04f 0200 	mov.w	r2, #0
    db7a:	2301      	movs	r3, #1
    db7c:	f363 0207 	bfi	r2, r3, #0, #8
    db80:	f365 128f 	bfi	r2, r5, #6, #10
    db84:	69a1      	ldr	r1, [r4, #24]
    db86:	480b      	ldr	r0, [pc, #44]	; (dbb4 <z_arm_fatal_error+0x12c>)
    db88:	f00d fda0 	bl	1b6cc <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    db8c:	4621      	mov	r1, r4
    db8e:	4648      	mov	r0, r9
    db90:	f00b ff42 	bl	19a18 <z_fatal_error>
}
    db94:	b00a      	add	sp, #40	; 0x28
    db96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    db9a:	bf00      	nop
    db9c:	0001e09c 	.word	0x0001e09c
    dba0:	0001e02c 	.word	0x0001e02c
    dba4:	0001f516 	.word	0x0001f516
    dba8:	0001f545 	.word	0x0001f545
    dbac:	0001f574 	.word	0x0001f574
    dbb0:	0001f5c6 	.word	0x0001f5c6
    dbb4:	0001f5d5 	.word	0x0001f5d5
    dbb8:	0001f583 	.word	0x0001f583

0000dbbc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    dbbc:	bf30      	wfi
    b z_SysNmiOnReset
    dbbe:	f7ff bffd 	b.w	dbbc <z_SysNmiOnReset>
    dbc2:	bf00      	nop

0000dbc4 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    dbc4:	4a11      	ldr	r2, [pc, #68]	; (dc0c <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    dbc6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    dbc8:	4b11      	ldr	r3, [pc, #68]	; (dc10 <z_arm_prep_c+0x4c>)
    dbca:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    dbce:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    dbd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    dbd4:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    dbd8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    dbdc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    dbe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    dbe4:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    dbe8:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    dbec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    dbf0:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    dbf4:	2300      	movs	r3, #0
    dbf6:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    dbfa:	f00b ff8d 	bl	19b18 <z_bss_zero>
	z_data_copy();
    dbfe:	f00b ff95 	bl	19b2c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    dc02:	f000 fafb 	bl	e1fc <z_arm_int_lib_init>
	z_cstart();
    dc06:	f00b ffc3 	bl	19b90 <z_cstart>
    dc0a:	bf00      	nop
    dc0c:	0000c000 	.word	0x0000c000
    dc10:	e000ed00 	.word	0xe000ed00

0000dc14 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    dc14:	b501      	push	{r0, lr}
      * FIXME: Remove the Cortex-M conditional compilation checks for `cpsid i`
      *        and `cpsie i` after the Cortex-R port is updated to support
      *        interrupt nesting.  For more details, refer to the issue #21758.
      */
#if defined(CONFIG_CPU_CORTEX_M)
	cpsid i  /* PRIMASK = 1 */
    dc16:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    dc18:	4a0b      	ldr	r2, [pc, #44]	; (dc48 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    dc1a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    dc1c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    dc1e:	bf1e      	ittt	ne
	movne	r1, #0
    dc20:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    dc22:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    dc24:	f00f fc74 	blne	1d510 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    dc28:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    dc2a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    dc2e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    dc32:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    dc36:	4905      	ldr	r1, [pc, #20]	; (dc4c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    dc38:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    dc3a:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    dc3c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    dc3e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    dc42:	4903      	ldr	r1, [pc, #12]	; (dc50 <_isr_wrapper+0x3c>)
	bx r1
    dc44:	4708      	bx	r1
    dc46:	0000      	.short	0x0000
	ldr r2, =_kernel
    dc48:	20021d60 	.word	0x20021d60
	ldr r1, =_sw_isr_table
    dc4c:	0001dd64 	.word	0x0001dd64
	ldr r1, =z_arm_int_exit
    dc50:	0000d835 	.word	0x0000d835

0000dc54 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    dc54:	f00d fce8 	bl	1b628 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    dc58:	2020      	movs	r0, #32
    msr BASEPRI, r0
    dc5a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    dc5e:	4808      	ldr	r0, [pc, #32]	; (dc80 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    dc60:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    dc64:	1840      	adds	r0, r0, r1
    msr PSP, r0
    dc66:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    dc6a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    dc6e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    dc70:	4308      	orrs	r0, r1
    msr CONTROL, r0
    dc72:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    dc76:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    dc7a:	f7ff ffa3 	bl	dbc4 <z_arm_prep_c>
    dc7e:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    dc80:	20024200 	.word	0x20024200

0000dc84 <usage_fault.isra.2>:
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    dc84:	2301      	movs	r3, #1
    dc86:	f04f 0100 	mov.w	r1, #0
static u32_t usage_fault(const z_arch_esf_t *esf)
    dc8a:	b510      	push	{r4, lr}
	PR_FAULT_INFO("***** USAGE FAULT *****");
    dc8c:	f363 0107 	bfi	r1, r3, #0, #8
    dc90:	4c3a      	ldr	r4, [pc, #232]	; (dd7c <usage_fault.isra.2+0xf8>)
    dc92:	4b3b      	ldr	r3, [pc, #236]	; (dd80 <usage_fault.isra.2+0xfc>)
    dc94:	483b      	ldr	r0, [pc, #236]	; (dd84 <usage_fault.isra.2+0x100>)
    dc96:	1ae4      	subs	r4, r4, r3
    dc98:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    dc9c:	f364 118f 	bfi	r1, r4, #6, #10
    dca0:	f00d fd07 	bl	1b6b2 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    dca4:	4b38      	ldr	r3, [pc, #224]	; (dd88 <usage_fault.isra.2+0x104>)
    dca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dca8:	0199      	lsls	r1, r3, #6
    dcaa:	d509      	bpl.n	dcc0 <usage_fault.isra.2+0x3c>
		PR_FAULT_INFO("  Division by zero");
    dcac:	f04f 0100 	mov.w	r1, #0
    dcb0:	2301      	movs	r3, #1
    dcb2:	f363 0107 	bfi	r1, r3, #0, #8
    dcb6:	f364 118f 	bfi	r1, r4, #6, #10
    dcba:	4834      	ldr	r0, [pc, #208]	; (dd8c <usage_fault.isra.2+0x108>)
    dcbc:	f00d fcf9 	bl	1b6b2 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    dcc0:	4b31      	ldr	r3, [pc, #196]	; (dd88 <usage_fault.isra.2+0x104>)
    dcc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dcc4:	01da      	lsls	r2, r3, #7
    dcc6:	d509      	bpl.n	dcdc <usage_fault.isra.2+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
    dcc8:	f04f 0100 	mov.w	r1, #0
    dccc:	2301      	movs	r3, #1
    dcce:	f363 0107 	bfi	r1, r3, #0, #8
    dcd2:	f364 118f 	bfi	r1, r4, #6, #10
    dcd6:	482e      	ldr	r0, [pc, #184]	; (dd90 <usage_fault.isra.2+0x10c>)
    dcd8:	f00d fceb 	bl	1b6b2 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    dcdc:	4b2a      	ldr	r3, [pc, #168]	; (dd88 <usage_fault.isra.2+0x104>)
    dcde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dce0:	02db      	lsls	r3, r3, #11
    dce2:	d509      	bpl.n	dcf8 <usage_fault.isra.2+0x74>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    dce4:	f04f 0100 	mov.w	r1, #0
    dce8:	2301      	movs	r3, #1
    dcea:	f363 0107 	bfi	r1, r3, #0, #8
    dcee:	f364 118f 	bfi	r1, r4, #6, #10
    dcf2:	4828      	ldr	r0, [pc, #160]	; (dd94 <usage_fault.isra.2+0x110>)
    dcf4:	f00d fcdd 	bl	1b6b2 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    dcf8:	4b23      	ldr	r3, [pc, #140]	; (dd88 <usage_fault.isra.2+0x104>)
    dcfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dcfc:	0318      	lsls	r0, r3, #12
    dcfe:	d509      	bpl.n	dd14 <usage_fault.isra.2+0x90>
		PR_FAULT_INFO("  No coprocessor instructions");
    dd00:	f04f 0100 	mov.w	r1, #0
    dd04:	2301      	movs	r3, #1
    dd06:	f363 0107 	bfi	r1, r3, #0, #8
    dd0a:	f364 118f 	bfi	r1, r4, #6, #10
    dd0e:	4822      	ldr	r0, [pc, #136]	; (dd98 <usage_fault.isra.2+0x114>)
    dd10:	f00d fccf 	bl	1b6b2 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    dd14:	4b1c      	ldr	r3, [pc, #112]	; (dd88 <usage_fault.isra.2+0x104>)
    dd16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dd18:	0359      	lsls	r1, r3, #13
    dd1a:	d509      	bpl.n	dd30 <usage_fault.isra.2+0xac>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    dd1c:	f04f 0100 	mov.w	r1, #0
    dd20:	2301      	movs	r3, #1
    dd22:	f363 0107 	bfi	r1, r3, #0, #8
    dd26:	f364 118f 	bfi	r1, r4, #6, #10
    dd2a:	481c      	ldr	r0, [pc, #112]	; (dd9c <usage_fault.isra.2+0x118>)
    dd2c:	f00d fcc1 	bl	1b6b2 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    dd30:	4b15      	ldr	r3, [pc, #84]	; (dd88 <usage_fault.isra.2+0x104>)
    dd32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dd34:	039a      	lsls	r2, r3, #14
    dd36:	d509      	bpl.n	dd4c <usage_fault.isra.2+0xc8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    dd38:	f04f 0100 	mov.w	r1, #0
    dd3c:	2301      	movs	r3, #1
    dd3e:	f363 0107 	bfi	r1, r3, #0, #8
    dd42:	f364 118f 	bfi	r1, r4, #6, #10
    dd46:	4816      	ldr	r0, [pc, #88]	; (dda0 <usage_fault.isra.2+0x11c>)
    dd48:	f00d fcb3 	bl	1b6b2 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    dd4c:	4b0e      	ldr	r3, [pc, #56]	; (dd88 <usage_fault.isra.2+0x104>)
    dd4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dd50:	03db      	lsls	r3, r3, #15
    dd52:	d509      	bpl.n	dd68 <usage_fault.isra.2+0xe4>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    dd54:	f04f 0100 	mov.w	r1, #0
    dd58:	2301      	movs	r3, #1
    dd5a:	f363 0107 	bfi	r1, r3, #0, #8
    dd5e:	f364 118f 	bfi	r1, r4, #6, #10
    dd62:	4810      	ldr	r0, [pc, #64]	; (dda4 <usage_fault.isra.2+0x120>)
    dd64:	f00d fca5 	bl	1b6b2 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    dd68:	4a07      	ldr	r2, [pc, #28]	; (dd88 <usage_fault.isra.2+0x104>)

	return reason;
}
    dd6a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    dd6c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    dd6e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    dd72:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    dd76:	6293      	str	r3, [r2, #40]	; 0x28
}
    dd78:	bd10      	pop	{r4, pc}
    dd7a:	bf00      	nop
    dd7c:	0001e09c 	.word	0x0001e09c
    dd80:	0001e02c 	.word	0x0001e02c
    dd84:	0001f763 	.word	0x0001f763
    dd88:	e000ed00 	.word	0xe000ed00
    dd8c:	0001f77b 	.word	0x0001f77b
    dd90:	0001f78e 	.word	0x0001f78e
    dd94:	0001f7a8 	.word	0x0001f7a8
    dd98:	0001f7d2 	.word	0x0001f7d2
    dd9c:	0001f7f0 	.word	0x0001f7f0
    dda0:	0001f815 	.word	0x0001f815
    dda4:	0001f82f 	.word	0x0001f82f

0000dda8 <mem_manage_fault.isra.4>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    dda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
    ddaa:	2301      	movs	r3, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    ddac:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    ddae:	f04f 0100 	mov.w	r1, #0
    ddb2:	4c37      	ldr	r4, [pc, #220]	; (de90 <mem_manage_fault.isra.4+0xe8>)
    ddb4:	f363 0107 	bfi	r1, r3, #0, #8
    ddb8:	4b36      	ldr	r3, [pc, #216]	; (de94 <mem_manage_fault.isra.4+0xec>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    ddba:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    ddbc:	1ae4      	subs	r4, r4, r3
    ddbe:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    ddc2:	f364 118f 	bfi	r1, r4, #6, #10
    ddc6:	4834      	ldr	r0, [pc, #208]	; (de98 <mem_manage_fault.isra.4+0xf0>)
    ddc8:	f00d fc73 	bl	1b6b2 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    ddcc:	4b33      	ldr	r3, [pc, #204]	; (de9c <mem_manage_fault.isra.4+0xf4>)
    ddce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ddd0:	06d9      	lsls	r1, r3, #27
    ddd2:	d509      	bpl.n	dde8 <mem_manage_fault.isra.4+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    ddd4:	f04f 0100 	mov.w	r1, #0
    ddd8:	2301      	movs	r3, #1
    ddda:	f363 0107 	bfi	r1, r3, #0, #8
    ddde:	f364 118f 	bfi	r1, r4, #6, #10
    dde2:	482f      	ldr	r0, [pc, #188]	; (dea0 <mem_manage_fault.isra.4+0xf8>)
    dde4:	f00d fc65 	bl	1b6b2 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    dde8:	4b2c      	ldr	r3, [pc, #176]	; (de9c <mem_manage_fault.isra.4+0xf4>)
    ddea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ddec:	071a      	lsls	r2, r3, #28
    ddee:	d509      	bpl.n	de04 <mem_manage_fault.isra.4+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    ddf0:	f04f 0100 	mov.w	r1, #0
    ddf4:	2301      	movs	r3, #1
    ddf6:	f363 0107 	bfi	r1, r3, #0, #8
    ddfa:	f364 118f 	bfi	r1, r4, #6, #10
    ddfe:	4829      	ldr	r0, [pc, #164]	; (dea4 <mem_manage_fault.isra.4+0xfc>)
    de00:	f00d fc57 	bl	1b6b2 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    de04:	4d25      	ldr	r5, [pc, #148]	; (de9c <mem_manage_fault.isra.4+0xf4>)
    de06:	6aab      	ldr	r3, [r5, #40]	; 0x28
    de08:	079b      	lsls	r3, r3, #30
    de0a:	d51c      	bpl.n	de46 <mem_manage_fault.isra.4+0x9e>
		PR_FAULT_INFO("  Data Access Violation");
    de0c:	2301      	movs	r3, #1
    de0e:	f04f 0100 	mov.w	r1, #0
    de12:	f363 0107 	bfi	r1, r3, #0, #8
    de16:	f364 118f 	bfi	r1, r4, #6, #10
    de1a:	4823      	ldr	r0, [pc, #140]	; (dea8 <mem_manage_fault.isra.4+0x100>)
    de1c:	f00d fc49 	bl	1b6b2 <log_0>
		mmfar = SCB->MMFAR;
    de20:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    de22:	6aab      	ldr	r3, [r5, #40]	; 0x28
    de24:	0618      	lsls	r0, r3, #24
    de26:	d50e      	bpl.n	de46 <mem_manage_fault.isra.4+0x9e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    de28:	f04f 0200 	mov.w	r2, #0
    de2c:	2301      	movs	r3, #1
    de2e:	f363 0207 	bfi	r2, r3, #0, #8
    de32:	f364 128f 	bfi	r2, r4, #6, #10
    de36:	481d      	ldr	r0, [pc, #116]	; (deac <mem_manage_fault.isra.4+0x104>)
    de38:	f00d fc48 	bl	1b6cc <log_1>
			if (from_hard_fault) {
    de3c:	b11f      	cbz	r7, de46 <mem_manage_fault.isra.4+0x9e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    de3e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    de40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    de44:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    de46:	4b15      	ldr	r3, [pc, #84]	; (de9c <mem_manage_fault.isra.4+0xf4>)
    de48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    de4a:	07da      	lsls	r2, r3, #31
    de4c:	d509      	bpl.n	de62 <mem_manage_fault.isra.4+0xba>
		PR_FAULT_INFO("  Instruction Access Violation");
    de4e:	f04f 0100 	mov.w	r1, #0
    de52:	2301      	movs	r3, #1
    de54:	f363 0107 	bfi	r1, r3, #0, #8
    de58:	f364 118f 	bfi	r1, r4, #6, #10
    de5c:	4814      	ldr	r0, [pc, #80]	; (deb0 <mem_manage_fault.isra.4+0x108>)
    de5e:	f00d fc28 	bl	1b6b2 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    de62:	4b0e      	ldr	r3, [pc, #56]	; (de9c <mem_manage_fault.isra.4+0xf4>)
    de64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    de66:	069b      	lsls	r3, r3, #26
    de68:	d509      	bpl.n	de7e <mem_manage_fault.isra.4+0xd6>
		PR_FAULT_INFO(
    de6a:	f04f 0100 	mov.w	r1, #0
    de6e:	2301      	movs	r3, #1
    de70:	f363 0107 	bfi	r1, r3, #0, #8
    de74:	f364 118f 	bfi	r1, r4, #6, #10
    de78:	480e      	ldr	r0, [pc, #56]	; (deb4 <mem_manage_fault.isra.4+0x10c>)
    de7a:	f00d fc1a 	bl	1b6b2 <log_0>
	*recoverable = memory_fault_recoverable(esf);
    de7e:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    de80:	4b06      	ldr	r3, [pc, #24]	; (de9c <mem_manage_fault.isra.4+0xf4>)
    de82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    de84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    de86:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    de8a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    de8c:	7030      	strb	r0, [r6, #0]
}
    de8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    de90:	0001e09c 	.word	0x0001e09c
    de94:	0001e02c 	.word	0x0001e02c
    de98:	0001f68b 	.word	0x0001f68b
    de9c:	e000ed00 	.word	0xe000ed00
    dea0:	0001f6a1 	.word	0x0001f6a1
    dea4:	0001f6d4 	.word	0x0001f6d4
    dea8:	0001f6e7 	.word	0x0001f6e7
    deac:	0001f6ff 	.word	0x0001f6ff
    deb0:	0001f715 	.word	0x0001f715
    deb4:	0001f734 	.word	0x0001f734

0000deb8 <bus_fault.isra.5>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    deb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** BUS FAULT *****");
    deba:	2301      	movs	r3, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    debc:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    debe:	f04f 0100 	mov.w	r1, #0
    dec2:	4c3d      	ldr	r4, [pc, #244]	; (dfb8 <bus_fault.isra.5+0x100>)
    dec4:	f363 0107 	bfi	r1, r3, #0, #8
    dec8:	4b3c      	ldr	r3, [pc, #240]	; (dfbc <bus_fault.isra.5+0x104>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    deca:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    decc:	1ae4      	subs	r4, r4, r3
    dece:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    ded2:	f364 118f 	bfi	r1, r4, #6, #10
    ded6:	483a      	ldr	r0, [pc, #232]	; (dfc0 <bus_fault.isra.5+0x108>)
    ded8:	f00d fbeb 	bl	1b6b2 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    dedc:	4b39      	ldr	r3, [pc, #228]	; (dfc4 <bus_fault.isra.5+0x10c>)
    dede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dee0:	04d9      	lsls	r1, r3, #19
    dee2:	d509      	bpl.n	def8 <bus_fault.isra.5+0x40>
		PR_FAULT_INFO("  Stacking error");
    dee4:	f04f 0100 	mov.w	r1, #0
    dee8:	2301      	movs	r3, #1
    deea:	f363 0107 	bfi	r1, r3, #0, #8
    deee:	f364 118f 	bfi	r1, r4, #6, #10
    def2:	4835      	ldr	r0, [pc, #212]	; (dfc8 <bus_fault.isra.5+0x110>)
    def4:	f00d fbdd 	bl	1b6b2 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    def8:	4b32      	ldr	r3, [pc, #200]	; (dfc4 <bus_fault.isra.5+0x10c>)
    defa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    defc:	051a      	lsls	r2, r3, #20
    defe:	d509      	bpl.n	df14 <bus_fault.isra.5+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    df00:	f04f 0100 	mov.w	r1, #0
    df04:	2301      	movs	r3, #1
    df06:	f363 0107 	bfi	r1, r3, #0, #8
    df0a:	f364 118f 	bfi	r1, r4, #6, #10
    df0e:	482f      	ldr	r0, [pc, #188]	; (dfcc <bus_fault.isra.5+0x114>)
    df10:	f00d fbcf 	bl	1b6b2 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    df14:	4d2b      	ldr	r5, [pc, #172]	; (dfc4 <bus_fault.isra.5+0x10c>)
    df16:	6aab      	ldr	r3, [r5, #40]	; 0x28
    df18:	059b      	lsls	r3, r3, #22
    df1a:	d51c      	bpl.n	df56 <bus_fault.isra.5+0x9e>
		PR_FAULT_INFO("  Precise data bus error");
    df1c:	2301      	movs	r3, #1
    df1e:	f04f 0100 	mov.w	r1, #0
    df22:	f363 0107 	bfi	r1, r3, #0, #8
    df26:	f364 118f 	bfi	r1, r4, #6, #10
    df2a:	4829      	ldr	r0, [pc, #164]	; (dfd0 <bus_fault.isra.5+0x118>)
    df2c:	f00d fbc1 	bl	1b6b2 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    df30:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    df32:	6aab      	ldr	r3, [r5, #40]	; 0x28
    df34:	0418      	lsls	r0, r3, #16
    df36:	d50e      	bpl.n	df56 <bus_fault.isra.5+0x9e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    df38:	f04f 0200 	mov.w	r2, #0
    df3c:	2301      	movs	r3, #1
    df3e:	f363 0207 	bfi	r2, r3, #0, #8
    df42:	f364 128f 	bfi	r2, r4, #6, #10
    df46:	4823      	ldr	r0, [pc, #140]	; (dfd4 <bus_fault.isra.5+0x11c>)
    df48:	f00d fbc0 	bl	1b6cc <log_1>
			if (from_hard_fault) {
    df4c:	b11f      	cbz	r7, df56 <bus_fault.isra.5+0x9e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    df4e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    df50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    df54:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    df56:	4b1b      	ldr	r3, [pc, #108]	; (dfc4 <bus_fault.isra.5+0x10c>)
    df58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    df5a:	0559      	lsls	r1, r3, #21
    df5c:	d509      	bpl.n	df72 <bus_fault.isra.5+0xba>
		PR_FAULT_INFO("  Imprecise data bus error");
    df5e:	f04f 0100 	mov.w	r1, #0
    df62:	2301      	movs	r3, #1
    df64:	f363 0107 	bfi	r1, r3, #0, #8
    df68:	f364 118f 	bfi	r1, r4, #6, #10
    df6c:	481a      	ldr	r0, [pc, #104]	; (dfd8 <bus_fault.isra.5+0x120>)
    df6e:	f00d fba0 	bl	1b6b2 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    df72:	4b14      	ldr	r3, [pc, #80]	; (dfc4 <bus_fault.isra.5+0x10c>)
    df74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    df76:	05d2      	lsls	r2, r2, #23
    df78:	d511      	bpl.n	df9e <bus_fault.isra.5+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
    df7a:	f04f 0100 	mov.w	r1, #0
    df7e:	2301      	movs	r3, #1
    df80:	4816      	ldr	r0, [pc, #88]	; (dfdc <bus_fault.isra.5+0x124>)
    df82:	f363 0107 	bfi	r1, r3, #0, #8
    df86:	f364 118f 	bfi	r1, r4, #6, #10
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    df8a:	f00d fb92 	bl	1b6b2 <log_0>
	*recoverable = memory_fault_recoverable(esf);
    df8e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    df90:	4a0c      	ldr	r2, [pc, #48]	; (dfc4 <bus_fault.isra.5+0x10c>)
    df92:	6a93      	ldr	r3, [r2, #40]	; 0x28
    df94:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    df98:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    df9a:	7030      	strb	r0, [r6, #0]
}
    df9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    df9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dfa0:	049b      	lsls	r3, r3, #18
    dfa2:	d5f4      	bpl.n	df8e <bus_fault.isra.5+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    dfa4:	f04f 0100 	mov.w	r1, #0
    dfa8:	2301      	movs	r3, #1
    dfaa:	f363 0107 	bfi	r1, r3, #0, #8
    dfae:	f364 118f 	bfi	r1, r4, #6, #10
    dfb2:	480b      	ldr	r0, [pc, #44]	; (dfe0 <bus_fault.isra.5+0x128>)
    dfb4:	e7e9      	b.n	df8a <bus_fault.isra.5+0xd2>
    dfb6:	bf00      	nop
    dfb8:	0001e09c 	.word	0x0001e09c
    dfbc:	0001e02c 	.word	0x0001e02c
    dfc0:	0001f603 	.word	0x0001f603
    dfc4:	e000ed00 	.word	0xe000ed00
    dfc8:	0001f619 	.word	0x0001f619
    dfcc:	0001f6d4 	.word	0x0001f6d4
    dfd0:	0001f62a 	.word	0x0001f62a
    dfd4:	0001f643 	.word	0x0001f643
    dfd8:	0001f658 	.word	0x0001f658
    dfdc:	0001f673 	.word	0x0001f673
    dfe0:	0001f734 	.word	0x0001f734

0000dfe4 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    dfe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    dfe8:	4b69      	ldr	r3, [pc, #420]	; (e190 <z_arm_fault+0x1ac>)
{
    dfea:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    dfec:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    dff0:	4606      	mov	r6, r0
    dff2:	4689      	mov	r9, r1
    dff4:	4614      	mov	r4, r2
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    dff6:	f3c8 0708 	ubfx	r7, r8, #0, #9
    dffa:	2500      	movs	r5, #0
    dffc:	f385 8811 	msr	BASEPRI, r5
    e000:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    e004:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    e008:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    e00c:	d128      	bne.n	e060 <z_arm_fault+0x7c>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    e00e:	07d0      	lsls	r0, r2, #31
    e010:	d426      	bmi.n	e060 <z_arm_fault+0x7c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    e012:	0651      	lsls	r1, r2, #25
    e014:	d403      	bmi.n	e01e <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    e016:	0722      	lsls	r2, r4, #28
    e018:	d412      	bmi.n	e040 <z_arm_fault+0x5c>
			*nested_exc = true;
    e01a:	2501      	movs	r5, #1
    e01c:	e012      	b.n	e044 <z_arm_fault+0x60>
		PR_FAULT_INFO("Exception occurred in Secure State");
    e01e:	2301      	movs	r3, #1
    e020:	f04f 0100 	mov.w	r1, #0
    e024:	4a5b      	ldr	r2, [pc, #364]	; (e194 <z_arm_fault+0x1b0>)
    e026:	f363 0107 	bfi	r1, r3, #0, #8
    e02a:	4b5b      	ldr	r3, [pc, #364]	; (e198 <z_arm_fault+0x1b4>)
    e02c:	485b      	ldr	r0, [pc, #364]	; (e19c <z_arm_fault+0x1b8>)
    e02e:	1a9b      	subs	r3, r3, r2
    e030:	08db      	lsrs	r3, r3, #3
    e032:	f363 118f 	bfi	r1, r3, #6, #10
    e036:	f00d fb3c 	bl	1b6b2 <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    e03a:	f014 0504 	ands.w	r5, r4, #4
    e03e:	d001      	beq.n	e044 <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)psp;
    e040:	464e      	mov	r6, r9
	*nested_exc = false;
    e042:	2500      	movs	r5, #0
	*recoverable = false;
    e044:	2300      	movs	r3, #0
    e046:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    e04a:	1efb      	subs	r3, r7, #3
    e04c:	2b09      	cmp	r3, #9
    e04e:	f200 8082 	bhi.w	e156 <z_arm_fault+0x172>
    e052:	e8df f003 	tbb	[pc, r3]
    e056:	6b07      	.short	0x6b07
    e058:	80804e6f 	.word	0x80804e6f
    e05c:	73808080 	.word	0x73808080
		return NULL;
    e060:	462e      	mov	r6, r5
    e062:	e7ef      	b.n	e044 <z_arm_fault+0x60>
	PR_FAULT_INFO("***** HARD FAULT *****");
    e064:	2301      	movs	r3, #1
    e066:	f04f 0100 	mov.w	r1, #0
	*recoverable = false;
    e06a:	f04f 0800 	mov.w	r8, #0
	PR_FAULT_INFO("***** HARD FAULT *****");
    e06e:	f363 0107 	bfi	r1, r3, #0, #8
    e072:	4f49      	ldr	r7, [pc, #292]	; (e198 <z_arm_fault+0x1b4>)
    e074:	4b47      	ldr	r3, [pc, #284]	; (e194 <z_arm_fault+0x1b0>)
    e076:	484a      	ldr	r0, [pc, #296]	; (e1a0 <z_arm_fault+0x1bc>)
    e078:	1aff      	subs	r7, r7, r3
    e07a:	f3c7 07c9 	ubfx	r7, r7, #3, #10
    e07e:	f367 118f 	bfi	r1, r7, #6, #10
    e082:	f00d fb16 	bl	1b6b2 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    e086:	4b42      	ldr	r3, [pc, #264]	; (e190 <z_arm_fault+0x1ac>)
	*recoverable = false;
    e088:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    e08c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    e08e:	f014 0402 	ands.w	r4, r4, #2
    e092:	d00b      	beq.n	e0ac <z_arm_fault+0xc8>
		PR_EXC("  Bus fault on vector table read");
    e094:	f04f 0100 	mov.w	r1, #0
    e098:	2301      	movs	r3, #1
    e09a:	4842      	ldr	r0, [pc, #264]	; (e1a4 <z_arm_fault+0x1c0>)
    e09c:	f363 0107 	bfi	r1, r3, #0, #8
    e0a0:	f367 118f 	bfi	r1, r7, #6, #10
	PR_FAULT_INFO(
    e0a4:	f00d fb05 	bl	1b6b2 <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    e0a8:	2400      	movs	r4, #0
    e0aa:	e025      	b.n	e0f8 <z_arm_fault+0x114>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    e0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    e0ae:	005b      	lsls	r3, r3, #1
    e0b0:	d522      	bpl.n	e0f8 <z_arm_fault+0x114>
		PR_EXC("  Fault escalation (see below)");
    e0b2:	2301      	movs	r3, #1
    e0b4:	f04f 0100 	mov.w	r1, #0
    e0b8:	f363 0107 	bfi	r1, r3, #0, #8
    e0bc:	f367 118f 	bfi	r1, r7, #6, #10
    e0c0:	4839      	ldr	r0, [pc, #228]	; (e1a8 <z_arm_fault+0x1c4>)
    e0c2:	f00d faf6 	bl	1b6b2 <log_0>
		if (SCB_MMFSR != 0) {
    e0c6:	4b39      	ldr	r3, [pc, #228]	; (e1ac <z_arm_fault+0x1c8>)
    e0c8:	781b      	ldrb	r3, [r3, #0]
    e0ca:	b12b      	cbz	r3, e0d8 <z_arm_fault+0xf4>
			reason = mem_manage_fault(esf, 1, recoverable);
    e0cc:	2001      	movs	r0, #1
    e0ce:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    e0d2:	f7ff fe69 	bl	dda8 <mem_manage_fault.isra.4>
    e0d6:	e00e      	b.n	e0f6 <z_arm_fault+0x112>
		} else if (SCB_BFSR != 0) {
    e0d8:	4b35      	ldr	r3, [pc, #212]	; (e1b0 <z_arm_fault+0x1cc>)
    e0da:	781b      	ldrb	r3, [r3, #0]
    e0dc:	b12b      	cbz	r3, e0ea <z_arm_fault+0x106>
			reason = bus_fault(esf, 1, recoverable);
    e0de:	2001      	movs	r0, #1
    e0e0:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    e0e4:	f7ff fee8 	bl	deb8 <bus_fault.isra.5>
    e0e8:	e005      	b.n	e0f6 <z_arm_fault+0x112>
		} else if (SCB_UFSR != 0) {
    e0ea:	4b32      	ldr	r3, [pc, #200]	; (e1b4 <z_arm_fault+0x1d0>)
    e0ec:	881b      	ldrh	r3, [r3, #0]
    e0ee:	b29b      	uxth	r3, r3
    e0f0:	b113      	cbz	r3, e0f8 <z_arm_fault+0x114>
			reason = usage_fault(esf);
    e0f2:	f7ff fdc7 	bl	dc84 <usage_fault.isra.2>
    e0f6:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    e0f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e0fc:	b99b      	cbnz	r3, e126 <z_arm_fault+0x142>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    e0fe:	2268      	movs	r2, #104	; 0x68
    e100:	4631      	mov	r1, r6
    e102:	a802      	add	r0, sp, #8
    e104:	f00d fe01 	bl	1bd0a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    e108:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e10a:	2d00      	cmp	r5, #0
    e10c:	d03a      	beq.n	e184 <z_arm_fault+0x1a0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    e10e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    e112:	b922      	cbnz	r2, e11e <z_arm_fault+0x13a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    e114:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    e118:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    e11c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    e11e:	a902      	add	r1, sp, #8
    e120:	4620      	mov	r0, r4
    e122:	f7ff fcb1 	bl	da88 <z_arm_fatal_error>
}
    e126:	b01d      	add	sp, #116	; 0x74
    e128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    e12c:	f10d 0107 	add.w	r1, sp, #7
    e130:	2000      	movs	r0, #0
    e132:	e7ce      	b.n	e0d2 <z_arm_fault+0xee>
		reason = bus_fault(esf, 0, recoverable);
    e134:	f10d 0107 	add.w	r1, sp, #7
    e138:	2000      	movs	r0, #0
    e13a:	e7d3      	b.n	e0e4 <z_arm_fault+0x100>
	PR_FAULT_INFO(
    e13c:	2301      	movs	r3, #1
    e13e:	f04f 0100 	mov.w	r1, #0
    e142:	4a14      	ldr	r2, [pc, #80]	; (e194 <z_arm_fault+0x1b0>)
    e144:	f363 0107 	bfi	r1, r3, #0, #8
    e148:	4b13      	ldr	r3, [pc, #76]	; (e198 <z_arm_fault+0x1b4>)
    e14a:	481b      	ldr	r0, [pc, #108]	; (e1b8 <z_arm_fault+0x1d4>)
    e14c:	1a9b      	subs	r3, r3, r2
    e14e:	08db      	lsrs	r3, r3, #3
    e150:	f363 118f 	bfi	r1, r3, #6, #10
    e154:	e7a6      	b.n	e0a4 <z_arm_fault+0xc0>
	PR_FAULT_INFO("***** %s %d) *****",
    e156:	2201      	movs	r2, #1
    e158:	f04f 0300 	mov.w	r3, #0
    e15c:	490e      	ldr	r1, [pc, #56]	; (e198 <z_arm_fault+0x1b4>)
    e15e:	f362 0307 	bfi	r3, r2, #0, #8
    e162:	4a0c      	ldr	r2, [pc, #48]	; (e194 <z_arm_fault+0x1b0>)
    e164:	4815      	ldr	r0, [pc, #84]	; (e1bc <z_arm_fault+0x1d8>)
    e166:	1a89      	subs	r1, r1, r2
    e168:	08c9      	lsrs	r1, r1, #3
    e16a:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    e16e:	f361 138f 	bfi	r3, r1, #6, #10
    e172:	f1a7 0210 	sub.w	r2, r7, #16
    e176:	4912      	ldr	r1, [pc, #72]	; (e1c0 <z_arm_fault+0x1dc>)
    e178:	bf18      	it	ne
    e17a:	4601      	movne	r1, r0
    e17c:	4811      	ldr	r0, [pc, #68]	; (e1c4 <z_arm_fault+0x1e0>)
    e17e:	f00d fab9 	bl	1b6f4 <log_2>
    e182:	e791      	b.n	e0a8 <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    e184:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    e188:	f023 0301 	bic.w	r3, r3, #1
    e18c:	e7c6      	b.n	e11c <z_arm_fault+0x138>
    e18e:	bf00      	nop
    e190:	e000ed00 	.word	0xe000ed00
    e194:	0001e02c 	.word	0x0001e02c
    e198:	0001e09c 	.word	0x0001e09c
    e19c:	0001f85a 	.word	0x0001f85a
    e1a0:	0001f87d 	.word	0x0001f87d
    e1a4:	0001f894 	.word	0x0001f894
    e1a8:	0001f8b5 	.word	0x0001f8b5
    e1ac:	e000ed28 	.word	0xe000ed28
    e1b0:	e000ed29 	.word	0xe000ed29
    e1b4:	e000ed2a 	.word	0xe000ed2a
    e1b8:	0001f8d4 	.word	0x0001f8d4
    e1bc:	0001f91f 	.word	0x0001f91f
    e1c0:	0001f90a 	.word	0x0001f90a
    e1c4:	0001f938 	.word	0x0001f938

0000e1c8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    e1c8:	4a02      	ldr	r2, [pc, #8]	; (e1d4 <z_arm_fault_init+0xc>)
    e1ca:	6953      	ldr	r3, [r2, #20]
    e1cc:	f043 0310 	orr.w	r3, r3, #16
    e1d0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    e1d2:	4770      	bx	lr
    e1d4:	e000ed00 	.word	0xe000ed00

0000e1d8 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    e1d8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    e1dc:	4905      	ldr	r1, [pc, #20]	; (e1f4 <sys_arch_reboot+0x1c>)
    e1de:	4b06      	ldr	r3, [pc, #24]	; (e1f8 <sys_arch_reboot+0x20>)
    e1e0:	68ca      	ldr	r2, [r1, #12]
    e1e2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    e1e6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    e1e8:	60cb      	str	r3, [r1, #12]
    e1ea:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    e1ee:	bf00      	nop
    e1f0:	e7fd      	b.n	e1ee <sys_arch_reboot+0x16>
    e1f2:	bf00      	nop
    e1f4:	e000ed00 	.word	0xe000ed00
    e1f8:	05fa0004 	.word	0x05fa0004

0000e1fc <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
    e1fc:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e1fe:	2120      	movs	r1, #32
    e200:	4803      	ldr	r0, [pc, #12]	; (e210 <z_arm_int_lib_init+0x14>)
    e202:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    e204:	3301      	adds	r3, #1
    e206:	2b41      	cmp	r3, #65	; 0x41
    e208:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    e20c:	d1f9      	bne.n	e202 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    e20e:	4770      	bx	lr
    e210:	e000e100 	.word	0xe000e100

0000e214 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    e214:	b538      	push	{r3, r4, r5, lr}
    e216:	4605      	mov	r5, r0
	__asm__ volatile(
    e218:	f04f 0320 	mov.w	r3, #32
    e21c:	f3ef 8411 	mrs	r4, BASEPRI
    e220:	f383 8811 	msr	BASEPRI, r3
    e224:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    e228:	f00c f954 	bl	1a4d4 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    e22c:	4b0a      	ldr	r3, [pc, #40]	; (e258 <z_impl_k_thread_abort+0x44>)
    e22e:	689b      	ldr	r3, [r3, #8]
    e230:	42ab      	cmp	r3, r5
    e232:	d10b      	bne.n	e24c <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    e234:	4b09      	ldr	r3, [pc, #36]	; (e25c <z_impl_k_thread_abort+0x48>)
    e236:	685a      	ldr	r2, [r3, #4]
    e238:	f3c2 0208 	ubfx	r2, r2, #0, #9
    e23c:	b912      	cbnz	r2, e244 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    e23e:	4620      	mov	r0, r4
    e240:	f7ff fb06 	bl	d850 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    e244:	685a      	ldr	r2, [r3, #4]
    e246:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    e24a:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    e24c:	4620      	mov	r0, r4
}
    e24e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    e252:	f00f bac1 	b.w	1d7d8 <z_reschedule_irqlock>
    e256:	bf00      	nop
    e258:	20021d60 	.word	0x20021d60
    e25c:	e000ed00 	.word	0xe000ed00

0000e260 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    e260:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    e262:	4b0e      	ldr	r3, [pc, #56]	; (e29c <z_arm_configure_static_mpu_regions+0x3c>)
{
    e264:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    e266:	9302      	str	r3, [sp, #8]
    e268:	4b0d      	ldr	r3, [pc, #52]	; (e2a0 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e26a:	4c0e      	ldr	r4, [pc, #56]	; (e2a4 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    e26c:	9303      	str	r3, [sp, #12]
    e26e:	4b0e      	ldr	r3, [pc, #56]	; (e2a8 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e270:	4a0e      	ldr	r2, [pc, #56]	; (e2ac <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    e272:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    e274:	ab02      	add	r3, sp, #8
    e276:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e278:	a801      	add	r0, sp, #4
    e27a:	4623      	mov	r3, r4
    e27c:	2101      	movs	r1, #1
    e27e:	f000 f951 	bl	e524 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    e282:	2300      	movs	r3, #0
    e284:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    e286:	4b0a      	ldr	r3, [pc, #40]	; (e2b0 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e288:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    e28a:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e28c:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    e28e:	9305      	str	r3, [sp, #20]
    e290:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e292:	f000 f951 	bl	e538 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    e296:	b008      	add	sp, #32
    e298:	bd10      	pop	{r4, pc}
    e29a:	bf00      	nop
    e29c:	20020000 	.word	0x20020000
    e2a0:	00000000 	.word	0x00000000
    e2a4:	20040000 	.word	0x20040000
    e2a8:	00010006 	.word	0x00010006
    e2ac:	20020000 	.word	0x20020000
    e2b0:	20020000 	.word	0x20020000

0000e2b4 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    e2b4:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e2b6:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    e2b8:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e2ba:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    e2be:	f004 031f 	and.w	r3, r4, #31
    e2c2:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e2c4:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e2c6:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e2c8:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    e2cc:	4904      	ldr	r1, [pc, #16]	; (e2e0 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e2ce:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    e2d2:	f043 0301 	orr.w	r3, r3, #1
    e2d6:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    e2d8:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    e2da:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    e2dc:	bd10      	pop	{r4, pc}
    e2de:	bf00      	nop
    e2e0:	e000ed90 	.word	0xe000ed90

0000e2e4 <region_allocate_and_init.part.0>:
#include <arm_mpu_v8_internal.h>
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const u8_t index,
    e2e4:	b508      	push	{r3, lr}
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e2e6:	f04f 0200 	mov.w	r2, #0
    e2ea:	2301      	movs	r3, #1
    e2ec:	4907      	ldr	r1, [pc, #28]	; (e30c <region_allocate_and_init.part.0+0x28>)
    e2ee:	f363 0207 	bfi	r2, r3, #0, #8
    e2f2:	4b07      	ldr	r3, [pc, #28]	; (e310 <region_allocate_and_init.part.0+0x2c>)
    e2f4:	1a5b      	subs	r3, r3, r1
    e2f6:	08db      	lsrs	r3, r3, #3
    e2f8:	4601      	mov	r1, r0
    e2fa:	f363 128f 	bfi	r2, r3, #6, #10
    e2fe:	4805      	ldr	r0, [pc, #20]	; (e314 <region_allocate_and_init.part.0+0x30>)
    e300:	f00d f9e4 	bl	1b6cc <log_1>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    e304:	f06f 0015 	mvn.w	r0, #21
    e308:	bd08      	pop	{r3, pc}
    e30a:	bf00      	nop
    e30c:	0001e02c 	.word	0x0001e02c
    e310:	0001e08c 	.word	0x0001e08c
    e314:	0001f995 	.word	0x0001f995

0000e318 <mpu_configure_regions_and_partition.constprop.2>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    e318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e31c:	4607      	mov	r7, r0
    e31e:	4688      	mov	r8, r1
    e320:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    e322:	2600      	movs	r6, #0
	MPU->RNR = index;
    e324:	4d5e      	ldr	r5, [pc, #376]	; (e4a0 <mpu_configure_regions_and_partition.constprop.2+0x188>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    e326:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    e328:	4546      	cmp	r6, r8
    e32a:	da3d      	bge.n	e3a8 <mpu_configure_regions_and_partition.constprop.2+0x90>
		if (regions[i]->size == 0U) {
    e32c:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
    e330:	f8d3 9004 	ldr.w	r9, [r3, #4]
    e334:	f1b9 0f00 	cmp.w	r9, #0
    e338:	d059      	beq.n	e3ee <mpu_configure_regions_and_partition.constprop.2+0xd6>
		&&
    e33a:	f1b9 0f1f 	cmp.w	r9, #31
    e33e:	d922      	bls.n	e386 <mpu_configure_regions_and_partition.constprop.2+0x6e>
		&&
    e340:	f019 0f1f 	tst.w	r9, #31
    e344:	d11f      	bne.n	e386 <mpu_configure_regions_and_partition.constprop.2+0x6e>
		((part->start &
    e346:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    e34a:	f01a 0f1f 	tst.w	sl, #31
    e34e:	d11a      	bne.n	e386 <mpu_configure_regions_and_partition.constprop.2+0x6e>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e350:	4650      	mov	r0, sl
    e352:	f00d fb42 	bl	1b9da <arm_cmse_mpu_region_get>
    e356:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e358:	eb09 000a 	add.w	r0, r9, sl
    e35c:	3801      	subs	r0, #1
    e35e:	f00d fb3c 	bl	1b9da <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e362:	4583      	cmp	fp, r0
    e364:	d024      	beq.n	e3b0 <mpu_configure_regions_and_partition.constprop.2+0x98>
	return -EINVAL;
    e366:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    e36a:	2301      	movs	r3, #1
    e36c:	f04f 0200 	mov.w	r2, #0
    e370:	494c      	ldr	r1, [pc, #304]	; (e4a4 <mpu_configure_regions_and_partition.constprop.2+0x18c>)
    e372:	f363 0207 	bfi	r2, r3, #0, #8
    e376:	4b4c      	ldr	r3, [pc, #304]	; (e4a8 <mpu_configure_regions_and_partition.constprop.2+0x190>)
    e378:	484c      	ldr	r0, [pc, #304]	; (e4ac <mpu_configure_regions_and_partition.constprop.2+0x194>)
    e37a:	1a5b      	subs	r3, r3, r1
    e37c:	08db      	lsrs	r3, r3, #3
    e37e:	f363 128f 	bfi	r2, r3, #6, #10
    e382:	4659      	mov	r1, fp
    e384:	e00c      	b.n	e3a0 <mpu_configure_regions_and_partition.constprop.2+0x88>
			LOG_ERR("Partition %u: sanity check failed.", i);
    e386:	2301      	movs	r3, #1
    e388:	f04f 0200 	mov.w	r2, #0
    e38c:	4945      	ldr	r1, [pc, #276]	; (e4a4 <mpu_configure_regions_and_partition.constprop.2+0x18c>)
    e38e:	f363 0207 	bfi	r2, r3, #0, #8
    e392:	4b45      	ldr	r3, [pc, #276]	; (e4a8 <mpu_configure_regions_and_partition.constprop.2+0x190>)
    e394:	4846      	ldr	r0, [pc, #280]	; (e4b0 <mpu_configure_regions_and_partition.constprop.2+0x198>)
    e396:	1a5b      	subs	r3, r3, r1
    e398:	4631      	mov	r1, r6
    e39a:	08db      	lsrs	r3, r3, #3
    e39c:	f363 128f 	bfi	r2, r3, #6, #10
			LOG_ERR("Invalid underlying region index %u",
    e3a0:	f00d f994 	bl	1b6cc <log_1>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    e3a4:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    e3a8:	4620      	mov	r0, r4
    e3aa:	b005      	add	sp, #20
    e3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    e3b0:	f11b 0f16 	cmn.w	fp, #22
    e3b4:	d0d9      	beq.n	e36a <mpu_configure_regions_and_partition.constprop.2+0x52>
			(u_reg_index > (reg_index - 1))) {
    e3b6:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    e3b8:	455b      	cmp	r3, fp
    e3ba:	dbd6      	blt.n	e36a <mpu_configure_regions_and_partition.constprop.2+0x52>
	MPU->RNR = index;
    e3bc:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e3c0:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
    e3c2:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e3c6:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e3c8:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e3cc:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e3d0:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e3d4:	e9d1 3200 	ldrd	r3, r2, [r1]
    e3d8:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    e3da:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e3dc:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
    e3e0:	d118      	bne.n	e414 <mpu_configure_regions_and_partition.constprop.2+0xfc>
    e3e2:	45ca      	cmp	sl, r9
    e3e4:	d105      	bne.n	e3f2 <mpu_configure_regions_and_partition.constprop.2+0xda>
			mpu_configure_region(u_reg_index, regions[i]);
    e3e6:	fa5f f08b 	uxtb.w	r0, fp
    e3ea:	f00d fad3 	bl	1b994 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    e3ee:	3601      	adds	r6, #1
    e3f0:	e79a      	b.n	e328 <mpu_configure_regions_and_partition.constprop.2+0x10>
	MPU->RNR = index;
    e3f2:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e3f6:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    e3f8:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e3fc:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    e400:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e402:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    e404:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    e406:	f00d fac5 	bl	1b994 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e40a:	f110 0f16 	cmn.w	r0, #22
    e40e:	d0c9      	beq.n	e3a4 <mpu_configure_regions_and_partition.constprop.2+0x8c>
			reg_index++;
    e410:	1c44      	adds	r4, r0, #1
    e412:	e7ec      	b.n	e3ee <mpu_configure_regions_and_partition.constprop.2+0xd6>
	MPU->RNR = index;
    e414:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e418:	692a      	ldr	r2, [r5, #16]
    e41a:	3b01      	subs	r3, #1
    e41c:	f023 031f 	bic.w	r3, r3, #31
    e420:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e424:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    e426:	45ca      	cmp	sl, r9
    e428:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e42a:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    e42c:	d0eb      	beq.n	e406 <mpu_configure_regions_and_partition.constprop.2+0xee>
				mpu_configure_region(reg_index, regions[i]);
    e42e:	f00d fab1 	bl	1b994 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e432:	f110 0f16 	cmn.w	r0, #22
    e436:	d0b5      	beq.n	e3a4 <mpu_configure_regions_and_partition.constprop.2+0x8c>
	MPU->RNR = index;
    e438:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    e43c:	68ea      	ldr	r2, [r5, #12]
    e43e:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    e442:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
    e446:	f362 0304 	bfi	r3, r2, #0, #5
    e44a:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e44e:	692b      	ldr	r3, [r5, #16]
    e450:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e454:	085b      	lsrs	r3, r3, #1
    e456:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
    e45a:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e45e:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    e462:	e9d3 1300 	ldrd	r1, r3, [r3]
    e466:	440b      	add	r3, r1
    e468:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    e46a:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    e46e:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
    e470:	4453      	add	r3, sl
    e472:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
    e476:	b2e4      	uxtb	r4, r4
			REGION_LIMIT_ADDR((regions[i]->start +
    e478:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    e47c:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
    e47e:	9303      	str	r3, [sp, #12]
    e480:	d908      	bls.n	e494 <mpu_configure_regions_and_partition.constprop.2+0x17c>
    e482:	4620      	mov	r0, r4
    e484:	f7ff ff2e 	bl	e2e4 <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
    e488:	f110 0f16 	cmn.w	r0, #22
    e48c:	4604      	mov	r4, r0
    e48e:	d089      	beq.n	e3a4 <mpu_configure_regions_and_partition.constprop.2+0x8c>
			reg_index++;
    e490:	3401      	adds	r4, #1
    e492:	e7ac      	b.n	e3ee <mpu_configure_regions_and_partition.constprop.2+0xd6>
	region_init(index, region_conf);
    e494:	4669      	mov	r1, sp
    e496:	4620      	mov	r0, r4
    e498:	f7ff ff0c 	bl	e2b4 <region_init>
			if (reg_index == -EINVAL) {
    e49c:	e7f8      	b.n	e490 <mpu_configure_regions_and_partition.constprop.2+0x178>
    e49e:	bf00      	nop
    e4a0:	e000ed90 	.word	0xe000ed90
    e4a4:	0001e02c 	.word	0x0001e02c
    e4a8:	0001e08c 	.word	0x0001e08c
    e4ac:	0001f972 	.word	0x0001f972
    e4b0:	0001f94f 	.word	0x0001f94f

0000e4b4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    e4b4:	2205      	movs	r2, #5
    e4b6:	4b03      	ldr	r3, [pc, #12]	; (e4c4 <arm_core_mpu_enable+0x10>)
    e4b8:	605a      	str	r2, [r3, #4]
    e4ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e4be:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    e4c2:	4770      	bx	lr
    e4c4:	e000ed90 	.word	0xe000ed90

0000e4c8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    e4c8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    e4cc:	2200      	movs	r2, #0
    e4ce:	4b01      	ldr	r3, [pc, #4]	; (e4d4 <arm_core_mpu_disable+0xc>)
    e4d0:	605a      	str	r2, [r3, #4]
}
    e4d2:	4770      	bx	lr
    e4d4:	e000ed90 	.word	0xe000ed90

0000e4d8 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    e4d8:	b570      	push	{r4, r5, r6, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    e4da:	4d0e      	ldr	r5, [pc, #56]	; (e514 <arm_mpu_init+0x3c>)
    e4dc:	682e      	ldr	r6, [r5, #0]
    e4de:	2e10      	cmp	r6, #16
    e4e0:	d815      	bhi.n	e50e <arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e4e2:	2400      	movs	r4, #0
	arm_core_mpu_disable();
    e4e4:	f7ff fff0 	bl	e4c8 <arm_core_mpu_disable>
	MPU->MAIR0 =
    e4e8:	4b0b      	ldr	r3, [pc, #44]	; (e518 <arm_mpu_init+0x40>)
    e4ea:	4a0c      	ldr	r2, [pc, #48]	; (e51c <arm_mpu_init+0x44>)
    e4ec:	631a      	str	r2, [r3, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e4ee:	42a6      	cmp	r6, r4
    e4f0:	d105      	bne.n	e4fe <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    e4f2:	4b0b      	ldr	r3, [pc, #44]	; (e520 <arm_mpu_init+0x48>)
    e4f4:	701e      	strb	r6, [r3, #0]


	arm_core_mpu_enable();
    e4f6:	f7ff ffdd 	bl	e4b4 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    e4fa:	2000      	movs	r0, #0
}
    e4fc:	bd70      	pop	{r4, r5, r6, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    e4fe:	6869      	ldr	r1, [r5, #4]
    e500:	4620      	mov	r0, r4
    e502:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    e506:	f7ff fed5 	bl	e2b4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e50a:	3401      	adds	r4, #1
    e50c:	e7ef      	b.n	e4ee <arm_mpu_init+0x16>
		return -1;
    e50e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e512:	e7f3      	b.n	e4fc <arm_mpu_init+0x24>
    e514:	0001e100 	.word	0x0001e100
    e518:	e000ed90 	.word	0xe000ed90
    e51c:	0044ffaa 	.word	0x0044ffaa
    e520:	2002206e 	.word	0x2002206e

0000e524 <arm_core_mpu_configure_static_mpu_regions>:
{
    e524:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    e526:	4c03      	ldr	r4, [pc, #12]	; (e534 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    e528:	7822      	ldrb	r2, [r4, #0]
    e52a:	f7ff fef5 	bl	e318 <mpu_configure_regions_and_partition.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    e52e:	7020      	strb	r0, [r4, #0]
}
    e530:	bd10      	pop	{r4, pc}
    e532:	bf00      	nop
    e534:	2002206e 	.word	0x2002206e

0000e538 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    e538:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e53c:	4c25      	ldr	r4, [pc, #148]	; (e5d4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>)
    e53e:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e540:	4680      	mov	r8, r0
    e542:	2700      	movs	r7, #0
    e544:	46a1      	mov	r9, r4
	attr->rbar = MPU->RBAR &
    e546:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
    e54a:	4d23      	ldr	r5, [pc, #140]	; (e5d8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e54c:	4557      	cmp	r7, sl
    e54e:	da1a      	bge.n	e586 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    e550:	f8d8 3004 	ldr.w	r3, [r8, #4]
    e554:	9301      	str	r3, [sp, #4]
    e556:	2b00      	cmp	r3, #0
    e558:	d036      	beq.n	e5c8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    e55a:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e55e:	4608      	mov	r0, r1
    e560:	9100      	str	r1, [sp, #0]
    e562:	f00d fa3a 	bl	1b9da <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e566:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e56a:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e56c:	1858      	adds	r0, r3, r1
    e56e:	3801      	subs	r0, #1
    e570:	f00d fa33 	bl	1b9da <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e574:	4286      	cmp	r6, r0
    e576:	4a19      	ldr	r2, [pc, #100]	; (e5dc <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
    e578:	d008      	beq.n	e58c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    e57a:	2314      	movs	r3, #20
    e57c:	435f      	muls	r7, r3
    e57e:	f06f 0315 	mvn.w	r3, #21
    e582:	f849 3007 	str.w	r3, [r9, r7]
}
    e586:	b003      	add	sp, #12
    e588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    e58c:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
    e590:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    e592:	d0f8      	beq.n	e586 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    e594:	7813      	ldrb	r3, [r2, #0]
    e596:	42b3      	cmp	r3, r6
    e598:	ddf5      	ble.n	e586 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    e59a:	fb0b 9307 	mla	r3, fp, r7, r9
	MPU->RNR = index;
    e59e:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
    e5a0:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
    e5a2:	68e8      	ldr	r0, [r5, #12]
    e5a4:	7b19      	ldrb	r1, [r3, #12]
    e5a6:	f360 0104 	bfi	r1, r0, #0, #5
    e5aa:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e5ac:	6929      	ldr	r1, [r5, #16]
    e5ae:	7b18      	ldrb	r0, [r3, #12]
    e5b0:	0849      	lsrs	r1, r1, #1
    e5b2:	f361 1047 	bfi	r0, r1, #5, #3
    e5b6:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    e5b8:	68eb      	ldr	r3, [r5, #12]
    e5ba:	f023 031f 	bic.w	r3, r3, #31
    e5be:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    e5c0:	692b      	ldr	r3, [r5, #16]
    e5c2:	f023 031f 	bic.w	r3, r3, #31
    e5c6:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e5c8:	3701      	adds	r7, #1
    e5ca:	3414      	adds	r4, #20
    e5cc:	f108 080c 	add.w	r8, r8, #12
    e5d0:	e7bc      	b.n	e54c <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
    e5d2:	bf00      	nop
    e5d4:	20020af8 	.word	0x20020af8
    e5d8:	e000ed90 	.word	0xe000ed90
    e5dc:	2002206e 	.word	0x2002206e

0000e5e0 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    e5e0:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
    e5e2:	4b0c      	ldr	r3, [pc, #48]	; (e614 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    e5e4:	460e      	mov	r6, r1
    e5e6:	781c      	ldrb	r4, [r3, #0]
    e5e8:	4605      	mov	r5, r0
    e5ea:	4623      	mov	r3, r4
  mpu->RLAR = 0U;
    e5ec:	2100      	movs	r1, #0
  mpu->RNR = rnr;
    e5ee:	4a0a      	ldr	r2, [pc, #40]	; (e618 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    e5f0:	2b0f      	cmp	r3, #15
    e5f2:	dd0b      	ble.n	e60c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>
#if defined(CONFIG_MPU_GAP_FILLING)
	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
    e5f4:	4909      	ldr	r1, [pc, #36]	; (e61c <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    e5f6:	f851 0b04 	ldr.w	r0, [r1], #4
    e5fa:	f7ff fe5b 	bl	e2b4 <region_init>

	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */
	mpu_reg_index = mpu_configure_regions_and_partition(dynamic_regions,
    e5fe:	4622      	mov	r2, r4
    e600:	4631      	mov	r1, r6
    e602:	4628      	mov	r0, r5
}
    e604:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e608:	f7ff be86 	b.w	e318 <mpu_configure_regions_and_partition.constprop.2>
    e60c:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    e60e:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    e610:	3301      	adds	r3, #1
    e612:	e7ed      	b.n	e5f0 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
    e614:	2002206e 	.word	0x2002206e
    e618:	e000ed90 	.word	0xe000ed90
    e61c:	20020af8 	.word	0x20020af8

0000e620 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
    e620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e624:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
    e626:	2300      	movs	r3, #0
{
    e628:	b0a3      	sub	sp, #140	; 0x8c
    e62a:	e9cd 0102 	strd	r0, r1, [sp, #8]
	count = 0;
    e62e:	9301      	str	r3, [sp, #4]

	while ((c = *format++)) {
    e630:	4613      	mov	r3, r2
    e632:	f813 0b01 	ldrb.w	r0, [r3], #1
    e636:	9308      	str	r3, [sp, #32]
    e638:	b158      	cbz	r0, e652 <z_prf+0x32>
		if (c != '%') {
    e63a:	2825      	cmp	r0, #37	; 0x25
    e63c:	f000 8085 	beq.w	e74a <z_prf+0x12a>
			PUTC(c);
    e640:	9903      	ldr	r1, [sp, #12]
    e642:	9b02      	ldr	r3, [sp, #8]
    e644:	4798      	blx	r3
    e646:	3001      	adds	r0, #1
    e648:	f040 841a 	bne.w	ee80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x420>
    e64c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e650:	9301      	str	r3, [sp, #4]
		}
	}
	return count;

#undef PUTC
}
    e652:	9801      	ldr	r0, [sp, #4]
    e654:	b023      	add	sp, #140	; 0x8c
    e656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
    e65a:	2c23      	cmp	r4, #35	; 0x23
    e65c:	d06c      	beq.n	e738 <z_prf+0x118>
    e65e:	d861      	bhi.n	e724 <z_prf+0x104>
    e660:	2c00      	cmp	r4, #0
    e662:	d0f6      	beq.n	e652 <z_prf+0x32>
					fspace = true;
    e664:	2c20      	cmp	r4, #32
    e666:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e668:	bf08      	it	eq
    e66a:	2301      	moveq	r3, #1
    e66c:	930e      	str	r3, [sp, #56]	; 0x38
					fminus = true;
    e66e:	f8cd 8020 	str.w	r8, [sp, #32]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    e672:	f8dd 8020 	ldr.w	r8, [sp, #32]
    e676:	48b7      	ldr	r0, [pc, #732]	; (e954 <z_prf+0x334>)
    e678:	f818 4b01 	ldrb.w	r4, [r8], #1
    e67c:	4621      	mov	r1, r4
    e67e:	f00d fb04 	bl	1bc8a <strchr>
    e682:	2800      	cmp	r0, #0
    e684:	d1e9      	bne.n	e65a <z_prf+0x3a>
			if (c == '*') {
    e686:	2c2a      	cmp	r4, #42	; 0x2a
    e688:	d166      	bne.n	e758 <z_prf+0x138>
				width = va_arg(vargs, int);
    e68a:	f856 3b04 	ldr.w	r3, [r6], #4
				c = *format++;
    e68e:	f898 4000 	ldrb.w	r4, [r8]
				if (width < 0) {
    e692:	2b00      	cmp	r3, #0
				width = va_arg(vargs, int);
    e694:	9309      	str	r3, [sp, #36]	; 0x24
					width = -width;
    e696:	bfbf      	itttt	lt
    e698:	425b      	neglt	r3, r3
    e69a:	9309      	strlt	r3, [sp, #36]	; 0x24
					fminus = true;
    e69c:	2301      	movlt	r3, #1
    e69e:	930f      	strlt	r3, [sp, #60]	; 0x3c
				c = *format++;
    e6a0:	9b08      	ldr	r3, [sp, #32]
    e6a2:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
    e6a6:	2c2e      	cmp	r4, #46	; 0x2e
    e6a8:	d17b      	bne.n	e7a2 <z_prf+0x182>
				if (c == '*') {
    e6aa:	f898 3000 	ldrb.w	r3, [r8]
    e6ae:	2b2a      	cmp	r3, #42	; 0x2a
    e6b0:	d174      	bne.n	e79c <z_prf+0x17c>
					precision = va_arg(vargs, int);
    e6b2:	f856 5b04 	ldr.w	r5, [r6], #4
				c = *format++;
    e6b6:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
    e6ba:	f818 4b01 	ldrb.w	r4, [r8], #1
			if (strchr("hlz", c) != NULL) {
    e6be:	4621      	mov	r1, r4
    e6c0:	48a5      	ldr	r0, [pc, #660]	; (e958 <z_prf+0x338>)
    e6c2:	4627      	mov	r7, r4
    e6c4:	f00d fae1 	bl	1bc8a <strchr>
    e6c8:	2800      	cmp	r0, #0
    e6ca:	d06d      	beq.n	e7a8 <z_prf+0x188>
				c = *format++;
    e6cc:	4643      	mov	r3, r8
    e6ce:	f813 4b01 	ldrb.w	r4, [r3], #1
				} else if (i == 'h' && c == 'h') {
    e6d2:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
    e6d4:	9308      	str	r3, [sp, #32]
				} else if (i == 'h' && c == 'h') {
    e6d6:	d107      	bne.n	e6e8 <z_prf+0xc8>
    e6d8:	2c68      	cmp	r4, #104	; 0x68
    e6da:	d105      	bne.n	e6e8 <z_prf+0xc8>
					i = 'H';
    e6dc:	2748      	movs	r7, #72	; 0x48
					c = *format++;
    e6de:	f108 0302 	add.w	r3, r8, #2
    e6e2:	f898 4001 	ldrb.w	r4, [r8, #1]
    e6e6:	9308      	str	r3, [sp, #32]
			switch (c) {
    e6e8:	2c67      	cmp	r4, #103	; 0x67
    e6ea:	d87b      	bhi.n	e7e4 <z_prf+0x1c4>
    e6ec:	2c65      	cmp	r4, #101	; 0x65
    e6ee:	f080 8135 	bcs.w	e95c <z_prf+0x33c>
    e6f2:	2c47      	cmp	r4, #71	; 0x47
    e6f4:	d85c      	bhi.n	e7b0 <z_prf+0x190>
    e6f6:	2c45      	cmp	r4, #69	; 0x45
    e6f8:	f080 8130 	bcs.w	e95c <z_prf+0x33c>
    e6fc:	2c00      	cmp	r4, #0
    e6fe:	d0a8      	beq.n	e652 <z_prf+0x32>
    e700:	2c25      	cmp	r4, #37	; 0x25
    e702:	f000 83b9 	beq.w	ee78 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x418>
				PUTC('%');
    e706:	9903      	ldr	r1, [sp, #12]
    e708:	2025      	movs	r0, #37	; 0x25
    e70a:	9b02      	ldr	r3, [sp, #8]
    e70c:	4798      	blx	r3
    e70e:	3001      	adds	r0, #1
    e710:	d09c      	beq.n	e64c <z_prf+0x2c>
				PUTC(c);
    e712:	9903      	ldr	r1, [sp, #12]
    e714:	4620      	mov	r0, r4
    e716:	9b02      	ldr	r3, [sp, #8]
    e718:	4798      	blx	r3
    e71a:	3001      	adds	r0, #1
    e71c:	d096      	beq.n	e64c <z_prf+0x2c>
				count += 2;
    e71e:	9b01      	ldr	r3, [sp, #4]
    e720:	3302      	adds	r3, #2
    e722:	e3af      	b.n	ee84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x424>
				switch (c) {
    e724:	2c2d      	cmp	r4, #45	; 0x2d
    e726:	d00a      	beq.n	e73e <z_prf+0x11e>
    e728:	2c30      	cmp	r4, #48	; 0x30
    e72a:	d00b      	beq.n	e744 <z_prf+0x124>
					fplus = true;
    e72c:	2c2b      	cmp	r4, #43	; 0x2b
    e72e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e730:	bf08      	it	eq
    e732:	2301      	moveq	r3, #1
    e734:	930b      	str	r3, [sp, #44]	; 0x2c
    e736:	e79a      	b.n	e66e <z_prf+0x4e>
					falt = true;
    e738:	f04f 0b01 	mov.w	fp, #1
    e73c:	e797      	b.n	e66e <z_prf+0x4e>
					fminus = true;
    e73e:	2301      	movs	r3, #1
    e740:	930f      	str	r3, [sp, #60]	; 0x3c
    e742:	e794      	b.n	e66e <z_prf+0x4e>
					fzero = true;
    e744:	2301      	movs	r3, #1
    e746:	930a      	str	r3, [sp, #40]	; 0x28
    e748:	e791      	b.n	e66e <z_prf+0x4e>
			fminus = fplus = fspace = falt = fzero = false;
    e74a:	2300      	movs	r3, #0
    e74c:	930a      	str	r3, [sp, #40]	; 0x28
    e74e:	930e      	str	r3, [sp, #56]	; 0x38
    e750:	930b      	str	r3, [sp, #44]	; 0x2c
    e752:	930f      	str	r3, [sp, #60]	; 0x3c
    e754:	469b      	mov	fp, r3
    e756:	e78c      	b.n	e672 <z_prf+0x52>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    e758:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
    e75c:	2b09      	cmp	r3, #9
				width = 0;
    e75e:	9009      	str	r0, [sp, #36]	; 0x24
			} else if (!isdigit(c)) {
    e760:	d8a1      	bhi.n	e6a6 <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    e762:	220a      	movs	r2, #10
	while (isdigit(*p)) {
    e764:	f8dd 8020 	ldr.w	r8, [sp, #32]
    e768:	f818 4b01 	ldrb.w	r4, [r8], #1
    e76c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    e770:	2b09      	cmp	r3, #9
    e772:	d898      	bhi.n	e6a6 <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    e774:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e776:	fb02 4403 	mla	r4, r2, r3, r4
    e77a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    e77e:	e9cd 8308 	strd	r8, r3, [sp, #32]
    e782:	e7ef      	b.n	e764 <z_prf+0x144>
    e784:	4690      	mov	r8, r2
    e786:	fb01 3505 	mla	r5, r1, r5, r3
    e78a:	3d30      	subs	r5, #48	; 0x30
	while (isdigit(*p)) {
    e78c:	4642      	mov	r2, r8
    e78e:	f812 3b01 	ldrb.w	r3, [r2], #1
    e792:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    e796:	2809      	cmp	r0, #9
    e798:	d9f4      	bls.n	e784 <z_prf+0x164>
    e79a:	e78e      	b.n	e6ba <z_prf+0x9a>
	int i = 0;
    e79c:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
    e79e:	210a      	movs	r1, #10
    e7a0:	e7f4      	b.n	e78c <z_prf+0x16c>
			precision = -1;
    e7a2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    e7a6:	e78a      	b.n	e6be <z_prf+0x9e>
    e7a8:	f8cd 8020 	str.w	r8, [sp, #32]
			i = 0;
    e7ac:	4607      	mov	r7, r0
    e7ae:	e79b      	b.n	e6e8 <z_prf+0xc8>
			switch (c) {
    e7b0:	2c63      	cmp	r4, #99	; 0x63
    e7b2:	d059      	beq.n	e868 <z_prf+0x248>
    e7b4:	d820      	bhi.n	e7f8 <z_prf+0x1d8>
    e7b6:	2c58      	cmp	r4, #88	; 0x58
    e7b8:	d1a5      	bne.n	e706 <z_prf+0xe6>
				if (c == 'o') {
    e7ba:	2c6f      	cmp	r4, #111	; 0x6f
    e7bc:	f106 0904 	add.w	r9, r6, #4
    e7c0:	6831      	ldr	r1, [r6, #0]
    e7c2:	f040 8328 	bne.w	ee16 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3b6>
	if (alt_form) {
    e7c6:	f1bb 0f00 	cmp.w	fp, #0
    e7ca:	f000 8317 	beq.w	edfc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x39c>
		*buf++ = '0';
    e7ce:	2330      	movs	r3, #48	; 0x30
    e7d0:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		if (!value) {
    e7d4:	2900      	cmp	r1, #0
    e7d6:	f040 831b 	bne.w	ee10 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3b0>
			*buf++ = 0;
    e7da:	f88d 106d 	strb.w	r1, [sp, #109]	; 0x6d
			prefix = 0;
    e7de:	460f      	mov	r7, r1
			return 1;
    e7e0:	2601      	movs	r6, #1
    e7e2:	e025      	b.n	e830 <z_prf+0x210>
			switch (c) {
    e7e4:	2c70      	cmp	r4, #112	; 0x70
    e7e6:	f000 82f5 	beq.w	edd4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x374>
    e7ea:	d827      	bhi.n	e83c <z_prf+0x21c>
    e7ec:	2c6e      	cmp	r4, #110	; 0x6e
    e7ee:	f000 82de 	beq.w	edae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x34e>
    e7f2:	d8e2      	bhi.n	e7ba <z_prf+0x19a>
    e7f4:	2c69      	cmp	r4, #105	; 0x69
    e7f6:	d186      	bne.n	e706 <z_prf+0xe6>
				switch (i) {
    e7f8:	6837      	ldr	r7, [r6, #0]
    e7fa:	f106 0904 	add.w	r9, r6, #4
	if (value < 0) {
    e7fe:	2f00      	cmp	r7, #0
    e800:	f280 809a 	bge.w	e938 <z_prf+0x318>
		*buf++ = '-';
    e804:	232d      	movs	r3, #45	; 0x2d
		value = -value;
    e806:	4279      	negs	r1, r7
		*buf++ = '-';
    e808:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		*buf++ = ' ';
    e80c:	f10d 066d 	add.w	r6, sp, #109	; 0x6d
	return _to_x(buf, value, 10);
    e810:	4630      	mov	r0, r6
    e812:	220a      	movs	r2, #10
    e814:	f00d fac5 	bl	1bda2 <_to_x>
				if (fplus || fspace || val < 0) {
    e818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	return (buf + _to_udec(buf, value)) - start;
    e81a:	4406      	add	r6, r0
    e81c:	a81b      	add	r0, sp, #108	; 0x6c
    e81e:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
    e820:	2b00      	cmp	r3, #0
    e822:	f040 8332 	bne.w	ee8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x42a>
    e826:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e828:	2b00      	cmp	r3, #0
    e82a:	f040 832e 	bne.w	ee8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x42a>
    e82e:	0fff      	lsrs	r7, r7, #31
			if (precision >= 0) {
    e830:	2d00      	cmp	r5, #0
    e832:	da21      	bge.n	e878 <z_prf+0x258>
			zero.predot = zero.postdot = zero.trail = 0;
    e834:	2500      	movs	r5, #0
    e836:	46ab      	mov	fp, r5
    e838:	46a8      	mov	r8, r5
    e83a:	e0e1      	b.n	ea00 <z_prf+0x3e0>
			switch (c) {
    e83c:	2c75      	cmp	r4, #117	; 0x75
    e83e:	d0bc      	beq.n	e7ba <z_prf+0x19a>
    e840:	2c78      	cmp	r4, #120	; 0x78
    e842:	d0ba      	beq.n	e7ba <z_prf+0x19a>
    e844:	2c73      	cmp	r4, #115	; 0x73
    e846:	f47f af5e 	bne.w	e706 <z_prf+0xe6>
				cptr = va_arg(vargs, char *);
    e84a:	46b1      	mov	r9, r6
					precision = INT_MAX;
    e84c:	2d00      	cmp	r5, #0
    e84e:	bfb8      	it	lt
    e850:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
    e854:	2600      	movs	r6, #0
				cptr = va_arg(vargs, char *);
    e856:	f859 3b04 	ldr.w	r3, [r9], #4
				for (clen = 0; clen < precision; clen++) {
    e85a:	42b5      	cmp	r5, r6
    e85c:	f040 82c9 	bne.w	edf2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x392>
    e860:	462e      	mov	r6, r5
    e862:	2500      	movs	r5, #0
    e864:	462f      	mov	r7, r5
    e866:	e008      	b.n	e87a <z_prf+0x25a>
				break;
    e868:	2700      	movs	r7, #0
				buf[0] = va_arg(vargs, int);
    e86a:	46b1      	mov	r9, r6
				break;
    e86c:	463d      	mov	r5, r7
				clen = 1;
    e86e:	2601      	movs	r6, #1
				buf[0] = va_arg(vargs, int);
    e870:	f859 3b04 	ldr.w	r3, [r9], #4
    e874:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
				break;
    e878:	ab1b      	add	r3, sp, #108	; 0x6c
				zero_head = precision - clen + prefix;
    e87a:	19ea      	adds	r2, r5, r7
			zero.predot = zero.postdot = zero.trail = 0;
    e87c:	2500      	movs	r5, #0
    e87e:	46ab      	mov	fp, r5
    e880:	46a8      	mov	r8, r5
				zero_head = precision - clen + prefix;
    e882:	1b92      	subs	r2, r2, r6
			if (zero_head < 0) {
    e884:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			width -= clen + zero_head;
    e888:	1991      	adds	r1, r2, r6
    e88a:	9106      	str	r1, [sp, #24]
    e88c:	9909      	ldr	r1, [sp, #36]	; 0x24
    e88e:	1990      	adds	r0, r2, r6
    e890:	1a0c      	subs	r4, r1, r0
			if (!fminus && width > 0) {
    e892:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e894:	b911      	cbnz	r1, e89c <z_prf+0x27c>
    e896:	2c00      	cmp	r4, #0
    e898:	f300 8314 	bgt.w	eec4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x464>
			while (prefix-- > 0) {
    e89c:	eb03 0a07 	add.w	sl, r3, r7
    e8a0:	4553      	cmp	r3, sl
    e8a2:	f040 8313 	bne.w	eecc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x46c>
			while (zero_head-- > 0) {
    e8a6:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    e8aa:	f080 831d 	bcs.w	eee8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x488>
			clen -= prefix;
    e8ae:	1bf6      	subs	r6, r6, r7
			if (zero.predot) {
    e8b0:	f1b8 0f00 	cmp.w	r8, #0
    e8b4:	d011      	beq.n	e8da <z_prf+0x2ba>
				c = *cptr;
    e8b6:	f89a 0000 	ldrb.w	r0, [sl]
				while (isdigit(c)) {
    e8ba:	eb0a 0706 	add.w	r7, sl, r6
    e8be:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    e8c2:	2b09      	cmp	r3, #9
    e8c4:	eba7 060a 	sub.w	r6, r7, sl
    e8c8:	f240 8319 	bls.w	eefe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x49e>
    e8cc:	4647      	mov	r7, r8
				while (zero.predot-- > 0) {
    e8ce:	f117 37ff 	adds.w	r7, r7, #4294967295	; 0xffffffff
    e8d2:	f080 831d 	bcs.w	ef10 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4b0>
				clen -= zero.predot;
    e8d6:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.postdot) {
    e8da:	f1bb 0f00 	cmp.w	fp, #0
    e8de:	d015      	beq.n	e90c <z_prf+0x2ec>
    e8e0:	eb0a 0706 	add.w	r7, sl, r6
					c = *cptr++;
    e8e4:	f81a 8b01 	ldrb.w	r8, [sl], #1
					PUTC(c);
    e8e8:	9903      	ldr	r1, [sp, #12]
    e8ea:	4640      	mov	r0, r8
    e8ec:	9b02      	ldr	r3, [sp, #8]
    e8ee:	4798      	blx	r3
    e8f0:	3001      	adds	r0, #1
    e8f2:	f43f aeab 	beq.w	e64c <z_prf+0x2c>
				} while (c != '.');
    e8f6:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
    e8fa:	eba7 060a 	sub.w	r6, r7, sl
    e8fe:	d1f1      	bne.n	e8e4 <z_prf+0x2c4>
				while (zero.postdot-- > 0) {
    e900:	465f      	mov	r7, fp
    e902:	2f00      	cmp	r7, #0
    e904:	f300 830d 	bgt.w	ef22 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4c2>
				clen -= zero.postdot;
    e908:	eba6 060b 	sub.w	r6, r6, fp
			if (zero.trail) {
    e90c:	b195      	cbz	r5, e934 <z_prf+0x314>
				c = *cptr;
    e90e:	f89a 0000 	ldrb.w	r0, [sl]
				while (isdigit(c) || c == '.') {
    e912:	eb0a 0706 	add.w	r7, sl, r6
    e916:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    e91a:	2b09      	cmp	r3, #9
    e91c:	eba7 060a 	sub.w	r6, r7, sl
    e920:	f240 830a 	bls.w	ef38 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4d8>
    e924:	282e      	cmp	r0, #46	; 0x2e
    e926:	f000 8307 	beq.w	ef38 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4d8>
				while (zero.trail-- > 0) {
    e92a:	462f      	mov	r7, r5
    e92c:	2f00      	cmp	r7, #0
    e92e:	f300 830c 	bgt.w	ef4a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4ea>
				clen -= zero.trail;
    e932:	1b76      	subs	r6, r6, r5
    e934:	4456      	add	r6, sl
    e936:	e31b      	b.n	ef70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x510>
	} else if (fplus) {
    e938:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e93a:	b123      	cbz	r3, e946 <z_prf+0x326>
		*buf++ = '+';
    e93c:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    e93e:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    e942:	4639      	mov	r1, r7
    e944:	e762      	b.n	e80c <z_prf+0x1ec>
	} else if (fspace) {
    e946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e948:	b10b      	cbz	r3, e94e <z_prf+0x32e>
		*buf++ = ' ';
    e94a:	2320      	movs	r3, #32
    e94c:	e7f7      	b.n	e93e <z_prf+0x31e>
	} else if (fspace) {
    e94e:	4639      	mov	r1, r7
    e950:	ae1b      	add	r6, sp, #108	; 0x6c
    e952:	e75d      	b.n	e810 <z_prf+0x1f0>
    e954:	0001f9bb 	.word	0x0001f9bb
    e958:	0001f9c1 	.word	0x0001f9c1
				u.d = va_arg(vargs, double);
    e95c:	f106 0907 	add.w	r9, r6, #7
    e960:	f029 0907 	bic.w	r9, r9, #7
    e964:	e8f9 2302 	ldrd	r2, r3, [r9], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
    e968:	02d8      	lsls	r0, r3, #11
    e96a:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
    e96e:	02d6      	lsls	r6, r2, #11
    e970:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
	if (sign) {
    e974:	2a00      	cmp	r2, #0
	exp = double_temp >> 52 & 0x7ff;
    e976:	f3c3 510a 	ubfx	r1, r3, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
    e97a:	9604      	str	r6, [sp, #16]
    e97c:	9005      	str	r0, [sp, #20]
	if (sign) {
    e97e:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
    e982:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    e986:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
	if (sign) {
    e98a:	da41      	bge.n	ea10 <z_prf+0x3f0>
		*buf++ = '-';
    e98c:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    e98e:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    e992:	f10d 076d 	add.w	r7, sp, #109	; 0x6d
	if (exp == 0x7ff) {
    e996:	f240 73ff 	movw	r3, #2047	; 0x7ff
    e99a:	4299      	cmp	r1, r3
    e99c:	d153      	bne.n	ea46 <z_prf+0x426>
		if (!fract) {
    e99e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    e9a2:	430a      	orrs	r2, r1
    e9a4:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
    e9a8:	f107 0303 	add.w	r3, r7, #3
    e9ac:	d140      	bne.n	ea30 <z_prf+0x410>
			if (isupper(c)) {
    e9ae:	2c19      	cmp	r4, #25
    e9b0:	d838      	bhi.n	ea24 <z_prf+0x404>
				*buf++ = 'I';
    e9b2:	2249      	movs	r2, #73	; 0x49
    e9b4:	703a      	strb	r2, [r7, #0]
				*buf++ = 'N';
    e9b6:	224e      	movs	r2, #78	; 0x4e
    e9b8:	707a      	strb	r2, [r7, #1]
				*buf++ = 'F';
    e9ba:	2246      	movs	r2, #70	; 0x46
		*buf = 0;
    e9bc:	2500      	movs	r5, #0
			zero.predot = zero.postdot = zero.trail = 0;
    e9be:	46ab      	mov	fp, r5
    e9c0:	46a8      	mov	r8, r5
		return buf - start;
    e9c2:	ae1b      	add	r6, sp, #108	; 0x6c
				*buf++ = 'n';
    e9c4:	70ba      	strb	r2, [r7, #2]
		*buf = 0;
    e9c6:	70fd      	strb	r5, [r7, #3]
		return buf - start;
    e9c8:	1b9b      	subs	r3, r3, r6
				if (fplus || fspace || (buf[0] == '-')) {
    e9ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e9cc:	2a00      	cmp	r2, #0
    e9ce:	f040 81ec 	bne.w	edaa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x34a>
    e9d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e9d4:	2a00      	cmp	r2, #0
    e9d6:	f040 81e8 	bne.w	edaa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x34a>
    e9da:	f89d 706c 	ldrb.w	r7, [sp, #108]	; 0x6c
    e9de:	f1a7 022d 	sub.w	r2, r7, #45	; 0x2d
    e9e2:	4257      	negs	r7, r2
    e9e4:	4157      	adcs	r7, r2
				clen += zero.predot + zero.postdot + zero.trail;
    e9e6:	eb05 0608 	add.w	r6, r5, r8
    e9ea:	4433      	add	r3, r6
    e9ec:	eb03 060b 	add.w	r6, r3, fp
				if (!isdigit(buf[prefix])) {
    e9f0:	ab22      	add	r3, sp, #136	; 0x88
    e9f2:	443b      	add	r3, r7
    e9f4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    e9f8:	3b30      	subs	r3, #48	; 0x30
    e9fa:	2b09      	cmp	r3, #9
    e9fc:	f200 8249 	bhi.w	ee92 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x432>
			} else if (fzero) {
    ea00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ea02:	2b00      	cmp	r3, #0
    ea04:	f000 8248 	beq.w	ee98 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x438>
    ea08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ea0a:	1b9a      	subs	r2, r3, r6
    ea0c:	ab1b      	add	r3, sp, #108	; 0x6c
    ea0e:	e739      	b.n	e884 <z_prf+0x264>
	} else if (fplus) {
    ea10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ea12:	b10b      	cbz	r3, ea18 <z_prf+0x3f8>
		*buf++ = '+';
    ea14:	232b      	movs	r3, #43	; 0x2b
    ea16:	e7ba      	b.n	e98e <z_prf+0x36e>
	} else if (fspace) {
    ea18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ea1a:	b10b      	cbz	r3, ea20 <z_prf+0x400>
		*buf++ = ' ';
    ea1c:	2320      	movs	r3, #32
    ea1e:	e7b6      	b.n	e98e <z_prf+0x36e>
	} else if (fspace) {
    ea20:	af1b      	add	r7, sp, #108	; 0x6c
    ea22:	e7b8      	b.n	e996 <z_prf+0x376>
				*buf++ = 'i';
    ea24:	2269      	movs	r2, #105	; 0x69
    ea26:	703a      	strb	r2, [r7, #0]
				*buf++ = 'n';
    ea28:	226e      	movs	r2, #110	; 0x6e
    ea2a:	707a      	strb	r2, [r7, #1]
				*buf++ = 'f';
    ea2c:	2266      	movs	r2, #102	; 0x66
    ea2e:	e7c5      	b.n	e9bc <z_prf+0x39c>
			if (isupper(c)) {
    ea30:	2c19      	cmp	r4, #25
				*buf++ = 'N';
    ea32:	bf99      	ittee	ls
    ea34:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
    ea36:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
    ea38:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
    ea3a:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
    ea3c:	bf94      	ite	ls
    ea3e:	703a      	strbls	r2, [r7, #0]
				*buf++ = 'n';
    ea40:	703a      	strbhi	r2, [r7, #0]
				*buf++ = 'a';
    ea42:	7079      	strb	r1, [r7, #1]
    ea44:	e7ba      	b.n	e9bc <z_prf+0x39c>
	if ((exp | fract) != 0) {
    ea46:	9b04      	ldr	r3, [sp, #16]
    ea48:	9805      	ldr	r0, [sp, #20]
    ea4a:	430b      	orrs	r3, r1
    ea4c:	9310      	str	r3, [sp, #64]	; 0x40
    ea4e:	17cb      	asrs	r3, r1, #31
    ea50:	4303      	orrs	r3, r0
		c = 'f';
    ea52:	2c46      	cmp	r4, #70	; 0x46
	if ((exp | fract) != 0) {
    ea54:	9311      	str	r3, [sp, #68]	; 0x44
		c = 'f';
    ea56:	bf08      	it	eq
    ea58:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
    ea5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    ea5e:	4313      	orrs	r3, r2
    ea60:	f000 8111 	beq.w	ec86 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x226>
		if (exp == 0) {
    ea64:	2900      	cmp	r1, #0
    ea66:	f000 809b 	beq.w	eba0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x140>
		fract |= HIGHBIT64;
    ea6a:	2600      	movs	r6, #0
    ea6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    ea6e:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
    ea72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    ea76:	9317      	str	r3, [sp, #92]	; 0x5c
	while (exp <= -3) {
    ea78:	f118 0f02 	cmn.w	r8, #2
    ea7c:	f2c0 80a4 	blt.w	ebc8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x168>
	while (exp > 0) {
    ea80:	f1b8 0f00 	cmp.w	r8, #0
    ea84:	f300 80dd 	bgt.w	ec42 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1e2>
		_rlrshift(&fract);
    ea88:	a816      	add	r0, sp, #88	; 0x58
		exp++;
    ea8a:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    ea8e:	f00d f9aa 	bl	1bde6 <_rlrshift>
	while (exp < (0 + 4)) {
    ea92:	f1b8 0f04 	cmp.w	r8, #4
    ea96:	d1f7      	bne.n	ea88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x28>
		precision = 6;		/* Default precision if none given */
    ea98:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
    ea9a:	f004 03df 	and.w	r3, r4, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
    ea9e:	bfb8      	it	lt
    eaa0:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
    eaa2:	2b47      	cmp	r3, #71	; 0x47
    eaa4:	f040 80f8 	bne.w	ec98 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x238>
		if (decexp < (-4 + 1) || decexp > precision) {
    eaa8:	1cf1      	adds	r1, r6, #3
    eaaa:	db02      	blt.n	eab2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x52>
    eaac:	42ae      	cmp	r6, r5
    eaae:	f340 80ed 	ble.w	ec8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x22c>
			c += 'e' - 'g';
    eab2:	3c02      	subs	r4, #2
    eab4:	b2e4      	uxtb	r4, r4
			if (precision > 0) {
    eab6:	2d00      	cmp	r5, #0
    eab8:	f000 80f4 	beq.w	eca4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x244>
				precision--;
    eabc:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
    eabe:	f1bb 0f00 	cmp.w	fp, #0
    eac2:	f040 80ef 	bne.w	eca4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x244>
    eac6:	2d00      	cmp	r5, #0
    eac8:	bfd4      	ite	le
    eaca:	f04f 0a00 	movle.w	sl, #0
    eace:	f04f 0a01 	movgt.w	sl, #1
	if (c == 'f') {
    ead2:	2c66      	cmp	r4, #102	; 0x66
    ead4:	f040 80e8 	bne.w	eca8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x248>
		if (exp < 0) {
    ead8:	eb16 0805 	adds.w	r8, r6, r5
    eadc:	f140 80ec 	bpl.w	ecb8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x258>
	digit_count = 16;
    eae0:	2310      	movs	r3, #16
    eae2:	2466      	movs	r4, #102	; 0x66
			exp = 0;
    eae4:	f04f 0800 	mov.w	r8, #0
	digit_count = 16;
    eae8:	9315      	str	r3, [sp, #84]	; 0x54
	ltemp = 0x0800000000000000;
    eaea:	2200      	movs	r2, #0
    eaec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    eaf0:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	while (exp--) {
    eaf4:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
    eaf8:	f080 80e0 	bcs.w	ecbc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x25c>
	fract += ltemp;
    eafc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    eafe:	9a18      	ldr	r2, [sp, #96]	; 0x60
    eb00:	9919      	ldr	r1, [sp, #100]	; 0x64
    eb02:	189b      	adds	r3, r3, r2
    eb04:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    eb06:	eb41 0202 	adc.w	r2, r1, r2
    eb0a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
	if ((fract >> 32) & 0xF0000000) {
    eb0e:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    eb12:	9312      	str	r3, [sp, #72]	; 0x48
    eb14:	2300      	movs	r3, #0
    eb16:	9313      	str	r3, [sp, #76]	; 0x4c
    eb18:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    eb1c:	4313      	orrs	r3, r2
    eb1e:	d006      	beq.n	eb2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xce>
		_ldiv5(&fract);
    eb20:	a816      	add	r0, sp, #88	; 0x58
    eb22:	f00d f971 	bl	1be08 <_ldiv5>
		_rlrshift(&fract);
    eb26:	a816      	add	r0, sp, #88	; 0x58
    eb28:	f00d f95d 	bl	1bde6 <_rlrshift>
		decexp++;
    eb2c:	3601      	adds	r6, #1
	if (c == 'f') {
    eb2e:	2c66      	cmp	r4, #102	; 0x66
    eb30:	f040 80e1 	bne.w	ecf6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x296>
		if (decexp > 0) {
    eb34:	2e00      	cmp	r6, #0
    eb36:	f340 80c8 	ble.w	ecca <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x26a>
			while (decexp > 0 && digit_count > 0) {
    eb3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    eb3c:	2b00      	cmp	r3, #0
    eb3e:	dd07      	ble.n	eb50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf0>
				*buf++ = _get_digit(&fract, &digit_count);
    eb40:	a915      	add	r1, sp, #84	; 0x54
    eb42:	a816      	add	r0, sp, #88	; 0x58
    eb44:	f00d f98b 	bl	1be5e <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    eb48:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    eb4a:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
    eb4e:	d1f4      	bne.n	eb3a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xda>
			zp->predot = decexp;
    eb50:	46b0      	mov	r8, r6
    eb52:	463b      	mov	r3, r7
			decexp = 0;
    eb54:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
    eb56:	f1bb 0f00 	cmp.w	fp, #0
    eb5a:	d101      	bne.n	eb60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x100>
    eb5c:	2d00      	cmp	r5, #0
    eb5e:	dd15      	ble.n	eb8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12c>
			*buf++ = '.';
    eb60:	222e      	movs	r2, #46	; 0x2e
    eb62:	f803 2b01 	strb.w	r2, [r3], #1
		if (decexp < 0 && precision > 0) {
    eb66:	2e00      	cmp	r6, #0
    eb68:	f000 80c0 	beq.w	ecec <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x28c>
    eb6c:	2d00      	cmp	r5, #0
    eb6e:	f340 80bf 	ble.w	ecf0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x290>
			zp->postdot = -decexp;
    eb72:	f1c6 0b00 	rsb	fp, r6, #0
    eb76:	45ab      	cmp	fp, r5
    eb78:	bfa8      	it	ge
    eb7a:	46ab      	movge	fp, r5
			precision -= zp->postdot;
    eb7c:	eba5 050b 	sub.w	r5, r5, fp
		while (precision > 0 && digit_count > 0) {
    eb80:	2d00      	cmp	r5, #0
    eb82:	dd03      	ble.n	eb8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12c>
    eb84:	9a15      	ldr	r2, [sp, #84]	; 0x54
    eb86:	2a00      	cmp	r2, #0
    eb88:	f300 80a6 	bgt.w	ecd8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x278>
	if (prune_zero) {
    eb8c:	f1ba 0f00 	cmp.w	sl, #0
    eb90:	f040 80c6 	bne.w	ed20 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2c0>
	*buf = 0;
    eb94:	2200      	movs	r2, #0
	return buf - start;
    eb96:	ae1b      	add	r6, sp, #108	; 0x6c
	*buf = 0;
    eb98:	701a      	strb	r2, [r3, #0]
	return buf - start;
    eb9a:	1b9b      	subs	r3, r3, r6
    eb9c:	e715      	b.n	e9ca <z_prf+0x3aa>
				exp--;
    eb9e:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
    eba0:	9b04      	ldr	r3, [sp, #16]
    eba2:	18db      	adds	r3, r3, r3
    eba4:	9304      	str	r3, [sp, #16]
    eba6:	9b05      	ldr	r3, [sp, #20]
    eba8:	415b      	adcs	r3, r3
    ebaa:	9305      	str	r3, [sp, #20]
    ebac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ebb0:	2a00      	cmp	r2, #0
    ebb2:	f173 0300 	sbcs.w	r3, r3, #0
    ebb6:	daf2      	bge.n	eb9e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13e>
    ebb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ebbc:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    ebc0:	e753      	b.n	ea6a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa>
			_rlrshift(&fract);
    ebc2:	a816      	add	r0, sp, #88	; 0x58
    ebc4:	f00d f90f 	bl	1bde6 <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    ebc8:	e9dd ec16 	ldrd	lr, ip, [sp, #88]	; 0x58
    ebcc:	2300      	movs	r3, #0
    ebce:	2100      	movs	r1, #0
    ebd0:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    ebd4:	930d      	str	r3, [sp, #52]	; 0x34
    ebd6:	48bc      	ldr	r0, [pc, #752]	; (eec8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x468>)
    ebd8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    ebdc:	4299      	cmp	r1, r3
    ebde:	bf08      	it	eq
    ebe0:	4290      	cmpeq	r0, r2
    ebe2:	f108 0801 	add.w	r8, r8, #1
    ebe6:	d3ec      	bcc.n	ebc2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x162>
		fract *= 5U;
    ebe8:	2005      	movs	r0, #5
    ebea:	fbae 2300 	umull	r2, r3, lr, r0
    ebee:	e9cd 2306 	strd	r2, r3, [sp, #24]
    ebf2:	9b07      	ldr	r3, [sp, #28]
		decexp--;
    ebf4:	3e01      	subs	r6, #1
		fract *= 5U;
    ebf6:	fb00 330c 	mla	r3, r0, ip, r3
		decexp--;
    ebfa:	f04f 0c00 	mov.w	ip, #0
		fract *= 5U;
    ebfe:	9307      	str	r3, [sp, #28]
    ec00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    ec04:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    ec08:	2100      	movs	r1, #0
    ec0a:	2300      	movs	r3, #0
    ec0c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    ec10:	9807      	ldr	r0, [sp, #28]
    ec12:	428b      	cmp	r3, r1
    ec14:	bf08      	it	eq
    ec16:	4282      	cmpeq	r2, r0
    ec18:	d208      	bcs.n	ec2c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1cc>
    ec1a:	f1bc 0f00 	cmp.w	ip, #0
    ec1e:	f43f af2b 	beq.w	ea78 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x18>
    ec22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    ec26:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    ec2a:	e725      	b.n	ea78 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x18>
			fract <<= 1;
    ec2c:	9b06      	ldr	r3, [sp, #24]
			exp--;
    ec2e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			fract <<= 1;
    ec32:	18db      	adds	r3, r3, r3
    ec34:	9306      	str	r3, [sp, #24]
    ec36:	9b07      	ldr	r3, [sp, #28]
    ec38:	f04f 0c01 	mov.w	ip, #1
    ec3c:	415b      	adcs	r3, r3
    ec3e:	9307      	str	r3, [sp, #28]
			exp--;
    ec40:	e7e2      	b.n	ec08 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1a8>
		_ldiv5(&fract);
    ec42:	a816      	add	r0, sp, #88	; 0x58
    ec44:	f00d f8e0 	bl	1be08 <_ldiv5>
		exp--;
    ec48:	e9dd ae16 	ldrd	sl, lr, [sp, #88]	; 0x58
		decexp++;
    ec4c:	f04f 0c00 	mov.w	ip, #0
		exp--;
    ec50:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    ec54:	3601      	adds	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    ec56:	2300      	movs	r3, #0
    ec58:	2100      	movs	r1, #0
    ec5a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ec5e:	4299      	cmp	r1, r3
    ec60:	bf08      	it	eq
    ec62:	4570      	cmpeq	r0, lr
    ec64:	d206      	bcs.n	ec74 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x214>
    ec66:	f1bc 0f00 	cmp.w	ip, #0
    ec6a:	f43f af09 	beq.w	ea80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x20>
    ec6e:	e9cd ae16 	strd	sl, lr, [sp, #88]	; 0x58
    ec72:	e705      	b.n	ea80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x20>
			fract <<= 1;
    ec74:	eb1a 0a0a 	adds.w	sl, sl, sl
    ec78:	eb4e 0e0e 	adc.w	lr, lr, lr
			exp--;
    ec7c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    ec80:	f04f 0c01 	mov.w	ip, #1
    ec84:	e7e7      	b.n	ec56 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f6>
	if ((exp | fract) != 0) {
    ec86:	2600      	movs	r6, #0
    ec88:	46b0      	mov	r8, r6
    ec8a:	e6fd      	b.n	ea88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x28>
			precision -= decexp;
    ec8c:	1bad      	subs	r5, r5, r6
		if (!falt && (precision > 0)) {
    ec8e:	f1bb 0f00 	cmp.w	fp, #0
    ec92:	d104      	bne.n	ec9e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x23e>
			c = 'f';
    ec94:	2466      	movs	r4, #102	; 0x66
    ec96:	e716      	b.n	eac6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x66>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    ec98:	f04f 0a00 	mov.w	sl, #0
    ec9c:	e719      	b.n	ead2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x72>
    ec9e:	f04f 0a00 	mov.w	sl, #0
    eca2:	e719      	b.n	ead8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x78>
    eca4:	f04f 0a00 	mov.w	sl, #0
		exp = precision + 1;
    eca8:	f105 0801 	add.w	r8, r5, #1
	digit_count = 16;
    ecac:	2310      	movs	r3, #16
    ecae:	4598      	cmp	r8, r3
    ecb0:	9315      	str	r3, [sp, #84]	; 0x54
	if (exp > 16) {
    ecb2:	bfa8      	it	ge
    ecb4:	4698      	movge	r8, r3
    ecb6:	e718      	b.n	eaea <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8a>
		if (exp < 0) {
    ecb8:	2466      	movs	r4, #102	; 0x66
    ecba:	e7f7      	b.n	ecac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x24c>
		_ldiv5(&ltemp);
    ecbc:	a818      	add	r0, sp, #96	; 0x60
    ecbe:	f00d f8a3 	bl	1be08 <_ldiv5>
		_rlrshift(&ltemp);
    ecc2:	a818      	add	r0, sp, #96	; 0x60
    ecc4:	f00d f88f 	bl	1bde6 <_rlrshift>
    ecc8:	e714      	b.n	eaf4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x94>
			*buf++ = '0';
    ecca:	463b      	mov	r3, r7
    eccc:	2230      	movs	r2, #48	; 0x30
			zero.predot = zero.postdot = zero.trail = 0;
    ecce:	f04f 0800 	mov.w	r8, #0
			*buf++ = '0';
    ecd2:	f803 2b01 	strb.w	r2, [r3], #1
    ecd6:	e73e      	b.n	eb56 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf6>
			*buf++ = _get_digit(&fract, &digit_count);
    ecd8:	a915      	add	r1, sp, #84	; 0x54
    ecda:	a816      	add	r0, sp, #88	; 0x58
    ecdc:	9306      	str	r3, [sp, #24]
    ecde:	f00d f8be 	bl	1be5e <_get_digit>
    ece2:	9b06      	ldr	r3, [sp, #24]
			precision--;
    ece4:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    ece6:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    ecea:	e749      	b.n	eb80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x120>
			zero.predot = zero.postdot = zero.trail = 0;
    ecec:	46b3      	mov	fp, r6
    ecee:	e747      	b.n	eb80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x120>
    ecf0:	f04f 0b00 	mov.w	fp, #0
    ecf4:	e74a      	b.n	eb8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12c>
		*buf = _get_digit(&fract, &digit_count);
    ecf6:	a915      	add	r1, sp, #84	; 0x54
    ecf8:	a816      	add	r0, sp, #88	; 0x58
    ecfa:	f00d f8b0 	bl	1be5e <_get_digit>
		if (*buf++ != '0') {
    ecfe:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
    ed00:	7038      	strb	r0, [r7, #0]
			decexp--;
    ed02:	bf18      	it	ne
    ed04:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
    ed08:	f1bb 0f00 	cmp.w	fp, #0
    ed0c:	d138      	bne.n	ed80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x320>
    ed0e:	2d00      	cmp	r5, #0
    ed10:	dc36      	bgt.n	ed80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x320>
		if (*buf++ != '0') {
    ed12:	1c7b      	adds	r3, r7, #1
	if (prune_zero) {
    ed14:	f1ba 0f00 	cmp.w	sl, #0
    ed18:	d044      	beq.n	eda4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x344>
			zero.predot = zero.postdot = zero.trail = 0;
    ed1a:	f04f 0b00 	mov.w	fp, #0
    ed1e:	46d8      	mov	r8, fp
		while (*--buf == '0')
    ed20:	461a      	mov	r2, r3
    ed22:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    ed26:	2930      	cmp	r1, #48	; 0x30
    ed28:	d0fa      	beq.n	ed20 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2c0>
		if (*buf != '.') {
    ed2a:	292e      	cmp	r1, #46	; 0x2e
    ed2c:	bf18      	it	ne
    ed2e:	4613      	movne	r3, r2
    ed30:	2500      	movs	r5, #0
	if ((c == 'e') || (c == 'E')) {
    ed32:	f004 02df 	and.w	r2, r4, #223	; 0xdf
    ed36:	2a45      	cmp	r2, #69	; 0x45
    ed38:	f47f af2c 	bne.w	eb94 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x134>
		if (decexp < 0) {
    ed3c:	2e00      	cmp	r6, #0
			*buf++ = '-';
    ed3e:	bfb4      	ite	lt
    ed40:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    ed42:	222b      	movge	r2, #43	; 0x2b
		*buf++ = c;
    ed44:	4619      	mov	r1, r3
			decexp = -decexp;
    ed46:	bfb8      	it	lt
    ed48:	4276      	neglt	r6, r6
		if (decexp >= 100) {
    ed4a:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
    ed4c:	f801 4b02 	strb.w	r4, [r1], #2
			*buf++ = '-';
    ed50:	705a      	strb	r2, [r3, #1]
		if (decexp >= 100) {
    ed52:	dd08      	ble.n	ed66 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x306>
			*buf++ = (decexp / 100) + '0';
    ed54:	2064      	movs	r0, #100	; 0x64
    ed56:	fb96 f2f0 	sdiv	r2, r6, r0
			decexp %= 100;
    ed5a:	fb00 6612 	mls	r6, r0, r2, r6
			*buf++ = (decexp / 100) + '0';
    ed5e:	f102 0430 	add.w	r4, r2, #48	; 0x30
    ed62:	1cd9      	adds	r1, r3, #3
    ed64:	709c      	strb	r4, [r3, #2]
		*buf++ = (decexp / 10) + '0';
    ed66:	200a      	movs	r0, #10
    ed68:	fb96 f2f0 	sdiv	r2, r6, r0
    ed6c:	460b      	mov	r3, r1
		decexp %= 10;
    ed6e:	fb00 6612 	mls	r6, r0, r2, r6
		*buf++ = (decexp / 10) + '0';
    ed72:	f102 0430 	add.w	r4, r2, #48	; 0x30
		*buf++ = decexp + '0';
    ed76:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    ed78:	f803 4b02 	strb.w	r4, [r3], #2
		*buf++ = decexp + '0';
    ed7c:	704e      	strb	r6, [r1, #1]
    ed7e:	e709      	b.n	eb94 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x134>
			*buf++ = '.';
    ed80:	222e      	movs	r2, #46	; 0x2e
    ed82:	1cbb      	adds	r3, r7, #2
    ed84:	707a      	strb	r2, [r7, #1]
		while (precision > 0 && digit_count > 0) {
    ed86:	2d00      	cmp	r5, #0
    ed88:	ddc4      	ble.n	ed14 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2b4>
    ed8a:	9a15      	ldr	r2, [sp, #84]	; 0x54
    ed8c:	2a00      	cmp	r2, #0
    ed8e:	ddc1      	ble.n	ed14 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2b4>
			*buf++ = _get_digit(&fract, &digit_count);
    ed90:	a915      	add	r1, sp, #84	; 0x54
    ed92:	a816      	add	r0, sp, #88	; 0x58
    ed94:	9306      	str	r3, [sp, #24]
    ed96:	f00d f862 	bl	1be5e <_get_digit>
    ed9a:	9b06      	ldr	r3, [sp, #24]
			precision--;
    ed9c:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    ed9e:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    eda2:	e7f0      	b.n	ed86 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x326>
			zero.predot = zero.postdot = zero.trail = 0;
    eda4:	46d3      	mov	fp, sl
    eda6:	46d0      	mov	r8, sl
    eda8:	e7c3      	b.n	ed32 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2d2>
					prefix = 1;
    edaa:	2701      	movs	r7, #1
    edac:	e61b      	b.n	e9e6 <z_prf+0x3c6>
				switch (i) {
    edae:	46b1      	mov	r9, r6
    edb0:	2f68      	cmp	r7, #104	; 0x68
    edb2:	f859 3b04 	ldr.w	r3, [r9], #4
    edb6:	d005      	beq.n	edc4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x364>
    edb8:	dc01      	bgt.n	edbe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x35e>
    edba:	2f48      	cmp	r7, #72	; 0x48
    edbc:	d007      	beq.n	edce <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x36e>
					*va_arg(vargs, int *) = count;
    edbe:	9a01      	ldr	r2, [sp, #4]
    edc0:	601a      	str	r2, [r3, #0]
					break;
    edc2:	e001      	b.n	edc8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x368>
					*va_arg(vargs, short *) = count;
    edc4:	9a01      	ldr	r2, [sp, #4]
    edc6:	801a      	strh	r2, [r3, #0]
				continue;
    edc8:	464e      	mov	r6, r9
    edca:	9a08      	ldr	r2, [sp, #32]
    edcc:	e430      	b.n	e630 <z_prf+0x10>
					*va_arg(vargs, char *) = count;
    edce:	9a01      	ldr	r2, [sp, #4]
    edd0:	701a      	strb	r2, [r3, #0]
					break;
    edd2:	e7f9      	b.n	edc8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x368>
				val = (uintptr_t) va_arg(vargs, void *);
    edd4:	46b1      	mov	r9, r6
		*buf++ = '0';
    edd6:	f647 0330 	movw	r3, #30768	; 0x7830
	len = _to_x(buf, value, 16);
    edda:	2210      	movs	r2, #16
    eddc:	f859 1b04 	ldr.w	r1, [r9], #4
    ede0:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
		*buf++ = '0';
    ede4:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
	len = _to_x(buf, value, 16);
    ede8:	f00c ffdb 	bl	1bda2 <_to_x>
				prefix = 2;
    edec:	2702      	movs	r7, #2
	return len + (buf - buf0);
    edee:	1c86      	adds	r6, r0, #2
				break;
    edf0:	e51e      	b.n	e830 <z_prf+0x210>
					if (cptr[clen] == '\0') {
    edf2:	5d9a      	ldrb	r2, [r3, r6]
    edf4:	2a00      	cmp	r2, #0
    edf6:	d04a      	beq.n	ee8e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x42e>
				for (clen = 0; clen < precision; clen++) {
    edf8:	3601      	adds	r6, #1
    edfa:	e52e      	b.n	e85a <z_prf+0x23a>
	if (alt_form) {
    edfc:	ac1b      	add	r4, sp, #108	; 0x6c
	return (buf - buf0) + _to_x(buf, value, 8);
    edfe:	2208      	movs	r2, #8
    ee00:	4620      	mov	r0, r4
    ee02:	f00c ffce 	bl	1bda2 <_to_x>
    ee06:	ae1b      	add	r6, sp, #108	; 0x6c
    ee08:	1ba6      	subs	r6, r4, r6
    ee0a:	4406      	add	r6, r0
			prefix = 0;
    ee0c:	2700      	movs	r7, #0
    ee0e:	e50f      	b.n	e830 <z_prf+0x210>
		*buf++ = '0';
    ee10:	f10d 046d 	add.w	r4, sp, #109	; 0x6d
    ee14:	e7f3      	b.n	edfe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x39e>
				} else if (c == 'u') {
    ee16:	2c75      	cmp	r4, #117	; 0x75
    ee18:	d105      	bne.n	ee26 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3c6>
	return _to_x(buf, value, 10);
    ee1a:	220a      	movs	r2, #10
    ee1c:	a81b      	add	r0, sp, #108	; 0x6c
    ee1e:	f00c ffc0 	bl	1bda2 <_to_x>
    ee22:	4606      	mov	r6, r0
    ee24:	e7f2      	b.n	ee0c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3ac>
	if (alt_form) {
    ee26:	f1bb 0f00 	cmp.w	fp, #0
    ee2a:	d012      	beq.n	ee52 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3f2>
		*buf++ = '0';
    ee2c:	f647 0330 	movw	r3, #30768	; 0x7830
		*buf++ = 'x';
    ee30:	f10d 086e 	add.w	r8, sp, #110	; 0x6e
		*buf++ = '0';
    ee34:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
	len = _to_x(buf, value, 16);
    ee38:	2210      	movs	r2, #16
    ee3a:	4640      	mov	r0, r8
    ee3c:	f00c ffb1 	bl	1bda2 <_to_x>
	if (prefix == 'X') {
    ee40:	2c58      	cmp	r4, #88	; 0x58
    ee42:	d009      	beq.n	ee58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3f8>
	return len + (buf - buf0);
    ee44:	ae1b      	add	r6, sp, #108	; 0x6c
    ee46:	eba8 0606 	sub.w	r6, r8, r6
    ee4a:	4406      	add	r6, r0
						prefix = 2;
    ee4c:	ea4f 074b 	mov.w	r7, fp, lsl #1
    ee50:	e4ee      	b.n	e830 <z_prf+0x210>
	if (alt_form) {
    ee52:	f10d 086c 	add.w	r8, sp, #108	; 0x6c
    ee56:	e7ef      	b.n	ee38 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3d8>
    ee58:	aa1b      	add	r2, sp, #108	; 0x6c
		if (*buf >= 'a' && *buf <= 'z') {
    ee5a:	f812 3b01 	ldrb.w	r3, [r2], #1
    ee5e:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    ee62:	2919      	cmp	r1, #25
    ee64:	d803      	bhi.n	ee6e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x40e>
			*buf += 'A' - 'a';
    ee66:	3b20      	subs	r3, #32
    ee68:	f802 3c01 	strb.w	r3, [r2, #-1]
    ee6c:	e7f5      	b.n	ee5a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3fa>
	} while (*buf++);
    ee6e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    ee72:	2b00      	cmp	r3, #0
    ee74:	d1f1      	bne.n	ee5a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3fa>
    ee76:	e7e5      	b.n	ee44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3e4>
				PUTC('%');
    ee78:	9903      	ldr	r1, [sp, #12]
    ee7a:	4620      	mov	r0, r4
    ee7c:	f7ff bbe1 	b.w	e642 <z_prf+0x22>
				count++;
    ee80:	9b01      	ldr	r3, [sp, #4]
    ee82:	3301      	adds	r3, #1
				count += 2;
    ee84:	9301      	str	r3, [sp, #4]
				continue;
    ee86:	46b1      	mov	r9, r6
    ee88:	e79e      	b.n	edc8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x368>
					prefix = 1;
    ee8a:	2701      	movs	r7, #1
    ee8c:	e4d0      	b.n	e830 <z_prf+0x210>
    ee8e:	4615      	mov	r5, r2
    ee90:	e4e8      	b.n	e864 <z_prf+0x244>
			cptr = buf;
    ee92:	ab1b      	add	r3, sp, #108	; 0x6c
				zero_head = 0;
    ee94:	2200      	movs	r2, #0
    ee96:	e4f7      	b.n	e888 <z_prf+0x268>
    ee98:	ab1b      	add	r3, sp, #108	; 0x6c
    ee9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ee9c:	e4f4      	b.n	e888 <z_prf+0x268>
    ee9e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
					PUTC(' ');
    eea2:	9903      	ldr	r1, [sp, #12]
    eea4:	9b02      	ldr	r3, [sp, #8]
    eea6:	2020      	movs	r0, #32
    eea8:	4798      	blx	r3
    eeaa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
    eeae:	3001      	adds	r0, #1
    eeb0:	f43f abcc 	beq.w	e64c <z_prf+0x2c>
				while (width-- > 0) {
    eeb4:	f11a 3aff 	adds.w	sl, sl, #4294967295	; 0xffffffff
    eeb8:	d2f1      	bcs.n	ee9e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x43e>
				count += width;
    eeba:	9901      	ldr	r1, [sp, #4]
    eebc:	4421      	add	r1, r4
    eebe:	9101      	str	r1, [sp, #4]
				while (width-- > 0) {
    eec0:	4654      	mov	r4, sl
    eec2:	e4eb      	b.n	e89c <z_prf+0x27c>
    eec4:	46a2      	mov	sl, r4
    eec6:	e7f5      	b.n	eeb4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x454>
    eec8:	33333332 	.word	0x33333332
				PUTC(*cptr++);
    eecc:	f813 0b01 	ldrb.w	r0, [r3], #1
    eed0:	9903      	ldr	r1, [sp, #12]
    eed2:	9309      	str	r3, [sp, #36]	; 0x24
    eed4:	9b02      	ldr	r3, [sp, #8]
    eed6:	920a      	str	r2, [sp, #40]	; 0x28
    eed8:	4798      	blx	r3
    eeda:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
    eede:	3001      	adds	r0, #1
    eee0:	f47f acde 	bne.w	e8a0 <z_prf+0x280>
    eee4:	f7ff bbb2 	b.w	e64c <z_prf+0x2c>
				PUTC('0');
    eee8:	9903      	ldr	r1, [sp, #12]
    eeea:	2030      	movs	r0, #48	; 0x30
    eeec:	9b02      	ldr	r3, [sp, #8]
    eeee:	9209      	str	r2, [sp, #36]	; 0x24
    eef0:	4798      	blx	r3
    eef2:	3001      	adds	r0, #1
    eef4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    eef6:	f47f acd6 	bne.w	e8a6 <z_prf+0x286>
    eefa:	f7ff bba7 	b.w	e64c <z_prf+0x2c>
					PUTC(c);
    eefe:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
    ef02:	4798      	blx	r3
    ef04:	3001      	adds	r0, #1
    ef06:	f43f aba1 	beq.w	e64c <z_prf+0x2c>
					c = *++cptr;
    ef0a:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
    ef0e:	e4d6      	b.n	e8be <z_prf+0x29e>
					PUTC('0');
    ef10:	9903      	ldr	r1, [sp, #12]
    ef12:	2030      	movs	r0, #48	; 0x30
    ef14:	9b02      	ldr	r3, [sp, #8]
    ef16:	4798      	blx	r3
    ef18:	3001      	adds	r0, #1
    ef1a:	f47f acd8 	bne.w	e8ce <z_prf+0x2ae>
    ef1e:	f7ff bb95 	b.w	e64c <z_prf+0x2c>
					PUTC('0');
    ef22:	9903      	ldr	r1, [sp, #12]
    ef24:	2030      	movs	r0, #48	; 0x30
    ef26:	9b02      	ldr	r3, [sp, #8]
    ef28:	4798      	blx	r3
    ef2a:	3001      	adds	r0, #1
    ef2c:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    ef30:	f47f ace7 	bne.w	e902 <z_prf+0x2e2>
    ef34:	f7ff bb8a 	b.w	e64c <z_prf+0x2c>
					PUTC(c);
    ef38:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
    ef3c:	4798      	blx	r3
    ef3e:	3001      	adds	r0, #1
    ef40:	f43f ab84 	beq.w	e64c <z_prf+0x2c>
					c = *++cptr;
    ef44:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
    ef48:	e4e5      	b.n	e916 <z_prf+0x2f6>
					PUTC('0');
    ef4a:	9903      	ldr	r1, [sp, #12]
    ef4c:	2030      	movs	r0, #48	; 0x30
    ef4e:	9b02      	ldr	r3, [sp, #8]
    ef50:	4798      	blx	r3
    ef52:	3001      	adds	r0, #1
    ef54:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    ef58:	f47f ace8 	bne.w	e92c <z_prf+0x30c>
    ef5c:	f7ff bb76 	b.w	e64c <z_prf+0x2c>
				PUTC(*cptr++);
    ef60:	9903      	ldr	r1, [sp, #12]
    ef62:	f81a 0b01 	ldrb.w	r0, [sl], #1
    ef66:	9b02      	ldr	r3, [sp, #8]
    ef68:	4798      	blx	r3
    ef6a:	3001      	adds	r0, #1
    ef6c:	f43f ab6e 	beq.w	e64c <z_prf+0x2c>
    ef70:	eba6 030a 	sub.w	r3, r6, sl
			while (clen-- > 0) {
    ef74:	2b00      	cmp	r3, #0
    ef76:	dcf3      	bgt.n	ef60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x500>
			count += clen;
    ef78:	9b01      	ldr	r3, [sp, #4]
    ef7a:	9a06      	ldr	r2, [sp, #24]
			if (width > 0) {
    ef7c:	2c00      	cmp	r4, #0
			count += clen;
    ef7e:	4413      	add	r3, r2
    ef80:	9301      	str	r3, [sp, #4]
			if (width > 0) {
    ef82:	f77f af21 	ble.w	edc8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x368>
    ef86:	4625      	mov	r5, r4
    ef88:	e006      	b.n	ef98 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x538>
					PUTC(' ');
    ef8a:	9903      	ldr	r1, [sp, #12]
    ef8c:	2020      	movs	r0, #32
    ef8e:	9b02      	ldr	r3, [sp, #8]
    ef90:	4798      	blx	r3
    ef92:	3001      	adds	r0, #1
    ef94:	f43f ab5a 	beq.w	e64c <z_prf+0x2c>
				while (width-- > 0) {
    ef98:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
    ef9c:	d2f5      	bcs.n	ef8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x52a>
				count += width;
    ef9e:	9b01      	ldr	r3, [sp, #4]
    efa0:	4423      	add	r3, r4
    efa2:	9301      	str	r3, [sp, #4]
    efa4:	e710      	b.n	edc8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x368>
    efa6:	bf00      	nop

0000efa8 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
    efa8:	b40c      	push	{r2, r3}
    efaa:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    efac:	b909      	cbnz	r1, efb2 <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
    efae:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
    efb2:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
    efb6:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    efb8:	9a06      	ldr	r2, [sp, #24]
    efba:	a902      	add	r1, sp, #8
    efbc:	4805      	ldr	r0, [pc, #20]	; (efd4 <snprintf+0x2c>)
	va_start(vargs, format);
    efbe:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    efc0:	f7ff fb2e 	bl	e620 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    efc4:	2200      	movs	r2, #0
    efc6:	9b02      	ldr	r3, [sp, #8]
    efc8:	701a      	strb	r2, [r3, #0]
	return r;
}
    efca:	b005      	add	sp, #20
    efcc:	f85d eb04 	ldr.w	lr, [sp], #4
    efd0:	b002      	add	sp, #8
    efd2:	4770      	bx	lr
    efd4:	0001be8d 	.word	0x0001be8d

0000efd8 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
    efd8:	b538      	push	{r3, r4, r5, lr}

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
    efda:	4c07      	ldr	r4, [pc, #28]	; (eff8 <net_if_init+0x20>)
    efdc:	4d07      	ldr	r5, [pc, #28]	; (effc <net_if_init+0x24>)
    efde:	42ac      	cmp	r4, r5
    efe0:	d100      	bne.n	efe4 <net_if_init+0xc>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
    efe2:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
    efe4:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
    efe6:	681b      	ldr	r3, [r3, #0]
    efe8:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
    efea:	b11b      	cbz	r3, eff4 <net_if_init+0x1c>
    efec:	681b      	ldr	r3, [r3, #0]
    efee:	b10b      	cbz	r3, eff4 <net_if_init+0x1c>
	api->init(iface);
    eff0:	4620      	mov	r0, r4
    eff2:	4798      	blx	r3
	     iface++, if_count++) {
    eff4:	3420      	adds	r4, #32
    eff6:	e7f2      	b.n	efde <net_if_init+0x6>
    eff8:	200269e0 	.word	0x200269e0
    effc:	20026a00 	.word	0x20026a00

0000f000 <net_if_post_init>:

void net_if_post_init(void)
{
    f000:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
    f002:	4c08      	ldr	r4, [pc, #32]	; (f024 <net_if_post_init+0x24>)
    f004:	4d08      	ldr	r5, [pc, #32]	; (f028 <net_if_post_init+0x28>)
    f006:	42ac      	cmp	r4, r5
    f008:	d100      	bne.n	f00c <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
    f00a:	bd38      	pop	{r3, r4, r5, pc}
	return atomic_test_bit(iface->if_dev->flags, value);
    f00c:	6820      	ldr	r0, [r4, #0]
    f00e:	2103      	movs	r1, #3
    f010:	300c      	adds	r0, #12
    f012:	f00c ff61 	bl	1bed8 <atomic_test_bit>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
    f016:	b910      	cbnz	r0, f01e <net_if_post_init+0x1e>
			net_if_up(iface);
    f018:	4620      	mov	r0, r4
    f01a:	f00c ff63 	bl	1bee4 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
    f01e:	3420      	adds	r4, #32
    f020:	e7f1      	b.n	f006 <net_if_post_init+0x6>
    f022:	bf00      	nop
    f024:	200269e0 	.word	0x200269e0
    f028:	20026a00 	.word	0x20026a00

0000f02c <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	u16_t *w;
	u8_t i, bl, bh, longest = 1U;
	s8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
    f02c:	2300      	movs	r3, #0
{
    f02e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	u16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
    f032:	2802      	cmp	r0, #2
{
    f034:	b089      	sub	sp, #36	; 0x24
    f036:	4681      	mov	r9, r0
    f038:	468a      	mov	sl, r1
    f03a:	4690      	mov	r8, r2
	unsigned char zeros[8] = { 0 };
    f03c:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (family == AF_INET6) {
    f040:	d13c      	bne.n	f0bc <z_impl_net_addr_ntop+0x90>
		addr6 = (struct in6_addr *)src;
		w = (u16_t *)addr6->s6_addr16;
    f042:	aa06      	add	r2, sp, #24
    f044:	4610      	mov	r0, r2
    f046:	9104      	str	r1, [sp, #16]
{
    f048:	4619      	mov	r1, r3
    f04a:	e006      	b.n	f05a <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
    f04c:	7804      	ldrb	r4, [r0, #0]
    f04e:	3101      	adds	r1, #1
    f050:	3401      	adds	r4, #1
    f052:	7004      	strb	r4, [r0, #0]
			for (j = i; j < 8; j++) {
    f054:	b2cc      	uxtb	r4, r1
    f056:	2c07      	cmp	r4, #7
    f058:	d803      	bhi.n	f062 <z_impl_net_addr_ntop+0x36>
				if (UNALIGNED_GET(&w[j]) != 0) {
    f05a:	f83a 4011 	ldrh.w	r4, [sl, r1, lsl #1]
    f05e:	2c00      	cmp	r4, #0
    f060:	d0f4      	beq.n	f04c <z_impl_net_addr_ntop+0x20>
    f062:	3301      	adds	r3, #1
		for (i = 0U; i < 8; i++) {
    f064:	2b08      	cmp	r3, #8
    f066:	f100 0001 	add.w	r0, r0, #1
    f06a:	d1ed      	bne.n	f048 <z_impl_net_addr_ntop+0x1c>
	s8_t pos = -1;
    f06c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1U;
    f070:	2701      	movs	r7, #1
			}
		}

		for (i = 0U; i < 8; i++) {
    f072:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
    f074:	f812 1b01 	ldrb.w	r1, [r2], #1
    f078:	42b9      	cmp	r1, r7
				longest = zeros[i];
				pos = i;
    f07a:	bf88      	it	hi
    f07c:	b25e      	sxtbhi	r6, r3
		for (i = 0U; i < 8; i++) {
    f07e:	f103 0301 	add.w	r3, r3, #1
    f082:	b2db      	uxtb	r3, r3
				pos = i;
    f084:	bf88      	it	hi
    f086:	460f      	movhi	r7, r1
		for (i = 0U; i < 8; i++) {
    f088:	2b08      	cmp	r3, #8
    f08a:	d1f3      	bne.n	f074 <z_impl_net_addr_ntop+0x48>
		len = 8;
    f08c:	9303      	str	r3, [sp, #12]
    f08e:	2f01      	cmp	r7, #1
    f090:	f04f 033a 	mov.w	r3, #58	; 0x3a
    f094:	bf08      	it	eq
    f096:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
    f09a:	9302      	str	r3, [sp, #8]
	bool needcolon = false;
    f09c:	2200      	movs	r2, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
    f09e:	4644      	mov	r4, r8
    f0a0:	4615      	mov	r5, r2
    f0a2:	9b03      	ldr	r3, [sp, #12]
    f0a4:	429d      	cmp	r5, r3
    f0a6:	db19      	blt.n	f0dc <z_impl_net_addr_ntop+0xb0>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
    f0a8:	4544      	cmp	r4, r8
    f0aa:	d009      	beq.n	f0c0 <z_impl_net_addr_ntop+0x94>
		return NULL;
	}

	if (family == AF_INET) {
    f0ac:	2300      	movs	r3, #0
    f0ae:	f1b9 0f01 	cmp.w	r9, #1
		*(ptr - 1) = '\0';
    f0b2:	bf0c      	ite	eq
    f0b4:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
    f0b8:	7023      	strbne	r3, [r4, #0]
    f0ba:	e003      	b.n	f0c4 <z_impl_net_addr_ntop+0x98>
	} else if (family == AF_INET) {
    f0bc:	2801      	cmp	r0, #1
    f0be:	d005      	beq.n	f0cc <z_impl_net_addr_ntop+0xa0>
		return NULL;
    f0c0:	f04f 0800 	mov.w	r8, #0
	}

	return dst;
}
    f0c4:	4640      	mov	r0, r8
    f0c6:	b009      	add	sp, #36	; 0x24
    f0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
    f0cc:	232e      	movs	r3, #46	; 0x2e
    f0ce:	2204      	movs	r2, #4
	s8_t pos = -1;
    f0d0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		delim = '.';
    f0d4:	e9cd 3202 	strd	r3, r2, [sp, #8]
	u8_t i, bl, bh, longest = 1U;
    f0d8:	4607      	mov	r7, r0
    f0da:	e7df      	b.n	f09c <z_impl_net_addr_ntop+0x70>
		if (len == 4) {
    f0dc:	9b03      	ldr	r3, [sp, #12]
    f0de:	2b04      	cmp	r3, #4
    f0e0:	d134      	bne.n	f14c <z_impl_net_addr_ntop+0x120>
			value = (u32_t)addr->s4_addr[i];
    f0e2:	f81a 1005 	ldrb.w	r1, [sl, r5]
			if (value == 0U) {
    f0e6:	b949      	cbnz	r1, f0fc <z_impl_net_addr_ntop+0xd0>
				*ptr++ = '0';
    f0e8:	2330      	movs	r3, #48	; 0x30
    f0ea:	4620      	mov	r0, r4
    f0ec:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
    f0f0:	9b02      	ldr	r3, [sp, #8]
    f0f2:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
    f0f4:	3501      	adds	r5, #1
    f0f6:	b2ed      	uxtb	r5, r5
    f0f8:	4604      	mov	r4, r0
    f0fa:	e7d2      	b.n	f0a2 <z_impl_net_addr_ntop+0x76>
			l = net_value_to_udec(ptr, value, 0);
    f0fc:	2009      	movs	r0, #9
    f0fe:	f04f 0b00 	mov.w	fp, #0
    f102:	f8df c0d8 	ldr.w	ip, [pc, #216]	; f1dc <z_impl_net_addr_ntop+0x1b0>
    f106:	9401      	str	r4, [sp, #4]
		temp = value / divisor;
    f108:	fbb1 fefc 	udiv	lr, r1, ip
		value = value % divisor;
    f10c:	fb0c 131e 	mls	r3, ip, lr, r1
		if ((precision > i) || (temp != 0)) {
    f110:	4583      	cmp	fp, r0
		value = value % divisor;
    f112:	9305      	str	r3, [sp, #20]
		if ((precision > i) || (temp != 0)) {
    f114:	dc01      	bgt.n	f11a <z_impl_net_addr_ntop+0xee>
    f116:	4561      	cmp	r1, ip
    f118:	d306      	bcc.n	f128 <z_impl_net_addr_ntop+0xfc>
			*buf++ = (char) (temp + '0');
    f11a:	4683      	mov	fp, r0
    f11c:	9b01      	ldr	r3, [sp, #4]
    f11e:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
    f122:	f803 eb01 	strb.w	lr, [r3], #1
    f126:	9301      	str	r3, [sp, #4]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
    f128:	230a      	movs	r3, #10
    f12a:	3801      	subs	r0, #1
    f12c:	fbbc fcf3 	udiv	ip, ip, r3
    f130:	1c43      	adds	r3, r0, #1
		value = value % divisor;
    f132:	9905      	ldr	r1, [sp, #20]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
    f134:	d1e8      	bne.n	f108 <z_impl_net_addr_ntop+0xdc>
	*buf = 0;
    f136:	f04f 0300 	mov.w	r3, #0
    f13a:	9901      	ldr	r1, [sp, #4]
    f13c:	700b      	strb	r3, [r1, #0]
	return buf - start;
    f13e:	1b0b      	subs	r3, r1, r4
			ptr += l;
    f140:	b2db      	uxtb	r3, r3
			*ptr++ = delim;
    f142:	9902      	ldr	r1, [sp, #8]
			ptr += l;
    f144:	18e0      	adds	r0, r4, r3
			*ptr++ = delim;
    f146:	3001      	adds	r0, #1
    f148:	54e1      	strb	r1, [r4, r3]
			continue;
    f14a:	e7d3      	b.n	f0f4 <z_impl_net_addr_ntop+0xc8>
		if (i == pos) {
    f14c:	42ae      	cmp	r6, r5
    f14e:	d10d      	bne.n	f16c <z_impl_net_addr_ntop+0x140>
			if (needcolon || i == 0U) {
    f150:	b902      	cbnz	r2, f154 <z_impl_net_addr_ntop+0x128>
    f152:	b916      	cbnz	r6, f15a <z_impl_net_addr_ntop+0x12e>
				*ptr++ = ':';
    f154:	233a      	movs	r3, #58	; 0x3a
    f156:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
    f15a:	233a      	movs	r3, #58	; 0x3a
    f15c:	4620      	mov	r0, r4
    f15e:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
    f162:	1e7b      	subs	r3, r7, #1
    f164:	441d      	add	r5, r3
    f166:	b2ed      	uxtb	r5, r5
			needcolon = false;
    f168:	2200      	movs	r2, #0
			continue;
    f16a:	e7c3      	b.n	f0f4 <z_impl_net_addr_ntop+0xc8>
		if (needcolon) {
    f16c:	b112      	cbz	r2, f174 <z_impl_net_addr_ntop+0x148>
			*ptr++ = ':';
    f16e:	233a      	movs	r3, #58	; 0x3a
    f170:	f804 3b01 	strb.w	r3, [r4], #1
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
    f174:	9b04      	ldr	r3, [sp, #16]
    f176:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    f17a:	021a      	lsls	r2, r3, #8
    f17c:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
    f180:	b212      	sxth	r2, r2
		bh = value >> 8;
    f182:	f3c2 2307 	ubfx	r3, r2, #8, #8
		bl = value & 0xff;
    f186:	fa5f fb82 	uxtb.w	fp, r2
		if (bh) {
    f18a:	b1b3      	cbz	r3, f1ba <z_impl_net_addr_ntop+0x18e>
			if (bh > 0x0f) {
    f18c:	2b0f      	cmp	r3, #15
		bh = value >> 8;
    f18e:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
    f190:	d90b      	bls.n	f1aa <z_impl_net_addr_ntop+0x17e>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
    f192:	2300      	movs	r3, #0
    f194:	2261      	movs	r2, #97	; 0x61
    f196:	4620      	mov	r0, r4
    f198:	f00c fed5 	bl	1bf46 <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
    f19c:	2301      	movs	r3, #1
    f19e:	2261      	movs	r2, #97	; 0x61
    f1a0:	4659      	mov	r1, fp
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
    f1a2:	f00c fed0 	bl	1bf46 <net_byte_to_hex>
		needcolon = true;
    f1a6:	2201      	movs	r2, #1
    f1a8:	e7a4      	b.n	f0f4 <z_impl_net_addr_ntop+0xc8>
				if (bh < 10) {
    f1aa:	b25b      	sxtb	r3, r3
    f1ac:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
    f1ae:	bf94      	ite	ls
    f1b0:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
    f1b2:	3357      	addhi	r3, #87	; 0x57
    f1b4:	1c60      	adds	r0, r4, #1
    f1b6:	7023      	strb	r3, [r4, #0]
    f1b8:	e7f0      	b.n	f19c <z_impl_net_addr_ntop+0x170>
		} else if (bl > 0x0f) {
    f1ba:	f1bb 0f0f 	cmp.w	fp, #15
    f1be:	d903      	bls.n	f1c8 <z_impl_net_addr_ntop+0x19c>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
    f1c0:	2261      	movs	r2, #97	; 0x61
    f1c2:	4659      	mov	r1, fp
    f1c4:	4620      	mov	r0, r4
    f1c6:	e7ec      	b.n	f1a2 <z_impl_net_addr_ntop+0x176>
			if (bl < 10) {
    f1c8:	b252      	sxtb	r2, r2
    f1ca:	f1bb 0f09 	cmp.w	fp, #9
				*ptr++ = (char)(bl + '0');
    f1ce:	bf94      	ite	ls
    f1d0:	3230      	addls	r2, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
    f1d2:	3257      	addhi	r2, #87	; 0x57
    f1d4:	1c60      	adds	r0, r4, #1
    f1d6:	7022      	strb	r2, [r4, #0]
    f1d8:	e7e5      	b.n	f1a6 <z_impl_net_addr_ntop+0x17a>
    f1da:	bf00      	nop
    f1dc:	3b9aca00 	.word	0x3b9aca00

0000f1e0 <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
    f1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
    f1e4:	680f      	ldr	r7, [r1, #0]
	u8_t connect_flags = client->clean_session << 1;
    f1e6:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
	start = buf->cur;

	MQTT_TRC("Encoding Protocol Description. Str:%s Size:%08x.",
		 mqtt_proto_desc->utf8, mqtt_proto_desc->size);

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
    f1ea:	4b3b      	ldr	r3, [pc, #236]	; (f2d8 <connect_request_encode+0xf8>)
    f1ec:	4a3b      	ldr	r2, [pc, #236]	; (f2dc <connect_request_encode+0xfc>)
{
    f1ee:	4606      	mov	r6, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
    f1f0:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
    f1f4:	3705      	adds	r7, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
    f1f6:	2804      	cmp	r0, #4
    f1f8:	bf0c      	ite	eq
    f1fa:	4610      	moveq	r0, r2
    f1fc:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
    f1fe:	600f      	str	r7, [r1, #0]
{
    f200:	460c      	mov	r4, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
    f202:	f00c ff88 	bl	1c116 <pack_utf8_str>
	u8_t connect_flags = client->clean_session << 1;
    f206:	f3c5 0540 	ubfx	r5, r5, #1, #1
	if (err_code != 0) {
    f20a:	4603      	mov	r3, r0
    f20c:	b938      	cbnz	r0, f21e <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
    f20e:	e9d4 2000 	ldrd	r2, r0, [r4]
    f212:	4290      	cmp	r0, r2
		return err_code;
	}

	MQTT_TRC("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
    f214:	f896 105e 	ldrb.w	r1, [r6, #94]	; 0x5e
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
    f218:	d104      	bne.n	f224 <connect_request_encode+0x44>
		return -ENOMEM;
    f21a:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
    f21e:	4618      	mov	r0, r3
    f220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
    f224:	1c50      	adds	r0, r2, #1
    f226:	6020      	str	r0, [r4, #0]
    f228:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
    f22a:	e9d4 8200 	ldrd	r8, r2, [r4]
    f22e:	4590      	cmp	r8, r2
    f230:	d0f3      	beq.n	f21a <connect_request_encode+0x3a>
	*(buf->cur++) = val;
    f232:	f108 0201 	add.w	r2, r8, #1
    f236:	6022      	str	r2, [r4, #0]
    f238:	f888 3000 	strb.w	r3, [r8]
	err_code = pack_uint16(client->keepalive, buf);
    f23c:	4621      	mov	r1, r4
    f23e:	f8b6 005c 	ldrh.w	r0, [r6, #92]	; 0x5c
    f242:	f00c ff56 	bl	1c0f2 <pack_uint16>
	if (err_code != 0) {
    f246:	4603      	mov	r3, r0
    f248:	2800      	cmp	r0, #0
    f24a:	d1e8      	bne.n	f21e <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
    f24c:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    f250:	f00c ff61 	bl	1c116 <pack_utf8_str>
	if (err_code != 0) {
    f254:	4603      	mov	r3, r0
    f256:	2800      	cmp	r0, #0
    f258:	d1e1      	bne.n	f21e <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
    f25a:	6c30      	ldr	r0, [r6, #64]	; 0x40
	u8_t connect_flags = client->clean_session << 1;
    f25c:	006d      	lsls	r5, r5, #1
	if (client->will_topic != NULL) {
    f25e:	b1d8      	cbz	r0, f298 <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
    f260:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
    f264:	f045 0504 	orr.w	r5, r5, #4
		connect_flags |= client->will_retain << 5;
    f268:	f003 0301 	and.w	r3, r3, #1
    f26c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
    f270:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
    f272:	4621      	mov	r1, r4
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
    f274:	00db      	lsls	r3, r3, #3
    f276:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
    f27a:	431d      	orrs	r5, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
    f27c:	f00c ff4b 	bl	1c116 <pack_utf8_str>
		if (err_code != 0) {
    f280:	4603      	mov	r3, r0
    f282:	2800      	cmp	r0, #0
    f284:	d1cb      	bne.n	f21e <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
    f286:	6c73      	ldr	r3, [r6, #68]	; 0x44
			err_code = pack_utf8_str(client->will_message, buf);
    f288:	4621      	mov	r1, r4
		if (client->will_message != NULL) {
    f28a:	b313      	cbz	r3, f2d2 <connect_request_encode+0xf2>
			err_code = pack_utf8_str(client->will_message, buf);
    f28c:	4618      	mov	r0, r3
    f28e:	f00c ff42 	bl	1c116 <pack_utf8_str>
			if (err_code != 0) {
    f292:	4603      	mov	r3, r0
    f294:	2800      	cmp	r0, #0
    f296:	d1c2      	bne.n	f21e <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
    f298:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    f29a:	b138      	cbz	r0, f2ac <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
    f29c:	4621      	mov	r1, r4
    f29e:	f00c ff3a 	bl	1c116 <pack_utf8_str>
		if (err_code != 0) {
    f2a2:	4603      	mov	r3, r0
    f2a4:	2800      	cmp	r0, #0
    f2a6:	d1ba      	bne.n	f21e <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
    f2a8:	f045 0580 	orr.w	r5, r5, #128	; 0x80
	if (client->password != NULL) {
    f2ac:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
    f2ae:	b138      	cbz	r0, f2c0 <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
    f2b0:	4621      	mov	r1, r4
    f2b2:	f00c ff30 	bl	1c116 <pack_utf8_str>
		if (err_code != 0) {
    f2b6:	4603      	mov	r3, r0
    f2b8:	2800      	cmp	r0, #0
    f2ba:	d1b0      	bne.n	f21e <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
    f2bc:	f045 0540 	orr.w	r5, r5, #64	; 0x40
	*connect_flags_pos = connect_flags;
    f2c0:	f888 5000 	strb.w	r5, [r8]
	return mqtt_encode_fixed_header(message_type, start, buf);
    f2c4:	4622      	mov	r2, r4
    f2c6:	4639      	mov	r1, r7
}
    f2c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
    f2cc:	2010      	movs	r0, #16
    f2ce:	f00c bf3d 	b.w	1c14c <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
    f2d2:	f00c ff0e 	bl	1c0f2 <pack_uint16>
    f2d6:	e7dc      	b.n	f292 <connect_request_encode+0xb2>
    f2d8:	0001e128 	.word	0x0001e128
    f2dc:	0001e130 	.word	0x0001e130

0000f2e0 <disconnect_encode>:

	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
    f2e0:	b510      	push	{r4, lr}
    f2e2:	4604      	mov	r4, r0
	if (buf->end - buf->cur < sizeof(disc_packet)) {
    f2e4:	e9d0 0300 	ldrd	r0, r3, [r0]
    f2e8:	1a1b      	subs	r3, r3, r0
    f2ea:	2b01      	cmp	r3, #1
    f2ec:	d908      	bls.n	f300 <disconnect_encode+0x20>
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
    f2ee:	2202      	movs	r2, #2
    f2f0:	4905      	ldr	r1, [pc, #20]	; (f308 <disconnect_encode+0x28>)
    f2f2:	f00c fd0a 	bl	1bd0a <memcpy>
	buf->end = buf->cur + sizeof(disc_packet);

	return 0;
    f2f6:	2000      	movs	r0, #0
	buf->end = buf->cur + sizeof(disc_packet);
    f2f8:	6823      	ldr	r3, [r4, #0]
    f2fa:	3302      	adds	r3, #2
    f2fc:	6063      	str	r3, [r4, #4]
}
    f2fe:	bd10      	pop	{r4, pc}
		return -ENOMEM;
    f300:	f06f 000b 	mvn.w	r0, #11
    f304:	e7fb      	b.n	f2fe <disconnect_encode+0x1e>
    f306:	bf00      	nop
    f308:	0001f9dc 	.word	0x0001f9dc

0000f30c <ping_request_encode>:

	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
    f30c:	b510      	push	{r4, lr}
    f30e:	4604      	mov	r4, r0
	if (buf->end - buf->cur < sizeof(ping_packet)) {
    f310:	e9d0 0300 	ldrd	r0, r3, [r0]
    f314:	1a1b      	subs	r3, r3, r0
    f316:	2b01      	cmp	r3, #1
    f318:	d908      	bls.n	f32c <ping_request_encode+0x20>
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
    f31a:	2202      	movs	r2, #2
    f31c:	4905      	ldr	r1, [pc, #20]	; (f334 <ping_request_encode+0x28>)
    f31e:	f00c fcf4 	bl	1bd0a <memcpy>
	buf->end = buf->cur + sizeof(ping_packet);

	return 0;
    f322:	2000      	movs	r0, #0
	buf->end = buf->cur + sizeof(ping_packet);
    f324:	6823      	ldr	r3, [r4, #0]
    f326:	3302      	adds	r3, #2
    f328:	6063      	str	r3, [r4, #4]
}
    f32a:	bd10      	pop	{r4, pc}
		return -ENOMEM;
    f32c:	f06f 000b 	mvn.w	r0, #11
    f330:	e7fb      	b.n	f32a <ping_request_encode+0x1e>
    f332:	bf00      	nop
    f334:	0001f9e8 	.word	0x0001f9e8

0000f338 <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
    f338:	b570      	push	{r4, r5, r6, lr}
	return socket_ops->socket(family, type, proto);
    f33a:	4d11      	ldr	r5, [pc, #68]	; (f380 <mqtt_client_tcp_connect+0x48>)
	const struct sockaddr *broker = client->broker;
    f33c:	6b46      	ldr	r6, [r0, #52]	; 0x34
    f33e:	682b      	ldr	r3, [r5, #0]
{
    f340:	4604      	mov	r4, r0
    f342:	681b      	ldr	r3, [r3, #0]
    f344:	2206      	movs	r2, #6
    f346:	2101      	movs	r1, #1
    f348:	8830      	ldrh	r0, [r6, #0]
    f34a:	4798      	blx	r3
	int ret;

	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
					    IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
    f34c:	2800      	cmp	r0, #0
	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
    f34e:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
    f350:	da04      	bge.n	f35c <mqtt_client_tcp_connect+0x24>
    f352:	f00a fb5b 	bl	19a0c <z_impl_z_errno>

	ret = connect(client->transport.tcp.sock, client->broker,
		      peer_addr_size);
	if (ret < 0) {
		(void)close(client->transport.tcp.sock);
		return -errno;
    f356:	6800      	ldr	r0, [r0, #0]
    f358:	4240      	negs	r0, r0
	}

	MQTT_TRC("Connect completed");
	return 0;
}
    f35a:	bd70      	pop	{r4, r5, r6, pc}
	if (broker->sa_family == AF_INET) {
    f35c:	8833      	ldrh	r3, [r6, #0]
	return socket_ops->connect(sock, addr, addrlen);
    f35e:	6b61      	ldr	r1, [r4, #52]	; 0x34
		peer_addr_size = sizeof(struct sockaddr_in);
    f360:	2b01      	cmp	r3, #1
    f362:	682b      	ldr	r3, [r5, #0]
    f364:	bf14      	ite	ne
    f366:	2218      	movne	r2, #24
    f368:	2208      	moveq	r2, #8
    f36a:	695b      	ldr	r3, [r3, #20]
    f36c:	4798      	blx	r3
	if (ret < 0) {
    f36e:	2800      	cmp	r0, #0
    f370:	da04      	bge.n	f37c <mqtt_client_tcp_connect+0x44>
	return socket_ops->close(sock);
    f372:	682b      	ldr	r3, [r5, #0]
    f374:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f376:	685b      	ldr	r3, [r3, #4]
    f378:	4798      	blx	r3
    f37a:	e7ea      	b.n	f352 <mqtt_client_tcp_connect+0x1a>
	return 0;
    f37c:	2000      	movs	r0, #0
    f37e:	e7ec      	b.n	f35a <mqtt_client_tcp_connect+0x22>
    f380:	20020ad8 	.word	0x20020ad8

0000f384 <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const u8_t *data,
			  u32_t datalen)
{
    f384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f388:	4606      	mov	r6, r0
    f38a:	460f      	mov	r7, r1
    f38c:	4615      	mov	r5, r2
	u32_t offset = 0U;
    f38e:	2400      	movs	r4, #0
	return socket_ops->send(sock, buf, len, flags);
    f390:	f8df 8030 	ldr.w	r8, [pc, #48]	; f3c4 <mqtt_client_tcp_write+0x40>
	int ret;

	while (offset < datalen) {
    f394:	42ac      	cmp	r4, r5
    f396:	d301      	bcc.n	f39c <mqtt_client_tcp_write+0x18>
		}

		offset += ret;
	}

	return 0;
    f398:	2000      	movs	r0, #0
    f39a:	e00e      	b.n	f3ba <mqtt_client_tcp_write+0x36>
    f39c:	f8d8 3000 	ldr.w	r3, [r8]
    f3a0:	1b2a      	subs	r2, r5, r4
    f3a2:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
    f3a6:	1939      	adds	r1, r7, r4
    f3a8:	2300      	movs	r3, #0
    f3aa:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    f3ac:	47c8      	blx	r9
		if (ret < 0) {
    f3ae:	2800      	cmp	r0, #0
    f3b0:	da05      	bge.n	f3be <mqtt_client_tcp_write+0x3a>
    f3b2:	f00a fb2b 	bl	19a0c <z_impl_z_errno>
			return -errno;
    f3b6:	6800      	ldr	r0, [r0, #0]
    f3b8:	4240      	negs	r0, r0
}
    f3ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		offset += ret;
    f3be:	4404      	add	r4, r0
    f3c0:	e7e8      	b.n	f394 <mqtt_client_tcp_write+0x10>
    f3c2:	bf00      	nop
    f3c4:	20020ad8 	.word	0x20020ad8

0000f3c8 <mqtt_client_tcp_read>:
			 bool shall_block)
{
	int flags = 0;
	int ret;

	if (!shall_block) {
    f3c8:	2b00      	cmp	r3, #0
	return socket_ops->recv(sock, buf, max_len, flags);
    f3ca:	4b08      	ldr	r3, [pc, #32]	; (f3ec <mqtt_client_tcp_read+0x24>)
{
    f3cc:	b510      	push	{r4, lr}
    f3ce:	681b      	ldr	r3, [r3, #0]
    f3d0:	6a80      	ldr	r0, [r0, #40]	; 0x28
    f3d2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    f3d4:	bf0c      	ite	eq
    f3d6:	2340      	moveq	r3, #64	; 0x40
    f3d8:	2300      	movne	r3, #0
    f3da:	47a0      	blx	r4
		flags |= MSG_DONTWAIT;
	}

	ret = recv(client->transport.tcp.sock, data, buflen, flags);
	if (ret < 0) {
    f3dc:	2800      	cmp	r0, #0
    f3de:	da03      	bge.n	f3e8 <mqtt_client_tcp_read+0x20>
    f3e0:	f00a fb14 	bl	19a0c <z_impl_z_errno>
		return -errno;
    f3e4:	6800      	ldr	r0, [r0, #0]
    f3e6:	4240      	negs	r0, r0
	}

	return ret;
}
    f3e8:	bd10      	pop	{r4, pc}
    f3ea:	bf00      	nop
    f3ec:	20020ad8 	.word	0x20020ad8

0000f3f0 <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
    f3f0:	b508      	push	{r3, lr}
	return socket_ops->close(sock);
    f3f2:	4b07      	ldr	r3, [pc, #28]	; (f410 <mqtt_client_tcp_disconnect+0x20>)
    f3f4:	6a80      	ldr	r0, [r0, #40]	; 0x28
    f3f6:	681b      	ldr	r3, [r3, #0]
    f3f8:	685b      	ldr	r3, [r3, #4]
    f3fa:	4798      	blx	r3
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = close(client->transport.tcp.sock);
	if (ret < 0) {
    f3fc:	2800      	cmp	r0, #0
    f3fe:	da04      	bge.n	f40a <mqtt_client_tcp_disconnect+0x1a>
    f400:	f00a fb04 	bl	19a0c <z_impl_z_errno>
		return -errno;
    f404:	6800      	ldr	r0, [r0, #0]
    f406:	4240      	negs	r0, r0
	}

	return 0;
}
    f408:	bd08      	pop	{r3, pc}
	return 0;
    f40a:	2000      	movs	r0, #0
    f40c:	e7fc      	b.n	f408 <mqtt_client_tcp_disconnect+0x18>
    f40e:	bf00      	nop
    f410:	20020ad8 	.word	0x20020ad8

0000f414 <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_WEBSOCKET */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
    f414:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    f418:	4a01      	ldr	r2, [pc, #4]	; (f420 <mqtt_transport_connect+0xc>)
    f41a:	011b      	lsls	r3, r3, #4
    f41c:	58d3      	ldr	r3, [r2, r3]
    f41e:	4718      	bx	r3
    f420:	0001e138 	.word	0x0001e138

0000f424 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const u8_t *data,
			 u32_t datalen)
{
    f424:	b410      	push	{r4}
	return transport_fn[client->transport.type].write(client, data,
    f426:	4b04      	ldr	r3, [pc, #16]	; (f438 <mqtt_transport_write+0x14>)
    f428:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
    f42c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    f430:	685b      	ldr	r3, [r3, #4]
							  datalen);
}
    f432:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write(client, data,
    f436:	4718      	bx	r3
    f438:	0001e138 	.word	0x0001e138

0000f43c <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			bool shall_block)
{
    f43c:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].read(client, data, buflen,
    f43e:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
    f442:	4c03      	ldr	r4, [pc, #12]	; (f450 <mqtt_transport_read+0x14>)
    f444:	eb04 1405 	add.w	r4, r4, r5, lsl #4
    f448:	68a4      	ldr	r4, [r4, #8]
    f44a:	46a4      	mov	ip, r4
							 shall_block);
}
    f44c:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].read(client, data, buflen,
    f44e:	4760      	bx	ip
    f450:	0001e138 	.word	0x0001e138

0000f454 <sys_mutex_unlock>:
	return k_mutex_lock(&mutex->kernel_mutex, timeout);
}

static inline int sys_mutex_unlock(struct sys_mutex *mutex)
{
	if (mutex->kernel_mutex.lock_count == 0) {
    f454:	68c2      	ldr	r2, [r0, #12]
{
    f456:	b508      	push	{r3, lr}
	if (mutex->kernel_mutex.lock_count == 0) {
    f458:	b142      	cbz	r2, f46c <sys_mutex_unlock+0x18>
		return -EINVAL;
	}

	if (mutex->kernel_mutex.owner != _current) {
    f45a:	4b07      	ldr	r3, [pc, #28]	; (f478 <sys_mutex_unlock+0x24>)
    f45c:	6882      	ldr	r2, [r0, #8]
    f45e:	689b      	ldr	r3, [r3, #8]
    f460:	429a      	cmp	r2, r3
    f462:	d106      	bne.n	f472 <sys_mutex_unlock+0x1e>
	return z_impl_k_mutex_unlock(mutex);
    f464:	f00a fe60 	bl	1a128 <z_impl_k_mutex_unlock>
		return -EPERM;
	}

	k_mutex_unlock(&mutex->kernel_mutex);
	return 0;
    f468:	2000      	movs	r0, #0
}
    f46a:	bd08      	pop	{r3, pc}
		return -EINVAL;
    f46c:	f06f 0015 	mvn.w	r0, #21
    f470:	e7fb      	b.n	f46a <sys_mutex_unlock+0x16>
		return -EPERM;
    f472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f476:	e7f8      	b.n	f46a <sys_mutex_unlock+0x16>
    f478:	20021d60 	.word	0x20021d60

0000f47c <sys_rand32_get>:

static struct device *entropy_driver;

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
u32_t sys_rand32_get(void)
{
    f47c:	b513      	push	{r0, r1, r4, lr}
	struct device *dev = entropy_driver;
    f47e:	4c0a      	ldr	r4, [pc, #40]	; (f4a8 <sys_rand32_get+0x2c>)
    f480:	6820      	ldr	r0, [r4, #0]
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    f482:	b918      	cbnz	r0, f48c <sys_rand32_get+0x10>
    f484:	4809      	ldr	r0, [pc, #36]	; (f4ac <sys_rand32_get+0x30>)
    f486:	f00a fa9b 	bl	199c0 <z_impl_device_get_binding>
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
		__ASSERT((dev != NULL),
			"Device driver for %s (CONFIG_ENTROPY_NAME) not found. "
			"Check your build configuration!",
			CONFIG_ENTROPY_NAME);
		entropy_driver = dev;
    f48a:	6020      	str	r0, [r4, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    f48c:	2204      	movs	r2, #4
    f48e:	6843      	ldr	r3, [r0, #4]
    f490:	eb0d 0102 	add.w	r1, sp, r2
    f494:	681b      	ldr	r3, [r3, #0]
    f496:	4798      	blx	r3
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    f498:	2800      	cmp	r0, #0
    f49a:	da02      	bge.n	f4a2 <sys_rand32_get+0x26>
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
    f49c:	f7fe f9b0 	bl	d800 <z_timer_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    f4a0:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    f4a2:	9801      	ldr	r0, [sp, #4]
    f4a4:	b002      	add	sp, #8
    f4a6:	bd10      	pop	{r4, pc}
    f4a8:	20020b0c 	.word	0x20020b0c
    f4ac:	0001f9ea 	.word	0x0001f9ea

0000f4b0 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
    f4b0:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    f4b2:	4b09      	ldr	r3, [pc, #36]	; (f4d8 <gpio_nrfx_init+0x28>)
    f4b4:	781a      	ldrb	r2, [r3, #0]
    f4b6:	b96a      	cbnz	r2, f4d4 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    f4b8:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    f4ba:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
    f4bc:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    f4be:	2105      	movs	r1, #5
    f4c0:	f7fe fa58 	bl	d974 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
    f4c4:	2031      	movs	r0, #49	; 0x31
    f4c6:	f7fe fa45 	bl	d954 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    f4ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    f4ce:	4b03      	ldr	r3, [pc, #12]	; (f4dc <gpio_nrfx_init+0x2c>)
    f4d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    f4d4:	2000      	movs	r0, #0
    f4d6:	bd08      	pop	{r3, pc}
    f4d8:	2002206f 	.word	0x2002206f
    f4dc:	40031000 	.word	0x40031000

0000f4e0 <gpiote_pin_int_cfg>:
{
    f4e0:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
    f4e2:	6803      	ldr	r3, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
    f4e4:	6882      	ldr	r2, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f4e6:	689b      	ldr	r3, [r3, #8]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    f4e8:	4c51      	ldr	r4, [pc, #324]	; (f630 <gpiote_pin_int_cfg+0x150>)
    f4ea:	7918      	ldrb	r0, [r3, #4]
    f4ec:	f001 031f 	and.w	r3, r1, #31
    f4f0:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    f4f4:	2000      	movs	r0, #0
    f4f6:	f8d4 5304 	ldr.w	r5, [r4, #772]	; 0x304
    f4fa:	b2ed      	uxtb	r5, r5
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    f4fc:	f500 76a2 	add.w	r6, r0, #324	; 0x144
    f500:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
    f504:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    f508:	42b3      	cmp	r3, r6
    f50a:	d170      	bne.n	f5ee <gpiote_pin_int_cfg+0x10e>
		    && (intenset & BIT(i))) {
    f50c:	fa25 f600 	lsr.w	r6, r5, r0
    f510:	07f6      	lsls	r6, r6, #31
    f512:	d56c      	bpl.n	f5ee <gpiote_pin_int_cfg+0x10e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    f514:	0085      	lsls	r5, r0, #2
    f516:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    f51a:	f505 3544 	add.w	r5, r5, #200704	; 0x31000
    f51e:	f8d5 6510 	ldr.w	r6, [r5, #1296]	; 0x510
    f522:	f026 0601 	bic.w	r6, r6, #1
    f526:	f8c5 6510 	str.w	r6, [r5, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    f52a:	2501      	movs	r5, #1
    f52c:	fa05 f000 	lsl.w	r0, r5, r0
    p_reg->INTENCLR = mask;
    f530:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    f534:	4d3f      	ldr	r5, [pc, #252]	; (f634 <gpiote_pin_int_cfg+0x154>)
    f536:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    f53a:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    f53e:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    f542:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    f546:	6890      	ldr	r0, [r2, #8]
    f548:	40c8      	lsrs	r0, r1
    f54a:	f010 0001 	ands.w	r0, r0, #1
    f54e:	d04d      	beq.n	f5ec <gpiote_pin_int_cfg+0x10c>
    f550:	68d0      	ldr	r0, [r2, #12]
    f552:	40c8      	lsrs	r0, r1
    f554:	f010 0001 	ands.w	r0, r0, #1
    f558:	d048      	beq.n	f5ec <gpiote_pin_int_cfg+0x10c>
		if (data->trig_edge & BIT(pin)) {
    f55a:	6950      	ldr	r0, [r2, #20]
    f55c:	40c8      	lsrs	r0, r1
    f55e:	f010 0001 	ands.w	r0, r0, #1
    f562:	d050      	beq.n	f606 <gpiote_pin_int_cfg+0x126>
			if (data->double_edge & BIT(pin)) {
    f564:	6990      	ldr	r0, [r2, #24]
    f566:	40c8      	lsrs	r0, r1
    f568:	07c0      	lsls	r0, r0, #31
    f56a:	d444      	bmi.n	f5f6 <gpiote_pin_int_cfg+0x116>
			} else if (((data->active_level & BIT(pin)) != 0U)
    f56c:	6910      	ldr	r0, [r2, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    f56e:	69d2      	ldr	r2, [r2, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
    f570:	40c8      	lsrs	r0, r1
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    f572:	fa22 f101 	lsr.w	r1, r2, r1
			} else if (((data->active_level & BIT(pin)) != 0U)
    f576:	f000 0001 	and.w	r0, r0, #1
    f57a:	f001 0101 	and.w	r1, r1, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    f57e:	4288      	cmp	r0, r1
    f580:	bf14      	ite	ne
    f582:	2101      	movne	r1, #1
    f584:	2102      	moveq	r1, #2
    f586:	2500      	movs	r5, #0
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    f588:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    f58c:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
    f590:	f010 0003 	ands.w	r0, r0, #3
    f594:	d131      	bne.n	f5fa <gpiote_pin_int_cfg+0x11a>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    f596:	00aa      	lsls	r2, r5, #2
    f598:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    f59c:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
    f5a0:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f5a4:	021b      	lsls	r3, r3, #8
    f5a6:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    f5aa:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
    f5ae:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f5b2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
			nrf_gpiote_event_t evt =
    f5b6:	f105 0340 	add.w	r3, r5, #64	; 0x40
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    f5ba:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    f5be:	009b      	lsls	r3, r3, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f5c0:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    f5c4:	b29b      	uxth	r3, r3
    f5c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    f5ca:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f5ce:	4331      	orrs	r1, r6
    f5d0:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    f5d4:	6018      	str	r0, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    f5d6:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    f5da:	f043 0301 	orr.w	r3, r3, #1
    f5de:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    f5e2:	2301      	movs	r3, #1
    f5e4:	fa03 f505 	lsl.w	r5, r3, r5
    p_reg->INTENSET = mask;
    f5e8:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
}
    f5ec:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    f5ee:	3001      	adds	r0, #1
    f5f0:	2808      	cmp	r0, #8
    f5f2:	d183      	bne.n	f4fc <gpiote_pin_int_cfg+0x1c>
    f5f4:	e79e      	b.n	f534 <gpiote_pin_int_cfg+0x54>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    f5f6:	2103      	movs	r1, #3
    f5f8:	e7c5      	b.n	f586 <gpiote_pin_int_cfg+0xa6>
    f5fa:	3501      	adds	r5, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    f5fc:	2d08      	cmp	r5, #8
    f5fe:	d1c3      	bne.n	f588 <gpiote_pin_int_cfg+0xa8>
	return -ENODEV;
    f600:	f06f 0012 	mvn.w	r0, #18
    f604:	e7f2      	b.n	f5ec <gpiote_pin_int_cfg+0x10c>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    f606:	6913      	ldr	r3, [r2, #16]
    f608:	69d2      	ldr	r2, [r2, #28]
    f60a:	4053      	eors	r3, r2
    f60c:	fa23 f101 	lsr.w	r1, r3, r1
		return NRF_GPIO_PIN_SENSE_HIGH;
    f610:	f011 0f01 	tst.w	r1, #1
    f614:	bf14      	ite	ne
    f616:	f44f 3200 	movne.w	r2, #131072	; 0x20000
    f61a:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    f61e:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
    f622:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    f626:	4313      	orrs	r3, r2
    f628:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
    f62c:	e7de      	b.n	f5ec <gpiote_pin_int_cfg+0x10c>
    f62e:	bf00      	nop
    f630:	40031000 	.word	0x40031000
    f634:	40842500 	.word	0x40842500

0000f638 <gpio_nrfx_config>:
{
    f638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f63c:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
    f63e:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    f640:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
    f644:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
    f648:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    f64a:	d040      	beq.n	f6ce <gpio_nrfx_config+0x96>
    f64c:	dc09      	bgt.n	f662 <gpio_nrfx_config+0x2a>
    f64e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    f652:	d03e      	beq.n	f6d2 <gpio_nrfx_config+0x9a>
    f654:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    f658:	d03d      	beq.n	f6d6 <gpio_nrfx_config+0x9e>
    f65a:	b190      	cbz	r0, f682 <gpio_nrfx_config+0x4a>
		return -EINVAL;
    f65c:	f06f 0015 	mvn.w	r0, #21
    f660:	e032      	b.n	f6c8 <gpio_nrfx_config+0x90>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    f662:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
    f666:	d038      	beq.n	f6da <gpio_nrfx_config+0xa2>
    f668:	dc04      	bgt.n	f674 <gpio_nrfx_config+0x3c>
    f66a:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
    f66e:	d1f5      	bne.n	f65c <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
    f670:	2003      	movs	r0, #3
    f672:	e006      	b.n	f682 <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    f674:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    f678:	d031      	beq.n	f6de <gpio_nrfx_config+0xa6>
    f67a:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
    f67e:	d1ed      	bne.n	f65c <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
    f680:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    f682:	f406 7740 	and.w	r7, r6, #768	; 0x300
    f686:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
    f68a:	d02a      	beq.n	f6e2 <gpio_nrfx_config+0xaa>
		pull = NRF_GPIO_PIN_NOPULL;
    f68c:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
    f690:	4263      	negs	r3, r4
    f692:	4163      	adcs	r3, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
    f694:	2901      	cmp	r1, #1
		from_pin = pin;
    f696:	bf19      	ittee	ne
    f698:	b2d4      	uxtbne	r4, r2
		to_pin   = pin;
    f69a:	46a1      	movne	r9, r4
		to_pin   = 31U;
    f69c:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
    f6a0:	2400      	moveq	r4, #0
    f6a2:	f04f 0b01 	mov.w	fp, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
    f6a6:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    f6aa:	ea4f 074c 	mov.w	r7, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    f6ae:	ea47 070c 	orr.w	r7, r7, ip
    f6b2:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f6b6:	f8df a0a0 	ldr.w	sl, [pc, #160]	; f758 <gpio_nrfx_config+0x120>
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    f6ba:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    f6be:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    f6c2:	45a1      	cmp	r9, r4
    f6c4:	d20f      	bcs.n	f6e6 <gpio_nrfx_config+0xae>
	return 0;
    f6c6:	2000      	movs	r0, #0
}
    f6c8:	b003      	add	sp, #12
    f6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
    f6ce:	2002      	movs	r0, #2
    f6d0:	e7d7      	b.n	f682 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
    f6d2:	2001      	movs	r0, #1
    f6d4:	e7d5      	b.n	f682 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
    f6d6:	2004      	movs	r0, #4
    f6d8:	e7d3      	b.n	f682 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
    f6da:	2005      	movs	r0, #5
    f6dc:	e7d1      	b.n	f682 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
    f6de:	2006      	movs	r0, #6
    f6e0:	e7cf      	b.n	f682 <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
    f6e2:	2303      	movs	r3, #3
    f6e4:	e7d6      	b.n	f694 <gpio_nrfx_config+0x5c>
	return port->config->config_info;
    f6e6:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    f6ea:	6892      	ldr	r2, [r2, #8]
    f6ec:	7911      	ldrb	r1, [r2, #4]
    f6ee:	f004 021f 	and.w	r2, r4, #31
    f6f2:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f6f6:	3280      	adds	r2, #128	; 0x80
    f6f8:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    f6fc:	68a9      	ldr	r1, [r5, #8]
    f6fe:	fa0b f204 	lsl.w	r2, fp, r4
    f702:	2b00      	cmp	r3, #0
    f704:	d025      	beq.n	f752 <gpio_nrfx_config+0x11a>
    f706:	4311      	orrs	r1, r2
    f708:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    f70a:	6969      	ldr	r1, [r5, #20]
    f70c:	06b0      	lsls	r0, r6, #26
    f70e:	bf4c      	ite	mi
    f710:	4311      	orrmi	r1, r2
    f712:	4391      	bicpl	r1, r2
    f714:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
    f716:	69a9      	ldr	r1, [r5, #24]
    f718:	0670      	lsls	r0, r6, #25
    f71a:	bf4c      	ite	mi
    f71c:	4311      	orrmi	r1, r2
    f71e:	4391      	bicpl	r1, r2
    f720:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
    f722:	6929      	ldr	r1, [r5, #16]
    f724:	0770      	lsls	r0, r6, #29
    f726:	bf4c      	ite	mi
    f728:	4311      	orrmi	r1, r2
    f72a:	4391      	bicpl	r1, r2
    f72c:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    f72e:	69e9      	ldr	r1, [r5, #28]
    f730:	0630      	lsls	r0, r6, #24
    f732:	bf4c      	ite	mi
    f734:	430a      	orrmi	r2, r1
    f736:	ea21 0202 	bicpl.w	r2, r1, r2
    f73a:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    f73c:	4621      	mov	r1, r4
    f73e:	4640      	mov	r0, r8
    f740:	9301      	str	r3, [sp, #4]
    f742:	f7ff fecd 	bl	f4e0 <gpiote_pin_int_cfg>
		if (res != 0) {
    f746:	2800      	cmp	r0, #0
    f748:	d1be      	bne.n	f6c8 <gpio_nrfx_config+0x90>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    f74a:	3401      	adds	r4, #1
    f74c:	b2e4      	uxtb	r4, r4
    f74e:	9b01      	ldr	r3, [sp, #4]
    f750:	e7b7      	b.n	f6c2 <gpio_nrfx_config+0x8a>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    f752:	ea21 0102 	bic.w	r1, r1, r2
    f756:	e7d7      	b.n	f708 <gpio_nrfx_config+0xd0>
    f758:	40842500 	.word	0x40842500

0000f75c <gpiote_event_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f75c:	494f      	ldr	r1, [pc, #316]	; (f89c <gpiote_event_handler+0x140>)
{
    f75e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f762:	680d      	ldr	r5, [r1, #0]
	if (port_event) {
    f764:	2d00      	cmp	r5, #0
    f766:	d060      	beq.n	f82a <gpiote_event_handler+0xce>
	struct gpio_nrfx_data *data = get_port_data(port);
    f768:	4b4d      	ldr	r3, [pc, #308]	; (f8a0 <gpiote_event_handler+0x144>)
	u32_t pin = 0U;
    f76a:	2600      	movs	r6, #0
	struct gpio_nrfx_data *data = get_port_data(port);
    f76c:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
    f76e:	681b      	ldr	r3, [r3, #0]
    f770:	f8df e138 	ldr.w	lr, [pc, #312]	; f8ac <gpiote_event_handler+0x150>
    f774:	689f      	ldr	r7, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    f776:	e9d2 0302 	ldrd	r0, r3, [r2, #8]
    f77a:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
    f77c:	e9d2 0405 	ldrd	r0, r4, [r2, #20]
    f780:	4320      	orrs	r0, r4
    f782:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    f786:	6838      	ldr	r0, [r7, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    f788:	69d4      	ldr	r4, [r2, #28]
    f78a:	6912      	ldr	r2, [r2, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
    f78c:	6900      	ldr	r0, [r0, #16]
    f78e:	4054      	eors	r4, r2
    f790:	4044      	eors	r4, r0
	u32_t bit = 1U << pin;
    f792:	2001      	movs	r0, #1
	u32_t out = pin_states & level_pins;
    f794:	ea23 0404 	bic.w	r4, r3, r4
	while (level_pins) {
    f798:	bb93      	cbnz	r3, f800 <gpiote_event_handler+0xa4>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    f79a:	600b      	str	r3, [r1, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
    f79c:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    f79e:	2001      	movs	r0, #1
    f7a0:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    f7a2:	4940      	ldr	r1, [pc, #256]	; (f8a4 <gpiote_event_handler+0x148>)
    f7a4:	4e40      	ldr	r6, [pc, #256]	; (f8a8 <gpiote_event_handler+0x14c>)
    f7a6:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
    f7aa:	fa00 fc03 	lsl.w	ip, r0, r3
    f7ae:	ea1c 0f02 	tst.w	ip, r2
    f7b2:	d00d      	beq.n	f7d0 <gpiote_event_handler+0x74>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f7b4:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
    f7b8:	b152      	cbz	r2, f7d0 <gpiote_event_handler+0x74>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    f7ba:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    f7be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    f7c2:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    f7c6:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    f7ca:	fa00 f202 	lsl.w	r2, r0, r2
    f7ce:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    f7d0:	3301      	adds	r3, #1
    f7d2:	2b08      	cmp	r3, #8
    f7d4:	d1e7      	bne.n	f7a6 <gpiote_event_handler+0x4a>
	if (fired_triggers[0]) {
    f7d6:	bb54      	cbnz	r4, f82e <gpiote_event_handler+0xd2>
	if (port_event) {
    f7d8:	b185      	cbz	r5, f7fc <gpiote_event_handler+0xa0>
	u32_t bit = 1U << pin;
    f7da:	2401      	movs	r4, #1
	u32_t pin = 0U;
    f7dc:	2500      	movs	r5, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
    f7de:	4b30      	ldr	r3, [pc, #192]	; (f8a0 <gpiote_event_handler+0x144>)
    f7e0:	f8df c0c8 	ldr.w	ip, [pc, #200]	; f8ac <gpiote_event_handler+0x150>
    f7e4:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
    f7e6:	681b      	ldr	r3, [r3, #0]
    f7e8:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    f7ea:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
    f7ee:	400b      	ands	r3, r1
	out &= ~data->trig_edge & ~data->double_edge;
    f7f0:	e9d2 1005 	ldrd	r1, r0, [r2, #20]
    f7f4:	4301      	orrs	r1, r0
    f7f6:	ea23 0301 	bic.w	r3, r3, r1
	while (level_pins) {
    f7fa:	bb7b      	cbnz	r3, f85c <gpiote_event_handler+0x100>
}
    f7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    f800:	4203      	tst	r3, r0
    f802:	d00f      	beq.n	f824 <gpiote_event_handler+0xc8>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f804:	f897 c004 	ldrb.w	ip, [r7, #4]
    f808:	f006 021f 	and.w	r2, r6, #31
    f80c:	ea42 124c 	orr.w	r2, r2, ip, lsl #5
    f810:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    f814:	f8d2 c200 	ldr.w	ip, [r2, #512]	; 0x200
			level_pins &= ~bit;
    f818:	ea23 0300 	bic.w	r3, r3, r0
    f81c:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    f820:	f8c2 c200 	str.w	ip, [r2, #512]	; 0x200
		++pin;
    f824:	3601      	adds	r6, #1
		bit <<= 1;
    f826:	0040      	lsls	r0, r0, #1
    f828:	e7b6      	b.n	f798 <gpiote_event_handler+0x3c>
	u32_t fired_triggers[GPIO_COUNT] = {0};
    f82a:	462c      	mov	r4, r5
    f82c:	e7b6      	b.n	f79c <gpiote_event_handler+0x40>
	struct gpio_nrfx_data *data = get_port_data(port);
    f82e:	4f1c      	ldr	r7, [pc, #112]	; (f8a0 <gpiote_event_handler+0x144>)
    f830:	f8d7 8008 	ldr.w	r8, [r7, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    f834:	f8d8 1000 	ldr.w	r1, [r8]
    f838:	2900      	cmp	r1, #0
    f83a:	d0cd      	beq.n	f7d8 <gpiote_event_handler+0x7c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    f83c:	680e      	ldr	r6, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
    f83e:	f8d8 300c 	ldr.w	r3, [r8, #12]
    f842:	688a      	ldr	r2, [r1, #8]
    f844:	4023      	ands	r3, r4
    f846:	4213      	tst	r3, r2
    f848:	d003      	beq.n	f852 <gpiote_event_handler+0xf6>
			cb->handler(port, cb, pins);
    f84a:	684b      	ldr	r3, [r1, #4]
    f84c:	4622      	mov	r2, r4
    f84e:	4638      	mov	r0, r7
    f850:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    f852:	2e00      	cmp	r6, #0
    f854:	d0c0      	beq.n	f7d8 <gpiote_event_handler+0x7c>
    f856:	4631      	mov	r1, r6
    f858:	6836      	ldr	r6, [r6, #0]
    f85a:	e7f0      	b.n	f83e <gpiote_event_handler+0xe2>
		if (level_pins & bit) {
    f85c:	421c      	tst	r4, r3
    f85e:	d01a      	beq.n	f896 <gpiote_event_handler+0x13a>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f860:	7930      	ldrb	r0, [r6, #4]
    f862:	f005 011f 	and.w	r1, r5, #31
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    f866:	69d7      	ldr	r7, [r2, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f868:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    f86c:	6910      	ldr	r0, [r2, #16]
    f86e:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    f872:	4078      	eors	r0, r7
    f874:	40e8      	lsrs	r0, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
    f876:	f010 0f01 	tst.w	r0, #1
    f87a:	bf14      	ite	ne
    f87c:	f44f 3700 	movne.w	r7, #131072	; 0x20000
    f880:	f44f 3740 	moveq.w	r7, #196608	; 0x30000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    f884:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
			level_pins &= ~bit;
    f888:	ea23 0304 	bic.w	r3, r3, r4
    f88c:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    f890:	4338      	orrs	r0, r7
    f892:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
		++pin;
    f896:	3501      	adds	r5, #1
		bit <<= 1;
    f898:	0064      	lsls	r4, r4, #1
    f89a:	e7ae      	b.n	f7fa <gpiote_event_handler+0x9e>
    f89c:	4003117c 	.word	0x4003117c
    f8a0:	200268a8 	.word	0x200268a8
    f8a4:	40031000 	.word	0x40031000
    f8a8:	40031100 	.word	0x40031100
    f8ac:	40842500 	.word	0x40842500

0000f8b0 <_bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
    f8b0:	2200      	movs	r2, #0
{
    f8b2:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
    f8b4:	4611      	mov	r1, r2
    f8b6:	202a      	movs	r0, #42	; 0x2a
    f8b8:	f7fe f85c 	bl	d974 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	init_ret = bsd_init();
    f8bc:	f003 ffc8 	bl	13850 <bsd_init>
    f8c0:	4b01      	ldr	r3, [pc, #4]	; (f8c8 <_bsdlib_init+0x18>)
    f8c2:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
    f8c4:	2000      	movs	r0, #0
    f8c6:	bd08      	pop	{r3, pc}
    f8c8:	20020b30 	.word	0x20020b30

0000f8cc <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
    f8cc:	b570      	push	{r4, r5, r6, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
    f8ce:	4b0d      	ldr	r3, [pc, #52]	; (f904 <thread_monitor_entry_get+0x38>)
	struct thread_monitor_entry *new_entry = thread_event_monitor;
    f8d0:	4c0d      	ldr	r4, [pc, #52]	; (f908 <thread_monitor_entry_get+0x3c>)
		entry_age = rpc_event_cnt - entry->cnt;
    f8d2:	681a      	ldr	r2, [r3, #0]
    f8d4:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
    f8d6:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
    f8d8:	4623      	mov	r3, r4
		if (entry->id == id) {
    f8da:	6819      	ldr	r1, [r3, #0]
    f8dc:	4281      	cmp	r1, r0
    f8de:	d00e      	beq.n	f8fe <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
    f8e0:	b151      	cbz	r1, f8f8 <thread_monitor_entry_get+0x2c>
		entry_age = rpc_event_cnt - entry->cnt;
    f8e2:	6859      	ldr	r1, [r3, #4]
    f8e4:	1a51      	subs	r1, r2, r1
		if (entry_age > oldest_entry_age) {
    f8e6:	42b1      	cmp	r1, r6
    f8e8:	bfc4      	itt	gt
    f8ea:	461c      	movgt	r4, r3
    f8ec:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    f8ee:	3d01      	subs	r5, #1
    f8f0:	f103 0308 	add.w	r3, r3, #8
    f8f4:	d1f1      	bne.n	f8da <thread_monitor_entry_get+0xe>
    f8f6:	4623      	mov	r3, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
    f8f8:	3a01      	subs	r2, #1
	new_entry->id = id;
    f8fa:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
    f8fc:	605a      	str	r2, [r3, #4]

	return new_entry;
}
    f8fe:	4618      	mov	r0, r3
    f900:	bd70      	pop	{r4, r5, r6, pc}
    f902:	bf00      	nop
    f904:	20020b34 	.word	0x20020b34
    f908:	20020b40 	.word	0x20020b40

0000f90c <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
    f90c:	4668      	mov	r0, sp
    f90e:	f020 0107 	bic.w	r1, r0, #7
    f912:	468d      	mov	sp, r1
    f914:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    f916:	4b0d      	ldr	r3, [pc, #52]	; (f94c <rpc_proxy_irq_handler+0x40>)
    f918:	e8d3 2fef 	ldaex	r2, [r3]
    f91c:	3201      	adds	r2, #1
    f91e:	e8c3 2fe1 	stlex	r1, r2, [r3]
    f922:	2900      	cmp	r1, #0
    f924:	d1f8      	bne.n	f918 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
    f926:	f008 f8c5 	bl	17ab4 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
    f92a:	4b09      	ldr	r3, [pc, #36]	; (f950 <rpc_proxy_irq_handler+0x44>)
    f92c:	681c      	ldr	r4, [r3, #0]
    f92e:	b93c      	cbnz	r4, f940 <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
    f930:	f7fe f838 	bl	d9a4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
    f934:	f7fd ff7e 	bl	d834 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
    f938:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
    f93c:	4685      	mov	sp, r0
    f93e:	4770      	bx	lr
	z_impl_k_sem_give(sem);
    f940:	1d20      	adds	r0, r4, #4
    f942:	f00a ffa3 	bl	1a88c <z_impl_k_sem_give>
    f946:	6824      	ldr	r4, [r4, #0]
	return node->next;
    f948:	e7f1      	b.n	f92e <rpc_proxy_irq_handler+0x22>
    f94a:	bf00      	nop
    f94c:	20020b34 	.word	0x20020b34
    f950:	20020b38 	.word	0x20020b38

0000f954 <bsd_os_timedwait>:
{
    f954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f958:	4688      	mov	r8, r1
    f95a:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_get();
    f95c:	f00e f8bb 	bl	1dad6 <z_impl_k_uptime_get>
	if (*timeout == 0) {
    f960:	f8d8 3000 	ldr.w	r3, [r8]
    f964:	4606      	mov	r6, r0
    f966:	2b00      	cmp	r3, #0
    f968:	460f      	mov	r7, r1
    f96a:	d103      	bne.n	f974 <bsd_os_timedwait+0x20>
	z_impl_k_yield();
    f96c:	f00a ff14 	bl	1a798 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
    f970:	203c      	movs	r0, #60	; 0x3c
    f972:	e06e      	b.n	fa52 <bsd_os_timedwait+0xfe>
		*timeout = K_FOREVER;
    f974:	bfbc      	itt	lt
    f976:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    f97a:	f8c8 3000 	strlt.w	r3, [r8]
	return z_impl_k_sem_init(sem, initial_count, limit);
    f97e:	2201      	movs	r2, #1
    f980:	2100      	movs	r1, #0
    f982:	a802      	add	r0, sp, #8
    f984:	f00d ffd6 	bl	1d934 <z_impl_k_sem_init>
    f988:	f10d 0a04 	add.w	sl, sp, #4
    f98c:	f04f 0320 	mov.w	r3, #32
    f990:	f3ef 8b11 	mrs	fp, BASEPRI
    f994:	f383 8811 	msr	BASEPRI, r3
    f998:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    f99c:	f00a ff70 	bl	1a880 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
    f9a0:	f7ff ff94 	bl	f8cc <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
    f9a4:	4933      	ldr	r1, [pc, #204]	; (fa74 <bsd_os_timedwait+0x120>)
    f9a6:	6843      	ldr	r3, [r0, #4]
    f9a8:	680a      	ldr	r2, [r1, #0]
    f9aa:	4689      	mov	r9, r1
    f9ac:	4293      	cmp	r3, r2
    f9ae:	f04f 0300 	mov.w	r3, #0
    f9b2:	d108      	bne.n	f9c6 <bsd_os_timedwait+0x72>
	parent->next = child;
    f9b4:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
    f9b6:	4b30      	ldr	r3, [pc, #192]	; (fa78 <bsd_os_timedwait+0x124>)
    f9b8:	685a      	ldr	r2, [r3, #4]
    f9ba:	2a00      	cmp	r2, #0
    f9bc:	d14c      	bne.n	fa58 <bsd_os_timedwait+0x104>
	list->head = node;
    f9be:	e9c3 aa00 	strd	sl, sl, [r3]
		allow_to_sleep = true;
    f9c2:	2301      	movs	r3, #1
    f9c4:	e000      	b.n	f9c8 <bsd_os_timedwait+0x74>
	entry->cnt = rpc_event_cnt;
    f9c6:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
    f9c8:	f38b 8811 	msr	BASEPRI, fp
    f9cc:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
    f9d0:	2b00      	cmp	r3, #0
    f9d2:	d03d      	beq.n	fa50 <bsd_os_timedwait+0xfc>
	(void)k_sem_take(&thread.sem, *timeout);
    f9d4:	f8d8 1000 	ldr.w	r1, [r8]
	return z_impl_k_sem_take(sem, timeout);
    f9d8:	a802      	add	r0, sp, #8
    f9da:	f00a ff83 	bl	1a8e4 <z_impl_k_sem_take>
	__asm__ volatile(
    f9de:	f04f 0320 	mov.w	r3, #32
    f9e2:	f3ef 8b11 	mrs	fp, BASEPRI
    f9e6:	f383 8811 	msr	BASEPRI, r3
    f9ea:	f3bf 8f6f 	isb	sy
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f9ee:	2000      	movs	r0, #0
    f9f0:	4b21      	ldr	r3, [pc, #132]	; (fa78 <bsd_os_timedwait+0x124>)
    f9f2:	681a      	ldr	r2, [r3, #0]
    f9f4:	b152      	cbz	r2, fa0c <bsd_os_timedwait+0xb8>
    f9f6:	4552      	cmp	r2, sl
    f9f8:	d139      	bne.n	fa6e <bsd_os_timedwait+0x11a>
Z_GENLIST_REMOVE(slist, snode)
    f9fa:	9901      	ldr	r1, [sp, #4]
    f9fc:	bb88      	cbnz	r0, fa62 <bsd_os_timedwait+0x10e>
    f9fe:	6858      	ldr	r0, [r3, #4]
	list->head = node;
    fa00:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    fa02:	4290      	cmp	r0, r2
    fa04:	d100      	bne.n	fa08 <bsd_os_timedwait+0xb4>
	list->tail = node;
    fa06:	6059      	str	r1, [r3, #4]
	parent->next = child;
    fa08:	2300      	movs	r3, #0
    fa0a:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
    fa0c:	f00a ff38 	bl	1a880 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
    fa10:	f7ff ff5c 	bl	f8cc <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
    fa14:	f8d9 3000 	ldr.w	r3, [r9]
    fa18:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
    fa1a:	f38b 8811 	msr	BASEPRI, fp
    fa1e:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
    fa22:	f8d8 9000 	ldr.w	r9, [r8]
    fa26:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    fa2a:	d011      	beq.n	fa50 <bsd_os_timedwait+0xfc>
	return z_impl_k_uptime_get();
    fa2c:	f00e f853 	bl	1dad6 <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
    fa30:	eb16 0209 	adds.w	r2, r6, r9
    fa34:	eb47 73e9 	adc.w	r3, r7, r9, asr #31
    fa38:	1a14      	subs	r4, r2, r0
    fa3a:	eb63 0501 	sbc.w	r5, r3, r1
	*timeout = remaining > 0 ? remaining : 0;
    fa3e:	2c00      	cmp	r4, #0
    fa40:	f175 0300 	sbcs.w	r3, r5, #0
    fa44:	bfb8      	it	lt
    fa46:	2400      	movlt	r4, #0
    fa48:	f8c8 4000 	str.w	r4, [r8]
	if (*timeout == 0) {
    fa4c:	2c00      	cmp	r4, #0
    fa4e:	d08f      	beq.n	f970 <bsd_os_timedwait+0x1c>
	return 0;
    fa50:	2000      	movs	r0, #0
}
    fa52:	b009      	add	sp, #36	; 0x24
    fa54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fa58:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    fa5c:	f8c3 a004 	str.w	sl, [r3, #4]
    fa60:	e7af      	b.n	f9c2 <bsd_os_timedwait+0x6e>
	parent->next = child;
    fa62:	6001      	str	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    fa64:	6859      	ldr	r1, [r3, #4]
    fa66:	4291      	cmp	r1, r2
	list->tail = node;
    fa68:	bf08      	it	eq
    fa6a:	6058      	streq	r0, [r3, #4]
    fa6c:	e7cc      	b.n	fa08 <bsd_os_timedwait+0xb4>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    fa6e:	4610      	mov	r0, r2
    fa70:	6812      	ldr	r2, [r2, #0]
    fa72:	e7bf      	b.n	f9f4 <bsd_os_timedwait+0xa0>
    fa74:	20020b34 	.word	0x20020b34
    fa78:	20020b38 	.word	0x20020b38

0000fa7c <bsd_os_errno_set>:
	switch (err_code) {
    fa7c:	282d      	cmp	r0, #45	; 0x2d
{
    fa7e:	b510      	push	{r4, lr}
    fa80:	4604      	mov	r4, r0
	switch (err_code) {
    fa82:	d00c      	beq.n	fa9e <bsd_os_errno_set+0x22>
    fa84:	dc38      	bgt.n	faf8 <bsd_os_errno_set+0x7c>
    fa86:	280e      	cmp	r0, #14
    fa88:	d009      	beq.n	fa9e <bsd_os_errno_set+0x22>
    fa8a:	dc11      	bgt.n	fab0 <bsd_os_errno_set+0x34>
    fa8c:	2808      	cmp	r0, #8
    fa8e:	d006      	beq.n	fa9e <bsd_os_errno_set+0x22>
    fa90:	dc09      	bgt.n	faa6 <bsd_os_errno_set+0x2a>
    fa92:	2802      	cmp	r0, #2
    fa94:	d003      	beq.n	fa9e <bsd_os_errno_set+0x22>
    fa96:	2805      	cmp	r0, #5
    fa98:	d001      	beq.n	fa9e <bsd_os_errno_set+0x22>
    fa9a:	2801      	cmp	r0, #1
    fa9c:	d119      	bne.n	fad2 <bsd_os_errno_set+0x56>
		errno = ETIMEDOUT;
    fa9e:	f00c ff82 	bl	1c9a6 <z_errno>
    faa2:	6004      	str	r4, [r0, #0]
}
    faa4:	bd10      	pop	{r4, pc}
	switch (err_code) {
    faa6:	280c      	cmp	r0, #12
    faa8:	d0f9      	beq.n	fa9e <bsd_os_errno_set+0x22>
    faaa:	dc57      	bgt.n	fb5c <bsd_os_errno_set+0xe0>
    faac:	2809      	cmp	r0, #9
    faae:	e7f5      	b.n	fa9c <bsd_os_errno_set+0x20>
    fab0:	2828      	cmp	r0, #40	; 0x28
    fab2:	f000 8083 	beq.w	fbbc <bsd_os_errno_set+0x140>
    fab6:	dc05      	bgt.n	fac4 <bsd_os_errno_set+0x48>
    fab8:	2818      	cmp	r0, #24
    faba:	d0f0      	beq.n	fa9e <bsd_os_errno_set+0x22>
    fabc:	2823      	cmp	r0, #35	; 0x23
    fabe:	d052      	beq.n	fb66 <bsd_os_errno_set+0xea>
    fac0:	2816      	cmp	r0, #22
    fac2:	e7eb      	b.n	fa9c <bsd_os_errno_set+0x20>
    fac4:	282a      	cmp	r0, #42	; 0x2a
    fac6:	d0ea      	beq.n	fa9e <bsd_os_errno_set+0x22>
    fac8:	db51      	blt.n	fb6e <bsd_os_errno_set+0xf2>
    faca:	282b      	cmp	r0, #43	; 0x2b
    facc:	d0e7      	beq.n	fa9e <bsd_os_errno_set+0x22>
    face:	282c      	cmp	r0, #44	; 0x2c
    fad0:	d051      	beq.n	fb76 <bsd_os_errno_set+0xfa>
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
    fad2:	2301      	movs	r3, #1
    fad4:	f04f 0200 	mov.w	r2, #0
    fad8:	493a      	ldr	r1, [pc, #232]	; (fbc4 <bsd_os_errno_set+0x148>)
    fada:	f363 0207 	bfi	r2, r3, #0, #8
    fade:	4b3a      	ldr	r3, [pc, #232]	; (fbc8 <bsd_os_errno_set+0x14c>)
    fae0:	483a      	ldr	r0, [pc, #232]	; (fbcc <bsd_os_errno_set+0x150>)
    fae2:	1a5b      	subs	r3, r3, r1
    fae4:	08db      	lsrs	r3, r3, #3
    fae6:	f363 128f 	bfi	r2, r3, #6, #10
    faea:	4621      	mov	r1, r4
    faec:	f00b fdee 	bl	1b6cc <log_1>
		errno = 0xBAADBAAD;
    faf0:	f00c ff59 	bl	1c9a6 <z_errno>
    faf4:	4b36      	ldr	r3, [pc, #216]	; (fbd0 <bsd_os_errno_set+0x154>)
    faf6:	e034      	b.n	fb62 <bsd_os_errno_set+0xe6>
	switch (err_code) {
    faf8:	283c      	cmp	r0, #60	; 0x3c
    fafa:	d0d0      	beq.n	fa9e <bsd_os_errno_set+0x22>
    fafc:	dc15      	bgt.n	fb2a <bsd_os_errno_set+0xae>
    fafe:	2833      	cmp	r0, #51	; 0x33
    fb00:	d0cd      	beq.n	fa9e <bsd_os_errno_set+0x22>
    fb02:	dc05      	bgt.n	fb10 <bsd_os_errno_set+0x94>
    fb04:	2830      	cmp	r0, #48	; 0x30
    fb06:	d0ca      	beq.n	fa9e <bsd_os_errno_set+0x22>
    fb08:	2832      	cmp	r0, #50	; 0x32
    fb0a:	d038      	beq.n	fb7e <bsd_os_errno_set+0x102>
    fb0c:	282f      	cmp	r0, #47	; 0x2f
    fb0e:	e7c5      	b.n	fa9c <bsd_os_errno_set+0x20>
    fb10:	2836      	cmp	r0, #54	; 0x36
    fb12:	d0c4      	beq.n	fa9e <bsd_os_errno_set+0x22>
    fb14:	dc01      	bgt.n	fb1a <bsd_os_errno_set+0x9e>
    fb16:	2834      	cmp	r0, #52	; 0x34
    fb18:	e7c0      	b.n	fa9c <bsd_os_errno_set+0x20>
    fb1a:	2838      	cmp	r0, #56	; 0x38
    fb1c:	d0bf      	beq.n	fa9e <bsd_os_errno_set+0x22>
    fb1e:	2839      	cmp	r0, #57	; 0x39
    fb20:	d1d7      	bne.n	fad2 <bsd_os_errno_set+0x56>
		errno = ENOTCONN;
    fb22:	f00c ff40 	bl	1c9a6 <z_errno>
    fb26:	2339      	movs	r3, #57	; 0x39
    fb28:	e01b      	b.n	fb62 <bsd_os_errno_set+0xe6>
	switch (err_code) {
    fb2a:	287d      	cmp	r0, #125	; 0x7d
    fb2c:	d033      	beq.n	fb96 <bsd_os_errno_set+0x11a>
    fb2e:	dc09      	bgt.n	fb44 <bsd_os_errno_set+0xc8>
    fb30:	2870      	cmp	r0, #112	; 0x70
    fb32:	d028      	beq.n	fb86 <bsd_os_errno_set+0x10a>
    fb34:	2873      	cmp	r0, #115	; 0x73
    fb36:	d02a      	beq.n	fb8e <bsd_os_errno_set+0x112>
    fb38:	2869      	cmp	r0, #105	; 0x69
    fb3a:	d1ca      	bne.n	fad2 <bsd_os_errno_set+0x56>
		errno = ENOBUFS;
    fb3c:	f00c ff33 	bl	1c9a6 <z_errno>
    fb40:	2337      	movs	r3, #55	; 0x37
    fb42:	e00e      	b.n	fb62 <bsd_os_errno_set+0xe6>
	switch (err_code) {
    fb44:	287f      	cmp	r0, #127	; 0x7f
    fb46:	d02f      	beq.n	fba8 <bsd_os_errno_set+0x12c>
    fb48:	db29      	blt.n	fb9e <bsd_os_errno_set+0x122>
    fb4a:	2880      	cmp	r0, #128	; 0x80
    fb4c:	d031      	beq.n	fbb2 <bsd_os_errno_set+0x136>
    fb4e:	2881      	cmp	r0, #129	; 0x81
    fb50:	d1bf      	bne.n	fad2 <bsd_os_errno_set+0x56>
		errno = EKEYREJECTED;
    fb52:	f00c ff28 	bl	1c9a6 <z_errno>
    fb56:	f240 73d4 	movw	r3, #2004	; 0x7d4
    fb5a:	e002      	b.n	fb62 <bsd_os_errno_set+0xe6>
		errno = EACCES;
    fb5c:	f00c ff23 	bl	1c9a6 <z_errno>
    fb60:	230d      	movs	r3, #13
		errno = 0xBAADBAAD;
    fb62:	6003      	str	r3, [r0, #0]
}
    fb64:	e79e      	b.n	faa4 <bsd_os_errno_set+0x28>
		errno = EAGAIN;
    fb66:	f00c ff1e 	bl	1c9a6 <z_errno>
    fb6a:	230b      	movs	r3, #11
    fb6c:	e7f9      	b.n	fb62 <bsd_os_errno_set+0xe6>
		errno = EPROTOTYPE;
    fb6e:	f00c ff1a 	bl	1c9a6 <z_errno>
    fb72:	2329      	movs	r3, #41	; 0x29
    fb74:	e7f5      	b.n	fb62 <bsd_os_errno_set+0xe6>
		errno = ESOCKTNOSUPPORT;
    fb76:	f00c ff16 	bl	1c9a6 <z_errno>
    fb7a:	232c      	movs	r3, #44	; 0x2c
    fb7c:	e7f1      	b.n	fb62 <bsd_os_errno_set+0xe6>
		errno = ENETDOWN;
    fb7e:	f00c ff12 	bl	1c9a6 <z_errno>
    fb82:	233e      	movs	r3, #62	; 0x3e
    fb84:	e7ed      	b.n	fb62 <bsd_os_errno_set+0xe6>
		errno = EHOSTDOWN;
    fb86:	f00c ff0e 	bl	1c9a6 <z_errno>
    fb8a:	2343      	movs	r3, #67	; 0x43
    fb8c:	e7e9      	b.n	fb62 <bsd_os_errno_set+0xe6>
		errno = EINPROGRESS;
    fb8e:	f00c ff0a 	bl	1c9a6 <z_errno>
    fb92:	2344      	movs	r3, #68	; 0x44
    fb94:	e7e5      	b.n	fb62 <bsd_os_errno_set+0xe6>
		errno = ECANCELED;
    fb96:	f00c ff06 	bl	1c9a6 <z_errno>
    fb9a:	2348      	movs	r3, #72	; 0x48
    fb9c:	e7e1      	b.n	fb62 <bsd_os_errno_set+0xe6>
		errno = ENOKEY;
    fb9e:	f00c ff02 	bl	1c9a6 <z_errno>
    fba2:	f240 73d1 	movw	r3, #2001	; 0x7d1
    fba6:	e7dc      	b.n	fb62 <bsd_os_errno_set+0xe6>
		errno = EKEYEXPIRED;
    fba8:	f00c fefd 	bl	1c9a6 <z_errno>
    fbac:	f240 73d2 	movw	r3, #2002	; 0x7d2
    fbb0:	e7d7      	b.n	fb62 <bsd_os_errno_set+0xe6>
		errno = EKEYREVOKED;
    fbb2:	f00c fef8 	bl	1c9a6 <z_errno>
    fbb6:	f240 73d3 	movw	r3, #2003	; 0x7d3
    fbba:	e7d2      	b.n	fb62 <bsd_os_errno_set+0xe6>
		errno = EMSGSIZE;
    fbbc:	f00c fef3 	bl	1c9a6 <z_errno>
    fbc0:	2324      	movs	r3, #36	; 0x24
    fbc2:	e7ce      	b.n	fb62 <bsd_os_errno_set+0xe6>
    fbc4:	0001e02c 	.word	0x0001e02c
    fbc8:	0001e04c 	.word	0x0001e04c
    fbcc:	0001f9fb 	.word	0x0001f9fb
    fbd0:	baadbaad 	.word	0xbaadbaad

0000fbd4 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fbd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    fbd8:	4b01      	ldr	r3, [pc, #4]	; (fbe0 <bsd_os_application_irq_set+0xc>)
    fbda:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    fbde:	4770      	bx	lr
    fbe0:	e000e100 	.word	0xe000e100

0000fbe4 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fbe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    fbe8:	4b01      	ldr	r3, [pc, #4]	; (fbf0 <bsd_os_application_irq_clear+0xc>)
    fbea:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    fbee:	4770      	bx	lr
    fbf0:	e000e100 	.word	0xe000e100

0000fbf4 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fbf4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    fbf8:	4b01      	ldr	r3, [pc, #4]	; (fc00 <bsd_os_trace_irq_set+0xc>)
    fbfa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    fbfe:	4770      	bx	lr
    fc00:	e000e100 	.word	0xe000e100

0000fc04 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fc04:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    fc08:	4b01      	ldr	r3, [pc, #4]	; (fc10 <bsd_os_trace_irq_clear+0xc>)
    fc0a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    fc0e:	4770      	bx	lr
    fc10:	e000e100 	.word	0xe000e100

0000fc14 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
    fc14:	b508      	push	{r3, lr}
	list->head = NULL;
    fc16:	2300      	movs	r3, #0
    fc18:	4a07      	ldr	r2, [pc, #28]	; (fc38 <bsd_os_init+0x24>)
	list->tail = NULL;
    fc1a:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    fc1e:	4a07      	ldr	r2, [pc, #28]	; (fc3c <bsd_os_init+0x28>)
    fc20:	e8d2 1fef 	ldaex	r1, [r2]
    fc24:	e8c2 3fe0 	stlex	r0, r3, [r2]
    fc28:	2800      	cmp	r0, #0
    fc2a:	d1f9      	bne.n	fc20 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
    fc2c:	f00c fee6 	bl	1c9fc <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
    fc30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
    fc34:	f00c bed7 	b.w	1c9e6 <trace_task_create>
    fc38:	20020b38 	.word	0x20020b38
    fc3c:	20020b34 	.word	0x20020b34

0000fc40 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
    fc40:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
    fc44:	d03c      	beq.n	fcc0 <z_to_nrf_optname+0x80>
    fc46:	dc04      	bgt.n	fc52 <z_to_nrf_optname+0x12>
    fc48:	2801      	cmp	r0, #1
    fc4a:	d044      	beq.n	fcd6 <z_to_nrf_optname+0x96>
			break;
		}
		break;

	default:
		retval = -1;
    fc4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		break;
	}

	return retval;
}
    fc50:	4770      	bx	lr
	switch (z_in_level) {
    fc52:	f240 2302 	movw	r3, #514	; 0x202
    fc56:	4298      	cmp	r0, r3
    fc58:	d052      	beq.n	fd00 <z_to_nrf_optname+0xc0>
    fc5a:	f240 2303 	movw	r3, #515	; 0x203
    fc5e:	4298      	cmp	r0, r3
    fc60:	d1f4      	bne.n	fc4c <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
    fc62:	3901      	subs	r1, #1
    fc64:	2913      	cmp	r1, #19
    fc66:	d8f1      	bhi.n	fc4c <z_to_nrf_optname+0xc>
    fc68:	a301      	add	r3, pc, #4	; (adr r3, fc70 <z_to_nrf_optname+0x30>)
    fc6a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    fc6e:	bf00      	nop
    fc70:	0000fd0d 	.word	0x0000fd0d
    fc74:	0000fcd1 	.word	0x0000fcd1
    fc78:	0000fcf1 	.word	0x0000fcf1
    fc7c:	0000fce3 	.word	0x0000fce3
    fc80:	0000fcf5 	.word	0x0000fcf5
    fc84:	0000fcf9 	.word	0x0000fcf9
    fc88:	0000fcfd 	.word	0x0000fcfd
    fc8c:	0000fc4d 	.word	0x0000fc4d
    fc90:	0000fc4d 	.word	0x0000fc4d
    fc94:	0000fc4d 	.word	0x0000fc4d
    fc98:	0000fc4d 	.word	0x0000fc4d
    fc9c:	0000fc4d 	.word	0x0000fc4d
    fca0:	0000fc4d 	.word	0x0000fc4d
    fca4:	0000fc4d 	.word	0x0000fc4d
    fca8:	0000fc4d 	.word	0x0000fc4d
    fcac:	0000fc4d 	.word	0x0000fc4d
    fcb0:	0000fc4d 	.word	0x0000fc4d
    fcb4:	0000fc4d 	.word	0x0000fc4d
    fcb8:	0000fc4d 	.word	0x0000fc4d
    fcbc:	0000fce7 	.word	0x0000fce7
		switch (z_in_optname) {
    fcc0:	3901      	subs	r1, #1
    fcc2:	2905      	cmp	r1, #5
    fcc4:	d8c2      	bhi.n	fc4c <z_to_nrf_optname+0xc>
    fcc6:	e8df f001 	tbb	[pc, r1]
    fcca:	1503      	.short	0x1503
    fccc:	210c1917 	.word	0x210c1917
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
    fcd0:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
    fcd2:	6013      	str	r3, [r2, #0]
    fcd4:	e00a      	b.n	fcec <z_to_nrf_optname+0xac>
		switch (z_in_optname) {
    fcd6:	2914      	cmp	r1, #20
    fcd8:	d005      	beq.n	fce6 <z_to_nrf_optname+0xa6>
    fcda:	2919      	cmp	r1, #25
    fcdc:	d005      	beq.n	fcea <z_to_nrf_optname+0xaa>
    fcde:	2904      	cmp	r1, #4
    fce0:	d1b4      	bne.n	fc4c <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
    fce2:	2304      	movs	r3, #4
    fce4:	e7f5      	b.n	fcd2 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
    fce6:	2314      	movs	r3, #20
    fce8:	e7f3      	b.n	fcd2 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
    fcea:	6011      	str	r1, [r2, #0]
	int retval = 0;
    fcec:	2000      	movs	r0, #0
			break;
    fcee:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
    fcf0:	2303      	movs	r3, #3
    fcf2:	e7ee      	b.n	fcd2 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
    fcf4:	2305      	movs	r3, #5
    fcf6:	e7ec      	b.n	fcd2 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
    fcf8:	2306      	movs	r3, #6
    fcfa:	e7ea      	b.n	fcd2 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
    fcfc:	2307      	movs	r3, #7
    fcfe:	e7e8      	b.n	fcd2 <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
    fd00:	2902      	cmp	r1, #2
    fd02:	d0e5      	beq.n	fcd0 <z_to_nrf_optname+0x90>
    fd04:	2903      	cmp	r1, #3
    fd06:	d0f3      	beq.n	fcf0 <z_to_nrf_optname+0xb0>
    fd08:	2901      	cmp	r1, #1
    fd0a:	d19f      	bne.n	fc4c <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
    fd0c:	2301      	movs	r3, #1
    fd0e:	e7e0      	b.n	fcd2 <z_to_nrf_optname+0x92>

0000fd10 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
    fd10:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
    fd12:	4b03      	ldr	r3, [pc, #12]	; (fd20 <nrf91_socket_iface_init+0x10>)
    fd14:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
    fd16:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
    fd18:	4802      	ldr	r0, [pc, #8]	; (fd24 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
    fd1a:	769a      	strb	r2, [r3, #26]
	socket_offload_register(&nrf91_socket_offload_ops);
    fd1c:	f7fd bbec 	b.w	d4f8 <socket_offload_register>
    fd20:	20020b90 	.word	0x20020b90
    fd24:	0001e174 	.word	0x0001e174

0000fd28 <dk_set_leds_state.part.7>:
int dk_set_leds(u32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(u32_t leds_on_mask, u32_t leds_off_mask)
    fd28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fd2c:	4606      	mov	r6, r0
    fd2e:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
    fd30:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_write(led_devs[i],
    fd32:	f8df 8068 	ldr.w	r8, [pc, #104]	; fd9c <dk_set_leds_state.part.7+0x74>
						 led_pins[i].number, val);
    fd36:	f8df 9068 	ldr.w	r9, [pc, #104]	; fda0 <dk_set_leds_state.part.7+0x78>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
    fd3a:	fa26 f304 	lsr.w	r3, r6, r4
    fd3e:	fa27 f204 	lsr.w	r2, r7, r4
    fd42:	431a      	orrs	r2, r3
    fd44:	07d2      	lsls	r2, r2, #31
    fd46:	d51e      	bpl.n	fd86 <dk_set_leds_state.part.7+0x5e>
						 led_pins[i].number, val);
    fd48:	eb09 02c4 	add.w	r2, r9, r4, lsl #3
			int err = gpio_pin_write(led_devs[i],
    fd4c:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
    fd50:	7912      	ldrb	r2, [r2, #4]
				   u32_t pin, u32_t value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->write(port, access_op, pin, value);
    fd52:	43db      	mvns	r3, r3
    fd54:	6841      	ldr	r1, [r0, #4]
    fd56:	f003 0301 	and.w	r3, r3, #1
    fd5a:	684d      	ldr	r5, [r1, #4]
    fd5c:	2100      	movs	r1, #0
    fd5e:	47a8      	blx	r5
			if (err) {
    fd60:	4605      	mov	r5, r0
    fd62:	b180      	cbz	r0, fd86 <dk_set_leds_state.part.7+0x5e>
				LOG_ERR("Cannot write LED gpio");
    fd64:	2301      	movs	r3, #1
    fd66:	f04f 0100 	mov.w	r1, #0
    fd6a:	4a09      	ldr	r2, [pc, #36]	; (fd90 <dk_set_leds_state.part.7+0x68>)
    fd6c:	f363 0107 	bfi	r1, r3, #0, #8
    fd70:	4b08      	ldr	r3, [pc, #32]	; (fd94 <dk_set_leds_state.part.7+0x6c>)
    fd72:	4809      	ldr	r0, [pc, #36]	; (fd98 <dk_set_leds_state.part.7+0x70>)
    fd74:	1a9b      	subs	r3, r3, r2
    fd76:	08db      	lsrs	r3, r3, #3
    fd78:	f363 118f 	bfi	r1, r3, #6, #10
    fd7c:	f00b fc99 	bl	1b6b2 <log_0>
			}
		}
	}

	return 0;
}
    fd80:	4628      	mov	r0, r5
    fd82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
    fd86:	3401      	adds	r4, #1
    fd88:	2c04      	cmp	r4, #4
    fd8a:	d1d6      	bne.n	fd3a <dk_set_leds_state.part.7+0x12>
	return 0;
    fd8c:	2500      	movs	r5, #0
    fd8e:	e7f7      	b.n	fd80 <dk_set_leds_state.part.7+0x58>
    fd90:	0001e02c 	.word	0x0001e02c
    fd94:	0001e05c 	.word	0x0001e05c
    fd98:	0001fb2f 	.word	0x0001fb2f
    fd9c:	20020bf8 	.word	0x20020bf8
    fda0:	0001e1d4 	.word	0x0001e1d4

0000fda4 <button_pressed>:
{
    fda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    fda6:	f04f 0320 	mov.w	r3, #32
    fdaa:	f3ef 8511 	mrs	r5, BASEPRI
    fdae:	f383 8811 	msr	BASEPRI, r3
    fdb2:	f3bf 8f6f 	isb	sy
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
    fdb6:	2400      	movs	r4, #0
    fdb8:	4e19      	ldr	r6, [pc, #100]	; (fe20 <button_pressed+0x7c>)
			  button_pins[i].number);
    fdba:	4f1a      	ldr	r7, [pc, #104]	; (fe24 <button_pressed+0x80>)
    fdbc:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
			err = gpio_pin_disable_callback(button_devs[i],
    fdc0:	f856 0b04 	ldr.w	r0, [r6], #4
    fdc4:	791a      	ldrb	r2, [r3, #4]
					      int access_op, u32_t pin)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->disable_callback == NULL) {
    fdc6:	6843      	ldr	r3, [r0, #4]
    fdc8:	695b      	ldr	r3, [r3, #20]
    fdca:	b1ab      	cbz	r3, fdf8 <button_pressed+0x54>
		return -ENOTSUP;
	}

	return api->disable_callback(port, access_op, pin);
    fdcc:	2100      	movs	r1, #0
    fdce:	4798      	blx	r3
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
    fdd0:	3401      	adds	r4, #1
    fdd2:	2c04      	cmp	r4, #4
    fdd4:	d013      	beq.n	fdfe <button_pressed+0x5a>
    fdd6:	2800      	cmp	r0, #0
    fdd8:	d0f0      	beq.n	fdbc <button_pressed+0x18>
		LOG_ERR("Cannot disable callbacks");
    fdda:	2301      	movs	r3, #1
    fddc:	f04f 0100 	mov.w	r1, #0
    fde0:	4a11      	ldr	r2, [pc, #68]	; (fe28 <button_pressed+0x84>)
    fde2:	f363 0107 	bfi	r1, r3, #0, #8
    fde6:	4b11      	ldr	r3, [pc, #68]	; (fe2c <button_pressed+0x88>)
    fde8:	4811      	ldr	r0, [pc, #68]	; (fe30 <button_pressed+0x8c>)
    fdea:	1a9b      	subs	r3, r3, r2
    fdec:	08db      	lsrs	r3, r3, #3
    fdee:	f363 118f 	bfi	r1, r3, #6, #10
    fdf2:	f00b fc5e 	bl	1b6b2 <log_0>
    fdf6:	e004      	b.n	fe02 <button_pressed+0x5e>
		return -ENOTSUP;
    fdf8:	f06f 0022 	mvn.w	r0, #34	; 0x22
    fdfc:	e7e8      	b.n	fdd0 <button_pressed+0x2c>
	if (err) {
    fdfe:	2800      	cmp	r0, #0
    fe00:	d1eb      	bne.n	fdda <button_pressed+0x36>
	switch (state) {
    fe02:	4b0c      	ldr	r3, [pc, #48]	; (fe34 <button_pressed+0x90>)
    fe04:	781a      	ldrb	r2, [r3, #0]
    fe06:	b92a      	cbnz	r2, fe14 <button_pressed+0x70>
		state = STATE_SCANNING;
    fe08:	2201      	movs	r2, #1
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    fe0a:	490b      	ldr	r1, [pc, #44]	; (fe38 <button_pressed+0x94>)
    fe0c:	480b      	ldr	r0, [pc, #44]	; (fe3c <button_pressed+0x98>)
    fe0e:	701a      	strb	r2, [r3, #0]
    fe10:	f00a feb0 	bl	1ab74 <k_delayed_work_submit_to_queue>
	__asm__ volatile(
    fe14:	f385 8811 	msr	BASEPRI, r5
    fe18:	f3bf 8f6f 	isb	sy
}
    fe1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fe1e:	bf00      	nop
    fe20:	20020b94 	.word	0x20020b94
    fe24:	0001e1b4 	.word	0x0001e1b4
    fe28:	0001e02c 	.word	0x0001e02c
    fe2c:	0001e05c 	.word	0x0001e05c
    fe30:	0001fa34 	.word	0x0001fa34
    fe34:	20022070 	.word	0x20022070
    fe38:	20020bc4 	.word	0x20020bc4
    fe3c:	20021da0 	.word	0x20021da0

0000fe40 <buttons_scan_fn>:
{
    fe40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	u32_t ret = 0;
    fe44:	2400      	movs	r4, #0
    fe46:	4f54      	ldr	r7, [pc, #336]	; (ff98 <buttons_scan_fn+0x158>)
			button_devs[i], button_pins[i].number, &val)) {
    fe48:	f8df 9184 	ldr.w	r9, [pc, #388]	; ffd0 <buttons_scan_fn+0x190>
{
    fe4c:	463e      	mov	r6, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    fe4e:	4625      	mov	r5, r4
    fe50:	46c8      	mov	r8, r9
			button_devs[i], button_pins[i].number, &val)) {
    fe52:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
		if (gpio_pin_read(
    fe56:	f856 0b04 	ldr.w	r0, [r6], #4
    fe5a:	791a      	ldrb	r2, [r3, #4]
	return api->read(port, access_op, pin, value);
    fe5c:	6843      	ldr	r3, [r0, #4]
    fe5e:	2100      	movs	r1, #0
    fe60:	f8d3 a008 	ldr.w	sl, [r3, #8]
    fe64:	ab01      	add	r3, sp, #4
    fe66:	47d0      	blx	sl
    fe68:	2800      	cmp	r0, #0
    fe6a:	d04b      	beq.n	ff04 <buttons_scan_fn+0xc4>
			LOG_ERR("Cannot read gpio pin");
    fe6c:	2301      	movs	r3, #1
    fe6e:	f04f 0100 	mov.w	r1, #0
    fe72:	4a4a      	ldr	r2, [pc, #296]	; (ff9c <buttons_scan_fn+0x15c>)
    fe74:	f363 0107 	bfi	r1, r3, #0, #8
    fe78:	4b49      	ldr	r3, [pc, #292]	; (ffa0 <buttons_scan_fn+0x160>)
    fe7a:	484a      	ldr	r0, [pc, #296]	; (ffa4 <buttons_scan_fn+0x164>)
    fe7c:	1a9b      	subs	r3, r3, r2
    fe7e:	08db      	lsrs	r3, r3, #3
    fe80:	f363 118f 	bfi	r1, r3, #6, #10
    fe84:	f00b fc15 	bl	1b6b2 <log_0>
			return 0;
    fe88:	2400      	movs	r4, #0
    fe8a:	4b47      	ldr	r3, [pc, #284]	; (ffa8 <buttons_scan_fn+0x168>)
    fe8c:	e8d3 2fef 	ldaex	r2, [r3]
    fe90:	e8c3 4fe1 	stlex	r1, r4, [r3]
    fe94:	2900      	cmp	r1, #0
    fe96:	d1f9      	bne.n	fe8c <buttons_scan_fn+0x4c>
	if (!initial_run) {
    fe98:	4b44      	ldr	r3, [pc, #272]	; (ffac <buttons_scan_fn+0x16c>)
    fe9a:	f8df 9138 	ldr.w	r9, [pc, #312]	; ffd4 <buttons_scan_fn+0x194>
    fe9e:	781a      	ldrb	r2, [r3, #0]
    fea0:	2a00      	cmp	r2, #0
    fea2:	d141      	bne.n	ff28 <buttons_scan_fn+0xe8>
		if (button_scan != last_button_scan) {
    fea4:	f8d9 6000 	ldr.w	r6, [r9]
    fea8:	42a6      	cmp	r6, r4
    feaa:	d011      	beq.n	fed0 <buttons_scan_fn+0x90>
	if (button_handler_cb != NULL) {
    feac:	4b40      	ldr	r3, [pc, #256]	; (ffb0 <buttons_scan_fn+0x170>)
			u32_t has_changed = (button_scan ^ last_button_scan);
    feae:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
    feb0:	681b      	ldr	r3, [r3, #0]
    feb2:	b113      	cbz	r3, feba <buttons_scan_fn+0x7a>
		button_handler_cb(button_state, has_changed);
    feb4:	4631      	mov	r1, r6
    feb6:	4620      	mov	r0, r4
    feb8:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
    feba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    febe:	483d      	ldr	r0, [pc, #244]	; (ffb4 <buttons_scan_fn+0x174>)
    fec0:	f00a f8c0 	bl	1a044 <z_impl_k_mutex_lock>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
    fec4:	4b3c      	ldr	r3, [pc, #240]	; (ffb8 <buttons_scan_fn+0x178>)
    fec6:	681d      	ldr	r5, [r3, #0]
    fec8:	bb2d      	cbnz	r5, ff16 <buttons_scan_fn+0xd6>
	return z_impl_k_mutex_unlock(mutex);
    feca:	483a      	ldr	r0, [pc, #232]	; (ffb4 <buttons_scan_fn+0x174>)
    fecc:	f00a f92c 	bl	1a128 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
    fed0:	f8c9 4000 	str.w	r4, [r9]
	if (button_scan != 0) {
    fed4:	b35c      	cbz	r4, ff2e <buttons_scan_fn+0xee>
    fed6:	220a      	movs	r2, #10
    fed8:	4938      	ldr	r1, [pc, #224]	; (ffbc <buttons_scan_fn+0x17c>)
    feda:	4839      	ldr	r0, [pc, #228]	; (ffc0 <buttons_scan_fn+0x180>)
    fedc:	f00a fe4a 	bl	1ab74 <k_delayed_work_submit_to_queue>
		if (err) {
    fee0:	b168      	cbz	r0, fefe <buttons_scan_fn+0xbe>
			LOG_ERR("Cannot add work to workqueue");
    fee2:	2301      	movs	r3, #1
    fee4:	f04f 0100 	mov.w	r1, #0
    fee8:	4a2c      	ldr	r2, [pc, #176]	; (ff9c <buttons_scan_fn+0x15c>)
    feea:	f363 0107 	bfi	r1, r3, #0, #8
    feee:	4b2c      	ldr	r3, [pc, #176]	; (ffa0 <buttons_scan_fn+0x160>)
    fef0:	4834      	ldr	r0, [pc, #208]	; (ffc4 <buttons_scan_fn+0x184>)
    fef2:	1a9b      	subs	r3, r3, r2
    fef4:	08db      	lsrs	r3, r3, #3
    fef6:	f363 118f 	bfi	r1, r3, #6, #10
			LOG_ERR("Cannot enable callbacks");
    fefa:	f00b fbda 	bl	1b6b2 <log_0>
}
    fefe:	b002      	add	sp, #8
    ff00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
    ff04:	9b01      	ldr	r3, [sp, #4]
    ff06:	b913      	cbnz	r3, ff0e <buttons_scan_fn+0xce>
			ret |= 1U << i;
    ff08:	2301      	movs	r3, #1
    ff0a:	40ab      	lsls	r3, r5
    ff0c:	431c      	orrs	r4, r3
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    ff0e:	3501      	adds	r5, #1
    ff10:	2d04      	cmp	r5, #4
    ff12:	d19e      	bne.n	fe52 <buttons_scan_fn+0x12>
    ff14:	e7b9      	b.n	fe8a <buttons_scan_fn+0x4a>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
    ff16:	3d04      	subs	r5, #4
    ff18:	2d00      	cmp	r5, #0
    ff1a:	d0d6      	beq.n	feca <buttons_scan_fn+0x8a>
			handler->cb(button_state, has_changed);
    ff1c:	682b      	ldr	r3, [r5, #0]
    ff1e:	4631      	mov	r1, r6
    ff20:	4620      	mov	r0, r4
    ff22:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    ff24:	686d      	ldr	r5, [r5, #4]
	return node->next;
    ff26:	e7cf      	b.n	fec8 <buttons_scan_fn+0x88>
		initial_run = false;
    ff28:	2200      	movs	r2, #0
    ff2a:	701a      	strb	r2, [r3, #0]
    ff2c:	e7d0      	b.n	fed0 <buttons_scan_fn+0x90>
	__asm__ volatile(
    ff2e:	f04f 0320 	mov.w	r3, #32
    ff32:	f3ef 8511 	mrs	r5, BASEPRI
    ff36:	f383 8811 	msr	BASEPRI, r3
    ff3a:	f3bf 8f6f 	isb	sy
		switch (state) {
    ff3e:	4b22      	ldr	r3, [pc, #136]	; (ffc8 <buttons_scan_fn+0x188>)
    ff40:	781a      	ldrb	r2, [r3, #0]
    ff42:	2a01      	cmp	r2, #1
    ff44:	d125      	bne.n	ff92 <buttons_scan_fn+0x152>
			state = STATE_WAITING;
    ff46:	701c      	strb	r4, [r3, #0]
			  button_pins[i].number);
    ff48:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
			err = gpio_pin_enable_callback(button_devs[i],
    ff4c:	f857 0b04 	ldr.w	r0, [r7], #4
    ff50:	791a      	ldrb	r2, [r3, #4]
	if (api->enable_callback == NULL) {
    ff52:	6843      	ldr	r3, [r0, #4]
    ff54:	691b      	ldr	r3, [r3, #16]
    ff56:	b1cb      	cbz	r3, ff8c <buttons_scan_fn+0x14c>
	return api->enable_callback(port, access_op, pin);
    ff58:	2100      	movs	r1, #0
    ff5a:	4798      	blx	r3
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
    ff5c:	3401      	adds	r4, #1
    ff5e:	2c04      	cmp	r4, #4
    ff60:	d001      	beq.n	ff66 <buttons_scan_fn+0x126>
    ff62:	2800      	cmp	r0, #0
    ff64:	d0f0      	beq.n	ff48 <buttons_scan_fn+0x108>
	__asm__ volatile(
    ff66:	f385 8811 	msr	BASEPRI, r5
    ff6a:	f3bf 8f6f 	isb	sy
		if (err) {
    ff6e:	2800      	cmp	r0, #0
    ff70:	d0c5      	beq.n	fefe <buttons_scan_fn+0xbe>
			LOG_ERR("Cannot enable callbacks");
    ff72:	2301      	movs	r3, #1
    ff74:	f04f 0100 	mov.w	r1, #0
    ff78:	4a08      	ldr	r2, [pc, #32]	; (ff9c <buttons_scan_fn+0x15c>)
    ff7a:	f363 0107 	bfi	r1, r3, #0, #8
    ff7e:	4b08      	ldr	r3, [pc, #32]	; (ffa0 <buttons_scan_fn+0x160>)
    ff80:	4812      	ldr	r0, [pc, #72]	; (ffcc <buttons_scan_fn+0x18c>)
    ff82:	1a9b      	subs	r3, r3, r2
    ff84:	08db      	lsrs	r3, r3, #3
    ff86:	f363 118f 	bfi	r1, r3, #6, #10
    ff8a:	e7b6      	b.n	fefa <buttons_scan_fn+0xba>
		return -ENOTSUP;
    ff8c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    ff90:	e7e4      	b.n	ff5c <buttons_scan_fn+0x11c>
		int err = 0;
    ff92:	4620      	mov	r0, r4
    ff94:	e7e7      	b.n	ff66 <buttons_scan_fn+0x126>
    ff96:	bf00      	nop
    ff98:	20020b94 	.word	0x20020b94
    ff9c:	0001e02c 	.word	0x0001e02c
    ffa0:	0001e05c 	.word	0x0001e05c
    ffa4:	0001fa4d 	.word	0x0001fa4d
    ffa8:	20020c08 	.word	0x20020c08
    ffac:	20026838 	.word	0x20026838
    ffb0:	20020ba4 	.word	0x20020ba4
    ffb4:	20020ba8 	.word	0x20020ba8
    ffb8:	20020bbc 	.word	0x20020bbc
    ffbc:	20020bc4 	.word	0x20020bc4
    ffc0:	20021da0 	.word	0x20021da0
    ffc4:	0001fa62 	.word	0x0001fa62
    ffc8:	20022070 	.word	0x20022070
    ffcc:	0001fa7f 	.word	0x0001fa7f
    ffd0:	0001e1b4 	.word	0x0001e1b4
    ffd4:	20020bf0 	.word	0x20020bf0

0000ffd8 <dk_leds_init>:
{
    ffd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
    ffda:	2500      	movs	r5, #0
    ffdc:	4c1d      	ldr	r4, [pc, #116]	; (10054 <dk_leds_init+0x7c>)
    ffde:	4f1e      	ldr	r7, [pc, #120]	; (10058 <dk_leds_init+0x80>)
		led_devs[i] = device_get_binding(led_pins[i].port);
    ffe0:	6820      	ldr	r0, [r4, #0]
    ffe2:	f009 fced 	bl	199c0 <z_impl_device_get_binding>
    ffe6:	f847 0b04 	str.w	r0, [r7], #4
		if (!led_devs[i]) {
    ffea:	b988      	cbnz	r0, 10010 <dk_leds_init+0x38>
			LOG_ERR("Cannot bind gpio device");
    ffec:	2301      	movs	r3, #1
    ffee:	f04f 0100 	mov.w	r1, #0
    fff2:	4a1a      	ldr	r2, [pc, #104]	; (1005c <dk_leds_init+0x84>)
    fff4:	f363 0107 	bfi	r1, r3, #0, #8
    fff8:	4b19      	ldr	r3, [pc, #100]	; (10060 <dk_leds_init+0x88>)
    fffa:	481a      	ldr	r0, [pc, #104]	; (10064 <dk_leds_init+0x8c>)
    fffc:	1a9b      	subs	r3, r3, r2
    fffe:	08db      	lsrs	r3, r3, #3
   10000:	f363 118f 	bfi	r1, r3, #6, #10
   10004:	f00b fb55 	bl	1b6b2 <log_0>
			return -ENODEV;
   10008:	f06f 0612 	mvn.w	r6, #18
}
   1000c:	4630      	mov	r0, r6
   1000e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   10010:	7922      	ldrb	r2, [r4, #4]
	return api->config(port, access_op, pin, flags);
   10012:	6843      	ldr	r3, [r0, #4]
   10014:	2100      	movs	r1, #0
   10016:	681e      	ldr	r6, [r3, #0]
   10018:	2301      	movs	r3, #1
   1001a:	47b0      	blx	r6
		if (err) {
   1001c:	4606      	mov	r6, r0
   1001e:	b170      	cbz	r0, 1003e <dk_leds_init+0x66>
			LOG_ERR("Cannot configure LED gpio");
   10020:	2301      	movs	r3, #1
   10022:	f04f 0100 	mov.w	r1, #0
   10026:	4a0d      	ldr	r2, [pc, #52]	; (1005c <dk_leds_init+0x84>)
   10028:	f363 0107 	bfi	r1, r3, #0, #8
   1002c:	4b0c      	ldr	r3, [pc, #48]	; (10060 <dk_leds_init+0x88>)
   1002e:	480e      	ldr	r0, [pc, #56]	; (10068 <dk_leds_init+0x90>)
   10030:	1a9b      	subs	r3, r3, r2
   10032:	08db      	lsrs	r3, r3, #3
   10034:	f363 118f 	bfi	r1, r3, #6, #10
   10038:	f00b fb3b 	bl	1b6b2 <log_0>
			return err;
   1003c:	e7e6      	b.n	1000c <dk_leds_init+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1003e:	3501      	adds	r5, #1
   10040:	2d04      	cmp	r5, #4
   10042:	f104 0408 	add.w	r4, r4, #8
   10046:	d1cb      	bne.n	ffe0 <dk_leds_init+0x8>
}
   10048:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1004c:	210f      	movs	r1, #15
   1004e:	f7ff be6b 	b.w	fd28 <dk_set_leds_state.part.7>
   10052:	bf00      	nop
   10054:	0001e1d4 	.word	0x0001e1d4
   10058:	20020bf8 	.word	0x20020bf8
   1005c:	0001e02c 	.word	0x0001e02c
   10060:	0001e05c 	.word	0x0001e05c
   10064:	0001fafd 	.word	0x0001fafd
   10068:	0001fb15 	.word	0x0001fb15

0001006c <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1006c:	4b05      	ldr	r3, [pc, #20]	; (10084 <dk_read_buttons+0x18>)
   1006e:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   10072:	b100      	cbz	r0, 10076 <dk_read_buttons+0xa>
		*button_state = current_state;
   10074:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   10076:	4804      	ldr	r0, [pc, #16]	; (10088 <dk_read_buttons+0x1c>)
   10078:	b111      	cbz	r1, 10080 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   1007a:	6802      	ldr	r2, [r0, #0]
   1007c:	405a      	eors	r2, r3
   1007e:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   10080:	6003      	str	r3, [r0, #0]
}
   10082:	4770      	bx	lr
   10084:	20020c08 	.word	0x20020c08
   10088:	20020bf4 	.word	0x20020bf4

0001008c <dk_buttons_init>:
{
   1008c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   10090:	4b66      	ldr	r3, [pc, #408]	; (1022c <dk_buttons_init+0x1a0>)
   10092:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   10094:	4d66      	ldr	r5, [pc, #408]	; (10230 <dk_buttons_init+0x1a4>)
   10096:	4f67      	ldr	r7, [pc, #412]	; (10234 <dk_buttons_init+0x1a8>)
   10098:	4867      	ldr	r0, [pc, #412]	; (10238 <dk_buttons_init+0x1ac>)
   1009a:	f00d fa81 	bl	1d5a0 <z_impl_k_mutex_init>
   1009e:	46b9      	mov	r9, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   100a0:	2600      	movs	r6, #0
   100a2:	46a8      	mov	r8, r5
		button_devs[i] = device_get_binding(button_pins[i].port);
   100a4:	6828      	ldr	r0, [r5, #0]
   100a6:	f009 fc8b 	bl	199c0 <z_impl_device_get_binding>
   100aa:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
   100ae:	b990      	cbnz	r0, 100d6 <dk_buttons_init+0x4a>
			LOG_ERR("Cannot bind gpio device");
   100b0:	2301      	movs	r3, #1
   100b2:	f04f 0100 	mov.w	r1, #0
   100b6:	4a61      	ldr	r2, [pc, #388]	; (1023c <dk_buttons_init+0x1b0>)
   100b8:	f363 0107 	bfi	r1, r3, #0, #8
   100bc:	4b60      	ldr	r3, [pc, #384]	; (10240 <dk_buttons_init+0x1b4>)
   100be:	4861      	ldr	r0, [pc, #388]	; (10244 <dk_buttons_init+0x1b8>)
   100c0:	1a9b      	subs	r3, r3, r2
   100c2:	08db      	lsrs	r3, r3, #3
   100c4:	f363 118f 	bfi	r1, r3, #6, #10
   100c8:	f00b faf3 	bl	1b6b2 <log_0>
			return -ENODEV;
   100cc:	f06f 0412 	mvn.w	r4, #18
}
   100d0:	4620      	mov	r0, r4
   100d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   100d6:	792a      	ldrb	r2, [r5, #4]
   100d8:	6843      	ldr	r3, [r0, #4]
   100da:	2100      	movs	r1, #0
   100dc:	681c      	ldr	r4, [r3, #0]
   100de:	f44f 7380 	mov.w	r3, #256	; 0x100
   100e2:	47a0      	blx	r4
		if (err) {
   100e4:	4604      	mov	r4, r0
   100e6:	b170      	cbz	r0, 10106 <dk_buttons_init+0x7a>
			LOG_ERR("Cannot configure button gpio");
   100e8:	2301      	movs	r3, #1
   100ea:	f04f 0100 	mov.w	r1, #0
   100ee:	4a53      	ldr	r2, [pc, #332]	; (1023c <dk_buttons_init+0x1b0>)
   100f0:	f363 0107 	bfi	r1, r3, #0, #8
   100f4:	4b52      	ldr	r3, [pc, #328]	; (10240 <dk_buttons_init+0x1b4>)
   100f6:	4854      	ldr	r0, [pc, #336]	; (10248 <dk_buttons_init+0x1bc>)
   100f8:	1a9b      	subs	r3, r3, r2
   100fa:	08db      	lsrs	r3, r3, #3
   100fc:	f363 118f 	bfi	r1, r3, #6, #10
		LOG_ERR("Cannot add work to workqueue");
   10100:	f00b fad7 	bl	1b6b2 <log_0>
		return err;
   10104:	e7e4      	b.n	100d0 <dk_buttons_init+0x44>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   10106:	3601      	adds	r6, #1
   10108:	2e04      	cmp	r6, #4
   1010a:	f105 0508 	add.w	r5, r5, #8
   1010e:	d1c9      	bne.n	100a4 <dk_buttons_init+0x18>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   10110:	4605      	mov	r5, r0
   10112:	4e48      	ldr	r6, [pc, #288]	; (10234 <dk_buttons_init+0x1a8>)
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   10114:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
   10118:	f856 0b04 	ldr.w	r0, [r6], #4
   1011c:	791a      	ldrb	r2, [r3, #4]
   1011e:	6843      	ldr	r3, [r0, #4]
   10120:	2100      	movs	r1, #0
   10122:	681c      	ldr	r4, [r3, #0]
   10124:	f44f 7381 	mov.w	r3, #258	; 0x102
   10128:	47a0      	blx	r4
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   1012a:	3501      	adds	r5, #1
   1012c:	2d04      	cmp	r5, #4
   1012e:	4604      	mov	r4, r0
   10130:	d00e      	beq.n	10150 <dk_buttons_init+0xc4>
   10132:	2800      	cmp	r0, #0
   10134:	d0ee      	beq.n	10114 <dk_buttons_init+0x88>
		LOG_ERR("Cannot set interrupt mode");
   10136:	2301      	movs	r3, #1
   10138:	f04f 0100 	mov.w	r1, #0
   1013c:	4a3f      	ldr	r2, [pc, #252]	; (1023c <dk_buttons_init+0x1b0>)
   1013e:	f363 0107 	bfi	r1, r3, #0, #8
   10142:	4b3f      	ldr	r3, [pc, #252]	; (10240 <dk_buttons_init+0x1b4>)
   10144:	4841      	ldr	r0, [pc, #260]	; (1024c <dk_buttons_init+0x1c0>)
   10146:	1a9b      	subs	r3, r3, r2
   10148:	08db      	lsrs	r3, r3, #3
   1014a:	f363 118f 	bfi	r1, r3, #6, #10
   1014e:	e7d7      	b.n	10100 <dk_buttons_init+0x74>
	if (err) {
   10150:	2800      	cmp	r0, #0
   10152:	d1f0      	bne.n	10136 <dk_buttons_init+0xaa>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   10154:	4605      	mov	r5, r0
	u32_t pin_mask = 0;
   10156:	4681      	mov	r9, r0
		pin_mask |= BIT(button_pins[i].number);
   10158:	f04f 0b01 	mov.w	fp, #1
   1015c:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 10234 <dk_buttons_init+0x1a8>
			button_pins[i].number);
   10160:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
		err = gpio_pin_disable_callback(button_devs[i],
   10164:	f85a 0b04 	ldr.w	r0, [sl], #4
			button_pins[i].number);
   10168:	791e      	ldrb	r6, [r3, #4]
	if (api->disable_callback == NULL) {
   1016a:	6843      	ldr	r3, [r0, #4]
   1016c:	695b      	ldr	r3, [r3, #20]
   1016e:	b18b      	cbz	r3, 10194 <dk_buttons_init+0x108>
	return api->disable_callback(port, access_op, pin);
   10170:	4632      	mov	r2, r6
   10172:	2100      	movs	r1, #0
   10174:	4798      	blx	r3
		if (err) {
   10176:	4604      	mov	r4, r0
   10178:	b178      	cbz	r0, 1019a <dk_buttons_init+0x10e>
			LOG_ERR("Cannot disable callbacks()");
   1017a:	2301      	movs	r3, #1
   1017c:	f04f 0100 	mov.w	r1, #0
   10180:	4a2e      	ldr	r2, [pc, #184]	; (1023c <dk_buttons_init+0x1b0>)
   10182:	f363 0107 	bfi	r1, r3, #0, #8
   10186:	4b2e      	ldr	r3, [pc, #184]	; (10240 <dk_buttons_init+0x1b4>)
   10188:	4831      	ldr	r0, [pc, #196]	; (10250 <dk_buttons_init+0x1c4>)
   1018a:	1a9b      	subs	r3, r3, r2
   1018c:	08db      	lsrs	r3, r3, #3
   1018e:	f363 118f 	bfi	r1, r3, #6, #10
   10192:	e7b5      	b.n	10100 <dk_buttons_init+0x74>
		return -ENOTSUP;
   10194:	f06f 0422 	mvn.w	r4, #34	; 0x22
   10198:	e7ef      	b.n	1017a <dk_buttons_init+0xee>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1019a:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   1019c:	fa0b f606 	lsl.w	r6, fp, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   101a0:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   101a2:	ea49 0906 	orr.w	r9, r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   101a6:	d1db      	bne.n	10160 <dk_buttons_init+0xd4>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   101a8:	4606      	mov	r6, r0
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   101aa:	4d2a      	ldr	r5, [pc, #168]	; (10254 <dk_buttons_init+0x1c8>)
   101ac:	4b2a      	ldr	r3, [pc, #168]	; (10258 <dk_buttons_init+0x1cc>)
	callback->pin_mask = pin_mask;
   101ae:	e9c5 3901 	strd	r3, r9, [r5, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   101b2:	f857 0b04 	ldr.w	r0, [r7], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->manage_callback == NULL) {
   101b6:	6843      	ldr	r3, [r0, #4]
   101b8:	68db      	ldr	r3, [r3, #12]
   101ba:	b18b      	cbz	r3, 101e0 <dk_buttons_init+0x154>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   101bc:	2201      	movs	r2, #1
   101be:	4629      	mov	r1, r5
   101c0:	4798      	blx	r3
		if (err) {
   101c2:	4604      	mov	r4, r0
   101c4:	b178      	cbz	r0, 101e6 <dk_buttons_init+0x15a>
			LOG_ERR("Cannot add callback");
   101c6:	2301      	movs	r3, #1
   101c8:	f04f 0100 	mov.w	r1, #0
   101cc:	4a1b      	ldr	r2, [pc, #108]	; (1023c <dk_buttons_init+0x1b0>)
   101ce:	f363 0107 	bfi	r1, r3, #0, #8
   101d2:	4b1b      	ldr	r3, [pc, #108]	; (10240 <dk_buttons_init+0x1b4>)
   101d4:	4821      	ldr	r0, [pc, #132]	; (1025c <dk_buttons_init+0x1d0>)
   101d6:	1a9b      	subs	r3, r3, r2
   101d8:	08db      	lsrs	r3, r3, #3
   101da:	f363 118f 	bfi	r1, r3, #6, #10
   101de:	e78f      	b.n	10100 <dk_buttons_init+0x74>
		return -ENOTSUP;
   101e0:	f06f 0422 	mvn.w	r4, #34	; 0x22
   101e4:	e7ef      	b.n	101c6 <dk_buttons_init+0x13a>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   101e6:	3601      	adds	r6, #1
   101e8:	2e04      	cmp	r6, #4
   101ea:	d1e2      	bne.n	101b2 <dk_buttons_init+0x126>
	k_delayed_work_init(&buttons_scan, buttons_scan_fn);
   101ec:	491c      	ldr	r1, [pc, #112]	; (10260 <dk_buttons_init+0x1d4>)
   101ee:	481d      	ldr	r0, [pc, #116]	; (10264 <dk_buttons_init+0x1d8>)
   101f0:	f00d fc25 	bl	1da3e <k_delayed_work_init>
	state = STATE_SCANNING;
   101f4:	2201      	movs	r2, #1
   101f6:	4b1c      	ldr	r3, [pc, #112]	; (10268 <dk_buttons_init+0x1dc>)
   101f8:	491a      	ldr	r1, [pc, #104]	; (10264 <dk_buttons_init+0x1d8>)
   101fa:	701a      	strb	r2, [r3, #0]
   101fc:	481b      	ldr	r0, [pc, #108]	; (1026c <dk_buttons_init+0x1e0>)
   101fe:	4622      	mov	r2, r4
   10200:	f00a fcb8 	bl	1ab74 <k_delayed_work_submit_to_queue>
	if (err) {
   10204:	4604      	mov	r4, r0
   10206:	b160      	cbz	r0, 10222 <dk_buttons_init+0x196>
		LOG_ERR("Cannot add work to workqueue");
   10208:	2301      	movs	r3, #1
   1020a:	f04f 0100 	mov.w	r1, #0
   1020e:	4a0b      	ldr	r2, [pc, #44]	; (1023c <dk_buttons_init+0x1b0>)
   10210:	f363 0107 	bfi	r1, r3, #0, #8
   10214:	4b0a      	ldr	r3, [pc, #40]	; (10240 <dk_buttons_init+0x1b4>)
   10216:	4816      	ldr	r0, [pc, #88]	; (10270 <dk_buttons_init+0x1e4>)
   10218:	1a9b      	subs	r3, r3, r2
   1021a:	08db      	lsrs	r3, r3, #3
   1021c:	f363 118f 	bfi	r1, r3, #6, #10
   10220:	e76e      	b.n	10100 <dk_buttons_init+0x74>
	dk_read_buttons(NULL, NULL);
   10222:	4601      	mov	r1, r0
   10224:	f7ff ff22 	bl	1006c <dk_read_buttons>
	return 0;
   10228:	e752      	b.n	100d0 <dk_buttons_init+0x44>
   1022a:	bf00      	nop
   1022c:	20020ba4 	.word	0x20020ba4
   10230:	0001e1b4 	.word	0x0001e1b4
   10234:	20020b94 	.word	0x20020b94
   10238:	20020ba8 	.word	0x20020ba8
   1023c:	0001e02c 	.word	0x0001e02c
   10240:	0001e05c 	.word	0x0001e05c
   10244:	0001fafd 	.word	0x0001fafd
   10248:	0001fa97 	.word	0x0001fa97
   1024c:	0001fab4 	.word	0x0001fab4
   10250:	0001face 	.word	0x0001face
   10254:	20020be4 	.word	0x20020be4
   10258:	0000fda5 	.word	0x0000fda5
   1025c:	0001fae9 	.word	0x0001fae9
   10260:	0000fe41 	.word	0x0000fe41
   10264:	20020bc4 	.word	0x20020bc4
   10268:	20022070 	.word	0x20022070
   1026c:	20021da0 	.word	0x20021da0
   10270:	0001fa62 	.word	0x0001fa62

00010274 <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
   10274:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
   10276:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
   10278:	b118      	cbz	r0, 10282 <callback_worker+0xe>
		data->callback(data->data);
   1027a:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
   1027e:	300c      	adds	r0, #12
   10280:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
   10282:	a901      	add	r1, sp, #4
   10284:	4802      	ldr	r0, [pc, #8]	; (10290 <callback_worker+0x1c>)
   10286:	f009 fd57 	bl	19d38 <k_mem_slab_free>
}
   1028a:	b003      	add	sp, #12
   1028c:	f85d fb04 	ldr.w	pc, [sp], #4
   10290:	20026928 	.word	0x20026928

00010294 <open_socket>:
{
   10294:	b508      	push	{r3, lr}
	return socket_ops->socket(family, type, proto);
   10296:	4b09      	ldr	r3, [pc, #36]	; (102bc <open_socket+0x28>)
   10298:	f240 2201 	movw	r2, #513	; 0x201
   1029c:	681b      	ldr	r3, [r3, #0]
   1029e:	2100      	movs	r1, #0
   102a0:	681b      	ldr	r3, [r3, #0]
   102a2:	2066      	movs	r0, #102	; 0x66
   102a4:	4798      	blx	r3
	common_socket_fd = socket(AF_LTE, 0, NPROTO_AT);
   102a6:	4b06      	ldr	r3, [pc, #24]	; (102c0 <open_socket+0x2c>)
   102a8:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
   102aa:	3001      	adds	r0, #1
   102ac:	d104      	bne.n	102b8 <open_socket+0x24>
   102ae:	f009 fbad 	bl	19a0c <z_impl_z_errno>
		return -errno;
   102b2:	6800      	ldr	r0, [r0, #0]
   102b4:	4240      	negs	r0, r0
}
   102b6:	bd08      	pop	{r3, pc}
	return 0;
   102b8:	2000      	movs	r0, #0
   102ba:	e7fc      	b.n	102b6 <open_socket+0x22>
   102bc:	20020ad8 	.word	0x20020ad8
   102c0:	20020c0c 	.word	0x20020c0c

000102c4 <at_cmd_driver_init>:

	k_sem_give(&cmd_pending);
}

static int at_cmd_driver_init(struct device *dev)
{
   102c4:	b510      	push	{r4, lr}
   102c6:	b086      	sub	sp, #24
	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   102c8:	f7ff ffe4 	bl	10294 <open_socket>
	if (err) {
   102cc:	4604      	mov	r4, r0
   102ce:	b188      	cbz	r0, 102f4 <at_cmd_driver_init+0x30>
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   102d0:	2301      	movs	r3, #1
   102d2:	f04f 0200 	mov.w	r2, #0
   102d6:	490f      	ldr	r1, [pc, #60]	; (10314 <at_cmd_driver_init+0x50>)
   102d8:	f363 0207 	bfi	r2, r3, #0, #8
   102dc:	4b0e      	ldr	r3, [pc, #56]	; (10318 <at_cmd_driver_init+0x54>)
   102de:	1a5b      	subs	r3, r3, r1
   102e0:	08db      	lsrs	r3, r3, #3
   102e2:	4601      	mov	r1, r0
   102e4:	f363 128f 	bfi	r2, r3, #6, #10
   102e8:	480c      	ldr	r0, [pc, #48]	; (1031c <at_cmd_driver_init+0x58>)
   102ea:	f00b f9ef 	bl	1b6cc <log_1>
			THREAD_PRIORITY, 0, K_NO_WAIT);

	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   102ee:	4620      	mov	r0, r4
   102f0:	b006      	add	sp, #24
   102f2:	bd10      	pop	{r4, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   102f4:	230a      	movs	r3, #10
   102f6:	e9cd 0004 	strd	r0, r0, [sp, #16]
   102fa:	e9cd 0302 	strd	r0, r3, [sp, #8]
   102fe:	e9cd 0000 	strd	r0, r0, [sp]
   10302:	4b07      	ldr	r3, [pc, #28]	; (10320 <at_cmd_driver_init+0x5c>)
   10304:	f44f 6280 	mov.w	r2, #1024	; 0x400
   10308:	4906      	ldr	r1, [pc, #24]	; (10324 <at_cmd_driver_init+0x60>)
   1030a:	4807      	ldr	r0, [pc, #28]	; (10328 <at_cmd_driver_init+0x64>)
   1030c:	f00a fb64 	bl	1a9d8 <z_impl_k_thread_create>
	return 0;
   10310:	e7ed      	b.n	102ee <at_cmd_driver_init+0x2a>
   10312:	bf00      	nop
   10314:	0001e02c 	.word	0x0001e02c
   10318:	0001e03c 	.word	0x0001e03c
   1031c:	0001fb59 	.word	0x0001fb59
   10320:	0001032d 	.word	0x0001032d
   10324:	20022cc0 	.word	0x20022cc0
   10328:	20020c20 	.word	0x20020c20

0001032c <socket_thread_fn>:
{
   1032c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
					LOG_ERR("Response buffer not large "
   10330:	4b8d      	ldr	r3, [pc, #564]	; (10568 <socket_thread_fn+0x23c>)
   10332:	4d8e      	ldr	r5, [pc, #568]	; (1056c <socket_thread_fn+0x240>)
		bytes_read = recv(common_socket_fd, item->data,
   10334:	f8df b258 	ldr.w	fp, [pc, #600]	; 10590 <socket_thread_fn+0x264>
					LOG_ERR("Response buffer not large "
   10338:	1aed      	subs	r5, r5, r3
{
   1033a:	b087      	sub	sp, #28
					LOG_ERR("Response buffer not large "
   1033c:	f3c5 05c9 	ubfx	r5, r5, #3, #10
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   10340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10344:	a903      	add	r1, sp, #12
   10346:	488a      	ldr	r0, [pc, #552]	; (10570 <socket_thread_fn+0x244>)
   10348:	f009 fcca 	bl	19ce0 <k_mem_slab_alloc>
		ret.code  = 0;
   1034c:	2300      	movs	r3, #0
	return socket_ops->recv(sock, buf, max_len, flags);
   1034e:	4c89      	ldr	r4, [pc, #548]	; (10574 <socket_thread_fn+0x248>)
		item->callback = NULL;
   10350:	9903      	ldr	r1, [sp, #12]
   10352:	6822      	ldr	r2, [r4, #0]
   10354:	f8c1 3a98 	str.w	r3, [r1, #2712]	; 0xa98
   10358:	6a56      	ldr	r6, [r2, #36]	; 0x24
   1035a:	310c      	adds	r1, #12
		ret.code  = 0;
   1035c:	9304      	str	r3, [sp, #16]
		ret.state = AT_CMD_OK;
   1035e:	f88d 3014 	strb.w	r3, [sp, #20]
   10362:	f640 228c 	movw	r2, #2700	; 0xa8c
   10366:	f8db 0000 	ldr.w	r0, [fp]
   1036a:	47b0      	blx	r6
		if (bytes_read < 0) {
   1036c:	1e01      	subs	r1, r0, #0
   1036e:	4626      	mov	r6, r4
   10370:	da5a      	bge.n	10428 <socket_thread_fn+0xfc>
			LOG_ERR("AT socket recv failed with err %d",
   10372:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   10376:	f043 0301 	orr.w	r3, r3, #1
   1037a:	f363 0707 	bfi	r7, r3, #0, #8
   1037e:	f365 178f 	bfi	r7, r5, #6, #10
   10382:	487d      	ldr	r0, [pc, #500]	; (10578 <socket_thread_fn+0x24c>)
   10384:	463a      	mov	r2, r7
   10386:	f00b f9a1 	bl	1b6cc <log_1>
	return socket_ops->close(sock);
   1038a:	6823      	ldr	r3, [r4, #0]
   1038c:	f8db 0000 	ldr.w	r0, [fp]
   10390:	685b      	ldr	r3, [r3, #4]
   10392:	4798      	blx	r3
			if ((close(common_socket_fd) == 0) &&
   10394:	2800      	cmp	r0, #0
   10396:	d131      	bne.n	103fc <socket_thread_fn+0xd0>
			    (open_socket() == 0)) {
   10398:	f7ff ff7c 	bl	10294 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   1039c:	bb70      	cbnz	r0, 103fc <socket_thread_fn+0xd0>
				LOG_INF("AT socket recovered");
   1039e:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   103a2:	f043 0303 	orr.w	r3, r3, #3
   103a6:	f363 0807 	bfi	r8, r3, #0, #8
   103aa:	f365 188f 	bfi	r8, r5, #6, #10
   103ae:	4641      	mov	r1, r8
   103b0:	4872      	ldr	r0, [pc, #456]	; (1057c <socket_thread_fn+0x250>)
   103b2:	f00b f97e 	bl	1b6b2 <log_0>
				ret.state = AT_CMD_ERROR;
   103b6:	2301      	movs	r3, #1
   103b8:	f88d 3014 	strb.w	r3, [sp, #20]
   103bc:	f009 fb26 	bl	19a0c <z_impl_z_errno>
				ret.code  = -errno;
   103c0:	6803      	ldr	r3, [r0, #0]
   103c2:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
   103c4:	9304      	str	r3, [sp, #16]
		if (item->callback == NULL) {
   103c6:	9903      	ldr	r1, [sp, #12]
   103c8:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
   103cc:	2b00      	cmp	r3, #0
   103ce:	f040 80a1 	bne.w	10514 <socket_thread_fn+0x1e8>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
   103d2:	a903      	add	r1, sp, #12
   103d4:	4866      	ldr	r0, [pc, #408]	; (10570 <socket_thread_fn+0x244>)
   103d6:	f009 fcaf 	bl	19d38 <k_mem_slab_free>
	if (z_syscall_trap()) {
		return (unsigned int) arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_COUNT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_count_get(sem);
   103da:	4b69      	ldr	r3, [pc, #420]	; (10580 <socket_thread_fn+0x254>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
   103dc:	689b      	ldr	r3, [r3, #8]
   103de:	2b00      	cmp	r3, #0
   103e0:	d1ae      	bne.n	10340 <socket_thread_fn+0x14>
   103e2:	f89d 2014 	ldrb.w	r2, [sp, #20]
   103e6:	2a04      	cmp	r2, #4
   103e8:	d0aa      	beq.n	10340 <socket_thread_fn+0x14>
			current_cmd_handler = NULL;
   103ea:	4a66      	ldr	r2, [pc, #408]	; (10584 <socket_thread_fn+0x258>)
   103ec:	6013      	str	r3, [r2, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&msgq, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(msgq, data, timeout);
   103ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   103f2:	a904      	add	r1, sp, #16
   103f4:	4864      	ldr	r0, [pc, #400]	; (10588 <socket_thread_fn+0x25c>)
   103f6:	f009 fd75 	bl	19ee4 <z_impl_k_msgq_put>
   103fa:	e7a1      	b.n	10340 <socket_thread_fn+0x14>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   103fc:	2301      	movs	r3, #1
   103fe:	f04f 0400 	mov.w	r4, #0
   10402:	f363 0407 	bfi	r4, r3, #0, #8
   10406:	f365 148f 	bfi	r4, r5, #6, #10
   1040a:	f009 faff 	bl	19a0c <z_impl_z_errno>
   1040e:	4622      	mov	r2, r4
   10410:	6801      	ldr	r1, [r0, #0]
   10412:	485e      	ldr	r0, [pc, #376]	; (1058c <socket_thread_fn+0x260>)
   10414:	f00b f95a 	bl	1b6cc <log_1>
   10418:	6833      	ldr	r3, [r6, #0]
   1041a:	4a5d      	ldr	r2, [pc, #372]	; (10590 <socket_thread_fn+0x264>)
   1041c:	685b      	ldr	r3, [r3, #4]
   1041e:	6810      	ldr	r0, [r2, #0]
   10420:	4798      	blx	r3
}
   10422:	b007      	add	sp, #28
   10424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (bytes_read == sizeof(item->data) ||
   10428:	f640 238c 	movw	r3, #2700	; 0xa8c
   1042c:	4299      	cmp	r1, r3
   1042e:	d003      	beq.n	10438 <socket_thread_fn+0x10c>
			   item->data[bytes_read - 1] != '\0') {
   10430:	9e03      	ldr	r6, [sp, #12]
   10432:	4431      	add	r1, r6
		} else if (bytes_read == sizeof(item->data) ||
   10434:	7aca      	ldrb	r2, [r1, #11]
   10436:	b172      	cbz	r2, 10456 <socket_thread_fn+0x12a>
			LOG_ERR("AT message to large for reception buffer or "
   10438:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   1043c:	f043 0301 	orr.w	r3, r3, #1
   10440:	f363 0907 	bfi	r9, r3, #0, #8
   10444:	f365 198f 	bfi	r9, r5, #6, #10
   10448:	4649      	mov	r1, r9
   1044a:	4852      	ldr	r0, [pc, #328]	; (10594 <socket_thread_fn+0x268>)
   1044c:	f00b f931 	bl	1b6b2 <log_0>
			ret.code  = -ENOBUFS;
   10450:	f06f 0336 	mvn.w	r3, #54	; 0x36
   10454:	e7b6      	b.n	103c4 <socket_thread_fn+0x98>
	ret->state = AT_CMD_NOTIFICATION;
   10456:	2304      	movs	r3, #4
		payload_len = get_return_code(item->data, &ret);
   10458:	f106 040c 	add.w	r4, r6, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   1045c:	494e      	ldr	r1, [pc, #312]	; (10598 <socket_thread_fn+0x26c>)
   1045e:	4620      	mov	r0, r4
	ret->state = AT_CMD_NOTIFICATION;
   10460:	f88d 3014 	strb.w	r3, [sp, #20]
   10464:	9201      	str	r2, [sp, #4]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   10466:	f00b fbd6 	bl	1bc16 <strstr>
		if (tmpstr) {
   1046a:	4603      	mov	r3, r0
   1046c:	b120      	cbz	r0, 10478 <socket_thread_fn+0x14c>
			ret->state = AT_CMD_OK;
   1046e:	9a01      	ldr	r2, [sp, #4]
   10470:	f88d 2014 	strb.w	r2, [sp, #20]
			ret->code  = -ENOEXEC;
   10474:	9204      	str	r2, [sp, #16]
			break;
   10476:	e00e      	b.n	10496 <socket_thread_fn+0x16a>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   10478:	4948      	ldr	r1, [pc, #288]	; (1059c <socket_thread_fn+0x270>)
   1047a:	4620      	mov	r0, r4
   1047c:	f00b fbcb 	bl	1bc16 <strstr>
		if (tmpstr) {
   10480:	9001      	str	r0, [sp, #4]
   10482:	b310      	cbz	r0, 104ca <socket_thread_fn+0x19e>
			ret->state = AT_CMD_ERROR_CMS;
   10484:	2202      	movs	r2, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   10486:	f106 0017 	add.w	r0, r6, #23
			ret->state = AT_CMD_ERROR_CME;
   1048a:	f88d 2014 	strb.w	r2, [sp, #20]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   1048e:	f00b faad 	bl	1b9ec <atoi>
   10492:	9b01      	ldr	r3, [sp, #4]
   10494:	9004      	str	r0, [sp, #16]
		buf[new_len++] = '\0';
   10496:	2100      	movs	r1, #0
		new_len = tmpstr - buf;
   10498:	1b1a      	subs	r2, r3, r4
		buf[new_len++] = '\0';
   1049a:	3201      	adds	r2, #1
   1049c:	7019      	strb	r1, [r3, #0]
		if (ret.state != AT_CMD_NOTIFICATION) {
   1049e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   104a2:	2b04      	cmp	r3, #4
   104a4:	d04c      	beq.n	10540 <socket_thread_fn+0x214>
			if ((response_buf_len > 0) &&
   104a6:	4c3e      	ldr	r4, [pc, #248]	; (105a0 <socket_thread_fn+0x274>)
   104a8:	6823      	ldr	r3, [r4, #0]
   104aa:	2b00      	cmp	r3, #0
   104ac:	d051      	beq.n	10552 <socket_thread_fn+0x226>
			    (response_buf != NULL)) {
   104ae:	4e3d      	ldr	r6, [pc, #244]	; (105a4 <socket_thread_fn+0x278>)
   104b0:	6830      	ldr	r0, [r6, #0]
			if ((response_buf_len > 0) &&
   104b2:	2800      	cmp	r0, #0
   104b4:	d04d      	beq.n	10552 <socket_thread_fn+0x226>
				if (response_buf_len > payload_len) {
   104b6:	4293      	cmp	r3, r2
   104b8:	d91c      	bls.n	104f4 <socket_thread_fn+0x1c8>
					memcpy(response_buf, item->data,
   104ba:	9903      	ldr	r1, [sp, #12]
   104bc:	310c      	adds	r1, #12
   104be:	f00b fc24 	bl	1bd0a <memcpy>
				response_buf_len = 0;
   104c2:	2300      	movs	r3, #0
   104c4:	6023      	str	r3, [r4, #0]
				response_buf     = NULL;
   104c6:	6033      	str	r3, [r6, #0]
				goto next;
   104c8:	e77d      	b.n	103c6 <socket_thread_fn+0x9a>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   104ca:	4937      	ldr	r1, [pc, #220]	; (105a8 <socket_thread_fn+0x27c>)
   104cc:	4620      	mov	r0, r4
   104ce:	f00b fba2 	bl	1bc16 <strstr>
		if (tmpstr) {
   104d2:	9001      	str	r0, [sp, #4]
   104d4:	b108      	cbz	r0, 104da <socket_thread_fn+0x1ae>
			ret->state = AT_CMD_ERROR_CME;
   104d6:	2203      	movs	r2, #3
   104d8:	e7d5      	b.n	10486 <socket_thread_fn+0x15a>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   104da:	4934      	ldr	r1, [pc, #208]	; (105ac <socket_thread_fn+0x280>)
   104dc:	4620      	mov	r0, r4
   104de:	f00b fb9a 	bl	1bc16 <strstr>
		if (tmpstr) {
   104e2:	4603      	mov	r3, r0
   104e4:	2800      	cmp	r0, #0
   104e6:	d039      	beq.n	1055c <socket_thread_fn+0x230>
			ret->state = AT_CMD_ERROR;
   104e8:	2201      	movs	r2, #1
   104ea:	f88d 2014 	strb.w	r2, [sp, #20]
			ret->code  = -ENOEXEC;
   104ee:	f06f 0207 	mvn.w	r2, #7
   104f2:	e7bf      	b.n	10474 <socket_thread_fn+0x148>
					LOG_ERR("Response buffer not large "
   104f4:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   104f8:	f043 0301 	orr.w	r3, r3, #1
   104fc:	f363 0a07 	bfi	sl, r3, #0, #8
   10500:	f365 1a8f 	bfi	sl, r5, #6, #10
   10504:	4651      	mov	r1, sl
   10506:	482a      	ldr	r0, [pc, #168]	; (105b0 <socket_thread_fn+0x284>)
   10508:	f00b f8d3 	bl	1b6b2 <log_0>
					ret.code  = -EMSGSIZE;
   1050c:	f06f 0323 	mvn.w	r3, #35	; 0x23
   10510:	9304      	str	r3, [sp, #16]
   10512:	e7d6      	b.n	104c2 <socket_thread_fn+0x196>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   10514:	4b27      	ldr	r3, [pc, #156]	; (105b4 <socket_thread_fn+0x288>)
   10516:	2200      	movs	r2, #0
   10518:	604b      	str	r3, [r1, #4]
   1051a:	460b      	mov	r3, r1
   1051c:	600a      	str	r2, [r1, #0]
   1051e:	f843 2f08 	str.w	r2, [r3, #8]!
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10522:	e8d3 2fef 	ldaex	r2, [r3]
   10526:	f042 0001 	orr.w	r0, r2, #1
   1052a:	e8c3 0fe4 	stlex	r4, r0, [r3]
   1052e:	2c00      	cmp	r4, #0
   10530:	d1f7      	bne.n	10522 <socket_thread_fn+0x1f6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   10532:	07d3      	lsls	r3, r2, #31
   10534:	f53f af51 	bmi.w	103da <socket_thread_fn+0xae>
		k_queue_append(&work_q->queue, work);
   10538:	481f      	ldr	r0, [pc, #124]	; (105b8 <socket_thread_fn+0x28c>)
   1053a:	f00d f89d 	bl	1d678 <k_queue_append>
   1053e:	e74c      	b.n	103da <socket_thread_fn+0xae>
		if (payload_len == 0) {
   10540:	2a00      	cmp	r2, #0
   10542:	f43f af40 	beq.w	103c6 <socket_thread_fn+0x9a>
			item->callback = notification_handler;
   10546:	4b1d      	ldr	r3, [pc, #116]	; (105bc <socket_thread_fn+0x290>)
			item->callback = current_cmd_handler;
   10548:	681a      	ldr	r2, [r3, #0]
   1054a:	9b03      	ldr	r3, [sp, #12]
   1054c:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
   10550:	e739      	b.n	103c6 <socket_thread_fn+0x9a>
		if (payload_len == 0) {
   10552:	2a00      	cmp	r2, #0
   10554:	f43f af37 	beq.w	103c6 <socket_thread_fn+0x9a>
			item->callback = current_cmd_handler;
   10558:	4b0a      	ldr	r3, [pc, #40]	; (10584 <socket_thread_fn+0x258>)
   1055a:	e7f5      	b.n	10548 <socket_thread_fn+0x21c>
		new_len = strlen(buf) + 1;
   1055c:	4620      	mov	r0, r4
   1055e:	f00b fba2 	bl	1bca6 <strlen>
   10562:	1c42      	adds	r2, r0, #1
   10564:	e79b      	b.n	1049e <socket_thread_fn+0x172>
   10566:	bf00      	nop
   10568:	0001e02c 	.word	0x0001e02c
   1056c:	0001e03c 	.word	0x0001e03c
   10570:	20026928 	.word	0x20026928
   10574:	20020ad8 	.word	0x20020ad8
   10578:	0001fbf9 	.word	0x0001fbf9
   1057c:	0001fc1b 	.word	0x0001fc1b
   10580:	20026978 	.word	0x20026978
   10584:	20020c10 	.word	0x20020c10
   10588:	200269b8 	.word	0x200269b8
   1058c:	0001fc2f 	.word	0x0001fc2f
   10590:	20020c0c 	.word	0x20020c0c
   10594:	0001fc66 	.word	0x0001fc66
   10598:	0001fcb0 	.word	0x0001fcb0
   1059c:	0001fcb3 	.word	0x0001fcb3
   105a0:	20020c1c 	.word	0x20020c1c
   105a4:	20020c18 	.word	0x20020c18
   105a8:	0001fcbf 	.word	0x0001fcbf
   105ac:	0001fccb 	.word	0x0001fccb
   105b0:	0001fcd1 	.word	0x0001fcd1
   105b4:	00010275 	.word	0x00010275
   105b8:	20021da0 	.word	0x20021da0
   105bc:	20020c14 	.word	0x20020c14

000105c0 <at_write>:
{
   105c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   105c2:	4607      	mov	r7, r0
   105c4:	460d      	mov	r5, r1
	int bytes_to_send = strlen(cmd);
   105c6:	f00b fb6e 	bl	1bca6 <strlen>
	return socket_ops->send(sock, buf, len, flags);
   105ca:	4b23      	ldr	r3, [pc, #140]	; (10658 <at_write+0x98>)
   105cc:	4602      	mov	r2, r0
   105ce:	681b      	ldr	r3, [r3, #0]
   105d0:	4606      	mov	r6, r0
   105d2:	4822      	ldr	r0, [pc, #136]	; (1065c <at_write+0x9c>)
   105d4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   105d6:	4639      	mov	r1, r7
   105d8:	2300      	movs	r3, #0
   105da:	6800      	ldr	r0, [r0, #0]
   105dc:	47a0      	blx	r4
	if (bytes_sent == -1) {
   105de:	1c43      	adds	r3, r0, #1
   105e0:	4604      	mov	r4, r0
   105e2:	d120      	bne.n	10626 <at_write+0x66>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   105e4:	2301      	movs	r3, #1
   105e6:	f04f 0400 	mov.w	r4, #0
   105ea:	4a1d      	ldr	r2, [pc, #116]	; (10660 <at_write+0xa0>)
   105ec:	f363 0407 	bfi	r4, r3, #0, #8
   105f0:	4b1c      	ldr	r3, [pc, #112]	; (10664 <at_write+0xa4>)
   105f2:	1a9b      	subs	r3, r3, r2
   105f4:	08db      	lsrs	r3, r3, #3
   105f6:	f363 148f 	bfi	r4, r3, #6, #10
   105fa:	f009 fa07 	bl	19a0c <z_impl_z_errno>
   105fe:	4622      	mov	r2, r4
   10600:	6801      	ldr	r1, [r0, #0]
   10602:	4819      	ldr	r0, [pc, #100]	; (10668 <at_write+0xa8>)
   10604:	f00b f862 	bl	1b6cc <log_1>
   10608:	f009 fa00 	bl	19a0c <z_impl_z_errno>
		ret.code  = -errno;
   1060c:	6803      	ldr	r3, [r0, #0]
   1060e:	425b      	negs	r3, r3
   10610:	9300      	str	r3, [sp, #0]
		ret.state = AT_CMD_ERROR;
   10612:	2301      	movs	r3, #1
   10614:	f88d 3004 	strb.w	r3, [sp, #4]
	if (state) {
   10618:	b115      	cbz	r5, 10620 <at_write+0x60>
		*state = ret.state;
   1061a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1061e:	702b      	strb	r3, [r5, #0]
}
   10620:	9800      	ldr	r0, [sp, #0]
   10622:	b003      	add	sp, #12
   10624:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&msgq, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
   10626:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1062a:	4669      	mov	r1, sp
   1062c:	480f      	ldr	r0, [pc, #60]	; (1066c <at_write+0xac>)
   1062e:	f009 fcab 	bl	19f88 <z_impl_k_msgq_get>
		if (bytes_sent != bytes_to_send) {
   10632:	42a6      	cmp	r6, r4
   10634:	d0f0      	beq.n	10618 <at_write+0x58>
			LOG_ERR("Bytes sent (%d) was not the "
   10636:	2201      	movs	r2, #1
   10638:	f04f 0300 	mov.w	r3, #0
   1063c:	4908      	ldr	r1, [pc, #32]	; (10660 <at_write+0xa0>)
   1063e:	f362 0307 	bfi	r3, r2, #0, #8
   10642:	4a08      	ldr	r2, [pc, #32]	; (10664 <at_write+0xa4>)
   10644:	480a      	ldr	r0, [pc, #40]	; (10670 <at_write+0xb0>)
   10646:	1a52      	subs	r2, r2, r1
   10648:	08d2      	lsrs	r2, r2, #3
   1064a:	f362 138f 	bfi	r3, r2, #6, #10
   1064e:	4621      	mov	r1, r4
   10650:	4632      	mov	r2, r6
   10652:	f00b f84f 	bl	1b6f4 <log_2>
   10656:	e7df      	b.n	10618 <at_write+0x58>
   10658:	20020ad8 	.word	0x20020ad8
   1065c:	20020c0c 	.word	0x20020c0c
   10660:	0001e02c 	.word	0x0001e02c
   10664:	0001e03c 	.word	0x0001e03c
   10668:	0001fba4 	.word	0x0001fba4
   1066c:	200269b8 	.word	0x200269b8
   10670:	0001fbc7 	.word	0x0001fbc7

00010674 <at_cmd_write>:
{
   10674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10678:	4605      	mov	r5, r0
   1067a:	4688      	mov	r8, r1
   1067c:	4617      	mov	r7, r2
   1067e:	461e      	mov	r6, r3
	return z_impl_k_sem_take(sem, timeout);
   10680:	4c0a      	ldr	r4, [pc, #40]	; (106ac <at_cmd_write+0x38>)
   10682:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10686:	4620      	mov	r0, r4
   10688:	f00a f92c 	bl	1a8e4 <z_impl_k_sem_take>
	response_buf     = buf;
   1068c:	4b08      	ldr	r3, [pc, #32]	; (106b0 <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
   1068e:	4631      	mov	r1, r6
	response_buf     = buf;
   10690:	f8c3 8000 	str.w	r8, [r3]
	response_buf_len = buf_len;
   10694:	4b07      	ldr	r3, [pc, #28]	; (106b4 <at_cmd_write+0x40>)
	int return_code = at_write(cmd, state);
   10696:	4628      	mov	r0, r5
	response_buf_len = buf_len;
   10698:	601f      	str	r7, [r3, #0]
	int return_code = at_write(cmd, state);
   1069a:	f7ff ff91 	bl	105c0 <at_write>
   1069e:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   106a0:	4620      	mov	r0, r4
   106a2:	f00a f8f3 	bl	1a88c <z_impl_k_sem_give>
}
   106a6:	4628      	mov	r0, r5
   106a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   106ac:	20026978 	.word	0x20026978
   106b0:	20020c18 	.word	0x20020c18
   106b4:	20020c1c 	.word	0x20020c1c

000106b8 <at_cmd_set_notification_handler>:
{
   106b8:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   106ba:	4c0f      	ldr	r4, [pc, #60]	; (106f8 <at_cmd_set_notification_handler+0x40>)
{
   106bc:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   106be:	6821      	ldr	r1, [r4, #0]
   106c0:	b179      	cbz	r1, 106e2 <at_cmd_set_notification_handler+0x2a>
   106c2:	4281      	cmp	r1, r0
   106c4:	d00d      	beq.n	106e2 <at_cmd_set_notification_handler+0x2a>
		LOG_WRN("Forgetting prior notification handler %p",
   106c6:	2302      	movs	r3, #2
   106c8:	f04f 0200 	mov.w	r2, #0
   106cc:	480b      	ldr	r0, [pc, #44]	; (106fc <at_cmd_set_notification_handler+0x44>)
   106ce:	f363 0207 	bfi	r2, r3, #0, #8
   106d2:	4b0b      	ldr	r3, [pc, #44]	; (10700 <at_cmd_set_notification_handler+0x48>)
   106d4:	1a1b      	subs	r3, r3, r0
   106d6:	08db      	lsrs	r3, r3, #3
   106d8:	f363 128f 	bfi	r2, r3, #6, #10
   106dc:	4809      	ldr	r0, [pc, #36]	; (10704 <at_cmd_set_notification_handler+0x4c>)
   106de:	f00a fff5 	bl	1b6cc <log_1>
	return z_impl_k_sem_take(sem, timeout);
   106e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   106e6:	4808      	ldr	r0, [pc, #32]	; (10708 <at_cmd_set_notification_handler+0x50>)
   106e8:	f00a f8fc 	bl	1a8e4 <z_impl_k_sem_take>
	notification_handler = handler;
   106ec:	6025      	str	r5, [r4, #0]
	z_impl_k_sem_give(sem);
   106ee:	4806      	ldr	r0, [pc, #24]	; (10708 <at_cmd_set_notification_handler+0x50>)
}
   106f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   106f4:	f00a b8ca 	b.w	1a88c <z_impl_k_sem_give>
   106f8:	20020c14 	.word	0x20020c14
   106fc:	0001e02c 	.word	0x0001e02c
   10700:	0001e03c 	.word	0x0001e03c
   10704:	0001fb7b 	.word	0x0001fb7b
   10708:	20026978 	.word	0x20026978

0001070c <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1070c:	4b0b      	ldr	r3, [pc, #44]	; (1073c <find_node+0x30>)
{
   1070e:	b570      	push	{r4, r5, r6, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   10710:	681b      	ldr	r3, [r3, #0]
   10712:	b153      	cbz	r3, 1072a <find_node+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10714:	2500      	movs	r5, #0
   10716:	461c      	mov	r4, r3
   10718:	681b      	ldr	r3, [r3, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   1071a:	6866      	ldr	r6, [r4, #4]
   1071c:	428e      	cmp	r6, r1
   1071e:	d106      	bne.n	1072e <find_node+0x22>
   10720:	68a6      	ldr	r6, [r4, #8]
   10722:	4296      	cmp	r6, r2
   10724:	d103      	bne.n	1072e <find_node+0x22>
			*prev_out = prev;
			return curr;
   10726:	4623      	mov	r3, r4
			*prev_out = prev;
   10728:	6005      	str	r5, [r0, #0]
		}
		prev = curr;
	}
	return NULL;
}
   1072a:	4618      	mov	r0, r3
   1072c:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1072e:	2b00      	cmp	r3, #0
   10730:	d0fb      	beq.n	1072a <find_node+0x1e>
   10732:	4625      	mov	r5, r4
   10734:	461c      	mov	r4, r3
   10736:	681b      	ldr	r3, [r3, #0]
   10738:	e7ef      	b.n	1071a <find_node+0xe>
   1073a:	bf00      	nop
   1073c:	20020cd0 	.word	0x20020cd0

00010740 <module_init>:

	k_mutex_unlock(&list_mtx);
}

static int module_init(struct device *dev)
{
   10740:	b510      	push	{r4, lr}
	list->head = NULL;
   10742:	2400      	movs	r4, #0
   10744:	4b03      	ldr	r3, [pc, #12]	; (10754 <module_init+0x14>)
	ARG_UNUSED(dev);

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
   10746:	4804      	ldr	r0, [pc, #16]	; (10758 <module_init+0x18>)
	list->tail = NULL;
   10748:	e9c3 4400 	strd	r4, r4, [r3]
   1074c:	f7ff ffb4 	bl	106b8 <at_cmd_set_notification_handler>
	return 0;
}
   10750:	4620      	mov	r0, r4
   10752:	bd10      	pop	{r4, pc}
   10754:	20020cd0 	.word	0x20020cd0
   10758:	00010769 	.word	0x00010769

0001075c <k_mutex_unlock.constprop.6>:
	return z_impl_k_mutex_unlock(mutex);
   1075c:	4801      	ldr	r0, [pc, #4]	; (10764 <k_mutex_unlock.constprop.6+0x8>)
   1075e:	f009 bce3 	b.w	1a128 <z_impl_k_mutex_unlock>
   10762:	bf00      	nop
   10764:	200269a4 	.word	0x200269a4

00010768 <notif_dispatch>:
{
   10768:	b538      	push	{r3, r4, r5, lr}
   1076a:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   1076c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10770:	4809      	ldr	r0, [pc, #36]	; (10798 <notif_dispatch+0x30>)
   10772:	f009 fc67 	bl	1a044 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   10776:	4b09      	ldr	r3, [pc, #36]	; (1079c <notif_dispatch+0x34>)
   10778:	681b      	ldr	r3, [r3, #0]
   1077a:	b91b      	cbnz	r3, 10784 <notif_dispatch+0x1c>
}
   1077c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   10780:	f7ff bfec 	b.w	1075c <k_mutex_unlock.constprop.6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10784:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   10786:	689a      	ldr	r2, [r3, #8]
   10788:	4629      	mov	r1, r5
   1078a:	6858      	ldr	r0, [r3, #4]
   1078c:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1078e:	2c00      	cmp	r4, #0
   10790:	d0f4      	beq.n	1077c <notif_dispatch+0x14>
   10792:	4623      	mov	r3, r4
   10794:	6824      	ldr	r4, [r4, #0]
   10796:	e7f6      	b.n	10786 <notif_dispatch+0x1e>
   10798:	200269a4 	.word	0x200269a4
   1079c:	20020cd0 	.word	0x20020cd0

000107a0 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   107a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   107a2:	4606      	mov	r6, r0
	if (handler == NULL) {
   107a4:	460c      	mov	r4, r1
   107a6:	b999      	cbnz	r1, 107d0 <at_notif_register_handler+0x30>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   107a8:	2201      	movs	r2, #1
   107aa:	f04f 0300 	mov.w	r3, #0
   107ae:	491e      	ldr	r1, [pc, #120]	; (10828 <at_notif_register_handler+0x88>)
   107b0:	f362 0307 	bfi	r3, r2, #0, #8
   107b4:	4a1d      	ldr	r2, [pc, #116]	; (1082c <at_notif_register_handler+0x8c>)
   107b6:	1a52      	subs	r2, r2, r1
   107b8:	08d2      	lsrs	r2, r2, #3
   107ba:	f362 138f 	bfi	r3, r2, #6, #10
   107be:	4601      	mov	r1, r0
   107c0:	4622      	mov	r2, r4
   107c2:	481b      	ldr	r0, [pc, #108]	; (10830 <at_notif_register_handler+0x90>)
   107c4:	f00a ff96 	bl	1b6f4 <log_2>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   107c8:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   107cc:	b002      	add	sp, #8
   107ce:	bd70      	pop	{r4, r5, r6, pc}
   107d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   107d4:	4817      	ldr	r0, [pc, #92]	; (10834 <at_notif_register_handler+0x94>)
   107d6:	f009 fc35 	bl	1a044 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   107da:	4622      	mov	r2, r4
   107dc:	4631      	mov	r1, r6
   107de:	a801      	add	r0, sp, #4
   107e0:	f7ff ff94 	bl	1070c <find_node>
   107e4:	4605      	mov	r5, r0
   107e6:	b118      	cbz	r0, 107f0 <at_notif_register_handler+0x50>
		k_mutex_unlock(&list_mtx);
   107e8:	f7ff ffb8 	bl	1075c <k_mutex_unlock.constprop.6>
		return 0;
   107ec:	2000      	movs	r0, #0
   107ee:	e7ed      	b.n	107cc <at_notif_register_handler+0x2c>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   107f0:	200c      	movs	r0, #12
   107f2:	f009 fb5b 	bl	19eac <k_malloc>
   107f6:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   107f8:	b920      	cbnz	r0, 10804 <at_notif_register_handler+0x64>
		k_mutex_unlock(&list_mtx);
   107fa:	f7ff ffaf 	bl	1075c <k_mutex_unlock.constprop.6>
		return -ENOBUFS;
   107fe:	f06f 0036 	mvn.w	r0, #54	; 0x36
   10802:	e7e3      	b.n	107cc <at_notif_register_handler+0x2c>
	memset(to_ins, 0, sizeof(struct notif_handler));
   10804:	220c      	movs	r2, #12
   10806:	4629      	mov	r1, r5
   10808:	f00b faa9 	bl	1bd5e <memset>
	to_ins->ctx     = ctx;
   1080c:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   1080e:	4a0a      	ldr	r2, [pc, #40]	; (10838 <at_notif_register_handler+0x98>)
	parent->next = child;
   10810:	601d      	str	r5, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   10812:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   10814:	e9c3 6401 	strd	r6, r4, [r3, #4]
   10818:	b911      	cbnz	r1, 10820 <at_notif_register_handler+0x80>
	list->head = node;
   1081a:	e9c2 3300 	strd	r3, r3, [r2]
   1081e:	e7e3      	b.n	107e8 <at_notif_register_handler+0x48>
	parent->next = child;
   10820:	600b      	str	r3, [r1, #0]
	list->tail = node;
   10822:	6053      	str	r3, [r2, #4]
   10824:	e7e0      	b.n	107e8 <at_notif_register_handler+0x48>
   10826:	bf00      	nop
   10828:	0001e02c 	.word	0x0001e02c
   1082c:	0001e044 	.word	0x0001e044
   10830:	0001fd1f 	.word	0x0001fd1f
   10834:	200269a4 	.word	0x200269a4
   10838:	20020cd0 	.word	0x20020cd0

0001083c <at_notif_deregister_handler>:

int at_notif_deregister_handler(void *context, at_notif_handler_t handler)
{
   1083c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1083e:	4605      	mov	r5, r0
	if (handler == NULL) {
   10840:	460c      	mov	r4, r1
   10842:	b999      	cbnz	r1, 1086c <at_notif_deregister_handler+0x30>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   10844:	2201      	movs	r2, #1
   10846:	f04f 0300 	mov.w	r3, #0
   1084a:	4922      	ldr	r1, [pc, #136]	; (108d4 <at_notif_deregister_handler+0x98>)
   1084c:	f362 0307 	bfi	r3, r2, #0, #8
   10850:	4a21      	ldr	r2, [pc, #132]	; (108d8 <at_notif_deregister_handler+0x9c>)
   10852:	1a89      	subs	r1, r1, r2
   10854:	08c9      	lsrs	r1, r1, #3
   10856:	f361 138f 	bfi	r3, r1, #6, #10
   1085a:	4622      	mov	r2, r4
   1085c:	4601      	mov	r1, r0
   1085e:	481f      	ldr	r0, [pc, #124]	; (108dc <at_notif_deregister_handler+0xa0>)
   10860:	f00a ff48 	bl	1b6f4 <log_2>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   10864:	f06f 0015 	mvn.w	r0, #21
	}
	return remove_notif_handler(context, handler);
}
   10868:	b003      	add	sp, #12
   1086a:	bd30      	pop	{r4, r5, pc}
	struct notif_handler *curr, *prev = NULL;
   1086c:	2300      	movs	r3, #0
   1086e:	9301      	str	r3, [sp, #4]
   10870:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10874:	481a      	ldr	r0, [pc, #104]	; (108e0 <at_notif_deregister_handler+0xa4>)
   10876:	f009 fbe5 	bl	1a044 <z_impl_k_mutex_lock>
	curr = find_node(&prev, ctx, handler);
   1087a:	4622      	mov	r2, r4
   1087c:	4629      	mov	r1, r5
   1087e:	a801      	add	r0, sp, #4
   10880:	f7ff ff44 	bl	1070c <find_node>
	if (curr == NULL) {
   10884:	b988      	cbnz	r0, 108aa <at_notif_deregister_handler+0x6e>
		LOG_WRN("Handler not registered. Nothing to do");
   10886:	2302      	movs	r3, #2
   10888:	f04f 0100 	mov.w	r1, #0
   1088c:	4a12      	ldr	r2, [pc, #72]	; (108d8 <at_notif_deregister_handler+0x9c>)
   1088e:	f363 0107 	bfi	r1, r3, #0, #8
   10892:	4b10      	ldr	r3, [pc, #64]	; (108d4 <at_notif_deregister_handler+0x98>)
   10894:	4813      	ldr	r0, [pc, #76]	; (108e4 <at_notif_deregister_handler+0xa8>)
   10896:	1a9b      	subs	r3, r3, r2
   10898:	08db      	lsrs	r3, r3, #3
   1089a:	f363 118f 	bfi	r1, r3, #6, #10
   1089e:	f00a ff08 	bl	1b6b2 <log_0>
	k_mutex_unlock(&list_mtx);
   108a2:	f7ff ff5b 	bl	1075c <k_mutex_unlock.constprop.6>
	return remove_notif_handler(context, handler);
   108a6:	2000      	movs	r0, #0
   108a8:	e7de      	b.n	10868 <at_notif_deregister_handler+0x2c>
	sys_slist_remove(&handler_list, &prev->node, &curr->node);
   108aa:	9a01      	ldr	r2, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   108ac:	6801      	ldr	r1, [r0, #0]
   108ae:	4b0e      	ldr	r3, [pc, #56]	; (108e8 <at_notif_deregister_handler+0xac>)
   108b0:	b94a      	cbnz	r2, 108c6 <at_notif_deregister_handler+0x8a>
   108b2:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   108b4:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   108b6:	4290      	cmp	r0, r2
   108b8:	d100      	bne.n	108bc <at_notif_deregister_handler+0x80>
	list->tail = node;
   108ba:	6059      	str	r1, [r3, #4]
	parent->next = child;
   108bc:	2300      	movs	r3, #0
   108be:	6003      	str	r3, [r0, #0]
	k_free(curr);
   108c0:	f00c fe57 	bl	1d572 <k_free>
   108c4:	e7ed      	b.n	108a2 <at_notif_deregister_handler+0x66>
   108c6:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   108c8:	6859      	ldr	r1, [r3, #4]
   108ca:	4288      	cmp	r0, r1
	list->tail = node;
   108cc:	bf08      	it	eq
   108ce:	605a      	streq	r2, [r3, #4]
   108d0:	e7f4      	b.n	108bc <at_notif_deregister_handler+0x80>
   108d2:	bf00      	nop
   108d4:	0001e044 	.word	0x0001e044
   108d8:	0001e02c 	.word	0x0001e02c
   108dc:	0001fd1f 	.word	0x0001fd1f
   108e0:	200269a4 	.word	0x200269a4
   108e4:	0001fcf9 	.word	0x0001fcf9
   108e8:	20020cd0 	.word	0x20020cd0

000108ec <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   108ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   108f0:	6805      	ldr	r5, [r0, #0]
{
   108f2:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   108f4:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   108f6:	782b      	ldrb	r3, [r5, #0]
{
   108f8:	4680      	mov	r8, r0
   108fa:	460f      	mov	r7, r1
   108fc:	4616      	mov	r6, r2
   108fe:	2b00      	cmp	r3, #0
   10900:	f000 80c1 	beq.w	10a86 <at_parse_process_element+0x19a>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   10904:	4b61      	ldr	r3, [pc, #388]	; (10a8c <at_parse_process_element+0x1a0>)
   10906:	781c      	ldrb	r4, [r3, #0]
   10908:	2c05      	cmp	r4, #5
   1090a:	d110      	bne.n	1092e <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   1090c:	1c6b      	adds	r3, r5, #1
   1090e:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   10910:	9a00      	ldr	r2, [sp, #0]
   10912:	7810      	ldrb	r0, [r2, #0]
   10914:	f00c fc70 	bl	1d1f8 <is_valid_notification_char>
   10918:	b930      	cbnz	r0, 10928 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1091a:	1b53      	subs	r3, r2, r5

		while (isxdigit(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1091c:	462a      	mov	r2, r5
   1091e:	4639      	mov	r1, r7
   10920:	4630      	mov	r0, r6
   10922:	f00c fd34 	bl	1d38e <at_params_string_put>
   10926:	e01b      	b.n	10960 <at_parse_process_element+0x74>
			tmpstr++;
   10928:	3201      	adds	r2, #1
   1092a:	9200      	str	r2, [sp, #0]
   1092c:	e7f0      	b.n	10910 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   1092e:	2c06      	cmp	r4, #6
   10930:	d124      	bne.n	1097c <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   10932:	4668      	mov	r0, sp
   10934:	f00c fc52 	bl	1d1dc <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   10938:	9a00      	ldr	r2, [sp, #0]
   1093a:	7810      	ldrb	r0, [r2, #0]
   1093c:	f00c fc5c 	bl	1d1f8 <is_valid_notification_char>
   10940:	b9a8      	cbnz	r0, 1096e <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   10942:	1b53      	subs	r3, r2, r5
   10944:	4639      	mov	r1, r7
   10946:	462a      	mov	r2, r5
   10948:	4630      	mov	r0, r6
   1094a:	f00c fd20 	bl	1d38e <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   1094e:	9b00      	ldr	r3, [sp, #0]
   10950:	781a      	ldrb	r2, [r3, #0]
   10952:	2a3d      	cmp	r2, #61	; 0x3d
   10954:	d10e      	bne.n	10974 <at_parse_process_element+0x88>
   10956:	785a      	ldrb	r2, [r3, #1]
   10958:	2a3f      	cmp	r2, #63	; 0x3f
   1095a:	d101      	bne.n	10960 <at_parse_process_element+0x74>
			tmpstr += 2;
   1095c:	3302      	adds	r3, #2
			tmpstr++;
   1095e:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   10960:	2000      	movs	r0, #0
	*str = tmpstr;
   10962:	9b00      	ldr	r3, [sp, #0]
   10964:	f8c8 3000 	str.w	r3, [r8]
}
   10968:	b023      	add	sp, #140	; 0x8c
   1096a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   1096e:	3201      	adds	r2, #1
   10970:	9200      	str	r2, [sp, #0]
   10972:	e7e1      	b.n	10938 <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   10974:	2a3f      	cmp	r2, #63	; 0x3f
   10976:	d1f3      	bne.n	10960 <at_parse_process_element+0x74>
			tmpstr++;
   10978:	3301      	adds	r3, #1
   1097a:	e7f0      	b.n	1095e <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   1097c:	2c07      	cmp	r4, #7
   1097e:	d103      	bne.n	10988 <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   10980:	4610      	mov	r0, r2
   10982:	f00c fcdf 	bl	1d344 <at_params_empty_put>
   10986:	e7eb      	b.n	10960 <at_parse_process_element+0x74>
	} else if (state == STRING) {
   10988:	2c02      	cmp	r4, #2
   1098a:	d112      	bne.n	109b2 <at_parse_process_element+0xc6>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr) &&
   1098c:	9a00      	ldr	r2, [sp, #0]
   1098e:	7810      	ldrb	r0, [r2, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   10990:	2822      	cmp	r0, #34	; 0x22
   10992:	d003      	beq.n	1099c <at_parse_process_element+0xb0>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   10994:	b110      	cbz	r0, 1099c <at_parse_process_element+0xb0>
		       !is_lfcr(*tmpstr)) {
   10996:	f00c fc18 	bl	1d1ca <is_lfcr>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr) &&
   1099a:	b138      	cbz	r0, 109ac <at_parse_process_element+0xc0>
		at_params_string_put(list, index, start_ptr,
   1099c:	1b53      	subs	r3, r2, r5
   1099e:	4639      	mov	r1, r7
   109a0:	462a      	mov	r2, r5
   109a2:	4630      	mov	r0, r6
   109a4:	f00c fcf3 	bl	1d38e <at_params_string_put>
		tmpstr++;
   109a8:	9b00      	ldr	r3, [sp, #0]
   109aa:	e7e5      	b.n	10978 <at_parse_process_element+0x8c>
			tmpstr++;
   109ac:	3201      	adds	r2, #1
   109ae:	9200      	str	r2, [sp, #0]
   109b0:	e7ec      	b.n	1098c <at_parse_process_element+0xa0>
	} else if (state == ARRAY) {
   109b2:	2c01      	cmp	r4, #1
   109b4:	d13c      	bne.n	10a30 <at_parse_process_element+0x144>
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   109b6:	4628      	mov	r0, r5
   109b8:	220a      	movs	r2, #10
   109ba:	a901      	add	r1, sp, #4
   109bc:	f00b f8b2 	bl	1bb24 <strtoul>
		tmpstr = next;
   109c0:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   109c2:	4d33      	ldr	r5, [pc, #204]	; (10a90 <at_parse_process_element+0x1a4>)
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   109c4:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   109c6:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   109c8:	9800      	ldr	r0, [sp, #0]
   109ca:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   109cc:	2b29      	cmp	r3, #41	; 0x29
   109ce:	d028      	beq.n	10a22 <at_parse_process_element+0x136>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   109d0:	b33b      	cbz	r3, 10a22 <at_parse_process_element+0x136>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   109d2:	3b2c      	subs	r3, #44	; 0x2c
   109d4:	b2db      	uxtb	r3, r3
   109d6:	3001      	adds	r0, #1
   109d8:	2b11      	cmp	r3, #17
				tmparray[i++] =
   109da:	9000      	str	r0, [sp, #0]
   109dc:	d803      	bhi.n	109e6 <at_parse_process_element+0xfa>
   109de:	fa25 f303 	lsr.w	r3, r5, r3
   109e2:	07db      	lsls	r3, r3, #31
   109e4:	d408      	bmi.n	109f8 <at_parse_process_element+0x10c>
				tmpstr++;
   109e6:	46a1      	mov	r9, r4
   109e8:	e004      	b.n	109f4 <at_parse_process_element+0x108>
					tmpstr = next;
   109ea:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   109ec:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   109f0:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   109f2:	d015      	beq.n	10a20 <at_parse_process_element+0x134>
				tmpstr++;
   109f4:	464c      	mov	r4, r9
   109f6:	e7e7      	b.n	109c8 <at_parse_process_element+0xdc>
					(u32_t)strtoul(++tmpstr, &next, 10);
   109f8:	220a      	movs	r2, #10
   109fa:	a901      	add	r1, sp, #4
   109fc:	f00b f892 	bl	1bb24 <strtoul>
				tmparray[i++] =
   10a00:	ab22      	add	r3, sp, #136	; 0x88
   10a02:	f104 0901 	add.w	r9, r4, #1
   10a06:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   10a0a:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   10a0e:	9800      	ldr	r0, [sp, #0]
   10a10:	f00b f949 	bl	1bca6 <strlen>
   10a14:	4604      	mov	r4, r0
   10a16:	9801      	ldr	r0, [sp, #4]
   10a18:	f00b f945 	bl	1bca6 <strlen>
   10a1c:	4284      	cmp	r4, r0
   10a1e:	d1e4      	bne.n	109ea <at_parse_process_element+0xfe>
   10a20:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(u32_t));
   10a22:	00a3      	lsls	r3, r4, #2
   10a24:	aa02      	add	r2, sp, #8
   10a26:	4639      	mov	r1, r7
   10a28:	4630      	mov	r0, r6
   10a2a:	f00c fcd3 	bl	1d3d4 <at_params_array_put>
   10a2e:	e7bb      	b.n	109a8 <at_parse_process_element+0xbc>
	} else if (state == NUMBER) {
   10a30:	2c03      	cmp	r4, #3
   10a32:	d115      	bne.n	10a60 <at_parse_process_element+0x174>
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   10a34:	220a      	movs	r2, #10
   10a36:	a902      	add	r1, sp, #8
   10a38:	4628      	mov	r0, r5
   10a3a:	f00b f873 	bl	1bb24 <strtoul>
		tmpstr = next;
   10a3e:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   10a40:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   10a44:	4602      	mov	r2, r0
		tmpstr = next;
   10a46:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   10a48:	d205      	bcs.n	10a56 <at_parse_process_element+0x16a>
			at_params_short_put(list, index, (u16_t)value);
   10a4a:	b282      	uxth	r2, r0
   10a4c:	4639      	mov	r1, r7
   10a4e:	4630      	mov	r0, r6
   10a50:	f00c fc65 	bl	1d31e <at_params_short_put>
   10a54:	e784      	b.n	10960 <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   10a56:	4639      	mov	r1, r7
   10a58:	4630      	mov	r0, r6
   10a5a:	f00c fc85 	bl	1d368 <at_params_int_put>
   10a5e:	e77f      	b.n	10960 <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   10a60:	2c04      	cmp	r4, #4
   10a62:	f47f af7d 	bne.w	10960 <at_parse_process_element+0x74>
		while (isxdigit(*tmpstr)) {
   10a66:	9b00      	ldr	r3, [sp, #0]
   10a68:	781a      	ldrb	r2, [r3, #0]

static inline int isxdigit(int a)
{
	unsigned int ua = (unsigned int)a;

	return (int)(((ua - (unsigned)'0') < 10U) ||
   10a6a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   10a6e:	2909      	cmp	r1, #9
   10a70:	d906      	bls.n	10a80 <at_parse_process_element+0x194>
			((ua | 32U) - (unsigned)'a' < 6U));
   10a72:	f042 0220 	orr.w	r2, r2, #32
   10a76:	3a61      	subs	r2, #97	; 0x61
	return (int)(((ua - (unsigned)'0') < 10U) ||
   10a78:	2a05      	cmp	r2, #5
   10a7a:	d901      	bls.n	10a80 <at_parse_process_element+0x194>
		at_params_string_put(list, index, start_ptr,
   10a7c:	1b5b      	subs	r3, r3, r5
   10a7e:	e74d      	b.n	1091c <at_parse_process_element+0x30>
			tmpstr++;
   10a80:	3301      	adds	r3, #1
   10a82:	9300      	str	r3, [sp, #0]
   10a84:	e7ef      	b.n	10a66 <at_parse_process_element+0x17a>
		return -1;
   10a86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a8a:	e76d      	b.n	10968 <at_parse_process_element+0x7c>
   10a8c:	20022071 	.word	0x20022071
   10a90:	00024001 	.word	0x00024001

00010a94 <at_parse_detect_type>:
{
   10a94:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   10a96:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   10a98:	2900      	cmp	r1, #0
{
   10a9a:	4605      	mov	r5, r0
   10a9c:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   10a9e:	d144      	bne.n	10b2a <at_parse_detect_type+0x96>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   10aa0:	2a2b      	cmp	r2, #43	; 0x2b
   10aa2:	4e2a      	ldr	r6, [pc, #168]	; (10b4c <at_parse_detect_type+0xb8>)
   10aa4:	d001      	beq.n	10aaa <at_parse_detect_type+0x16>
   10aa6:	2a25      	cmp	r2, #37	; 0x25
   10aa8:	d104      	bne.n	10ab4 <at_parse_detect_type+0x20>
	state = new_state;
   10aaa:	2305      	movs	r3, #5
   10aac:	7033      	strb	r3, [r6, #0]
	return 0;
   10aae:	2000      	movs	r0, #0
	*str = tmpstr;
   10ab0:	602c      	str	r4, [r5, #0]
}
   10ab2:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   10ab4:	4620      	mov	r0, r4
   10ab6:	f00c fbab 	bl	1d210 <is_command>
   10aba:	b3a0      	cbz	r0, 10b26 <at_parse_detect_type+0x92>
	state = new_state;
   10abc:	2306      	movs	r3, #6
   10abe:	e7f5      	b.n	10aac <at_parse_detect_type+0x18>
 * @retval true  If character is number character
 * @retval false If character is something else
 */
static inline bool is_number(char chr)
{
	if (isdigit(chr) || (chr == '-') || (chr == '+')) {
   10ac0:	f647 71e5 	movw	r1, #32741	; 0x7fe5
   10ac4:	fa21 f303 	lsr.w	r3, r1, r3
   10ac8:	07d9      	lsls	r1, r3, #31
   10aca:	d50a      	bpl.n	10ae2 <at_parse_detect_type+0x4e>
   10acc:	2203      	movs	r2, #3
   10ace:	4b1f      	ldr	r3, [pc, #124]	; (10b4c <at_parse_detect_type+0xb8>)
   10ad0:	701a      	strb	r2, [r3, #0]
   10ad2:	e7ec      	b.n	10aae <at_parse_detect_type+0x1a>
	if (chr == '(') {
   10ad4:	2a28      	cmp	r2, #40	; 0x28
   10ad6:	d104      	bne.n	10ae2 <at_parse_detect_type+0x4e>
   10ad8:	2201      	movs	r2, #1
   10ada:	4b1c      	ldr	r3, [pc, #112]	; (10b4c <at_parse_detect_type+0xb8>)
		tmpstr++;
   10adc:	4414      	add	r4, r2
	state = new_state;
   10ade:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   10ae0:	e7e5      	b.n	10aae <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   10ae2:	4610      	mov	r0, r2
   10ae4:	f00c fb71 	bl	1d1ca <is_lfcr>
   10ae8:	b170      	cbz	r0, 10b08 <at_parse_detect_type+0x74>
   10aea:	4918      	ldr	r1, [pc, #96]	; (10b4c <at_parse_detect_type+0xb8>)
   10aec:	7808      	ldrb	r0, [r1, #0]
   10aee:	2803      	cmp	r0, #3
   10af0:	d108      	bne.n	10b04 <at_parse_detect_type+0x70>
		while (is_lfcr(*tmpstr)) {
   10af2:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   10af6:	f00c fb68 	bl	1d1ca <is_lfcr>
   10afa:	2800      	cmp	r0, #0
   10afc:	d1f9      	bne.n	10af2 <at_parse_detect_type+0x5e>
	state = new_state;
   10afe:	2304      	movs	r3, #4
   10b00:	700b      	strb	r3, [r1, #0]
   10b02:	e7d4      	b.n	10aae <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   10b04:	2807      	cmp	r0, #7
   10b06:	d0d2      	beq.n	10aae <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   10b08:	3a2c      	subs	r2, #44	; 0x2c
   10b0a:	b2d2      	uxtb	r2, r2
   10b0c:	2a11      	cmp	r2, #17
   10b0e:	d807      	bhi.n	10b20 <at_parse_detect_type+0x8c>
   10b10:	4b0f      	ldr	r3, [pc, #60]	; (10b50 <at_parse_detect_type+0xbc>)
   10b12:	fa23 f202 	lsr.w	r2, r3, r2
   10b16:	07d3      	lsls	r3, r2, #31
   10b18:	d502      	bpl.n	10b20 <at_parse_detect_type+0x8c>
	state = new_state;
   10b1a:	4b0c      	ldr	r3, [pc, #48]	; (10b4c <at_parse_detect_type+0xb8>)
   10b1c:	2207      	movs	r2, #7
   10b1e:	e7d7      	b.n	10ad0 <at_parse_detect_type+0x3c>
		return -1;
   10b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10b24:	e7c5      	b.n	10ab2 <at_parse_detect_type+0x1e>
	state = new_state;
   10b26:	2302      	movs	r3, #2
   10b28:	e7c0      	b.n	10aac <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   10b2a:	dd03      	ble.n	10b34 <at_parse_detect_type+0xa0>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   10b2c:	2a2b      	cmp	r2, #43	; 0x2b
   10b2e:	d0f7      	beq.n	10b20 <at_parse_detect_type+0x8c>
   10b30:	2a25      	cmp	r2, #37	; 0x25
   10b32:	d0f5      	beq.n	10b20 <at_parse_detect_type+0x8c>
	if (isdigit(chr) || (chr == '-') || (chr == '+')) {
   10b34:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
   10b38:	b2db      	uxtb	r3, r3
   10b3a:	2b0e      	cmp	r3, #14
   10b3c:	d9c0      	bls.n	10ac0 <at_parse_detect_type+0x2c>
	if (chr == '"') {
   10b3e:	2a22      	cmp	r2, #34	; 0x22
   10b40:	d1c8      	bne.n	10ad4 <at_parse_detect_type+0x40>
	state = new_state;
   10b42:	2202      	movs	r2, #2
   10b44:	4b01      	ldr	r3, [pc, #4]	; (10b4c <at_parse_detect_type+0xb8>)
		tmpstr++;
   10b46:	3401      	adds	r4, #1
	state = new_state;
   10b48:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   10b4a:	e7b0      	b.n	10aae <at_parse_detect_type+0x1a>
   10b4c:	20022071 	.word	0x20022071
   10b50:	00024001 	.word	0x00024001

00010b54 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   10b54:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   10b58:	4688      	mov	r8, r1
   10b5a:	4616      	mov	r6, r2
   10b5c:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   10b5e:	4604      	mov	r4, r0
   10b60:	2800      	cmp	r0, #0
   10b62:	d07c      	beq.n	10c5e <at_parser_max_params_from_str+0x10a>
   10b64:	2a00      	cmp	r2, #0
   10b66:	d07a      	beq.n	10c5e <at_parser_max_params_from_str+0x10a>
   10b68:	6853      	ldr	r3, [r2, #4]
   10b6a:	2b00      	cmp	r3, #0
   10b6c:	d077      	beq.n	10c5e <at_parser_max_params_from_str+0x10a>
	state = IDLE;
   10b6e:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   10b70:	4610      	mov	r0, r2
   10b72:	f00c fbae 	bl	1d2d2 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   10b76:	6832      	ldr	r2, [r6, #0]
	const char *str = *at_params_str;
   10b78:	9401      	str	r4, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
   10b7a:	4297      	cmp	r7, r2
   10b7c:	bf28      	it	cs
   10b7e:	4617      	movcs	r7, r2
	int index = 0;
   10b80:	462c      	mov	r4, r5
	state = IDLE;
   10b82:	4b38      	ldr	r3, [pc, #224]	; (10c64 <at_parser_max_params_from_str+0x110>)
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   10b84:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 10c68 <at_parser_max_params_from_str+0x114>
   10b88:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   10b8a:	9a01      	ldr	r2, [sp, #4]
   10b8c:	7813      	ldrb	r3, [r2, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   10b8e:	2b00      	cmp	r3, #0
   10b90:	d04b      	beq.n	10c2a <at_parser_max_params_from_str+0xd6>
   10b92:	42a7      	cmp	r7, r4
   10b94:	d949      	bls.n	10c2a <at_parser_max_params_from_str+0xd6>
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   10b96:	2b20      	cmp	r3, #32
   10b98:	d002      	beq.n	10ba0 <at_parser_max_params_from_str+0x4c>
   10b9a:	3b09      	subs	r3, #9
   10b9c:	2b04      	cmp	r3, #4
   10b9e:	d801      	bhi.n	10ba4 <at_parser_max_params_from_str+0x50>
			str++;
   10ba0:	3201      	adds	r2, #1
   10ba2:	9201      	str	r2, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   10ba4:	4621      	mov	r1, r4
   10ba6:	a801      	add	r0, sp, #4
   10ba8:	f7ff ff74 	bl	10a94 <at_parse_detect_type>
   10bac:	1c42      	adds	r2, r0, #1
   10bae:	d03c      	beq.n	10c2a <at_parser_max_params_from_str+0xd6>
		if (at_parse_process_element(&str, index, list) == -1) {
   10bb0:	4632      	mov	r2, r6
   10bb2:	4621      	mov	r1, r4
   10bb4:	a801      	add	r0, sp, #4
   10bb6:	f7ff fe99 	bl	108ec <at_parse_process_element>
   10bba:	1c43      	adds	r3, r0, #1
   10bbc:	d035      	beq.n	10c2a <at_parser_max_params_from_str+0xd6>
		if (is_separator(*str)) {
   10bbe:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   10bc0:	781a      	ldrb	r2, [r3, #0]
   10bc2:	3a2c      	subs	r2, #44	; 0x2c
   10bc4:	b2d2      	uxtb	r2, r2
   10bc6:	2a11      	cmp	r2, #17
   10bc8:	d81a      	bhi.n	10c00 <at_parser_max_params_from_str+0xac>
   10bca:	fa29 f202 	lsr.w	r2, r9, r2
   10bce:	07d1      	lsls	r1, r2, #31
   10bd0:	d516      	bpl.n	10c00 <at_parser_max_params_from_str+0xac>
			if (is_lfcr(*(str + 1))) {
   10bd2:	7858      	ldrb	r0, [r3, #1]
   10bd4:	f00c faf9 	bl	1d1ca <is_lfcr>
   10bd8:	b178      	cbz	r0, 10bfa <at_parser_max_params_from_str+0xa6>
				index++;
   10bda:	3401      	adds	r4, #1
				if (index == max_params) {
   10bdc:	42bc      	cmp	r4, r7
   10bde:	d039      	beq.n	10c54 <at_parser_max_params_from_str+0x100>
				if (at_parse_detect_type(&str, index) == -1) {
   10be0:	4621      	mov	r1, r4
   10be2:	a801      	add	r0, sp, #4
   10be4:	f7ff ff56 	bl	10a94 <at_parse_detect_type>
   10be8:	1c42      	adds	r2, r0, #1
   10bea:	d01e      	beq.n	10c2a <at_parser_max_params_from_str+0xd6>
				if (at_parse_process_element(&str, index,
   10bec:	4632      	mov	r2, r6
   10bee:	4621      	mov	r1, r4
   10bf0:	a801      	add	r0, sp, #4
   10bf2:	f7ff fe7b 	bl	108ec <at_parse_process_element>
   10bf6:	1c43      	adds	r3, r0, #1
   10bf8:	d017      	beq.n	10c2a <at_parser_max_params_from_str+0xd6>
			str++;
   10bfa:	9b01      	ldr	r3, [sp, #4]
   10bfc:	3301      	adds	r3, #1
   10bfe:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   10c00:	9a01      	ldr	r2, [sp, #4]
   10c02:	7810      	ldrb	r0, [r2, #0]
   10c04:	f00c fae1 	bl	1d1ca <is_lfcr>
   10c08:	b1f8      	cbz	r0, 10c4a <at_parser_max_params_from_str+0xf6>
   10c0a:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   10c0c:	7811      	ldrb	r1, [r2, #0]
   10c0e:	4692      	mov	sl, r2
   10c10:	4608      	mov	r0, r1
   10c12:	3201      	adds	r2, #1
   10c14:	f00c fad9 	bl	1d1ca <is_lfcr>
   10c18:	2800      	cmp	r0, #0
   10c1a:	d1f7      	bne.n	10c0c <at_parser_max_params_from_str+0xb8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   10c1c:	b119      	cbz	r1, 10c26 <at_parser_max_params_from_str+0xd2>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   10c1e:	292b      	cmp	r1, #43	; 0x2b
   10c20:	d001      	beq.n	10c26 <at_parser_max_params_from_str+0xd2>
   10c22:	2925      	cmp	r1, #37	; 0x25
   10c24:	d111      	bne.n	10c4a <at_parser_max_params_from_str+0xf6>
				str += i;
   10c26:	f8cd a004 	str.w	sl, [sp, #4]
	*at_params_str = str;
   10c2a:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   10c2c:	b9a5      	cbnz	r5, 10c58 <at_parser_max_params_from_str+0x104>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   10c2e:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   10c30:	2a00      	cmp	r2, #0
   10c32:	bf0c      	ite	eq
   10c34:	2000      	moveq	r0, #0
   10c36:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   10c3a:	f1b8 0f00 	cmp.w	r8, #0
   10c3e:	d001      	beq.n	10c44 <at_parser_max_params_from_str+0xf0>
		*next_param_str = (char *)at_params_str;
   10c40:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   10c44:	b002      	add	sp, #8
   10c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		index++;
   10c4a:	3401      	adds	r4, #1
			oversized = true;
   10c4c:	42bc      	cmp	r4, r7
   10c4e:	bf08      	it	eq
   10c50:	2501      	moveq	r5, #1
   10c52:	e79a      	b.n	10b8a <at_parser_max_params_from_str+0x36>
					oversized = true;
   10c54:	4605      	mov	r5, r0
   10c56:	e7e8      	b.n	10c2a <at_parser_max_params_from_str+0xd6>
		return -E2BIG;
   10c58:	f06f 0006 	mvn.w	r0, #6
   10c5c:	e7ed      	b.n	10c3a <at_parser_max_params_from_str+0xe6>
		return -EINVAL;
   10c5e:	f06f 0015 	mvn.w	r0, #21
   10c62:	e7ef      	b.n	10c44 <at_parser_max_params_from_str+0xf0>
   10c64:	20022071 	.word	0x20022071
   10c68:	00024001 	.word	0x00024001

00010c6c <w_lte_lc_init>:
		k_sem_give(&link);
	}
}

static int w_lte_lc_init(void)
{
   10c6c:	b508      	push	{r3, lr}
	if (at_cmd_write(nw_mode_preferred, NULL, 0, NULL) != 0) {
   10c6e:	2300      	movs	r3, #0
   10c70:	4807      	ldr	r0, [pc, #28]	; (10c90 <w_lte_lc_init+0x24>)
   10c72:	461a      	mov	r2, r3
   10c74:	4619      	mov	r1, r3
   10c76:	f7ff fcfd 	bl	10674 <at_cmd_write>
   10c7a:	4603      	mov	r3, r0
   10c7c:	b928      	cbnz	r0, 10c8a <w_lte_lc_init+0x1e>
#if defined(CONFIG_BSD_LIBRARY_TRACE_ENABLED)
	if (at_cmd_write(mdm_trace, NULL, 0, NULL) != 0) {
		return -EIO;
	}
#endif
	if (at_cmd_write(cereg_5_subscribe, NULL, 0, NULL) != 0) {
   10c7e:	4602      	mov	r2, r0
   10c80:	4601      	mov	r1, r0
   10c82:	4804      	ldr	r0, [pc, #16]	; (10c94 <w_lte_lc_init+0x28>)
   10c84:	f7ff fcf6 	bl	10674 <at_cmd_write>
   10c88:	b108      	cbz	r0, 10c8e <w_lte_lc_init+0x22>
		return -EIO;
   10c8a:	f06f 0004 	mvn.w	r0, #4
	}
	LOG_INF("PDN Auth: %s", log_strdup(cgauth));
#endif

	return 0;
}
   10c8e:	bd08      	pop	{r3, pc}
   10c90:	0001fe8f 	.word	0x0001fe8f
   10c94:	0001fda3 	.word	0x0001fda3

00010c98 <parse_nw_reg_status>:
static int parse_nw_reg_status(const char *at_response,
			       enum lte_lc_nw_reg_status *status,
			       size_t reg_status_index)
{
	int err, reg_status;
	struct at_param_list resp_list = {0};
   10c98:	2300      	movs	r3, #0
{
   10c9a:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c9c:	b087      	sub	sp, #28
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   10c9e:	9302      	str	r3, [sp, #8]
	struct at_param_list resp_list = {0};
   10ca0:	e9cd 3304 	strd	r3, r3, [sp, #16]
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   10ca4:	f8cd 300b 	str.w	r3, [sp, #11]
	size_t response_prefix_len = sizeof(response_prefix);
   10ca8:	2307      	movs	r3, #7
{
   10caa:	460d      	mov	r5, r1
   10cac:	4617      	mov	r7, r2
	size_t response_prefix_len = sizeof(response_prefix);
   10cae:	9301      	str	r3, [sp, #4]

	if ((at_response == NULL) || (status == NULL)) {
   10cb0:	4606      	mov	r6, r0
   10cb2:	2800      	cmp	r0, #0
   10cb4:	f000 8082 	beq.w	10dbc <parse_nw_reg_status+0x124>
   10cb8:	2900      	cmp	r1, #0
   10cba:	d07f      	beq.n	10dbc <parse_nw_reg_status+0x124>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   10cbc:	210a      	movs	r1, #10
   10cbe:	a804      	add	r0, sp, #16
   10cc0:	f00c faf4 	bl	1d2ac <at_params_list_init>
	if (err) {
   10cc4:	4604      	mov	r4, r0
   10cc6:	b188      	cbz	r0, 10cec <parse_nw_reg_status+0x54>
		LOG_ERR("Could not init AT params list, error: %d", err);
   10cc8:	2301      	movs	r3, #1
   10cca:	f04f 0200 	mov.w	r2, #0
   10cce:	493d      	ldr	r1, [pc, #244]	; (10dc4 <parse_nw_reg_status+0x12c>)
   10cd0:	f363 0207 	bfi	r2, r3, #0, #8
   10cd4:	4b3c      	ldr	r3, [pc, #240]	; (10dc8 <parse_nw_reg_status+0x130>)
   10cd6:	1a5b      	subs	r3, r3, r1
   10cd8:	08db      	lsrs	r3, r3, #3
   10cda:	4601      	mov	r1, r0
   10cdc:	f363 128f 	bfi	r2, r3, #6, #10
   10ce0:	483a      	ldr	r0, [pc, #232]	; (10dcc <parse_nw_reg_status+0x134>)
   10ce2:	f00a fcf3 	bl	1b6cc <log_1>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   10ce6:	4620      	mov	r0, r4
   10ce8:	b007      	add	sp, #28
   10cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_max_params_from_str(at_response,
   10cec:	4601      	mov	r1, r0
   10cee:	230a      	movs	r3, #10
   10cf0:	aa04      	add	r2, sp, #16
   10cf2:	4630      	mov	r0, r6
   10cf4:	f7ff ff2e 	bl	10b54 <at_parser_max_params_from_str>
	if (err) {
   10cf8:	4604      	mov	r4, r0
   10cfa:	b190      	cbz	r0, 10d22 <parse_nw_reg_status+0x8a>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   10cfc:	2301      	movs	r3, #1
   10cfe:	f04f 0200 	mov.w	r2, #0
   10d02:	4930      	ldr	r1, [pc, #192]	; (10dc4 <parse_nw_reg_status+0x12c>)
   10d04:	f363 0207 	bfi	r2, r3, #0, #8
   10d08:	4b2f      	ldr	r3, [pc, #188]	; (10dc8 <parse_nw_reg_status+0x130>)
   10d0a:	1a5b      	subs	r3, r3, r1
   10d0c:	08db      	lsrs	r3, r3, #3
   10d0e:	4601      	mov	r1, r0
   10d10:	482f      	ldr	r0, [pc, #188]	; (10dd0 <parse_nw_reg_status+0x138>)
   10d12:	f363 128f 	bfi	r2, r3, #6, #10
		LOG_ERR("Could not get response prefix, error: %d", err);
   10d16:	f00a fcd9 	bl	1b6cc <log_1>
	at_params_list_free(&resp_list);
   10d1a:	a804      	add	r0, sp, #16
   10d1c:	f00c faf1 	bl	1d302 <at_params_list_free>
	return err;
   10d20:	e7e1      	b.n	10ce6 <parse_nw_reg_status+0x4e>
	err = at_params_string_get(&resp_list,
   10d22:	4601      	mov	r1, r0
   10d24:	ab01      	add	r3, sp, #4
   10d26:	aa02      	add	r2, sp, #8
   10d28:	a804      	add	r0, sp, #16
   10d2a:	f00c fb9b 	bl	1d464 <at_params_string_get>
	if (err) {
   10d2e:	4604      	mov	r4, r0
   10d30:	b168      	cbz	r0, 10d4e <parse_nw_reg_status+0xb6>
		LOG_ERR("Could not get response prefix, error: %d", err);
   10d32:	2301      	movs	r3, #1
   10d34:	f04f 0200 	mov.w	r2, #0
   10d38:	4922      	ldr	r1, [pc, #136]	; (10dc4 <parse_nw_reg_status+0x12c>)
   10d3a:	f363 0207 	bfi	r2, r3, #0, #8
   10d3e:	4b22      	ldr	r3, [pc, #136]	; (10dc8 <parse_nw_reg_status+0x130>)
   10d40:	1a5b      	subs	r3, r3, r1
   10d42:	08db      	lsrs	r3, r3, #3
   10d44:	4601      	mov	r1, r0
   10d46:	f363 128f 	bfi	r2, r3, #6, #10
   10d4a:	4822      	ldr	r0, [pc, #136]	; (10dd4 <parse_nw_reg_status+0x13c>)
   10d4c:	e7e3      	b.n	10d16 <parse_nw_reg_status+0x7e>
	if (!response_is_valid(response_prefix, response_prefix_len,
   10d4e:	4a22      	ldr	r2, [pc, #136]	; (10dd8 <parse_nw_reg_status+0x140>)
   10d50:	9901      	ldr	r1, [sp, #4]
   10d52:	a802      	add	r0, sp, #8
   10d54:	f00c fbbf 	bl	1d4d6 <response_is_valid>
   10d58:	2800      	cmp	r0, #0
   10d5a:	d0de      	beq.n	10d1a <parse_nw_reg_status+0x82>
	err = at_params_int_get(&resp_list, reg_status_index,
   10d5c:	466a      	mov	r2, sp
   10d5e:	4639      	mov	r1, r7
   10d60:	a804      	add	r0, sp, #16
   10d62:	f00c fb6c 	bl	1d43e <at_params_int_get>
	if (err) {
   10d66:	4604      	mov	r4, r0
   10d68:	b168      	cbz	r0, 10d86 <parse_nw_reg_status+0xee>
		LOG_ERR("Could not get registration status, error: %d", err);
   10d6a:	2301      	movs	r3, #1
   10d6c:	f04f 0200 	mov.w	r2, #0
   10d70:	4914      	ldr	r1, [pc, #80]	; (10dc4 <parse_nw_reg_status+0x12c>)
   10d72:	f363 0207 	bfi	r2, r3, #0, #8
   10d76:	4b14      	ldr	r3, [pc, #80]	; (10dc8 <parse_nw_reg_status+0x130>)
   10d78:	1a5b      	subs	r3, r3, r1
   10d7a:	08db      	lsrs	r3, r3, #3
   10d7c:	4601      	mov	r1, r0
   10d7e:	f363 128f 	bfi	r2, r3, #6, #10
   10d82:	4816      	ldr	r0, [pc, #88]	; (10ddc <parse_nw_reg_status+0x144>)
   10d84:	e7c7      	b.n	10d16 <parse_nw_reg_status+0x7e>
	switch (reg_status) {
   10d86:	9900      	ldr	r1, [sp, #0]
   10d88:	2908      	cmp	r1, #8
   10d8a:	d015      	beq.n	10db8 <parse_nw_reg_status+0x120>
   10d8c:	dc12      	bgt.n	10db4 <parse_nw_reg_status+0x11c>
   10d8e:	2905      	cmp	r1, #5
   10d90:	d912      	bls.n	10db8 <parse_nw_reg_status+0x120>
		LOG_ERR("Invalid network registration status: %d", reg_status);
   10d92:	2301      	movs	r3, #1
   10d94:	f04f 0200 	mov.w	r2, #0
   10d98:	480a      	ldr	r0, [pc, #40]	; (10dc4 <parse_nw_reg_status+0x12c>)
   10d9a:	f363 0207 	bfi	r2, r3, #0, #8
   10d9e:	4b0a      	ldr	r3, [pc, #40]	; (10dc8 <parse_nw_reg_status+0x130>)
		err = -EIO;
   10da0:	f06f 0404 	mvn.w	r4, #4
   10da4:	1a1b      	subs	r3, r3, r0
   10da6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid network registration status: %d", reg_status);
   10da8:	f363 128f 	bfi	r2, r3, #6, #10
   10dac:	480c      	ldr	r0, [pc, #48]	; (10de0 <parse_nw_reg_status+0x148>)
   10dae:	f00a fc8d 	bl	1b6cc <log_1>
		err = -EIO;
   10db2:	e7b2      	b.n	10d1a <parse_nw_reg_status+0x82>
	switch (reg_status) {
   10db4:	295a      	cmp	r1, #90	; 0x5a
   10db6:	d1ec      	bne.n	10d92 <parse_nw_reg_status+0xfa>
		*status = reg_status;
   10db8:	7029      	strb	r1, [r5, #0]
		LOG_DBG("Network registration status: %d", reg_status);
   10dba:	e7ae      	b.n	10d1a <parse_nw_reg_status+0x82>
		return -EINVAL;
   10dbc:	f06f 0415 	mvn.w	r4, #21
   10dc0:	e791      	b.n	10ce6 <parse_nw_reg_status+0x4e>
   10dc2:	bf00      	nop
   10dc4:	0001e02c 	.word	0x0001e02c
   10dc8:	0001e074 	.word	0x0001e074
   10dcc:	0001feb0 	.word	0x0001feb0
   10dd0:	0001fed9 	.word	0x0001fed9
   10dd4:	0001ff06 	.word	0x0001ff06
   10dd8:	0001ff2f 	.word	0x0001ff2f
   10ddc:	0001ff36 	.word	0x0001ff36
   10de0:	0001ff63 	.word	0x0001ff63

00010de4 <at_handler>:
{
   10de4:	b507      	push	{r0, r1, r2, lr}
	if (response == NULL) {
   10de6:	4608      	mov	r0, r1
   10de8:	b981      	cbnz	r1, 10e0c <at_handler+0x28>
		LOG_ERR("Response buffer is NULL-pointer");
   10dea:	2301      	movs	r3, #1
   10dec:	f04f 0100 	mov.w	r1, #0
   10df0:	4a15      	ldr	r2, [pc, #84]	; (10e48 <at_handler+0x64>)
   10df2:	f363 0107 	bfi	r1, r3, #0, #8
   10df6:	4b15      	ldr	r3, [pc, #84]	; (10e4c <at_handler+0x68>)
   10df8:	4815      	ldr	r0, [pc, #84]	; (10e50 <at_handler+0x6c>)
   10dfa:	1a9b      	subs	r3, r3, r2
   10dfc:	08db      	lsrs	r3, r3, #3
   10dfe:	f363 118f 	bfi	r1, r3, #6, #10
		LOG_ERR("Could not get network registration status");
   10e02:	f00a fc56 	bl	1b6b2 <log_0>
}
   10e06:	b003      	add	sp, #12
   10e08:	f85d fb04 	ldr.w	pc, [sp], #4
	err = parse_nw_reg_status(response, &status, AT_CEREG_REG_STATUS_INDEX);
   10e0c:	2201      	movs	r2, #1
   10e0e:	f10d 0107 	add.w	r1, sp, #7
   10e12:	f7ff ff41 	bl	10c98 <parse_nw_reg_status>
	if (err) {
   10e16:	b160      	cbz	r0, 10e32 <at_handler+0x4e>
		LOG_ERR("Could not get network registration status");
   10e18:	2301      	movs	r3, #1
   10e1a:	f04f 0100 	mov.w	r1, #0
   10e1e:	4a0a      	ldr	r2, [pc, #40]	; (10e48 <at_handler+0x64>)
   10e20:	f363 0107 	bfi	r1, r3, #0, #8
   10e24:	4b09      	ldr	r3, [pc, #36]	; (10e4c <at_handler+0x68>)
   10e26:	480b      	ldr	r0, [pc, #44]	; (10e54 <at_handler+0x70>)
   10e28:	1a9b      	subs	r3, r3, r2
   10e2a:	08db      	lsrs	r3, r3, #3
   10e2c:	f363 118f 	bfi	r1, r3, #6, #10
   10e30:	e7e7      	b.n	10e02 <at_handler+0x1e>
	if ((status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   10e32:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10e36:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   10e3a:	2b01      	cmp	r3, #1
   10e3c:	d1e3      	bne.n	10e06 <at_handler+0x22>
	z_impl_k_sem_give(sem);
   10e3e:	4806      	ldr	r0, [pc, #24]	; (10e58 <at_handler+0x74>)
   10e40:	f009 fd24 	bl	1a88c <z_impl_k_sem_give>
   10e44:	e7df      	b.n	10e06 <at_handler+0x22>
   10e46:	bf00      	nop
   10e48:	0001e02c 	.word	0x0001e02c
   10e4c:	0001e074 	.word	0x0001e074
   10e50:	0001fd59 	.word	0x0001fd59
   10e54:	0001fd79 	.word	0x0001fd79
   10e58:	20020cd8 	.word	0x20020cd8

00010e5c <w_lte_lc_connect>:
{
   10e5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   10e60:	2201      	movs	r2, #1
   10e62:	2100      	movs	r1, #0
   10e64:	4838      	ldr	r0, [pc, #224]	; (10f48 <w_lte_lc_connect+0xec>)
   10e66:	f00c fd65 	bl	1d934 <z_impl_k_sem_init>
	rc = at_notif_register_handler(NULL, at_handler);
   10e6a:	4938      	ldr	r1, [pc, #224]	; (10f4c <w_lte_lc_connect+0xf0>)
   10e6c:	2000      	movs	r0, #0
   10e6e:	f7ff fc97 	bl	107a0 <at_notif_register_handler>
	if (rc != 0) {
   10e72:	4c37      	ldr	r4, [pc, #220]	; (10f50 <w_lte_lc_connect+0xf4>)
   10e74:	4b37      	ldr	r3, [pc, #220]	; (10f54 <w_lte_lc_connect+0xf8>)
   10e76:	4681      	mov	r9, r0
   10e78:	1ae4      	subs	r4, r4, r3
   10e7a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   10e7e:	b168      	cbz	r0, 10e9c <w_lte_lc_connect+0x40>
		LOG_ERR("Can't register handler rc=%d", rc);
   10e80:	2101      	movs	r1, #1
   10e82:	f04f 0200 	mov.w	r2, #0
   10e86:	f361 0207 	bfi	r2, r1, #0, #8
   10e8a:	4601      	mov	r1, r0
   10e8c:	4832      	ldr	r0, [pc, #200]	; (10f58 <w_lte_lc_connect+0xfc>)
   10e8e:	f364 128f 	bfi	r2, r4, #6, #10
		LOG_ERR("Can't de-register handler rc=%d", rc);
   10e92:	f00a fc1b 	bl	1b6cc <log_1>
}
   10e96:	4648      	mov	r0, r9
   10e98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e9c:	2702      	movs	r7, #2
	const char *current_network_mode = nw_mode_preferred;
   10e9e:	482f      	ldr	r0, [pc, #188]	; (10f5c <w_lte_lc_connect+0x100>)
	return z_impl_k_sem_take(sem, timeout);
   10ea0:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 10f78 <w_lte_lc_connect+0x11c>
   10ea4:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 10f48 <w_lte_lc_connect+0xec>
		if (at_cmd_write(current_network_mode, NULL, 0, NULL) != 0) {
   10ea8:	2300      	movs	r3, #0
   10eaa:	461a      	mov	r2, r3
   10eac:	4619      	mov	r1, r3
   10eae:	f7ff fbe1 	bl	10674 <at_cmd_write>
   10eb2:	4603      	mov	r3, r0
   10eb4:	bb90      	cbnz	r0, 10f1c <w_lte_lc_connect+0xc0>
		if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   10eb6:	4602      	mov	r2, r0
   10eb8:	4601      	mov	r1, r0
   10eba:	4829      	ldr	r0, [pc, #164]	; (10f60 <w_lte_lc_connect+0x104>)
   10ebc:	f7ff fbda 	bl	10674 <at_cmd_write>
   10ec0:	4680      	mov	r8, r0
   10ec2:	bb58      	cbnz	r0, 10f1c <w_lte_lc_connect+0xc0>
   10ec4:	4651      	mov	r1, sl
   10ec6:	4658      	mov	r0, fp
   10ec8:	f009 fd0c 	bl	1a8e4 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   10ecc:	f110 0f0b 	cmn.w	r0, #11
   10ed0:	4681      	mov	r9, r0
   10ed2:	d125      	bne.n	10f20 <w_lte_lc_connect+0xc4>
			LOG_INF("Network connection attempt timed out");
   10ed4:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   10ed8:	f043 0303 	orr.w	r3, r3, #3
   10edc:	f363 0607 	bfi	r6, r3, #0, #8
   10ee0:	f364 168f 	bfi	r6, r4, #6, #10
   10ee4:	4631      	mov	r1, r6
   10ee6:	481f      	ldr	r0, [pc, #124]	; (10f64 <w_lte_lc_connect+0x108>)
   10ee8:	f00a fbe3 	bl	1b6b2 <log_0>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   10eec:	2f01      	cmp	r7, #1
   10eee:	d027      	beq.n	10f40 <w_lte_lc_connect+0xe4>
				if (at_cmd_write(offline, NULL, 0, NULL) != 0) {
   10ef0:	4643      	mov	r3, r8
   10ef2:	4642      	mov	r2, r8
   10ef4:	4641      	mov	r1, r8
   10ef6:	481c      	ldr	r0, [pc, #112]	; (10f68 <w_lte_lc_connect+0x10c>)
   10ef8:	f7ff fbbc 	bl	10674 <at_cmd_write>
   10efc:	b970      	cbnz	r0, 10f1c <w_lte_lc_connect+0xc0>
				LOG_INF("Using fallback network mode");
   10efe:	f025 033f 	bic.w	r3, r5, #63	; 0x3f
   10f02:	f043 0303 	orr.w	r3, r3, #3
   10f06:	f363 0507 	bfi	r5, r3, #0, #8
   10f0a:	f364 158f 	bfi	r5, r4, #6, #10
   10f0e:	4817      	ldr	r0, [pc, #92]	; (10f6c <w_lte_lc_connect+0x110>)
   10f10:	4629      	mov	r1, r5
   10f12:	f00a fbce 	bl	1b6b2 <log_0>
   10f16:	2701      	movs	r7, #1
				current_network_mode = nw_mode_fallback;
   10f18:	4815      	ldr	r0, [pc, #84]	; (10f70 <w_lte_lc_connect+0x114>)
   10f1a:	e7c5      	b.n	10ea8 <w_lte_lc_connect+0x4c>
			err = -EIO;
   10f1c:	f06f 0904 	mvn.w	r9, #4
	rc = at_notif_deregister_handler(NULL, at_handler);
   10f20:	490a      	ldr	r1, [pc, #40]	; (10f4c <w_lte_lc_connect+0xf0>)
   10f22:	2000      	movs	r0, #0
   10f24:	f7ff fc8a 	bl	1083c <at_notif_deregister_handler>
	if (rc != 0) {
   10f28:	4601      	mov	r1, r0
   10f2a:	2800      	cmp	r0, #0
   10f2c:	d0b3      	beq.n	10e96 <w_lte_lc_connect+0x3a>
		LOG_ERR("Can't de-register handler rc=%d", rc);
   10f2e:	2001      	movs	r0, #1
   10f30:	f04f 0200 	mov.w	r2, #0
   10f34:	f360 0207 	bfi	r2, r0, #0, #8
   10f38:	f364 128f 	bfi	r2, r4, #6, #10
   10f3c:	480d      	ldr	r0, [pc, #52]	; (10f74 <w_lte_lc_connect+0x118>)
   10f3e:	e7a8      	b.n	10e92 <w_lte_lc_connect+0x36>
				err = -ETIMEDOUT;
   10f40:	f06f 093b 	mvn.w	r9, #59	; 0x3b
   10f44:	e7ec      	b.n	10f20 <w_lte_lc_connect+0xc4>
   10f46:	bf00      	nop
   10f48:	20020cd8 	.word	0x20020cd8
   10f4c:	00010de5 	.word	0x00010de5
   10f50:	0001e074 	.word	0x0001e074
   10f54:	0001e02c 	.word	0x0001e02c
   10f58:	0001ff92 	.word	0x0001ff92
   10f5c:	0001fe8f 	.word	0x0001fe8f
   10f60:	0001fe6e 	.word	0x0001fe6e
   10f64:	0001ffaf 	.word	0x0001ffaf
   10f68:	0001fea6 	.word	0x0001fea6
   10f6c:	0001ffd4 	.word	0x0001ffd4
   10f70:	0001fe78 	.word	0x0001fe78
   10f74:	0001fff0 	.word	0x0001fff0
   10f78:	000927c0 	.word	0x000927c0

00010f7c <lte_lc_psm_get>:
{
   10f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct at_param_list at_resp_list = {0};
   10f7e:	2400      	movs	r4, #0
{
   10f80:	b09d      	sub	sp, #116	; 0x74
   10f82:	4606      	mov	r6, r0
   10f84:	460d      	mov	r5, r1
	char buf[AT_CEREG_RESPONSE_MAX_LEN] = {0};
   10f86:	2250      	movs	r2, #80	; 0x50
   10f88:	4621      	mov	r1, r4
   10f8a:	a808      	add	r0, sp, #32
	struct at_param_list at_resp_list = {0};
   10f8c:	e9cd 4403 	strd	r4, r4, [sp, #12]
	char buf[AT_CEREG_RESPONSE_MAX_LEN] = {0};
   10f90:	f00a fee5 	bl	1bd5e <memset>
	size_t timer_str_len = sizeof(timer_str) - 1;
   10f94:	2308      	movs	r3, #8
	char timer_str[9] = {0};
   10f96:	e9cd 4405 	strd	r4, r4, [sp, #20]
   10f9a:	f88d 401c 	strb.w	r4, [sp, #28]
	char unit_str[4] = {0};
   10f9e:	9401      	str	r4, [sp, #4]
	size_t timer_str_len = sizeof(timer_str) - 1;
   10fa0:	9302      	str	r3, [sp, #8]
	if ((tau == NULL) || (active_time == NULL)) {
   10fa2:	2e00      	cmp	r6, #0
   10fa4:	f000 80d6 	beq.w	11154 <lte_lc_psm_get+0x1d8>
   10fa8:	2d00      	cmp	r5, #0
   10faa:	f000 80d3 	beq.w	11154 <lte_lc_psm_get+0x1d8>
	err = at_cmd_write(AT_CEREG_5, NULL, 0, NULL);
   10fae:	4623      	mov	r3, r4
   10fb0:	4622      	mov	r2, r4
   10fb2:	4621      	mov	r1, r4
   10fb4:	4869      	ldr	r0, [pc, #420]	; (1115c <lte_lc_psm_get+0x1e0>)
   10fb6:	f7ff fb5d 	bl	10674 <at_cmd_write>
	if (err) {
   10fba:	4604      	mov	r4, r0
   10fbc:	b188      	cbz	r0, 10fe2 <lte_lc_psm_get+0x66>
		LOG_ERR("Could not set CEREG, error: %d", err);
   10fbe:	2301      	movs	r3, #1
   10fc0:	f04f 0200 	mov.w	r2, #0
   10fc4:	4966      	ldr	r1, [pc, #408]	; (11160 <lte_lc_psm_get+0x1e4>)
   10fc6:	f363 0207 	bfi	r2, r3, #0, #8
   10fca:	4b66      	ldr	r3, [pc, #408]	; (11164 <lte_lc_psm_get+0x1e8>)
   10fcc:	1a5b      	subs	r3, r3, r1
   10fce:	08db      	lsrs	r3, r3, #3
   10fd0:	4601      	mov	r1, r0
   10fd2:	4865      	ldr	r0, [pc, #404]	; (11168 <lte_lc_psm_get+0x1ec>)
   10fd4:	f363 128f 	bfi	r2, r3, #6, #10
		LOG_ERR("Could not get CEREG response, error: %d", err);
   10fd8:	f00a fb78 	bl	1b6cc <log_1>
}
   10fdc:	4620      	mov	r0, r4
   10fde:	b01d      	add	sp, #116	; 0x74
   10fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_cmd_write(AT_CEREG_READ, buf, sizeof(buf), NULL);
   10fe2:	4603      	mov	r3, r0
   10fe4:	2250      	movs	r2, #80	; 0x50
   10fe6:	a908      	add	r1, sp, #32
   10fe8:	4860      	ldr	r0, [pc, #384]	; (1116c <lte_lc_psm_get+0x1f0>)
   10fea:	f7ff fb43 	bl	10674 <at_cmd_write>
	if (err) {
   10fee:	4604      	mov	r4, r0
   10ff0:	b168      	cbz	r0, 1100e <lte_lc_psm_get+0x92>
		LOG_ERR("Could not get CEREG response, error: %d", err);
   10ff2:	2301      	movs	r3, #1
   10ff4:	f04f 0200 	mov.w	r2, #0
   10ff8:	4959      	ldr	r1, [pc, #356]	; (11160 <lte_lc_psm_get+0x1e4>)
   10ffa:	f363 0207 	bfi	r2, r3, #0, #8
   10ffe:	4b59      	ldr	r3, [pc, #356]	; (11164 <lte_lc_psm_get+0x1e8>)
   11000:	1a5b      	subs	r3, r3, r1
   11002:	08db      	lsrs	r3, r3, #3
   11004:	4601      	mov	r1, r0
   11006:	f363 128f 	bfi	r2, r3, #6, #10
   1100a:	4859      	ldr	r0, [pc, #356]	; (11170 <lte_lc_psm_get+0x1f4>)
   1100c:	e7e4      	b.n	10fd8 <lte_lc_psm_get+0x5c>
	err = at_params_list_init(&at_resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   1100e:	210a      	movs	r1, #10
   11010:	a803      	add	r0, sp, #12
   11012:	f00c f94b 	bl	1d2ac <at_params_list_init>
	if (err) {
   11016:	4604      	mov	r4, r0
   11018:	b168      	cbz	r0, 11036 <lte_lc_psm_get+0xba>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1101a:	2301      	movs	r3, #1
   1101c:	f04f 0200 	mov.w	r2, #0
   11020:	494f      	ldr	r1, [pc, #316]	; (11160 <lte_lc_psm_get+0x1e4>)
   11022:	f363 0207 	bfi	r2, r3, #0, #8
   11026:	4b4f      	ldr	r3, [pc, #316]	; (11164 <lte_lc_psm_get+0x1e8>)
   11028:	1a5b      	subs	r3, r3, r1
   1102a:	08db      	lsrs	r3, r3, #3
   1102c:	4601      	mov	r1, r0
   1102e:	f363 128f 	bfi	r2, r3, #6, #10
   11032:	4850      	ldr	r0, [pc, #320]	; (11174 <lte_lc_psm_get+0x1f8>)
   11034:	e7d0      	b.n	10fd8 <lte_lc_psm_get+0x5c>
	err = at_parser_max_params_from_str(buf,
   11036:	4601      	mov	r1, r0
   11038:	230a      	movs	r3, #10
   1103a:	aa03      	add	r2, sp, #12
   1103c:	a808      	add	r0, sp, #32
   1103e:	f7ff fd89 	bl	10b54 <at_parser_max_params_from_str>
	if (err) {
   11042:	4604      	mov	r4, r0
   11044:	b190      	cbz	r0, 1106c <lte_lc_psm_get+0xf0>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   11046:	2301      	movs	r3, #1
   11048:	f04f 0200 	mov.w	r2, #0
   1104c:	4944      	ldr	r1, [pc, #272]	; (11160 <lte_lc_psm_get+0x1e4>)
   1104e:	f363 0207 	bfi	r2, r3, #0, #8
   11052:	4b44      	ldr	r3, [pc, #272]	; (11164 <lte_lc_psm_get+0x1e8>)
   11054:	1a5b      	subs	r3, r3, r1
   11056:	08db      	lsrs	r3, r3, #3
   11058:	4601      	mov	r1, r0
   1105a:	4847      	ldr	r0, [pc, #284]	; (11178 <lte_lc_psm_get+0x1fc>)
   1105c:	f363 128f 	bfi	r2, r3, #6, #10
		LOG_ERR("Could not get TAU, error: %d", err);
   11060:	f00a fb34 	bl	1b6cc <log_1>
	at_params_list_free(&at_resp_list);
   11064:	a803      	add	r0, sp, #12
   11066:	f00c f94c 	bl	1d302 <at_params_list_free>
	return err;
   1106a:	e7b7      	b.n	10fdc <lte_lc_psm_get+0x60>
	err = at_params_string_get(&at_resp_list,
   1106c:	ab02      	add	r3, sp, #8
   1106e:	aa05      	add	r2, sp, #20
   11070:	2109      	movs	r1, #9
   11072:	a803      	add	r0, sp, #12
   11074:	f00c f9f6 	bl	1d464 <at_params_string_get>
	if (err) {
   11078:	4604      	mov	r4, r0
   1107a:	b168      	cbz	r0, 11098 <lte_lc_psm_get+0x11c>
		LOG_ERR("Could not get TAU, error: %d", err);
   1107c:	2301      	movs	r3, #1
   1107e:	f04f 0200 	mov.w	r2, #0
   11082:	4937      	ldr	r1, [pc, #220]	; (11160 <lte_lc_psm_get+0x1e4>)
   11084:	f363 0207 	bfi	r2, r3, #0, #8
   11088:	4b36      	ldr	r3, [pc, #216]	; (11164 <lte_lc_psm_get+0x1e8>)
   1108a:	483c      	ldr	r0, [pc, #240]	; (1117c <lte_lc_psm_get+0x200>)
   1108c:	1a5b      	subs	r3, r3, r1
   1108e:	08db      	lsrs	r3, r3, #3
   11090:	f363 128f 	bfi	r2, r3, #6, #10
   11094:	4621      	mov	r1, r4
   11096:	e7e3      	b.n	11060 <lte_lc_psm_get+0xe4>
	memcpy(unit_str, timer_str, unit_str_len);
   11098:	2203      	movs	r2, #3
   1109a:	a905      	add	r1, sp, #20
   1109c:	a801      	add	r0, sp, #4
   1109e:	f00a fe34 	bl	1bd0a <memcpy>
	index = strtoul(unit_str, NULL, 2);
   110a2:	2202      	movs	r2, #2
   110a4:	4621      	mov	r1, r4
   110a6:	a801      	add	r0, sp, #4
   110a8:	f00a fd3c 	bl	1bb24 <strtoul>
	if (index > (ARRAY_SIZE(t3412_lookup) - 1)) {
   110ac:	2807      	cmp	r0, #7
   110ae:	d910      	bls.n	110d2 <lte_lc_psm_get+0x156>
		LOG_ERR("Unable to parse periodic TAU string");
   110b0:	2301      	movs	r3, #1
   110b2:	f04f 0100 	mov.w	r1, #0
   110b6:	4a2a      	ldr	r2, [pc, #168]	; (11160 <lte_lc_psm_get+0x1e4>)
   110b8:	f363 0107 	bfi	r1, r3, #0, #8
   110bc:	4b29      	ldr	r3, [pc, #164]	; (11164 <lte_lc_psm_get+0x1e8>)
   110be:	4830      	ldr	r0, [pc, #192]	; (11180 <lte_lc_psm_get+0x204>)
   110c0:	1a9b      	subs	r3, r3, r2
   110c2:	08db      	lsrs	r3, r3, #3
   110c4:	f363 118f 	bfi	r1, r3, #6, #10
		LOG_ERR("Unable to parse active time string");
   110c8:	f00a faf3 	bl	1b6b2 <log_0>
		err = -EINVAL;
   110cc:	f06f 0415 	mvn.w	r4, #21
		goto parse_psm_clean_exit;
   110d0:	e7c8      	b.n	11064 <lte_lc_psm_get+0xe8>
	timer_unit = t3412_lookup[index];
   110d2:	4b2c      	ldr	r3, [pc, #176]	; (11184 <lte_lc_psm_get+0x208>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   110d4:	2202      	movs	r2, #2
	timer_unit = t3412_lookup[index];
   110d6:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   110da:	4621      	mov	r1, r4
   110dc:	f10d 0017 	add.w	r0, sp, #23
   110e0:	f00a fd20 	bl	1bb24 <strtoul>
	*tau = timer_unit ? timer_unit * timer_value : -1;
   110e4:	b31f      	cbz	r7, 1112e <lte_lc_psm_get+0x1b2>
   110e6:	4378      	muls	r0, r7
   110e8:	6030      	str	r0, [r6, #0]
	err = at_params_string_get(&at_resp_list,
   110ea:	ab02      	add	r3, sp, #8
   110ec:	aa05      	add	r2, sp, #20
   110ee:	2108      	movs	r1, #8
   110f0:	a803      	add	r0, sp, #12
   110f2:	f00c f9b7 	bl	1d464 <at_params_string_get>
	if (err) {
   110f6:	4604      	mov	r4, r0
   110f8:	2800      	cmp	r0, #0
   110fa:	d1bf      	bne.n	1107c <lte_lc_psm_get+0x100>
	memcpy(unit_str, timer_str, unit_str_len);
   110fc:	2203      	movs	r2, #3
   110fe:	a905      	add	r1, sp, #20
   11100:	a801      	add	r0, sp, #4
   11102:	f00a fe02 	bl	1bd0a <memcpy>
	index = strtoul(unit_str, NULL, 2);
   11106:	2202      	movs	r2, #2
   11108:	4621      	mov	r1, r4
   1110a:	a801      	add	r0, sp, #4
   1110c:	f00a fd0a 	bl	1bb24 <strtoul>
	if (index > (ARRAY_SIZE(t3324_lookup) - 1)) {
   11110:	2807      	cmp	r0, #7
   11112:	d90f      	bls.n	11134 <lte_lc_psm_get+0x1b8>
		LOG_ERR("Unable to parse active time string");
   11114:	2301      	movs	r3, #1
   11116:	f04f 0100 	mov.w	r1, #0
   1111a:	4a11      	ldr	r2, [pc, #68]	; (11160 <lte_lc_psm_get+0x1e4>)
   1111c:	f363 0107 	bfi	r1, r3, #0, #8
   11120:	4b10      	ldr	r3, [pc, #64]	; (11164 <lte_lc_psm_get+0x1e8>)
   11122:	4819      	ldr	r0, [pc, #100]	; (11188 <lte_lc_psm_get+0x20c>)
   11124:	1a9b      	subs	r3, r3, r2
   11126:	08db      	lsrs	r3, r3, #3
   11128:	f363 118f 	bfi	r1, r3, #6, #10
   1112c:	e7cc      	b.n	110c8 <lte_lc_psm_get+0x14c>
	*tau = timer_unit ? timer_unit * timer_value : -1;
   1112e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11132:	e7d9      	b.n	110e8 <lte_lc_psm_get+0x16c>
	timer_unit = t3324_lookup[index];
   11134:	4b15      	ldr	r3, [pc, #84]	; (1118c <lte_lc_psm_get+0x210>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   11136:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[index];
   11138:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   1113c:	4621      	mov	r1, r4
   1113e:	f10d 0017 	add.w	r0, sp, #23
   11142:	f00a fcef 	bl	1bb24 <strtoul>
	*active_time = timer_unit ? timer_unit * timer_value : -1;
   11146:	b116      	cbz	r6, 1114e <lte_lc_psm_get+0x1d2>
   11148:	4370      	muls	r0, r6
   1114a:	6028      	str	r0, [r5, #0]
parse_psm_clean_exit:
   1114c:	e78a      	b.n	11064 <lte_lc_psm_get+0xe8>
	*active_time = timer_unit ? timer_unit * timer_value : -1;
   1114e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11152:	e7fa      	b.n	1114a <lte_lc_psm_get+0x1ce>
		return -EINVAL;
   11154:	f06f 0415 	mvn.w	r4, #21
   11158:	e740      	b.n	10fdc <lte_lc_psm_get+0x60>
   1115a:	bf00      	nop
   1115c:	0001fdae 	.word	0x0001fdae
   11160:	0001e02c 	.word	0x0001e02c
   11164:	0001e074 	.word	0x0001e074
   11168:	0001fdb9 	.word	0x0001fdb9
   1116c:	0001fdd8 	.word	0x0001fdd8
   11170:	0001fde2 	.word	0x0001fde2
   11174:	0001feb0 	.word	0x0001feb0
   11178:	0001fed9 	.word	0x0001fed9
   1117c:	0001fe0a 	.word	0x0001fe0a
   11180:	0001fe27 	.word	0x0001fe27
   11184:	0001e214 	.word	0x0001e214
   11188:	0001fe4b 	.word	0x0001fe4b
   1118c:	0001e1f4 	.word	0x0001e1f4

00011190 <modem_info_parse.isra.0>:
		buf[i] = next_char;
		buf[i + 1] = current_char;
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
   11190:	b538      	push	{r3, r4, r5, lr}
   11192:	4605      	mov	r5, r0
			    const char *buf)
{
	int err;
	u32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   11194:	4a08      	ldr	r2, [pc, #32]	; (111b8 <modem_info_parse.isra.0+0x28>)
static int modem_info_parse(const struct modem_info_data *modem_data,
   11196:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   11198:	782b      	ldrb	r3, [r5, #0]
   1119a:	2100      	movs	r1, #0
   1119c:	f7ff fcda 	bl	10b54 <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err != 0) {
   111a0:	4604      	mov	r4, r0
   111a2:	b938      	cbnz	r0, 111b4 <modem_info_parse.isra.0+0x24>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   111a4:	4804      	ldr	r0, [pc, #16]	; (111b8 <modem_info_parse.isra.0+0x28>)
   111a6:	f00c f980 	bl	1d4aa <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   111aa:	782b      	ldrb	r3, [r5, #0]
		return -EAGAIN;
   111ac:	4298      	cmp	r0, r3
   111ae:	bf88      	it	hi
   111b0:	f06f 040a 	mvnhi.w	r4, #10
	}

	return err;
}
   111b4:	4620      	mov	r0, r4
   111b6:	bd38      	pop	{r3, r4, r5, pc}
   111b8:	20020cf0 	.word	0x20020cf0

000111bc <modem_info_rsrp_subscribe_handler>:

	return len <= 0 ? -ENOTSUP : len;
}

static void modem_info_rsrp_subscribe_handler(void *context, const char *response)
{
   111bc:	b513      	push	{r0, r1, r4, lr}
   111be:	460c      	mov	r4, r1
	ARG_UNUSED(context);

	u16_t param_value;
	int err;

	if (!is_cesq_notification(response, strlen(response))) {
   111c0:	4608      	mov	r0, r1
   111c2:	f00a fd70 	bl	1bca6 <strlen>
	return strstr(buf, AT_CMD_CESQ_RESP) ? true : false;
   111c6:	491b      	ldr	r1, [pc, #108]	; (11234 <modem_info_rsrp_subscribe_handler+0x78>)
   111c8:	4620      	mov	r0, r4
   111ca:	f00a fd24 	bl	1bc16 <strstr>
	if (!is_cesq_notification(response, strlen(response))) {
   111ce:	b198      	cbz	r0, 111f8 <modem_info_rsrp_subscribe_handler+0x3c>
		return;
	}

	err = modem_info_parse(modem_data[MODEM_INFO_RSRP],
   111d0:	4621      	mov	r1, r4
   111d2:	4819      	ldr	r0, [pc, #100]	; (11238 <modem_info_rsrp_subscribe_handler+0x7c>)
   111d4:	f7ff ffdc 	bl	11190 <modem_info_parse.isra.0>
			       response);
	if (err != 0) {
   111d8:	4601      	mov	r1, r0
   111da:	b178      	cbz	r0, 111fc <modem_info_rsrp_subscribe_handler+0x40>
		LOG_ERR("modem_info_parse failed to parse "
   111dc:	2301      	movs	r3, #1
   111de:	f04f 0200 	mov.w	r2, #0
   111e2:	4816      	ldr	r0, [pc, #88]	; (1123c <modem_info_rsrp_subscribe_handler+0x80>)
   111e4:	f363 0207 	bfi	r2, r3, #0, #8
   111e8:	4b15      	ldr	r3, [pc, #84]	; (11240 <modem_info_rsrp_subscribe_handler+0x84>)
   111ea:	1a1b      	subs	r3, r3, r0
   111ec:	08db      	lsrs	r3, r3, #3
   111ee:	4815      	ldr	r0, [pc, #84]	; (11244 <modem_info_rsrp_subscribe_handler+0x88>)
   111f0:	f363 128f 	bfi	r2, r3, #6, #10

	err = at_params_short_get(&m_param_list,
				  modem_data[MODEM_INFO_RSRP]->param_index,
				  &param_value);
	if (err != 0) {
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   111f4:	f00a fa6a 	bl	1b6cc <log_1>
		return;
	}

	modem_info_rsrp_cb(param_value);
}
   111f8:	b002      	add	sp, #8
   111fa:	bd10      	pop	{r4, pc}
	err = at_params_short_get(&m_param_list,
   111fc:	2101      	movs	r1, #1
   111fe:	f10d 0206 	add.w	r2, sp, #6
   11202:	4811      	ldr	r0, [pc, #68]	; (11248 <modem_info_rsrp_subscribe_handler+0x8c>)
   11204:	f00c f909 	bl	1d41a <at_params_short_get>
	if (err != 0) {
   11208:	4601      	mov	r1, r0
   1120a:	b160      	cbz	r0, 11226 <modem_info_rsrp_subscribe_handler+0x6a>
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   1120c:	2301      	movs	r3, #1
   1120e:	f04f 0200 	mov.w	r2, #0
   11212:	480a      	ldr	r0, [pc, #40]	; (1123c <modem_info_rsrp_subscribe_handler+0x80>)
   11214:	f363 0207 	bfi	r2, r3, #0, #8
   11218:	4b09      	ldr	r3, [pc, #36]	; (11240 <modem_info_rsrp_subscribe_handler+0x84>)
   1121a:	1a1b      	subs	r3, r3, r0
   1121c:	08db      	lsrs	r3, r3, #3
   1121e:	f363 128f 	bfi	r2, r3, #6, #10
   11222:	480a      	ldr	r0, [pc, #40]	; (1124c <modem_info_rsrp_subscribe_handler+0x90>)
   11224:	e7e6      	b.n	111f4 <modem_info_rsrp_subscribe_handler+0x38>
	modem_info_rsrp_cb(param_value);
   11226:	4b0a      	ldr	r3, [pc, #40]	; (11250 <modem_info_rsrp_subscribe_handler+0x94>)
   11228:	f89d 0006 	ldrb.w	r0, [sp, #6]
   1122c:	681b      	ldr	r3, [r3, #0]
   1122e:	4798      	blx	r3
   11230:	e7e2      	b.n	111f8 <modem_info_rsrp_subscribe_handler+0x3c>
   11232:	bf00      	nop
   11234:	0002001a 	.word	0x0002001a
   11238:	0001e369 	.word	0x0001e369
   1123c:	0001e02c 	.word	0x0001e02c
   11240:	0001e07c 	.word	0x0001e07c
   11244:	00020020 	.word	0x00020020
   11248:	20020cf0 	.word	0x20020cf0
   1124c:	00020057 	.word	0x00020057
   11250:	20020cf8 	.word	0x20020cf8

00011254 <modem_info_string_get>:
{
   11254:	b5f0      	push	{r4, r5, r6, r7, lr}
	size_t len = 0;
   11256:	2400      	movs	r4, #0
{
   11258:	460d      	mov	r5, r1
   1125a:	b0a3      	sub	sp, #140	; 0x8c
   1125c:	4607      	mov	r7, r0
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   1125e:	2280      	movs	r2, #128	; 0x80
   11260:	4621      	mov	r1, r4
   11262:	a802      	add	r0, sp, #8
	size_t len = 0;
   11264:	9401      	str	r4, [sp, #4]
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   11266:	f00a fd7a 	bl	1bd5e <memset>
	if (buf == NULL) {
   1126a:	2d00      	cmp	r5, #0
   1126c:	d074      	beq.n	11358 <modem_info_string_get+0x104>
	err = at_cmd_write(modem_data[info]->cmd,
   1126e:	4b3d      	ldr	r3, [pc, #244]	; (11364 <modem_info_string_get+0x110>)
   11270:	2280      	movs	r2, #128	; 0x80
   11272:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
   11276:	a902      	add	r1, sp, #8
   11278:	4623      	mov	r3, r4
   1127a:	6830      	ldr	r0, [r6, #0]
   1127c:	f7ff f9fa 	bl	10674 <at_cmd_write>
	if (info == MODEM_INFO_SUP_BAND) {
   11280:	2f02      	cmp	r7, #2
   11282:	d10b      	bne.n	1129c <modem_info_string_get+0x48>
		strcpy(buf, recv_buf + sizeof("%XCBAND: ") - 1);
   11284:	f10d 0111 	add.w	r1, sp, #17
   11288:	4628      	mov	r0, r5
   1128a:	f00a fce1 	bl	1bc50 <strcpy>
		return strlen(buf);
   1128e:	4628      	mov	r0, r5
   11290:	f00a fd09 	bl	1bca6 <strlen>
   11294:	4604      	mov	r4, r0
}
   11296:	4620      	mov	r0, r4
   11298:	b023      	add	sp, #140	; 0x8c
   1129a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (err != 0) {
   1129c:	2800      	cmp	r0, #0
   1129e:	d15e      	bne.n	1135e <modem_info_string_get+0x10a>
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_length]);
   112a0:	a902      	add	r1, sp, #8
   112a2:	f106 0009 	add.w	r0, r6, #9
   112a6:	f7ff ff73 	bl	11190 <modem_info_parse.isra.0>
	if (err) {
   112aa:	4604      	mov	r4, r0
   112ac:	b178      	cbz	r0, 112ce <modem_info_string_get+0x7a>
		LOG_ERR("Unable to parse data: %d", err);
   112ae:	2301      	movs	r3, #1
   112b0:	f04f 0200 	mov.w	r2, #0
   112b4:	492c      	ldr	r1, [pc, #176]	; (11368 <modem_info_string_get+0x114>)
   112b6:	f363 0207 	bfi	r2, r3, #0, #8
   112ba:	4b2c      	ldr	r3, [pc, #176]	; (1136c <modem_info_string_get+0x118>)
   112bc:	1a5b      	subs	r3, r3, r1
   112be:	08db      	lsrs	r3, r3, #3
   112c0:	4601      	mov	r1, r0
   112c2:	482b      	ldr	r0, [pc, #172]	; (11370 <modem_info_string_get+0x11c>)
   112c4:	f363 128f 	bfi	r2, r3, #6, #10
			LOG_ERR("Unable to obtain short: %d", err);
   112c8:	f00a fa00 	bl	1b6cc <log_1>
			return err;
   112cc:	e7e3      	b.n	11296 <modem_info_string_get+0x42>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_SHORT) {
   112ce:	7ab3      	ldrb	r3, [r6, #10]
   112d0:	2b01      	cmp	r3, #1
   112d2:	d12c      	bne.n	1132e <modem_info_string_get+0xda>
		err = at_params_short_get(&m_param_list,
   112d4:	f10d 0202 	add.w	r2, sp, #2
   112d8:	7a31      	ldrb	r1, [r6, #8]
   112da:	4826      	ldr	r0, [pc, #152]	; (11374 <modem_info_string_get+0x120>)
   112dc:	f00c f89d 	bl	1d41a <at_params_short_get>
		if (err) {
   112e0:	4604      	mov	r4, r0
   112e2:	b168      	cbz	r0, 11300 <modem_info_string_get+0xac>
			LOG_ERR("Unable to obtain short: %d", err);
   112e4:	2301      	movs	r3, #1
   112e6:	f04f 0200 	mov.w	r2, #0
   112ea:	491f      	ldr	r1, [pc, #124]	; (11368 <modem_info_string_get+0x114>)
   112ec:	f363 0207 	bfi	r2, r3, #0, #8
   112f0:	4b1e      	ldr	r3, [pc, #120]	; (1136c <modem_info_string_get+0x118>)
   112f2:	1a5b      	subs	r3, r3, r1
   112f4:	08db      	lsrs	r3, r3, #3
   112f6:	4601      	mov	r1, r0
   112f8:	f363 128f 	bfi	r2, r3, #6, #10
   112fc:	481e      	ldr	r0, [pc, #120]	; (11378 <modem_info_string_get+0x124>)
   112fe:	e7e3      	b.n	112c8 <modem_info_string_get+0x74>
		err = snprintf(buf, MODEM_INFO_MAX_RESPONSE_SIZE,
   11300:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   11304:	4a1d      	ldr	r2, [pc, #116]	; (1137c <modem_info_string_get+0x128>)
   11306:	2164      	movs	r1, #100	; 0x64
   11308:	4628      	mov	r0, r5
   1130a:	f7fd fe4d 	bl	efa8 <snprintf>
	if (info == MODEM_INFO_ICCID) {
   1130e:	2f0e      	cmp	r7, #14
   11310:	d107      	bne.n	11322 <modem_info_string_get+0xce>
   11312:	462c      	mov	r4, r5
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   11314:	4628      	mov	r0, r5
   11316:	f00a fcc6 	bl	1bca6 <strlen>
   1131a:	1ca3      	adds	r3, r4, #2
   1131c:	1b64      	subs	r4, r4, r5
   1131e:	42a0      	cmp	r0, r4
   11320:	d810      	bhi.n	11344 <modem_info_string_get+0xf0>
	return len <= 0 ? -ENOTSUP : len;
   11322:	9c01      	ldr	r4, [sp, #4]
   11324:	2c00      	cmp	r4, #0
   11326:	bf08      	it	eq
   11328:	f06f 0422 	mvneq.w	r4, #34	; 0x22
   1132c:	e7b3      	b.n	11296 <modem_info_string_get+0x42>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   1132e:	2b03      	cmp	r3, #3
   11330:	d1ed      	bne.n	1130e <modem_info_string_get+0xba>
		len = MODEM_INFO_MAX_RESPONSE_SIZE;
   11332:	2364      	movs	r3, #100	; 0x64
		err = at_params_string_get(&m_param_list,
   11334:	462a      	mov	r2, r5
		len = MODEM_INFO_MAX_RESPONSE_SIZE;
   11336:	9301      	str	r3, [sp, #4]
		err = at_params_string_get(&m_param_list,
   11338:	7a31      	ldrb	r1, [r6, #8]
   1133a:	ab01      	add	r3, sp, #4
   1133c:	480d      	ldr	r0, [pc, #52]	; (11374 <modem_info_string_get+0x120>)
   1133e:	f00c f891 	bl	1d464 <at_params_string_get>
   11342:	e7e4      	b.n	1130e <modem_info_string_get+0xba>
		current_char = buf[i];
   11344:	f813 2c02 	ldrb.w	r2, [r3, #-2]
		buf[i] = next_char;
   11348:	f813 1c01 	ldrb.w	r1, [r3, #-1]
		buf[i + 1] = current_char;
   1134c:	461c      	mov	r4, r3
		buf[i] = next_char;
   1134e:	f803 1c02 	strb.w	r1, [r3, #-2]
		buf[i + 1] = current_char;
   11352:	f803 2c01 	strb.w	r2, [r3, #-1]
   11356:	e7dd      	b.n	11314 <modem_info_string_get+0xc0>
		return -EINVAL;
   11358:	f06f 0415 	mvn.w	r4, #21
   1135c:	e79b      	b.n	11296 <modem_info_string_get+0x42>
		return -EIO;
   1135e:	f06f 0404 	mvn.w	r4, #4
   11362:	e798      	b.n	11296 <modem_info_string_get+0x42>
   11364:	0001e2f4 	.word	0x0001e2f4
   11368:	0001e02c 	.word	0x0001e02c
   1136c:	0001e07c 	.word	0x0001e07c
   11370:	00020077 	.word	0x00020077
   11374:	20020cf0 	.word	0x20020cf0
   11378:	00020090 	.word	0x00020090
   1137c:	00020074 	.word	0x00020074

00011380 <modem_info_rsrp_register>:

int modem_info_rsrp_register(rsrp_cb_t cb)
{
	modem_info_rsrp_cb = cb;
   11380:	4b12      	ldr	r3, [pc, #72]	; (113cc <modem_info_rsrp_register+0x4c>)
{
   11382:	b510      	push	{r4, lr}

	int rc = at_notif_register_handler(NULL,
   11384:	4912      	ldr	r1, [pc, #72]	; (113d0 <modem_info_rsrp_register+0x50>)
	modem_info_rsrp_cb = cb;
   11386:	6018      	str	r0, [r3, #0]
	int rc = at_notif_register_handler(NULL,
   11388:	2000      	movs	r0, #0
   1138a:	f7ff fa09 	bl	107a0 <at_notif_register_handler>
		modem_info_rsrp_subscribe_handler);
	if (rc != 0) {
   1138e:	4604      	mov	r4, r0
   11390:	b180      	cbz	r0, 113b4 <modem_info_rsrp_register+0x34>
		LOG_ERR("Can't register handler rc=%d", rc);
   11392:	2301      	movs	r3, #1
   11394:	f04f 0200 	mov.w	r2, #0
   11398:	490e      	ldr	r1, [pc, #56]	; (113d4 <modem_info_rsrp_register+0x54>)
   1139a:	f363 0207 	bfi	r2, r3, #0, #8
   1139e:	4b0e      	ldr	r3, [pc, #56]	; (113d8 <modem_info_rsrp_register+0x58>)
   113a0:	1a5b      	subs	r3, r3, r1
   113a2:	08db      	lsrs	r3, r3, #3
   113a4:	4601      	mov	r1, r0
   113a6:	f363 128f 	bfi	r2, r3, #6, #10
   113aa:	480c      	ldr	r0, [pc, #48]	; (113dc <modem_info_rsrp_register+0x5c>)
   113ac:	f00a f98e 	bl	1b6cc <log_1>
	if (at_cmd_write(AT_CMD_CESQ_ON, NULL, 0, NULL) != 0) {
		return -EIO;
	}

	return 0;
}
   113b0:	4620      	mov	r0, r4
   113b2:	bd10      	pop	{r4, pc}
	if (at_cmd_write(AT_CMD_CESQ_ON, NULL, 0, NULL) != 0) {
   113b4:	4603      	mov	r3, r0
   113b6:	4602      	mov	r2, r0
   113b8:	4601      	mov	r1, r0
   113ba:	4809      	ldr	r0, [pc, #36]	; (113e0 <modem_info_rsrp_register+0x60>)
   113bc:	f7ff f95a 	bl	10674 <at_cmd_write>
   113c0:	1e04      	subs	r4, r0, #0
		return -EIO;
   113c2:	bf18      	it	ne
   113c4:	f06f 0404 	mvnne.w	r4, #4
   113c8:	e7f2      	b.n	113b0 <modem_info_rsrp_register+0x30>
   113ca:	bf00      	nop
   113cc:	20020cf8 	.word	0x20020cf8
   113d0:	000111bd 	.word	0x000111bd
   113d4:	0001e02c 	.word	0x0001e02c
   113d8:	0001e07c 	.word	0x0001e07c
   113dc:	0001ff92 	.word	0x0001ff92
   113e0:	00020010 	.word	0x00020010

000113e4 <modem_info_init>:

int modem_info_init(void)
{
	/* Init at_cmd_parser storage module */
	int err = at_params_list_init(&m_param_list,
   113e4:	210a      	movs	r1, #10
   113e6:	4801      	ldr	r0, [pc, #4]	; (113ec <modem_info_init+0x8>)
   113e8:	f00b bf60 	b.w	1d2ac <at_params_list_init>
   113ec:	20020cf0 	.word	0x20020cf0

000113f0 <modem_info_params_init>:

LOG_MODULE_REGISTER(modem_info_params);

int modem_info_params_init(struct modem_param_info *modem)
{
	if (modem == NULL) {
   113f0:	2800      	cmp	r0, #0
   113f2:	d043      	beq.n	1147c <modem_info_params_init+0x8c>
		return -EINVAL;
	}

	modem->network.current_band.type	= MODEM_INFO_CUR_BAND;
   113f4:	2301      	movs	r3, #1
   113f6:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
	modem->network.sup_band.type		= MODEM_INFO_SUP_BAND;
   113fa:	2302      	movs	r3, #2
   113fc:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
	modem->network.area_code.type		= MODEM_INFO_AREA_CODE;
   11400:	2303      	movs	r3, #3
   11402:	f880 314c 	strb.w	r3, [r0, #332]	; 0x14c
	modem->network.current_operator.type	= MODEM_INFO_OPERATOR;
   11406:	2305      	movs	r3, #5
   11408:	f880 31bc 	strb.w	r3, [r0, #444]	; 0x1bc
	modem->network.mcc.type			= MODEM_INFO_MCC;
   1140c:	2306      	movs	r3, #6
   1140e:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
	modem->network.mnc.type			= MODEM_INFO_MNC;
   11412:	2307      	movs	r3, #7
   11414:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
	modem->network.cellid_hex.type		= MODEM_INFO_CELLID;
   11418:	2308      	movs	r3, #8
   1141a:	f880 330c 	strb.w	r3, [r0, #780]	; 0x30c
	modem->network.ip_address.type		= MODEM_INFO_IP_ADDRESS;
   1141e:	2309      	movs	r3, #9
   11420:	f880 337c 	strb.w	r3, [r0, #892]	; 0x37c
	modem->network.ue_mode.type		= MODEM_INFO_UE_MODE;
   11424:	2304      	movs	r3, #4
   11426:	f880 33ec 	strb.w	r3, [r0, #1004]	; 0x3ec
	modem->network.lte_mode.type		= MODEM_INFO_LTE_MODE;
   1142a:	230f      	movs	r3, #15
   1142c:	f880 345c 	strb.w	r3, [r0, #1116]	; 0x45c
	modem->network.nbiot_mode.type		= MODEM_INFO_NBIOT_MODE;
   11430:	2310      	movs	r3, #16
   11432:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
	modem->network.gps_mode.type		= MODEM_INFO_GPS_MODE;
   11436:	2311      	movs	r3, #17
   11438:	f880 353c 	strb.w	r3, [r0, #1340]	; 0x53c
	modem->network.date_time.type		= MODEM_INFO_DATE_TIME;
   1143c:	2314      	movs	r3, #20
   1143e:	f880 35ac 	strb.w	r3, [r0, #1452]	; 0x5ac

	modem->sim.uicc.type			= MODEM_INFO_UICC;
   11442:	230a      	movs	r3, #10
   11444:	f880 3634 	strb.w	r3, [r0, #1588]	; 0x634
	modem->sim.iccid.type			= MODEM_INFO_ICCID;
   11448:	230e      	movs	r3, #14
   1144a:	f880 36a4 	strb.w	r3, [r0, #1700]	; 0x6a4
	modem->sim.imsi.type		        = MODEM_INFO_IMSI;
   1144e:	2312      	movs	r3, #18
   11450:	f880 3714 	strb.w	r3, [r0, #1812]	; 0x714

	modem->device.modem_fw.type		= MODEM_INFO_FW_VERSION;
   11454:	230d      	movs	r3, #13
   11456:	f880 3784 	strb.w	r3, [r0, #1924]	; 0x784
	modem->device.battery.type		= MODEM_INFO_BATTERY;
   1145a:	230b      	movs	r3, #11
   1145c:	f880 37f4 	strb.w	r3, [r0, #2036]	; 0x7f4
	modem->device.imei.type			= MODEM_INFO_IMEI;
   11460:	2313      	movs	r3, #19
   11462:	f880 3864 	strb.w	r3, [r0, #2148]	; 0x864
	modem->device.board			= CONFIG_BOARD;
   11466:	4b07      	ldr	r3, [pc, #28]	; (11484 <modem_info_params_init+0x94>)
   11468:	f8c0 3868 	str.w	r3, [r0, #2152]	; 0x868
	modem->device.app_version		= STRINGIFY(APP_VERSION);
   1146c:	4b06      	ldr	r3, [pc, #24]	; (11488 <modem_info_params_init+0x98>)
   1146e:	f8c0 386c 	str.w	r3, [r0, #2156]	; 0x86c
	modem->device.app_name			= STRINGIFY(PROJECT_NAME);
   11472:	4b06      	ldr	r3, [pc, #24]	; (1148c <modem_info_params_init+0x9c>)
   11474:	f8c0 3870 	str.w	r3, [r0, #2160]	; 0x870

	return 0;
   11478:	2000      	movs	r0, #0
   1147a:	4770      	bx	lr
		return -EINVAL;
   1147c:	f06f 0015 	mvn.w	r0, #21
}
   11480:	4770      	bx	lr
   11482:	bf00      	nop
   11484:	0002020b 	.word	0x0002020b
   11488:	0002021c 	.word	0x0002021c
   1148c:	00020223 	.word	0x00020223

00011490 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   11490:	b508      	push	{r3, lr}
	z_impl_log_panic();
   11492:	f7fb ff69 	bl	d368 <z_impl_log_panic>
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   11496:	2301      	movs	r3, #1
   11498:	f04f 0100 	mov.w	r1, #0
   1149c:	4a06      	ldr	r2, [pc, #24]	; (114b8 <k_sys_fatal_error_handler+0x28>)
   1149e:	f363 0107 	bfi	r1, r3, #0, #8
   114a2:	4b06      	ldr	r3, [pc, #24]	; (114bc <k_sys_fatal_error_handler+0x2c>)
   114a4:	4806      	ldr	r0, [pc, #24]	; (114c0 <k_sys_fatal_error_handler+0x30>)
   114a6:	1a9b      	subs	r3, r3, r2
   114a8:	08db      	lsrs	r3, r3, #3
   114aa:	f363 118f 	bfi	r1, r3, #6, #10
   114ae:	f00a f900 	bl	1b6b2 <log_0>
	sys_arch_reboot(0);
   114b2:	2000      	movs	r0, #0
   114b4:	f7fc fe90 	bl	e1d8 <sys_arch_reboot>

	CODE_UNREACHABLE;
   114b8:	0001e02c 	.word	0x0001e02c
   114bc:	0001e064 	.word	0x0001e064
   114c0:	00020242 	.word	0x00020242

000114c4 <check_ext_api_requests>:
	return true;
}


static int check_ext_api_requests(struct device *dev)
{
   114c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   114c8:	2600      	movs	r6, #0
			skip_ext_apis(&m_firmware_info);
   114ca:	4c1e      	ldr	r4, [pc, #120]	; (11544 <check_ext_api_requests+0x80>)
{
   114cc:	b085      	sub	sp, #20
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   114ce:	f854 9c04 	ldr.w	r9, [r4, #-4]
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							u32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const u32_t ext_api_magic[] = {EXT_API_MAGIC};
   114d2:	4f1d      	ldr	r7, [pc, #116]	; (11548 <check_ext_api_requests+0x84>)
   114d4:	ad01      	add	r5, sp, #4
   114d6:	45b1      	cmp	r9, r6
   114d8:	d803      	bhi.n	114e2 <check_ext_api_requests+0x1e>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   114da:	2000      	movs	r0, #0
   114dc:	b005      	add	sp, #20
   114de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((u32_t)*(ext_api_req->ext_api))
   114e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   114e4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   114e8:	f8d3 8000 	ldr.w	r8, [r3]
   114ec:	e885 0007 	stmia.w	r5, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   114f0:	220c      	movs	r2, #12
   114f2:	4629      	mov	r1, r5
   114f4:	4640      	mov	r0, r8
   114f6:	f00a fbf8 	bl	1bcea <memcmp>
   114fa:	b9a0      	cbnz	r0, 11526 <check_ext_api_requests+0x62>
   114fc:	f1b8 0f00 	cmp.w	r8, #0
   11500:	d011      	beq.n	11526 <check_ext_api_requests+0x62>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   11502:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const u32_t req_id = ext_api_req->request.ext_api_id;
   11504:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   11506:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   11508:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   1150a:	4291      	cmp	r1, r2
   1150c:	d10b      	bne.n	11526 <check_ext_api_requests+0x62>
		&&  (ext_api->ext_api_version >= req_min_version)
   1150e:	699a      	ldr	r2, [r3, #24]
	const u32_t req_min_version = ext_api_req->request.ext_api_version;
   11510:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   11512:	4291      	cmp	r1, r2
   11514:	d807      	bhi.n	11526 <check_ext_api_requests+0x62>
	const u32_t req_max_version = ext_api_req->ext_api_max_version;
   11516:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   11518:	4291      	cmp	r1, r2
   1151a:	d904      	bls.n	11526 <check_ext_api_requests+0x62>
	const u32_t req_flags = ext_api_req->request.ext_api_flags;
   1151c:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   1151e:	695b      	ldr	r3, [r3, #20]
   11520:	ea32 0303 	bics.w	r3, r2, r3
   11524:	d007      	beq.n	11536 <check_ext_api_requests+0x72>
		} else if (ext_api_req->required) {
   11526:	6a23      	ldr	r3, [r4, #32]
   11528:	b14b      	cbz	r3, 1153e <check_ext_api_requests+0x7a>
			k_panic();
   1152a:	4040      	eors	r0, r0
   1152c:	f380 8811 	msr	BASEPRI, r0
   11530:	f04f 0004 	mov.w	r0, #4
   11534:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   11536:	68e3      	ldr	r3, [r4, #12]
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   11538:	3601      	adds	r6, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   1153a:	441c      	add	r4, r3
   1153c:	e7cb      	b.n	114d6 <check_ext_api_requests+0x12>
			*ext_api_req->ext_api = NULL;
   1153e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   11540:	6013      	str	r3, [r2, #0]
   11542:	e7f8      	b.n	11536 <check_ext_api_requests+0x72>
   11544:	0000c23c 	.word	0x0000c23c
   11548:	0001e0b4 	.word	0x0001e0b4

0001154c <rpc_logobj_client_evt_handler>:
   1154c:	b120      	cbz	r0, 11558 <rpc_logobj_client_evt_handler+0xc>
   1154e:	f850 1b08 	ldr.w	r1, [r0], #8
   11552:	0c09      	lsrs	r1, r1, #16
   11554:	f000 b852 	b.w	115fc <logobj_event_handler>
   11558:	4770      	bx	lr
   1155a:	bf00      	nop

0001155c <rpc_logobj_client_init>:
   1155c:	4801      	ldr	r0, [pc, #4]	; (11564 <rpc_logobj_client_init+0x8>)
   1155e:	f006 bb23 	b.w	17ba8 <rpc_client_register>
   11562:	bf00      	nop
   11564:	0001e384 	.word	0x0001e384

00011568 <rpc_logobj_client_request_alloc>:
   11568:	2300      	movs	r3, #0
   1156a:	b510      	push	{r4, lr}
   1156c:	b082      	sub	sp, #8
   1156e:	9301      	str	r3, [sp, #4]
   11570:	b961      	cbnz	r1, 1158c <rpc_logobj_client_request_alloc+0x24>
   11572:	b170      	cbz	r0, 11592 <rpc_logobj_client_request_alloc+0x2a>
   11574:	4604      	mov	r4, r0
   11576:	aa01      	add	r2, sp, #4
   11578:	2009      	movs	r0, #9
   1157a:	f006 fd4d 	bl	18018 <rpc_message_alloc>
   1157e:	b918      	cbnz	r0, 11588 <rpc_logobj_client_request_alloc+0x20>
   11580:	9b01      	ldr	r3, [sp, #4]
   11582:	b10b      	cbz	r3, 11588 <rpc_logobj_client_request_alloc+0x20>
   11584:	3308      	adds	r3, #8
   11586:	6023      	str	r3, [r4, #0]
   11588:	b002      	add	sp, #8
   1158a:	bd10      	pop	{r4, pc}
   1158c:	200f      	movs	r0, #15
   1158e:	b002      	add	sp, #8
   11590:	bd10      	pop	{r4, pc}
   11592:	200e      	movs	r0, #14
   11594:	b002      	add	sp, #8
   11596:	bd10      	pop	{r4, pc}

00011598 <rpc_logobj_client_request_send>:
   11598:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1159c:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   115a0:	d10b      	bne.n	115ba <rpc_logobj_client_request_send+0x22>
   115a2:	b160      	cbz	r0, 115be <rpc_logobj_client_request_send+0x26>
   115a4:	4603      	mov	r3, r0
   115a6:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   115aa:	2009      	movs	r0, #9
   115ac:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   115b0:	f843 1d08 	str.w	r1, [r3, #-8]!
   115b4:	4619      	mov	r1, r3
   115b6:	f006 bd17 	b.w	17fe8 <rpc_message_send>
   115ba:	200f      	movs	r0, #15
   115bc:	4770      	bx	lr
   115be:	200e      	movs	r0, #14
   115c0:	4770      	bx	lr
   115c2:	bf00      	nop

000115c4 <rpc_logobj_client_message_free>:
   115c4:	b120      	cbz	r0, 115d0 <rpc_logobj_client_message_free+0xc>
   115c6:	f1a0 0108 	sub.w	r1, r0, #8
   115ca:	2009      	movs	r0, #9
   115cc:	f006 bd56 	b.w	1807c <rpc_message_free>
   115d0:	200e      	movs	r0, #14
   115d2:	4770      	bx	lr

000115d4 <rpc_logobj_client_data_free>:
   115d4:	b118      	cbz	r0, 115de <rpc_logobj_client_data_free+0xa>
   115d6:	4601      	mov	r1, r0
   115d8:	2009      	movs	r0, #9
   115da:	f006 be61 	b.w	182a0 <rpc_message_data_free>
   115de:	200e      	movs	r0, #14
   115e0:	4770      	bx	lr
   115e2:	bf00      	nop

000115e4 <packet_free_cb>:
   115e4:	b510      	push	{r4, lr}
   115e6:	4604      	mov	r4, r0
   115e8:	6800      	ldr	r0, [r0, #0]
   115ea:	f7ff fff3 	bl	115d4 <rpc_logobj_client_data_free>
   115ee:	68a0      	ldr	r0, [r4, #8]
   115f0:	b118      	cbz	r0, 115fa <packet_free_cb+0x16>
   115f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   115f6:	f001 b90f 	b.w	12818 <nrf_free>
   115fa:	bd10      	pop	{r4, pc}

000115fc <logobj_event_handler>:
   115fc:	b530      	push	{r4, r5, lr}
   115fe:	4b3b      	ldr	r3, [pc, #236]	; (116ec <logobj_event_handler+0xf0>)
   11600:	b085      	sub	sp, #20
   11602:	681d      	ldr	r5, [r3, #0]
   11604:	2d00      	cmp	r5, #0
   11606:	d04c      	beq.n	116a2 <logobj_event_handler+0xa6>
   11608:	f248 0302 	movw	r3, #32770	; 0x8002
   1160c:	4299      	cmp	r1, r3
   1160e:	d053      	beq.n	116b8 <logobj_event_handler+0xbc>
   11610:	d91c      	bls.n	1164c <logobj_event_handler+0x50>
   11612:	f248 0303 	movw	r3, #32771	; 0x8003
   11616:	4299      	cmp	r1, r3
   11618:	d05a      	beq.n	116d0 <logobj_event_handler+0xd4>
   1161a:	f249 0301 	movw	r3, #36865	; 0x9001
   1161e:	4299      	cmp	r1, r3
   11620:	d147      	bne.n	116b2 <logobj_event_handler+0xb6>
   11622:	2400      	movs	r4, #0
   11624:	6843      	ldr	r3, [r0, #4]
   11626:	6802      	ldr	r2, [r0, #0]
   11628:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1162c:	e9cd 2300 	strd	r2, r3, [sp]
   11630:	69e8      	ldr	r0, [r5, #28]
   11632:	4669      	mov	r1, sp
   11634:	6803      	ldr	r3, [r0, #0]
   11636:	685b      	ldr	r3, [r3, #4]
   11638:	4798      	blx	r3
   1163a:	3001      	adds	r0, #1
   1163c:	d04e      	beq.n	116dc <logobj_event_handler+0xe0>
   1163e:	4620      	mov	r0, r4
   11640:	682b      	ldr	r3, [r5, #0]
   11642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   11646:	602b      	str	r3, [r5, #0]
   11648:	b005      	add	sp, #20
   1164a:	bd30      	pop	{r4, r5, pc}
   1164c:	f248 0301 	movw	r3, #32769	; 0x8001
   11650:	4299      	cmp	r1, r3
   11652:	d12e      	bne.n	116b2 <logobj_event_handler+0xb6>
   11654:	68c3      	ldr	r3, [r0, #12]
   11656:	2b00      	cmp	r3, #0
   11658:	d135      	bne.n	116c6 <logobj_event_handler+0xca>
   1165a:	6828      	ldr	r0, [r5, #0]
   1165c:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   11660:	d03e      	beq.n	116e0 <logobj_event_handler+0xe4>
   11662:	682b      	ldr	r3, [r5, #0]
   11664:	b29b      	uxth	r3, r3
   11666:	2b01      	cmp	r3, #1
   11668:	d105      	bne.n	11676 <logobj_event_handler+0x7a>
   1166a:	682b      	ldr	r3, [r5, #0]
   1166c:	0c1b      	lsrs	r3, r3, #16
   1166e:	041b      	lsls	r3, r3, #16
   11670:	f043 0302 	orr.w	r3, r3, #2
   11674:	602b      	str	r3, [r5, #0]
   11676:	4b1e      	ldr	r3, [pc, #120]	; (116f0 <logobj_event_handler+0xf4>)
   11678:	781a      	ldrb	r2, [r3, #0]
   1167a:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   1167e:	2a00      	cmp	r2, #0
   11680:	d031      	beq.n	116e6 <logobj_event_handler+0xea>
   11682:	4a1c      	ldr	r2, [pc, #112]	; (116f4 <logobj_event_handler+0xf8>)
   11684:	7811      	ldrb	r1, [r2, #0]
   11686:	b909      	cbnz	r1, 1168c <logobj_event_handler+0x90>
   11688:	2101      	movs	r1, #1
   1168a:	7011      	strb	r1, [r2, #0]
   1168c:	2000      	movs	r0, #0
   1168e:	7018      	strb	r0, [r3, #0]
   11690:	682b      	ldr	r3, [r5, #0]
   11692:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   11696:	602b      	str	r3, [r5, #0]
   11698:	682b      	ldr	r3, [r5, #0]
   1169a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1169e:	602b      	str	r3, [r5, #0]
   116a0:	e7d2      	b.n	11648 <logobj_event_handler+0x4c>
   116a2:	6800      	ldr	r0, [r0, #0]
   116a4:	2800      	cmp	r0, #0
   116a6:	d0cf      	beq.n	11648 <logobj_event_handler+0x4c>
   116a8:	f7ff ff94 	bl	115d4 <rpc_logobj_client_data_free>
   116ac:	4628      	mov	r0, r5
   116ae:	b005      	add	sp, #20
   116b0:	bd30      	pop	{r4, r5, pc}
   116b2:	2000      	movs	r0, #0
   116b4:	b005      	add	sp, #20
   116b6:	bd30      	pop	{r4, r5, pc}
   116b8:	682b      	ldr	r3, [r5, #0]
   116ba:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   116be:	d00b      	beq.n	116d8 <logobj_event_handler+0xdc>
   116c0:	68c0      	ldr	r0, [r0, #12]
   116c2:	2800      	cmp	r0, #0
   116c4:	d0e4      	beq.n	11690 <logobj_event_handler+0x94>
   116c6:	230e      	movs	r3, #14
   116c8:	2000      	movs	r0, #0
   116ca:	606b      	str	r3, [r5, #4]
   116cc:	b005      	add	sp, #20
   116ce:	bd30      	pop	{r4, r5, pc}
   116d0:	68c3      	ldr	r3, [r0, #12]
   116d2:	2b01      	cmp	r3, #1
   116d4:	d1a5      	bne.n	11622 <logobj_event_handler+0x26>
   116d6:	e7f6      	b.n	116c6 <logobj_event_handler+0xca>
   116d8:	4618      	mov	r0, r3
   116da:	e7b5      	b.n	11648 <logobj_event_handler+0x4c>
   116dc:	2002      	movs	r0, #2
   116de:	e7b3      	b.n	11648 <logobj_event_handler+0x4c>
   116e0:	230e      	movs	r3, #14
   116e2:	606b      	str	r3, [r5, #4]
   116e4:	e7b0      	b.n	11648 <logobj_event_handler+0x4c>
   116e6:	4a03      	ldr	r2, [pc, #12]	; (116f4 <logobj_event_handler+0xf8>)
   116e8:	7011      	strb	r1, [r2, #0]
   116ea:	e7cf      	b.n	1168c <logobj_event_handler+0x90>
   116ec:	20020d00 	.word	0x20020d00
   116f0:	20022072 	.word	0x20022072
   116f4:	20022073 	.word	0x20022073

000116f8 <logobj_interface_init>:
   116f8:	2300      	movs	r3, #0
   116fa:	b510      	push	{r4, lr}
   116fc:	4907      	ldr	r1, [pc, #28]	; (1171c <logobj_interface_init+0x24>)
   116fe:	4a08      	ldr	r2, [pc, #32]	; (11720 <logobj_interface_init+0x28>)
   11700:	4c08      	ldr	r4, [pc, #32]	; (11724 <logobj_interface_init+0x2c>)
   11702:	4809      	ldr	r0, [pc, #36]	; (11728 <logobj_interface_init+0x30>)
   11704:	7023      	strb	r3, [r4, #0]
   11706:	6003      	str	r3, [r0, #0]
   11708:	700b      	strb	r3, [r1, #0]
   1170a:	6013      	str	r3, [r2, #0]
   1170c:	f7ff ff26 	bl	1155c <rpc_logobj_client_init>
   11710:	3000      	adds	r0, #0
   11712:	bf18      	it	ne
   11714:	2001      	movne	r0, #1
   11716:	4240      	negs	r0, r0
   11718:	bd10      	pop	{r4, pc}
   1171a:	bf00      	nop
   1171c:	20022072 	.word	0x20022072
   11720:	20020cfc 	.word	0x20020cfc
   11724:	20022073 	.word	0x20022073
   11728:	20020d00 	.word	0x20020d00

0001172c <logobj_interface_open>:
   1172c:	2300      	movs	r3, #0
   1172e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11732:	2866      	cmp	r0, #102	; 0x66
   11734:	b082      	sub	sp, #8
   11736:	9300      	str	r3, [sp, #0]
   11738:	d172      	bne.n	11820 <logobj_interface_open+0xf4>
   1173a:	2902      	cmp	r1, #2
   1173c:	4689      	mov	r9, r1
   1173e:	d16f      	bne.n	11820 <logobj_interface_open+0xf4>
   11740:	f240 2305 	movw	r3, #517	; 0x205
   11744:	429a      	cmp	r2, r3
   11746:	4692      	mov	sl, r2
   11748:	d16a      	bne.n	11820 <logobj_interface_open+0xf4>
   1174a:	4f48      	ldr	r7, [pc, #288]	; (1186c <logobj_interface_open+0x140>)
   1174c:	683d      	ldr	r5, [r7, #0]
   1174e:	2d00      	cmp	r5, #0
   11750:	d17c      	bne.n	1184c <logobj_interface_open+0x120>
   11752:	4680      	mov	r8, r0
   11754:	4a46      	ldr	r2, [pc, #280]	; (11870 <logobj_interface_open+0x144>)
   11756:	4668      	mov	r0, sp
   11758:	f005 ffd6 	bl	17708 <interface_socket_allocate>
   1175c:	9b00      	ldr	r3, [sp, #0]
   1175e:	4606      	mov	r6, r0
   11760:	2b00      	cmp	r3, #0
   11762:	d07d      	beq.n	11860 <logobj_interface_open+0x134>
   11764:	4629      	mov	r1, r5
   11766:	2204      	movs	r2, #4
   11768:	4842      	ldr	r0, [pc, #264]	; (11874 <logobj_interface_open+0x148>)
   1176a:	603b      	str	r3, [r7, #0]
   1176c:	f00a faf7 	bl	1bd5e <memset>
   11770:	9c00      	ldr	r4, [sp, #0]
   11772:	4629      	mov	r1, r5
   11774:	e9c4 8903 	strd	r8, r9, [r4, #12]
   11778:	f8c4 a014 	str.w	sl, [r4, #20]
   1177c:	a801      	add	r0, sp, #4
   1177e:	f7ff fef3 	bl	11568 <rpc_logobj_client_request_alloc>
   11782:	2800      	cmp	r0, #0
   11784:	d13c      	bne.n	11800 <logobj_interface_open+0xd4>
   11786:	2201      	movs	r2, #1
   11788:	2104      	movs	r1, #4
   1178a:	9b01      	ldr	r3, [sp, #4]
   1178c:	4d3a      	ldr	r5, [pc, #232]	; (11878 <logobj_interface_open+0x14c>)
   1178e:	7358      	strb	r0, [r3, #13]
   11790:	7398      	strb	r0, [r3, #14]
   11792:	73d8      	strb	r0, [r3, #15]
   11794:	7258      	strb	r0, [r3, #9]
   11796:	7298      	strb	r0, [r3, #10]
   11798:	72d8      	strb	r0, [r3, #11]
   1179a:	7219      	strb	r1, [r3, #8]
   1179c:	702a      	strb	r2, [r5, #0]
   1179e:	731a      	strb	r2, [r3, #12]
   117a0:	6822      	ldr	r2, [r4, #0]
   117a2:	4618      	mov	r0, r3
   117a4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   117a8:	6022      	str	r2, [r4, #0]
   117aa:	f247 0101 	movw	r1, #28673	; 0x7001
   117ae:	f7ff fef3 	bl	11598 <rpc_logobj_client_request_send>
   117b2:	bb38      	cbnz	r0, 11804 <logobj_interface_open+0xd8>
   117b4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   117b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   117bc:	4611      	mov	r1, r2
   117be:	4630      	mov	r0, r6
   117c0:	f006 f84e 	bl	17860 <interface_socket_wait>
   117c4:	4604      	mov	r4, r0
   117c6:	b310      	cbz	r0, 1180e <logobj_interface_open+0xe2>
   117c8:	9a00      	ldr	r2, [sp, #0]
   117ca:	2e00      	cmp	r6, #0
   117cc:	6813      	ldr	r3, [r2, #0]
   117ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   117d2:	6013      	str	r3, [r2, #0]
   117d4:	9a00      	ldr	r2, [sp, #0]
   117d6:	6813      	ldr	r3, [r2, #0]
   117d8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   117dc:	6013      	str	r3, [r2, #0]
   117de:	9a00      	ldr	r2, [sp, #0]
   117e0:	6813      	ldr	r3, [r2, #0]
   117e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   117e6:	6013      	str	r3, [r2, #0]
   117e8:	da36      	bge.n	11858 <logobj_interface_open+0x12c>
   117ea:	2300      	movs	r3, #0
   117ec:	4620      	mov	r0, r4
   117ee:	603b      	str	r3, [r7, #0]
   117f0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   117f4:	f7fe f942 	bl	fa7c <bsd_os_errno_set>
   117f8:	4630      	mov	r0, r6
   117fa:	b002      	add	sp, #8
   117fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11800:	240c      	movs	r4, #12
   11802:	e7e1      	b.n	117c8 <logobj_interface_open+0x9c>
   11804:	9801      	ldr	r0, [sp, #4]
   11806:	f7ff fedd 	bl	115c4 <rpc_logobj_client_message_free>
   1180a:	2405      	movs	r4, #5
   1180c:	e7dc      	b.n	117c8 <logobj_interface_open+0x9c>
   1180e:	4630      	mov	r0, r6
   11810:	f006 f89a 	bl	17948 <interface_socket_from_handle_get>
   11814:	b150      	cbz	r0, 1182c <logobj_interface_open+0x100>
   11816:	6844      	ldr	r4, [r0, #4]
   11818:	b144      	cbz	r4, 1182c <logobj_interface_open+0x100>
   1181a:	2300      	movs	r3, #0
   1181c:	6043      	str	r3, [r0, #4]
   1181e:	e7d3      	b.n	117c8 <logobj_interface_open+0x9c>
   11820:	2016      	movs	r0, #22
   11822:	f7fe f92b 	bl	fa7c <bsd_os_errno_set>
   11826:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1182a:	e7e5      	b.n	117f8 <logobj_interface_open+0xcc>
   1182c:	9a00      	ldr	r2, [sp, #0]
   1182e:	6813      	ldr	r3, [r2, #0]
   11830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   11834:	6013      	str	r3, [r2, #0]
   11836:	9a00      	ldr	r2, [sp, #0]
   11838:	6813      	ldr	r3, [r2, #0]
   1183a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1183e:	6013      	str	r3, [r2, #0]
   11840:	9a00      	ldr	r2, [sp, #0]
   11842:	6813      	ldr	r3, [r2, #0]
   11844:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   11848:	6013      	str	r3, [r2, #0]
   1184a:	e7d5      	b.n	117f8 <logobj_interface_open+0xcc>
   1184c:	2001      	movs	r0, #1
   1184e:	f7fe f915 	bl	fa7c <bsd_os_errno_set>
   11852:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   11856:	e7cf      	b.n	117f8 <logobj_interface_open+0xcc>
   11858:	4630      	mov	r0, r6
   1185a:	f005 ffb3 	bl	177c4 <interface_socket_free>
   1185e:	e7c4      	b.n	117ea <logobj_interface_open+0xbe>
   11860:	2018      	movs	r0, #24
   11862:	f7fe f90b 	bl	fa7c <bsd_os_errno_set>
   11866:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1186a:	e7c5      	b.n	117f8 <logobj_interface_open+0xcc>
   1186c:	20020d00 	.word	0x20020d00
   11870:	000115e5 	.word	0x000115e5
   11874:	20020cfc 	.word	0x20020cfc
   11878:	20022072 	.word	0x20022072

0001187c <logobj_interface_read>:
   1187c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11880:	b085      	sub	sp, #20
   11882:	2900      	cmp	r1, #0
   11884:	d05e      	beq.n	11944 <logobj_interface_read+0xc8>
   11886:	2a00      	cmp	r2, #0
   11888:	4616      	mov	r6, r2
   1188a:	dd5b      	ble.n	11944 <logobj_interface_read+0xc8>
   1188c:	461f      	mov	r7, r3
   1188e:	4680      	mov	r8, r0
   11890:	460d      	mov	r5, r1
   11892:	f006 f859 	bl	17948 <interface_socket_from_handle_get>
   11896:	4604      	mov	r4, r0
   11898:	2800      	cmp	r0, #0
   1189a:	d059      	beq.n	11950 <logobj_interface_read+0xd4>
   1189c:	69c0      	ldr	r0, [r0, #28]
   1189e:	07ba      	lsls	r2, r7, #30
   118a0:	6803      	ldr	r3, [r0, #0]
   118a2:	68db      	ldr	r3, [r3, #12]
   118a4:	d524      	bpl.n	118f0 <logobj_interface_read+0x74>
   118a6:	4798      	blx	r3
   118a8:	3001      	adds	r0, #1
   118aa:	d03b      	beq.n	11924 <logobj_interface_read+0xa8>
   118ac:	6823      	ldr	r3, [r4, #0]
   118ae:	69e0      	ldr	r0, [r4, #28]
   118b0:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   118b4:	d038      	beq.n	11928 <logobj_interface_read+0xac>
   118b6:	2100      	movs	r1, #0
   118b8:	6823      	ldr	r3, [r4, #0]
   118ba:	463a      	mov	r2, r7
   118bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   118c0:	6023      	str	r3, [r4, #0]
   118c2:	e9cd 1102 	strd	r1, r1, [sp, #8]
   118c6:	e9cd 5600 	strd	r5, r6, [sp]
   118ca:	6803      	ldr	r3, [r0, #0]
   118cc:	4669      	mov	r1, sp
   118ce:	689b      	ldr	r3, [r3, #8]
   118d0:	4798      	blx	r3
   118d2:	4605      	mov	r5, r0
   118d4:	69e0      	ldr	r0, [r4, #28]
   118d6:	6803      	ldr	r3, [r0, #0]
   118d8:	68db      	ldr	r3, [r3, #12]
   118da:	4798      	blx	r3
   118dc:	3001      	adds	r0, #1
   118de:	d003      	beq.n	118e8 <logobj_interface_read+0x6c>
   118e0:	6823      	ldr	r3, [r4, #0]
   118e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   118e6:	6023      	str	r3, [r4, #0]
   118e8:	4628      	mov	r0, r5
   118ea:	b005      	add	sp, #20
   118ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   118f0:	6822      	ldr	r2, [r4, #0]
   118f2:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   118f6:	d1d6      	bne.n	118a6 <logobj_interface_read+0x2a>
   118f8:	4798      	blx	r3
   118fa:	1c43      	adds	r3, r0, #1
   118fc:	d1d6      	bne.n	118ac <logobj_interface_read+0x30>
   118fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   11902:	6a23      	ldr	r3, [r4, #32]
   11904:	4611      	mov	r1, r2
   11906:	2b00      	cmp	r3, #0
   11908:	bf08      	it	eq
   1190a:	4603      	moveq	r3, r0
   1190c:	4640      	mov	r0, r8
   1190e:	f005 ffa7 	bl	17860 <interface_socket_wait>
   11912:	b158      	cbz	r0, 1192c <logobj_interface_read+0xb0>
   11914:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   11918:	f7fe f8b0 	bl	fa7c <bsd_os_errno_set>
   1191c:	4628      	mov	r0, r5
   1191e:	b005      	add	sp, #20
   11920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11924:	2023      	movs	r0, #35	; 0x23
   11926:	e7f5      	b.n	11914 <logobj_interface_read+0x98>
   11928:	461d      	mov	r5, r3
   1192a:	e7d4      	b.n	118d6 <logobj_interface_read+0x5a>
   1192c:	4640      	mov	r0, r8
   1192e:	f006 f80b 	bl	17948 <interface_socket_from_handle_get>
   11932:	4603      	mov	r3, r0
   11934:	2800      	cmp	r0, #0
   11936:	d0b9      	beq.n	118ac <logobj_interface_read+0x30>
   11938:	6840      	ldr	r0, [r0, #4]
   1193a:	2800      	cmp	r0, #0
   1193c:	d0b6      	beq.n	118ac <logobj_interface_read+0x30>
   1193e:	f8c3 9004 	str.w	r9, [r3, #4]
   11942:	e7e7      	b.n	11914 <logobj_interface_read+0x98>
   11944:	2016      	movs	r0, #22
   11946:	f7fe f899 	bl	fa7c <bsd_os_errno_set>
   1194a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1194e:	e7cb      	b.n	118e8 <logobj_interface_read+0x6c>
   11950:	2009      	movs	r0, #9
   11952:	f7fe f893 	bl	fa7c <bsd_os_errno_set>
   11956:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1195a:	e7c5      	b.n	118e8 <logobj_interface_read+0x6c>

0001195c <logobj_interface_write>:
   1195c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11960:	b082      	sub	sp, #8
   11962:	2900      	cmp	r1, #0
   11964:	d05b      	beq.n	11a1e <logobj_interface_write+0xc2>
   11966:	2a04      	cmp	r2, #4
   11968:	d159      	bne.n	11a1e <logobj_interface_write+0xc2>
   1196a:	461e      	mov	r6, r3
   1196c:	4607      	mov	r7, r0
   1196e:	460d      	mov	r5, r1
   11970:	f005 ffea 	bl	17948 <interface_socket_from_handle_get>
   11974:	4604      	mov	r4, r0
   11976:	2800      	cmp	r0, #0
   11978:	d067      	beq.n	11a4a <logobj_interface_write+0xee>
   1197a:	07b0      	lsls	r0, r6, #30
   1197c:	d526      	bpl.n	119cc <logobj_interface_write+0x70>
   1197e:	6823      	ldr	r3, [r4, #0]
   11980:	039b      	lsls	r3, r3, #14
   11982:	d55e      	bpl.n	11a42 <logobj_interface_write+0xe6>
   11984:	2600      	movs	r6, #0
   11986:	6823      	ldr	r3, [r4, #0]
   11988:	2100      	movs	r1, #0
   1198a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1198e:	6023      	str	r3, [r4, #0]
   11990:	a801      	add	r0, sp, #4
   11992:	f8d5 8000 	ldr.w	r8, [r5]
   11996:	f7ff fde7 	bl	11568 <rpc_logobj_client_request_alloc>
   1199a:	b9f8      	cbnz	r0, 119dc <logobj_interface_write+0x80>
   1199c:	2504      	movs	r5, #4
   1199e:	9b01      	ldr	r3, [sp, #4]
   119a0:	f247 0103 	movw	r1, #28675	; 0x7003
   119a4:	f8c3 800c 	str.w	r8, [r3, #12]
   119a8:	7258      	strb	r0, [r3, #9]
   119aa:	7298      	strb	r0, [r3, #10]
   119ac:	72d8      	strb	r0, [r3, #11]
   119ae:	721d      	strb	r5, [r3, #8]
   119b0:	4618      	mov	r0, r3
   119b2:	f7ff fdf1 	bl	11598 <rpc_logobj_client_request_send>
   119b6:	4680      	mov	r8, r0
   119b8:	bb40      	cbnz	r0, 11a0c <logobj_interface_write+0xb0>
   119ba:	b9ce      	cbnz	r6, 119f0 <logobj_interface_write+0x94>
   119bc:	4628      	mov	r0, r5
   119be:	6823      	ldr	r3, [r4, #0]
   119c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   119c4:	6023      	str	r3, [r4, #0]
   119c6:	b002      	add	sp, #8
   119c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   119cc:	6823      	ldr	r3, [r4, #0]
   119ce:	00d9      	lsls	r1, r3, #3
   119d0:	d4d5      	bmi.n	1197e <logobj_interface_write+0x22>
   119d2:	6823      	ldr	r3, [r4, #0]
   119d4:	039a      	lsls	r2, r3, #14
   119d6:	d536      	bpl.n	11a46 <logobj_interface_write+0xea>
   119d8:	2601      	movs	r6, #1
   119da:	e7d4      	b.n	11986 <logobj_interface_write+0x2a>
   119dc:	200c      	movs	r0, #12
   119de:	6823      	ldr	r3, [r4, #0]
   119e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   119e4:	6023      	str	r3, [r4, #0]
   119e6:	f7fe f849 	bl	fa7c <bsd_os_errno_set>
   119ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   119ee:	e7ea      	b.n	119c6 <logobj_interface_write+0x6a>
   119f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   119f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   119f8:	4611      	mov	r1, r2
   119fa:	4638      	mov	r0, r7
   119fc:	f005 ff30 	bl	17860 <interface_socket_wait>
   11a00:	b198      	cbz	r0, 11a2a <logobj_interface_write+0xce>
   11a02:	6823      	ldr	r3, [r4, #0]
   11a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   11a08:	6023      	str	r3, [r4, #0]
   11a0a:	e7ec      	b.n	119e6 <logobj_interface_write+0x8a>
   11a0c:	9801      	ldr	r0, [sp, #4]
   11a0e:	f7ff fdd9 	bl	115c4 <rpc_logobj_client_message_free>
   11a12:	6823      	ldr	r3, [r4, #0]
   11a14:	2005      	movs	r0, #5
   11a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   11a1a:	6023      	str	r3, [r4, #0]
   11a1c:	e7e3      	b.n	119e6 <logobj_interface_write+0x8a>
   11a1e:	2016      	movs	r0, #22
   11a20:	f7fe f82c 	bl	fa7c <bsd_os_errno_set>
   11a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11a28:	e7cd      	b.n	119c6 <logobj_interface_write+0x6a>
   11a2a:	4638      	mov	r0, r7
   11a2c:	f005 ff8c 	bl	17948 <interface_socket_from_handle_get>
   11a30:	4603      	mov	r3, r0
   11a32:	2800      	cmp	r0, #0
   11a34:	d0c2      	beq.n	119bc <logobj_interface_write+0x60>
   11a36:	6840      	ldr	r0, [r0, #4]
   11a38:	2800      	cmp	r0, #0
   11a3a:	d0bf      	beq.n	119bc <logobj_interface_write+0x60>
   11a3c:	f8c3 8004 	str.w	r8, [r3, #4]
   11a40:	e7df      	b.n	11a02 <logobj_interface_write+0xa6>
   11a42:	2073      	movs	r0, #115	; 0x73
   11a44:	e7cf      	b.n	119e6 <logobj_interface_write+0x8a>
   11a46:	2009      	movs	r0, #9
   11a48:	e7cd      	b.n	119e6 <logobj_interface_write+0x8a>
   11a4a:	2009      	movs	r0, #9
   11a4c:	f7fe f816 	bl	fa7c <bsd_os_errno_set>
   11a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11a54:	e7b7      	b.n	119c6 <logobj_interface_write+0x6a>
   11a56:	bf00      	nop

00011a58 <logobj_interface_setopt>:
   11a58:	b5f0      	push	{r4, r5, r6, r7, lr}
   11a5a:	2901      	cmp	r1, #1
   11a5c:	b085      	sub	sp, #20
   11a5e:	d068      	beq.n	11b32 <logobj_interface_setopt+0xda>
   11a60:	461e      	mov	r6, r3
   11a62:	f240 2305 	movw	r3, #517	; 0x205
   11a66:	4299      	cmp	r1, r3
   11a68:	f040 8095 	bne.w	11b96 <logobj_interface_setopt+0x13e>
   11a6c:	4607      	mov	r7, r0
   11a6e:	4615      	mov	r5, r2
   11a70:	f005 ff6a 	bl	17948 <interface_socket_from_handle_get>
   11a74:	4604      	mov	r4, r0
   11a76:	2800      	cmp	r0, #0
   11a78:	f000 80b2 	beq.w	11be0 <logobj_interface_setopt+0x188>
   11a7c:	2d01      	cmp	r5, #1
   11a7e:	d019      	beq.n	11ab4 <logobj_interface_setopt+0x5c>
   11a80:	2d02      	cmp	r5, #2
   11a82:	d010      	beq.n	11aa6 <logobj_interface_setopt+0x4e>
   11a84:	252a      	movs	r5, #42	; 0x2a
   11a86:	6803      	ldr	r3, [r0, #0]
   11a88:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   11a8c:	6023      	str	r3, [r4, #0]
   11a8e:	6823      	ldr	r3, [r4, #0]
   11a90:	4628      	mov	r0, r5
   11a92:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   11a96:	6023      	str	r3, [r4, #0]
   11a98:	f7fd fff0 	bl	fa7c <bsd_os_errno_set>
   11a9c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   11aa0:	4628      	mov	r0, r5
   11aa2:	b005      	add	sp, #20
   11aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11aa6:	b116      	cbz	r6, 11aae <logobj_interface_setopt+0x56>
   11aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11aaa:	2b01      	cmp	r3, #1
   11aac:	d049      	beq.n	11b42 <logobj_interface_setopt+0xea>
   11aae:	6823      	ldr	r3, [r4, #0]
   11ab0:	2516      	movs	r5, #22
   11ab2:	e7e9      	b.n	11a88 <logobj_interface_setopt+0x30>
   11ab4:	2e00      	cmp	r6, #0
   11ab6:	d0fa      	beq.n	11aae <logobj_interface_setopt+0x56>
   11ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11aba:	2b04      	cmp	r3, #4
   11abc:	d1f7      	bne.n	11aae <logobj_interface_setopt+0x56>
   11abe:	2100      	movs	r1, #0
   11ac0:	a803      	add	r0, sp, #12
   11ac2:	f7ff fd51 	bl	11568 <rpc_logobj_client_request_alloc>
   11ac6:	4605      	mov	r5, r0
   11ac8:	2800      	cmp	r0, #0
   11aca:	d16a      	bne.n	11ba2 <logobj_interface_setopt+0x14a>
   11acc:	9803      	ldr	r0, [sp, #12]
   11ace:	2208      	movs	r2, #8
   11ad0:	4629      	mov	r1, r5
   11ad2:	300c      	adds	r0, #12
   11ad4:	f00a f943 	bl	1bd5e <memset>
   11ad8:	9803      	ldr	r0, [sp, #12]
   11ada:	4631      	mov	r1, r6
   11adc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11ade:	300c      	adds	r0, #12
   11ae0:	f00a f913 	bl	1bd0a <memcpy>
   11ae4:	2308      	movs	r3, #8
   11ae6:	9803      	ldr	r0, [sp, #12]
   11ae8:	f247 0102 	movw	r1, #28674	; 0x7002
   11aec:	7203      	strb	r3, [r0, #8]
   11aee:	7245      	strb	r5, [r0, #9]
   11af0:	7285      	strb	r5, [r0, #10]
   11af2:	72c5      	strb	r5, [r0, #11]
   11af4:	6823      	ldr	r3, [r4, #0]
   11af6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   11afa:	6023      	str	r3, [r4, #0]
   11afc:	f7ff fd4c 	bl	11598 <rpc_logobj_client_request_send>
   11b00:	2800      	cmp	r0, #0
   11b02:	d151      	bne.n	11ba8 <logobj_interface_setopt+0x150>
   11b04:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   11b08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11b0c:	4611      	mov	r1, r2
   11b0e:	4638      	mov	r0, r7
   11b10:	f005 fea6 	bl	17860 <interface_socket_wait>
   11b14:	4605      	mov	r5, r0
   11b16:	2800      	cmp	r0, #0
   11b18:	d13b      	bne.n	11b92 <logobj_interface_setopt+0x13a>
   11b1a:	4638      	mov	r0, r7
   11b1c:	f005 ff14 	bl	17948 <interface_socket_from_handle_get>
   11b20:	2800      	cmp	r0, #0
   11b22:	d04f      	beq.n	11bc4 <logobj_interface_setopt+0x16c>
   11b24:	6843      	ldr	r3, [r0, #4]
   11b26:	2b00      	cmp	r3, #0
   11b28:	d04c      	beq.n	11bc4 <logobj_interface_setopt+0x16c>
   11b2a:	2200      	movs	r2, #0
   11b2c:	461d      	mov	r5, r3
   11b2e:	6042      	str	r2, [r0, #4]
   11b30:	e02f      	b.n	11b92 <logobj_interface_setopt+0x13a>
   11b32:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   11b34:	9400      	str	r4, [sp, #0]
   11b36:	f005 ff2f 	bl	17998 <interface_socket_setopt>
   11b3a:	4605      	mov	r5, r0
   11b3c:	4628      	mov	r0, r5
   11b3e:	b005      	add	sp, #20
   11b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11b42:	2100      	movs	r1, #0
   11b44:	a803      	add	r0, sp, #12
   11b46:	7835      	ldrb	r5, [r6, #0]
   11b48:	f7ff fd0e 	bl	11568 <rpc_logobj_client_request_alloc>
   11b4c:	bb48      	cbnz	r0, 11ba2 <logobj_interface_setopt+0x14a>
   11b4e:	2d01      	cmp	r5, #1
   11b50:	bf08      	it	eq
   11b52:	4b26      	ldreq	r3, [pc, #152]	; (11bec <logobj_interface_setopt+0x194>)
   11b54:	f04f 0204 	mov.w	r2, #4
   11b58:	bf08      	it	eq
   11b5a:	701d      	strbeq	r5, [r3, #0]
   11b5c:	2300      	movs	r3, #0
   11b5e:	9803      	ldr	r0, [sp, #12]
   11b60:	f247 0101 	movw	r1, #28673	; 0x7001
   11b64:	7243      	strb	r3, [r0, #9]
   11b66:	60c5      	str	r5, [r0, #12]
   11b68:	7283      	strb	r3, [r0, #10]
   11b6a:	72c3      	strb	r3, [r0, #11]
   11b6c:	7202      	strb	r2, [r0, #8]
   11b6e:	6823      	ldr	r3, [r4, #0]
   11b70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   11b74:	6023      	str	r3, [r4, #0]
   11b76:	f7ff fd0f 	bl	11598 <rpc_logobj_client_request_send>
   11b7a:	4606      	mov	r6, r0
   11b7c:	b9a0      	cbnz	r0, 11ba8 <logobj_interface_setopt+0x150>
   11b7e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   11b82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11b86:	4611      	mov	r1, r2
   11b88:	4638      	mov	r0, r7
   11b8a:	f005 fe69 	bl	17860 <interface_socket_wait>
   11b8e:	4605      	mov	r5, r0
   11b90:	b180      	cbz	r0, 11bb4 <logobj_interface_setopt+0x15c>
   11b92:	6823      	ldr	r3, [r4, #0]
   11b94:	e778      	b.n	11a88 <logobj_interface_setopt+0x30>
   11b96:	202a      	movs	r0, #42	; 0x2a
   11b98:	f7fd ff70 	bl	fa7c <bsd_os_errno_set>
   11b9c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   11ba0:	e77e      	b.n	11aa0 <logobj_interface_setopt+0x48>
   11ba2:	6823      	ldr	r3, [r4, #0]
   11ba4:	250c      	movs	r5, #12
   11ba6:	e76f      	b.n	11a88 <logobj_interface_setopt+0x30>
   11ba8:	9803      	ldr	r0, [sp, #12]
   11baa:	f7ff fd0b 	bl	115c4 <rpc_logobj_client_message_free>
   11bae:	2505      	movs	r5, #5
   11bb0:	6823      	ldr	r3, [r4, #0]
   11bb2:	e769      	b.n	11a88 <logobj_interface_setopt+0x30>
   11bb4:	4638      	mov	r0, r7
   11bb6:	f005 fec7 	bl	17948 <interface_socket_from_handle_get>
   11bba:	b140      	cbz	r0, 11bce <logobj_interface_setopt+0x176>
   11bbc:	6845      	ldr	r5, [r0, #4]
   11bbe:	b135      	cbz	r5, 11bce <logobj_interface_setopt+0x176>
   11bc0:	6046      	str	r6, [r0, #4]
   11bc2:	e7e6      	b.n	11b92 <logobj_interface_setopt+0x13a>
   11bc4:	4631      	mov	r1, r6
   11bc6:	2204      	movs	r2, #4
   11bc8:	4809      	ldr	r0, [pc, #36]	; (11bf0 <logobj_interface_setopt+0x198>)
   11bca:	f00a f89e 	bl	1bd0a <memcpy>
   11bce:	6823      	ldr	r3, [r4, #0]
   11bd0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   11bd4:	6023      	str	r3, [r4, #0]
   11bd6:	6823      	ldr	r3, [r4, #0]
   11bd8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   11bdc:	6023      	str	r3, [r4, #0]
   11bde:	e75f      	b.n	11aa0 <logobj_interface_setopt+0x48>
   11be0:	2009      	movs	r0, #9
   11be2:	f7fd ff4b 	bl	fa7c <bsd_os_errno_set>
   11be6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   11bea:	e759      	b.n	11aa0 <logobj_interface_setopt+0x48>
   11bec:	20022072 	.word	0x20022072
   11bf0:	20020cfc 	.word	0x20020cfc

00011bf4 <logobj_interface_getopt>:
   11bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   11bf6:	2901      	cmp	r1, #1
   11bf8:	b083      	sub	sp, #12
   11bfa:	9e08      	ldr	r6, [sp, #32]
   11bfc:	d030      	beq.n	11c60 <logobj_interface_getopt+0x6c>
   11bfe:	461f      	mov	r7, r3
   11c00:	f240 2305 	movw	r3, #517	; 0x205
   11c04:	4299      	cmp	r1, r3
   11c06:	d134      	bne.n	11c72 <logobj_interface_getopt+0x7e>
   11c08:	4615      	mov	r5, r2
   11c0a:	f005 fe9d 	bl	17948 <interface_socket_from_handle_get>
   11c0e:	2800      	cmp	r0, #0
   11c10:	d037      	beq.n	11c82 <logobj_interface_getopt+0x8e>
   11c12:	2d01      	cmp	r5, #1
   11c14:	d015      	beq.n	11c42 <logobj_interface_getopt+0x4e>
   11c16:	2d02      	cmp	r5, #2
   11c18:	d10b      	bne.n	11c32 <logobj_interface_getopt+0x3e>
   11c1a:	b387      	cbz	r7, 11c7e <logobj_interface_getopt+0x8a>
   11c1c:	6833      	ldr	r3, [r6, #0]
   11c1e:	b373      	cbz	r3, 11c7e <logobj_interface_getopt+0x8a>
   11c20:	2300      	movs	r3, #0
   11c22:	2201      	movs	r2, #1
   11c24:	4618      	mov	r0, r3
   11c26:	491a      	ldr	r1, [pc, #104]	; (11c90 <logobj_interface_getopt+0x9c>)
   11c28:	7809      	ldrb	r1, [r1, #0]
   11c2a:	7039      	strb	r1, [r7, #0]
   11c2c:	6032      	str	r2, [r6, #0]
   11c2e:	b003      	add	sp, #12
   11c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11c32:	2009      	movs	r0, #9
   11c34:	f7fd ff22 	bl	fa7c <bsd_os_errno_set>
   11c38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11c3c:	4618      	mov	r0, r3
   11c3e:	b003      	add	sp, #12
   11c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11c42:	b1e7      	cbz	r7, 11c7e <logobj_interface_getopt+0x8a>
   11c44:	6833      	ldr	r3, [r6, #0]
   11c46:	2b03      	cmp	r3, #3
   11c48:	d919      	bls.n	11c7e <logobj_interface_getopt+0x8a>
   11c4a:	4638      	mov	r0, r7
   11c4c:	2204      	movs	r2, #4
   11c4e:	4911      	ldr	r1, [pc, #68]	; (11c94 <logobj_interface_getopt+0xa0>)
   11c50:	f00a f85b 	bl	1bd0a <memcpy>
   11c54:	2300      	movs	r3, #0
   11c56:	2204      	movs	r2, #4
   11c58:	4618      	mov	r0, r3
   11c5a:	6032      	str	r2, [r6, #0]
   11c5c:	b003      	add	sp, #12
   11c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11c60:	9600      	str	r6, [sp, #0]
   11c62:	f005 fecf 	bl	17a04 <interface_socket_getopt>
   11c66:	4603      	mov	r3, r0
   11c68:	2800      	cmp	r0, #0
   11c6a:	d1e3      	bne.n	11c34 <logobj_interface_getopt+0x40>
   11c6c:	4618      	mov	r0, r3
   11c6e:	b003      	add	sp, #12
   11c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11c72:	202a      	movs	r0, #42	; 0x2a
   11c74:	f7fd ff02 	bl	fa7c <bsd_os_errno_set>
   11c78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11c7c:	e7de      	b.n	11c3c <logobj_interface_getopt+0x48>
   11c7e:	2016      	movs	r0, #22
   11c80:	e7d8      	b.n	11c34 <logobj_interface_getopt+0x40>
   11c82:	2009      	movs	r0, #9
   11c84:	f7fd fefa 	bl	fa7c <bsd_os_errno_set>
   11c88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11c8c:	e7d6      	b.n	11c3c <logobj_interface_getopt+0x48>
   11c8e:	bf00      	nop
   11c90:	20022073 	.word	0x20022073
   11c94:	20020cfc 	.word	0x20020cfc

00011c98 <logobj_interface_close>:
   11c98:	b510      	push	{r4, lr}
   11c9a:	4604      	mov	r4, r0
   11c9c:	f005 fe54 	bl	17948 <interface_socket_from_handle_get>
   11ca0:	b138      	cbz	r0, 11cb2 <logobj_interface_close+0x1a>
   11ca2:	4620      	mov	r0, r4
   11ca4:	f005 fd8e 	bl	177c4 <interface_socket_free>
   11ca8:	2300      	movs	r3, #0
   11caa:	4a05      	ldr	r2, [pc, #20]	; (11cc0 <logobj_interface_close+0x28>)
   11cac:	4618      	mov	r0, r3
   11cae:	6013      	str	r3, [r2, #0]
   11cb0:	bd10      	pop	{r4, pc}
   11cb2:	2009      	movs	r0, #9
   11cb4:	f7fd fee2 	bl	fa7c <bsd_os_errno_set>
   11cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11cbc:	bd10      	pop	{r4, pc}
   11cbe:	bf00      	nop
   11cc0:	20020d00 	.word	0x20020d00

00011cc4 <packet_free_cb>:
   11cc4:	6800      	ldr	r0, [r0, #0]
   11cc6:	f004 b9dd 	b.w	16084 <rpc_at_client_data_free>
   11cca:	bf00      	nop

00011ccc <at_interface_write>:
   11ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
   11cce:	b083      	sub	sp, #12
   11cd0:	460f      	mov	r7, r1
   11cd2:	4615      	mov	r5, r2
   11cd4:	4606      	mov	r6, r0
   11cd6:	f005 fe37 	bl	17948 <interface_socket_from_handle_get>
   11cda:	2800      	cmp	r0, #0
   11cdc:	d047      	beq.n	11d6e <at_interface_write+0xa2>
   11cde:	6803      	ldr	r3, [r0, #0]
   11ce0:	4604      	mov	r4, r0
   11ce2:	039b      	lsls	r3, r3, #14
   11ce4:	d543      	bpl.n	11d6e <at_interface_write+0xa2>
   11ce6:	6803      	ldr	r3, [r0, #0]
   11ce8:	4629      	mov	r1, r5
   11cea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   11cee:	6003      	str	r3, [r0, #0]
   11cf0:	6803      	ldr	r3, [r0, #0]
   11cf2:	a801      	add	r0, sp, #4
   11cf4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   11cf8:	6023      	str	r3, [r4, #0]
   11cfa:	f004 f999 	bl	16030 <rpc_at_client_request_alloc>
   11cfe:	bba0      	cbnz	r0, 11d6a <at_interface_write+0x9e>
   11d00:	2204      	movs	r2, #4
   11d02:	9b01      	ldr	r3, [sp, #4]
   11d04:	721a      	strb	r2, [r3, #8]
   11d06:	7258      	strb	r0, [r3, #9]
   11d08:	7298      	strb	r0, [r3, #10]
   11d0a:	72d8      	strb	r0, [r3, #11]
   11d0c:	60de      	str	r6, [r3, #12]
   11d0e:	b985      	cbnz	r5, 11d32 <at_interface_write+0x66>
   11d10:	4618      	mov	r0, r3
   11d12:	2101      	movs	r1, #1
   11d14:	f004 f9a0 	bl	16058 <rpc_at_client_request_send>
   11d18:	b9d0      	cbnz	r0, 11d50 <at_interface_write+0x84>
   11d1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   11d1e:	4630      	mov	r0, r6
   11d20:	4611      	mov	r1, r2
   11d22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11d26:	f005 fd9b 	bl	17860 <interface_socket_wait>
   11d2a:	b9a8      	cbnz	r0, 11d58 <at_interface_write+0x8c>
   11d2c:	4628      	mov	r0, r5
   11d2e:	b003      	add	sp, #12
   11d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11d32:	4639      	mov	r1, r7
   11d34:	6818      	ldr	r0, [r3, #0]
   11d36:	462a      	mov	r2, r5
   11d38:	f009 ffe7 	bl	1bd0a <memcpy>
   11d3c:	2101      	movs	r1, #1
   11d3e:	9801      	ldr	r0, [sp, #4]
   11d40:	f004 f98a 	bl	16058 <rpc_at_client_request_send>
   11d44:	2800      	cmp	r0, #0
   11d46:	d0e8      	beq.n	11d1a <at_interface_write+0x4e>
   11d48:	9b01      	ldr	r3, [sp, #4]
   11d4a:	6818      	ldr	r0, [r3, #0]
   11d4c:	f004 f99a 	bl	16084 <rpc_at_client_data_free>
   11d50:	9801      	ldr	r0, [sp, #4]
   11d52:	f004 f98f 	bl	16074 <rpc_at_client_message_free>
   11d56:	2023      	movs	r0, #35	; 0x23
   11d58:	6823      	ldr	r3, [r4, #0]
   11d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   11d5e:	6023      	str	r3, [r4, #0]
   11d60:	f7fd fe8c 	bl	fa7c <bsd_os_errno_set>
   11d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11d68:	e7e1      	b.n	11d2e <at_interface_write+0x62>
   11d6a:	200c      	movs	r0, #12
   11d6c:	e7f4      	b.n	11d58 <at_interface_write+0x8c>
   11d6e:	2016      	movs	r0, #22
   11d70:	e7f6      	b.n	11d60 <at_interface_write+0x94>
   11d72:	bf00      	nop

00011d74 <at_interface_init>:
   11d74:	f004 b956 	b.w	16024 <rpc_at_client_init>

00011d78 <at_interface_open>:
   11d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11d7c:	2500      	movs	r5, #0
   11d7e:	b082      	sub	sp, #8
   11d80:	ab02      	add	r3, sp, #8
   11d82:	f843 5d08 	str.w	r5, [r3, #-8]!
   11d86:	4680      	mov	r8, r0
   11d88:	460f      	mov	r7, r1
   11d8a:	4618      	mov	r0, r3
   11d8c:	4616      	mov	r6, r2
   11d8e:	2102      	movs	r1, #2
   11d90:	4a1d      	ldr	r2, [pc, #116]	; (11e08 <at_interface_open+0x90>)
   11d92:	f005 fcb9 	bl	17708 <interface_socket_allocate>
   11d96:	9b00      	ldr	r3, [sp, #0]
   11d98:	4604      	mov	r4, r0
   11d9a:	b30b      	cbz	r3, 11de0 <at_interface_open+0x68>
   11d9c:	e9c3 8703 	strd	r8, r7, [r3, #12]
   11da0:	615e      	str	r6, [r3, #20]
   11da2:	4629      	mov	r1, r5
   11da4:	a801      	add	r0, sp, #4
   11da6:	f004 f943 	bl	16030 <rpc_at_client_request_alloc>
   11daa:	b9e8      	cbnz	r0, 11de8 <at_interface_open+0x70>
   11dac:	2204      	movs	r2, #4
   11dae:	9b01      	ldr	r3, [sp, #4]
   11db0:	2105      	movs	r1, #5
   11db2:	7258      	strb	r0, [r3, #9]
   11db4:	7298      	strb	r0, [r3, #10]
   11db6:	72d8      	strb	r0, [r3, #11]
   11db8:	721a      	strb	r2, [r3, #8]
   11dba:	60dc      	str	r4, [r3, #12]
   11dbc:	4618      	mov	r0, r3
   11dbe:	f004 f94b 	bl	16058 <rpc_at_client_request_send>
   11dc2:	b9d8      	cbnz	r0, 11dfc <at_interface_open+0x84>
   11dc4:	2202      	movs	r2, #2
   11dc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11dca:	4611      	mov	r1, r2
   11dcc:	4620      	mov	r0, r4
   11dce:	f005 fd47 	bl	17860 <interface_socket_wait>
   11dd2:	4605      	mov	r5, r0
   11dd4:	b948      	cbnz	r0, 11dea <at_interface_open+0x72>
   11dd6:	9a00      	ldr	r2, [sp, #0]
   11dd8:	6813      	ldr	r3, [r2, #0]
   11dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   11dde:	6013      	str	r3, [r2, #0]
   11de0:	4620      	mov	r0, r4
   11de2:	b002      	add	sp, #8
   11de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11de8:	250c      	movs	r5, #12
   11dea:	4620      	mov	r0, r4
   11dec:	f005 fcea 	bl	177c4 <interface_socket_free>
   11df0:	4628      	mov	r0, r5
   11df2:	f7fd fe43 	bl	fa7c <bsd_os_errno_set>
   11df6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11dfa:	e7f1      	b.n	11de0 <at_interface_open+0x68>
   11dfc:	9801      	ldr	r0, [sp, #4]
   11dfe:	f004 f939 	bl	16074 <rpc_at_client_message_free>
   11e02:	2523      	movs	r5, #35	; 0x23
   11e04:	e7f1      	b.n	11dea <at_interface_open+0x72>
   11e06:	bf00      	nop
   11e08:	00011cc5 	.word	0x00011cc5

00011e0c <at_interface_close>:
   11e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11e0e:	b083      	sub	sp, #12
   11e10:	4606      	mov	r6, r0
   11e12:	f005 fd99 	bl	17948 <interface_socket_from_handle_get>
   11e16:	2800      	cmp	r0, #0
   11e18:	d03d      	beq.n	11e96 <at_interface_close+0x8a>
   11e1a:	230d      	movs	r3, #13
   11e1c:	6807      	ldr	r7, [r0, #0]
   11e1e:	6003      	str	r3, [r0, #0]
   11e20:	6803      	ldr	r3, [r0, #0]
   11e22:	4604      	mov	r4, r0
   11e24:	039b      	lsls	r3, r3, #14
   11e26:	d41f      	bmi.n	11e68 <at_interface_close+0x5c>
   11e28:	2100      	movs	r1, #0
   11e2a:	a801      	add	r0, sp, #4
   11e2c:	f004 f900 	bl	16030 <rpc_at_client_request_alloc>
   11e30:	bb20      	cbnz	r0, 11e7c <at_interface_close+0x70>
   11e32:	2204      	movs	r2, #4
   11e34:	9b01      	ldr	r3, [sp, #4]
   11e36:	2106      	movs	r1, #6
   11e38:	7258      	strb	r0, [r3, #9]
   11e3a:	7298      	strb	r0, [r3, #10]
   11e3c:	72d8      	strb	r0, [r3, #11]
   11e3e:	721a      	strb	r2, [r3, #8]
   11e40:	60de      	str	r6, [r3, #12]
   11e42:	4618      	mov	r0, r3
   11e44:	f004 f908 	bl	16058 <rpc_at_client_request_send>
   11e48:	b9d0      	cbnz	r0, 11e80 <at_interface_close+0x74>
   11e4a:	220e      	movs	r2, #14
   11e4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11e50:	4611      	mov	r1, r2
   11e52:	4630      	mov	r0, r6
   11e54:	f005 fd04 	bl	17860 <interface_socket_wait>
   11e58:	4605      	mov	r5, r0
   11e5a:	b9a8      	cbnz	r0, 11e88 <at_interface_close+0x7c>
   11e5c:	4630      	mov	r0, r6
   11e5e:	f005 fcb1 	bl	177c4 <interface_socket_free>
   11e62:	4628      	mov	r0, r5
   11e64:	b003      	add	sp, #12
   11e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11e68:	6803      	ldr	r3, [r0, #0]
   11e6a:	2100      	movs	r1, #0
   11e6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   11e70:	6003      	str	r3, [r0, #0]
   11e72:	a801      	add	r0, sp, #4
   11e74:	f004 f8dc 	bl	16030 <rpc_at_client_request_alloc>
   11e78:	2800      	cmp	r0, #0
   11e7a:	d0da      	beq.n	11e32 <at_interface_close+0x26>
   11e7c:	250c      	movs	r5, #12
   11e7e:	e003      	b.n	11e88 <at_interface_close+0x7c>
   11e80:	9801      	ldr	r0, [sp, #4]
   11e82:	f004 f8f7 	bl	16074 <rpc_at_client_message_free>
   11e86:	2523      	movs	r5, #35	; 0x23
   11e88:	6027      	str	r7, [r4, #0]
   11e8a:	4628      	mov	r0, r5
   11e8c:	f7fd fdf6 	bl	fa7c <bsd_os_errno_set>
   11e90:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   11e94:	e7e5      	b.n	11e62 <at_interface_close+0x56>
   11e96:	2516      	movs	r5, #22
   11e98:	e7f7      	b.n	11e8a <at_interface_close+0x7e>
   11e9a:	bf00      	nop

00011e9c <at_interface_read>:
   11e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11ea0:	b084      	sub	sp, #16
   11ea2:	4688      	mov	r8, r1
   11ea4:	4615      	mov	r5, r2
   11ea6:	461e      	mov	r6, r3
   11ea8:	4607      	mov	r7, r0
   11eaa:	f005 fd4d 	bl	17948 <interface_socket_from_handle_get>
   11eae:	2800      	cmp	r0, #0
   11eb0:	d049      	beq.n	11f46 <at_interface_read+0xaa>
   11eb2:	2300      	movs	r3, #0
   11eb4:	e9cd 8500 	strd	r8, r5, [sp]
   11eb8:	f016 0502 	ands.w	r5, r6, #2
   11ebc:	4604      	mov	r4, r0
   11ebe:	e9cd 3302 	strd	r3, r3, [sp, #8]
   11ec2:	d00e      	beq.n	11ee2 <at_interface_read+0x46>
   11ec4:	e01e      	b.n	11f04 <at_interface_read+0x68>
   11ec6:	2d00      	cmp	r5, #0
   11ec8:	d133      	bne.n	11f32 <at_interface_read+0x96>
   11eca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   11ece:	6a23      	ldr	r3, [r4, #32]
   11ed0:	4611      	mov	r1, r2
   11ed2:	2b00      	cmp	r3, #0
   11ed4:	bf08      	it	eq
   11ed6:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   11eda:	4638      	mov	r0, r7
   11edc:	f005 fcc0 	bl	17860 <interface_socket_wait>
   11ee0:	4605      	mov	r5, r0
   11ee2:	6823      	ldr	r3, [r4, #0]
   11ee4:	69e0      	ldr	r0, [r4, #28]
   11ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   11eea:	6023      	str	r3, [r4, #0]
   11eec:	6803      	ldr	r3, [r0, #0]
   11eee:	4632      	mov	r2, r6
   11ef0:	689b      	ldr	r3, [r3, #8]
   11ef2:	4669      	mov	r1, sp
   11ef4:	4798      	blx	r3
   11ef6:	f1b0 0800 	subs.w	r8, r0, #0
   11efa:	dbe4      	blt.n	11ec6 <at_interface_read+0x2a>
   11efc:	4640      	mov	r0, r8
   11efe:	b004      	add	sp, #16
   11f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11f04:	6803      	ldr	r3, [r0, #0]
   11f06:	69c0      	ldr	r0, [r0, #28]
   11f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   11f0c:	6023      	str	r3, [r4, #0]
   11f0e:	6803      	ldr	r3, [r0, #0]
   11f10:	4632      	mov	r2, r6
   11f12:	689b      	ldr	r3, [r3, #8]
   11f14:	4669      	mov	r1, sp
   11f16:	4798      	blx	r3
   11f18:	f1b0 0800 	subs.w	r8, r0, #0
   11f1c:	daee      	bge.n	11efc <at_interface_read+0x60>
   11f1e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   11f22:	d1eb      	bne.n	11efc <at_interface_read+0x60>
   11f24:	2023      	movs	r0, #35	; 0x23
   11f26:	f7fd fda9 	bl	fa7c <bsd_os_errno_set>
   11f2a:	4640      	mov	r0, r8
   11f2c:	b004      	add	sp, #16
   11f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11f32:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   11f36:	d1e1      	bne.n	11efc <at_interface_read+0x60>
   11f38:	4628      	mov	r0, r5
   11f3a:	f7fd fd9f 	bl	fa7c <bsd_os_errno_set>
   11f3e:	4640      	mov	r0, r8
   11f40:	b004      	add	sp, #16
   11f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11f46:	2016      	movs	r0, #22
   11f48:	f7fd fd98 	bl	fa7c <bsd_os_errno_set>
   11f4c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   11f50:	e7d4      	b.n	11efc <at_interface_read+0x60>
   11f52:	bf00      	nop

00011f54 <at_interface_getopt>:
   11f54:	f005 bd56 	b.w	17a04 <interface_socket_getopt>

00011f58 <at_interface_setopt>:
   11f58:	f005 bd1e 	b.w	17998 <interface_socket_setopt>

00011f5c <rpc_at_event_handler>:
   11f5c:	b570      	push	{r4, r5, r6, lr}
   11f5e:	4606      	mov	r6, r0
   11f60:	b084      	sub	sp, #16
   11f62:	68c0      	ldr	r0, [r0, #12]
   11f64:	460d      	mov	r5, r1
   11f66:	f005 fcef 	bl	17948 <interface_socket_from_handle_get>
   11f6a:	4604      	mov	r4, r0
   11f6c:	b348      	cbz	r0, 11fc2 <rpc_at_event_handler+0x66>
   11f6e:	6803      	ldr	r3, [r0, #0]
   11f70:	b29b      	uxth	r3, r3
   11f72:	2b01      	cmp	r3, #1
   11f74:	d01f      	beq.n	11fb6 <rpc_at_event_handler+0x5a>
   11f76:	6803      	ldr	r3, [r0, #0]
   11f78:	b29b      	uxth	r3, r3
   11f7a:	2b0d      	cmp	r3, #13
   11f7c:	d029      	beq.n	11fd2 <rpc_at_event_handler+0x76>
   11f7e:	6803      	ldr	r3, [r0, #0]
   11f80:	b29b      	uxth	r3, r3
   11f82:	2b02      	cmp	r3, #2
   11f84:	d02d      	beq.n	11fe2 <rpc_at_event_handler+0x86>
   11f86:	3d03      	subs	r5, #3
   11f88:	2d01      	cmp	r5, #1
   11f8a:	d817      	bhi.n	11fbc <rpc_at_event_handler+0x60>
   11f8c:	2500      	movs	r5, #0
   11f8e:	6873      	ldr	r3, [r6, #4]
   11f90:	6832      	ldr	r2, [r6, #0]
   11f92:	e9cd 5502 	strd	r5, r5, [sp, #8]
   11f96:	e9cd 2300 	strd	r2, r3, [sp]
   11f9a:	69e0      	ldr	r0, [r4, #28]
   11f9c:	4669      	mov	r1, sp
   11f9e:	6803      	ldr	r3, [r0, #0]
   11fa0:	685b      	ldr	r3, [r3, #4]
   11fa2:	4798      	blx	r3
   11fa4:	3001      	adds	r0, #1
   11fa6:	d019      	beq.n	11fdc <rpc_at_event_handler+0x80>
   11fa8:	4628      	mov	r0, r5
   11faa:	6823      	ldr	r3, [r4, #0]
   11fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   11fb0:	6023      	str	r3, [r4, #0]
   11fb2:	b004      	add	sp, #16
   11fb4:	bd70      	pop	{r4, r5, r6, pc}
   11fb6:	2d02      	cmp	r5, #2
   11fb8:	d1e5      	bne.n	11f86 <rpc_at_event_handler+0x2a>
   11fba:	6005      	str	r5, [r0, #0]
   11fbc:	2000      	movs	r0, #0
   11fbe:	b004      	add	sp, #16
   11fc0:	bd70      	pop	{r4, r5, r6, pc}
   11fc2:	6830      	ldr	r0, [r6, #0]
   11fc4:	2800      	cmp	r0, #0
   11fc6:	d0f9      	beq.n	11fbc <rpc_at_event_handler+0x60>
   11fc8:	f004 f85c 	bl	16084 <rpc_at_client_data_free>
   11fcc:	4620      	mov	r0, r4
   11fce:	b004      	add	sp, #16
   11fd0:	bd70      	pop	{r4, r5, r6, pc}
   11fd2:	2d02      	cmp	r5, #2
   11fd4:	d1d7      	bne.n	11f86 <rpc_at_event_handler+0x2a>
   11fd6:	230e      	movs	r3, #14
   11fd8:	6003      	str	r3, [r0, #0]
   11fda:	e7ef      	b.n	11fbc <rpc_at_event_handler+0x60>
   11fdc:	2002      	movs	r0, #2
   11fde:	b004      	add	sp, #16
   11fe0:	bd70      	pop	{r4, r5, r6, pc}
   11fe2:	6803      	ldr	r3, [r0, #0]
   11fe4:	029b      	lsls	r3, r3, #10
   11fe6:	d5ce      	bpl.n	11f86 <rpc_at_event_handler+0x2a>
   11fe8:	2d02      	cmp	r5, #2
   11fea:	d1cc      	bne.n	11f86 <rpc_at_event_handler+0x2a>
   11fec:	6803      	ldr	r3, [r0, #0]
   11fee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   11ff2:	6003      	str	r3, [r0, #0]
   11ff4:	6803      	ldr	r3, [r0, #0]
   11ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   11ffa:	6003      	str	r3, [r0, #0]
   11ffc:	e7de      	b.n	11fbc <rpc_at_event_handler+0x60>
   11ffe:	bf00      	nop

00012000 <dfu_client_event_handler>:
   12000:	f850 1b08 	ldr.w	r1, [r0], #8
   12004:	0c09      	lsrs	r1, r1, #16
   12006:	f001 b92f 	b.w	13268 <rpc_dfu_event_handler>
   1200a:	bf00      	nop

0001200c <rpc_dfu_client_init>:
   1200c:	4801      	ldr	r0, [pc, #4]	; (12014 <rpc_dfu_client_init+0x8>)
   1200e:	f005 bdcb 	b.w	17ba8 <rpc_client_register>
   12012:	bf00      	nop
   12014:	0001e394 	.word	0x0001e394

00012018 <rpc_dfu_client_request_alloc>:
   12018:	2300      	movs	r3, #0
   1201a:	b510      	push	{r4, lr}
   1201c:	b082      	sub	sp, #8
   1201e:	9301      	str	r3, [sp, #4]
   12020:	b158      	cbz	r0, 1203a <rpc_dfu_client_request_alloc+0x22>
   12022:	4604      	mov	r4, r0
   12024:	aa01      	add	r2, sp, #4
   12026:	2006      	movs	r0, #6
   12028:	f005 fff6 	bl	18018 <rpc_message_alloc>
   1202c:	b918      	cbnz	r0, 12036 <rpc_dfu_client_request_alloc+0x1e>
   1202e:	9b01      	ldr	r3, [sp, #4]
   12030:	b10b      	cbz	r3, 12036 <rpc_dfu_client_request_alloc+0x1e>
   12032:	3308      	adds	r3, #8
   12034:	6023      	str	r3, [r4, #0]
   12036:	b002      	add	sp, #8
   12038:	bd10      	pop	{r4, pc}
   1203a:	2007      	movs	r0, #7
   1203c:	b002      	add	sp, #8
   1203e:	bd10      	pop	{r4, pc}

00012040 <rpc_dfu_client_request_send>:
   12040:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   12044:	d10b      	bne.n	1205e <rpc_dfu_client_request_send+0x1e>
   12046:	b160      	cbz	r0, 12062 <rpc_dfu_client_request_send+0x22>
   12048:	4603      	mov	r3, r0
   1204a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1204e:	2006      	movs	r0, #6
   12050:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   12054:	f843 1d08 	str.w	r1, [r3, #-8]!
   12058:	4619      	mov	r1, r3
   1205a:	f005 bfc5 	b.w	17fe8 <rpc_message_send>
   1205e:	200f      	movs	r0, #15
   12060:	4770      	bx	lr
   12062:	2007      	movs	r0, #7
   12064:	4770      	bx	lr
   12066:	bf00      	nop

00012068 <rpc_dfu_client_message_free>:
   12068:	b120      	cbz	r0, 12074 <rpc_dfu_client_message_free+0xc>
   1206a:	f1a0 0108 	sub.w	r1, r0, #8
   1206e:	2006      	movs	r0, #6
   12070:	f006 b804 	b.w	1807c <rpc_message_free>
   12074:	2007      	movs	r0, #7
   12076:	4770      	bx	lr

00012078 <rpc_dfu_client_data_free>:
   12078:	b118      	cbz	r0, 12082 <rpc_dfu_client_data_free+0xa>
   1207a:	4601      	mov	r1, r0
   1207c:	2006      	movs	r0, #6
   1207e:	f006 b90f 	b.w	182a0 <rpc_message_data_free>
   12082:	2007      	movs	r0, #7
   12084:	4770      	bx	lr
   12086:	bf00      	nop

00012088 <mem_free>:
   12088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1208c:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1215c <mem_free+0xd4>
   12090:	b083      	sub	sp, #12
   12092:	9000      	str	r0, [sp, #0]
   12094:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   12098:	f8dc 3008 	ldr.w	r3, [ip, #8]
   1209c:	b12b      	cbz	r3, 120aa <mem_free+0x22>
   1209e:	f8dc 2000 	ldr.w	r2, [ip]
   120a2:	9c00      	ldr	r4, [sp, #0]
   120a4:	7810      	ldrb	r0, [r2, #0]
   120a6:	42a0      	cmp	r0, r4
   120a8:	d006      	beq.n	120b8 <mem_free+0x30>
   120aa:	f10c 0c0c 	add.w	ip, ip, #12
   120ae:	45e3      	cmp	fp, ip
   120b0:	d1f2      	bne.n	12098 <mem_free+0x10>
   120b2:	b003      	add	sp, #12
   120b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120b8:	f8dc a004 	ldr.w	sl, [ip, #4]
   120bc:	eb03 080a 	add.w	r8, r3, sl
   120c0:	45c2      	cmp	sl, r8
   120c2:	d2f2      	bcs.n	120aa <mem_free+0x22>
   120c4:	6853      	ldr	r3, [r2, #4]
   120c6:	f8cd c004 	str.w	ip, [sp, #4]
   120ca:	46d6      	mov	lr, sl
   120cc:	469c      	mov	ip, r3
   120ce:	f8d2 9010 	ldr.w	r9, [r2, #16]
   120d2:	8997      	ldrh	r7, [r2, #12]
   120d4:	ebae 000a 	sub.w	r0, lr, sl
   120d8:	b3df      	cbz	r7, 12152 <mem_free+0xca>
   120da:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   120de:	4290      	cmp	r0, r2
   120e0:	d31c      	bcc.n	1211c <mem_free+0x94>
   120e2:	4665      	mov	r5, ip
   120e4:	2400      	movs	r4, #0
   120e6:	f109 0304 	add.w	r3, r9, #4
   120ea:	e003      	b.n	120f4 <mem_free+0x6c>
   120ec:	885a      	ldrh	r2, [r3, #2]
   120ee:	3304      	adds	r3, #4
   120f0:	4282      	cmp	r2, r0
   120f2:	d815      	bhi.n	12120 <mem_free+0x98>
   120f4:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   120f8:	3401      	adds	r4, #1
   120fa:	42a7      	cmp	r7, r4
   120fc:	fb02 5506 	mla	r5, r2, r6, r5
   12100:	eba0 0002 	sub.w	r0, r0, r2
   12104:	461e      	mov	r6, r3
   12106:	d1f1      	bne.n	120ec <mem_free+0x64>
   12108:	2000      	movs	r0, #0
   1210a:	4281      	cmp	r1, r0
   1210c:	d00d      	beq.n	1212a <mem_free+0xa2>
   1210e:	f10e 0e01 	add.w	lr, lr, #1
   12112:	45f0      	cmp	r8, lr
   12114:	d1de      	bne.n	120d4 <mem_free+0x4c>
   12116:	f8dd c004 	ldr.w	ip, [sp, #4]
   1211a:	e7c6      	b.n	120aa <mem_free+0x22>
   1211c:	4665      	mov	r5, ip
   1211e:	464e      	mov	r6, r9
   12120:	8833      	ldrh	r3, [r6, #0]
   12122:	fb00 5003 	mla	r0, r0, r3, r5
   12126:	4281      	cmp	r1, r0
   12128:	d1f1      	bne.n	1210e <mem_free+0x86>
   1212a:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   1212e:	f8dd c004 	ldr.w	ip, [sp, #4]
   12132:	d0ba      	beq.n	120aa <mem_free+0x22>
   12134:	2301      	movs	r3, #1
   12136:	4a08      	ldr	r2, [pc, #32]	; (12158 <mem_free+0xd0>)
   12138:	ea4f 115e 	mov.w	r1, lr, lsr #5
   1213c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   12140:	f00e 0e1f 	and.w	lr, lr, #31
   12144:	fa03 fe0e 	lsl.w	lr, r3, lr
   12148:	ea4e 0000 	orr.w	r0, lr, r0
   1214c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   12150:	e7af      	b.n	120b2 <mem_free+0x2a>
   12152:	4638      	mov	r0, r7
   12154:	e7d9      	b.n	1210a <mem_free+0x82>
   12156:	bf00      	nop
   12158:	20020d04 	.word	0x20020d04
   1215c:	20020d48 	.word	0x20020d48

00012160 <mem_alloc.constprop.5>:
   12160:	2800      	cmp	r0, #0
   12162:	d050      	beq.n	12206 <mem_alloc.constprop.5+0xa6>
   12164:	4b6d      	ldr	r3, [pc, #436]	; (1231c <mem_alloc.constprop.5+0x1bc>)
   12166:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1216a:	4290      	cmp	r0, r2
   1216c:	d84b      	bhi.n	12206 <mem_alloc.constprop.5+0xa6>
   1216e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12172:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   12176:	b083      	sub	sp, #12
   12178:	f1bb 0f00 	cmp.w	fp, #0
   1217c:	d054      	beq.n	12228 <mem_alloc.constprop.5+0xc8>
   1217e:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   12182:	4691      	mov	r9, r2
   12184:	2600      	movs	r6, #0
   12186:	f04f 0812 	mov.w	r8, #18
   1218a:	4f65      	ldr	r7, [pc, #404]	; (12320 <mem_alloc.constprop.5+0x1c0>)
   1218c:	9201      	str	r2, [sp, #4]
   1218e:	f10b 0e11 	add.w	lr, fp, #17
   12192:	eb06 0209 	add.w	r2, r6, r9
   12196:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   1219a:	3201      	adds	r2, #1
   1219c:	0852      	lsrs	r2, r2, #1
   1219e:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   121a2:	f102 0112 	add.w	r1, r2, #18
   121a6:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   121aa:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   121ae:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   121b2:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   121b6:	f8dc c004 	ldr.w	ip, [ip, #4]
   121ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   121be:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   121c2:	f8da a010 	ldr.w	sl, [sl, #16]
   121c6:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   121ca:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   121ce:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   121d2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   121d6:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   121da:	6849      	ldr	r1, [r1, #4]
   121dc:	692d      	ldr	r5, [r5, #16]
   121de:	6924      	ldr	r4, [r4, #16]
   121e0:	f8dc c004 	ldr.w	ip, [ip, #4]
   121e4:	4550      	cmp	r0, sl
   121e6:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   121ea:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   121ee:	d915      	bls.n	1221c <mem_alloc.constprop.5+0xbc>
   121f0:	4288      	cmp	r0, r1
   121f2:	d211      	bcs.n	12218 <mem_alloc.constprop.5+0xb8>
   121f4:	42a8      	cmp	r0, r5
   121f6:	d908      	bls.n	1220a <mem_alloc.constprop.5+0xaa>
   121f8:	1c56      	adds	r6, r2, #1
   121fa:	45b1      	cmp	r9, r6
   121fc:	f0c0 8087 	bcc.w	1230e <mem_alloc.constprop.5+0x1ae>
   12200:	f102 0813 	add.w	r8, r2, #19
   12204:	e7c5      	b.n	12192 <mem_alloc.constprop.5+0x32>
   12206:	2000      	movs	r0, #0
   12208:	4770      	bx	lr
   1220a:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   1220e:	454e      	cmp	r6, r9
   12210:	d87d      	bhi.n	1230e <mem_alloc.constprop.5+0x1ae>
   12212:	f102 0e11 	add.w	lr, r2, #17
   12216:	e7bc      	b.n	12192 <mem_alloc.constprop.5+0x32>
   12218:	f109 0601 	add.w	r6, r9, #1
   1221c:	45b3      	cmp	fp, r6
   1221e:	d007      	beq.n	12230 <mem_alloc.constprop.5+0xd0>
   12220:	2e10      	cmp	r6, #16
   12222:	d001      	beq.n	12228 <mem_alloc.constprop.5+0xc8>
   12224:	45b3      	cmp	fp, r6
   12226:	d808      	bhi.n	1223a <mem_alloc.constprop.5+0xda>
   12228:	2000      	movs	r0, #0
   1222a:	b003      	add	sp, #12
   1222c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12230:	9a01      	ldr	r2, [sp, #4]
   12232:	2a10      	cmp	r2, #16
   12234:	bf18      	it	ne
   12236:	4616      	movne	r6, r2
   12238:	d0f6      	beq.n	12228 <mem_alloc.constprop.5+0xc8>
   1223a:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 12324 <mem_alloc.constprop.5+0x1c4>
   1223e:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   12242:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   12246:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1224a:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   1224e:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   12252:	f8d2 e004 	ldr.w	lr, [r2, #4]
   12256:	691d      	ldr	r5, [r3, #16]
   12258:	2c00      	cmp	r4, #0
   1225a:	d056      	beq.n	1230a <mem_alloc.constprop.5+0x1aa>
   1225c:	462a      	mov	r2, r5
   1225e:	4670      	mov	r0, lr
   12260:	00a4      	lsls	r4, r4, #2
   12262:	eb05 0904 	add.w	r9, r5, r4
   12266:	8851      	ldrh	r1, [r2, #2]
   12268:	3204      	adds	r2, #4
   1226a:	4591      	cmp	r9, r2
   1226c:	4408      	add	r0, r1
   1226e:	d1fa      	bne.n	12266 <mem_alloc.constprop.5+0x106>
   12270:	1929      	adds	r1, r5, r4
   12272:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   12276:	4482      	add	sl, r0
   12278:	4582      	cmp	sl, r0
   1227a:	d918      	bls.n	122ae <mem_alloc.constprop.5+0x14e>
   1227c:	0941      	lsrs	r1, r0, #5
   1227e:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   12282:	f000 041f 	and.w	r4, r0, #31
   12286:	fa22 f904 	lsr.w	r9, r2, r4
   1228a:	f019 0f01 	tst.w	r9, #1
   1228e:	d007      	beq.n	122a0 <mem_alloc.constprop.5+0x140>
   12290:	e013      	b.n	122ba <mem_alloc.constprop.5+0x15a>
   12292:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   12296:	fa22 f904 	lsr.w	r9, r2, r4
   1229a:	f019 0f01 	tst.w	r9, #1
   1229e:	d10c      	bne.n	122ba <mem_alloc.constprop.5+0x15a>
   122a0:	3001      	adds	r0, #1
   122a2:	4582      	cmp	sl, r0
   122a4:	ea4f 1150 	mov.w	r1, r0, lsr #5
   122a8:	f000 041f 	and.w	r4, r0, #31
   122ac:	d1f1      	bne.n	12292 <mem_alloc.constprop.5+0x132>
   122ae:	3601      	adds	r6, #1
   122b0:	455e      	cmp	r6, fp
   122b2:	f108 0808 	add.w	r8, r8, #8
   122b6:	d3c4      	bcc.n	12242 <mem_alloc.constprop.5+0xe2>
   122b8:	e7b6      	b.n	12228 <mem_alloc.constprop.5+0xc8>
   122ba:	2601      	movs	r6, #1
   122bc:	fa06 f404 	lsl.w	r4, r6, r4
   122c0:	899e      	ldrh	r6, [r3, #12]
   122c2:	ea22 0204 	bic.w	r2, r2, r4
   122c6:	eba0 000e 	sub.w	r0, r0, lr
   122ca:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   122ce:	685c      	ldr	r4, [r3, #4]
   122d0:	2e00      	cmp	r6, #0
   122d2:	d0a9      	beq.n	12228 <mem_alloc.constprop.5+0xc8>
   122d4:	886a      	ldrh	r2, [r5, #2]
   122d6:	4282      	cmp	r2, r0
   122d8:	d811      	bhi.n	122fe <mem_alloc.constprop.5+0x19e>
   122da:	2100      	movs	r1, #0
   122dc:	1d2b      	adds	r3, r5, #4
   122de:	e003      	b.n	122e8 <mem_alloc.constprop.5+0x188>
   122e0:	885a      	ldrh	r2, [r3, #2]
   122e2:	3304      	adds	r3, #4
   122e4:	4282      	cmp	r2, r0
   122e6:	d80a      	bhi.n	122fe <mem_alloc.constprop.5+0x19e>
   122e8:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   122ec:	3101      	adds	r1, #1
   122ee:	428e      	cmp	r6, r1
   122f0:	fb02 4405 	mla	r4, r2, r5, r4
   122f4:	eba0 0002 	sub.w	r0, r0, r2
   122f8:	461d      	mov	r5, r3
   122fa:	d1f1      	bne.n	122e0 <mem_alloc.constprop.5+0x180>
   122fc:	e794      	b.n	12228 <mem_alloc.constprop.5+0xc8>
   122fe:	882b      	ldrh	r3, [r5, #0]
   12300:	fb00 4003 	mla	r0, r0, r3, r4
   12304:	b003      	add	sp, #12
   12306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1230a:	4670      	mov	r0, lr
   1230c:	e7b0      	b.n	12270 <mem_alloc.constprop.5+0x110>
   1230e:	f1bb 0f10 	cmp.w	fp, #16
   12312:	bf08      	it	eq
   12314:	260f      	moveq	r6, #15
   12316:	d090      	beq.n	1223a <mem_alloc.constprop.5+0xda>
   12318:	e786      	b.n	12228 <mem_alloc.constprop.5+0xc8>
   1231a:	bf00      	nop
   1231c:	20020d84 	.word	0x20020d84
   12320:	20020d48 	.word	0x20020d48
   12324:	20020d04 	.word	0x20020d04

00012328 <mem_alloc.constprop.4>:
   12328:	2800      	cmp	r0, #0
   1232a:	d04c      	beq.n	123c6 <mem_alloc.constprop.4+0x9e>
   1232c:	4b6b      	ldr	r3, [pc, #428]	; (124dc <mem_alloc.constprop.4+0x1b4>)
   1232e:	681a      	ldr	r2, [r3, #0]
   12330:	4290      	cmp	r0, r2
   12332:	d848      	bhi.n	123c6 <mem_alloc.constprop.4+0x9e>
   12334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12338:	685f      	ldr	r7, [r3, #4]
   1233a:	b083      	sub	sp, #12
   1233c:	9700      	str	r7, [sp, #0]
   1233e:	2f00      	cmp	r7, #0
   12340:	d051      	beq.n	123e6 <mem_alloc.constprop.4+0xbe>
   12342:	1e7a      	subs	r2, r7, #1
   12344:	4696      	mov	lr, r2
   12346:	2100      	movs	r1, #0
   12348:	f04f 0c01 	mov.w	ip, #1
   1234c:	4c64      	ldr	r4, [pc, #400]	; (124e0 <mem_alloc.constprop.4+0x1b8>)
   1234e:	9201      	str	r2, [sp, #4]
   12350:	eb01 020e 	add.w	r2, r1, lr
   12354:	3201      	adds	r2, #1
   12356:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   1235a:	0852      	lsrs	r2, r2, #1
   1235c:	f102 0801 	add.w	r8, r2, #1
   12360:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   12364:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   12368:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   1236c:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   12370:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   12374:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   12378:	f8d9 9004 	ldr.w	r9, [r9, #4]
   1237c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   12380:	f8da a010 	ldr.w	sl, [sl, #16]
   12384:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   12388:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   1238c:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   12390:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   12394:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   12398:	6936      	ldr	r6, [r6, #16]
   1239a:	f8db b004 	ldr.w	fp, [fp, #4]
   1239e:	692d      	ldr	r5, [r5, #16]
   123a0:	f8d9 9004 	ldr.w	r9, [r9, #4]
   123a4:	4550      	cmp	r0, sl
   123a6:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   123aa:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   123ae:	d913      	bls.n	123d8 <mem_alloc.constprop.4+0xb0>
   123b0:	42a8      	cmp	r0, r5
   123b2:	d210      	bcs.n	123d6 <mem_alloc.constprop.4+0xae>
   123b4:	42b0      	cmp	r0, r6
   123b6:	d908      	bls.n	123ca <mem_alloc.constprop.4+0xa2>
   123b8:	45c6      	cmp	lr, r8
   123ba:	4641      	mov	r1, r8
   123bc:	f0c0 8087 	bcc.w	124ce <mem_alloc.constprop.4+0x1a6>
   123c0:	f108 0c01 	add.w	ip, r8, #1
   123c4:	e7c4      	b.n	12350 <mem_alloc.constprop.4+0x28>
   123c6:	2000      	movs	r0, #0
   123c8:	4770      	bx	lr
   123ca:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
   123ce:	4571      	cmp	r1, lr
   123d0:	d87d      	bhi.n	124ce <mem_alloc.constprop.4+0x1a6>
   123d2:	4617      	mov	r7, r2
   123d4:	e7bc      	b.n	12350 <mem_alloc.constprop.4+0x28>
   123d6:	4639      	mov	r1, r7
   123d8:	9a00      	ldr	r2, [sp, #0]
   123da:	428a      	cmp	r2, r1
   123dc:	d007      	beq.n	123ee <mem_alloc.constprop.4+0xc6>
   123de:	2910      	cmp	r1, #16
   123e0:	d001      	beq.n	123e6 <mem_alloc.constprop.4+0xbe>
   123e2:	428a      	cmp	r2, r1
   123e4:	d808      	bhi.n	123f8 <mem_alloc.constprop.4+0xd0>
   123e6:	2000      	movs	r0, #0
   123e8:	b003      	add	sp, #12
   123ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123ee:	9a01      	ldr	r2, [sp, #4]
   123f0:	2a10      	cmp	r2, #16
   123f2:	bf18      	it	ne
   123f4:	4611      	movne	r1, r2
   123f6:	d0f6      	beq.n	123e6 <mem_alloc.constprop.4+0xbe>
   123f8:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 124e4 <mem_alloc.constprop.4+0x1bc>
   123fc:	f8dd 9000 	ldr.w	r9, [sp]
   12400:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   12404:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   12408:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1240c:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   12410:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   12414:	f8d2 e004 	ldr.w	lr, [r2, #4]
   12418:	691f      	ldr	r7, [r3, #16]
   1241a:	2e00      	cmp	r6, #0
   1241c:	d055      	beq.n	124ca <mem_alloc.constprop.4+0x1a2>
   1241e:	463a      	mov	r2, r7
   12420:	4670      	mov	r0, lr
   12422:	00b6      	lsls	r6, r6, #2
   12424:	eb07 0a06 	add.w	sl, r7, r6
   12428:	8855      	ldrh	r5, [r2, #2]
   1242a:	3204      	adds	r2, #4
   1242c:	4592      	cmp	sl, r2
   1242e:	4428      	add	r0, r5
   12430:	d1fa      	bne.n	12428 <mem_alloc.constprop.4+0x100>
   12432:	19bd      	adds	r5, r7, r6
   12434:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   12438:	4483      	add	fp, r0
   1243a:	4583      	cmp	fp, r0
   1243c:	d918      	bls.n	12470 <mem_alloc.constprop.4+0x148>
   1243e:	0945      	lsrs	r5, r0, #5
   12440:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   12444:	f000 061f 	and.w	r6, r0, #31
   12448:	fa22 fa06 	lsr.w	sl, r2, r6
   1244c:	f01a 0f01 	tst.w	sl, #1
   12450:	d007      	beq.n	12462 <mem_alloc.constprop.4+0x13a>
   12452:	e013      	b.n	1247c <mem_alloc.constprop.4+0x154>
   12454:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   12458:	fa22 fa06 	lsr.w	sl, r2, r6
   1245c:	f01a 0f01 	tst.w	sl, #1
   12460:	d10c      	bne.n	1247c <mem_alloc.constprop.4+0x154>
   12462:	3001      	adds	r0, #1
   12464:	4583      	cmp	fp, r0
   12466:	ea4f 1550 	mov.w	r5, r0, lsr #5
   1246a:	f000 061f 	and.w	r6, r0, #31
   1246e:	d1f1      	bne.n	12454 <mem_alloc.constprop.4+0x12c>
   12470:	3101      	adds	r1, #1
   12472:	4549      	cmp	r1, r9
   12474:	f108 0808 	add.w	r8, r8, #8
   12478:	d3c4      	bcc.n	12404 <mem_alloc.constprop.4+0xdc>
   1247a:	e7b4      	b.n	123e6 <mem_alloc.constprop.4+0xbe>
   1247c:	2101      	movs	r1, #1
   1247e:	40b1      	lsls	r1, r6
   12480:	899e      	ldrh	r6, [r3, #12]
   12482:	ea22 0201 	bic.w	r2, r2, r1
   12486:	eba0 000e 	sub.w	r0, r0, lr
   1248a:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   1248e:	685c      	ldr	r4, [r3, #4]
   12490:	2e00      	cmp	r6, #0
   12492:	d0a8      	beq.n	123e6 <mem_alloc.constprop.4+0xbe>
   12494:	887a      	ldrh	r2, [r7, #2]
   12496:	4282      	cmp	r2, r0
   12498:	d811      	bhi.n	124be <mem_alloc.constprop.4+0x196>
   1249a:	2100      	movs	r1, #0
   1249c:	1d3b      	adds	r3, r7, #4
   1249e:	e003      	b.n	124a8 <mem_alloc.constprop.4+0x180>
   124a0:	885a      	ldrh	r2, [r3, #2]
   124a2:	3304      	adds	r3, #4
   124a4:	4282      	cmp	r2, r0
   124a6:	d80a      	bhi.n	124be <mem_alloc.constprop.4+0x196>
   124a8:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   124ac:	3101      	adds	r1, #1
   124ae:	428e      	cmp	r6, r1
   124b0:	eba0 0002 	sub.w	r0, r0, r2
   124b4:	fb02 4405 	mla	r4, r2, r5, r4
   124b8:	461f      	mov	r7, r3
   124ba:	d1f1      	bne.n	124a0 <mem_alloc.constprop.4+0x178>
   124bc:	e793      	b.n	123e6 <mem_alloc.constprop.4+0xbe>
   124be:	883b      	ldrh	r3, [r7, #0]
   124c0:	fb00 4003 	mla	r0, r0, r3, r4
   124c4:	b003      	add	sp, #12
   124c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124ca:	4670      	mov	r0, lr
   124cc:	e7b1      	b.n	12432 <mem_alloc.constprop.4+0x10a>
   124ce:	9a00      	ldr	r2, [sp, #0]
   124d0:	2a10      	cmp	r2, #16
   124d2:	bf08      	it	eq
   124d4:	210f      	moveq	r1, #15
   124d6:	d08f      	beq.n	123f8 <mem_alloc.constprop.4+0xd0>
   124d8:	e785      	b.n	123e6 <mem_alloc.constprop.4+0xbe>
   124da:	bf00      	nop
   124dc:	20020d84 	.word	0x20020d84
   124e0:	20020d48 	.word	0x20020d48
   124e4:	20020d04 	.word	0x20020d04

000124e8 <nrf_mem_init>:
   124e8:	b570      	push	{r4, r5, r6, lr}
   124ea:	2200      	movs	r2, #0
   124ec:	2501      	movs	r5, #1
   124ee:	4833      	ldr	r0, [pc, #204]	; (125bc <nrf_mem_init+0xd4>)
   124f0:	0951      	lsrs	r1, r2, #5
   124f2:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   124f6:	f002 031f 	and.w	r3, r2, #31
   124fa:	fa05 f303 	lsl.w	r3, r5, r3
   124fe:	3201      	adds	r2, #1
   12500:	4323      	orrs	r3, r4
   12502:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   12506:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   1250a:	d1f1      	bne.n	124f0 <nrf_mem_init+0x8>
   1250c:	2400      	movs	r4, #0
   1250e:	4b2c      	ldr	r3, [pc, #176]	; (125c0 <nrf_mem_init+0xd8>)
   12510:	4621      	mov	r1, r4
   12512:	223c      	movs	r2, #60	; 0x3c
   12514:	482b      	ldr	r0, [pc, #172]	; (125c4 <nrf_mem_init+0xdc>)
   12516:	601c      	str	r4, [r3, #0]
   12518:	f009 fc21 	bl	1bd5e <memset>
   1251c:	2110      	movs	r1, #16
   1251e:	2205      	movs	r2, #5
   12520:	4b29      	ldr	r3, [pc, #164]	; (125c8 <nrf_mem_init+0xe0>)
   12522:	4e2a      	ldr	r6, [pc, #168]	; (125cc <nrf_mem_init+0xe4>)
   12524:	e9c3 4400 	strd	r4, r4, [r3]
   12528:	60d9      	str	r1, [r3, #12]
   1252a:	6159      	str	r1, [r3, #20]
   1252c:	61d9      	str	r1, [r3, #28]
   1252e:	6259      	str	r1, [r3, #36]	; 0x24
   12530:	62d9      	str	r1, [r3, #44]	; 0x2c
   12532:	6359      	str	r1, [r3, #52]	; 0x34
   12534:	63d9      	str	r1, [r3, #60]	; 0x3c
   12536:	6459      	str	r1, [r3, #68]	; 0x44
   12538:	64d9      	str	r1, [r3, #76]	; 0x4c
   1253a:	6559      	str	r1, [r3, #84]	; 0x54
   1253c:	65d9      	str	r1, [r3, #92]	; 0x5c
   1253e:	6659      	str	r1, [r3, #100]	; 0x64
   12540:	66d9      	str	r1, [r3, #108]	; 0x6c
   12542:	6759      	str	r1, [r3, #116]	; 0x74
   12544:	67d9      	str	r1, [r3, #124]	; 0x7c
   12546:	609a      	str	r2, [r3, #8]
   12548:	611a      	str	r2, [r3, #16]
   1254a:	619a      	str	r2, [r3, #24]
   1254c:	621a      	str	r2, [r3, #32]
   1254e:	629a      	str	r2, [r3, #40]	; 0x28
   12550:	631a      	str	r2, [r3, #48]	; 0x30
   12552:	639a      	str	r2, [r3, #56]	; 0x38
   12554:	641a      	str	r2, [r3, #64]	; 0x40
   12556:	649a      	str	r2, [r3, #72]	; 0x48
   12558:	651a      	str	r2, [r3, #80]	; 0x50
   1255a:	659a      	str	r2, [r3, #88]	; 0x58
   1255c:	661a      	str	r2, [r3, #96]	; 0x60
   1255e:	669a      	str	r2, [r3, #104]	; 0x68
   12560:	671a      	str	r2, [r3, #112]	; 0x70
   12562:	679a      	str	r2, [r3, #120]	; 0x78
   12564:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   12568:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   1256c:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   12570:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   12574:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   12578:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   1257c:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   12580:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   12584:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   12588:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   1258c:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   12590:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   12594:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   12598:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   1259c:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   125a0:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   125a4:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   125a8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   125ac:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   125b0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   125b4:	4620      	mov	r0, r4
   125b6:	7035      	strb	r5, [r6, #0]
   125b8:	bd70      	pop	{r4, r5, r6, pc}
   125ba:	bf00      	nop
   125bc:	20020d04 	.word	0x20020d04
   125c0:	20020d44 	.word	0x20020d44
   125c4:	20020d48 	.word	0x20020d48
   125c8:	20020d84 	.word	0x20020d84
   125cc:	20022074 	.word	0x20022074

000125d0 <nrf_mem_register>:
   125d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125d4:	4b87      	ldr	r3, [pc, #540]	; (127f4 <nrf_mem_register+0x224>)
   125d6:	b087      	sub	sp, #28
   125d8:	781b      	ldrb	r3, [r3, #0]
   125da:	2b00      	cmp	r3, #0
   125dc:	f000 808c 	beq.w	126f8 <nrf_mem_register+0x128>
   125e0:	b328      	cbz	r0, 1262e <nrf_mem_register+0x5e>
   125e2:	b321      	cbz	r1, 1262e <nrf_mem_register+0x5e>
   125e4:	780b      	ldrb	r3, [r1, #0]
   125e6:	f8df 8218 	ldr.w	r8, [pc, #536]	; 12800 <nrf_mem_register+0x230>
   125ea:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   125ee:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   125f2:	685b      	ldr	r3, [r3, #4]
   125f4:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   125f8:	4463      	add	r3, ip
   125fa:	2b10      	cmp	r3, #16
   125fc:	d811      	bhi.n	12622 <nrf_mem_register+0x52>
   125fe:	f04f 0a00 	mov.w	sl, #0
   12602:	4689      	mov	r9, r1
   12604:	4b7c      	ldr	r3, [pc, #496]	; (127f8 <nrf_mem_register+0x228>)
   12606:	4f7d      	ldr	r7, [pc, #500]	; (127fc <nrf_mem_register+0x22c>)
   12608:	681b      	ldr	r3, [r3, #0]
   1260a:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   1260e:	9300      	str	r3, [sp, #0]
   12610:	68b9      	ldr	r1, [r7, #8]
   12612:	b191      	cbz	r1, 1263a <nrf_mem_register+0x6a>
   12614:	f10a 0a01 	add.w	sl, sl, #1
   12618:	f1ba 0f05 	cmp.w	sl, #5
   1261c:	f107 070c 	add.w	r7, r7, #12
   12620:	d1f6      	bne.n	12610 <nrf_mem_register+0x40>
   12622:	f248 1b07 	movw	fp, #33031	; 0x8107
   12626:	4658      	mov	r0, fp
   12628:	b007      	add	sp, #28
   1262a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1262e:	f248 1b0e 	movw	fp, #33038	; 0x810e
   12632:	4658      	mov	r0, fp
   12634:	b007      	add	sp, #28
   12636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1263a:	f1bc 0f00 	cmp.w	ip, #0
   1263e:	d061      	beq.n	12704 <nrf_mem_register+0x134>
   12640:	460d      	mov	r5, r1
   12642:	460c      	mov	r4, r1
   12644:	f8d9 3010 	ldr.w	r3, [r9, #16]
   12648:	eb0e 0b03 	add.w	fp, lr, r3
   1264c:	885a      	ldrh	r2, [r3, #2]
   1264e:	f833 6b04 	ldrh.w	r6, [r3], #4
   12652:	4415      	add	r5, r2
   12654:	459b      	cmp	fp, r3
   12656:	fb02 4406 	mla	r4, r2, r6, r4
   1265a:	d1f7      	bne.n	1264c <nrf_mem_register+0x7c>
   1265c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   12660:	42a3      	cmp	r3, r4
   12662:	d3d7      	bcc.n	12614 <nrf_mem_register+0x44>
   12664:	9b00      	ldr	r3, [sp, #0]
   12666:	442b      	add	r3, r5
   12668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1266c:	d2d2      	bcs.n	12614 <nrf_mem_register+0x44>
   1266e:	4c63      	ldr	r4, [pc, #396]	; (127fc <nrf_mem_register+0x22c>)
   12670:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   12674:	0092      	lsls	r2, r2, #2
   12676:	f8c0 a000 	str.w	sl, [r0]
   1267a:	18a0      	adds	r0, r4, r2
   1267c:	f844 9002 	str.w	r9, [r4, r2]
   12680:	9a00      	ldr	r2, [sp, #0]
   12682:	468b      	mov	fp, r1
   12684:	e9c0 2501 	strd	r2, r5, [r0, #4]
   12688:	f899 2001 	ldrb.w	r2, [r9, #1]
   1268c:	485a      	ldr	r0, [pc, #360]	; (127f8 <nrf_mem_register+0x228>)
   1268e:	2a01      	cmp	r2, #1
   12690:	6003      	str	r3, [r0, #0]
   12692:	d0c8      	beq.n	12626 <nrf_mem_register+0x56>
   12694:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   12698:	2b00      	cmp	r3, #0
   1269a:	d0c4      	beq.n	12626 <nrf_mem_register+0x56>
   1269c:	2500      	movs	r5, #0
   1269e:	f8cd 9004 	str.w	r9, [sp, #4]
   126a2:	f8cd a00c 	str.w	sl, [sp, #12]
   126a6:	f8cd b014 	str.w	fp, [sp, #20]
   126aa:	9b01      	ldr	r3, [sp, #4]
   126ac:	781f      	ldrb	r7, [r3, #0]
   126ae:	691a      	ldr	r2, [r3, #16]
   126b0:	013b      	lsls	r3, r7, #4
   126b2:	eb03 0907 	add.w	r9, r3, r7
   126b6:	9300      	str	r3, [sp, #0]
   126b8:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   126bc:	6859      	ldr	r1, [r3, #4]
   126be:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   126c2:	9102      	str	r1, [sp, #8]
   126c4:	bb39      	cbnz	r1, 12716 <nrf_mem_register+0x146>
   126c6:	9a03      	ldr	r2, [sp, #12]
   126c8:	60dd      	str	r5, [r3, #12]
   126ca:	609a      	str	r2, [r3, #8]
   126cc:	9b00      	ldr	r3, [sp, #0]
   126ce:	443b      	add	r3, r7
   126d0:	461f      	mov	r7, r3
   126d2:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   126d6:	684b      	ldr	r3, [r1, #4]
   126d8:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   126dc:	3301      	adds	r3, #1
   126de:	4294      	cmp	r4, r2
   126e0:	604b      	str	r3, [r1, #4]
   126e2:	d912      	bls.n	1270a <nrf_mem_register+0x13a>
   126e4:	9b01      	ldr	r3, [sp, #4]
   126e6:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   126ea:	899b      	ldrh	r3, [r3, #12]
   126ec:	3501      	adds	r5, #1
   126ee:	429d      	cmp	r5, r3
   126f0:	d3db      	bcc.n	126aa <nrf_mem_register+0xda>
   126f2:	f8dd b014 	ldr.w	fp, [sp, #20]
   126f6:	e796      	b.n	12626 <nrf_mem_register+0x56>
   126f8:	f248 1b08 	movw	fp, #33032	; 0x8108
   126fc:	4658      	mov	r0, fp
   126fe:	b007      	add	sp, #28
   12700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12704:	9b00      	ldr	r3, [sp, #0]
   12706:	4665      	mov	r5, ip
   12708:	e7ae      	b.n	12668 <nrf_mem_register+0x98>
   1270a:	9b01      	ldr	r3, [sp, #4]
   1270c:	3501      	adds	r5, #1
   1270e:	899b      	ldrh	r3, [r3, #12]
   12710:	42ab      	cmp	r3, r5
   12712:	d8ca      	bhi.n	126aa <nrf_mem_register+0xda>
   12714:	e7ed      	b.n	126f2 <nrf_mem_register+0x122>
   12716:	2600      	movs	r6, #0
   12718:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
   1271c:	9504      	str	r5, [sp, #16]
   1271e:	eb06 000a 	add.w	r0, r6, sl
   12722:	eb09 0206 	add.w	r2, r9, r6
   12726:	3201      	adds	r2, #1
   12728:	3001      	adds	r0, #1
   1272a:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   1272e:	0840      	lsrs	r0, r0, #1
   12730:	4d32      	ldr	r5, [pc, #200]	; (127fc <nrf_mem_register+0x22c>)
   12732:	eb09 0100 	add.w	r1, r9, r0
   12736:	eb09 030a 	add.w	r3, r9, sl
   1273a:	3101      	adds	r1, #1
   1273c:	3301      	adds	r3, #1
   1273e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   12742:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   12746:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   1274a:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   1274e:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   12752:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   12756:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   1275a:	f8db b010 	ldr.w	fp, [fp, #16]
   1275e:	6852      	ldr	r2, [r2, #4]
   12760:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   12764:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   12768:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   1276c:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   12770:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   12774:	f8de e010 	ldr.w	lr, [lr, #16]
   12778:	6849      	ldr	r1, [r1, #4]
   1277a:	f8dc c010 	ldr.w	ip, [ip, #16]
   1277e:	685b      	ldr	r3, [r3, #4]
   12780:	4294      	cmp	r4, r2
   12782:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   12786:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   1278a:	d92d      	bls.n	127e8 <nrf_mem_register+0x218>
   1278c:	429c      	cmp	r4, r3
   1278e:	d22d      	bcs.n	127ec <nrf_mem_register+0x21c>
   12790:	428c      	cmp	r4, r1
   12792:	d924      	bls.n	127de <nrf_mem_register+0x20e>
   12794:	1c46      	adds	r6, r0, #1
   12796:	45b2      	cmp	sl, r6
   12798:	d2c1      	bcs.n	1271e <nrf_mem_register+0x14e>
   1279a:	2610      	movs	r6, #16
   1279c:	9d04      	ldr	r5, [sp, #16]
   1279e:	9a02      	ldr	r2, [sp, #8]
   127a0:	42b2      	cmp	r2, r6
   127a2:	d911      	bls.n	127c8 <nrf_mem_register+0x1f8>
   127a4:	9b00      	ldr	r3, [sp, #0]
   127a6:	443b      	add	r3, r7
   127a8:	441a      	add	r2, r3
   127aa:	4433      	add	r3, r6
   127ac:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   127b0:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   127b4:	2208      	movs	r2, #8
   127b6:	4651      	mov	r1, sl
   127b8:	eb0a 0002 	add.w	r0, sl, r2
   127bc:	f1aa 0a08 	sub.w	sl, sl, #8
   127c0:	f009 faa3 	bl	1bd0a <memcpy>
   127c4:	45d1      	cmp	r9, sl
   127c6:	d1f5      	bne.n	127b4 <nrf_mem_register+0x1e4>
   127c8:	9b00      	ldr	r3, [sp, #0]
   127ca:	9903      	ldr	r1, [sp, #12]
   127cc:	443b      	add	r3, r7
   127ce:	4433      	add	r3, r6
   127d0:	3301      	adds	r3, #1
   127d2:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   127d6:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   127da:	6055      	str	r5, [r2, #4]
   127dc:	e776      	b.n	126cc <nrf_mem_register+0xfc>
   127de:	f100 3aff 	add.w	sl, r0, #4294967295	; 0xffffffff
   127e2:	4556      	cmp	r6, sl
   127e4:	d99b      	bls.n	1271e <nrf_mem_register+0x14e>
   127e6:	e7d8      	b.n	1279a <nrf_mem_register+0x1ca>
   127e8:	9d04      	ldr	r5, [sp, #16]
   127ea:	e7d8      	b.n	1279e <nrf_mem_register+0x1ce>
   127ec:	9d04      	ldr	r5, [sp, #16]
   127ee:	f10a 0601 	add.w	r6, sl, #1
   127f2:	e7d4      	b.n	1279e <nrf_mem_register+0x1ce>
   127f4:	20022074 	.word	0x20022074
   127f8:	20020d44 	.word	0x20020d44
   127fc:	20020d48 	.word	0x20020d48
   12800:	20020d84 	.word	0x20020d84

00012804 <nrf_malloc>:
   12804:	4b03      	ldr	r3, [pc, #12]	; (12814 <nrf_malloc+0x10>)
   12806:	781b      	ldrb	r3, [r3, #0]
   12808:	b10b      	cbz	r3, 1280e <nrf_malloc+0xa>
   1280a:	f7ff bd8d 	b.w	12328 <mem_alloc.constprop.4>
   1280e:	4618      	mov	r0, r3
   12810:	4770      	bx	lr
   12812:	bf00      	nop
   12814:	20022074 	.word	0x20022074

00012818 <nrf_free>:
   12818:	4b04      	ldr	r3, [pc, #16]	; (1282c <nrf_free+0x14>)
   1281a:	781b      	ldrb	r3, [r3, #0]
   1281c:	b123      	cbz	r3, 12828 <nrf_free+0x10>
   1281e:	b118      	cbz	r0, 12828 <nrf_free+0x10>
   12820:	4601      	mov	r1, r0
   12822:	2000      	movs	r0, #0
   12824:	f7ff bc30 	b.w	12088 <mem_free>
   12828:	4770      	bx	lr
   1282a:	bf00      	nop
   1282c:	20022074 	.word	0x20022074

00012830 <nrf_shared_malloc>:
   12830:	4b03      	ldr	r3, [pc, #12]	; (12840 <nrf_shared_malloc+0x10>)
   12832:	781b      	ldrb	r3, [r3, #0]
   12834:	b10b      	cbz	r3, 1283a <nrf_shared_malloc+0xa>
   12836:	f7ff bc93 	b.w	12160 <mem_alloc.constprop.5>
   1283a:	4618      	mov	r0, r3
   1283c:	4770      	bx	lr
   1283e:	bf00      	nop
   12840:	20022074 	.word	0x20022074

00012844 <nrf_shared_free>:
   12844:	4b04      	ldr	r3, [pc, #16]	; (12858 <nrf_shared_free+0x14>)
   12846:	781b      	ldrb	r3, [r3, #0]
   12848:	b123      	cbz	r3, 12854 <nrf_shared_free+0x10>
   1284a:	b118      	cbz	r0, 12854 <nrf_shared_free+0x10>
   1284c:	4601      	mov	r1, r0
   1284e:	2001      	movs	r0, #1
   12850:	f7ff bc1a 	b.w	12088 <mem_free>
   12854:	4770      	bx	lr
   12856:	bf00      	nop
   12858:	20022074 	.word	0x20022074

0001285c <ip_client_event_handler>:
   1285c:	f850 1b08 	ldr.w	r1, [r0], #8
   12860:	0c09      	lsrs	r1, r1, #16
   12862:	f004 bccf 	b.w	17204 <rpc_ip_event_handler>
   12866:	bf00      	nop

00012868 <rpc_ip_client_init>:
   12868:	4801      	ldr	r0, [pc, #4]	; (12870 <rpc_ip_client_init+0x8>)
   1286a:	f005 b99d 	b.w	17ba8 <rpc_client_register>
   1286e:	bf00      	nop
   12870:	0001e3a4 	.word	0x0001e3a4

00012874 <rpc_ip_client_request_alloc>:
   12874:	2300      	movs	r3, #0
   12876:	b510      	push	{r4, lr}
   12878:	b082      	sub	sp, #8
   1287a:	9301      	str	r3, [sp, #4]
   1287c:	b158      	cbz	r0, 12896 <rpc_ip_client_request_alloc+0x22>
   1287e:	4604      	mov	r4, r0
   12880:	aa01      	add	r2, sp, #4
   12882:	2004      	movs	r0, #4
   12884:	f005 fbc8 	bl	18018 <rpc_message_alloc>
   12888:	b918      	cbnz	r0, 12892 <rpc_ip_client_request_alloc+0x1e>
   1288a:	9b01      	ldr	r3, [sp, #4]
   1288c:	b10b      	cbz	r3, 12892 <rpc_ip_client_request_alloc+0x1e>
   1288e:	3308      	adds	r3, #8
   12890:	6023      	str	r3, [r4, #0]
   12892:	b002      	add	sp, #8
   12894:	bd10      	pop	{r4, pc}
   12896:	2007      	movs	r0, #7
   12898:	b002      	add	sp, #8
   1289a:	bd10      	pop	{r4, pc}

0001289c <rpc_ip_client_request_send>:
   1289c:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   128a0:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   128a4:	d10b      	bne.n	128be <rpc_ip_client_request_send+0x22>
   128a6:	b160      	cbz	r0, 128c2 <rpc_ip_client_request_send+0x26>
   128a8:	4603      	mov	r3, r0
   128aa:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   128ae:	2004      	movs	r0, #4
   128b0:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   128b4:	f843 1d08 	str.w	r1, [r3, #-8]!
   128b8:	4619      	mov	r1, r3
   128ba:	f005 bb95 	b.w	17fe8 <rpc_message_send>
   128be:	200f      	movs	r0, #15
   128c0:	4770      	bx	lr
   128c2:	2007      	movs	r0, #7
   128c4:	4770      	bx	lr
   128c6:	bf00      	nop

000128c8 <rpc_ip_client_message_free>:
   128c8:	b120      	cbz	r0, 128d4 <rpc_ip_client_message_free+0xc>
   128ca:	f1a0 0108 	sub.w	r1, r0, #8
   128ce:	2004      	movs	r0, #4
   128d0:	f005 bbd4 	b.w	1807c <rpc_message_free>
   128d4:	2007      	movs	r0, #7
   128d6:	4770      	bx	lr

000128d8 <rpc_ip_client_data_free>:
   128d8:	b118      	cbz	r0, 128e2 <rpc_ip_client_data_free+0xa>
   128da:	4601      	mov	r1, r0
   128dc:	2004      	movs	r0, #4
   128de:	f005 bcdf 	b.w	182a0 <rpc_message_data_free>
   128e2:	2007      	movs	r0, #7
   128e4:	4770      	bx	lr
   128e6:	bf00      	nop

000128e8 <secure_client_socket>:
   128e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   128ec:	460c      	mov	r4, r1
   128ee:	680b      	ldr	r3, [r1, #0]
   128f0:	4f46      	ldr	r7, [pc, #280]	; (12a0c <secure_client_socket+0x124>)
   128f2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   128f6:	600b      	str	r3, [r1, #0]
   128f8:	680b      	ldr	r3, [r1, #0]
   128fa:	00c6      	lsls	r6, r0, #3
   128fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   12900:	600b      	str	r3, [r1, #0]
   12902:	eb07 0a06 	add.w	sl, r7, r6
   12906:	b082      	sub	sp, #8
   12908:	f8da 3004 	ldr.w	r3, [sl, #4]
   1290c:	6989      	ldr	r1, [r1, #24]
   1290e:	f247 0281 	movw	r2, #28801	; 0x7081
   12912:	4605      	mov	r5, r0
   12914:	f8d4 8000 	ldr.w	r8, [r4]
   12918:	f003 fbd2 	bl	160c0 <ip_interface_request_create>
   1291c:	2800      	cmp	r0, #0
   1291e:	d06f      	beq.n	12a00 <secure_client_socket+0x118>
   12920:	f8da 2004 	ldr.w	r2, [sl, #4]
   12924:	4681      	mov	r9, r0
   12926:	2a00      	cmp	r2, #0
   12928:	d15f      	bne.n	129ea <secure_client_socket+0x102>
   1292a:	4b39      	ldr	r3, [pc, #228]	; (12a10 <secure_client_socket+0x128>)
   1292c:	1971      	adds	r1, r6, r5
   1292e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   12932:	2224      	movs	r2, #36	; 0x24
   12934:	f109 0014 	add.w	r0, r9, #20
   12938:	f009 f9e7 	bl	1bd0a <memcpy>
   1293c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   12940:	4649      	mov	r1, r9
   12942:	3324      	adds	r3, #36	; 0x24
   12944:	f8c9 3008 	str.w	r3, [r9, #8]
   12948:	6822      	ldr	r2, [r4, #0]
   1294a:	4643      	mov	r3, r8
   1294c:	0c12      	lsrs	r2, r2, #16
   1294e:	0412      	lsls	r2, r2, #16
   12950:	f042 020a 	orr.w	r2, r2, #10
   12954:	6022      	str	r2, [r4, #0]
   12956:	4620      	mov	r0, r4
   12958:	f247 0281 	movw	r2, #28801	; 0x7081
   1295c:	f003 fbd0 	bl	16100 <ip_interface_request_send>
   12960:	4603      	mov	r3, r0
   12962:	b970      	cbnz	r0, 12982 <secure_client_socket+0x9a>
   12964:	6823      	ldr	r3, [r4, #0]
   12966:	00db      	lsls	r3, r3, #3
   12968:	d40f      	bmi.n	1298a <secure_client_socket+0xa2>
   1296a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1296e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12972:	210b      	movs	r1, #11
   12974:	4628      	mov	r0, r5
   12976:	f003 fbd7 	bl	16128 <ip_interface_wait>
   1297a:	4603      	mov	r3, r0
   1297c:	b150      	cbz	r0, 12994 <secure_client_socket+0xac>
   1297e:	f8c4 8000 	str.w	r8, [r4]
   12982:	4618      	mov	r0, r3
   12984:	b002      	add	sp, #8
   12986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1298a:	2373      	movs	r3, #115	; 0x73
   1298c:	4618      	mov	r0, r3
   1298e:	b002      	add	sp, #8
   12990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12994:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   12998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1299c:	4611      	mov	r1, r2
   1299e:	4628      	mov	r0, r5
   129a0:	f003 fbc2 	bl	16128 <ip_interface_wait>
   129a4:	4603      	mov	r3, r0
   129a6:	bb30      	cbnz	r0, 129f6 <secure_client_socket+0x10e>
   129a8:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   129ac:	b138      	cbz	r0, 129be <secure_client_socket+0xd6>
   129ae:	9301      	str	r3, [sp, #4]
   129b0:	f7ff ff32 	bl	12818 <nrf_free>
   129b4:	9b01      	ldr	r3, [sp, #4]
   129b6:	443e      	add	r6, r7
   129b8:	6073      	str	r3, [r6, #4]
   129ba:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   129be:	4618      	mov	r0, r3
   129c0:	6822      	ldr	r2, [r4, #0]
   129c2:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   129c6:	6022      	str	r2, [r4, #0]
   129c8:	6822      	ldr	r2, [r4, #0]
   129ca:	0c12      	lsrs	r2, r2, #16
   129cc:	0412      	lsls	r2, r2, #16
   129ce:	f042 020c 	orr.w	r2, r2, #12
   129d2:	6022      	str	r2, [r4, #0]
   129d4:	6822      	ldr	r2, [r4, #0]
   129d6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   129da:	6022      	str	r2, [r4, #0]
   129dc:	6822      	ldr	r2, [r4, #0]
   129de:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   129e2:	6022      	str	r2, [r4, #0]
   129e4:	b002      	add	sp, #8
   129e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   129ea:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   129ee:	6800      	ldr	r0, [r0, #0]
   129f0:	f009 f98b 	bl	1bd0a <memcpy>
   129f4:	e799      	b.n	1292a <secure_client_socket+0x42>
   129f6:	2b73      	cmp	r3, #115	; 0x73
   129f8:	d0c3      	beq.n	12982 <secure_client_socket+0x9a>
   129fa:	f8c4 8000 	str.w	r8, [r4]
   129fe:	e7c0      	b.n	12982 <secure_client_socket+0x9a>
   12a00:	230c      	movs	r3, #12
   12a02:	4618      	mov	r0, r3
   12a04:	b002      	add	sp, #8
   12a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12a0a:	bf00      	nop
   12a0c:	20020fd8 	.word	0x20020fd8
   12a10:	20020e94 	.word	0x20020e94

00012a14 <tls_interface_init>:
   12a14:	2000      	movs	r0, #0
   12a16:	4770      	bx	lr

00012a18 <tls_interface_open>:
   12a18:	b538      	push	{r3, r4, r5, lr}
   12a1a:	f020 0308 	bic.w	r3, r0, #8
   12a1e:	2b02      	cmp	r3, #2
   12a20:	d006      	beq.n	12a30 <tls_interface_open+0x18>
   12a22:	202f      	movs	r0, #47	; 0x2f
   12a24:	f7fd f82a 	bl	fa7c <bsd_os_errno_set>
   12a28:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12a2c:	4628      	mov	r0, r5
   12a2e:	bd38      	pop	{r3, r4, r5, pc}
   12a30:	4614      	mov	r4, r2
   12a32:	1e4a      	subs	r2, r1, #1
   12a34:	2a01      	cmp	r2, #1
   12a36:	d828      	bhi.n	12a8a <tls_interface_open+0x72>
   12a38:	bb14      	cbnz	r4, 12a80 <tls_interface_open+0x68>
   12a3a:	2901      	cmp	r1, #1
   12a3c:	bf06      	itte	eq
   12a3e:	2301      	moveq	r3, #1
   12a40:	f44f 7482 	moveq.w	r4, #260	; 0x104
   12a44:	f44f 7487 	movne.w	r4, #270	; 0x10e
   12a48:	461a      	mov	r2, r3
   12a4a:	f003 fb99 	bl	16180 <ip_interface_open>
   12a4e:	1e05      	subs	r5, r0, #0
   12a50:	db26      	blt.n	12aa0 <tls_interface_open+0x88>
   12a52:	4b15      	ldr	r3, [pc, #84]	; (12aa8 <tls_interface_open+0x90>)
   12a54:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   12a58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   12a5c:	2224      	movs	r2, #36	; 0x24
   12a5e:	4913      	ldr	r1, [pc, #76]	; (12aac <tls_interface_open+0x94>)
   12a60:	f009 f953 	bl	1bd0a <memcpy>
   12a64:	4628      	mov	r0, r5
   12a66:	f004 ff6f 	bl	17948 <interface_socket_from_handle_get>
   12a6a:	6803      	ldr	r3, [r0, #0]
   12a6c:	6144      	str	r4, [r0, #20]
   12a6e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   12a72:	6003      	str	r3, [r0, #0]
   12a74:	6803      	ldr	r3, [r0, #0]
   12a76:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   12a7a:	6003      	str	r3, [r0, #0]
   12a7c:	4628      	mov	r0, r5
   12a7e:	bd38      	pop	{r3, r4, r5, pc}
   12a80:	2901      	cmp	r1, #1
   12a82:	d008      	beq.n	12a96 <tls_interface_open+0x7e>
   12a84:	f5b4 7f87 	cmp.w	r4, #270	; 0x10e
   12a88:	d0de      	beq.n	12a48 <tls_interface_open+0x30>
   12a8a:	2016      	movs	r0, #22
   12a8c:	f7fc fff6 	bl	fa7c <bsd_os_errno_set>
   12a90:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12a94:	e7ca      	b.n	12a2c <tls_interface_open+0x14>
   12a96:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
   12a9a:	d1f6      	bne.n	12a8a <tls_interface_open+0x72>
   12a9c:	460b      	mov	r3, r1
   12a9e:	e7d3      	b.n	12a48 <tls_interface_open+0x30>
   12aa0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12aa4:	e7c2      	b.n	12a2c <tls_interface_open+0x14>
   12aa6:	bf00      	nop
   12aa8:	20020e94 	.word	0x20020e94
   12aac:	0001e3b4 	.word	0x0001e3b4

00012ab0 <tls_interface_close>:
   12ab0:	b538      	push	{r3, r4, r5, lr}
   12ab2:	4604      	mov	r4, r0
   12ab4:	f004 ff48 	bl	17948 <interface_socket_from_handle_get>
   12ab8:	b180      	cbz	r0, 12adc <tls_interface_close+0x2c>
   12aba:	4d0b      	ldr	r5, [pc, #44]	; (12ae8 <tls_interface_close+0x38>)
   12abc:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   12ac0:	b138      	cbz	r0, 12ad2 <tls_interface_close+0x22>
   12ac2:	f7ff fea9 	bl	12818 <nrf_free>
   12ac6:	2300      	movs	r3, #0
   12ac8:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   12acc:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   12ad0:	6053      	str	r3, [r2, #4]
   12ad2:	4620      	mov	r0, r4
   12ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12ad8:	f003 bbfe 	b.w	162d8 <ip_interface_close>
   12adc:	2009      	movs	r0, #9
   12ade:	f7fc ffcd 	bl	fa7c <bsd_os_errno_set>
   12ae2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12ae6:	bd38      	pop	{r3, r4, r5, pc}
   12ae8:	20020fd8 	.word	0x20020fd8

00012aec <tls_interface_sendto>:
   12aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12af0:	460d      	mov	r5, r1
   12af2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   12af6:	4616      	mov	r6, r2
   12af8:	461f      	mov	r7, r3
   12afa:	4604      	mov	r4, r0
   12afc:	f004 ff24 	bl	17948 <interface_socket_from_handle_get>
   12b00:	2800      	cmp	r0, #0
   12b02:	d03b      	beq.n	12b7c <tls_interface_sendto+0x90>
   12b04:	6803      	ldr	r3, [r0, #0]
   12b06:	b29b      	uxth	r3, r3
   12b08:	2b0c      	cmp	r3, #12
   12b0a:	d039      	beq.n	12b80 <tls_interface_sendto+0x94>
   12b0c:	6803      	ldr	r3, [r0, #0]
   12b0e:	b29b      	uxth	r3, r3
   12b10:	2b0b      	cmp	r3, #11
   12b12:	d111      	bne.n	12b38 <tls_interface_sendto+0x4c>
   12b14:	4b20      	ldr	r3, [pc, #128]	; (12b98 <tls_interface_sendto+0xac>)
   12b16:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   12b1a:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
   12b1e:	2b02      	cmp	r3, #2
   12b20:	d038      	beq.n	12b94 <tls_interface_sendto+0xa8>
   12b22:	6903      	ldr	r3, [r0, #16]
   12b24:	2b01      	cmp	r3, #1
   12b26:	bf14      	ite	ne
   12b28:	2039      	movne	r0, #57	; 0x39
   12b2a:	202a      	moveq	r0, #42	; 0x2a
   12b2c:	f7fc ffa6 	bl	fa7c <bsd_os_errno_set>
   12b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12b38:	6903      	ldr	r3, [r0, #16]
   12b3a:	2b01      	cmp	r3, #1
   12b3c:	d00b      	beq.n	12b56 <tls_interface_sendto+0x6a>
   12b3e:	2b02      	cmp	r3, #2
   12b40:	d001      	beq.n	12b46 <tls_interface_sendto+0x5a>
   12b42:	2039      	movs	r0, #57	; 0x39
   12b44:	e7f2      	b.n	12b2c <tls_interface_sendto+0x40>
   12b46:	6803      	ldr	r3, [r0, #0]
   12b48:	b29b      	uxth	r3, r3
   12b4a:	2b02      	cmp	r3, #2
   12b4c:	d007      	beq.n	12b5e <tls_interface_sendto+0x72>
   12b4e:	6803      	ldr	r3, [r0, #0]
   12b50:	b29b      	uxth	r3, r3
   12b52:	2b04      	cmp	r3, #4
   12b54:	d003      	beq.n	12b5e <tls_interface_sendto+0x72>
   12b56:	6803      	ldr	r3, [r0, #0]
   12b58:	b29b      	uxth	r3, r3
   12b5a:	2b05      	cmp	r3, #5
   12b5c:	d1f1      	bne.n	12b42 <tls_interface_sendto+0x56>
   12b5e:	4b0e      	ldr	r3, [pc, #56]	; (12b98 <tls_interface_sendto+0xac>)
   12b60:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   12b64:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   12b68:	2b02      	cmp	r3, #2
   12b6a:	d1ea      	bne.n	12b42 <tls_interface_sendto+0x56>
   12b6c:	4601      	mov	r1, r0
   12b6e:	4620      	mov	r0, r4
   12b70:	f7ff feba 	bl	128e8 <secure_client_socket>
   12b74:	2800      	cmp	r0, #0
   12b76:	d003      	beq.n	12b80 <tls_interface_sendto+0x94>
   12b78:	dcd8      	bgt.n	12b2c <tls_interface_sendto+0x40>
   12b7a:	e7d9      	b.n	12b30 <tls_interface_sendto+0x44>
   12b7c:	2009      	movs	r0, #9
   12b7e:	e7d5      	b.n	12b2c <tls_interface_sendto+0x40>
   12b80:	e9cd 8908 	strd	r8, r9, [sp, #32]
   12b84:	463b      	mov	r3, r7
   12b86:	4632      	mov	r2, r6
   12b88:	4629      	mov	r1, r5
   12b8a:	4620      	mov	r0, r4
   12b8c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12b90:	f003 bc12 	b.w	163b8 <ip_interface_sendto>
   12b94:	2023      	movs	r0, #35	; 0x23
   12b96:	e7c9      	b.n	12b2c <tls_interface_sendto+0x40>
   12b98:	20020e94 	.word	0x20020e94

00012b9c <tls_interface_recvfrom>:
   12b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12ba0:	460d      	mov	r5, r1
   12ba2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   12ba6:	4616      	mov	r6, r2
   12ba8:	461f      	mov	r7, r3
   12baa:	4604      	mov	r4, r0
   12bac:	f004 fecc 	bl	17948 <interface_socket_from_handle_get>
   12bb0:	2800      	cmp	r0, #0
   12bb2:	d038      	beq.n	12c26 <tls_interface_recvfrom+0x8a>
   12bb4:	6803      	ldr	r3, [r0, #0]
   12bb6:	b29b      	uxth	r3, r3
   12bb8:	2b0c      	cmp	r3, #12
   12bba:	d00f      	beq.n	12bdc <tls_interface_recvfrom+0x40>
   12bbc:	6803      	ldr	r3, [r0, #0]
   12bbe:	b29b      	uxth	r3, r3
   12bc0:	2b0d      	cmp	r3, #13
   12bc2:	d00b      	beq.n	12bdc <tls_interface_recvfrom+0x40>
   12bc4:	6903      	ldr	r3, [r0, #16]
   12bc6:	2b01      	cmp	r3, #1
   12bc8:	d01a      	beq.n	12c00 <tls_interface_recvfrom+0x64>
   12bca:	2b02      	cmp	r3, #2
   12bcc:	d010      	beq.n	12bf0 <tls_interface_recvfrom+0x54>
   12bce:	2023      	movs	r0, #35	; 0x23
   12bd0:	f7fc ff54 	bl	fa7c <bsd_os_errno_set>
   12bd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12bdc:	e9cd 8908 	strd	r8, r9, [sp, #32]
   12be0:	463b      	mov	r3, r7
   12be2:	4632      	mov	r2, r6
   12be4:	4629      	mov	r1, r5
   12be6:	4620      	mov	r0, r4
   12be8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12bec:	f003 bd1e 	b.w	1662c <ip_interface_recvfrom>
   12bf0:	6803      	ldr	r3, [r0, #0]
   12bf2:	b29b      	uxth	r3, r3
   12bf4:	2b02      	cmp	r3, #2
   12bf6:	d007      	beq.n	12c08 <tls_interface_recvfrom+0x6c>
   12bf8:	6803      	ldr	r3, [r0, #0]
   12bfa:	b29b      	uxth	r3, r3
   12bfc:	2b04      	cmp	r3, #4
   12bfe:	d003      	beq.n	12c08 <tls_interface_recvfrom+0x6c>
   12c00:	6803      	ldr	r3, [r0, #0]
   12c02:	b29b      	uxth	r3, r3
   12c04:	2b05      	cmp	r3, #5
   12c06:	d1e2      	bne.n	12bce <tls_interface_recvfrom+0x32>
   12c08:	4b08      	ldr	r3, [pc, #32]	; (12c2c <tls_interface_recvfrom+0x90>)
   12c0a:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   12c0e:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   12c12:	2b02      	cmp	r3, #2
   12c14:	d1db      	bne.n	12bce <tls_interface_recvfrom+0x32>
   12c16:	4601      	mov	r1, r0
   12c18:	4620      	mov	r0, r4
   12c1a:	f7ff fe65 	bl	128e8 <secure_client_socket>
   12c1e:	2800      	cmp	r0, #0
   12c20:	d0dc      	beq.n	12bdc <tls_interface_recvfrom+0x40>
   12c22:	dcd5      	bgt.n	12bd0 <tls_interface_recvfrom+0x34>
   12c24:	e7d6      	b.n	12bd4 <tls_interface_recvfrom+0x38>
   12c26:	2009      	movs	r0, #9
   12c28:	e7d2      	b.n	12bd0 <tls_interface_recvfrom+0x34>
   12c2a:	bf00      	nop
   12c2c:	20020e94 	.word	0x20020e94

00012c30 <tls_interface_bind>:
   12c30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c34:	460c      	mov	r4, r1
   12c36:	4617      	mov	r7, r2
   12c38:	4606      	mov	r6, r0
   12c3a:	f004 fe85 	bl	17948 <interface_socket_from_handle_get>
   12c3e:	2800      	cmp	r0, #0
   12c40:	d06d      	beq.n	12d1e <tls_interface_bind+0xee>
   12c42:	6803      	ldr	r3, [r0, #0]
   12c44:	4605      	mov	r5, r0
   12c46:	b29b      	uxth	r3, r3
   12c48:	2b02      	cmp	r3, #2
   12c4a:	d15a      	bne.n	12d02 <tls_interface_bind+0xd2>
   12c4c:	4621      	mov	r1, r4
   12c4e:	463a      	mov	r2, r7
   12c50:	4630      	mov	r0, r6
   12c52:	f003 fec1 	bl	169d8 <ip_interface_bind>
   12c56:	4604      	mov	r4, r0
   12c58:	2800      	cmp	r0, #0
   12c5a:	d148      	bne.n	12cee <tls_interface_bind+0xbe>
   12c5c:	00f7      	lsls	r7, r6, #3
   12c5e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 12d24 <tls_interface_bind+0xf4>
   12c62:	19bb      	adds	r3, r7, r6
   12c64:	f818 3023 	ldrb.w	r3, [r8, r3, lsl #2]
   12c68:	2b01      	cmp	r3, #1
   12c6a:	d002      	beq.n	12c72 <tls_interface_bind+0x42>
   12c6c:	4620      	mov	r0, r4
   12c6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c72:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 12d28 <tls_interface_bind+0xf8>
   12c76:	f247 0281 	movw	r2, #28801	; 0x7081
   12c7a:	eb0b 0a07 	add.w	sl, fp, r7
   12c7e:	f8da 3004 	ldr.w	r3, [sl, #4]
   12c82:	69a9      	ldr	r1, [r5, #24]
   12c84:	4630      	mov	r0, r6
   12c86:	f003 fa1b 	bl	160c0 <ip_interface_request_create>
   12c8a:	4681      	mov	r9, r0
   12c8c:	2800      	cmp	r0, #0
   12c8e:	d044      	beq.n	12d1a <tls_interface_bind+0xea>
   12c90:	f8da 2004 	ldr.w	r2, [sl, #4]
   12c94:	2a00      	cmp	r2, #0
   12c96:	d13a      	bne.n	12d0e <tls_interface_bind+0xde>
   12c98:	19b9      	adds	r1, r7, r6
   12c9a:	eb08 0181 	add.w	r1, r8, r1, lsl #2
   12c9e:	2224      	movs	r2, #36	; 0x24
   12ca0:	f109 0014 	add.w	r0, r9, #20
   12ca4:	f009 f831 	bl	1bd0a <memcpy>
   12ca8:	f8d9 3008 	ldr.w	r3, [r9, #8]
   12cac:	4649      	mov	r1, r9
   12cae:	3324      	adds	r3, #36	; 0x24
   12cb0:	f8c9 3008 	str.w	r3, [r9, #8]
   12cb4:	682a      	ldr	r2, [r5, #0]
   12cb6:	2304      	movs	r3, #4
   12cb8:	0c12      	lsrs	r2, r2, #16
   12cba:	0412      	lsls	r2, r2, #16
   12cbc:	f042 020a 	orr.w	r2, r2, #10
   12cc0:	602a      	str	r2, [r5, #0]
   12cc2:	4628      	mov	r0, r5
   12cc4:	f247 0281 	movw	r2, #28801	; 0x7081
   12cc8:	f003 fa1a 	bl	16100 <ip_interface_request_send>
   12ccc:	b9e8      	cbnz	r0, 12d0a <tls_interface_bind+0xda>
   12cce:	682b      	ldr	r3, [r5, #0]
   12cd0:	00db      	lsls	r3, r3, #3
   12cd2:	d418      	bmi.n	12d06 <tls_interface_bind+0xd6>
   12cd4:	4630      	mov	r0, r6
   12cd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12cda:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12cde:	210b      	movs	r1, #11
   12ce0:	f003 fa22 	bl	16128 <ip_interface_wait>
   12ce4:	2800      	cmp	r0, #0
   12ce6:	d0c1      	beq.n	12c6c <tls_interface_bind+0x3c>
   12ce8:	2304      	movs	r3, #4
   12cea:	4604      	mov	r4, r0
   12cec:	602b      	str	r3, [r5, #0]
   12cee:	2c00      	cmp	r4, #0
   12cf0:	ddbc      	ble.n	12c6c <tls_interface_bind+0x3c>
   12cf2:	4620      	mov	r0, r4
   12cf4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12cf8:	f7fc fec0 	bl	fa7c <bsd_os_errno_set>
   12cfc:	4620      	mov	r0, r4
   12cfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d02:	242d      	movs	r4, #45	; 0x2d
   12d04:	e7f5      	b.n	12cf2 <tls_interface_bind+0xc2>
   12d06:	2473      	movs	r4, #115	; 0x73
   12d08:	e7f3      	b.n	12cf2 <tls_interface_bind+0xc2>
   12d0a:	4604      	mov	r4, r0
   12d0c:	e7ef      	b.n	12cee <tls_interface_bind+0xbe>
   12d0e:	f85b 1036 	ldr.w	r1, [fp, r6, lsl #3]
   12d12:	6800      	ldr	r0, [r0, #0]
   12d14:	f008 fff9 	bl	1bd0a <memcpy>
   12d18:	e7be      	b.n	12c98 <tls_interface_bind+0x68>
   12d1a:	240c      	movs	r4, #12
   12d1c:	e7e9      	b.n	12cf2 <tls_interface_bind+0xc2>
   12d1e:	2409      	movs	r4, #9
   12d20:	e7e7      	b.n	12cf2 <tls_interface_bind+0xc2>
   12d22:	bf00      	nop
   12d24:	20020e94 	.word	0x20020e94
   12d28:	20020fd8 	.word	0x20020fd8

00012d2c <tls_interface_connect>:
   12d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12d2e:	460e      	mov	r6, r1
   12d30:	4617      	mov	r7, r2
   12d32:	4604      	mov	r4, r0
   12d34:	f004 fe08 	bl	17948 <interface_socket_from_handle_get>
   12d38:	b1e8      	cbz	r0, 12d76 <tls_interface_connect+0x4a>
   12d3a:	4b13      	ldr	r3, [pc, #76]	; (12d88 <tls_interface_connect+0x5c>)
   12d3c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   12d40:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   12d44:	2b02      	cmp	r3, #2
   12d46:	d11c      	bne.n	12d82 <tls_interface_connect+0x56>
   12d48:	6803      	ldr	r3, [r0, #0]
   12d4a:	4605      	mov	r5, r0
   12d4c:	b29b      	uxth	r3, r3
   12d4e:	2b02      	cmp	r3, #2
   12d50:	d003      	beq.n	12d5a <tls_interface_connect+0x2e>
   12d52:	6803      	ldr	r3, [r0, #0]
   12d54:	b29b      	uxth	r3, r3
   12d56:	2b04      	cmp	r3, #4
   12d58:	d113      	bne.n	12d82 <tls_interface_connect+0x56>
   12d5a:	463a      	mov	r2, r7
   12d5c:	4631      	mov	r1, r6
   12d5e:	4620      	mov	r0, r4
   12d60:	f003 fd90 	bl	16884 <ip_interface_connect>
   12d64:	b110      	cbz	r0, 12d6c <tls_interface_connect+0x40>
   12d66:	2800      	cmp	r0, #0
   12d68:	dc06      	bgt.n	12d78 <tls_interface_connect+0x4c>
   12d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12d6c:	4629      	mov	r1, r5
   12d6e:	4620      	mov	r0, r4
   12d70:	f7ff fdba 	bl	128e8 <secure_client_socket>
   12d74:	e7f7      	b.n	12d66 <tls_interface_connect+0x3a>
   12d76:	2009      	movs	r0, #9
   12d78:	f7fc fe80 	bl	fa7c <bsd_os_errno_set>
   12d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12d82:	202d      	movs	r0, #45	; 0x2d
   12d84:	e7f8      	b.n	12d78 <tls_interface_connect+0x4c>
   12d86:	bf00      	nop
   12d88:	20020e94 	.word	0x20020e94

00012d8c <tls_interface_listen>:
   12d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d90:	b083      	sub	sp, #12
   12d92:	9101      	str	r1, [sp, #4]
   12d94:	4605      	mov	r5, r0
   12d96:	f004 fdd7 	bl	17948 <interface_socket_from_handle_get>
   12d9a:	2800      	cmp	r0, #0
   12d9c:	d079      	beq.n	12e92 <tls_interface_listen+0x106>
   12d9e:	6903      	ldr	r3, [r0, #16]
   12da0:	4604      	mov	r4, r0
   12da2:	2b01      	cmp	r3, #1
   12da4:	d173      	bne.n	12e8e <tls_interface_listen+0x102>
   12da6:	6803      	ldr	r3, [r0, #0]
   12da8:	b29b      	uxth	r3, r3
   12daa:	2b04      	cmp	r3, #4
   12dac:	d05f      	beq.n	12e6e <tls_interface_listen+0xe2>
   12dae:	6823      	ldr	r3, [r4, #0]
   12db0:	b29b      	uxth	r3, r3
   12db2:	2b0b      	cmp	r3, #11
   12db4:	d16b      	bne.n	12e8e <tls_interface_listen+0x102>
   12db6:	00ee      	lsls	r6, r5, #3
   12db8:	4f37      	ldr	r7, [pc, #220]	; (12e98 <tls_interface_listen+0x10c>)
   12dba:	1973      	adds	r3, r6, r5
   12dbc:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   12dc0:	2b01      	cmp	r3, #1
   12dc2:	d164      	bne.n	12e8e <tls_interface_listen+0x102>
   12dc4:	2201      	movs	r2, #1
   12dc6:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 12e9c <tls_interface_listen+0x110>
   12dca:	1973      	adds	r3, r6, r5
   12dcc:	00ee      	lsls	r6, r5, #3
   12dce:	f807 2023 	strb.w	r2, [r7, r3, lsl #2]
   12dd2:	eb09 0806 	add.w	r8, r9, r6
   12dd6:	69a1      	ldr	r1, [r4, #24]
   12dd8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   12ddc:	f247 0281 	movw	r2, #28801	; 0x7081
   12de0:	4628      	mov	r0, r5
   12de2:	f8d4 a000 	ldr.w	sl, [r4]
   12de6:	f003 f96b 	bl	160c0 <ip_interface_request_create>
   12dea:	4683      	mov	fp, r0
   12dec:	2800      	cmp	r0, #0
   12dee:	d04c      	beq.n	12e8a <tls_interface_listen+0xfe>
   12df0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   12df4:	2a00      	cmp	r2, #0
   12df6:	d142      	bne.n	12e7e <tls_interface_listen+0xf2>
   12df8:	1971      	adds	r1, r6, r5
   12dfa:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   12dfe:	2224      	movs	r2, #36	; 0x24
   12e00:	f10b 0014 	add.w	r0, fp, #20
   12e04:	f008 ff81 	bl	1bd0a <memcpy>
   12e08:	f8db 2008 	ldr.w	r2, [fp, #8]
   12e0c:	4659      	mov	r1, fp
   12e0e:	3224      	adds	r2, #36	; 0x24
   12e10:	f8cb 2008 	str.w	r2, [fp, #8]
   12e14:	6822      	ldr	r2, [r4, #0]
   12e16:	4653      	mov	r3, sl
   12e18:	0c12      	lsrs	r2, r2, #16
   12e1a:	0412      	lsls	r2, r2, #16
   12e1c:	f042 020a 	orr.w	r2, r2, #10
   12e20:	6022      	str	r2, [r4, #0]
   12e22:	4620      	mov	r0, r4
   12e24:	f247 0281 	movw	r2, #28801	; 0x7081
   12e28:	f003 f96a 	bl	16100 <ip_interface_request_send>
   12e2c:	b968      	cbnz	r0, 12e4a <tls_interface_listen+0xbe>
   12e2e:	6823      	ldr	r3, [r4, #0]
   12e30:	00db      	lsls	r3, r3, #3
   12e32:	d40f      	bmi.n	12e54 <tls_interface_listen+0xc8>
   12e34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12e38:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12e3c:	210b      	movs	r1, #11
   12e3e:	4628      	mov	r0, r5
   12e40:	f003 f972 	bl	16128 <ip_interface_wait>
   12e44:	b170      	cbz	r0, 12e64 <tls_interface_listen+0xd8>
   12e46:	f8c4 a000 	str.w	sl, [r4]
   12e4a:	2800      	cmp	r0, #0
   12e4c:	dc03      	bgt.n	12e56 <tls_interface_listen+0xca>
   12e4e:	b003      	add	sp, #12
   12e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e54:	2073      	movs	r0, #115	; 0x73
   12e56:	f7fc fe11 	bl	fa7c <bsd_os_errno_set>
   12e5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12e5e:	b003      	add	sp, #12
   12e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e64:	9901      	ldr	r1, [sp, #4]
   12e66:	4628      	mov	r0, r5
   12e68:	f003 fe4c 	bl	16b04 <ip_interface_listen>
   12e6c:	e7ed      	b.n	12e4a <tls_interface_listen+0xbe>
   12e6e:	00ee      	lsls	r6, r5, #3
   12e70:	4f09      	ldr	r7, [pc, #36]	; (12e98 <tls_interface_listen+0x10c>)
   12e72:	1973      	adds	r3, r6, r5
   12e74:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   12e78:	2b02      	cmp	r3, #2
   12e7a:	d198      	bne.n	12dae <tls_interface_listen+0x22>
   12e7c:	e7a2      	b.n	12dc4 <tls_interface_listen+0x38>
   12e7e:	f859 1035 	ldr.w	r1, [r9, r5, lsl #3]
   12e82:	6800      	ldr	r0, [r0, #0]
   12e84:	f008 ff41 	bl	1bd0a <memcpy>
   12e88:	e7b6      	b.n	12df8 <tls_interface_listen+0x6c>
   12e8a:	200c      	movs	r0, #12
   12e8c:	e7e3      	b.n	12e56 <tls_interface_listen+0xca>
   12e8e:	202d      	movs	r0, #45	; 0x2d
   12e90:	e7e1      	b.n	12e56 <tls_interface_listen+0xca>
   12e92:	2009      	movs	r0, #9
   12e94:	e7df      	b.n	12e56 <tls_interface_listen+0xca>
   12e96:	bf00      	nop
   12e98:	20020e94 	.word	0x20020e94
   12e9c:	20020fd8 	.word	0x20020fd8

00012ea0 <tls_interface_accept>:
   12ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12ea2:	460c      	mov	r4, r1
   12ea4:	4616      	mov	r6, r2
   12ea6:	461f      	mov	r7, r3
   12ea8:	4605      	mov	r5, r0
   12eaa:	f004 fd4d 	bl	17948 <interface_socket_from_handle_get>
   12eae:	2800      	cmp	r0, #0
   12eb0:	d03b      	beq.n	12f2a <tls_interface_accept+0x8a>
   12eb2:	6800      	ldr	r0, [r0, #0]
   12eb4:	b280      	uxth	r0, r0
   12eb6:	2806      	cmp	r0, #6
   12eb8:	d137      	bne.n	12f2a <tls_interface_accept+0x8a>
   12eba:	4621      	mov	r1, r4
   12ebc:	463b      	mov	r3, r7
   12ebe:	4632      	mov	r2, r6
   12ec0:	4628      	mov	r0, r5
   12ec2:	f003 fe95 	bl	16bf0 <ip_interface_accept>
   12ec6:	4604      	mov	r4, r0
   12ec8:	b118      	cbz	r0, 12ed2 <tls_interface_accept+0x32>
   12eca:	2c00      	cmp	r4, #0
   12ecc:	dc2e      	bgt.n	12f2c <tls_interface_accept+0x8c>
   12ece:	4620      	mov	r0, r4
   12ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12ed2:	4628      	mov	r0, r5
   12ed4:	f004 fd38 	bl	17948 <interface_socket_from_handle_get>
   12ed8:	6803      	ldr	r3, [r0, #0]
   12eda:	4f18      	ldr	r7, [pc, #96]	; (12f3c <tls_interface_accept+0x9c>)
   12edc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   12ee0:	6003      	str	r3, [r0, #0]
   12ee2:	6803      	ldr	r3, [r0, #0]
   12ee4:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   12ee8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   12eec:	4606      	mov	r6, r0
   12eee:	6003      	str	r3, [r0, #0]
   12ef0:	eb07 0185 	add.w	r1, r7, r5, lsl #2
   12ef4:	2224      	movs	r2, #36	; 0x24
   12ef6:	4638      	mov	r0, r7
   12ef8:	f008 ff07 	bl	1bd0a <memcpy>
   12efc:	2302      	movs	r3, #2
   12efe:	703b      	strb	r3, [r7, #0]
   12f00:	6833      	ldr	r3, [r6, #0]
   12f02:	4620      	mov	r0, r4
   12f04:	0c1b      	lsrs	r3, r3, #16
   12f06:	041b      	lsls	r3, r3, #16
   12f08:	f043 030b 	orr.w	r3, r3, #11
   12f0c:	6033      	str	r3, [r6, #0]
   12f0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12f12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12f16:	210c      	movs	r1, #12
   12f18:	f003 f906 	bl	16128 <ip_interface_wait>
   12f1c:	4604      	mov	r4, r0
   12f1e:	2800      	cmp	r0, #0
   12f20:	d0d5      	beq.n	12ece <tls_interface_accept+0x2e>
   12f22:	2000      	movs	r0, #0
   12f24:	f003 f9d8 	bl	162d8 <ip_interface_close>
   12f28:	e7cf      	b.n	12eca <tls_interface_accept+0x2a>
   12f2a:	2409      	movs	r4, #9
   12f2c:	4620      	mov	r0, r4
   12f2e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12f32:	f7fc fda3 	bl	fa7c <bsd_os_errno_set>
   12f36:	4620      	mov	r0, r4
   12f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12f3a:	bf00      	nop
   12f3c:	20020e94 	.word	0x20020e94

00012f40 <tls_interface_setopt>:
   12f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12f44:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   12f48:	9e06      	ldr	r6, [sp, #24]
   12f4a:	d11e      	bne.n	12f8a <tls_interface_setopt+0x4a>
   12f4c:	461f      	mov	r7, r3
   12f4e:	4605      	mov	r5, r0
   12f50:	2b00      	cmp	r3, #0
   12f52:	f000 808c 	beq.w	1306e <tls_interface_setopt+0x12e>
   12f56:	4690      	mov	r8, r2
   12f58:	f004 fcf6 	bl	17948 <interface_socket_from_handle_get>
   12f5c:	2800      	cmp	r0, #0
   12f5e:	d07b      	beq.n	13058 <tls_interface_setopt+0x118>
   12f60:	6804      	ldr	r4, [r0, #0]
   12f62:	b2a4      	uxth	r4, r4
   12f64:	2c02      	cmp	r4, #2
   12f66:	d007      	beq.n	12f78 <tls_interface_setopt+0x38>
   12f68:	6803      	ldr	r3, [r0, #0]
   12f6a:	b29b      	uxth	r3, r3
   12f6c:	2b04      	cmp	r3, #4
   12f6e:	d003      	beq.n	12f78 <tls_interface_setopt+0x38>
   12f70:	6803      	ldr	r3, [r0, #0]
   12f72:	b29b      	uxth	r3, r3
   12f74:	2b05      	cmp	r3, #5
   12f76:	d16f      	bne.n	13058 <tls_interface_setopt+0x118>
   12f78:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
   12f7c:	2a04      	cmp	r2, #4
   12f7e:	d87c      	bhi.n	1307a <tls_interface_setopt+0x13a>
   12f80:	e8df f002 	tbb	[pc, r2]
   12f84:	41324e24 	.word	0x41324e24
   12f88:	07          	.byte	0x07
   12f89:	00          	.byte	0x00
   12f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12f8e:	f003 bf67 	b.w	16e60 <ip_interface_setopt>
   12f92:	4c3b      	ldr	r4, [pc, #236]	; (13080 <tls_interface_setopt+0x140>)
   12f94:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   12f98:	b138      	cbz	r0, 12faa <tls_interface_setopt+0x6a>
   12f9a:	f7ff fc3d 	bl	12818 <nrf_free>
   12f9e:	2200      	movs	r2, #0
   12fa0:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   12fa4:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   12fa8:	605a      	str	r2, [r3, #4]
   12faa:	4630      	mov	r0, r6
   12fac:	b34e      	cbz	r6, 13002 <tls_interface_setopt+0xc2>
   12fae:	f7ff fc29 	bl	12804 <nrf_malloc>
   12fb2:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   12fb6:	2800      	cmp	r0, #0
   12fb8:	d057      	beq.n	1306a <tls_interface_setopt+0x12a>
   12fba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   12fbe:	4632      	mov	r2, r6
   12fc0:	4639      	mov	r1, r7
   12fc2:	6066      	str	r6, [r4, #4]
   12fc4:	f008 fea1 	bl	1bd0a <memcpy>
   12fc8:	2000      	movs	r0, #0
   12fca:	e01a      	b.n	13002 <tls_interface_setopt+0xc2>
   12fcc:	2e04      	cmp	r6, #4
   12fce:	d14a      	bne.n	13066 <tls_interface_setopt+0x126>
   12fd0:	6838      	ldr	r0, [r7, #0]
   12fd2:	2800      	cmp	r0, #0
   12fd4:	d039      	beq.n	1304a <tls_interface_setopt+0x10a>
   12fd6:	2801      	cmp	r0, #1
   12fd8:	d145      	bne.n	13066 <tls_interface_setopt+0x126>
   12fda:	4a2a      	ldr	r2, [pc, #168]	; (13084 <tls_interface_setopt+0x144>)
   12fdc:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   12fe0:	f802 0024 	strb.w	r0, [r2, r4, lsl #2]
   12fe4:	2000      	movs	r0, #0
   12fe6:	e00c      	b.n	13002 <tls_interface_setopt+0xc2>
   12fe8:	2e01      	cmp	r6, #1
   12fea:	d13c      	bne.n	13066 <tls_interface_setopt+0x126>
   12fec:	783a      	ldrb	r2, [r7, #0]
   12fee:	2000      	movs	r0, #0
   12ff0:	3200      	adds	r2, #0
   12ff2:	bf18      	it	ne
   12ff4:	2201      	movne	r2, #1
   12ff6:	4b23      	ldr	r3, [pc, #140]	; (13084 <tls_interface_setopt+0x144>)
   12ff8:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   12ffc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   13000:	7062      	strb	r2, [r4, #1]
   13002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13006:	2e04      	cmp	r6, #4
   13008:	d12d      	bne.n	13066 <tls_interface_setopt+0x126>
   1300a:	683a      	ldr	r2, [r7, #0]
   1300c:	2a02      	cmp	r2, #2
   1300e:	d82a      	bhi.n	13066 <tls_interface_setopt+0x126>
   13010:	4b1c      	ldr	r3, [pc, #112]	; (13084 <tls_interface_setopt+0x144>)
   13012:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   13016:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1301a:	70a2      	strb	r2, [r4, #2]
   1301c:	2000      	movs	r0, #0
   1301e:	e7f0      	b.n	13002 <tls_interface_setopt+0xc2>
   13020:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   13024:	d01f      	beq.n	13066 <tls_interface_setopt+0x126>
   13026:	f016 0403 	ands.w	r4, r6, #3
   1302a:	d11c      	bne.n	13066 <tls_interface_setopt+0x126>
   1302c:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   13030:	00ad      	lsls	r5, r5, #2
   13032:	4b14      	ldr	r3, [pc, #80]	; (13084 <tls_interface_setopt+0x144>)
   13034:	1d28      	adds	r0, r5, #4
   13036:	4418      	add	r0, r3
   13038:	442b      	add	r3, r5
   1303a:	4632      	mov	r2, r6
   1303c:	4639      	mov	r1, r7
   1303e:	f883 c003 	strb.w	ip, [r3, #3]
   13042:	f008 fe62 	bl	1bd0a <memcpy>
   13046:	4620      	mov	r0, r4
   13048:	e7db      	b.n	13002 <tls_interface_setopt+0xc2>
   1304a:	2102      	movs	r1, #2
   1304c:	4a0d      	ldr	r2, [pc, #52]	; (13084 <tls_interface_setopt+0x144>)
   1304e:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   13052:	f802 1024 	strb.w	r1, [r2, r4, lsl #2]
   13056:	e7d4      	b.n	13002 <tls_interface_setopt+0xc2>
   13058:	2009      	movs	r0, #9
   1305a:	f7fc fd0f 	bl	fa7c <bsd_os_errno_set>
   1305e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13066:	2016      	movs	r0, #22
   13068:	e7f7      	b.n	1305a <tls_interface_setopt+0x11a>
   1306a:	200c      	movs	r0, #12
   1306c:	e7f5      	b.n	1305a <tls_interface_setopt+0x11a>
   1306e:	200e      	movs	r0, #14
   13070:	f7fc fd04 	bl	fa7c <bsd_os_errno_set>
   13074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13078:	e7c3      	b.n	13002 <tls_interface_setopt+0xc2>
   1307a:	202a      	movs	r0, #42	; 0x2a
   1307c:	e7ed      	b.n	1305a <tls_interface_setopt+0x11a>
   1307e:	bf00      	nop
   13080:	20020fd8 	.word	0x20020fd8
   13084:	20020e94 	.word	0x20020e94

00013088 <tls_interface_getopt>:
   13088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1308c:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   13090:	9f06      	ldr	r7, [sp, #24]
   13092:	d112      	bne.n	130ba <tls_interface_getopt+0x32>
   13094:	461d      	mov	r5, r3
   13096:	b16b      	cbz	r3, 130b4 <tls_interface_getopt+0x2c>
   13098:	b167      	cbz	r7, 130b4 <tls_interface_getopt+0x2c>
   1309a:	4606      	mov	r6, r0
   1309c:	4614      	mov	r4, r2
   1309e:	f004 fc53 	bl	17948 <interface_socket_from_handle_get>
   130a2:	2800      	cmp	r0, #0
   130a4:	d04f      	beq.n	13146 <tls_interface_getopt+0xbe>
   130a6:	3c01      	subs	r4, #1
   130a8:	2c03      	cmp	r4, #3
   130aa:	d852      	bhi.n	13152 <tls_interface_getopt+0xca>
   130ac:	e8df f004 	tbb	[pc, r4]
   130b0:	09152139 	.word	0x09152139
   130b4:	200e      	movs	r0, #14
   130b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   130ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   130be:	f003 bf8b 	b.w	16fd8 <ip_interface_getopt>
   130c2:	683b      	ldr	r3, [r7, #0]
   130c4:	2b04      	cmp	r3, #4
   130c6:	d13c      	bne.n	13142 <tls_interface_getopt+0xba>
   130c8:	4b23      	ldr	r3, [pc, #140]	; (13158 <tls_interface_getopt+0xd0>)
   130ca:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   130ce:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   130d2:	78b3      	ldrb	r3, [r6, #2]
   130d4:	2000      	movs	r0, #0
   130d6:	602b      	str	r3, [r5, #0]
   130d8:	e7ed      	b.n	130b6 <tls_interface_getopt+0x2e>
   130da:	683b      	ldr	r3, [r7, #0]
   130dc:	2b01      	cmp	r3, #1
   130de:	d130      	bne.n	13142 <tls_interface_getopt+0xba>
   130e0:	4b1d      	ldr	r3, [pc, #116]	; (13158 <tls_interface_getopt+0xd0>)
   130e2:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   130e6:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   130ea:	7873      	ldrb	r3, [r6, #1]
   130ec:	2000      	movs	r0, #0
   130ee:	702b      	strb	r3, [r5, #0]
   130f0:	e7e1      	b.n	130b6 <tls_interface_getopt+0x2e>
   130f2:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   130f6:	4918      	ldr	r1, [pc, #96]	; (13158 <tls_interface_getopt+0xd0>)
   130f8:	683b      	ldr	r3, [r7, #0]
   130fa:	00b6      	lsls	r6, r6, #2
   130fc:	198a      	adds	r2, r1, r6
   130fe:	f013 0403 	ands.w	r4, r3, #3
   13102:	78d0      	ldrb	r0, [r2, #3]
   13104:	d121      	bne.n	1314a <tls_interface_getopt+0xc2>
   13106:	089b      	lsrs	r3, r3, #2
   13108:	4283      	cmp	r3, r0
   1310a:	bf28      	it	cs
   1310c:	4603      	movcs	r3, r0
   1310e:	009a      	lsls	r2, r3, #2
   13110:	b1db      	cbz	r3, 1314a <tls_interface_getopt+0xc2>
   13112:	3604      	adds	r6, #4
   13114:	4431      	add	r1, r6
   13116:	603a      	str	r2, [r7, #0]
   13118:	4628      	mov	r0, r5
   1311a:	f008 fdf6 	bl	1bd0a <memcpy>
   1311e:	4620      	mov	r0, r4
   13120:	e7c9      	b.n	130b6 <tls_interface_getopt+0x2e>
   13122:	683b      	ldr	r3, [r7, #0]
   13124:	2b04      	cmp	r3, #4
   13126:	d10c      	bne.n	13142 <tls_interface_getopt+0xba>
   13128:	4b0b      	ldr	r3, [pc, #44]	; (13158 <tls_interface_getopt+0xd0>)
   1312a:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1312e:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   13132:	2000      	movs	r0, #0
   13134:	f1a3 0301 	sub.w	r3, r3, #1
   13138:	fab3 f383 	clz	r3, r3
   1313c:	095b      	lsrs	r3, r3, #5
   1313e:	602b      	str	r3, [r5, #0]
   13140:	e7b9      	b.n	130b6 <tls_interface_getopt+0x2e>
   13142:	2016      	movs	r0, #22
   13144:	e7b7      	b.n	130b6 <tls_interface_getopt+0x2e>
   13146:	2009      	movs	r0, #9
   13148:	e7b5      	b.n	130b6 <tls_interface_getopt+0x2e>
   1314a:	2800      	cmp	r0, #0
   1314c:	d1f9      	bne.n	13142 <tls_interface_getopt+0xba>
   1314e:	6038      	str	r0, [r7, #0]
   13150:	e7b1      	b.n	130b6 <tls_interface_getopt+0x2e>
   13152:	202a      	movs	r0, #42	; 0x2a
   13154:	e7af      	b.n	130b6 <tls_interface_getopt+0x2e>
   13156:	bf00      	nop
   13158:	20020e94 	.word	0x20020e94

0001315c <tls_rpc_ip_event_handler>:
   1315c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1315e:	f248 0581 	movw	r5, #32897	; 0x8081
   13162:	42ab      	cmp	r3, r5
   13164:	460c      	mov	r4, r1
   13166:	d062      	beq.n	1322e <tls_rpc_ip_event_handler+0xd2>
   13168:	f249 0182 	movw	r1, #36994	; 0x9082
   1316c:	428b      	cmp	r3, r1
   1316e:	4606      	mov	r6, r0
   13170:	d02e      	beq.n	131d0 <tls_rpc_ip_event_handler+0x74>
   13172:	f248 0102 	movw	r1, #32770	; 0x8002
   13176:	428b      	cmp	r3, r1
   13178:	d001      	beq.n	1317e <tls_rpc_ip_event_handler+0x22>
   1317a:	2001      	movs	r0, #1
   1317c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1317e:	2c00      	cmp	r4, #0
   13180:	d0fb      	beq.n	1317a <tls_rpc_ip_event_handler+0x1e>
   13182:	6963      	ldr	r3, [r4, #20]
   13184:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   13188:	d002      	beq.n	13190 <tls_rpc_ip_event_handler+0x34>
   1318a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1318e:	d1f4      	bne.n	1317a <tls_rpc_ip_event_handler+0x1e>
   13190:	6823      	ldr	r3, [r4, #0]
   13192:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   13196:	6023      	str	r3, [r4, #0]
   13198:	6955      	ldr	r5, [r2, #20]
   1319a:	2d00      	cmp	r5, #0
   1319c:	d156      	bne.n	1324c <tls_rpc_ip_event_handler+0xf0>
   1319e:	6823      	ldr	r3, [r4, #0]
   131a0:	0c1b      	lsrs	r3, r3, #16
   131a2:	041b      	lsls	r3, r3, #16
   131a4:	f043 0305 	orr.w	r3, r3, #5
   131a8:	6023      	str	r3, [r4, #0]
   131aa:	6823      	ldr	r3, [r4, #0]
   131ac:	00da      	lsls	r2, r3, #3
   131ae:	d50d      	bpl.n	131cc <tls_rpc_ip_event_handler+0x70>
   131b0:	4b2b      	ldr	r3, [pc, #172]	; (13260 <tls_rpc_ip_event_handler+0x104>)
   131b2:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   131b6:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   131ba:	2b02      	cmp	r3, #2
   131bc:	d106      	bne.n	131cc <tls_rpc_ip_event_handler+0x70>
   131be:	4630      	mov	r0, r6
   131c0:	4621      	mov	r1, r4
   131c2:	f7ff fb91 	bl	128e8 <secure_client_socket>
   131c6:	b108      	cbz	r0, 131cc <tls_rpc_ip_event_handler+0x70>
   131c8:	2873      	cmp	r0, #115	; 0x73
   131ca:	d142      	bne.n	13252 <tls_rpc_ip_event_handler+0xf6>
   131cc:	2000      	movs	r0, #0
   131ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   131d0:	2c00      	cmp	r4, #0
   131d2:	d0fb      	beq.n	131cc <tls_rpc_ip_event_handler+0x70>
   131d4:	6823      	ldr	r3, [r4, #0]
   131d6:	b29b      	uxth	r3, r3
   131d8:	2b0b      	cmp	r3, #11
   131da:	d1f7      	bne.n	131cc <tls_rpc_ip_event_handler+0x70>
   131dc:	6915      	ldr	r5, [r2, #16]
   131de:	2d00      	cmp	r5, #0
   131e0:	d134      	bne.n	1324c <tls_rpc_ip_event_handler+0xf0>
   131e2:	6823      	ldr	r3, [r4, #0]
   131e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   131e8:	6023      	str	r3, [r4, #0]
   131ea:	6823      	ldr	r3, [r4, #0]
   131ec:	00db      	lsls	r3, r3, #3
   131ee:	d5ed      	bpl.n	131cc <tls_rpc_ip_event_handler+0x70>
   131f0:	4f1c      	ldr	r7, [pc, #112]	; (13264 <tls_rpc_ip_event_handler+0x108>)
   131f2:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   131f6:	b130      	cbz	r0, 13206 <tls_rpc_ip_event_handler+0xaa>
   131f8:	f7ff fb0e 	bl	12818 <nrf_free>
   131fc:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   13200:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   13204:	605d      	str	r5, [r3, #4]
   13206:	6823      	ldr	r3, [r4, #0]
   13208:	2000      	movs	r0, #0
   1320a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   1320e:	6023      	str	r3, [r4, #0]
   13210:	6823      	ldr	r3, [r4, #0]
   13212:	0c1b      	lsrs	r3, r3, #16
   13214:	041b      	lsls	r3, r3, #16
   13216:	f043 030c 	orr.w	r3, r3, #12
   1321a:	6023      	str	r3, [r4, #0]
   1321c:	6823      	ldr	r3, [r4, #0]
   1321e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13222:	6023      	str	r3, [r4, #0]
   13224:	6823      	ldr	r3, [r4, #0]
   13226:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1322a:	6023      	str	r3, [r4, #0]
   1322c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1322e:	2900      	cmp	r1, #0
   13230:	d0cc      	beq.n	131cc <tls_rpc_ip_event_handler+0x70>
   13232:	680b      	ldr	r3, [r1, #0]
   13234:	b29b      	uxth	r3, r3
   13236:	2b0a      	cmp	r3, #10
   13238:	d1c8      	bne.n	131cc <tls_rpc_ip_event_handler+0x70>
   1323a:	6950      	ldr	r0, [r2, #20]
   1323c:	b938      	cbnz	r0, 1324e <tls_rpc_ip_event_handler+0xf2>
   1323e:	680b      	ldr	r3, [r1, #0]
   13240:	0c1b      	lsrs	r3, r3, #16
   13242:	041b      	lsls	r3, r3, #16
   13244:	f043 030b 	orr.w	r3, r3, #11
   13248:	600b      	str	r3, [r1, #0]
   1324a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1324c:	4628      	mov	r0, r5
   1324e:	f002 ff2d 	bl	160ac <rpc_error_to_nrf_bsd_error>
   13252:	6060      	str	r0, [r4, #4]
   13254:	6823      	ldr	r3, [r4, #0]
   13256:	2000      	movs	r0, #0
   13258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1325c:	6023      	str	r3, [r4, #0]
   1325e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13260:	20020e94 	.word	0x20020e94
   13264:	20020fd8 	.word	0x20020fd8

00013268 <rpc_dfu_event_handler>:
   13268:	b508      	push	{r3, lr}
   1326a:	4a08      	ldr	r2, [pc, #32]	; (1328c <rpc_dfu_event_handler+0x24>)
   1326c:	68c1      	ldr	r1, [r0, #12]
   1326e:	8812      	ldrh	r2, [r2, #0]
   13270:	4603      	mov	r3, r0
   13272:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   13276:	d005      	beq.n	13284 <rpc_dfu_event_handler+0x1c>
   13278:	6800      	ldr	r0, [r0, #0]
   1327a:	b110      	cbz	r0, 13282 <rpc_dfu_event_handler+0x1a>
   1327c:	f7fe fefc 	bl	12078 <rpc_dfu_client_data_free>
   13280:	2000      	movs	r0, #0
   13282:	bd08      	pop	{r3, pc}
   13284:	4a02      	ldr	r2, [pc, #8]	; (13290 <rpc_dfu_event_handler+0x28>)
   13286:	2001      	movs	r0, #1
   13288:	6013      	str	r3, [r2, #0]
   1328a:	bd08      	pop	{r3, pc}
   1328c:	20021e7c 	.word	0x20021e7c
   13290:	20021024 	.word	0x20021024

00013294 <mfu_interface_init>:
   13294:	2300      	movs	r3, #0
   13296:	b510      	push	{r4, lr}
   13298:	4808      	ldr	r0, [pc, #32]	; (132bc <mfu_interface_init+0x28>)
   1329a:	4909      	ldr	r1, [pc, #36]	; (132c0 <mfu_interface_init+0x2c>)
   1329c:	4a09      	ldr	r2, [pc, #36]	; (132c4 <mfu_interface_init+0x30>)
   1329e:	4c0a      	ldr	r4, [pc, #40]	; (132c8 <mfu_interface_init+0x34>)
   132a0:	8003      	strh	r3, [r0, #0]
   132a2:	600b      	str	r3, [r1, #0]
   132a4:	6013      	str	r3, [r2, #0]
   132a6:	6023      	str	r3, [r4, #0]
   132a8:	f7fe feb0 	bl	1200c <rpc_dfu_client_init>
   132ac:	b910      	cbnz	r0, 132b4 <mfu_interface_init+0x20>
   132ae:	2301      	movs	r3, #1
   132b0:	6023      	str	r3, [r4, #0]
   132b2:	bd10      	pop	{r4, pc}
   132b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   132b8:	bd10      	pop	{r4, pc}
   132ba:	bf00      	nop
   132bc:	20021e7c 	.word	0x20021e7c
   132c0:	20021024 	.word	0x20021024
   132c4:	20021020 	.word	0x20021020
   132c8:	20021018 	.word	0x20021018

000132cc <mfu_interface_open>:
   132cc:	2801      	cmp	r0, #1
   132ce:	b508      	push	{r3, lr}
   132d0:	d10b      	bne.n	132ea <mfu_interface_open+0x1e>
   132d2:	f240 2303 	movw	r3, #515	; 0x203
   132d6:	429a      	cmp	r2, r3
   132d8:	d107      	bne.n	132ea <mfu_interface_open+0x1e>
   132da:	4b09      	ldr	r3, [pc, #36]	; (13300 <mfu_interface_open+0x34>)
   132dc:	681a      	ldr	r2, [r3, #0]
   132de:	2a01      	cmp	r2, #1
   132e0:	d109      	bne.n	132f6 <mfu_interface_open+0x2a>
   132e2:	2202      	movs	r2, #2
   132e4:	601a      	str	r2, [r3, #0]
   132e6:	4807      	ldr	r0, [pc, #28]	; (13304 <mfu_interface_open+0x38>)
   132e8:	bd08      	pop	{r3, pc}
   132ea:	2016      	movs	r0, #22
   132ec:	f7fc fbc6 	bl	fa7c <bsd_os_errno_set>
   132f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   132f4:	bd08      	pop	{r3, pc}
   132f6:	f7fc fbc1 	bl	fa7c <bsd_os_errno_set>
   132fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   132fe:	bd08      	pop	{r3, pc}
   13300:	20021018 	.word	0x20021018
   13304:	49765432 	.word	0x49765432

00013308 <mfu_interface_close>:
   13308:	b5f0      	push	{r4, r5, r6, r7, lr}
   1330a:	4c32      	ldr	r4, [pc, #200]	; (133d4 <mfu_interface_close+0xcc>)
   1330c:	b083      	sub	sp, #12
   1330e:	6823      	ldr	r3, [r4, #0]
   13310:	1e9a      	subs	r2, r3, #2
   13312:	2a01      	cmp	r2, #1
   13314:	d857      	bhi.n	133c6 <mfu_interface_close+0xbe>
   13316:	2b03      	cmp	r3, #3
   13318:	d004      	beq.n	13324 <mfu_interface_close+0x1c>
   1331a:	2301      	movs	r3, #1
   1331c:	2000      	movs	r0, #0
   1331e:	6023      	str	r3, [r4, #0]
   13320:	b003      	add	sp, #12
   13322:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13324:	2100      	movs	r1, #0
   13326:	4668      	mov	r0, sp
   13328:	f7fe fe76 	bl	12018 <rpc_dfu_client_request_alloc>
   1332c:	4603      	mov	r3, r0
   1332e:	2800      	cmp	r0, #0
   13330:	d13d      	bne.n	133ae <mfu_interface_close+0xa6>
   13332:	2104      	movs	r1, #4
   13334:	4e28      	ldr	r6, [pc, #160]	; (133d8 <mfu_interface_close+0xd0>)
   13336:	9800      	ldr	r0, [sp, #0]
   13338:	8832      	ldrh	r2, [r6, #0]
   1333a:	7201      	strb	r1, [r0, #8]
   1333c:	3201      	adds	r2, #1
   1333e:	b292      	uxth	r2, r2
   13340:	0411      	lsls	r1, r2, #16
   13342:	f041 0106 	orr.w	r1, r1, #6
   13346:	4d25      	ldr	r5, [pc, #148]	; (133dc <mfu_interface_close+0xd4>)
   13348:	60c1      	str	r1, [r0, #12]
   1334a:	7103      	strb	r3, [r0, #4]
   1334c:	7143      	strb	r3, [r0, #5]
   1334e:	7183      	strb	r3, [r0, #6]
   13350:	71c3      	strb	r3, [r0, #7]
   13352:	7243      	strb	r3, [r0, #9]
   13354:	7283      	strb	r3, [r0, #10]
   13356:	72c3      	strb	r3, [r0, #11]
   13358:	2106      	movs	r1, #6
   1335a:	8032      	strh	r2, [r6, #0]
   1335c:	602b      	str	r3, [r5, #0]
   1335e:	f7fe fe6f 	bl	12040 <rpc_dfu_client_request_send>
   13362:	b9d8      	cbnz	r0, 1339c <mfu_interface_close+0x94>
   13364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13368:	ae02      	add	r6, sp, #8
   1336a:	4627      	mov	r7, r4
   1336c:	f846 3d04 	str.w	r3, [r6, #-4]!
   13370:	e004      	b.n	1337c <mfu_interface_close+0x74>
   13372:	4631      	mov	r1, r6
   13374:	4638      	mov	r0, r7
   13376:	f7fc faed 	bl	f954 <bsd_os_timedwait>
   1337a:	b9f0      	cbnz	r0, 133ba <mfu_interface_close+0xb2>
   1337c:	6828      	ldr	r0, [r5, #0]
   1337e:	2800      	cmp	r0, #0
   13380:	d0f7      	beq.n	13372 <mfu_interface_close+0x6a>
   13382:	6905      	ldr	r5, [r0, #16]
   13384:	f7fe fe70 	bl	12068 <rpc_dfu_client_message_free>
   13388:	2d00      	cmp	r5, #0
   1338a:	d0c6      	beq.n	1331a <mfu_interface_close+0x12>
   1338c:	4b14      	ldr	r3, [pc, #80]	; (133e0 <mfu_interface_close+0xd8>)
   1338e:	2008      	movs	r0, #8
   13390:	601d      	str	r5, [r3, #0]
   13392:	f7fc fb73 	bl	fa7c <bsd_os_errno_set>
   13396:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1339a:	e7c1      	b.n	13320 <mfu_interface_close+0x18>
   1339c:	9800      	ldr	r0, [sp, #0]
   1339e:	6803      	ldr	r3, [r0, #0]
   133a0:	b11b      	cbz	r3, 133aa <mfu_interface_close+0xa2>
   133a2:	4618      	mov	r0, r3
   133a4:	f7fe fe68 	bl	12078 <rpc_dfu_client_data_free>
   133a8:	9800      	ldr	r0, [sp, #0]
   133aa:	f7fe fe5d 	bl	12068 <rpc_dfu_client_message_free>
   133ae:	200c      	movs	r0, #12
   133b0:	f7fc fb64 	bl	fa7c <bsd_os_errno_set>
   133b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   133b8:	e7b2      	b.n	13320 <mfu_interface_close+0x18>
   133ba:	203c      	movs	r0, #60	; 0x3c
   133bc:	f7fc fb5e 	bl	fa7c <bsd_os_errno_set>
   133c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   133c4:	e7ac      	b.n	13320 <mfu_interface_close+0x18>
   133c6:	2001      	movs	r0, #1
   133c8:	f7fc fb58 	bl	fa7c <bsd_os_errno_set>
   133cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   133d0:	e7a6      	b.n	13320 <mfu_interface_close+0x18>
   133d2:	bf00      	nop
   133d4:	20021018 	.word	0x20021018
   133d8:	20021e7c 	.word	0x20021e7c
   133dc:	20021024 	.word	0x20021024
   133e0:	2002101c 	.word	0x2002101c

000133e4 <mfu_interface_sendto>:
   133e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   133e8:	4e5a      	ldr	r6, [pc, #360]	; (13554 <mfu_interface_sendto+0x170>)
   133ea:	4615      	mov	r5, r2
   133ec:	6833      	ldr	r3, [r6, #0]
   133ee:	b082      	sub	sp, #8
   133f0:	1e9a      	subs	r2, r3, #2
   133f2:	2a01      	cmp	r2, #1
   133f4:	f200 80a7 	bhi.w	13546 <mfu_interface_sendto+0x162>
   133f8:	460f      	mov	r7, r1
   133fa:	2900      	cmp	r1, #0
   133fc:	f000 809d 	beq.w	1353a <mfu_interface_sendto+0x156>
   13400:	2d00      	cmp	r5, #0
   13402:	f000 809a 	beq.w	1353a <mfu_interface_sendto+0x156>
   13406:	2b02      	cmp	r3, #2
   13408:	46e8      	mov	r8, sp
   1340a:	d04e      	beq.n	134aa <mfu_interface_sendto+0xc6>
   1340c:	4640      	mov	r0, r8
   1340e:	4629      	mov	r1, r5
   13410:	f7fe fe02 	bl	12018 <rpc_dfu_client_request_alloc>
   13414:	4606      	mov	r6, r0
   13416:	b140      	cbz	r0, 1342a <mfu_interface_sendto+0x46>
   13418:	200c      	movs	r0, #12
   1341a:	f7fc fb2f 	bl	fa7c <bsd_os_errno_set>
   1341e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   13422:	4628      	mov	r0, r5
   13424:	b002      	add	sp, #8
   13426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1342a:	9b00      	ldr	r3, [sp, #0]
   1342c:	4639      	mov	r1, r7
   1342e:	6818      	ldr	r0, [r3, #0]
   13430:	462a      	mov	r2, r5
   13432:	f008 fc6a 	bl	1bd0a <memcpy>
   13436:	2104      	movs	r1, #4
   13438:	4c47      	ldr	r4, [pc, #284]	; (13558 <mfu_interface_sendto+0x174>)
   1343a:	9800      	ldr	r0, [sp, #0]
   1343c:	8823      	ldrh	r3, [r4, #0]
   1343e:	6045      	str	r5, [r0, #4]
   13440:	3301      	adds	r3, #1
   13442:	b29b      	uxth	r3, r3
   13444:	041a      	lsls	r2, r3, #16
   13446:	8023      	strh	r3, [r4, #0]
   13448:	430a      	orrs	r2, r1
   1344a:	4c44      	ldr	r4, [pc, #272]	; (1355c <mfu_interface_sendto+0x178>)
   1344c:	60c2      	str	r2, [r0, #12]
   1344e:	7246      	strb	r6, [r0, #9]
   13450:	7286      	strb	r6, [r0, #10]
   13452:	72c6      	strb	r6, [r0, #11]
   13454:	7201      	strb	r1, [r0, #8]
   13456:	6026      	str	r6, [r4, #0]
   13458:	f7fe fdf2 	bl	12040 <rpc_dfu_client_request_send>
   1345c:	2800      	cmp	r0, #0
   1345e:	d162      	bne.n	13526 <mfu_interface_sendto+0x142>
   13460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13464:	ae02      	add	r6, sp, #8
   13466:	4f3b      	ldr	r7, [pc, #236]	; (13554 <mfu_interface_sendto+0x170>)
   13468:	f846 3d04 	str.w	r3, [r6, #-4]!
   1346c:	e004      	b.n	13478 <mfu_interface_sendto+0x94>
   1346e:	4631      	mov	r1, r6
   13470:	4638      	mov	r0, r7
   13472:	f7fc fa6f 	bl	f954 <bsd_os_timedwait>
   13476:	b978      	cbnz	r0, 13498 <mfu_interface_sendto+0xb4>
   13478:	6820      	ldr	r0, [r4, #0]
   1347a:	2800      	cmp	r0, #0
   1347c:	d0f7      	beq.n	1346e <mfu_interface_sendto+0x8a>
   1347e:	6904      	ldr	r4, [r0, #16]
   13480:	f7fe fdf2 	bl	12068 <rpc_dfu_client_message_free>
   13484:	2c00      	cmp	r4, #0
   13486:	d0cc      	beq.n	13422 <mfu_interface_sendto+0x3e>
   13488:	4b35      	ldr	r3, [pc, #212]	; (13560 <mfu_interface_sendto+0x17c>)
   1348a:	2008      	movs	r0, #8
   1348c:	601c      	str	r4, [r3, #0]
   1348e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   13492:	f7fc faf3 	bl	fa7c <bsd_os_errno_set>
   13496:	e7c4      	b.n	13422 <mfu_interface_sendto+0x3e>
   13498:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1349c:	203c      	movs	r0, #60	; 0x3c
   1349e:	f7fc faed 	bl	fa7c <bsd_os_errno_set>
   134a2:	4628      	mov	r0, r5
   134a4:	b002      	add	sp, #8
   134a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   134aa:	4640      	mov	r0, r8
   134ac:	2100      	movs	r1, #0
   134ae:	f7fe fdb3 	bl	12018 <rpc_dfu_client_request_alloc>
   134b2:	4602      	mov	r2, r0
   134b4:	2800      	cmp	r0, #0
   134b6:	d1af      	bne.n	13418 <mfu_interface_sendto+0x34>
   134b8:	f04f 0c08 	mov.w	ip, #8
   134bc:	4926      	ldr	r1, [pc, #152]	; (13558 <mfu_interface_sendto+0x174>)
   134be:	4829      	ldr	r0, [pc, #164]	; (13564 <mfu_interface_sendto+0x180>)
   134c0:	880b      	ldrh	r3, [r1, #0]
   134c2:	6804      	ldr	r4, [r0, #0]
   134c4:	3301      	adds	r3, #1
   134c6:	9800      	ldr	r0, [sp, #0]
   134c8:	b29b      	uxth	r3, r3
   134ca:	800b      	strh	r3, [r1, #0]
   134cc:	041b      	lsls	r3, r3, #16
   134ce:	f043 0303 	orr.w	r3, r3, #3
   134d2:	6104      	str	r4, [r0, #16]
   134d4:	4c21      	ldr	r4, [pc, #132]	; (1355c <mfu_interface_sendto+0x178>)
   134d6:	60c3      	str	r3, [r0, #12]
   134d8:	7102      	strb	r2, [r0, #4]
   134da:	7142      	strb	r2, [r0, #5]
   134dc:	7182      	strb	r2, [r0, #6]
   134de:	71c2      	strb	r2, [r0, #7]
   134e0:	7242      	strb	r2, [r0, #9]
   134e2:	7282      	strb	r2, [r0, #10]
   134e4:	72c2      	strb	r2, [r0, #11]
   134e6:	f880 c008 	strb.w	ip, [r0, #8]
   134ea:	2103      	movs	r1, #3
   134ec:	6022      	str	r2, [r4, #0]
   134ee:	f7fe fda7 	bl	12040 <rpc_dfu_client_request_send>
   134f2:	b9c0      	cbnz	r0, 13526 <mfu_interface_sendto+0x142>
   134f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   134f8:	f10d 0908 	add.w	r9, sp, #8
   134fc:	f849 3d04 	str.w	r3, [r9, #-4]!
   13500:	46b2      	mov	sl, r6
   13502:	e005      	b.n	13510 <mfu_interface_sendto+0x12c>
   13504:	4649      	mov	r1, r9
   13506:	4650      	mov	r0, sl
   13508:	f7fc fa24 	bl	f954 <bsd_os_timedwait>
   1350c:	2800      	cmp	r0, #0
   1350e:	d1c3      	bne.n	13498 <mfu_interface_sendto+0xb4>
   13510:	6820      	ldr	r0, [r4, #0]
   13512:	2800      	cmp	r0, #0
   13514:	d0f6      	beq.n	13504 <mfu_interface_sendto+0x120>
   13516:	6904      	ldr	r4, [r0, #16]
   13518:	f7fe fda6 	bl	12068 <rpc_dfu_client_message_free>
   1351c:	2c00      	cmp	r4, #0
   1351e:	d1b3      	bne.n	13488 <mfu_interface_sendto+0xa4>
   13520:	2303      	movs	r3, #3
   13522:	6033      	str	r3, [r6, #0]
   13524:	e772      	b.n	1340c <mfu_interface_sendto+0x28>
   13526:	9800      	ldr	r0, [sp, #0]
   13528:	6803      	ldr	r3, [r0, #0]
   1352a:	b11b      	cbz	r3, 13534 <mfu_interface_sendto+0x150>
   1352c:	4618      	mov	r0, r3
   1352e:	f7fe fda3 	bl	12078 <rpc_dfu_client_data_free>
   13532:	9800      	ldr	r0, [sp, #0]
   13534:	f7fe fd98 	bl	12068 <rpc_dfu_client_message_free>
   13538:	e76e      	b.n	13418 <mfu_interface_sendto+0x34>
   1353a:	2016      	movs	r0, #22
   1353c:	f7fc fa9e 	bl	fa7c <bsd_os_errno_set>
   13540:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   13544:	e76d      	b.n	13422 <mfu_interface_sendto+0x3e>
   13546:	2001      	movs	r0, #1
   13548:	f7fc fa98 	bl	fa7c <bsd_os_errno_set>
   1354c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   13550:	e767      	b.n	13422 <mfu_interface_sendto+0x3e>
   13552:	bf00      	nop
   13554:	20021018 	.word	0x20021018
   13558:	20021e7c 	.word	0x20021e7c
   1355c:	20021024 	.word	0x20021024
   13560:	2002101c 	.word	0x2002101c
   13564:	20021020 	.word	0x20021020

00013568 <mfu_interface_setopt>:
   13568:	b5f0      	push	{r4, r5, r6, r7, lr}
   1356a:	4846      	ldr	r0, [pc, #280]	; (13684 <mfu_interface_setopt+0x11c>)
   1356c:	b083      	sub	sp, #12
   1356e:	6800      	ldr	r0, [r0, #0]
   13570:	3802      	subs	r0, #2
   13572:	2801      	cmp	r0, #1
   13574:	d877      	bhi.n	13666 <mfu_interface_setopt+0xfe>
   13576:	f240 2003 	movw	r0, #515	; 0x203
   1357a:	4281      	cmp	r1, r0
   1357c:	d16d      	bne.n	1365a <mfu_interface_setopt+0xf2>
   1357e:	3a04      	subs	r2, #4
   13580:	2a03      	cmp	r2, #3
   13582:	d85c      	bhi.n	1363e <mfu_interface_setopt+0xd6>
   13584:	e8df f002 	tbb	[pc, r2]
   13588:	514e024b 	.word	0x514e024b
   1358c:	2407      	movs	r4, #7
   1358e:	4625      	mov	r5, r4
   13590:	2100      	movs	r1, #0
   13592:	4668      	mov	r0, sp
   13594:	f7fe fd40 	bl	12018 <rpc_dfu_client_request_alloc>
   13598:	4603      	mov	r3, r0
   1359a:	2800      	cmp	r0, #0
   1359c:	d138      	bne.n	13610 <mfu_interface_setopt+0xa8>
   1359e:	2704      	movs	r7, #4
   135a0:	4e39      	ldr	r6, [pc, #228]	; (13688 <mfu_interface_setopt+0x120>)
   135a2:	9800      	ldr	r0, [sp, #0]
   135a4:	8832      	ldrh	r2, [r6, #0]
   135a6:	4629      	mov	r1, r5
   135a8:	3201      	adds	r2, #1
   135aa:	b292      	uxth	r2, r2
   135ac:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   135b0:	4c36      	ldr	r4, [pc, #216]	; (1368c <mfu_interface_setopt+0x124>)
   135b2:	60c5      	str	r5, [r0, #12]
   135b4:	7103      	strb	r3, [r0, #4]
   135b6:	7143      	strb	r3, [r0, #5]
   135b8:	7183      	strb	r3, [r0, #6]
   135ba:	71c3      	strb	r3, [r0, #7]
   135bc:	7243      	strb	r3, [r0, #9]
   135be:	7283      	strb	r3, [r0, #10]
   135c0:	72c3      	strb	r3, [r0, #11]
   135c2:	7207      	strb	r7, [r0, #8]
   135c4:	8032      	strh	r2, [r6, #0]
   135c6:	6023      	str	r3, [r4, #0]
   135c8:	f7fe fd3a 	bl	12040 <rpc_dfu_client_request_send>
   135cc:	b9b8      	cbnz	r0, 135fe <mfu_interface_setopt+0x96>
   135ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   135d2:	ad02      	add	r5, sp, #8
   135d4:	4e2b      	ldr	r6, [pc, #172]	; (13684 <mfu_interface_setopt+0x11c>)
   135d6:	f845 3d04 	str.w	r3, [r5, #-4]!
   135da:	e005      	b.n	135e8 <mfu_interface_setopt+0x80>
   135dc:	4629      	mov	r1, r5
   135de:	4630      	mov	r0, r6
   135e0:	f7fc f9b8 	bl	f954 <bsd_os_timedwait>
   135e4:	2800      	cmp	r0, #0
   135e6:	d131      	bne.n	1364c <mfu_interface_setopt+0xe4>
   135e8:	6820      	ldr	r0, [r4, #0]
   135ea:	2800      	cmp	r0, #0
   135ec:	d0f6      	beq.n	135dc <mfu_interface_setopt+0x74>
   135ee:	6904      	ldr	r4, [r0, #16]
   135f0:	f7fe fd3a 	bl	12068 <rpc_dfu_client_message_free>
   135f4:	2c00      	cmp	r4, #0
   135f6:	d13c      	bne.n	13672 <mfu_interface_setopt+0x10a>
   135f8:	4620      	mov	r0, r4
   135fa:	b003      	add	sp, #12
   135fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   135fe:	9800      	ldr	r0, [sp, #0]
   13600:	6803      	ldr	r3, [r0, #0]
   13602:	b11b      	cbz	r3, 1360c <mfu_interface_setopt+0xa4>
   13604:	4618      	mov	r0, r3
   13606:	f7fe fd37 	bl	12078 <rpc_dfu_client_data_free>
   1360a:	9800      	ldr	r0, [sp, #0]
   1360c:	f7fe fd2c 	bl	12068 <rpc_dfu_client_message_free>
   13610:	200c      	movs	r0, #12
   13612:	f7fc fa33 	bl	fa7c <bsd_os_errno_set>
   13616:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1361a:	b003      	add	sp, #12
   1361c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1361e:	2405      	movs	r4, #5
   13620:	4625      	mov	r5, r4
   13622:	e7b5      	b.n	13590 <mfu_interface_setopt+0x28>
   13624:	2408      	movs	r4, #8
   13626:	4625      	mov	r5, r4
   13628:	e7b2      	b.n	13590 <mfu_interface_setopt+0x28>
   1362a:	b1b3      	cbz	r3, 1365a <mfu_interface_setopt+0xf2>
   1362c:	9a08      	ldr	r2, [sp, #32]
   1362e:	2a04      	cmp	r2, #4
   13630:	d113      	bne.n	1365a <mfu_interface_setopt+0xf2>
   13632:	2000      	movs	r0, #0
   13634:	681a      	ldr	r2, [r3, #0]
   13636:	4b16      	ldr	r3, [pc, #88]	; (13690 <mfu_interface_setopt+0x128>)
   13638:	601a      	str	r2, [r3, #0]
   1363a:	b003      	add	sp, #12
   1363c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1363e:	202a      	movs	r0, #42	; 0x2a
   13640:	f7fc fa1c 	bl	fa7c <bsd_os_errno_set>
   13644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13648:	b003      	add	sp, #12
   1364a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1364c:	203c      	movs	r0, #60	; 0x3c
   1364e:	f7fc fa15 	bl	fa7c <bsd_os_errno_set>
   13652:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13656:	b003      	add	sp, #12
   13658:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1365a:	2016      	movs	r0, #22
   1365c:	f7fc fa0e 	bl	fa7c <bsd_os_errno_set>
   13660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13664:	e7c9      	b.n	135fa <mfu_interface_setopt+0x92>
   13666:	2001      	movs	r0, #1
   13668:	f7fc fa08 	bl	fa7c <bsd_os_errno_set>
   1366c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13670:	e7c3      	b.n	135fa <mfu_interface_setopt+0x92>
   13672:	4b08      	ldr	r3, [pc, #32]	; (13694 <mfu_interface_setopt+0x12c>)
   13674:	2008      	movs	r0, #8
   13676:	601c      	str	r4, [r3, #0]
   13678:	f7fc fa00 	bl	fa7c <bsd_os_errno_set>
   1367c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13680:	e7bb      	b.n	135fa <mfu_interface_setopt+0x92>
   13682:	bf00      	nop
   13684:	20021018 	.word	0x20021018
   13688:	20021e7c 	.word	0x20021e7c
   1368c:	20021024 	.word	0x20021024
   13690:	20021020 	.word	0x20021020
   13694:	2002101c 	.word	0x2002101c

00013698 <mfu_interface_getopt>:
   13698:	f240 2003 	movw	r0, #515	; 0x203
   1369c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   136a0:	4281      	cmp	r1, r0
   136a2:	b082      	sub	sp, #8
   136a4:	9e08      	ldr	r6, [sp, #32]
   136a6:	f040 80ae 	bne.w	13806 <mfu_interface_getopt+0x16e>
   136aa:	461d      	mov	r5, r3
   136ac:	2b00      	cmp	r3, #0
   136ae:	f000 80aa 	beq.w	13806 <mfu_interface_getopt+0x16e>
   136b2:	2e00      	cmp	r6, #0
   136b4:	f000 80a7 	beq.w	13806 <mfu_interface_getopt+0x16e>
   136b8:	4b5e      	ldr	r3, [pc, #376]	; (13834 <mfu_interface_getopt+0x19c>)
   136ba:	681b      	ldr	r3, [r3, #0]
   136bc:	3b02      	subs	r3, #2
   136be:	2b01      	cmp	r3, #1
   136c0:	f200 80a7 	bhi.w	13812 <mfu_interface_getopt+0x17a>
   136c4:	3a01      	subs	r2, #1
   136c6:	2a13      	cmp	r2, #19
   136c8:	d879      	bhi.n	137be <mfu_interface_getopt+0x126>
   136ca:	e8df f002 	tbb	[pc, r2]
   136ce:	5f17      	.short	0x5f17
   136d0:	78787878 	.word	0x78787878
   136d4:	78787872 	.word	0x78787872
   136d8:	78787878 	.word	0x78787878
   136dc:	78787878 	.word	0x78787878
   136e0:	0a78      	.short	0x0a78
   136e2:	6833      	ldr	r3, [r6, #0]
   136e4:	2b04      	cmp	r3, #4
   136e6:	f040 808e 	bne.w	13806 <mfu_interface_getopt+0x16e>
   136ea:	2200      	movs	r2, #0
   136ec:	4610      	mov	r0, r2
   136ee:	4b52      	ldr	r3, [pc, #328]	; (13838 <mfu_interface_getopt+0x1a0>)
   136f0:	6819      	ldr	r1, [r3, #0]
   136f2:	601a      	str	r2, [r3, #0]
   136f4:	6029      	str	r1, [r5, #0]
   136f6:	b002      	add	sp, #8
   136f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   136fc:	6833      	ldr	r3, [r6, #0]
   136fe:	2b24      	cmp	r3, #36	; 0x24
   13700:	f040 8081 	bne.w	13806 <mfu_interface_getopt+0x16e>
   13704:	2401      	movs	r4, #1
   13706:	46a0      	mov	r8, r4
   13708:	2100      	movs	r1, #0
   1370a:	4668      	mov	r0, sp
   1370c:	f7fe fc84 	bl	12018 <rpc_dfu_client_request_alloc>
   13710:	2800      	cmp	r0, #0
   13712:	d146      	bne.n	137a2 <mfu_interface_getopt+0x10a>
   13714:	4949      	ldr	r1, [pc, #292]	; (1383c <mfu_interface_getopt+0x1a4>)
   13716:	9b00      	ldr	r3, [sp, #0]
   13718:	880a      	ldrh	r2, [r1, #0]
   1371a:	f1b8 0f03 	cmp.w	r8, #3
   1371e:	f102 0201 	add.w	r2, r2, #1
   13722:	b292      	uxth	r2, r2
   13724:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   13728:	7118      	strb	r0, [r3, #4]
   1372a:	800a      	strh	r2, [r1, #0]
   1372c:	60dc      	str	r4, [r3, #12]
   1372e:	7158      	strb	r0, [r3, #5]
   13730:	7198      	strb	r0, [r3, #6]
   13732:	71d8      	strb	r0, [r3, #7]
   13734:	d04b      	beq.n	137ce <mfu_interface_getopt+0x136>
   13736:	2104      	movs	r1, #4
   13738:	2200      	movs	r2, #0
   1373a:	4f41      	ldr	r7, [pc, #260]	; (13840 <mfu_interface_getopt+0x1a8>)
   1373c:	6099      	str	r1, [r3, #8]
   1373e:	4618      	mov	r0, r3
   13740:	4641      	mov	r1, r8
   13742:	603a      	str	r2, [r7, #0]
   13744:	f7fe fc7c 	bl	12040 <rpc_dfu_client_request_send>
   13748:	2800      	cmp	r0, #0
   1374a:	d14d      	bne.n	137e8 <mfu_interface_getopt+0x150>
   1374c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13750:	ac02      	add	r4, sp, #8
   13752:	f844 3d04 	str.w	r3, [r4, #-4]!
   13756:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 13834 <mfu_interface_getopt+0x19c>
   1375a:	e005      	b.n	13768 <mfu_interface_getopt+0xd0>
   1375c:	4621      	mov	r1, r4
   1375e:	4640      	mov	r0, r8
   13760:	f7fc f8f8 	bl	f954 <bsd_os_timedwait>
   13764:	2800      	cmp	r0, #0
   13766:	d137      	bne.n	137d8 <mfu_interface_getopt+0x140>
   13768:	6839      	ldr	r1, [r7, #0]
   1376a:	2900      	cmp	r1, #0
   1376c:	d0f6      	beq.n	1375c <mfu_interface_getopt+0xc4>
   1376e:	690c      	ldr	r4, [r1, #16]
   13770:	2c00      	cmp	r4, #0
   13772:	d154      	bne.n	1381e <mfu_interface_getopt+0x186>
   13774:	6832      	ldr	r2, [r6, #0]
   13776:	3114      	adds	r1, #20
   13778:	4628      	mov	r0, r5
   1377a:	f008 fac6 	bl	1bd0a <memcpy>
   1377e:	6838      	ldr	r0, [r7, #0]
   13780:	f7fe fc72 	bl	12068 <rpc_dfu_client_message_free>
   13784:	4620      	mov	r0, r4
   13786:	b002      	add	sp, #8
   13788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1378c:	6833      	ldr	r3, [r6, #0]
   1378e:	2b04      	cmp	r3, #4
   13790:	d139      	bne.n	13806 <mfu_interface_getopt+0x16e>
   13792:	2402      	movs	r4, #2
   13794:	2100      	movs	r1, #0
   13796:	4668      	mov	r0, sp
   13798:	46a0      	mov	r8, r4
   1379a:	f7fe fc3d 	bl	12018 <rpc_dfu_client_request_alloc>
   1379e:	2800      	cmp	r0, #0
   137a0:	d0b8      	beq.n	13714 <mfu_interface_getopt+0x7c>
   137a2:	200c      	movs	r0, #12
   137a4:	f7fc f96a 	bl	fa7c <bsd_os_errno_set>
   137a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   137ac:	b002      	add	sp, #8
   137ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   137b2:	6833      	ldr	r3, [r6, #0]
   137b4:	2b04      	cmp	r3, #4
   137b6:	d126      	bne.n	13806 <mfu_interface_getopt+0x16e>
   137b8:	2409      	movs	r4, #9
   137ba:	46a0      	mov	r8, r4
   137bc:	e7a4      	b.n	13708 <mfu_interface_getopt+0x70>
   137be:	202a      	movs	r0, #42	; 0x2a
   137c0:	f7fc f95c 	bl	fa7c <bsd_os_errno_set>
   137c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   137c8:	b002      	add	sp, #8
   137ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   137ce:	4a1d      	ldr	r2, [pc, #116]	; (13844 <mfu_interface_getopt+0x1ac>)
   137d0:	2108      	movs	r1, #8
   137d2:	6812      	ldr	r2, [r2, #0]
   137d4:	611a      	str	r2, [r3, #16]
   137d6:	e7af      	b.n	13738 <mfu_interface_getopt+0xa0>
   137d8:	203c      	movs	r0, #60	; 0x3c
   137da:	f7fc f94f 	bl	fa7c <bsd_os_errno_set>
   137de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   137e2:	b002      	add	sp, #8
   137e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   137e8:	9800      	ldr	r0, [sp, #0]
   137ea:	6803      	ldr	r3, [r0, #0]
   137ec:	b11b      	cbz	r3, 137f6 <mfu_interface_getopt+0x15e>
   137ee:	4618      	mov	r0, r3
   137f0:	f7fe fc42 	bl	12078 <rpc_dfu_client_data_free>
   137f4:	9800      	ldr	r0, [sp, #0]
   137f6:	f7fe fc37 	bl	12068 <rpc_dfu_client_message_free>
   137fa:	200c      	movs	r0, #12
   137fc:	f7fc f93e 	bl	fa7c <bsd_os_errno_set>
   13800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13804:	e7d2      	b.n	137ac <mfu_interface_getopt+0x114>
   13806:	2016      	movs	r0, #22
   13808:	f7fc f938 	bl	fa7c <bsd_os_errno_set>
   1380c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13810:	e771      	b.n	136f6 <mfu_interface_getopt+0x5e>
   13812:	2001      	movs	r0, #1
   13814:	f7fc f932 	bl	fa7c <bsd_os_errno_set>
   13818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1381c:	e76b      	b.n	136f6 <mfu_interface_getopt+0x5e>
   1381e:	4b06      	ldr	r3, [pc, #24]	; (13838 <mfu_interface_getopt+0x1a0>)
   13820:	2008      	movs	r0, #8
   13822:	601c      	str	r4, [r3, #0]
   13824:	f7fc f92a 	bl	fa7c <bsd_os_errno_set>
   13828:	6838      	ldr	r0, [r7, #0]
   1382a:	f7fe fc1d 	bl	12068 <rpc_dfu_client_message_free>
   1382e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13832:	e760      	b.n	136f6 <mfu_interface_getopt+0x5e>
   13834:	20021018 	.word	0x20021018
   13838:	2002101c 	.word	0x2002101c
   1383c:	20021e7c 	.word	0x20021e7c
   13840:	20021024 	.word	0x20021024
   13844:	20021020 	.word	0x20021020

00013848 <bsd_platform_error_handler>:
   13848:	b508      	push	{r3, lr}
   1384a:	f7f8 fee1 	bl	c610 <bsd_recoverable_error_handler>
   1384e:	bd08      	pop	{r3, pc}

00013850 <bsd_init>:
   13850:	b510      	push	{r4, lr}
   13852:	4c06      	ldr	r4, [pc, #24]	; (1386c <bsd_init+0x1c>)
   13854:	7823      	ldrb	r3, [r4, #0]
   13856:	b92b      	cbnz	r3, 13864 <bsd_init+0x14>
   13858:	f000 f818 	bl	1388c <bsd_platform_init>
   1385c:	b908      	cbnz	r0, 13862 <bsd_init+0x12>
   1385e:	2301      	movs	r3, #1
   13860:	7023      	strb	r3, [r4, #0]
   13862:	bd10      	pop	{r4, pc}
   13864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13868:	bd10      	pop	{r4, pc}
   1386a:	bf00      	nop
   1386c:	20022075 	.word	0x20022075

00013870 <unimplemented_method>:
   13870:	b40f      	push	{r0, r1, r2, r3}
   13872:	b508      	push	{r3, lr}
   13874:	202d      	movs	r0, #45	; 0x2d
   13876:	f7fc f901 	bl	fa7c <bsd_os_errno_set>
   1387a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1387e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13882:	b004      	add	sp, #16
   13884:	4770      	bx	lr
   13886:	bf00      	nop

00013888 <rpc_transport_ipc_fault_handler>:
   13888:	f7ff bfde 	b.w	13848 <bsd_platform_error_handler>

0001388c <bsd_platform_init>:
   1388c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1388e:	b093      	sub	sp, #76	; 0x4c
   13890:	f7fe fe2a 	bl	124e8 <nrf_mem_init>
   13894:	2800      	cmp	r0, #0
   13896:	d14c      	bne.n	13932 <bsd_platform_init+0xa6>
   13898:	4928      	ldr	r1, [pc, #160]	; (1393c <bsd_platform_init+0xb0>)
   1389a:	a801      	add	r0, sp, #4
   1389c:	f7fe fe98 	bl	125d0 <nrf_mem_register>
   138a0:	2800      	cmp	r0, #0
   138a2:	d146      	bne.n	13932 <bsd_platform_init+0xa6>
   138a4:	f7fc f9b6 	bl	fc14 <bsd_os_init>
   138a8:	f004 f974 	bl	17b94 <rpc_framework_init>
   138ac:	2800      	cmp	r0, #0
   138ae:	d140      	bne.n	13932 <bsd_platform_init+0xa6>
   138b0:	2320      	movs	r3, #32
   138b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   138b6:	2208      	movs	r2, #8
   138b8:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   138bc:	4f20      	ldr	r7, [pc, #128]	; (13940 <bsd_platform_init+0xb4>)
   138be:	4e21      	ldr	r6, [pc, #132]	; (13944 <bsd_platform_init+0xb8>)
   138c0:	9303      	str	r3, [sp, #12]
   138c2:	9305      	str	r3, [sp, #20]
   138c4:	9307      	str	r3, [sp, #28]
   138c6:	4d20      	ldr	r5, [pc, #128]	; (13948 <bsd_platform_init+0xbc>)
   138c8:	9109      	str	r1, [sp, #36]	; 0x24
   138ca:	910d      	str	r1, [sp, #52]	; 0x34
   138cc:	4c1f      	ldr	r4, [pc, #124]	; (1394c <bsd_platform_init+0xc0>)
   138ce:	4920      	ldr	r1, [pc, #128]	; (13950 <bsd_platform_init+0xc4>)
   138d0:	4b20      	ldr	r3, [pc, #128]	; (13954 <bsd_platform_init+0xc8>)
   138d2:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
   138d6:	eb0d 0002 	add.w	r0, sp, r2
   138da:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   138de:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
   138e2:	9702      	str	r7, [sp, #8]
   138e4:	9604      	str	r6, [sp, #16]
   138e6:	9506      	str	r5, [sp, #24]
   138e8:	9408      	str	r4, [sp, #32]
   138ea:	910a      	str	r1, [sp, #40]	; 0x28
   138ec:	930c      	str	r3, [sp, #48]	; 0x30
   138ee:	f000 fbdf 	bl	140b0 <rpc_transport_ipc_init>
   138f2:	b108      	cbz	r0, 138f8 <bsd_platform_init+0x6c>
   138f4:	b013      	add	sp, #76	; 0x4c
   138f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   138f8:	f003 fefa 	bl	176f0 <interface_init>
   138fc:	b9c8      	cbnz	r0, 13932 <bsd_platform_init+0xa6>
   138fe:	f7fe fa39 	bl	11d74 <at_interface_init>
   13902:	b9b0      	cbnz	r0, 13932 <bsd_platform_init+0xa6>
   13904:	f002 fc24 	bl	16150 <ip_interface_init>
   13908:	b998      	cbnz	r0, 13932 <bsd_platform_init+0xa6>
   1390a:	f7ff f883 	bl	12a14 <tls_interface_init>
   1390e:	b980      	cbnz	r0, 13932 <bsd_platform_init+0xa6>
   13910:	f7ff fcc0 	bl	13294 <mfu_interface_init>
   13914:	b968      	cbnz	r0, 13932 <bsd_platform_init+0xa6>
   13916:	f001 f9df 	bl	14cd8 <pdn_interface_init>
   1391a:	b950      	cbnz	r0, 13932 <bsd_platform_init+0xa6>
   1391c:	f005 fc04 	bl	19128 <gnss_interface_init>
   13920:	b938      	cbnz	r0, 13932 <bsd_platform_init+0xa6>
   13922:	f7fd fee9 	bl	116f8 <logobj_interface_init>
   13926:	3000      	adds	r0, #0
   13928:	bf18      	it	ne
   1392a:	2001      	movne	r0, #1
   1392c:	4240      	negs	r0, r0
   1392e:	b013      	add	sp, #76	; 0x4c
   13930:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13932:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13936:	b013      	add	sp, #76	; 0x4c
   13938:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1393a:	bf00      	nop
   1393c:	0001e530 	.word	0x0001e530
   13940:	20010000 	.word	0x20010000
   13944:	20010040 	.word	0x20010040
   13948:	20010020 	.word	0x20010020
   1394c:	20017060 	.word	0x20017060
   13950:	20010060 	.word	0x20010060
   13954:	20013060 	.word	0x20013060

00013958 <bsd_platform_af_method_table_get>:
   13958:	2805      	cmp	r0, #5
   1395a:	d02a      	beq.n	139b2 <bsd_platform_af_method_table_get+0x5a>
   1395c:	b508      	push	{r3, lr}
   1395e:	d914      	bls.n	1398a <bsd_platform_af_method_table_get+0x32>
   13960:	280a      	cmp	r0, #10
   13962:	d016      	beq.n	13992 <bsd_platform_af_method_table_get+0x3a>
   13964:	2866      	cmp	r0, #102	; 0x66
   13966:	d10b      	bne.n	13980 <bsd_platform_af_method_table_get+0x28>
   13968:	f240 2302 	movw	r3, #514	; 0x202
   1396c:	429a      	cmp	r2, r3
   1396e:	d032      	beq.n	139d6 <bsd_platform_af_method_table_get+0x7e>
   13970:	f240 2305 	movw	r3, #517	; 0x205
   13974:	429a      	cmp	r2, r3
   13976:	d032      	beq.n	139de <bsd_platform_af_method_table_get+0x86>
   13978:	f240 2301 	movw	r3, #513	; 0x201
   1397c:	429a      	cmp	r2, r3
   1397e:	d02c      	beq.n	139da <bsd_platform_af_method_table_get+0x82>
   13980:	2016      	movs	r0, #22
   13982:	f7fc f87b 	bl	fa7c <bsd_os_errno_set>
   13986:	2000      	movs	r0, #0
   13988:	bd08      	pop	{r3, pc}
   1398a:	2801      	cmp	r0, #1
   1398c:	d016      	beq.n	139bc <bsd_platform_af_method_table_get+0x64>
   1398e:	2802      	cmp	r0, #2
   13990:	d1f6      	bne.n	13980 <bsd_platform_af_method_table_get+0x28>
   13992:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   13996:	2a0a      	cmp	r2, #10
   13998:	d819      	bhi.n	139ce <bsd_platform_af_method_table_get+0x76>
   1399a:	2301      	movs	r3, #1
   1399c:	f240 4103 	movw	r1, #1027	; 0x403
   139a0:	4810      	ldr	r0, [pc, #64]	; (139e4 <bsd_platform_af_method_table_get+0x8c>)
   139a2:	fa03 f202 	lsl.w	r2, r3, r2
   139a6:	420a      	tst	r2, r1
   139a8:	f100 0328 	add.w	r3, r0, #40	; 0x28
   139ac:	bf18      	it	ne
   139ae:	4618      	movne	r0, r3
   139b0:	bd08      	pop	{r3, pc}
   139b2:	2903      	cmp	r1, #3
   139b4:	480c      	ldr	r0, [pc, #48]	; (139e8 <bsd_platform_af_method_table_get+0x90>)
   139b6:	bf18      	it	ne
   139b8:	2000      	movne	r0, #0
   139ba:	4770      	bx	lr
   139bc:	f240 2303 	movw	r3, #515	; 0x203
   139c0:	429a      	cmp	r2, r3
   139c2:	d006      	beq.n	139d2 <bsd_platform_af_method_table_get+0x7a>
   139c4:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   139c8:	d1da      	bne.n	13980 <bsd_platform_af_method_table_get+0x28>
   139ca:	4808      	ldr	r0, [pc, #32]	; (139ec <bsd_platform_af_method_table_get+0x94>)
   139cc:	bd08      	pop	{r3, pc}
   139ce:	4805      	ldr	r0, [pc, #20]	; (139e4 <bsd_platform_af_method_table_get+0x8c>)
   139d0:	bd08      	pop	{r3, pc}
   139d2:	4807      	ldr	r0, [pc, #28]	; (139f0 <bsd_platform_af_method_table_get+0x98>)
   139d4:	bd08      	pop	{r3, pc}
   139d6:	4807      	ldr	r0, [pc, #28]	; (139f4 <bsd_platform_af_method_table_get+0x9c>)
   139d8:	bd08      	pop	{r3, pc}
   139da:	4807      	ldr	r0, [pc, #28]	; (139f8 <bsd_platform_af_method_table_get+0xa0>)
   139dc:	bd08      	pop	{r3, pc}
   139de:	4807      	ldr	r0, [pc, #28]	; (139fc <bsd_platform_af_method_table_get+0xa4>)
   139e0:	bd08      	pop	{r3, pc}
   139e2:	bf00      	nop
   139e4:	0001e400 	.word	0x0001e400
   139e8:	0001e4f0 	.word	0x0001e4f0
   139ec:	0001e4a0 	.word	0x0001e4a0
   139f0:	0001e450 	.word	0x0001e450
   139f4:	0001e478 	.word	0x0001e478
   139f8:	0001e3d8 	.word	0x0001e3d8
   139fc:	0001e4c8 	.word	0x0001e4c8

00013a00 <bsd_platform_fd_method_table_get>:
   13a00:	b538      	push	{r3, r4, r5, lr}
   13a02:	4605      	mov	r5, r0
   13a04:	f003 ffa0 	bl	17948 <interface_socket_from_handle_get>
   13a08:	4604      	mov	r4, r0
   13a0a:	b950      	cbnz	r0, 13a22 <bsd_platform_fd_method_table_get+0x22>
   13a0c:	4b2a      	ldr	r3, [pc, #168]	; (13ab8 <bsd_platform_fd_method_table_get+0xb8>)
   13a0e:	43ab      	bics	r3, r5
   13a10:	d032      	beq.n	13a78 <bsd_platform_fd_method_table_get+0x78>
   13a12:	4b2a      	ldr	r3, [pc, #168]	; (13abc <bsd_platform_fd_method_table_get+0xbc>)
   13a14:	43ab      	bics	r3, r5
   13a16:	d043      	beq.n	13aa0 <bsd_platform_fd_method_table_get+0xa0>
   13a18:	4b29      	ldr	r3, [pc, #164]	; (13ac0 <bsd_platform_fd_method_table_get+0xc0>)
   13a1a:	43ab      	bics	r3, r5
   13a1c:	d146      	bne.n	13aac <bsd_platform_fd_method_table_get+0xac>
   13a1e:	4829      	ldr	r0, [pc, #164]	; (13ac4 <bsd_platform_fd_method_table_get+0xc4>)
   13a20:	bd38      	pop	{r3, r4, r5, pc}
   13a22:	68c3      	ldr	r3, [r0, #12]
   13a24:	6942      	ldr	r2, [r0, #20]
   13a26:	2b05      	cmp	r3, #5
   13a28:	d034      	beq.n	13a94 <bsd_platform_fd_method_table_get+0x94>
   13a2a:	d911      	bls.n	13a50 <bsd_platform_fd_method_table_get+0x50>
   13a2c:	2b0a      	cmp	r3, #10
   13a2e:	d013      	beq.n	13a58 <bsd_platform_fd_method_table_get+0x58>
   13a30:	2b66      	cmp	r3, #102	; 0x66
   13a32:	d12a      	bne.n	13a8a <bsd_platform_fd_method_table_get+0x8a>
   13a34:	f240 2302 	movw	r3, #514	; 0x202
   13a38:	429a      	cmp	r2, r3
   13a3a:	d031      	beq.n	13aa0 <bsd_platform_fd_method_table_get+0xa0>
   13a3c:	f240 2305 	movw	r3, #517	; 0x205
   13a40:	429a      	cmp	r2, r3
   13a42:	d031      	beq.n	13aa8 <bsd_platform_fd_method_table_get+0xa8>
   13a44:	f240 2301 	movw	r3, #513	; 0x201
   13a48:	429a      	cmp	r2, r3
   13a4a:	d11e      	bne.n	13a8a <bsd_platform_fd_method_table_get+0x8a>
   13a4c:	481e      	ldr	r0, [pc, #120]	; (13ac8 <bsd_platform_fd_method_table_get+0xc8>)
   13a4e:	bd38      	pop	{r3, r4, r5, pc}
   13a50:	2b01      	cmp	r3, #1
   13a52:	d013      	beq.n	13a7c <bsd_platform_fd_method_table_get+0x7c>
   13a54:	2b02      	cmp	r3, #2
   13a56:	d118      	bne.n	13a8a <bsd_platform_fd_method_table_get+0x8a>
   13a58:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   13a5c:	2a0a      	cmp	r2, #10
   13a5e:	d821      	bhi.n	13aa4 <bsd_platform_fd_method_table_get+0xa4>
   13a60:	2301      	movs	r3, #1
   13a62:	f240 4103 	movw	r1, #1027	; 0x403
   13a66:	4819      	ldr	r0, [pc, #100]	; (13acc <bsd_platform_fd_method_table_get+0xcc>)
   13a68:	fa03 f202 	lsl.w	r2, r3, r2
   13a6c:	420a      	tst	r2, r1
   13a6e:	f100 0428 	add.w	r4, r0, #40	; 0x28
   13a72:	bf18      	it	ne
   13a74:	4620      	movne	r0, r4
   13a76:	bd38      	pop	{r3, r4, r5, pc}
   13a78:	4815      	ldr	r0, [pc, #84]	; (13ad0 <bsd_platform_fd_method_table_get+0xd0>)
   13a7a:	bd38      	pop	{r3, r4, r5, pc}
   13a7c:	f240 2303 	movw	r3, #515	; 0x203
   13a80:	429a      	cmp	r2, r3
   13a82:	d0f9      	beq.n	13a78 <bsd_platform_fd_method_table_get+0x78>
   13a84:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   13a88:	d0c9      	beq.n	13a1e <bsd_platform_fd_method_table_get+0x1e>
   13a8a:	2016      	movs	r0, #22
   13a8c:	f7fb fff6 	bl	fa7c <bsd_os_errno_set>
   13a90:	2000      	movs	r0, #0
   13a92:	bd38      	pop	{r3, r4, r5, pc}
   13a94:	6903      	ldr	r3, [r0, #16]
   13a96:	480f      	ldr	r0, [pc, #60]	; (13ad4 <bsd_platform_fd_method_table_get+0xd4>)
   13a98:	2b03      	cmp	r3, #3
   13a9a:	bf18      	it	ne
   13a9c:	2000      	movne	r0, #0
   13a9e:	bd38      	pop	{r3, r4, r5, pc}
   13aa0:	480d      	ldr	r0, [pc, #52]	; (13ad8 <bsd_platform_fd_method_table_get+0xd8>)
   13aa2:	bd38      	pop	{r3, r4, r5, pc}
   13aa4:	4809      	ldr	r0, [pc, #36]	; (13acc <bsd_platform_fd_method_table_get+0xcc>)
   13aa6:	bd38      	pop	{r3, r4, r5, pc}
   13aa8:	480c      	ldr	r0, [pc, #48]	; (13adc <bsd_platform_fd_method_table_get+0xdc>)
   13aaa:	bd38      	pop	{r3, r4, r5, pc}
   13aac:	2009      	movs	r0, #9
   13aae:	f7fb ffe5 	bl	fa7c <bsd_os_errno_set>
   13ab2:	4620      	mov	r0, r4
   13ab4:	bd38      	pop	{r3, r4, r5, pc}
   13ab6:	bf00      	nop
   13ab8:	49765432 	.word	0x49765432
   13abc:	789a0000 	.word	0x789a0000
   13ac0:	49765443 	.word	0x49765443
   13ac4:	0001e4a0 	.word	0x0001e4a0
   13ac8:	0001e3d8 	.word	0x0001e3d8
   13acc:	0001e400 	.word	0x0001e400
   13ad0:	0001e450 	.word	0x0001e450
   13ad4:	0001e4f0 	.word	0x0001e4f0
   13ad8:	0001e478 	.word	0x0001e478
   13adc:	0001e4c8 	.word	0x0001e4c8

00013ae0 <bsd_platform_getaddrinfo>:
   13ae0:	f003 ba7c 	b.w	16fdc <ip_interface_getaddrinfo>

00013ae4 <bsd_platform_freeaddrinfo>:
   13ae4:	f003 bb70 	b.w	171c8 <ip_interface_freeaddrinfo>

00013ae8 <bsd_platform_poll>:
   13ae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13aec:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   13af0:	b083      	sub	sp, #12
   13af2:	9200      	str	r2, [sp, #0]
   13af4:	2800      	cmp	r0, #0
   13af6:	d048      	beq.n	13b8a <bsd_platform_poll+0xa2>
   13af8:	1e4b      	subs	r3, r1, #1
   13afa:	2b08      	cmp	r3, #8
   13afc:	d845      	bhi.n	13b8a <bsd_platform_poll+0xa2>
   13afe:	4680      	mov	r8, r0
   13b00:	4605      	mov	r5, r0
   13b02:	2400      	movs	r4, #0
   13b04:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   13b08:	88ab      	ldrh	r3, [r5, #4]
   13b0a:	6828      	ldr	r0, [r5, #0]
   13b0c:	f003 0303 	and.w	r3, r3, #3
   13b10:	a901      	add	r1, sp, #4
   13b12:	f043 061c 	orr.w	r6, r3, #28
   13b16:	f003 ff25 	bl	17964 <interface_socket_event_get>
   13b1a:	9b01      	ldr	r3, [sp, #4]
   13b1c:	3508      	adds	r5, #8
   13b1e:	4033      	ands	r3, r6
   13b20:	f825 3c02 	strh.w	r3, [r5, #-2]
   13b24:	b103      	cbz	r3, 13b28 <bsd_platform_poll+0x40>
   13b26:	3401      	adds	r4, #1
   13b28:	42af      	cmp	r7, r5
   13b2a:	d1ed      	bne.n	13b08 <bsd_platform_poll+0x20>
   13b2c:	bb9c      	cbnz	r4, 13b96 <bsd_platform_poll+0xae>
   13b2e:	4669      	mov	r1, sp
   13b30:	4640      	mov	r0, r8
   13b32:	f7fb ff0f 	bl	f954 <bsd_os_timedwait>
   13b36:	4607      	mov	r7, r0
   13b38:	b108      	cbz	r0, 13b3e <bsd_platform_poll+0x56>
   13b3a:	283c      	cmp	r0, #60	; 0x3c
   13b3c:	d11d      	bne.n	13b7a <bsd_platform_poll+0x92>
   13b3e:	46c1      	mov	r9, r8
   13b40:	2600      	movs	r6, #0
   13b42:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   13b46:	f8d9 0000 	ldr.w	r0, [r9]
   13b4a:	f003 0303 	and.w	r3, r3, #3
   13b4e:	a901      	add	r1, sp, #4
   13b50:	f043 041c 	orr.w	r4, r3, #28
   13b54:	f003 ff06 	bl	17964 <interface_socket_event_get>
   13b58:	9b01      	ldr	r3, [sp, #4]
   13b5a:	f109 0908 	add.w	r9, r9, #8
   13b5e:	4023      	ands	r3, r4
   13b60:	f829 3c02 	strh.w	r3, [r9, #-2]
   13b64:	b103      	cbz	r3, 13b68 <bsd_platform_poll+0x80>
   13b66:	3601      	adds	r6, #1
   13b68:	454d      	cmp	r5, r9
   13b6a:	d1ea      	bne.n	13b42 <bsd_platform_poll+0x5a>
   13b6c:	b90e      	cbnz	r6, 13b72 <bsd_platform_poll+0x8a>
   13b6e:	2f00      	cmp	r7, #0
   13b70:	d0dd      	beq.n	13b2e <bsd_platform_poll+0x46>
   13b72:	4630      	mov	r0, r6
   13b74:	b003      	add	sp, #12
   13b76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13b7a:	2023      	movs	r0, #35	; 0x23
   13b7c:	f7fb ff7e 	bl	fa7c <bsd_os_errno_set>
   13b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13b84:	b003      	add	sp, #12
   13b86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13b8a:	2016      	movs	r0, #22
   13b8c:	f7fb ff76 	bl	fa7c <bsd_os_errno_set>
   13b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13b94:	e7ee      	b.n	13b74 <bsd_platform_poll+0x8c>
   13b96:	4620      	mov	r0, r4
   13b98:	e7ec      	b.n	13b74 <bsd_platform_poll+0x8c>
   13b9a:	bf00      	nop

00013b9c <bsd_platform_fcntl>:
   13b9c:	b508      	push	{r3, lr}
   13b9e:	4b06      	ldr	r3, [pc, #24]	; (13bb8 <bsd_platform_fcntl+0x1c>)
   13ba0:	4383      	bics	r3, r0
   13ba2:	d003      	beq.n	13bac <bsd_platform_fcntl+0x10>
   13ba4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13ba8:	f003 bf5a 	b.w	17a60 <interface_socket_fcntl>
   13bac:	202d      	movs	r0, #45	; 0x2d
   13bae:	f7fb ff65 	bl	fa7c <bsd_os_errno_set>
   13bb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13bb6:	bd08      	pop	{r3, pc}
   13bb8:	49765432 	.word	0x49765432

00013bbc <ipc_trace_init>:
   13bbc:	4b01      	ldr	r3, [pc, #4]	; (13bc4 <ipc_trace_init+0x8>)
   13bbe:	6018      	str	r0, [r3, #0]
   13bc0:	4770      	bx	lr
   13bc2:	bf00      	nop
   13bc4:	20021034 	.word	0x20021034

00013bc8 <bsd_os_trace_irq_handler>:
   13bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   13bca:	4b6c      	ldr	r3, [pc, #432]	; (13d7c <bsd_os_trace_irq_handler+0x1b4>)
   13bcc:	b083      	sub	sp, #12
   13bce:	781b      	ldrb	r3, [r3, #0]
   13bd0:	2b00      	cmp	r3, #0
   13bd2:	f000 80ad 	beq.w	13d30 <bsd_os_trace_irq_handler+0x168>
   13bd6:	4b6a      	ldr	r3, [pc, #424]	; (13d80 <bsd_os_trace_irq_handler+0x1b8>)
   13bd8:	681c      	ldr	r4, [r3, #0]
   13bda:	68a2      	ldr	r2, [r4, #8]
   13bdc:	6863      	ldr	r3, [r4, #4]
   13bde:	429a      	cmp	r2, r3
   13be0:	d02d      	beq.n	13c3e <bsd_os_trace_irq_handler+0x76>
   13be2:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   13be6:	f8ad 3000 	strh.w	r3, [sp]
   13bea:	7823      	ldrb	r3, [r4, #0]
   13bec:	466e      	mov	r6, sp
   13bee:	f88d 3004 	strb.w	r3, [sp, #4]
   13bf2:	6863      	ldr	r3, [r4, #4]
   13bf4:	2105      	movs	r1, #5
   13bf6:	429a      	cmp	r2, r3
   13bf8:	bf2a      	itet	cs
   13bfa:	6927      	ldrcs	r7, [r4, #16]
   13bfc:	1a9f      	subcc	r7, r3, r2
   13bfe:	1abf      	subcs	r7, r7, r2
   13c00:	429a      	cmp	r2, r3
   13c02:	bf94      	ite	ls
   13c04:	2500      	movls	r5, #0
   13c06:	68e5      	ldrhi	r5, [r4, #12]
   13c08:	b2bf      	uxth	r7, r7
   13c0a:	bf88      	it	hi
   13c0c:	1b5b      	subhi	r3, r3, r5
   13c0e:	4630      	mov	r0, r6
   13c10:	bf88      	it	hi
   13c12:	b29d      	uxthhi	r5, r3
   13c14:	f8ad 7002 	strh.w	r7, [sp, #2]
   13c18:	f008 fefb 	bl	1ca12 <bsd_os_trace_put>
   13c1c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13c20:	68a0      	ldr	r0, [r4, #8]
   13c22:	f008 fef6 	bl	1ca12 <bsd_os_trace_put>
   13c26:	68a3      	ldr	r3, [r4, #8]
   13c28:	6922      	ldr	r2, [r4, #16]
   13c2a:	441f      	add	r7, r3
   13c2c:	4297      	cmp	r7, r2
   13c2e:	bf08      	it	eq
   13c30:	68e3      	ldreq	r3, [r4, #12]
   13c32:	60a7      	str	r7, [r4, #8]
   13c34:	bf08      	it	eq
   13c36:	60a3      	streq	r3, [r4, #8]
   13c38:	2d00      	cmp	r5, #0
   13c3a:	f040 808d 	bne.w	13d58 <bsd_os_trace_irq_handler+0x190>
   13c3e:	4b51      	ldr	r3, [pc, #324]	; (13d84 <bsd_os_trace_irq_handler+0x1bc>)
   13c40:	681c      	ldr	r4, [r3, #0]
   13c42:	68a2      	ldr	r2, [r4, #8]
   13c44:	6863      	ldr	r3, [r4, #4]
   13c46:	429a      	cmp	r2, r3
   13c48:	d02c      	beq.n	13ca4 <bsd_os_trace_irq_handler+0xdc>
   13c4a:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   13c4e:	f8ad 3000 	strh.w	r3, [sp]
   13c52:	7823      	ldrb	r3, [r4, #0]
   13c54:	466e      	mov	r6, sp
   13c56:	f88d 3004 	strb.w	r3, [sp, #4]
   13c5a:	6863      	ldr	r3, [r4, #4]
   13c5c:	2105      	movs	r1, #5
   13c5e:	429a      	cmp	r2, r3
   13c60:	bf2a      	itet	cs
   13c62:	6927      	ldrcs	r7, [r4, #16]
   13c64:	1a9f      	subcc	r7, r3, r2
   13c66:	1abf      	subcs	r7, r7, r2
   13c68:	429a      	cmp	r2, r3
   13c6a:	bf94      	ite	ls
   13c6c:	2500      	movls	r5, #0
   13c6e:	68e5      	ldrhi	r5, [r4, #12]
   13c70:	b2bf      	uxth	r7, r7
   13c72:	bf88      	it	hi
   13c74:	1b5b      	subhi	r3, r3, r5
   13c76:	4630      	mov	r0, r6
   13c78:	bf88      	it	hi
   13c7a:	b29d      	uxthhi	r5, r3
   13c7c:	f8ad 7002 	strh.w	r7, [sp, #2]
   13c80:	f008 fec7 	bl	1ca12 <bsd_os_trace_put>
   13c84:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13c88:	68a0      	ldr	r0, [r4, #8]
   13c8a:	f008 fec2 	bl	1ca12 <bsd_os_trace_put>
   13c8e:	68a3      	ldr	r3, [r4, #8]
   13c90:	6922      	ldr	r2, [r4, #16]
   13c92:	441f      	add	r7, r3
   13c94:	4297      	cmp	r7, r2
   13c96:	bf08      	it	eq
   13c98:	68e3      	ldreq	r3, [r4, #12]
   13c9a:	60a7      	str	r7, [r4, #8]
   13c9c:	bf08      	it	eq
   13c9e:	60a3      	streq	r3, [r4, #8]
   13ca0:	2d00      	cmp	r5, #0
   13ca2:	d148      	bne.n	13d36 <bsd_os_trace_irq_handler+0x16e>
   13ca4:	4b38      	ldr	r3, [pc, #224]	; (13d88 <bsd_os_trace_irq_handler+0x1c0>)
   13ca6:	681c      	ldr	r4, [r3, #0]
   13ca8:	68a2      	ldr	r2, [r4, #8]
   13caa:	6863      	ldr	r3, [r4, #4]
   13cac:	429a      	cmp	r2, r3
   13cae:	d02b      	beq.n	13d08 <bsd_os_trace_irq_handler+0x140>
   13cb0:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   13cb4:	f8ad 3000 	strh.w	r3, [sp]
   13cb8:	7823      	ldrb	r3, [r4, #0]
   13cba:	466e      	mov	r6, sp
   13cbc:	f88d 3004 	strb.w	r3, [sp, #4]
   13cc0:	6863      	ldr	r3, [r4, #4]
   13cc2:	2105      	movs	r1, #5
   13cc4:	429a      	cmp	r2, r3
   13cc6:	bf2a      	itet	cs
   13cc8:	6927      	ldrcs	r7, [r4, #16]
   13cca:	1a9f      	subcc	r7, r3, r2
   13ccc:	1abf      	subcs	r7, r7, r2
   13cce:	429a      	cmp	r2, r3
   13cd0:	bf94      	ite	ls
   13cd2:	2500      	movls	r5, #0
   13cd4:	68e5      	ldrhi	r5, [r4, #12]
   13cd6:	b2bf      	uxth	r7, r7
   13cd8:	bf88      	it	hi
   13cda:	1b5b      	subhi	r3, r3, r5
   13cdc:	4630      	mov	r0, r6
   13cde:	bf88      	it	hi
   13ce0:	b29d      	uxthhi	r5, r3
   13ce2:	f8ad 7002 	strh.w	r7, [sp, #2]
   13ce6:	f008 fe94 	bl	1ca12 <bsd_os_trace_put>
   13cea:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13cee:	68a0      	ldr	r0, [r4, #8]
   13cf0:	f008 fe8f 	bl	1ca12 <bsd_os_trace_put>
   13cf4:	68a3      	ldr	r3, [r4, #8]
   13cf6:	6922      	ldr	r2, [r4, #16]
   13cf8:	441f      	add	r7, r3
   13cfa:	4297      	cmp	r7, r2
   13cfc:	bf08      	it	eq
   13cfe:	68e3      	ldreq	r3, [r4, #12]
   13d00:	60a7      	str	r7, [r4, #8]
   13d02:	bf08      	it	eq
   13d04:	60a3      	streq	r3, [r4, #8]
   13d06:	b90d      	cbnz	r5, 13d0c <bsd_os_trace_irq_handler+0x144>
   13d08:	b003      	add	sp, #12
   13d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13d0c:	4630      	mov	r0, r6
   13d0e:	2105      	movs	r1, #5
   13d10:	f8ad 5002 	strh.w	r5, [sp, #2]
   13d14:	f008 fe7d 	bl	1ca12 <bsd_os_trace_put>
   13d18:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13d1c:	68e0      	ldr	r0, [r4, #12]
   13d1e:	f008 fe78 	bl	1ca12 <bsd_os_trace_put>
   13d22:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   13d26:	68e3      	ldr	r3, [r4, #12]
   13d28:	4413      	add	r3, r2
   13d2a:	60a3      	str	r3, [r4, #8]
   13d2c:	b003      	add	sp, #12
   13d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13d30:	f7fb ff68 	bl	fc04 <bsd_os_trace_irq_clear>
   13d34:	e74f      	b.n	13bd6 <bsd_os_trace_irq_handler+0xe>
   13d36:	2105      	movs	r1, #5
   13d38:	4630      	mov	r0, r6
   13d3a:	f8ad 5002 	strh.w	r5, [sp, #2]
   13d3e:	f008 fe68 	bl	1ca12 <bsd_os_trace_put>
   13d42:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13d46:	68e0      	ldr	r0, [r4, #12]
   13d48:	f008 fe63 	bl	1ca12 <bsd_os_trace_put>
   13d4c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   13d50:	68e3      	ldr	r3, [r4, #12]
   13d52:	4413      	add	r3, r2
   13d54:	60a3      	str	r3, [r4, #8]
   13d56:	e7a5      	b.n	13ca4 <bsd_os_trace_irq_handler+0xdc>
   13d58:	2105      	movs	r1, #5
   13d5a:	4630      	mov	r0, r6
   13d5c:	f8ad 5002 	strh.w	r5, [sp, #2]
   13d60:	f008 fe57 	bl	1ca12 <bsd_os_trace_put>
   13d64:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13d68:	68e0      	ldr	r0, [r4, #12]
   13d6a:	f008 fe52 	bl	1ca12 <bsd_os_trace_put>
   13d6e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   13d72:	68e3      	ldr	r3, [r4, #12]
   13d74:	4413      	add	r3, r2
   13d76:	60a3      	str	r3, [r4, #8]
   13d78:	e761      	b.n	13c3e <bsd_os_trace_irq_handler+0x76>
   13d7a:	bf00      	nop
   13d7c:	20022076 	.word	0x20022076
   13d80:	20021030 	.word	0x20021030
   13d84:	20021028 	.word	0x20021028
   13d88:	2002102c 	.word	0x2002102c

00013d8c <ipc_trace_handle>:
   13d8c:	2200      	movs	r2, #0
   13d8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d92:	4bb0      	ldr	r3, [pc, #704]	; (14054 <ipc_trace_handle+0x2c8>)
   13d94:	b083      	sub	sp, #12
   13d96:	681b      	ldr	r3, [r3, #0]
   13d98:	6919      	ldr	r1, [r3, #16]
   13d9a:	695c      	ldr	r4, [r3, #20]
   13d9c:	7c18      	ldrb	r0, [r3, #16]
   13d9e:	741a      	strb	r2, [r3, #16]
   13da0:	7c58      	ldrb	r0, [r3, #17]
   13da2:	745a      	strb	r2, [r3, #17]
   13da4:	7c98      	ldrb	r0, [r3, #18]
   13da6:	749a      	strb	r2, [r3, #18]
   13da8:	7cd8      	ldrb	r0, [r3, #19]
   13daa:	74da      	strb	r2, [r3, #19]
   13dac:	7d18      	ldrb	r0, [r3, #20]
   13dae:	751a      	strb	r2, [r3, #20]
   13db0:	7d58      	ldrb	r0, [r3, #21]
   13db2:	755a      	strb	r2, [r3, #21]
   13db4:	7d98      	ldrb	r0, [r3, #22]
   13db6:	759a      	strb	r2, [r3, #22]
   13db8:	7dd8      	ldrb	r0, [r3, #23]
   13dba:	75da      	strb	r2, [r3, #23]
   13dbc:	b1b9      	cbz	r1, 13dee <ipc_trace_handle+0x62>
   13dbe:	3901      	subs	r1, #1
   13dc0:	2903      	cmp	r1, #3
   13dc2:	d814      	bhi.n	13dee <ipc_trace_handle+0x62>
   13dc4:	e8df f011 	tbh	[pc, r1, lsl #1]
   13dc8:	010300d6 	.word	0x010300d6
   13dcc:	00160004 	.word	0x00160004
   13dd0:	2501      	movs	r5, #1
   13dd2:	2003      	movs	r0, #3
   13dd4:	2200      	movs	r2, #0
   13dd6:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   13dda:	4c9f      	ldr	r4, [pc, #636]	; (14058 <ipc_trace_handle+0x2cc>)
   13ddc:	7025      	strb	r5, [r4, #0]
   13dde:	7a1c      	ldrb	r4, [r3, #8]
   13de0:	7218      	strb	r0, [r3, #8]
   13de2:	7a58      	ldrb	r0, [r3, #9]
   13de4:	725a      	strb	r2, [r3, #9]
   13de6:	7a98      	ldrb	r0, [r3, #10]
   13de8:	729a      	strb	r2, [r3, #10]
   13dea:	7ada      	ldrb	r2, [r3, #11]
   13dec:	72d9      	strb	r1, [r3, #11]
   13dee:	b003      	add	sp, #12
   13df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13df4:	2104      	movs	r1, #4
   13df6:	2200      	movs	r2, #0
   13df8:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   13dfc:	7a1c      	ldrb	r4, [r3, #8]
   13dfe:	7219      	strb	r1, [r3, #8]
   13e00:	7a59      	ldrb	r1, [r3, #9]
   13e02:	725a      	strb	r2, [r3, #9]
   13e04:	4994      	ldr	r1, [pc, #592]	; (14058 <ipc_trace_handle+0x2cc>)
   13e06:	7a9c      	ldrb	r4, [r3, #10]
   13e08:	729a      	strb	r2, [r3, #10]
   13e0a:	7adc      	ldrb	r4, [r3, #11]
   13e0c:	72d8      	strb	r0, [r3, #11]
   13e0e:	700a      	strb	r2, [r1, #0]
   13e10:	780b      	ldrb	r3, [r1, #0]
   13e12:	2b00      	cmp	r3, #0
   13e14:	f000 8117 	beq.w	14046 <ipc_trace_handle+0x2ba>
   13e18:	4b90      	ldr	r3, [pc, #576]	; (1405c <ipc_trace_handle+0x2d0>)
   13e1a:	681c      	ldr	r4, [r3, #0]
   13e1c:	68a2      	ldr	r2, [r4, #8]
   13e1e:	6863      	ldr	r3, [r4, #4]
   13e20:	429a      	cmp	r2, r3
   13e22:	d02d      	beq.n	13e80 <ipc_trace_handle+0xf4>
   13e24:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   13e28:	f8ad 3000 	strh.w	r3, [sp]
   13e2c:	7823      	ldrb	r3, [r4, #0]
   13e2e:	466e      	mov	r6, sp
   13e30:	f88d 3004 	strb.w	r3, [sp, #4]
   13e34:	6863      	ldr	r3, [r4, #4]
   13e36:	2105      	movs	r1, #5
   13e38:	429a      	cmp	r2, r3
   13e3a:	bf2a      	itet	cs
   13e3c:	6927      	ldrcs	r7, [r4, #16]
   13e3e:	1a9f      	subcc	r7, r3, r2
   13e40:	1abf      	subcs	r7, r7, r2
   13e42:	429a      	cmp	r2, r3
   13e44:	bf94      	ite	ls
   13e46:	2500      	movls	r5, #0
   13e48:	68e5      	ldrhi	r5, [r4, #12]
   13e4a:	b2bf      	uxth	r7, r7
   13e4c:	bf88      	it	hi
   13e4e:	1b5b      	subhi	r3, r3, r5
   13e50:	4630      	mov	r0, r6
   13e52:	bf88      	it	hi
   13e54:	b29d      	uxthhi	r5, r3
   13e56:	f8ad 7002 	strh.w	r7, [sp, #2]
   13e5a:	f008 fdda 	bl	1ca12 <bsd_os_trace_put>
   13e5e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13e62:	68a0      	ldr	r0, [r4, #8]
   13e64:	f008 fdd5 	bl	1ca12 <bsd_os_trace_put>
   13e68:	68a3      	ldr	r3, [r4, #8]
   13e6a:	6922      	ldr	r2, [r4, #16]
   13e6c:	441f      	add	r7, r3
   13e6e:	4297      	cmp	r7, r2
   13e70:	bf08      	it	eq
   13e72:	68e3      	ldreq	r3, [r4, #12]
   13e74:	60a7      	str	r7, [r4, #8]
   13e76:	bf08      	it	eq
   13e78:	60a3      	streq	r3, [r4, #8]
   13e7a:	2d00      	cmp	r5, #0
   13e7c:	f040 80d2 	bne.w	14024 <ipc_trace_handle+0x298>
   13e80:	4b77      	ldr	r3, [pc, #476]	; (14060 <ipc_trace_handle+0x2d4>)
   13e82:	681c      	ldr	r4, [r3, #0]
   13e84:	68a2      	ldr	r2, [r4, #8]
   13e86:	6863      	ldr	r3, [r4, #4]
   13e88:	429a      	cmp	r2, r3
   13e8a:	d02d      	beq.n	13ee8 <ipc_trace_handle+0x15c>
   13e8c:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   13e90:	f8ad 3000 	strh.w	r3, [sp]
   13e94:	7823      	ldrb	r3, [r4, #0]
   13e96:	466e      	mov	r6, sp
   13e98:	f88d 3004 	strb.w	r3, [sp, #4]
   13e9c:	6863      	ldr	r3, [r4, #4]
   13e9e:	2105      	movs	r1, #5
   13ea0:	429a      	cmp	r2, r3
   13ea2:	bf2a      	itet	cs
   13ea4:	6927      	ldrcs	r7, [r4, #16]
   13ea6:	1a9f      	subcc	r7, r3, r2
   13ea8:	1abf      	subcs	r7, r7, r2
   13eaa:	429a      	cmp	r2, r3
   13eac:	bf94      	ite	ls
   13eae:	2500      	movls	r5, #0
   13eb0:	68e5      	ldrhi	r5, [r4, #12]
   13eb2:	b2bf      	uxth	r7, r7
   13eb4:	bf88      	it	hi
   13eb6:	1b5b      	subhi	r3, r3, r5
   13eb8:	4630      	mov	r0, r6
   13eba:	bf88      	it	hi
   13ebc:	b29d      	uxthhi	r5, r3
   13ebe:	f8ad 7002 	strh.w	r7, [sp, #2]
   13ec2:	f008 fda6 	bl	1ca12 <bsd_os_trace_put>
   13ec6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13eca:	68a0      	ldr	r0, [r4, #8]
   13ecc:	f008 fda1 	bl	1ca12 <bsd_os_trace_put>
   13ed0:	68a3      	ldr	r3, [r4, #8]
   13ed2:	6922      	ldr	r2, [r4, #16]
   13ed4:	441f      	add	r7, r3
   13ed6:	4297      	cmp	r7, r2
   13ed8:	bf08      	it	eq
   13eda:	68e3      	ldreq	r3, [r4, #12]
   13edc:	60a7      	str	r7, [r4, #8]
   13ede:	bf08      	it	eq
   13ee0:	60a3      	streq	r3, [r4, #8]
   13ee2:	2d00      	cmp	r5, #0
   13ee4:	f040 808d 	bne.w	14002 <ipc_trace_handle+0x276>
   13ee8:	4b5e      	ldr	r3, [pc, #376]	; (14064 <ipc_trace_handle+0x2d8>)
   13eea:	681c      	ldr	r4, [r3, #0]
   13eec:	68a2      	ldr	r2, [r4, #8]
   13eee:	6863      	ldr	r3, [r4, #4]
   13ef0:	429a      	cmp	r2, r3
   13ef2:	f43f af7c 	beq.w	13dee <ipc_trace_handle+0x62>
   13ef6:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   13efa:	f8ad 3000 	strh.w	r3, [sp]
   13efe:	7823      	ldrb	r3, [r4, #0]
   13f00:	466e      	mov	r6, sp
   13f02:	f88d 3004 	strb.w	r3, [sp, #4]
   13f06:	6863      	ldr	r3, [r4, #4]
   13f08:	2105      	movs	r1, #5
   13f0a:	429a      	cmp	r2, r3
   13f0c:	bf2a      	itet	cs
   13f0e:	6927      	ldrcs	r7, [r4, #16]
   13f10:	1a9f      	subcc	r7, r3, r2
   13f12:	1abf      	subcs	r7, r7, r2
   13f14:	429a      	cmp	r2, r3
   13f16:	bf94      	ite	ls
   13f18:	2500      	movls	r5, #0
   13f1a:	68e5      	ldrhi	r5, [r4, #12]
   13f1c:	b2bf      	uxth	r7, r7
   13f1e:	bf88      	it	hi
   13f20:	1b5b      	subhi	r3, r3, r5
   13f22:	4630      	mov	r0, r6
   13f24:	bf88      	it	hi
   13f26:	b29d      	uxthhi	r5, r3
   13f28:	f8ad 7002 	strh.w	r7, [sp, #2]
   13f2c:	f008 fd71 	bl	1ca12 <bsd_os_trace_put>
   13f30:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13f34:	68a0      	ldr	r0, [r4, #8]
   13f36:	f008 fd6c 	bl	1ca12 <bsd_os_trace_put>
   13f3a:	68a3      	ldr	r3, [r4, #8]
   13f3c:	6922      	ldr	r2, [r4, #16]
   13f3e:	441f      	add	r7, r3
   13f40:	4297      	cmp	r7, r2
   13f42:	bf08      	it	eq
   13f44:	68e3      	ldreq	r3, [r4, #12]
   13f46:	60a7      	str	r7, [r4, #8]
   13f48:	bf08      	it	eq
   13f4a:	60a3      	streq	r3, [r4, #8]
   13f4c:	2d00      	cmp	r5, #0
   13f4e:	f43f af4e 	beq.w	13dee <ipc_trace_handle+0x62>
   13f52:	2105      	movs	r1, #5
   13f54:	4630      	mov	r0, r6
   13f56:	f8ad 5002 	strh.w	r5, [sp, #2]
   13f5a:	f008 fd5a 	bl	1ca12 <bsd_os_trace_put>
   13f5e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13f62:	68e0      	ldr	r0, [r4, #12]
   13f64:	f008 fd55 	bl	1ca12 <bsd_os_trace_put>
   13f68:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   13f6c:	68e3      	ldr	r3, [r4, #12]
   13f6e:	4413      	add	r3, r2
   13f70:	60a3      	str	r3, [r4, #8]
   13f72:	e73c      	b.n	13dee <ipc_trace_handle+0x62>
   13f74:	4a38      	ldr	r2, [pc, #224]	; (14058 <ipc_trace_handle+0x2cc>)
   13f76:	7811      	ldrb	r1, [r2, #0]
   13f78:	b109      	cbz	r1, 13f7e <ipc_trace_handle+0x1f2>
   13f7a:	2100      	movs	r1, #0
   13f7c:	7011      	strb	r1, [r2, #0]
   13f7e:	68a5      	ldr	r5, [r4, #8]
   13f80:	2d00      	cmp	r5, #0
   13f82:	d039      	beq.n	13ff8 <ipc_trace_handle+0x26c>
   13f84:	f04f 0c00 	mov.w	ip, #0
   13f88:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 14060 <ipc_trace_handle+0x2d4>
   13f8c:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 1405c <ipc_trace_handle+0x2d0>
   13f90:	4934      	ldr	r1, [pc, #208]	; (14064 <ipc_trace_handle+0x2d8>)
   13f92:	46e1      	mov	r9, ip
   13f94:	4666      	mov	r6, ip
   13f96:	4662      	mov	r2, ip
   13f98:	f8d1 e000 	ldr.w	lr, [r1]
   13f9c:	f8da 8000 	ldr.w	r8, [sl]
   13fa0:	f8db 7000 	ldr.w	r7, [fp]
   13fa4:	e008      	b.n	13fb8 <ipc_trace_handle+0x22c>
   13fa6:	2963      	cmp	r1, #99	; 0x63
   13fa8:	d016      	beq.n	13fd8 <ipc_trace_handle+0x24c>
   13faa:	2961      	cmp	r1, #97	; 0x61
   13fac:	bf04      	itt	eq
   13fae:	4607      	moveq	r7, r0
   13fb0:	2601      	moveq	r6, #1
   13fb2:	3201      	adds	r2, #1
   13fb4:	42aa      	cmp	r2, r5
   13fb6:	d013      	beq.n	13fe0 <ipc_trace_handle+0x254>
   13fb8:	1c91      	adds	r1, r2, #2
   13fba:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   13fbe:	6848      	ldr	r0, [r1, #4]
   13fc0:	7801      	ldrb	r1, [r0, #0]
   13fc2:	2962      	cmp	r1, #98	; 0x62
   13fc4:	d1ef      	bne.n	13fa6 <ipc_trace_handle+0x21a>
   13fc6:	4680      	mov	r8, r0
   13fc8:	f04f 0901 	mov.w	r9, #1
   13fcc:	e7f1      	b.n	13fb2 <ipc_trace_handle+0x226>
   13fce:	f7fb fe11 	bl	fbf4 <bsd_os_trace_irq_set>
   13fd2:	b003      	add	sp, #12
   13fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fd8:	4686      	mov	lr, r0
   13fda:	f04f 0c01 	mov.w	ip, #1
   13fde:	e7e8      	b.n	13fb2 <ipc_trace_handle+0x226>
   13fe0:	bba6      	cbnz	r6, 1404c <ipc_trace_handle+0x2c0>
   13fe2:	f1b9 0f00 	cmp.w	r9, #0
   13fe6:	d001      	beq.n	13fec <ipc_trace_handle+0x260>
   13fe8:	f8ca 8000 	str.w	r8, [sl]
   13fec:	f1bc 0f00 	cmp.w	ip, #0
   13ff0:	d002      	beq.n	13ff8 <ipc_trace_handle+0x26c>
   13ff2:	4a1c      	ldr	r2, [pc, #112]	; (14064 <ipc_trace_handle+0x2d8>)
   13ff4:	f8c2 e000 	str.w	lr, [r2]
   13ff8:	2001      	movs	r0, #1
   13ffa:	2200      	movs	r2, #0
   13ffc:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   14000:	e6ed      	b.n	13dde <ipc_trace_handle+0x52>
   14002:	2105      	movs	r1, #5
   14004:	4630      	mov	r0, r6
   14006:	f8ad 5002 	strh.w	r5, [sp, #2]
   1400a:	f008 fd02 	bl	1ca12 <bsd_os_trace_put>
   1400e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14012:	68e0      	ldr	r0, [r4, #12]
   14014:	f008 fcfd 	bl	1ca12 <bsd_os_trace_put>
   14018:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1401c:	68e3      	ldr	r3, [r4, #12]
   1401e:	4413      	add	r3, r2
   14020:	60a3      	str	r3, [r4, #8]
   14022:	e761      	b.n	13ee8 <ipc_trace_handle+0x15c>
   14024:	2105      	movs	r1, #5
   14026:	4630      	mov	r0, r6
   14028:	f8ad 5002 	strh.w	r5, [sp, #2]
   1402c:	f008 fcf1 	bl	1ca12 <bsd_os_trace_put>
   14030:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14034:	68e0      	ldr	r0, [r4, #12]
   14036:	f008 fcec 	bl	1ca12 <bsd_os_trace_put>
   1403a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1403e:	68e3      	ldr	r3, [r4, #12]
   14040:	4413      	add	r3, r2
   14042:	60a3      	str	r3, [r4, #8]
   14044:	e71c      	b.n	13e80 <ipc_trace_handle+0xf4>
   14046:	f7fb fddd 	bl	fc04 <bsd_os_trace_irq_clear>
   1404a:	e6e5      	b.n	13e18 <ipc_trace_handle+0x8c>
   1404c:	f8cb 7000 	str.w	r7, [fp]
   14050:	e7c7      	b.n	13fe2 <ipc_trace_handle+0x256>
   14052:	bf00      	nop
   14054:	20021034 	.word	0x20021034
   14058:	20022076 	.word	0x20022076
   1405c:	20021030 	.word	0x20021030
   14060:	20021028 	.word	0x20021028
   14064:	2002102c 	.word	0x2002102c

00014068 <rpc_trace_coredump_in_progress>:
   14068:	4b01      	ldr	r3, [pc, #4]	; (14070 <rpc_trace_coredump_in_progress+0x8>)
   1406a:	7818      	ldrb	r0, [r3, #0]
   1406c:	4770      	bx	lr
   1406e:	bf00      	nop
   14070:	20022076 	.word	0x20022076

00014074 <transport_reset>:
   14074:	2000      	movs	r0, #0
   14076:	4770      	bx	lr

00014078 <transport_data_free>:
   14078:	4b0b      	ldr	r3, [pc, #44]	; (140a8 <transport_data_free+0x30>)
   1407a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1407e:	4413      	add	r3, r2
   14080:	4298      	cmp	r0, r3
   14082:	d20d      	bcs.n	140a0 <transport_data_free+0x28>
   14084:	4282      	cmp	r2, r0
   14086:	d80b      	bhi.n	140a0 <transport_data_free+0x28>
   14088:	b510      	push	{r4, lr}
   1408a:	4604      	mov	r4, r0
   1408c:	f000 fd5a 	bl	14b44 <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   14090:	b140      	cbz	r0, 140a4 <transport_data_free+0x2c>
   14092:	4a06      	ldr	r2, [pc, #24]	; (140ac <transport_data_free+0x34>)
   14094:	6084      	str	r4, [r0, #8]
   14096:	6002      	str	r2, [r0, #0]
   14098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1409c:	f000 bc9a 	b.w	149d4 <rpc_transport_ipc_tx_send>
   140a0:	f7fe bbd0 	b.w	12844 <nrf_shared_free>
   140a4:	bd10      	pop	{r4, pc}
   140a6:	bf00      	nop
   140a8:	20021038 	.word	0x20021038
   140ac:	00020001 	.word	0x00020001

000140b0 <rpc_transport_ipc_init>:
   140b0:	2800      	cmp	r0, #0
   140b2:	d02b      	beq.n	1410c <rpc_transport_ipc_init+0x5c>
   140b4:	b530      	push	{r4, r5, lr}
   140b6:	b089      	sub	sp, #36	; 0x24
   140b8:	aa01      	add	r2, sp, #4
   140ba:	4669      	mov	r1, sp
   140bc:	4604      	mov	r4, r0
   140be:	f000 fb9f 	bl	14800 <rpc_transport_ipc_tx_init>
   140c2:	4603      	mov	r3, r0
   140c4:	b140      	cbz	r0, 140d8 <rpc_transport_ipc_init+0x28>
   140c6:	4a13      	ldr	r2, [pc, #76]	; (14114 <rpc_transport_ipc_init+0x64>)
   140c8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   140cc:	c803      	ldmia	r0, {r0, r1}
   140ce:	e882 0003 	stmia.w	r2, {r0, r1}
   140d2:	4618      	mov	r0, r3
   140d4:	b009      	add	sp, #36	; 0x24
   140d6:	bd30      	pop	{r4, r5, pc}
   140d8:	e9dd 1200 	ldrd	r1, r2, [sp]
   140dc:	4620      	mov	r0, r4
   140de:	f000 f84b 	bl	14178 <rpc_transport_ipc_rx_init>
   140e2:	4603      	mov	r3, r0
   140e4:	2800      	cmp	r0, #0
   140e6:	d1ee      	bne.n	140c6 <rpc_transport_ipc_init+0x16>
   140e8:	4b0b      	ldr	r3, [pc, #44]	; (14118 <rpc_transport_ipc_init+0x68>)
   140ea:	490c      	ldr	r1, [pc, #48]	; (1411c <rpc_transport_ipc_init+0x6c>)
   140ec:	480c      	ldr	r0, [pc, #48]	; (14120 <rpc_transport_ipc_init+0x70>)
   140ee:	4a0d      	ldr	r2, [pc, #52]	; (14124 <rpc_transport_ipc_init+0x74>)
   140f0:	9303      	str	r3, [sp, #12]
   140f2:	4d0d      	ldr	r5, [pc, #52]	; (14128 <rpc_transport_ipc_init+0x78>)
   140f4:	4b0d      	ldr	r3, [pc, #52]	; (1412c <rpc_transport_ipc_init+0x7c>)
   140f6:	9104      	str	r1, [sp, #16]
   140f8:	9005      	str	r0, [sp, #20]
   140fa:	490d      	ldr	r1, [pc, #52]	; (14130 <rpc_transport_ipc_init+0x80>)
   140fc:	a802      	add	r0, sp, #8
   140fe:	9307      	str	r3, [sp, #28]
   14100:	9506      	str	r5, [sp, #24]
   14102:	9202      	str	r2, [sp, #8]
   14104:	f003 fec8 	bl	17e98 <rpc_transport_register>
   14108:	4603      	mov	r3, r0
   1410a:	e7dc      	b.n	140c6 <rpc_transport_ipc_init+0x16>
   1410c:	230e      	movs	r3, #14
   1410e:	4618      	mov	r0, r3
   14110:	4770      	bx	lr
   14112:	bf00      	nop
   14114:	20021038 	.word	0x20021038
   14118:	00014ad5 	.word	0x00014ad5
   1411c:	00014ba5 	.word	0x00014ba5
   14120:	00014795 	.word	0x00014795
   14124:	000149d5 	.word	0x000149d5
   14128:	00014079 	.word	0x00014079
   1412c:	00014075 	.word	0x00014075
   14130:	20021040 	.word	0x20021040

00014134 <rpc_transport_rx_handle>:
   14134:	b160      	cbz	r0, 14150 <rpc_transport_rx_handle+0x1c>
   14136:	b508      	push	{r3, lr}
   14138:	6843      	ldr	r3, [r0, #4]
   1413a:	b2db      	uxtb	r3, r3
   1413c:	2b02      	cmp	r3, #2
   1413e:	d00e      	beq.n	1415e <rpc_transport_rx_handle+0x2a>
   14140:	6803      	ldr	r3, [r0, #0]
   14142:	0c1b      	lsrs	r3, r3, #16
   14144:	2b02      	cmp	r3, #2
   14146:	d005      	beq.n	14154 <rpc_transport_rx_handle+0x20>
   14148:	2b04      	cmp	r3, #4
   1414a:	d00e      	beq.n	1416a <rpc_transport_rx_handle+0x36>
   1414c:	2000      	movs	r0, #0
   1414e:	bd08      	pop	{r3, pc}
   14150:	2000      	movs	r0, #0
   14152:	4770      	bx	lr
   14154:	6880      	ldr	r0, [r0, #8]
   14156:	f7fe fb75 	bl	12844 <nrf_shared_free>
   1415a:	2000      	movs	r0, #0
   1415c:	bd08      	pop	{r3, pc}
   1415e:	4601      	mov	r1, r0
   14160:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14164:	4803      	ldr	r0, [pc, #12]	; (14174 <rpc_transport_rx_handle+0x40>)
   14166:	f003 bd89 	b.w	17c7c <rpc_transport_input>
   1416a:	4802      	ldr	r0, [pc, #8]	; (14174 <rpc_transport_rx_handle+0x40>)
   1416c:	f003 fef4 	bl	17f58 <rpc_transport_unregister>
   14170:	2000      	movs	r0, #0
   14172:	bd08      	pop	{r3, pc}
   14174:	20021040 	.word	0x20021040

00014178 <rpc_transport_ipc_rx_init>:
   14178:	2800      	cmp	r0, #0
   1417a:	f000 80ff 	beq.w	1437c <rpc_transport_ipc_rx_init+0x204>
   1417e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14182:	6805      	ldr	r5, [r0, #0]
   14184:	b095      	sub	sp, #84	; 0x54
   14186:	2d00      	cmp	r5, #0
   14188:	f000 80ee 	beq.w	14368 <rpc_transport_ipc_rx_init+0x1f0>
   1418c:	6883      	ldr	r3, [r0, #8]
   1418e:	2b00      	cmp	r3, #0
   14190:	f000 80ea 	beq.w	14368 <rpc_transport_ipc_rx_init+0x1f0>
   14194:	6907      	ldr	r7, [r0, #16]
   14196:	2f00      	cmp	r7, #0
   14198:	f000 80e6 	beq.w	14368 <rpc_transport_ipc_rx_init+0x1f0>
   1419c:	6a84      	ldr	r4, [r0, #40]	; 0x28
   1419e:	2c00      	cmp	r4, #0
   141a0:	f000 80e2 	beq.w	14368 <rpc_transport_ipc_rx_init+0x1f0>
   141a4:	6844      	ldr	r4, [r0, #4]
   141a6:	2c1b      	cmp	r4, #27
   141a8:	f240 80e3 	bls.w	14372 <rpc_transport_ipc_rx_init+0x1fa>
   141ac:	68c4      	ldr	r4, [r0, #12]
   141ae:	2c0b      	cmp	r4, #11
   141b0:	f240 80df 	bls.w	14372 <rpc_transport_ipc_rx_init+0x1fa>
   141b4:	f8d0 e014 	ldr.w	lr, [r0, #20]
   141b8:	f1be 0f17 	cmp.w	lr, #23
   141bc:	f240 80d9 	bls.w	14372 <rpc_transport_ipc_rx_init+0x1fa>
   141c0:	2600      	movs	r6, #0
   141c2:	4604      	mov	r4, r0
   141c4:	486f      	ldr	r0, [pc, #444]	; (14384 <rpc_transport_ipc_rx_init+0x20c>)
   141c6:	e9cd 1200 	strd	r1, r2, [sp]
   141ca:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 143a4 <rpc_transport_ipc_rx_init+0x22c>
   141ce:	496e      	ldr	r1, [pc, #440]	; (14388 <rpc_transport_ipc_rx_init+0x210>)
   141d0:	8006      	strh	r6, [r0, #0]
   141d2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   141d4:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 143a8 <rpc_transport_ipc_rx_init+0x230>
   141d8:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 143ac <rpc_transport_ipc_rx_init+0x234>
   141dc:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 143b0 <rpc_transport_ipc_rx_init+0x238>
   141e0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 143b4 <rpc_transport_ipc_rx_init+0x23c>
   141e4:	4672      	mov	r2, lr
   141e6:	600e      	str	r6, [r1, #0]
   141e8:	f8ca 0000 	str.w	r0, [sl]
   141ec:	4631      	mov	r1, r6
   141ee:	4638      	mov	r0, r7
   141f0:	f8cc 6000 	str.w	r6, [ip]
   141f4:	f8cb 3000 	str.w	r3, [fp]
   141f8:	f8c8 6000 	str.w	r6, [r8]
   141fc:	f8c9 6000 	str.w	r6, [r9]
   14200:	f007 fdad 	bl	1bd5e <memset>
   14204:	69e3      	ldr	r3, [r4, #28]
   14206:	4638      	mov	r0, r7
   14208:	603b      	str	r3, [r7, #0]
   1420a:	69a3      	ldr	r3, [r4, #24]
   1420c:	607b      	str	r3, [r7, #4]
   1420e:	f7ff fcd5 	bl	13bbc <ipc_trace_init>
   14212:	2201      	movs	r2, #1
   14214:	f04f 0c04 	mov.w	ip, #4
   14218:	4b5c      	ldr	r3, [pc, #368]	; (1438c <rpc_transport_ipc_rx_init+0x214>)
   1421a:	495d      	ldr	r1, [pc, #372]	; (14390 <rpc_transport_ipc_rx_init+0x218>)
   1421c:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   14220:	6809      	ldr	r1, [r1, #0]
   14222:	2080      	movs	r0, #128	; 0x80
   14224:	9104      	str	r1, [sp, #16]
   14226:	495b      	ldr	r1, [pc, #364]	; (14394 <rpc_transport_ipc_rx_init+0x21c>)
   14228:	f8dd e010 	ldr.w	lr, [sp, #16]
   1422c:	f8c3 6614 	str.w	r6, [r3, #1556]	; 0x614
   14230:	6809      	ldr	r1, [r1, #0]
   14232:	702e      	strb	r6, [r5, #0]
   14234:	9103      	str	r1, [sp, #12]
   14236:	706e      	strb	r6, [r5, #1]
   14238:	70ee      	strb	r6, [r5, #3]
   1423a:	70aa      	strb	r2, [r5, #2]
   1423c:	9903      	ldr	r1, [sp, #12]
   1423e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   14240:	f8db e000 	ldr.w	lr, [fp]
   14244:	6069      	str	r1, [r5, #4]
   14246:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   14248:	9c01      	ldr	r4, [sp, #4]
   1424a:	60a9      	str	r1, [r5, #8]
   1424c:	60ec      	str	r4, [r5, #12]
   1424e:	9c00      	ldr	r4, [sp, #0]
   14250:	4951      	ldr	r1, [pc, #324]	; (14398 <rpc_transport_ipc_rx_init+0x220>)
   14252:	61af      	str	r7, [r5, #24]
   14254:	f8c5 e014 	str.w	lr, [r5, #20]
   14258:	612c      	str	r4, [r5, #16]
   1425a:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   1425e:	680c      	ldr	r4, [r1, #0]
   14260:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   14264:	9405      	str	r4, [sp, #20]
   14266:	9c05      	ldr	r4, [sp, #20]
   14268:	f8c3 c598 	str.w	ip, [r3, #1432]	; 0x598
   1426c:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   14270:	f44f 6780 	mov.w	r7, #1024	; 0x400
   14274:	9406      	str	r4, [sp, #24]
   14276:	9c06      	ldr	r4, [sp, #24]
   14278:	2410      	movs	r4, #16
   1427a:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   1427e:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   14282:	4d46      	ldr	r5, [pc, #280]	; (1439c <rpc_transport_ipc_rx_init+0x224>)
   14284:	9407      	str	r4, [sp, #28]
   14286:	9c07      	ldr	r4, [sp, #28]
   14288:	2440      	movs	r4, #64	; 0x40
   1428a:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   1428e:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   14292:	9408      	str	r4, [sp, #32]
   14294:	9c08      	ldr	r4, [sp, #32]
   14296:	f8c3 05ac 	str.w	r0, [r3, #1452]	; 0x5ac
   1429a:	f8d1 04ac 	ldr.w	r0, [r1, #1196]	; 0x4ac
   1429e:	9009      	str	r0, [sp, #36]	; 0x24
   142a0:	9809      	ldr	r0, [sp, #36]	; 0x24
   142a2:	f8c3 6100 	str.w	r6, [r3, #256]	; 0x100
   142a6:	6808      	ldr	r0, [r1, #0]
   142a8:	900a      	str	r0, [sp, #40]	; 0x28
   142aa:	980a      	ldr	r0, [sp, #40]	; 0x28
   142ac:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
   142b0:	6888      	ldr	r0, [r1, #8]
   142b2:	900b      	str	r0, [sp, #44]	; 0x2c
   142b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   142b6:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
   142ba:	6908      	ldr	r0, [r1, #16]
   142bc:	900c      	str	r0, [sp, #48]	; 0x30
   142be:	980c      	ldr	r0, [sp, #48]	; 0x30
   142c0:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
   142c4:	6988      	ldr	r0, [r1, #24]
   142c6:	900d      	str	r0, [sp, #52]	; 0x34
   142c8:	980d      	ldr	r0, [sp, #52]	; 0x34
   142ca:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
   142ce:	69c8      	ldr	r0, [r1, #28]
   142d0:	f501 7101 	add.w	r1, r1, #516	; 0x204
   142d4:	900e      	str	r0, [sp, #56]	; 0x38
   142d6:	980e      	ldr	r0, [sp, #56]	; 0x38
   142d8:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   142dc:	4310      	orrs	r0, r2
   142de:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
   142e2:	680c      	ldr	r4, [r1, #0]
   142e4:	482e      	ldr	r0, [pc, #184]	; (143a0 <rpc_transport_ipc_rx_init+0x228>)
   142e6:	940f      	str	r4, [sp, #60]	; 0x3c
   142e8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   142ea:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   142ee:	ea44 040c 	orr.w	r4, r4, ip
   142f2:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   142f6:	680c      	ldr	r4, [r1, #0]
   142f8:	9410      	str	r4, [sp, #64]	; 0x40
   142fa:	9c10      	ldr	r4, [sp, #64]	; 0x40
   142fc:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   14300:	f044 0410 	orr.w	r4, r4, #16
   14304:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   14308:	680c      	ldr	r4, [r1, #0]
   1430a:	9411      	str	r4, [sp, #68]	; 0x44
   1430c:	9c11      	ldr	r4, [sp, #68]	; 0x44
   1430e:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   14312:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   14316:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   1431a:	680c      	ldr	r4, [r1, #0]
   1431c:	9412      	str	r4, [sp, #72]	; 0x48
   1431e:	9c12      	ldr	r4, [sp, #72]	; 0x48
   14320:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   14324:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   14328:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   1432c:	f8da 3000 	ldr.w	r3, [sl]
   14330:	6809      	ldr	r1, [r1, #0]
   14332:	015b      	lsls	r3, r3, #5
   14334:	9113      	str	r1, [sp, #76]	; 0x4c
   14336:	b2db      	uxtb	r3, r3
   14338:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1433a:	f8c8 2000 	str.w	r2, [r8]
   1433e:	f880 332a 	strb.w	r3, [r0, #810]	; 0x32a
   14342:	f8c0 7184 	str.w	r7, [r0, #388]	; 0x184
   14346:	6047      	str	r7, [r0, #4]
   14348:	9602      	str	r6, [sp, #8]
   1434a:	f8c5 6610 	str.w	r6, [r5, #1552]	; 0x610
   1434e:	f8d5 3610 	ldr.w	r3, [r5, #1552]	; 0x610
   14352:	9302      	str	r3, [sp, #8]
   14354:	9b02      	ldr	r3, [sp, #8]
   14356:	f8d8 3000 	ldr.w	r3, [r8]
   1435a:	2b01      	cmp	r3, #1
   1435c:	d0fb      	beq.n	14356 <rpc_transport_ipc_rx_init+0x1de>
   1435e:	f8d9 0000 	ldr.w	r0, [r9]
   14362:	b015      	add	sp, #84	; 0x54
   14364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14368:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1436c:	b015      	add	sp, #84	; 0x54
   1436e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14372:	f24c 0009 	movw	r0, #49161	; 0xc009
   14376:	b015      	add	sp, #84	; 0x54
   14378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1437c:	f24c 000e 	movw	r0, #49166	; 0xc00e
   14380:	4770      	bx	lr
   14382:	bf00      	nop
   14384:	20021e7e 	.word	0x20021e7e
   14388:	20021050 	.word	0x20021050
   1438c:	4002a000 	.word	0x4002a000
   14390:	4002a610 	.word	0x4002a610
   14394:	4002a614 	.word	0x4002a614
   14398:	4002a590 	.word	0x4002a590
   1439c:	40005000 	.word	0x40005000
   143a0:	e000e100 	.word	0xe000e100
   143a4:	20021048 	.word	0x20021048
   143a8:	20021054 	.word	0x20021054
   143ac:	2002104c 	.word	0x2002104c
   143b0:	20021058 	.word	0x20021058
   143b4:	20021044 	.word	0x20021044

000143b8 <IPC_IRQHandler>:
   143b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143bc:	f44f 6580 	mov.w	r5, #1024	; 0x400
   143c0:	4ca7      	ldr	r4, [pc, #668]	; (14660 <_flash_used+0x11c>)
   143c2:	b087      	sub	sp, #28
   143c4:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   143c8:	f3bf 8f4f 	dsb	sy
   143cc:	f3bf 8f6f 	isb	sy
   143d0:	4ea4      	ldr	r6, [pc, #656]	; (14664 <_flash_used+0x120>)
   143d2:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
   143d6:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   143da:	061f      	lsls	r7, r3, #24
   143dc:	f100 80c8 	bmi.w	14570 <_flash_used+0x2c>
   143e0:	4ba0      	ldr	r3, [pc, #640]	; (14664 <_flash_used+0x120>)
   143e2:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   143e6:	07d0      	lsls	r0, r2, #31
   143e8:	f100 80d4 	bmi.w	14594 <_flash_used+0x50>
   143ec:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   143f0:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   143f4:	f040 80b6 	bne.w	14564 <_flash_used+0x20>
   143f8:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   143fc:	0749      	lsls	r1, r1, #29
   143fe:	f100 80e6 	bmi.w	145ce <_flash_used+0x8a>
   14402:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   14406:	06da      	lsls	r2, r3, #27
   14408:	f140 809d 	bpl.w	14546 <_flash_used+0x2>
   1440c:	2100      	movs	r1, #0
   1440e:	4a95      	ldr	r2, [pc, #596]	; (14664 <_flash_used+0x120>)
   14410:	4b95      	ldr	r3, [pc, #596]	; (14668 <_flash_used+0x124>)
   14412:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
   14416:	681b      	ldr	r3, [r3, #0]
   14418:	9304      	str	r3, [sp, #16]
   1441a:	9b04      	ldr	r3, [sp, #16]
   1441c:	f8df 8270 	ldr.w	r8, [pc, #624]	; 14690 <_flash_used+0x14c>
   14420:	4f92      	ldr	r7, [pc, #584]	; (1466c <_flash_used+0x128>)
   14422:	f8df 9270 	ldr.w	r9, [pc, #624]	; 14694 <_flash_used+0x150>
   14426:	f8d8 a000 	ldr.w	sl, [r8]
   1442a:	f8da 1000 	ldr.w	r1, [sl]
   1442e:	2900      	cmp	r1, #0
   14430:	d03f      	beq.n	144b2 <IPC_IRQHandler+0xfa>
   14432:	2200      	movs	r2, #0
   14434:	4614      	mov	r4, r2
   14436:	e002      	b.n	1443e <IPC_IRQHandler+0x86>
   14438:	3401      	adds	r4, #1
   1443a:	428c      	cmp	r4, r1
   1443c:	d227      	bcs.n	1448e <IPC_IRQHandler+0xd6>
   1443e:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   14442:	68ab      	ldr	r3, [r5, #8]
   14444:	2b00      	cmp	r3, #0
   14446:	d0f7      	beq.n	14438 <IPC_IRQHandler+0x80>
   14448:	686e      	ldr	r6, [r5, #4]
   1444a:	b2f6      	uxtb	r6, r6
   1444c:	2e01      	cmp	r6, #1
   1444e:	d1f3      	bne.n	14438 <IPC_IRQHandler+0x80>
   14450:	6868      	ldr	r0, [r5, #4]
   14452:	f8b9 3000 	ldrh.w	r3, [r9]
   14456:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   1445a:	d1ed      	bne.n	14438 <IPC_IRQHandler+0x80>
   1445c:	686a      	ldr	r2, [r5, #4]
   1445e:	3301      	adds	r3, #1
   14460:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   14464:	f042 0202 	orr.w	r2, r2, #2
   14468:	606a      	str	r2, [r5, #4]
   1446a:	68a8      	ldr	r0, [r5, #8]
   1446c:	f8a9 3000 	strh.w	r3, [r9]
   14470:	f7ff fe60 	bl	14134 <rpc_transport_rx_handle>
   14474:	4632      	mov	r2, r6
   14476:	b928      	cbnz	r0, 14484 <IPC_IRQHandler+0xcc>
   14478:	686b      	ldr	r3, [r5, #4]
   1447a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1447e:	f043 0303 	orr.w	r3, r3, #3
   14482:	606b      	str	r3, [r5, #4]
   14484:	f8da 1000 	ldr.w	r1, [sl]
   14488:	3401      	adds	r4, #1
   1448a:	428c      	cmp	r4, r1
   1448c:	d3d7      	bcc.n	1443e <IPC_IRQHandler+0x86>
   1448e:	2a00      	cmp	r2, #0
   14490:	d1cd      	bne.n	1442e <IPC_IRQHandler+0x76>
   14492:	b171      	cbz	r1, 144b2 <IPC_IRQHandler+0xfa>
   14494:	4613      	mov	r3, r2
   14496:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
   1449a:	6890      	ldr	r0, [r2, #8]
   1449c:	3301      	adds	r3, #1
   1449e:	b130      	cbz	r0, 144ae <IPC_IRQHandler+0xf6>
   144a0:	f8d2 b004 	ldr.w	fp, [r2, #4]
   144a4:	fa5f fb8b 	uxtb.w	fp, fp
   144a8:	f1bb 0f01 	cmp.w	fp, #1
   144ac:	d003      	beq.n	144b6 <IPC_IRQHandler+0xfe>
   144ae:	428b      	cmp	r3, r1
   144b0:	d1f1      	bne.n	14496 <IPC_IRQHandler+0xde>
   144b2:	f04f 0b00 	mov.w	fp, #0
   144b6:	f8d7 a000 	ldr.w	sl, [r7]
   144ba:	f8da 2000 	ldr.w	r2, [sl]
   144be:	2a00      	cmp	r2, #0
   144c0:	d03d      	beq.n	1453e <IPC_IRQHandler+0x186>
   144c2:	2100      	movs	r1, #0
   144c4:	460c      	mov	r4, r1
   144c6:	e002      	b.n	144ce <IPC_IRQHandler+0x116>
   144c8:	3401      	adds	r4, #1
   144ca:	4294      	cmp	r4, r2
   144cc:	d227      	bcs.n	1451e <IPC_IRQHandler+0x166>
   144ce:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   144d2:	68ab      	ldr	r3, [r5, #8]
   144d4:	2b00      	cmp	r3, #0
   144d6:	d0f7      	beq.n	144c8 <IPC_IRQHandler+0x110>
   144d8:	686e      	ldr	r6, [r5, #4]
   144da:	b2f6      	uxtb	r6, r6
   144dc:	2e01      	cmp	r6, #1
   144de:	d1f3      	bne.n	144c8 <IPC_IRQHandler+0x110>
   144e0:	6868      	ldr	r0, [r5, #4]
   144e2:	f8b9 3000 	ldrh.w	r3, [r9]
   144e6:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   144ea:	d1ed      	bne.n	144c8 <IPC_IRQHandler+0x110>
   144ec:	686a      	ldr	r2, [r5, #4]
   144ee:	3301      	adds	r3, #1
   144f0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   144f4:	f042 0202 	orr.w	r2, r2, #2
   144f8:	606a      	str	r2, [r5, #4]
   144fa:	68a8      	ldr	r0, [r5, #8]
   144fc:	f8a9 3000 	strh.w	r3, [r9]
   14500:	f7ff fe18 	bl	14134 <rpc_transport_rx_handle>
   14504:	4631      	mov	r1, r6
   14506:	b928      	cbnz	r0, 14514 <IPC_IRQHandler+0x15c>
   14508:	686a      	ldr	r2, [r5, #4]
   1450a:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
   1450e:	f043 0303 	orr.w	r3, r3, #3
   14512:	606b      	str	r3, [r5, #4]
   14514:	f8da 2000 	ldr.w	r2, [sl]
   14518:	3401      	adds	r4, #1
   1451a:	4294      	cmp	r4, r2
   1451c:	d3d7      	bcc.n	144ce <IPC_IRQHandler+0x116>
   1451e:	2900      	cmp	r1, #0
   14520:	d1cd      	bne.n	144be <IPC_IRQHandler+0x106>
   14522:	b162      	cbz	r2, 1453e <IPC_IRQHandler+0x186>
   14524:	460b      	mov	r3, r1
   14526:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
   1452a:	6888      	ldr	r0, [r1, #8]
   1452c:	3301      	adds	r3, #1
   1452e:	b120      	cbz	r0, 1453a <IPC_IRQHandler+0x182>
   14530:	6849      	ldr	r1, [r1, #4]
   14532:	b2c9      	uxtb	r1, r1
   14534:	2901      	cmp	r1, #1
   14536:	f43f af76 	beq.w	14426 <IPC_IRQHandler+0x6e>
   1453a:	4293      	cmp	r3, r2
   1453c:	d1f3      	bne.n	14526 <IPC_IRQHandler+0x16e>
   1453e:	f1bb 0f00 	cmp.w	fp, #0
   14542:	f47f af70 	bne.w	14426 <IPC_IRQHandler+0x6e>
   14546:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1454a:	4b49      	ldr	r3, [pc, #292]	; (14670 <_flash_used+0x12c>)
   1454c:	4a44      	ldr	r2, [pc, #272]	; (14660 <_flash_used+0x11c>)
   1454e:	681b      	ldr	r3, [r3, #0]
   14550:	015b      	lsls	r3, r3, #5
   14552:	b2db      	uxtb	r3, r3
   14554:	f882 332a 	strb.w	r3, [r2, #810]	; 0x32a
   14558:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
   1455c:	6051      	str	r1, [r2, #4]
   1455e:	b007      	add	sp, #28
   14560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14564:	2206      	movs	r2, #6
   14566:	4b43      	ldr	r3, [pc, #268]	; (14674 <_flash_used+0x130>)
   14568:	601a      	str	r2, [r3, #0]
   1456a:	b007      	add	sp, #28
   1456c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14570:	f7ff fc0c 	bl	13d8c <ipc_trace_handle>
   14574:	f7ff fd78 	bl	14068 <rpc_trace_coredump_in_progress>
   14578:	2800      	cmp	r0, #0
   1457a:	d149      	bne.n	14610 <_flash_used+0xcc>
   1457c:	4b3e      	ldr	r3, [pc, #248]	; (14678 <_flash_used+0x134>)
   1457e:	f8c6 011c 	str.w	r0, [r6, #284]	; 0x11c
   14582:	681b      	ldr	r3, [r3, #0]
   14584:	9301      	str	r3, [sp, #4]
   14586:	9b01      	ldr	r3, [sp, #4]
   14588:	4b36      	ldr	r3, [pc, #216]	; (14664 <_flash_used+0x120>)
   1458a:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1458e:	07d0      	lsls	r0, r2, #31
   14590:	f57f af2c 	bpl.w	143ec <IPC_IRQHandler+0x34>
   14594:	2000      	movs	r0, #0
   14596:	f248 0202 	movw	r2, #32770	; 0x8002
   1459a:	4938      	ldr	r1, [pc, #224]	; (1467c <_flash_used+0x138>)
   1459c:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   145a0:	6809      	ldr	r1, [r1, #0]
   145a2:	9102      	str	r1, [sp, #8]
   145a4:	9902      	ldr	r1, [sp, #8]
   145a6:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   145aa:	4293      	cmp	r3, r2
   145ac:	d040      	beq.n	14630 <_flash_used+0xec>
   145ae:	d81e      	bhi.n	145ee <_flash_used+0xaa>
   145b0:	2b00      	cmp	r3, #0
   145b2:	d04f      	beq.n	14654 <_flash_used+0x110>
   145b4:	2b02      	cmp	r3, #2
   145b6:	d942      	bls.n	1463e <_flash_used+0xfa>
   145b8:	f248 0201 	movw	r2, #32769	; 0x8001
   145bc:	4293      	cmp	r3, r2
   145be:	d149      	bne.n	14654 <_flash_used+0x110>
   145c0:	2003      	movs	r0, #3
   145c2:	2207      	movs	r2, #7
   145c4:	492b      	ldr	r1, [pc, #172]	; (14674 <_flash_used+0x130>)
   145c6:	4b2e      	ldr	r3, [pc, #184]	; (14680 <_flash_used+0x13c>)
   145c8:	6008      	str	r0, [r1, #0]
   145ca:	601a      	str	r2, [r3, #0]
   145cc:	e7cd      	b.n	1456a <_flash_used+0x26>
   145ce:	4d29      	ldr	r5, [pc, #164]	; (14674 <_flash_used+0x130>)
   145d0:	6829      	ldr	r1, [r5, #0]
   145d2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   145d6:	2901      	cmp	r1, #1
   145d8:	492a      	ldr	r1, [pc, #168]	; (14684 <_flash_used+0x140>)
   145da:	d05d      	beq.n	14698 <_flash_used+0x154>
   145dc:	680a      	ldr	r2, [r1, #0]
   145de:	9203      	str	r2, [sp, #12]
   145e0:	9a03      	ldr	r2, [sp, #12]
   145e2:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   145e6:	06db      	lsls	r3, r3, #27
   145e8:	f53f af10 	bmi.w	1440c <IPC_IRQHandler+0x54>
   145ec:	e716      	b.n	1441c <IPC_IRQHandler+0x64>
   145ee:	4a26      	ldr	r2, [pc, #152]	; (14688 <_flash_used+0x144>)
   145f0:	4293      	cmp	r3, r2
   145f2:	d814      	bhi.n	1461e <_flash_used+0xda>
   145f4:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   145f8:	d814      	bhi.n	14624 <_flash_used+0xe0>
   145fa:	f248 0203 	movw	r2, #32771	; 0x8003
   145fe:	4293      	cmp	r3, r2
   14600:	d128      	bne.n	14654 <_flash_used+0x110>
   14602:	2003      	movs	r0, #3
   14604:	2204      	movs	r2, #4
   14606:	491b      	ldr	r1, [pc, #108]	; (14674 <_flash_used+0x130>)
   14608:	4b1d      	ldr	r3, [pc, #116]	; (14680 <_flash_used+0x13c>)
   1460a:	6008      	str	r0, [r1, #0]
   1460c:	601a      	str	r2, [r3, #0]
   1460e:	e7ac      	b.n	1456a <_flash_used+0x26>
   14610:	23e0      	movs	r3, #224	; 0xe0
   14612:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
   14616:	6065      	str	r5, [r4, #4]
   14618:	b007      	add	sp, #28
   1461a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1461e:	4a1b      	ldr	r2, [pc, #108]	; (1468c <_flash_used+0x148>)
   14620:	4293      	cmp	r3, r2
   14622:	d117      	bne.n	14654 <_flash_used+0x110>
   14624:	2003      	movs	r0, #3
   14626:	4913      	ldr	r1, [pc, #76]	; (14674 <_flash_used+0x130>)
   14628:	4a15      	ldr	r2, [pc, #84]	; (14680 <_flash_used+0x13c>)
   1462a:	6008      	str	r0, [r1, #0]
   1462c:	6013      	str	r3, [r2, #0]
   1462e:	e79c      	b.n	1456a <_flash_used+0x26>
   14630:	2003      	movs	r0, #3
   14632:	2206      	movs	r2, #6
   14634:	490f      	ldr	r1, [pc, #60]	; (14674 <_flash_used+0x130>)
   14636:	4b12      	ldr	r3, [pc, #72]	; (14680 <_flash_used+0x13c>)
   14638:	6008      	str	r0, [r1, #0]
   1463a:	601a      	str	r2, [r3, #0]
   1463c:	e795      	b.n	1456a <_flash_used+0x26>
   1463e:	2303      	movs	r3, #3
   14640:	4618      	mov	r0, r3
   14642:	490c      	ldr	r1, [pc, #48]	; (14674 <_flash_used+0x130>)
   14644:	4a0e      	ldr	r2, [pc, #56]	; (14680 <_flash_used+0x13c>)
   14646:	600b      	str	r3, [r1, #0]
   14648:	6013      	str	r3, [r2, #0]
   1464a:	b007      	add	sp, #28
   1464c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14650:	f7ff b91a 	b.w	13888 <rpc_transport_ipc_fault_handler>
   14654:	2303      	movs	r3, #3
   14656:	4907      	ldr	r1, [pc, #28]	; (14674 <_flash_used+0x130>)
   14658:	4a09      	ldr	r2, [pc, #36]	; (14680 <_flash_used+0x13c>)
   1465a:	600b      	str	r3, [r1, #0]
   1465c:	6013      	str	r3, [r2, #0]
   1465e:	e784      	b.n	1456a <_flash_used+0x26>
   14660:	e000e100 	.word	0xe000e100
   14664:	4002a000 	.word	0x4002a000
   14668:	4002a110 	.word	0x4002a110
   1466c:	20021050 	.word	0x20021050
   14670:	20021048 	.word	0x20021048
   14674:	2002104c 	.word	0x2002104c
   14678:	4002a11c 	.word	0x4002a11c
   1467c:	4002a100 	.word	0x4002a100
   14680:	20021044 	.word	0x20021044
   14684:	4002a108 	.word	0x4002a108
   14688:	04400004 	.word	0x04400004
   1468c:	05500001 	.word	0x05500001
   14690:	20021054 	.word	0x20021054
   14694:	20021e7e 	.word	0x20021e7e
   14698:	4a37      	ldr	r2, [pc, #220]	; (14778 <_flash_used+0x234>)
   1469a:	680b      	ldr	r3, [r1, #0]
   1469c:	6812      	ldr	r2, [r2, #0]
   1469e:	9305      	str	r3, [sp, #20]
   146a0:	6893      	ldr	r3, [r2, #8]
   146a2:	4836      	ldr	r0, [pc, #216]	; (1477c <_flash_used+0x238>)
   146a4:	4936      	ldr	r1, [pc, #216]	; (14780 <_flash_used+0x23c>)
   146a6:	6003      	str	r3, [r0, #0]
   146a8:	6854      	ldr	r4, [r2, #4]
   146aa:	9a05      	ldr	r2, [sp, #20]
   146ac:	600c      	str	r4, [r1, #0]
   146ae:	b16b      	cbz	r3, 146cc <_flash_used+0x188>
   146b0:	b164      	cbz	r4, 146cc <_flash_used+0x188>
   146b2:	681b      	ldr	r3, [r3, #0]
   146b4:	2b10      	cmp	r3, #16
   146b6:	d802      	bhi.n	146be <_flash_used+0x17a>
   146b8:	6822      	ldr	r2, [r4, #0]
   146ba:	2a10      	cmp	r2, #16
   146bc:	d90c      	bls.n	146d8 <_flash_used+0x194>
   146be:	2103      	movs	r1, #3
   146c0:	f24c 0206 	movw	r2, #49158	; 0xc006
   146c4:	4b2f      	ldr	r3, [pc, #188]	; (14784 <_flash_used+0x240>)
   146c6:	6029      	str	r1, [r5, #0]
   146c8:	601a      	str	r2, [r3, #0]
   146ca:	e74e      	b.n	1456a <_flash_used+0x26>
   146cc:	2103      	movs	r1, #3
   146ce:	2210      	movs	r2, #16
   146d0:	4b2c      	ldr	r3, [pc, #176]	; (14784 <_flash_used+0x240>)
   146d2:	6029      	str	r1, [r5, #0]
   146d4:	601a      	str	r2, [r3, #0]
   146d6:	e748      	b.n	1456a <_flash_used+0x26>
   146d8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 14790 <_flash_used+0x24c>
   146dc:	2a00      	cmp	r2, #0
   146de:	d042      	beq.n	14766 <_flash_used+0x222>
   146e0:	2300      	movs	r3, #0
   146e2:	f104 0904 	add.w	r9, r4, #4
   146e6:	461e      	mov	r6, r3
   146e8:	e002      	b.n	146f0 <_flash_used+0x1ac>
   146ea:	3601      	adds	r6, #1
   146ec:	4296      	cmp	r6, r2
   146ee:	d22a      	bcs.n	14746 <_flash_used+0x202>
   146f0:	00f7      	lsls	r7, r6, #3
   146f2:	19e1      	adds	r1, r4, r7
   146f4:	6888      	ldr	r0, [r1, #8]
   146f6:	2800      	cmp	r0, #0
   146f8:	d0f7      	beq.n	146ea <_flash_used+0x1a6>
   146fa:	f8d1 a004 	ldr.w	sl, [r1, #4]
   146fe:	fa5f fa8a 	uxtb.w	sl, sl
   14702:	f1ba 0f01 	cmp.w	sl, #1
   14706:	d1f0      	bne.n	146ea <_flash_used+0x1a6>
   14708:	f8d1 c004 	ldr.w	ip, [r1, #4]
   1470c:	f8b8 0000 	ldrh.w	r0, [r8]
   14710:	ebb0 4f1c 	cmp.w	r0, ip, lsr #16
   14714:	d1e9      	bne.n	146ea <_flash_used+0x1a6>
   14716:	684b      	ldr	r3, [r1, #4]
   14718:	1c42      	adds	r2, r0, #1
   1471a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1471e:	f043 0302 	orr.w	r3, r3, #2
   14722:	604b      	str	r3, [r1, #4]
   14724:	6888      	ldr	r0, [r1, #8]
   14726:	f8a8 2000 	strh.w	r2, [r8]
   1472a:	f7ff fd03 	bl	14134 <rpc_transport_rx_handle>
   1472e:	4653      	mov	r3, sl
   14730:	b938      	cbnz	r0, 14742 <_flash_used+0x1fe>
   14732:	f859 2007 	ldr.w	r2, [r9, r7]
   14736:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1473a:	f042 0203 	orr.w	r2, r2, #3
   1473e:	f849 2007 	str.w	r2, [r9, r7]
   14742:	6822      	ldr	r2, [r4, #0]
   14744:	e7d1      	b.n	146ea <_flash_used+0x1a6>
   14746:	2b00      	cmp	r3, #0
   14748:	d1c8      	bne.n	146dc <_flash_used+0x198>
   1474a:	b912      	cbnz	r2, 14752 <_flash_used+0x20e>
   1474c:	e00b      	b.n	14766 <_flash_used+0x222>
   1474e:	4293      	cmp	r3, r2
   14750:	d009      	beq.n	14766 <_flash_used+0x222>
   14752:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
   14756:	6888      	ldr	r0, [r1, #8]
   14758:	3301      	adds	r3, #1
   1475a:	2800      	cmp	r0, #0
   1475c:	d0f7      	beq.n	1474e <_flash_used+0x20a>
   1475e:	6849      	ldr	r1, [r1, #4]
   14760:	b2c9      	uxtb	r1, r1
   14762:	2901      	cmp	r1, #1
   14764:	d1f3      	bne.n	1474e <_flash_used+0x20a>
   14766:	2002      	movs	r0, #2
   14768:	4b07      	ldr	r3, [pc, #28]	; (14788 <_flash_used+0x244>)
   1476a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1476e:	4a07      	ldr	r2, [pc, #28]	; (1478c <_flash_used+0x248>)
   14770:	681b      	ldr	r3, [r3, #0]
   14772:	6028      	str	r0, [r5, #0]
   14774:	e6ec      	b.n	14550 <_flash_used+0xc>
   14776:	bf00      	nop
   14778:	20021058 	.word	0x20021058
   1477c:	20021054 	.word	0x20021054
   14780:	20021050 	.word	0x20021050
   14784:	20021044 	.word	0x20021044
   14788:	20021048 	.word	0x20021048
   1478c:	e000e100 	.word	0xe000e100
   14790:	20021e7e 	.word	0x20021e7e

00014794 <rpc_transport_msg_free>:
   14794:	b430      	push	{r4, r5}
   14796:	4b18      	ldr	r3, [pc, #96]	; (147f8 <rpc_transport_msg_free+0x64>)
   14798:	681c      	ldr	r4, [r3, #0]
   1479a:	6825      	ldr	r5, [r4, #0]
   1479c:	b16d      	cbz	r5, 147ba <rpc_transport_msg_free+0x26>
   1479e:	68a3      	ldr	r3, [r4, #8]
   147a0:	4283      	cmp	r3, r0
   147a2:	d027      	beq.n	147f4 <rpc_transport_msg_free+0x60>
   147a4:	2300      	movs	r3, #0
   147a6:	e002      	b.n	147ae <rpc_transport_msg_free+0x1a>
   147a8:	6889      	ldr	r1, [r1, #8]
   147aa:	4281      	cmp	r1, r0
   147ac:	d019      	beq.n	147e2 <rpc_transport_msg_free+0x4e>
   147ae:	3301      	adds	r3, #1
   147b0:	00da      	lsls	r2, r3, #3
   147b2:	42ab      	cmp	r3, r5
   147b4:	eb04 0102 	add.w	r1, r4, r2
   147b8:	d1f6      	bne.n	147a8 <rpc_transport_msg_free+0x14>
   147ba:	4b10      	ldr	r3, [pc, #64]	; (147fc <rpc_transport_msg_free+0x68>)
   147bc:	681c      	ldr	r4, [r3, #0]
   147be:	6825      	ldr	r5, [r4, #0]
   147c0:	b16d      	cbz	r5, 147de <rpc_transport_msg_free+0x4a>
   147c2:	68a3      	ldr	r3, [r4, #8]
   147c4:	4283      	cmp	r3, r0
   147c6:	d015      	beq.n	147f4 <rpc_transport_msg_free+0x60>
   147c8:	2300      	movs	r3, #0
   147ca:	e002      	b.n	147d2 <rpc_transport_msg_free+0x3e>
   147cc:	6889      	ldr	r1, [r1, #8]
   147ce:	4281      	cmp	r1, r0
   147d0:	d007      	beq.n	147e2 <rpc_transport_msg_free+0x4e>
   147d2:	3301      	adds	r3, #1
   147d4:	00da      	lsls	r2, r3, #3
   147d6:	429d      	cmp	r5, r3
   147d8:	eb04 0102 	add.w	r1, r4, r2
   147dc:	d1f6      	bne.n	147cc <rpc_transport_msg_free+0x38>
   147de:	bc30      	pop	{r4, r5}
   147e0:	4770      	bx	lr
   147e2:	3204      	adds	r2, #4
   147e4:	58a3      	ldr	r3, [r4, r2]
   147e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   147ea:	f043 0303 	orr.w	r3, r3, #3
   147ee:	50a3      	str	r3, [r4, r2]
   147f0:	bc30      	pop	{r4, r5}
   147f2:	4770      	bx	lr
   147f4:	2204      	movs	r2, #4
   147f6:	e7f5      	b.n	147e4 <rpc_transport_msg_free+0x50>
   147f8:	20021054 	.word	0x20021054
   147fc:	20021050 	.word	0x20021050

00014800 <rpc_transport_ipc_tx_init>:
   14800:	2800      	cmp	r0, #0
   14802:	f000 80b8 	beq.w	14976 <rpc_transport_ipc_tx_init+0x176>
   14806:	2900      	cmp	r1, #0
   14808:	f000 80b5 	beq.w	14976 <rpc_transport_ipc_tx_init+0x176>
   1480c:	2a00      	cmp	r2, #0
   1480e:	f000 80b2 	beq.w	14976 <rpc_transport_ipc_tx_init+0x176>
   14812:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14816:	6a04      	ldr	r4, [r0, #32]
   14818:	b085      	sub	sp, #20
   1481a:	2c00      	cmp	r4, #0
   1481c:	f000 80a6 	beq.w	1496c <rpc_transport_ipc_tx_init+0x16c>
   14820:	6a40      	ldr	r0, [r0, #36]	; 0x24
   14822:	2800      	cmp	r0, #0
   14824:	f000 80a2 	beq.w	1496c <rpc_transport_ipc_tx_init+0x16c>
   14828:	f642 4587 	movw	r5, #11399	; 0x2c87
   1482c:	f04f 0a00 	mov.w	sl, #0
   14830:	4e55      	ldr	r6, [pc, #340]	; (14988 <rpc_transport_ipc_tx_init+0x188>)
   14832:	42a8      	cmp	r0, r5
   14834:	f886 a000 	strb.w	sl, [r6]
   14838:	f240 80a0 	bls.w	1497c <rpc_transport_ipc_tx_init+0x17c>
   1483c:	2708      	movs	r7, #8
   1483e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 149c0 <rpc_transport_ipc_tx_init+0x1c0>
   14842:	4620      	mov	r0, r4
   14844:	4616      	mov	r6, r2
   14846:	460d      	mov	r5, r1
   14848:	2244      	movs	r2, #68	; 0x44
   1484a:	4651      	mov	r1, sl
   1484c:	f8c9 4000 	str.w	r4, [r9]
   14850:	f007 fa85 	bl	1bd5e <memset>
   14854:	f8d9 2000 	ldr.w	r2, [r9]
   14858:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1485c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 149c4 <rpc_transport_ipc_tx_init+0x1c4>
   14860:	f882 a001 	strb.w	sl, [r2, #1]
   14864:	f882 a002 	strb.w	sl, [r2, #2]
   14868:	f882 a003 	strb.w	sl, [r2, #3]
   1486c:	7017      	strb	r7, [r2, #0]
   1486e:	4618      	mov	r0, r3
   14870:	2244      	movs	r2, #68	; 0x44
   14872:	4651      	mov	r1, sl
   14874:	f8c8 3000 	str.w	r3, [r8]
   14878:	f007 fa71 	bl	1bd5e <memset>
   1487c:	f8d8 2000 	ldr.w	r2, [r8]
   14880:	f104 0388 	add.w	r3, r4, #136	; 0x88
   14884:	f8df b140 	ldr.w	fp, [pc, #320]	; 149c8 <rpc_transport_ipc_tx_init+0x1c8>
   14888:	7017      	strb	r7, [r2, #0]
   1488a:	f882 a001 	strb.w	sl, [r2, #1]
   1488e:	f882 a002 	strb.w	sl, [r2, #2]
   14892:	f882 a003 	strb.w	sl, [r2, #3]
   14896:	4618      	mov	r0, r3
   14898:	f44f 7200 	mov.w	r2, #512	; 0x200
   1489c:	4651      	mov	r1, sl
   1489e:	f8cb 3000 	str.w	r3, [fp]
   148a2:	f007 fa5c 	bl	1bd5e <memset>
   148a6:	4b39      	ldr	r3, [pc, #228]	; (1498c <rpc_transport_ipc_tx_init+0x18c>)
   148a8:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   148ac:	f8c3 c000 	str.w	ip, [r3]
   148b0:	4651      	mov	r1, sl
   148b2:	4660      	mov	r0, ip
   148b4:	f44f 7200 	mov.w	r2, #512	; 0x200
   148b8:	f007 fa51 	bl	1bd5e <memset>
   148bc:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   148c0:	2106      	movs	r1, #6
   148c2:	f04f 0e01 	mov.w	lr, #1
   148c6:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   148ca:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   148ce:	4b30      	ldr	r3, [pc, #192]	; (14990 <rpc_transport_ipc_tx_init+0x190>)
   148d0:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   148d4:	605c      	str	r4, [r3, #4]
   148d6:	4c2f      	ldr	r4, [pc, #188]	; (14994 <rpc_transport_ipc_tx_init+0x194>)
   148d8:	f8c3 c008 	str.w	ip, [r3, #8]
   148dc:	8199      	strh	r1, [r3, #12]
   148de:	f8a3 e000 	strh.w	lr, [r3]
   148e2:	4619      	mov	r1, r3
   148e4:	611c      	str	r4, [r3, #16]
   148e6:	4b2c      	ldr	r3, [pc, #176]	; (14998 <rpc_transport_ipc_tx_init+0x198>)
   148e8:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 149cc <rpc_transport_ipc_tx_init+0x1cc>
   148ec:	6120      	str	r0, [r4, #16]
   148ee:	482b      	ldr	r0, [pc, #172]	; (1499c <rpc_transport_ipc_tx_init+0x19c>)
   148f0:	6063      	str	r3, [r4, #4]
   148f2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   148f6:	60a0      	str	r0, [r4, #8]
   148f8:	f8c4 c000 	str.w	ip, [r4]
   148fc:	4828      	ldr	r0, [pc, #160]	; (149a0 <rpc_transport_ipc_tx_init+0x1a0>)
   148fe:	60e3      	str	r3, [r4, #12]
   14900:	6162      	str	r2, [r4, #20]
   14902:	f7fd fe65 	bl	125d0 <nrf_mem_register>
   14906:	2800      	cmp	r0, #0
   14908:	d132      	bne.n	14970 <rpc_transport_ipc_tx_init+0x170>
   1490a:	f04f 0c02 	mov.w	ip, #2
   1490e:	2420      	movs	r4, #32
   14910:	f8d9 1000 	ldr.w	r1, [r9]
   14914:	f8db 2000 	ldr.w	r2, [fp]
   14918:	6029      	str	r1, [r5, #0]
   1491a:	4b1c      	ldr	r3, [pc, #112]	; (1498c <rpc_transport_ipc_tx_init+0x18c>)
   1491c:	f8d8 1000 	ldr.w	r1, [r8]
   14920:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 149d0 <rpc_transport_ipc_tx_init+0x1d0>
   14924:	4d1f      	ldr	r5, [pc, #124]	; (149a4 <rpc_transport_ipc_tx_init+0x1a4>)
   14926:	6031      	str	r1, [r6, #0]
   14928:	f8ce 2000 	str.w	r2, [lr]
   1492c:	681b      	ldr	r3, [r3, #0]
   1492e:	491e      	ldr	r1, [pc, #120]	; (149a8 <rpc_transport_ipc_tx_init+0x1a8>)
   14930:	f502 7200 	add.w	r2, r2, #512	; 0x200
   14934:	602a      	str	r2, [r5, #0]
   14936:	4e1d      	ldr	r6, [pc, #116]	; (149ac <rpc_transport_ipc_tx_init+0x1ac>)
   14938:	4a1d      	ldr	r2, [pc, #116]	; (149b0 <rpc_transport_ipc_tx_init+0x1b0>)
   1493a:	4d1e      	ldr	r5, [pc, #120]	; (149b4 <rpc_transport_ipc_tx_init+0x1b4>)
   1493c:	600b      	str	r3, [r1, #0]
   1493e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   14942:	491d      	ldr	r1, [pc, #116]	; (149b8 <rpc_transport_ipc_tx_init+0x1b8>)
   14944:	6033      	str	r3, [r6, #0]
   14946:	8028      	strh	r0, [r5, #0]
   14948:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   1494c:	6809      	ldr	r1, [r1, #0]
   1494e:	4b1b      	ldr	r3, [pc, #108]	; (149bc <rpc_transport_ipc_tx_init+0x1bc>)
   14950:	9103      	str	r1, [sp, #12]
   14952:	9903      	ldr	r1, [sp, #12]
   14954:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   14958:	6819      	ldr	r1, [r3, #0]
   1495a:	443b      	add	r3, r7
   1495c:	9102      	str	r1, [sp, #8]
   1495e:	9902      	ldr	r1, [sp, #8]
   14960:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   14964:	681b      	ldr	r3, [r3, #0]
   14966:	9301      	str	r3, [sp, #4]
   14968:	9b01      	ldr	r3, [sp, #4]
   1496a:	e001      	b.n	14970 <rpc_transport_ipc_tx_init+0x170>
   1496c:	f24c 0007 	movw	r0, #49159	; 0xc007
   14970:	b005      	add	sp, #20
   14972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14976:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1497a:	4770      	bx	lr
   1497c:	f24c 0004 	movw	r0, #49156	; 0xc004
   14980:	b005      	add	sp, #20
   14982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14986:	bf00      	nop
   14988:	20022077 	.word	0x20022077
   1498c:	20021084 	.word	0x20021084
   14990:	20021070 	.word	0x20021070
   14994:	20021094 	.word	0x20021094
   14998:	00040080 	.word	0x00040080
   1499c:	00040100 	.word	0x00040100
   149a0:	2002105c 	.word	0x2002105c
   149a4:	20021068 	.word	0x20021068
   149a8:	20021064 	.word	0x20021064
   149ac:	20021060 	.word	0x20021060
   149b0:	4002a000 	.word	0x4002a000
   149b4:	20021e80 	.word	0x20021e80
   149b8:	4002a514 	.word	0x4002a514
   149bc:	4002a51c 	.word	0x4002a51c
   149c0:	20021090 	.word	0x20021090
   149c4:	20021088 	.word	0x20021088
   149c8:	2002108c 	.word	0x2002108c
   149cc:	00080040 	.word	0x00080040
   149d0:	2002106c 	.word	0x2002106c

000149d4 <rpc_transport_ipc_tx_send>:
   149d4:	2800      	cmp	r0, #0
   149d6:	d05f      	beq.n	14a98 <rpc_transport_ipc_tx_send+0xc4>
   149d8:	b470      	push	{r4, r5, r6}
   149da:	4b33      	ldr	r3, [pc, #204]	; (14aa8 <rpc_transport_ipc_tx_send+0xd4>)
   149dc:	b083      	sub	sp, #12
   149de:	681a      	ldr	r2, [r3, #0]
   149e0:	4b32      	ldr	r3, [pc, #200]	; (14aac <rpc_transport_ipc_tx_send+0xd8>)
   149e2:	4282      	cmp	r2, r0
   149e4:	d81e      	bhi.n	14a24 <rpc_transport_ipc_tx_send+0x50>
   149e6:	681b      	ldr	r3, [r3, #0]
   149e8:	4931      	ldr	r1, [pc, #196]	; (14ab0 <rpc_transport_ipc_tx_send+0xdc>)
   149ea:	4283      	cmp	r3, r0
   149ec:	6809      	ldr	r1, [r1, #0]
   149ee:	d803      	bhi.n	149f8 <rpc_transport_ipc_tx_send+0x24>
   149f0:	4c30      	ldr	r4, [pc, #192]	; (14ab4 <rpc_transport_ipc_tx_send+0xe0>)
   149f2:	6824      	ldr	r4, [r4, #0]
   149f4:	4284      	cmp	r4, r0
   149f6:	d847      	bhi.n	14a88 <rpc_transport_ipc_tx_send+0xb4>
   149f8:	4281      	cmp	r1, r0
   149fa:	d90e      	bls.n	14a1a <rpc_transport_ipc_tx_send+0x46>
   149fc:	4b2e      	ldr	r3, [pc, #184]	; (14ab8 <rpc_transport_ipc_tx_send+0xe4>)
   149fe:	781b      	ldrb	r3, [r3, #0]
   14a00:	2b00      	cmp	r3, #0
   14a02:	d14c      	bne.n	14a9e <rpc_transport_ipc_tx_send+0xca>
   14a04:	1a83      	subs	r3, r0, r2
   14a06:	492d      	ldr	r1, [pc, #180]	; (14abc <rpc_transport_ipc_tx_send+0xe8>)
   14a08:	099e      	lsrs	r6, r3, #6
   14a0a:	069b      	lsls	r3, r3, #26
   14a0c:	680a      	ldr	r2, [r1, #0]
   14a0e:	4c2c      	ldr	r4, [pc, #176]	; (14ac0 <rpc_transport_ipc_tx_send+0xec>)
   14a10:	f04f 0103 	mov.w	r1, #3
   14a14:	f04f 0502 	mov.w	r5, #2
   14a18:	d014      	beq.n	14a44 <rpc_transport_ipc_tx_send+0x70>
   14a1a:	f24c 0010 	movw	r0, #49168	; 0xc010
   14a1e:	b003      	add	sp, #12
   14a20:	bc70      	pop	{r4, r5, r6}
   14a22:	4770      	bx	lr
   14a24:	681b      	ldr	r3, [r3, #0]
   14a26:	4298      	cmp	r0, r3
   14a28:	d3f7      	bcc.n	14a1a <rpc_transport_ipc_tx_send+0x46>
   14a2a:	4a22      	ldr	r2, [pc, #136]	; (14ab4 <rpc_transport_ipc_tx_send+0xe0>)
   14a2c:	6812      	ldr	r2, [r2, #0]
   14a2e:	4290      	cmp	r0, r2
   14a30:	d2f3      	bcs.n	14a1a <rpc_transport_ipc_tx_send+0x46>
   14a32:	2101      	movs	r1, #1
   14a34:	1ac3      	subs	r3, r0, r3
   14a36:	4a23      	ldr	r2, [pc, #140]	; (14ac4 <rpc_transport_ipc_tx_send+0xf0>)
   14a38:	099e      	lsrs	r6, r3, #6
   14a3a:	069b      	lsls	r3, r3, #26
   14a3c:	460d      	mov	r5, r1
   14a3e:	6812      	ldr	r2, [r2, #0]
   14a40:	4c21      	ldr	r4, [pc, #132]	; (14ac8 <rpc_transport_ipc_tx_send+0xf4>)
   14a42:	d1ea      	bne.n	14a1a <rpc_transport_ipc_tx_send+0x46>
   14a44:	6843      	ldr	r3, [r0, #4]
   14a46:	b2db      	uxtb	r3, r3
   14a48:	429d      	cmp	r5, r3
   14a4a:	d120      	bne.n	14a8e <rpc_transport_ipc_tx_send+0xba>
   14a4c:	2020      	movs	r0, #32
   14a4e:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
   14a52:	4d1e      	ldr	r5, [pc, #120]	; (14acc <rpc_transport_ipc_tx_send+0xf8>)
   14a54:	6853      	ldr	r3, [r2, #4]
   14a56:	882e      	ldrh	r6, [r5, #0]
   14a58:	b29b      	uxth	r3, r3
   14a5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   14a5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   14a62:	f043 0301 	orr.w	r3, r3, #1
   14a66:	6053      	str	r3, [r2, #4]
   14a68:	bf00      	nop
   14a6a:	3801      	subs	r0, #1
   14a6c:	d1fc      	bne.n	14a68 <rpc_transport_ipc_tx_send+0x94>
   14a6e:	2201      	movs	r2, #1
   14a70:	4b17      	ldr	r3, [pc, #92]	; (14ad0 <rpc_transport_ipc_tx_send+0xfc>)
   14a72:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
   14a76:	6822      	ldr	r2, [r4, #0]
   14a78:	882b      	ldrh	r3, [r5, #0]
   14a7a:	9201      	str	r2, [sp, #4]
   14a7c:	9a01      	ldr	r2, [sp, #4]
   14a7e:	3301      	adds	r3, #1
   14a80:	802b      	strh	r3, [r5, #0]
   14a82:	b003      	add	sp, #12
   14a84:	bc70      	pop	{r4, r5, r6}
   14a86:	4770      	bx	lr
   14a88:	4281      	cmp	r1, r0
   14a8a:	d9d2      	bls.n	14a32 <rpc_transport_ipc_tx_send+0x5e>
   14a8c:	e7b6      	b.n	149fc <rpc_transport_ipc_tx_send+0x28>
   14a8e:	f24c 0007 	movw	r0, #49159	; 0xc007
   14a92:	b003      	add	sp, #12
   14a94:	bc70      	pop	{r4, r5, r6}
   14a96:	4770      	bx	lr
   14a98:	f24c 000e 	movw	r0, #49166	; 0xc00e
   14a9c:	4770      	bx	lr
   14a9e:	f24c 000f 	movw	r0, #49167	; 0xc00f
   14aa2:	b003      	add	sp, #12
   14aa4:	bc70      	pop	{r4, r5, r6}
   14aa6:	4770      	bx	lr
   14aa8:	2002106c 	.word	0x2002106c
   14aac:	20021064 	.word	0x20021064
   14ab0:	20021068 	.word	0x20021068
   14ab4:	20021060 	.word	0x20021060
   14ab8:	20022077 	.word	0x20022077
   14abc:	20021090 	.word	0x20021090
   14ac0:	4002a00c 	.word	0x4002a00c
   14ac4:	20021088 	.word	0x20021088
   14ac8:	4002a004 	.word	0x4002a004
   14acc:	20021e80 	.word	0x20021e80
   14ad0:	4002a000 	.word	0x4002a000

00014ad4 <rpc_transport_ipc_tx_rpc_data_alloc>:
   14ad4:	4b18      	ldr	r3, [pc, #96]	; (14b38 <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   14ad6:	781b      	ldrb	r3, [r3, #0]
   14ad8:	bb63      	cbnz	r3, 14b34 <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   14ada:	b4f0      	push	{r4, r5, r6, r7}
   14adc:	4a17      	ldr	r2, [pc, #92]	; (14b3c <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   14ade:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   14ae2:	6814      	ldr	r4, [r2, #0]
   14ae4:	4b16      	ldr	r3, [pc, #88]	; (14b40 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   14ae6:	6825      	ldr	r5, [r4, #0]
   14ae8:	681e      	ldr	r6, [r3, #0]
   14aea:	b1a5      	cbz	r5, 14b16 <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   14aec:	4607      	mov	r7, r0
   14aee:	00c1      	lsls	r1, r0, #3
   14af0:	1863      	adds	r3, r4, r1
   14af2:	685a      	ldr	r2, [r3, #4]
   14af4:	b2d2      	uxtb	r2, r2
   14af6:	2a03      	cmp	r2, #3
   14af8:	d104      	bne.n	14b04 <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   14afa:	609f      	str	r7, [r3, #8]
   14afc:	685a      	ldr	r2, [r3, #4]
   14afe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   14b02:	605a      	str	r2, [r3, #4]
   14b04:	685a      	ldr	r2, [r3, #4]
   14b06:	f012 0fff 	tst.w	r2, #255	; 0xff
   14b0a:	d101      	bne.n	14b10 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   14b0c:	689b      	ldr	r3, [r3, #8]
   14b0e:	b12b      	cbz	r3, 14b1c <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   14b10:	3001      	adds	r0, #1
   14b12:	42a8      	cmp	r0, r5
   14b14:	d1eb      	bne.n	14aee <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   14b16:	2000      	movs	r0, #0
   14b18:	bcf0      	pop	{r4, r5, r6, r7}
   14b1a:	4770      	bx	lr
   14b1c:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   14b20:	4421      	add	r1, r4
   14b22:	6088      	str	r0, [r1, #8]
   14b24:	6843      	ldr	r3, [r0, #4]
   14b26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   14b2a:	f043 0302 	orr.w	r3, r3, #2
   14b2e:	6043      	str	r3, [r0, #4]
   14b30:	bcf0      	pop	{r4, r5, r6, r7}
   14b32:	4770      	bx	lr
   14b34:	2000      	movs	r0, #0
   14b36:	4770      	bx	lr
   14b38:	20022077 	.word	0x20022077
   14b3c:	20021090 	.word	0x20021090
   14b40:	2002108c 	.word	0x2002108c

00014b44 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   14b44:	b4f0      	push	{r4, r5, r6, r7}
   14b46:	4a15      	ldr	r2, [pc, #84]	; (14b9c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   14b48:	4b15      	ldr	r3, [pc, #84]	; (14ba0 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   14b4a:	6814      	ldr	r4, [r2, #0]
   14b4c:	681e      	ldr	r6, [r3, #0]
   14b4e:	6825      	ldr	r5, [r4, #0]
   14b50:	b1ad      	cbz	r5, 14b7e <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   14b52:	2000      	movs	r0, #0
   14b54:	4607      	mov	r7, r0
   14b56:	00c1      	lsls	r1, r0, #3
   14b58:	1863      	adds	r3, r4, r1
   14b5a:	685a      	ldr	r2, [r3, #4]
   14b5c:	b2d2      	uxtb	r2, r2
   14b5e:	2a03      	cmp	r2, #3
   14b60:	d104      	bne.n	14b6c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   14b62:	609f      	str	r7, [r3, #8]
   14b64:	685a      	ldr	r2, [r3, #4]
   14b66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   14b6a:	605a      	str	r2, [r3, #4]
   14b6c:	685a      	ldr	r2, [r3, #4]
   14b6e:	f012 0fff 	tst.w	r2, #255	; 0xff
   14b72:	d101      	bne.n	14b78 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   14b74:	689b      	ldr	r3, [r3, #8]
   14b76:	b12b      	cbz	r3, 14b84 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   14b78:	3001      	adds	r0, #1
   14b7a:	4285      	cmp	r5, r0
   14b7c:	d1eb      	bne.n	14b56 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   14b7e:	2000      	movs	r0, #0
   14b80:	bcf0      	pop	{r4, r5, r6, r7}
   14b82:	4770      	bx	lr
   14b84:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   14b88:	4421      	add	r1, r4
   14b8a:	6088      	str	r0, [r1, #8]
   14b8c:	6843      	ldr	r3, [r0, #4]
   14b8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   14b92:	f043 0301 	orr.w	r3, r3, #1
   14b96:	6043      	str	r3, [r0, #4]
   14b98:	bcf0      	pop	{r4, r5, r6, r7}
   14b9a:	4770      	bx	lr
   14b9c:	20021088 	.word	0x20021088
   14ba0:	20021084 	.word	0x20021084

00014ba4 <rpc_transport_ipc_tx_data_alloc>:
   14ba4:	4b03      	ldr	r3, [pc, #12]	; (14bb4 <rpc_transport_ipc_tx_data_alloc+0x10>)
   14ba6:	781b      	ldrb	r3, [r3, #0]
   14ba8:	b90b      	cbnz	r3, 14bae <rpc_transport_ipc_tx_data_alloc+0xa>
   14baa:	f7fd be41 	b.w	12830 <nrf_shared_malloc>
   14bae:	2000      	movs	r0, #0
   14bb0:	4770      	bx	lr
   14bb2:	bf00      	nop
   14bb4:	20022077 	.word	0x20022077

00014bb8 <ok_rsp_parser>:
   14bb8:	2000      	movs	r0, #0
   14bba:	4770      	bx	lr

00014bbc <pdn_state_get_parser>:
   14bbc:	2200      	movs	r2, #0
   14bbe:	b570      	push	{r4, r5, r6, lr}
   14bc0:	780b      	ldrb	r3, [r1, #0]
   14bc2:	b084      	sub	sp, #16
   14bc4:	460e      	mov	r6, r1
   14bc6:	e9cd 2200 	strd	r2, r2, [sp]
   14bca:	e9cd 2202 	strd	r2, r2, [sp, #8]
   14bce:	b323      	cbz	r3, 14c1a <pdn_state_get_parser+0x5e>
   14bd0:	460c      	mov	r4, r1
   14bd2:	2b20      	cmp	r3, #32
   14bd4:	460d      	mov	r5, r1
   14bd6:	d01b      	beq.n	14c10 <pdn_state_get_parser+0x54>
   14bd8:	700b      	strb	r3, [r1, #0]
   14bda:	3201      	adds	r2, #1
   14bdc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   14be0:	18b1      	adds	r1, r6, r2
   14be2:	460d      	mov	r5, r1
   14be4:	2b00      	cmp	r3, #0
   14be6:	d1f4      	bne.n	14bd2 <pdn_state_get_parser+0x16>
   14be8:	2200      	movs	r2, #0
   14bea:	4b0d      	ldr	r3, [pc, #52]	; (14c20 <pdn_state_get_parser+0x64>)
   14bec:	702a      	strb	r2, [r5, #0]
   14bee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   14bf2:	4a0c      	ldr	r2, [pc, #48]	; (14c24 <pdn_state_get_parser+0x68>)
   14bf4:	681b      	ldr	r3, [r3, #0]
   14bf6:	2110      	movs	r1, #16
   14bf8:	4668      	mov	r0, sp
   14bfa:	f7fa f9d5 	bl	efa8 <snprintf>
   14bfe:	4669      	mov	r1, sp
   14c00:	4630      	mov	r0, r6
   14c02:	f007 f808 	bl	1bc16 <strstr>
   14c06:	3000      	adds	r0, #0
   14c08:	bf18      	it	ne
   14c0a:	2001      	movne	r0, #1
   14c0c:	b004      	add	sp, #16
   14c0e:	bd70      	pop	{r4, r5, r6, pc}
   14c10:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   14c14:	2b00      	cmp	r3, #0
   14c16:	d1dc      	bne.n	14bd2 <pdn_state_get_parser+0x16>
   14c18:	e7e6      	b.n	14be8 <pdn_state_get_parser+0x2c>
   14c1a:	460d      	mov	r5, r1
   14c1c:	e7e4      	b.n	14be8 <pdn_state_get_parser+0x2c>
   14c1e:	bf00      	nop
   14c20:	200211b0 	.word	0x200211b0
   14c24:	0001e5ec 	.word	0x0001e5ec

00014c28 <pdn_id_get_parser>:
   14c28:	b570      	push	{r4, r5, r6, lr}
   14c2a:	780b      	ldrb	r3, [r1, #0]
   14c2c:	4606      	mov	r6, r0
   14c2e:	b313      	cbz	r3, 14c76 <pdn_id_get_parser+0x4e>
   14c30:	4608      	mov	r0, r1
   14c32:	2400      	movs	r4, #0
   14c34:	460a      	mov	r2, r1
   14c36:	2b20      	cmp	r3, #32
   14c38:	4615      	mov	r5, r2
   14c3a:	d017      	beq.n	14c6c <pdn_id_get_parser+0x44>
   14c3c:	7013      	strb	r3, [r2, #0]
   14c3e:	3401      	adds	r4, #1
   14c40:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   14c44:	190a      	adds	r2, r1, r4
   14c46:	4615      	mov	r5, r2
   14c48:	2b00      	cmp	r3, #0
   14c4a:	d1f4      	bne.n	14c36 <pdn_id_get_parser+0xe>
   14c4c:	2300      	movs	r3, #0
   14c4e:	4608      	mov	r0, r1
   14c50:	702b      	strb	r3, [r5, #0]
   14c52:	213a      	movs	r1, #58	; 0x3a
   14c54:	f007 f819 	bl	1bc8a <strchr>
   14c58:	b130      	cbz	r0, 14c68 <pdn_id_get_parser+0x40>
   14c5a:	3001      	adds	r0, #1
   14c5c:	f006 fec6 	bl	1b9ec <atoi>
   14c60:	4b06      	ldr	r3, [pc, #24]	; (14c7c <pdn_id_get_parser+0x54>)
   14c62:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   14c66:	6058      	str	r0, [r3, #4]
   14c68:	2000      	movs	r0, #0
   14c6a:	bd70      	pop	{r4, r5, r6, pc}
   14c6c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   14c70:	2b00      	cmp	r3, #0
   14c72:	d1e0      	bne.n	14c36 <pdn_id_get_parser+0xe>
   14c74:	e7ea      	b.n	14c4c <pdn_id_get_parser+0x24>
   14c76:	460d      	mov	r5, r1
   14c78:	e7e8      	b.n	14c4c <pdn_id_get_parser+0x24>
   14c7a:	bf00      	nop
   14c7c:	200211b0 	.word	0x200211b0

00014c80 <context_create_parser>:
   14c80:	b570      	push	{r4, r5, r6, lr}
   14c82:	780b      	ldrb	r3, [r1, #0]
   14c84:	4606      	mov	r6, r0
   14c86:	b313      	cbz	r3, 14cce <context_create_parser+0x4e>
   14c88:	4608      	mov	r0, r1
   14c8a:	2400      	movs	r4, #0
   14c8c:	460a      	mov	r2, r1
   14c8e:	2b20      	cmp	r3, #32
   14c90:	4615      	mov	r5, r2
   14c92:	d017      	beq.n	14cc4 <context_create_parser+0x44>
   14c94:	7013      	strb	r3, [r2, #0]
   14c96:	3401      	adds	r4, #1
   14c98:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   14c9c:	190a      	adds	r2, r1, r4
   14c9e:	4615      	mov	r5, r2
   14ca0:	2b00      	cmp	r3, #0
   14ca2:	d1f4      	bne.n	14c8e <context_create_parser+0xe>
   14ca4:	2300      	movs	r3, #0
   14ca6:	4608      	mov	r0, r1
   14ca8:	702b      	strb	r3, [r5, #0]
   14caa:	213a      	movs	r1, #58	; 0x3a
   14cac:	f006 ffed 	bl	1bc8a <strchr>
   14cb0:	b130      	cbz	r0, 14cc0 <context_create_parser+0x40>
   14cb2:	4b08      	ldr	r3, [pc, #32]	; (14cd4 <context_create_parser+0x54>)
   14cb4:	3001      	adds	r0, #1
   14cb6:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   14cba:	f006 fe97 	bl	1b9ec <atoi>
   14cbe:	6020      	str	r0, [r4, #0]
   14cc0:	2000      	movs	r0, #0
   14cc2:	bd70      	pop	{r4, r5, r6, pc}
   14cc4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   14cc8:	2b00      	cmp	r3, #0
   14cca:	d1e0      	bne.n	14c8e <context_create_parser+0xe>
   14ccc:	e7ea      	b.n	14ca4 <context_create_parser+0x24>
   14cce:	460d      	mov	r5, r1
   14cd0:	e7e8      	b.n	14ca4 <context_create_parser+0x24>
   14cd2:	bf00      	nop
   14cd4:	200211b0 	.word	0x200211b0

00014cd8 <pdn_interface_init>:
   14cd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14cdc:	b510      	push	{r4, lr}
   14cde:	4c09      	ldr	r4, [pc, #36]	; (14d04 <pdn_interface_init+0x2c>)
   14ce0:	2228      	movs	r2, #40	; 0x28
   14ce2:	2100      	movs	r1, #0
   14ce4:	4808      	ldr	r0, [pc, #32]	; (14d08 <pdn_interface_init+0x30>)
   14ce6:	6023      	str	r3, [r4, #0]
   14ce8:	f007 f839 	bl	1bd5e <memset>
   14cec:	f240 2201 	movw	r2, #513	; 0x201
   14cf0:	2100      	movs	r1, #0
   14cf2:	2066      	movs	r0, #102	; 0x66
   14cf4:	f7fd f840 	bl	11d78 <at_interface_open>
   14cf8:	2800      	cmp	r0, #0
   14cfa:	6020      	str	r0, [r4, #0]
   14cfc:	bfb4      	ite	lt
   14cfe:	2003      	movlt	r0, #3
   14d00:	2000      	movge	r0, #0
   14d02:	bd10      	pop	{r4, pc}
   14d04:	200210ac 	.word	0x200210ac
   14d08:	200211b0 	.word	0x200211b0

00014d0c <pdn_interface_open>:
   14d0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14d10:	2866      	cmp	r0, #102	; 0x66
   14d12:	b083      	sub	sp, #12
   14d14:	f040 80bc 	bne.w	14e90 <pdn_interface_open+0x184>
   14d18:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   14d1c:	f040 80aa 	bne.w	14e74 <pdn_interface_open+0x168>
   14d20:	f240 2302 	movw	r3, #514	; 0x202
   14d24:	429a      	cmp	r2, r3
   14d26:	f040 80a5 	bne.w	14e74 <pdn_interface_open+0x168>
   14d2a:	4c62      	ldr	r4, [pc, #392]	; (14eb4 <pdn_interface_open+0x1a8>)
   14d2c:	6825      	ldr	r5, [r4, #0]
   14d2e:	b34d      	cbz	r5, 14d84 <pdn_interface_open+0x78>
   14d30:	6863      	ldr	r3, [r4, #4]
   14d32:	2b00      	cmp	r3, #0
   14d34:	f000 8098 	beq.w	14e68 <pdn_interface_open+0x15c>
   14d38:	68a3      	ldr	r3, [r4, #8]
   14d3a:	2b00      	cmp	r3, #0
   14d3c:	f000 8096 	beq.w	14e6c <pdn_interface_open+0x160>
   14d40:	68e3      	ldr	r3, [r4, #12]
   14d42:	2b00      	cmp	r3, #0
   14d44:	f000 8094 	beq.w	14e70 <pdn_interface_open+0x164>
   14d48:	6923      	ldr	r3, [r4, #16]
   14d4a:	2b00      	cmp	r3, #0
   14d4c:	f000 8098 	beq.w	14e80 <pdn_interface_open+0x174>
   14d50:	6963      	ldr	r3, [r4, #20]
   14d52:	2b00      	cmp	r3, #0
   14d54:	f000 8098 	beq.w	14e88 <pdn_interface_open+0x17c>
   14d58:	69a3      	ldr	r3, [r4, #24]
   14d5a:	2b00      	cmp	r3, #0
   14d5c:	f000 8096 	beq.w	14e8c <pdn_interface_open+0x180>
   14d60:	69e3      	ldr	r3, [r4, #28]
   14d62:	2b00      	cmp	r3, #0
   14d64:	f000 808e 	beq.w	14e84 <pdn_interface_open+0x178>
   14d68:	6a23      	ldr	r3, [r4, #32]
   14d6a:	b153      	cbz	r3, 14d82 <pdn_interface_open+0x76>
   14d6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14d6e:	2509      	movs	r5, #9
   14d70:	b143      	cbz	r3, 14d84 <pdn_interface_open+0x78>
   14d72:	200c      	movs	r0, #12
   14d74:	f7fa fe82 	bl	fa7c <bsd_os_errno_set>
   14d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14d7c:	b003      	add	sp, #12
   14d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14d82:	2508      	movs	r5, #8
   14d84:	2074      	movs	r0, #116	; 0x74
   14d86:	f7fd fd3d 	bl	12804 <nrf_malloc>
   14d8a:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   14d8e:	2800      	cmp	r0, #0
   14d90:	d0ef      	beq.n	14d72 <pdn_interface_open+0x66>
   14d92:	2274      	movs	r2, #116	; 0x74
   14d94:	2100      	movs	r1, #0
   14d96:	f006 ffe2 	bl	1bd5e <memset>
   14d9a:	2101      	movs	r1, #1
   14d9c:	2003      	movs	r0, #3
   14d9e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   14da2:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   14da6:	4a44      	ldr	r2, [pc, #272]	; (14eb8 <pdn_interface_open+0x1ac>)
   14da8:	6099      	str	r1, [r3, #8]
   14daa:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   14dae:	f44f 7180 	mov.w	r1, #256	; 0x100
   14db2:	6718      	str	r0, [r3, #112]	; 0x70
   14db4:	605f      	str	r7, [r3, #4]
   14db6:	4841      	ldr	r0, [pc, #260]	; (14ebc <pdn_interface_open+0x1b0>)
   14db8:	f8df 810c 	ldr.w	r8, [pc, #268]	; 14ec8 <pdn_interface_open+0x1bc>
   14dbc:	f7fa f8f4 	bl	efa8 <snprintf>
   14dc0:	483e      	ldr	r0, [pc, #248]	; (14ebc <pdn_interface_open+0x1b0>)
   14dc2:	f8d8 9000 	ldr.w	r9, [r8]
   14dc6:	2600      	movs	r6, #0
   14dc8:	f006 ff6d 	bl	1bca6 <strlen>
   14dcc:	4633      	mov	r3, r6
   14dce:	4602      	mov	r2, r0
   14dd0:	493a      	ldr	r1, [pc, #232]	; (14ebc <pdn_interface_open+0x1b0>)
   14dd2:	4648      	mov	r0, r9
   14dd4:	9601      	str	r6, [sp, #4]
   14dd6:	9600      	str	r6, [sp, #0]
   14dd8:	f7fc ff78 	bl	11ccc <at_interface_write>
   14ddc:	4681      	mov	r9, r0
   14dde:	4837      	ldr	r0, [pc, #220]	; (14ebc <pdn_interface_open+0x1b0>)
   14de0:	f006 ff61 	bl	1bca6 <strlen>
   14de4:	4548      	cmp	r0, r9
   14de6:	d159      	bne.n	14e9c <pdn_interface_open+0x190>
   14de8:	4633      	mov	r3, r6
   14dea:	e9cd 6600 	strd	r6, r6, [sp]
   14dee:	f44f 7280 	mov.w	r2, #256	; 0x100
   14df2:	4932      	ldr	r1, [pc, #200]	; (14ebc <pdn_interface_open+0x1b0>)
   14df4:	f8d8 0000 	ldr.w	r0, [r8]
   14df8:	f7fd f850 	bl	11e9c <at_interface_read>
   14dfc:	4606      	mov	r6, r0
   14dfe:	4830      	ldr	r0, [pc, #192]	; (14ec0 <pdn_interface_open+0x1b4>)
   14e00:	f006 ff51 	bl	1bca6 <strlen>
   14e04:	4286      	cmp	r6, r0
   14e06:	db15      	blt.n	14e34 <pdn_interface_open+0x128>
   14e08:	4602      	mov	r2, r0
   14e0a:	492c      	ldr	r1, [pc, #176]	; (14ebc <pdn_interface_open+0x1b0>)
   14e0c:	482c      	ldr	r0, [pc, #176]	; (14ec0 <pdn_interface_open+0x1b4>)
   14e0e:	f006 ff5d 	bl	1bccc <strncmp>
   14e12:	b978      	cbnz	r0, 14e34 <pdn_interface_open+0x128>
   14e14:	4929      	ldr	r1, [pc, #164]	; (14ebc <pdn_interface_open+0x1b0>)
   14e16:	4628      	mov	r0, r5
   14e18:	f7ff ff32 	bl	14c80 <context_create_parser>
   14e1c:	b9b0      	cbnz	r0, 14e4c <pdn_interface_open+0x140>
   14e1e:	2202      	movs	r2, #2
   14e20:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   14e24:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   14e28:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   14e2c:	609a      	str	r2, [r3, #8]
   14e2e:	b003      	add	sp, #12
   14e30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14e34:	4823      	ldr	r0, [pc, #140]	; (14ec4 <pdn_interface_open+0x1b8>)
   14e36:	f006 ff36 	bl	1bca6 <strlen>
   14e3a:	4920      	ldr	r1, [pc, #128]	; (14ebc <pdn_interface_open+0x1b0>)
   14e3c:	4602      	mov	r2, r0
   14e3e:	4821      	ldr	r0, [pc, #132]	; (14ec4 <pdn_interface_open+0x1b8>)
   14e40:	f006 ff44 	bl	1bccc <strncmp>
   14e44:	b960      	cbnz	r0, 14e60 <pdn_interface_open+0x154>
   14e46:	2008      	movs	r0, #8
   14e48:	f7fa fe18 	bl	fa7c <bsd_os_errno_set>
   14e4c:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   14e50:	f7fd fce2 	bl	12818 <nrf_free>
   14e54:	2300      	movs	r3, #0
   14e56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14e5a:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   14e5e:	e78d      	b.n	14d7c <pdn_interface_open+0x70>
   14e60:	2005      	movs	r0, #5
   14e62:	f7fa fe0b 	bl	fa7c <bsd_os_errno_set>
   14e66:	e7f1      	b.n	14e4c <pdn_interface_open+0x140>
   14e68:	2501      	movs	r5, #1
   14e6a:	e78b      	b.n	14d84 <pdn_interface_open+0x78>
   14e6c:	2502      	movs	r5, #2
   14e6e:	e789      	b.n	14d84 <pdn_interface_open+0x78>
   14e70:	2503      	movs	r5, #3
   14e72:	e787      	b.n	14d84 <pdn_interface_open+0x78>
   14e74:	2016      	movs	r0, #22
   14e76:	f7fa fe01 	bl	fa7c <bsd_os_errno_set>
   14e7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14e7e:	e77d      	b.n	14d7c <pdn_interface_open+0x70>
   14e80:	2504      	movs	r5, #4
   14e82:	e77f      	b.n	14d84 <pdn_interface_open+0x78>
   14e84:	2507      	movs	r5, #7
   14e86:	e77d      	b.n	14d84 <pdn_interface_open+0x78>
   14e88:	2505      	movs	r5, #5
   14e8a:	e77b      	b.n	14d84 <pdn_interface_open+0x78>
   14e8c:	2506      	movs	r5, #6
   14e8e:	e779      	b.n	14d84 <pdn_interface_open+0x78>
   14e90:	202f      	movs	r0, #47	; 0x2f
   14e92:	f7fa fdf3 	bl	fa7c <bsd_os_errno_set>
   14e96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14e9a:	e76f      	b.n	14d7c <pdn_interface_open+0x70>
   14e9c:	2005      	movs	r0, #5
   14e9e:	f7fa fded 	bl	fa7c <bsd_os_errno_set>
   14ea2:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   14ea6:	f7fd fcb7 	bl	12818 <nrf_free>
   14eaa:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   14eae:	4638      	mov	r0, r7
   14eb0:	e764      	b.n	14d7c <pdn_interface_open+0x70>
   14eb2:	bf00      	nop
   14eb4:	200211b0 	.word	0x200211b0
   14eb8:	0001e5c8 	.word	0x0001e5c8
   14ebc:	200210b0 	.word	0x200210b0
   14ec0:	0001e5d8 	.word	0x0001e5d8
   14ec4:	0001e5e4 	.word	0x0001e5e4
   14ec8:	200210ac 	.word	0x200210ac

00014ecc <pdn_interface_connect>:
   14ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ed0:	b083      	sub	sp, #12
   14ed2:	2900      	cmp	r1, #0
   14ed4:	f000 813e 	beq.w	15154 <pdn_interface_connect+0x288>
   14ed8:	2a64      	cmp	r2, #100	; 0x64
   14eda:	4691      	mov	r9, r2
   14edc:	f200 813a 	bhi.w	15154 <pdn_interface_connect+0x288>
   14ee0:	4605      	mov	r5, r0
   14ee2:	4608      	mov	r0, r1
   14ee4:	4688      	mov	r8, r1
   14ee6:	f006 fede 	bl	1bca6 <strlen>
   14eea:	2864      	cmp	r0, #100	; 0x64
   14eec:	f200 8132 	bhi.w	15154 <pdn_interface_connect+0x288>
   14ef0:	4ba5      	ldr	r3, [pc, #660]	; (15188 <pdn_interface_connect+0x2bc>)
   14ef2:	43ab      	bics	r3, r5
   14ef4:	f040 8125 	bne.w	15142 <pdn_interface_connect+0x276>
   14ef8:	f025 45f1 	bic.w	r5, r5, #2021654528	; 0x78800000
   14efc:	f425 15d0 	bic.w	r5, r5, #1703936	; 0x1a0000
   14f00:	2d09      	cmp	r5, #9
   14f02:	f300 811e 	bgt.w	15142 <pdn_interface_connect+0x276>
   14f06:	4fa1      	ldr	r7, [pc, #644]	; (1518c <pdn_interface_connect+0x2c0>)
   14f08:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   14f0c:	2b00      	cmp	r3, #0
   14f0e:	f000 8118 	beq.w	15142 <pdn_interface_connect+0x276>
   14f12:	689a      	ldr	r2, [r3, #8]
   14f14:	2a00      	cmp	r2, #0
   14f16:	f000 8114 	beq.w	15142 <pdn_interface_connect+0x276>
   14f1a:	2d00      	cmp	r5, #0
   14f1c:	f2c0 8111 	blt.w	15142 <pdn_interface_connect+0x276>
   14f20:	689b      	ldr	r3, [r3, #8]
   14f22:	2b02      	cmp	r3, #2
   14f24:	f040 810d 	bne.w	15142 <pdn_interface_connect+0x276>
   14f28:	4e99      	ldr	r6, [pc, #612]	; (15190 <pdn_interface_connect+0x2c4>)
   14f2a:	4a9a      	ldr	r2, [pc, #616]	; (15194 <pdn_interface_connect+0x2c8>)
   14f2c:	f44f 7180 	mov.w	r1, #256	; 0x100
   14f30:	4630      	mov	r0, r6
   14f32:	f7fa f839 	bl	efa8 <snprintf>
   14f36:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   14f3a:	4604      	mov	r4, r0
   14f3c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   14f40:	681b      	ldr	r3, [r3, #0]
   14f42:	4a95      	ldr	r2, [pc, #596]	; (15198 <pdn_interface_connect+0x2cc>)
   14f44:	1830      	adds	r0, r6, r0
   14f46:	f7fa f82f 	bl	efa8 <snprintf>
   14f4a:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   14f4e:	4404      	add	r4, r0
   14f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   14f52:	f003 0203 	and.w	r2, r3, #3
   14f56:	2a03      	cmp	r2, #3
   14f58:	f000 80ea 	beq.w	15130 <pdn_interface_connect+0x264>
   14f5c:	079b      	lsls	r3, r3, #30
   14f5e:	eb06 0004 	add.w	r0, r6, r4
   14f62:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   14f66:	bf4c      	ite	mi
   14f68:	4b8c      	ldrmi	r3, [pc, #560]	; (1519c <pdn_interface_connect+0x2d0>)
   14f6a:	4b8d      	ldrpl	r3, [pc, #564]	; (151a0 <pdn_interface_connect+0x2d4>)
   14f6c:	4a8d      	ldr	r2, [pc, #564]	; (151a4 <pdn_interface_connect+0x2d8>)
   14f6e:	f7fa f81b 	bl	efa8 <snprintf>
   14f72:	4404      	add	r4, r0
   14f74:	4643      	mov	r3, r8
   14f76:	4a8c      	ldr	r2, [pc, #560]	; (151a8 <pdn_interface_connect+0x2dc>)
   14f78:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   14f7c:	1930      	adds	r0, r6, r4
   14f7e:	f7fa f813 	bl	efa8 <snprintf>
   14f82:	4420      	add	r0, r4
   14f84:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   14f88:	f300 80f7 	bgt.w	1517a <pdn_interface_connect+0x2ae>
   14f8c:	f8df a238 	ldr.w	sl, [pc, #568]	; 151c8 <pdn_interface_connect+0x2fc>
   14f90:	487f      	ldr	r0, [pc, #508]	; (15190 <pdn_interface_connect+0x2c4>)
   14f92:	f8da b000 	ldr.w	fp, [sl]
   14f96:	2400      	movs	r4, #0
   14f98:	f006 fe85 	bl	1bca6 <strlen>
   14f9c:	4623      	mov	r3, r4
   14f9e:	4602      	mov	r2, r0
   14fa0:	497b      	ldr	r1, [pc, #492]	; (15190 <pdn_interface_connect+0x2c4>)
   14fa2:	4658      	mov	r0, fp
   14fa4:	9401      	str	r4, [sp, #4]
   14fa6:	9400      	str	r4, [sp, #0]
   14fa8:	f7fc fe90 	bl	11ccc <at_interface_write>
   14fac:	4683      	mov	fp, r0
   14fae:	4878      	ldr	r0, [pc, #480]	; (15190 <pdn_interface_connect+0x2c4>)
   14fb0:	f006 fe79 	bl	1bca6 <strlen>
   14fb4:	4558      	cmp	r0, fp
   14fb6:	d008      	beq.n	14fca <pdn_interface_connect+0xfe>
   14fb8:	2005      	movs	r0, #5
   14fba:	f7fa fd5f 	bl	fa7c <bsd_os_errno_set>
   14fbe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   14fc2:	4620      	mov	r0, r4
   14fc4:	b003      	add	sp, #12
   14fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fca:	4623      	mov	r3, r4
   14fcc:	e9cd 4400 	strd	r4, r4, [sp]
   14fd0:	f44f 7280 	mov.w	r2, #256	; 0x100
   14fd4:	496e      	ldr	r1, [pc, #440]	; (15190 <pdn_interface_connect+0x2c4>)
   14fd6:	f8da 0000 	ldr.w	r0, [sl]
   14fda:	f7fc ff5f 	bl	11e9c <at_interface_read>
   14fde:	4604      	mov	r4, r0
   14fe0:	4872      	ldr	r0, [pc, #456]	; (151ac <pdn_interface_connect+0x2e0>)
   14fe2:	f006 fe60 	bl	1bca6 <strlen>
   14fe6:	4284      	cmp	r4, r0
   14fe8:	f2c0 8091 	blt.w	1510e <pdn_interface_connect+0x242>
   14fec:	4602      	mov	r2, r0
   14fee:	4968      	ldr	r1, [pc, #416]	; (15190 <pdn_interface_connect+0x2c4>)
   14ff0:	486e      	ldr	r0, [pc, #440]	; (151ac <pdn_interface_connect+0x2e0>)
   14ff2:	f006 fe6b 	bl	1bccc <strncmp>
   14ff6:	2800      	cmp	r0, #0
   14ff8:	f040 8089 	bne.w	1510e <pdn_interface_connect+0x242>
   14ffc:	4964      	ldr	r1, [pc, #400]	; (15190 <pdn_interface_connect+0x2c4>)
   14ffe:	4628      	mov	r0, r5
   15000:	f7ff fdda 	bl	14bb8 <ok_rsp_parser>
   15004:	4604      	mov	r4, r0
   15006:	2800      	cmp	r0, #0
   15008:	d1db      	bne.n	14fc2 <pdn_interface_connect+0xf6>
   1500a:	4a69      	ldr	r2, [pc, #420]	; (151b0 <pdn_interface_connect+0x2e4>)
   1500c:	f44f 7180 	mov.w	r1, #256	; 0x100
   15010:	485f      	ldr	r0, [pc, #380]	; (15190 <pdn_interface_connect+0x2c4>)
   15012:	f7f9 ffc9 	bl	efa8 <snprintf>
   15016:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1501a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1501e:	681b      	ldr	r3, [r3, #0]
   15020:	4a64      	ldr	r2, [pc, #400]	; (151b4 <pdn_interface_connect+0x2e8>)
   15022:	4430      	add	r0, r6
   15024:	f7f9 ffc0 	bl	efa8 <snprintf>
   15028:	4859      	ldr	r0, [pc, #356]	; (15190 <pdn_interface_connect+0x2c4>)
   1502a:	f8da b000 	ldr.w	fp, [sl]
   1502e:	f006 fe3a 	bl	1bca6 <strlen>
   15032:	4623      	mov	r3, r4
   15034:	4602      	mov	r2, r0
   15036:	4956      	ldr	r1, [pc, #344]	; (15190 <pdn_interface_connect+0x2c4>)
   15038:	4658      	mov	r0, fp
   1503a:	9401      	str	r4, [sp, #4]
   1503c:	9400      	str	r4, [sp, #0]
   1503e:	f7fc fe45 	bl	11ccc <at_interface_write>
   15042:	4683      	mov	fp, r0
   15044:	4852      	ldr	r0, [pc, #328]	; (15190 <pdn_interface_connect+0x2c4>)
   15046:	f006 fe2e 	bl	1bca6 <strlen>
   1504a:	4558      	cmp	r0, fp
   1504c:	d1b4      	bne.n	14fb8 <pdn_interface_connect+0xec>
   1504e:	4623      	mov	r3, r4
   15050:	f44f 7280 	mov.w	r2, #256	; 0x100
   15054:	494e      	ldr	r1, [pc, #312]	; (15190 <pdn_interface_connect+0x2c4>)
   15056:	f8da 0000 	ldr.w	r0, [sl]
   1505a:	e9cd 4400 	strd	r4, r4, [sp]
   1505e:	f7fc ff1d 	bl	11e9c <at_interface_read>
   15062:	4683      	mov	fp, r0
   15064:	4851      	ldr	r0, [pc, #324]	; (151ac <pdn_interface_connect+0x2e0>)
   15066:	f006 fe1e 	bl	1bca6 <strlen>
   1506a:	4583      	cmp	fp, r0
   1506c:	db4f      	blt.n	1510e <pdn_interface_connect+0x242>
   1506e:	4602      	mov	r2, r0
   15070:	4947      	ldr	r1, [pc, #284]	; (15190 <pdn_interface_connect+0x2c4>)
   15072:	484e      	ldr	r0, [pc, #312]	; (151ac <pdn_interface_connect+0x2e0>)
   15074:	f006 fe2a 	bl	1bccc <strncmp>
   15078:	2800      	cmp	r0, #0
   1507a:	d148      	bne.n	1510e <pdn_interface_connect+0x242>
   1507c:	2103      	movs	r1, #3
   1507e:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   15082:	464a      	mov	r2, r9
   15084:	6099      	str	r1, [r3, #8]
   15086:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   1508a:	4641      	mov	r1, r8
   1508c:	300c      	adds	r0, #12
   1508e:	f006 fe3c 	bl	1bd0a <memcpy>
   15092:	4a49      	ldr	r2, [pc, #292]	; (151b8 <pdn_interface_connect+0x2ec>)
   15094:	f44f 7180 	mov.w	r1, #256	; 0x100
   15098:	483d      	ldr	r0, [pc, #244]	; (15190 <pdn_interface_connect+0x2c4>)
   1509a:	f7f9 ff85 	bl	efa8 <snprintf>
   1509e:	4601      	mov	r1, r0
   150a0:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   150a4:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   150a8:	681b      	ldr	r3, [r3, #0]
   150aa:	4a42      	ldr	r2, [pc, #264]	; (151b4 <pdn_interface_connect+0x2e8>)
   150ac:	1830      	adds	r0, r6, r0
   150ae:	f7f9 ff7b 	bl	efa8 <snprintf>
   150b2:	4837      	ldr	r0, [pc, #220]	; (15190 <pdn_interface_connect+0x2c4>)
   150b4:	f8da 6000 	ldr.w	r6, [sl]
   150b8:	f006 fdf5 	bl	1bca6 <strlen>
   150bc:	4623      	mov	r3, r4
   150be:	4602      	mov	r2, r0
   150c0:	4933      	ldr	r1, [pc, #204]	; (15190 <pdn_interface_connect+0x2c4>)
   150c2:	4630      	mov	r0, r6
   150c4:	9401      	str	r4, [sp, #4]
   150c6:	9400      	str	r4, [sp, #0]
   150c8:	f7fc fe00 	bl	11ccc <at_interface_write>
   150cc:	4606      	mov	r6, r0
   150ce:	4830      	ldr	r0, [pc, #192]	; (15190 <pdn_interface_connect+0x2c4>)
   150d0:	f006 fde9 	bl	1bca6 <strlen>
   150d4:	42b0      	cmp	r0, r6
   150d6:	d153      	bne.n	15180 <pdn_interface_connect+0x2b4>
   150d8:	4623      	mov	r3, r4
   150da:	f44f 7280 	mov.w	r2, #256	; 0x100
   150de:	492c      	ldr	r1, [pc, #176]	; (15190 <pdn_interface_connect+0x2c4>)
   150e0:	f8da 0000 	ldr.w	r0, [sl]
   150e4:	e9cd 4400 	strd	r4, r4, [sp]
   150e8:	f7fc fed8 	bl	11e9c <at_interface_read>
   150ec:	4606      	mov	r6, r0
   150ee:	4833      	ldr	r0, [pc, #204]	; (151bc <pdn_interface_connect+0x2f0>)
   150f0:	f006 fdd9 	bl	1bca6 <strlen>
   150f4:	4286      	cmp	r6, r0
   150f6:	db33      	blt.n	15160 <pdn_interface_connect+0x294>
   150f8:	4602      	mov	r2, r0
   150fa:	4925      	ldr	r1, [pc, #148]	; (15190 <pdn_interface_connect+0x2c4>)
   150fc:	482f      	ldr	r0, [pc, #188]	; (151bc <pdn_interface_connect+0x2f0>)
   150fe:	f006 fde5 	bl	1bccc <strncmp>
   15102:	bb68      	cbnz	r0, 15160 <pdn_interface_connect+0x294>
   15104:	4628      	mov	r0, r5
   15106:	4922      	ldr	r1, [pc, #136]	; (15190 <pdn_interface_connect+0x2c4>)
   15108:	f7ff fd8e 	bl	14c28 <pdn_id_get_parser>
   1510c:	e759      	b.n	14fc2 <pdn_interface_connect+0xf6>
   1510e:	482c      	ldr	r0, [pc, #176]	; (151c0 <pdn_interface_connect+0x2f4>)
   15110:	f006 fdc9 	bl	1bca6 <strlen>
   15114:	491e      	ldr	r1, [pc, #120]	; (15190 <pdn_interface_connect+0x2c4>)
   15116:	4602      	mov	r2, r0
   15118:	4829      	ldr	r0, [pc, #164]	; (151c0 <pdn_interface_connect+0x2f4>)
   1511a:	f006 fdd7 	bl	1bccc <strncmp>
   1511e:	2800      	cmp	r0, #0
   15120:	f47f af4a 	bne.w	14fb8 <pdn_interface_connect+0xec>
   15124:	2008      	movs	r0, #8
   15126:	f7fa fca9 	bl	fa7c <bsd_os_errno_set>
   1512a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1512e:	e748      	b.n	14fc2 <pdn_interface_connect+0xf6>
   15130:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   15134:	1930      	adds	r0, r6, r4
   15136:	4b23      	ldr	r3, [pc, #140]	; (151c4 <pdn_interface_connect+0x2f8>)
   15138:	4a1a      	ldr	r2, [pc, #104]	; (151a4 <pdn_interface_connect+0x2d8>)
   1513a:	f7f9 ff35 	bl	efa8 <snprintf>
   1513e:	4404      	add	r4, r0
   15140:	e718      	b.n	14f74 <pdn_interface_connect+0xa8>
   15142:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15146:	2009      	movs	r0, #9
   15148:	f7fa fc98 	bl	fa7c <bsd_os_errno_set>
   1514c:	4620      	mov	r0, r4
   1514e:	b003      	add	sp, #12
   15150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15154:	2016      	movs	r0, #22
   15156:	f7fa fc91 	bl	fa7c <bsd_os_errno_set>
   1515a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1515e:	e730      	b.n	14fc2 <pdn_interface_connect+0xf6>
   15160:	4817      	ldr	r0, [pc, #92]	; (151c0 <pdn_interface_connect+0x2f4>)
   15162:	f006 fda0 	bl	1bca6 <strlen>
   15166:	490a      	ldr	r1, [pc, #40]	; (15190 <pdn_interface_connect+0x2c4>)
   15168:	4602      	mov	r2, r0
   1516a:	4815      	ldr	r0, [pc, #84]	; (151c0 <pdn_interface_connect+0x2f4>)
   1516c:	f006 fdae 	bl	1bccc <strncmp>
   15170:	b930      	cbnz	r0, 15180 <pdn_interface_connect+0x2b4>
   15172:	2008      	movs	r0, #8
   15174:	f7fa fc82 	bl	fa7c <bsd_os_errno_set>
   15178:	e723      	b.n	14fc2 <pdn_interface_connect+0xf6>
   1517a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1517e:	e720      	b.n	14fc2 <pdn_interface_connect+0xf6>
   15180:	2005      	movs	r0, #5
   15182:	f7fa fc7b 	bl	fa7c <bsd_os_errno_set>
   15186:	e71c      	b.n	14fc2 <pdn_interface_connect+0xf6>
   15188:	789a0000 	.word	0x789a0000
   1518c:	200211b0 	.word	0x200211b0
   15190:	200210b0 	.word	0x200210b0
   15194:	0001e550 	.word	0x0001e550
   15198:	0001e55c 	.word	0x0001e55c
   1519c:	0001e570 	.word	0x0001e570
   151a0:	0001e578 	.word	0x0001e578
   151a4:	0001e568 	.word	0x0001e568
   151a8:	0001e5ac 	.word	0x0001e5ac
   151ac:	0001e57c 	.word	0x0001e57c
   151b0:	0001e580 	.word	0x0001e580
   151b4:	0001e58c 	.word	0x0001e58c
   151b8:	0001e590 	.word	0x0001e590
   151bc:	0001e5a0 	.word	0x0001e5a0
   151c0:	0001e5e4 	.word	0x0001e5e4
   151c4:	0001e560 	.word	0x0001e560
   151c8:	200210ac 	.word	0x200210ac

000151cc <pdn_interface_close>:
   151cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   151d0:	4b63      	ldr	r3, [pc, #396]	; (15360 <pdn_interface_close+0x194>)
   151d2:	b083      	sub	sp, #12
   151d4:	4383      	bics	r3, r0
   151d6:	f040 809d 	bne.w	15314 <pdn_interface_close+0x148>
   151da:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   151de:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   151e2:	2c09      	cmp	r4, #9
   151e4:	f300 8096 	bgt.w	15314 <pdn_interface_close+0x148>
   151e8:	4d5e      	ldr	r5, [pc, #376]	; (15364 <pdn_interface_close+0x198>)
   151ea:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   151ee:	2800      	cmp	r0, #0
   151f0:	f000 8090 	beq.w	15314 <pdn_interface_close+0x148>
   151f4:	6883      	ldr	r3, [r0, #8]
   151f6:	2b00      	cmp	r3, #0
   151f8:	f000 808c 	beq.w	15314 <pdn_interface_close+0x148>
   151fc:	6883      	ldr	r3, [r0, #8]
   151fe:	2b03      	cmp	r3, #3
   15200:	d008      	beq.n	15214 <pdn_interface_close+0x48>
   15202:	f7fd fb09 	bl	12818 <nrf_free>
   15206:	2300      	movs	r3, #0
   15208:	4618      	mov	r0, r3
   1520a:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   1520e:	b003      	add	sp, #12
   15210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15214:	4e54      	ldr	r6, [pc, #336]	; (15368 <pdn_interface_close+0x19c>)
   15216:	4a55      	ldr	r2, [pc, #340]	; (1536c <pdn_interface_close+0x1a0>)
   15218:	f44f 7180 	mov.w	r1, #256	; 0x100
   1521c:	4630      	mov	r0, r6
   1521e:	f7f9 fec3 	bl	efa8 <snprintf>
   15222:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   15226:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1522a:	681b      	ldr	r3, [r3, #0]
   1522c:	4a50      	ldr	r2, [pc, #320]	; (15370 <pdn_interface_close+0x1a4>)
   1522e:	4430      	add	r0, r6
   15230:	f8df 814c 	ldr.w	r8, [pc, #332]	; 15380 <pdn_interface_close+0x1b4>
   15234:	f7f9 feb8 	bl	efa8 <snprintf>
   15238:	4630      	mov	r0, r6
   1523a:	f8d8 9000 	ldr.w	r9, [r8]
   1523e:	2700      	movs	r7, #0
   15240:	f006 fd31 	bl	1bca6 <strlen>
   15244:	4631      	mov	r1, r6
   15246:	4602      	mov	r2, r0
   15248:	463b      	mov	r3, r7
   1524a:	4648      	mov	r0, r9
   1524c:	9701      	str	r7, [sp, #4]
   1524e:	9700      	str	r7, [sp, #0]
   15250:	f7fc fd3c 	bl	11ccc <at_interface_write>
   15254:	4681      	mov	r9, r0
   15256:	4630      	mov	r0, r6
   15258:	f006 fd25 	bl	1bca6 <strlen>
   1525c:	4548      	cmp	r0, r9
   1525e:	d176      	bne.n	1534e <pdn_interface_close+0x182>
   15260:	463b      	mov	r3, r7
   15262:	e9cd 7700 	strd	r7, r7, [sp]
   15266:	f44f 7280 	mov.w	r2, #256	; 0x100
   1526a:	4631      	mov	r1, r6
   1526c:	f8d8 0000 	ldr.w	r0, [r8]
   15270:	f7fc fe14 	bl	11e9c <at_interface_read>
   15274:	4607      	mov	r7, r0
   15276:	483f      	ldr	r0, [pc, #252]	; (15374 <pdn_interface_close+0x1a8>)
   15278:	f006 fd15 	bl	1bca6 <strlen>
   1527c:	4287      	cmp	r7, r0
   1527e:	da4f      	bge.n	15320 <pdn_interface_close+0x154>
   15280:	483d      	ldr	r0, [pc, #244]	; (15378 <pdn_interface_close+0x1ac>)
   15282:	f006 fd10 	bl	1bca6 <strlen>
   15286:	4938      	ldr	r1, [pc, #224]	; (15368 <pdn_interface_close+0x19c>)
   15288:	4602      	mov	r2, r0
   1528a:	483b      	ldr	r0, [pc, #236]	; (15378 <pdn_interface_close+0x1ac>)
   1528c:	f006 fd1e 	bl	1bccc <strncmp>
   15290:	2800      	cmp	r0, #0
   15292:	d15c      	bne.n	1534e <pdn_interface_close+0x182>
   15294:	2008      	movs	r0, #8
   15296:	f7fa fbf1 	bl	fa7c <bsd_os_errno_set>
   1529a:	4a38      	ldr	r2, [pc, #224]	; (1537c <pdn_interface_close+0x1b0>)
   1529c:	f44f 7180 	mov.w	r1, #256	; 0x100
   152a0:	4831      	ldr	r0, [pc, #196]	; (15368 <pdn_interface_close+0x19c>)
   152a2:	f7f9 fe81 	bl	efa8 <snprintf>
   152a6:	4601      	mov	r1, r0
   152a8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   152ac:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   152b0:	681b      	ldr	r3, [r3, #0]
   152b2:	4a2f      	ldr	r2, [pc, #188]	; (15370 <pdn_interface_close+0x1a4>)
   152b4:	1830      	adds	r0, r6, r0
   152b6:	f7f9 fe77 	bl	efa8 <snprintf>
   152ba:	482b      	ldr	r0, [pc, #172]	; (15368 <pdn_interface_close+0x19c>)
   152bc:	f8d8 7000 	ldr.w	r7, [r8]
   152c0:	2600      	movs	r6, #0
   152c2:	f006 fcf0 	bl	1bca6 <strlen>
   152c6:	4633      	mov	r3, r6
   152c8:	4602      	mov	r2, r0
   152ca:	4927      	ldr	r1, [pc, #156]	; (15368 <pdn_interface_close+0x19c>)
   152cc:	4638      	mov	r0, r7
   152ce:	9601      	str	r6, [sp, #4]
   152d0:	9600      	str	r6, [sp, #0]
   152d2:	f7fc fcfb 	bl	11ccc <at_interface_write>
   152d6:	4607      	mov	r7, r0
   152d8:	4823      	ldr	r0, [pc, #140]	; (15368 <pdn_interface_close+0x19c>)
   152da:	f006 fce4 	bl	1bca6 <strlen>
   152de:	42b8      	cmp	r0, r7
   152e0:	d139      	bne.n	15356 <pdn_interface_close+0x18a>
   152e2:	4633      	mov	r3, r6
   152e4:	e9cd 6600 	strd	r6, r6, [sp]
   152e8:	f44f 7280 	mov.w	r2, #256	; 0x100
   152ec:	491e      	ldr	r1, [pc, #120]	; (15368 <pdn_interface_close+0x19c>)
   152ee:	f8d8 0000 	ldr.w	r0, [r8]
   152f2:	f7fc fdd3 	bl	11e9c <at_interface_read>
   152f6:	4606      	mov	r6, r0
   152f8:	481e      	ldr	r0, [pc, #120]	; (15374 <pdn_interface_close+0x1a8>)
   152fa:	f006 fcd4 	bl	1bca6 <strlen>
   152fe:	4286      	cmp	r6, r0
   15300:	db16      	blt.n	15330 <pdn_interface_close+0x164>
   15302:	4602      	mov	r2, r0
   15304:	4918      	ldr	r1, [pc, #96]	; (15368 <pdn_interface_close+0x19c>)
   15306:	481b      	ldr	r0, [pc, #108]	; (15374 <pdn_interface_close+0x1a8>)
   15308:	f006 fce0 	bl	1bccc <strncmp>
   1530c:	b980      	cbnz	r0, 15330 <pdn_interface_close+0x164>
   1530e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   15312:	e776      	b.n	15202 <pdn_interface_close+0x36>
   15314:	2009      	movs	r0, #9
   15316:	f7fa fbb1 	bl	fa7c <bsd_os_errno_set>
   1531a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1531e:	e776      	b.n	1520e <pdn_interface_close+0x42>
   15320:	4602      	mov	r2, r0
   15322:	4631      	mov	r1, r6
   15324:	4813      	ldr	r0, [pc, #76]	; (15374 <pdn_interface_close+0x1a8>)
   15326:	f006 fcd1 	bl	1bccc <strncmp>
   1532a:	2800      	cmp	r0, #0
   1532c:	d0b5      	beq.n	1529a <pdn_interface_close+0xce>
   1532e:	e7a7      	b.n	15280 <pdn_interface_close+0xb4>
   15330:	4811      	ldr	r0, [pc, #68]	; (15378 <pdn_interface_close+0x1ac>)
   15332:	f006 fcb8 	bl	1bca6 <strlen>
   15336:	490c      	ldr	r1, [pc, #48]	; (15368 <pdn_interface_close+0x19c>)
   15338:	4602      	mov	r2, r0
   1533a:	480f      	ldr	r0, [pc, #60]	; (15378 <pdn_interface_close+0x1ac>)
   1533c:	f006 fcc6 	bl	1bccc <strncmp>
   15340:	b948      	cbnz	r0, 15356 <pdn_interface_close+0x18a>
   15342:	2008      	movs	r0, #8
   15344:	f7fa fb9a 	bl	fa7c <bsd_os_errno_set>
   15348:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1534c:	e759      	b.n	15202 <pdn_interface_close+0x36>
   1534e:	2005      	movs	r0, #5
   15350:	f7fa fb94 	bl	fa7c <bsd_os_errno_set>
   15354:	e7a1      	b.n	1529a <pdn_interface_close+0xce>
   15356:	2005      	movs	r0, #5
   15358:	f7fa fb90 	bl	fa7c <bsd_os_errno_set>
   1535c:	e7d7      	b.n	1530e <pdn_interface_close+0x142>
   1535e:	bf00      	nop
   15360:	789a0000 	.word	0x789a0000
   15364:	200211b0 	.word	0x200211b0
   15368:	200210b0 	.word	0x200210b0
   1536c:	0001e544 	.word	0x0001e544
   15370:	0001e58c 	.word	0x0001e58c
   15374:	0001e57c 	.word	0x0001e57c
   15378:	0001e5e4 	.word	0x0001e5e4
   1537c:	0001e550 	.word	0x0001e550
   15380:	200210ac 	.word	0x200210ac

00015384 <pdn_interface_setopt>:
   15384:	b510      	push	{r4, lr}
   15386:	f240 2402 	movw	r4, #514	; 0x202
   1538a:	42a1      	cmp	r1, r4
   1538c:	d10b      	bne.n	153a6 <pdn_interface_setopt+0x22>
   1538e:	b153      	cbz	r3, 153a6 <pdn_interface_setopt+0x22>
   15390:	9902      	ldr	r1, [sp, #8]
   15392:	b141      	cbz	r1, 153a6 <pdn_interface_setopt+0x22>
   15394:	4925      	ldr	r1, [pc, #148]	; (1542c <pdn_interface_setopt+0xa8>)
   15396:	4381      	bics	r1, r0
   15398:	d00b      	beq.n	153b2 <pdn_interface_setopt+0x2e>
   1539a:	2009      	movs	r0, #9
   1539c:	f7fa fb6e 	bl	fa7c <bsd_os_errno_set>
   153a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   153a4:	bd10      	pop	{r4, pc}
   153a6:	2016      	movs	r0, #22
   153a8:	f7fa fb68 	bl	fa7c <bsd_os_errno_set>
   153ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   153b0:	bd10      	pop	{r4, pc}
   153b2:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   153b6:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   153ba:	2809      	cmp	r0, #9
   153bc:	dced      	bgt.n	1539a <pdn_interface_setopt+0x16>
   153be:	491c      	ldr	r1, [pc, #112]	; (15430 <pdn_interface_setopt+0xac>)
   153c0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   153c4:	2900      	cmp	r1, #0
   153c6:	d0e8      	beq.n	1539a <pdn_interface_setopt+0x16>
   153c8:	688c      	ldr	r4, [r1, #8]
   153ca:	2c00      	cmp	r4, #0
   153cc:	d0e5      	beq.n	1539a <pdn_interface_setopt+0x16>
   153ce:	2800      	cmp	r0, #0
   153d0:	dbe3      	blt.n	1539a <pdn_interface_setopt+0x16>
   153d2:	2a01      	cmp	r2, #1
   153d4:	d001      	beq.n	153da <pdn_interface_setopt+0x56>
   153d6:	202d      	movs	r0, #45	; 0x2d
   153d8:	e7e6      	b.n	153a8 <pdn_interface_setopt+0x24>
   153da:	688a      	ldr	r2, [r1, #8]
   153dc:	b1fa      	cbz	r2, 1541e <pdn_interface_setopt+0x9a>
   153de:	688a      	ldr	r2, [r1, #8]
   153e0:	2a03      	cmp	r2, #3
   153e2:	d01c      	beq.n	1541e <pdn_interface_setopt+0x9a>
   153e4:	688a      	ldr	r2, [r1, #8]
   153e6:	2a04      	cmp	r2, #4
   153e8:	d019      	beq.n	1541e <pdn_interface_setopt+0x9a>
   153ea:	9a02      	ldr	r2, [sp, #8]
   153ec:	0890      	lsrs	r0, r2, #2
   153ee:	1e42      	subs	r2, r0, #1
   153f0:	2a01      	cmp	r2, #1
   153f2:	d8d8      	bhi.n	153a6 <pdn_interface_setopt+0x22>
   153f4:	9a02      	ldr	r2, [sp, #8]
   153f6:	0792      	lsls	r2, r2, #30
   153f8:	d1d5      	bne.n	153a6 <pdn_interface_setopt+0x22>
   153fa:	681a      	ldr	r2, [r3, #0]
   153fc:	2a02      	cmp	r2, #2
   153fe:	d010      	beq.n	15422 <pdn_interface_setopt+0x9e>
   15400:	2a0a      	cmp	r2, #10
   15402:	d1d0      	bne.n	153a6 <pdn_interface_setopt+0x22>
   15404:	2202      	movs	r2, #2
   15406:	2802      	cmp	r0, #2
   15408:	d106      	bne.n	15418 <pdn_interface_setopt+0x94>
   1540a:	685b      	ldr	r3, [r3, #4]
   1540c:	2b02      	cmp	r3, #2
   1540e:	d00a      	beq.n	15426 <pdn_interface_setopt+0xa2>
   15410:	2b0a      	cmp	r3, #10
   15412:	d1c8      	bne.n	153a6 <pdn_interface_setopt+0x22>
   15414:	f042 0202 	orr.w	r2, r2, #2
   15418:	670a      	str	r2, [r1, #112]	; 0x70
   1541a:	2000      	movs	r0, #0
   1541c:	e7c4      	b.n	153a8 <pdn_interface_setopt+0x24>
   1541e:	200e      	movs	r0, #14
   15420:	e7c2      	b.n	153a8 <pdn_interface_setopt+0x24>
   15422:	2201      	movs	r2, #1
   15424:	e7ef      	b.n	15406 <pdn_interface_setopt+0x82>
   15426:	f042 0201 	orr.w	r2, r2, #1
   1542a:	e7f5      	b.n	15418 <pdn_interface_setopt+0x94>
   1542c:	789a0000 	.word	0x789a0000
   15430:	200211b0 	.word	0x200211b0

00015434 <pdn_interface_getopt>:
   15434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15438:	f240 2402 	movw	r4, #514	; 0x202
   1543c:	b083      	sub	sp, #12
   1543e:	42a1      	cmp	r1, r4
   15440:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   15442:	f040 80a9 	bne.w	15598 <pdn_interface_getopt+0x164>
   15446:	461e      	mov	r6, r3
   15448:	2b00      	cmp	r3, #0
   1544a:	f000 80a5 	beq.w	15598 <pdn_interface_getopt+0x164>
   1544e:	2d00      	cmp	r5, #0
   15450:	f000 80a2 	beq.w	15598 <pdn_interface_getopt+0x164>
   15454:	4b56      	ldr	r3, [pc, #344]	; (155b0 <pdn_interface_getopt+0x17c>)
   15456:	4383      	bics	r3, r0
   15458:	f040 8084 	bne.w	15564 <pdn_interface_getopt+0x130>
   1545c:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   15460:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   15464:	2c09      	cmp	r4, #9
   15466:	dc7d      	bgt.n	15564 <pdn_interface_getopt+0x130>
   15468:	4b52      	ldr	r3, [pc, #328]	; (155b4 <pdn_interface_getopt+0x180>)
   1546a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   1546e:	2b00      	cmp	r3, #0
   15470:	d078      	beq.n	15564 <pdn_interface_getopt+0x130>
   15472:	6899      	ldr	r1, [r3, #8]
   15474:	2900      	cmp	r1, #0
   15476:	d075      	beq.n	15564 <pdn_interface_getopt+0x130>
   15478:	2c00      	cmp	r4, #0
   1547a:	db73      	blt.n	15564 <pdn_interface_getopt+0x130>
   1547c:	2a02      	cmp	r2, #2
   1547e:	d00e      	beq.n	1549e <pdn_interface_getopt+0x6a>
   15480:	2a03      	cmp	r2, #3
   15482:	d008      	beq.n	15496 <pdn_interface_getopt+0x62>
   15484:	2a01      	cmp	r2, #1
   15486:	d015      	beq.n	154b4 <pdn_interface_getopt+0x80>
   15488:	202d      	movs	r0, #45	; 0x2d
   1548a:	f7fa faf7 	bl	fa7c <bsd_os_errno_set>
   1548e:	2000      	movs	r0, #0
   15490:	b003      	add	sp, #12
   15492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15496:	682b      	ldr	r3, [r5, #0]
   15498:	bb23      	cbnz	r3, 154e4 <pdn_interface_getopt+0xb0>
   1549a:	2016      	movs	r0, #22
   1549c:	e7f5      	b.n	1548a <pdn_interface_getopt+0x56>
   1549e:	682a      	ldr	r2, [r5, #0]
   154a0:	2a00      	cmp	r2, #0
   154a2:	d0fa      	beq.n	1549a <pdn_interface_getopt+0x66>
   154a4:	2201      	movs	r2, #1
   154a6:	2000      	movs	r0, #0
   154a8:	681b      	ldr	r3, [r3, #0]
   154aa:	7033      	strb	r3, [r6, #0]
   154ac:	602a      	str	r2, [r5, #0]
   154ae:	b003      	add	sp, #12
   154b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   154b4:	689a      	ldr	r2, [r3, #8]
   154b6:	2a00      	cmp	r2, #0
   154b8:	d052      	beq.n	15560 <pdn_interface_getopt+0x12c>
   154ba:	689a      	ldr	r2, [r3, #8]
   154bc:	2a04      	cmp	r2, #4
   154be:	d04f      	beq.n	15560 <pdn_interface_getopt+0x12c>
   154c0:	682a      	ldr	r2, [r5, #0]
   154c2:	2a07      	cmp	r2, #7
   154c4:	d9e9      	bls.n	1549a <pdn_interface_getopt+0x66>
   154c6:	f012 0203 	ands.w	r2, r2, #3
   154ca:	d1e6      	bne.n	1549a <pdn_interface_getopt+0x66>
   154cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   154ce:	0799      	lsls	r1, r3, #30
   154d0:	d45d      	bmi.n	1558e <pdn_interface_getopt+0x15a>
   154d2:	2104      	movs	r1, #4
   154d4:	07db      	lsls	r3, r3, #31
   154d6:	d502      	bpl.n	154de <pdn_interface_getopt+0xaa>
   154d8:	2302      	movs	r3, #2
   154da:	50b3      	str	r3, [r6, r2]
   154dc:	460a      	mov	r2, r1
   154de:	602a      	str	r2, [r5, #0]
   154e0:	2000      	movs	r0, #0
   154e2:	e7d5      	b.n	15490 <pdn_interface_getopt+0x5c>
   154e4:	4a34      	ldr	r2, [pc, #208]	; (155b8 <pdn_interface_getopt+0x184>)
   154e6:	f44f 7180 	mov.w	r1, #256	; 0x100
   154ea:	4834      	ldr	r0, [pc, #208]	; (155bc <pdn_interface_getopt+0x188>)
   154ec:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 155c8 <pdn_interface_getopt+0x194>
   154f0:	f7f9 fd5a 	bl	efa8 <snprintf>
   154f4:	4831      	ldr	r0, [pc, #196]	; (155bc <pdn_interface_getopt+0x188>)
   154f6:	f8d8 9000 	ldr.w	r9, [r8]
   154fa:	2700      	movs	r7, #0
   154fc:	f006 fbd3 	bl	1bca6 <strlen>
   15500:	463b      	mov	r3, r7
   15502:	4602      	mov	r2, r0
   15504:	492d      	ldr	r1, [pc, #180]	; (155bc <pdn_interface_getopt+0x188>)
   15506:	4648      	mov	r0, r9
   15508:	9701      	str	r7, [sp, #4]
   1550a:	9700      	str	r7, [sp, #0]
   1550c:	f7fc fbde 	bl	11ccc <at_interface_write>
   15510:	4681      	mov	r9, r0
   15512:	482a      	ldr	r0, [pc, #168]	; (155bc <pdn_interface_getopt+0x188>)
   15514:	f006 fbc7 	bl	1bca6 <strlen>
   15518:	4548      	cmp	r0, r9
   1551a:	d143      	bne.n	155a4 <pdn_interface_getopt+0x170>
   1551c:	463b      	mov	r3, r7
   1551e:	e9cd 7700 	strd	r7, r7, [sp]
   15522:	f44f 7280 	mov.w	r2, #256	; 0x100
   15526:	4925      	ldr	r1, [pc, #148]	; (155bc <pdn_interface_getopt+0x188>)
   15528:	f8d8 0000 	ldr.w	r0, [r8]
   1552c:	f7fc fcb6 	bl	11e9c <at_interface_read>
   15530:	4607      	mov	r7, r0
   15532:	4823      	ldr	r0, [pc, #140]	; (155c0 <pdn_interface_getopt+0x18c>)
   15534:	f006 fbb7 	bl	1bca6 <strlen>
   15538:	4287      	cmp	r7, r0
   1553a:	db19      	blt.n	15570 <pdn_interface_getopt+0x13c>
   1553c:	4602      	mov	r2, r0
   1553e:	491f      	ldr	r1, [pc, #124]	; (155bc <pdn_interface_getopt+0x188>)
   15540:	481f      	ldr	r0, [pc, #124]	; (155c0 <pdn_interface_getopt+0x18c>)
   15542:	f006 fbc3 	bl	1bccc <strncmp>
   15546:	4607      	mov	r7, r0
   15548:	b990      	cbnz	r0, 15570 <pdn_interface_getopt+0x13c>
   1554a:	4620      	mov	r0, r4
   1554c:	491b      	ldr	r1, [pc, #108]	; (155bc <pdn_interface_getopt+0x188>)
   1554e:	f7ff fb35 	bl	14bbc <pdn_state_get_parser>
   15552:	2800      	cmp	r0, #0
   15554:	db99      	blt.n	1548a <pdn_interface_getopt+0x56>
   15556:	2301      	movs	r3, #1
   15558:	7030      	strb	r0, [r6, #0]
   1555a:	4638      	mov	r0, r7
   1555c:	602b      	str	r3, [r5, #0]
   1555e:	e797      	b.n	15490 <pdn_interface_getopt+0x5c>
   15560:	200e      	movs	r0, #14
   15562:	e792      	b.n	1548a <pdn_interface_getopt+0x56>
   15564:	2009      	movs	r0, #9
   15566:	f7fa fa89 	bl	fa7c <bsd_os_errno_set>
   1556a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1556e:	e78f      	b.n	15490 <pdn_interface_getopt+0x5c>
   15570:	4814      	ldr	r0, [pc, #80]	; (155c4 <pdn_interface_getopt+0x190>)
   15572:	f006 fb98 	bl	1bca6 <strlen>
   15576:	4911      	ldr	r1, [pc, #68]	; (155bc <pdn_interface_getopt+0x188>)
   15578:	4602      	mov	r2, r0
   1557a:	4812      	ldr	r0, [pc, #72]	; (155c4 <pdn_interface_getopt+0x190>)
   1557c:	f006 fba6 	bl	1bccc <strncmp>
   15580:	b980      	cbnz	r0, 155a4 <pdn_interface_getopt+0x170>
   15582:	2008      	movs	r0, #8
   15584:	f7fa fa7a 	bl	fa7c <bsd_os_errno_set>
   15588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1558c:	e77d      	b.n	1548a <pdn_interface_getopt+0x56>
   1558e:	220a      	movs	r2, #10
   15590:	2108      	movs	r1, #8
   15592:	6032      	str	r2, [r6, #0]
   15594:	2204      	movs	r2, #4
   15596:	e79d      	b.n	154d4 <pdn_interface_getopt+0xa0>
   15598:	2016      	movs	r0, #22
   1559a:	f7fa fa6f 	bl	fa7c <bsd_os_errno_set>
   1559e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   155a2:	e775      	b.n	15490 <pdn_interface_getopt+0x5c>
   155a4:	2005      	movs	r0, #5
   155a6:	f7fa fa69 	bl	fa7c <bsd_os_errno_set>
   155aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   155ae:	e76c      	b.n	1548a <pdn_interface_getopt+0x56>
   155b0:	789a0000 	.word	0x789a0000
   155b4:	200211b0 	.word	0x200211b0
   155b8:	0001e5b4 	.word	0x0001e5b4
   155bc:	200210b0 	.word	0x200210b0
   155c0:	0001e5c0 	.word	0x0001e5c0
   155c4:	0001e5e4 	.word	0x0001e5e4
   155c8:	200210ac 	.word	0x200210ac

000155cc <pdn_interface_pdn_id_get>:
   155cc:	2900      	cmp	r1, #0
   155ce:	f000 83b9 	beq.w	15d44 <pdn_interface_pdn_id_get+0x778>
   155d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   155d6:	4ca3      	ldr	r4, [pc, #652]	; (15864 <pdn_interface_pdn_id_get+0x298>)
   155d8:	2802      	cmp	r0, #2
   155da:	b083      	sub	sp, #12
   155dc:	460d      	mov	r5, r1
   155de:	6823      	ldr	r3, [r4, #0]
   155e0:	f000 8094 	beq.w	1570c <pdn_interface_pdn_id_get+0x140>
   155e4:	280a      	cmp	r0, #10
   155e6:	d03f      	beq.n	15668 <pdn_interface_pdn_id_get+0x9c>
   155e8:	b11b      	cbz	r3, 155f2 <pdn_interface_pdn_id_get+0x26>
   155ea:	689b      	ldr	r3, [r3, #8]
   155ec:	2b03      	cmp	r3, #3
   155ee:	f000 8127 	beq.w	15840 <pdn_interface_pdn_id_get+0x274>
   155f2:	6863      	ldr	r3, [r4, #4]
   155f4:	b11b      	cbz	r3, 155fe <pdn_interface_pdn_id_get+0x32>
   155f6:	689b      	ldr	r3, [r3, #8]
   155f8:	2b03      	cmp	r3, #3
   155fa:	f000 8110 	beq.w	1581e <pdn_interface_pdn_id_get+0x252>
   155fe:	68a3      	ldr	r3, [r4, #8]
   15600:	b11b      	cbz	r3, 1560a <pdn_interface_pdn_id_get+0x3e>
   15602:	689b      	ldr	r3, [r3, #8]
   15604:	2b03      	cmp	r3, #3
   15606:	f000 80f9 	beq.w	157fc <pdn_interface_pdn_id_get+0x230>
   1560a:	68e3      	ldr	r3, [r4, #12]
   1560c:	b11b      	cbz	r3, 15616 <pdn_interface_pdn_id_get+0x4a>
   1560e:	689b      	ldr	r3, [r3, #8]
   15610:	2b03      	cmp	r3, #3
   15612:	f000 80e2 	beq.w	157da <pdn_interface_pdn_id_get+0x20e>
   15616:	6923      	ldr	r3, [r4, #16]
   15618:	b11b      	cbz	r3, 15622 <pdn_interface_pdn_id_get+0x56>
   1561a:	689b      	ldr	r3, [r3, #8]
   1561c:	2b03      	cmp	r3, #3
   1561e:	f000 8123 	beq.w	15868 <pdn_interface_pdn_id_get+0x29c>
   15622:	6963      	ldr	r3, [r4, #20]
   15624:	b11b      	cbz	r3, 1562e <pdn_interface_pdn_id_get+0x62>
   15626:	689b      	ldr	r3, [r3, #8]
   15628:	2b03      	cmp	r3, #3
   1562a:	f000 8161 	beq.w	158f0 <pdn_interface_pdn_id_get+0x324>
   1562e:	69a3      	ldr	r3, [r4, #24]
   15630:	b11b      	cbz	r3, 1563a <pdn_interface_pdn_id_get+0x6e>
   15632:	689b      	ldr	r3, [r3, #8]
   15634:	2b03      	cmp	r3, #3
   15636:	f000 814a 	beq.w	158ce <pdn_interface_pdn_id_get+0x302>
   1563a:	69e3      	ldr	r3, [r4, #28]
   1563c:	b11b      	cbz	r3, 15646 <pdn_interface_pdn_id_get+0x7a>
   1563e:	689b      	ldr	r3, [r3, #8]
   15640:	2b03      	cmp	r3, #3
   15642:	f000 8133 	beq.w	158ac <pdn_interface_pdn_id_get+0x2e0>
   15646:	6a23      	ldr	r3, [r4, #32]
   15648:	b11b      	cbz	r3, 15652 <pdn_interface_pdn_id_get+0x86>
   1564a:	689b      	ldr	r3, [r3, #8]
   1564c:	2b03      	cmp	r3, #3
   1564e:	f000 811c 	beq.w	1588a <pdn_interface_pdn_id_get+0x2be>
   15652:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15654:	b11b      	cbz	r3, 1565e <pdn_interface_pdn_id_get+0x92>
   15656:	689b      	ldr	r3, [r3, #8]
   15658:	2b03      	cmp	r3, #3
   1565a:	f000 80ad 	beq.w	157b8 <pdn_interface_pdn_id_get+0x1ec>
   1565e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15662:	b003      	add	sp, #12
   15664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15668:	b11b      	cbz	r3, 15672 <pdn_interface_pdn_id_get+0xa6>
   1566a:	689b      	ldr	r3, [r3, #8]
   1566c:	2b03      	cmp	r3, #3
   1566e:	f000 8335 	beq.w	15cdc <pdn_interface_pdn_id_get+0x710>
   15672:	6863      	ldr	r3, [r4, #4]
   15674:	b11b      	cbz	r3, 1567e <pdn_interface_pdn_id_get+0xb2>
   15676:	689b      	ldr	r3, [r3, #8]
   15678:	2b03      	cmp	r3, #3
   1567a:	f000 82fd 	beq.w	15c78 <pdn_interface_pdn_id_get+0x6ac>
   1567e:	68a3      	ldr	r3, [r4, #8]
   15680:	b11b      	cbz	r3, 1568a <pdn_interface_pdn_id_get+0xbe>
   15682:	689b      	ldr	r3, [r3, #8]
   15684:	2b03      	cmp	r3, #3
   15686:	f000 82d5 	beq.w	15c34 <pdn_interface_pdn_id_get+0x668>
   1568a:	68e3      	ldr	r3, [r4, #12]
   1568c:	b11b      	cbz	r3, 15696 <pdn_interface_pdn_id_get+0xca>
   1568e:	689e      	ldr	r6, [r3, #8]
   15690:	2e03      	cmp	r6, #3
   15692:	f000 81f0 	beq.w	15a76 <pdn_interface_pdn_id_get+0x4aa>
   15696:	6923      	ldr	r3, [r4, #16]
   15698:	b11b      	cbz	r3, 156a2 <pdn_interface_pdn_id_get+0xd6>
   1569a:	689b      	ldr	r3, [r3, #8]
   1569c:	2b03      	cmp	r3, #3
   1569e:	f000 8203 	beq.w	15aa8 <pdn_interface_pdn_id_get+0x4dc>
   156a2:	6963      	ldr	r3, [r4, #20]
   156a4:	b11b      	cbz	r3, 156ae <pdn_interface_pdn_id_get+0xe2>
   156a6:	689b      	ldr	r3, [r3, #8]
   156a8:	2b03      	cmp	r3, #3
   156aa:	f000 8215 	beq.w	15ad8 <pdn_interface_pdn_id_get+0x50c>
   156ae:	69a3      	ldr	r3, [r4, #24]
   156b0:	b11b      	cbz	r3, 156ba <pdn_interface_pdn_id_get+0xee>
   156b2:	689b      	ldr	r3, [r3, #8]
   156b4:	2b03      	cmp	r3, #3
   156b6:	f000 8227 	beq.w	15b08 <pdn_interface_pdn_id_get+0x53c>
   156ba:	69e3      	ldr	r3, [r4, #28]
   156bc:	b11b      	cbz	r3, 156c6 <pdn_interface_pdn_id_get+0xfa>
   156be:	689b      	ldr	r3, [r3, #8]
   156c0:	2b03      	cmp	r3, #3
   156c2:	f000 8239 	beq.w	15b38 <pdn_interface_pdn_id_get+0x56c>
   156c6:	6a23      	ldr	r3, [r4, #32]
   156c8:	b11b      	cbz	r3, 156d2 <pdn_interface_pdn_id_get+0x106>
   156ca:	689b      	ldr	r3, [r3, #8]
   156cc:	2b03      	cmp	r3, #3
   156ce:	f000 824d 	beq.w	15b6c <pdn_interface_pdn_id_get+0x5a0>
   156d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   156d4:	2b00      	cmp	r3, #0
   156d6:	d0c2      	beq.n	1565e <pdn_interface_pdn_id_get+0x92>
   156d8:	689b      	ldr	r3, [r3, #8]
   156da:	2b03      	cmp	r3, #3
   156dc:	d1bf      	bne.n	1565e <pdn_interface_pdn_id_get+0x92>
   156de:	4628      	mov	r0, r5
   156e0:	f006 fae1 	bl	1bca6 <strlen>
   156e4:	4606      	mov	r6, r0
   156e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   156e8:	300c      	adds	r0, #12
   156ea:	f006 fadc 	bl	1bca6 <strlen>
   156ee:	42b0      	cmp	r0, r6
   156f0:	d1b5      	bne.n	1565e <pdn_interface_pdn_id_get+0x92>
   156f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   156f4:	4628      	mov	r0, r5
   156f6:	310c      	adds	r1, #12
   156f8:	f006 fadc 	bl	1bcb4 <strcmp>
   156fc:	2800      	cmp	r0, #0
   156fe:	d1ae      	bne.n	1565e <pdn_interface_pdn_id_get+0x92>
   15700:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15702:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15704:	0792      	lsls	r2, r2, #30
   15706:	d5aa      	bpl.n	1565e <pdn_interface_pdn_id_get+0x92>
   15708:	2609      	movs	r6, #9
   1570a:	e11a      	b.n	15942 <pdn_interface_pdn_id_get+0x376>
   1570c:	b11b      	cbz	r3, 15716 <pdn_interface_pdn_id_get+0x14a>
   1570e:	689b      	ldr	r3, [r3, #8]
   15710:	2b03      	cmp	r3, #3
   15712:	f000 82fd 	beq.w	15d10 <pdn_interface_pdn_id_get+0x744>
   15716:	6863      	ldr	r3, [r4, #4]
   15718:	b11b      	cbz	r3, 15722 <pdn_interface_pdn_id_get+0x156>
   1571a:	689b      	ldr	r3, [r3, #8]
   1571c:	2b03      	cmp	r3, #3
   1571e:	f000 82c5 	beq.w	15cac <pdn_interface_pdn_id_get+0x6e0>
   15722:	68a3      	ldr	r3, [r4, #8]
   15724:	b11b      	cbz	r3, 1572e <pdn_interface_pdn_id_get+0x162>
   15726:	689b      	ldr	r3, [r3, #8]
   15728:	2b03      	cmp	r3, #3
   1572a:	f000 8269 	beq.w	15c00 <pdn_interface_pdn_id_get+0x634>
   1572e:	68e3      	ldr	r3, [r4, #12]
   15730:	b11b      	cbz	r3, 1573a <pdn_interface_pdn_id_get+0x16e>
   15732:	689e      	ldr	r6, [r3, #8]
   15734:	2e03      	cmp	r6, #3
   15736:	f000 80ec 	beq.w	15912 <pdn_interface_pdn_id_get+0x346>
   1573a:	6923      	ldr	r3, [r4, #16]
   1573c:	b11b      	cbz	r3, 15746 <pdn_interface_pdn_id_get+0x17a>
   1573e:	689b      	ldr	r3, [r3, #8]
   15740:	2b03      	cmp	r3, #3
   15742:	f000 814a 	beq.w	159da <pdn_interface_pdn_id_get+0x40e>
   15746:	6963      	ldr	r3, [r4, #20]
   15748:	b11b      	cbz	r3, 15752 <pdn_interface_pdn_id_get+0x186>
   1574a:	689b      	ldr	r3, [r3, #8]
   1574c:	2b03      	cmp	r3, #3
   1574e:	f000 815e 	beq.w	15a0e <pdn_interface_pdn_id_get+0x442>
   15752:	69a3      	ldr	r3, [r4, #24]
   15754:	b11b      	cbz	r3, 1575e <pdn_interface_pdn_id_get+0x192>
   15756:	689b      	ldr	r3, [r3, #8]
   15758:	2b03      	cmp	r3, #3
   1575a:	f000 8172 	beq.w	15a42 <pdn_interface_pdn_id_get+0x476>
   1575e:	69e3      	ldr	r3, [r4, #28]
   15760:	b11b      	cbz	r3, 1576a <pdn_interface_pdn_id_get+0x19e>
   15762:	689b      	ldr	r3, [r3, #8]
   15764:	2b03      	cmp	r3, #3
   15766:	f000 821b 	beq.w	15ba0 <pdn_interface_pdn_id_get+0x5d4>
   1576a:	6a23      	ldr	r3, [r4, #32]
   1576c:	b11b      	cbz	r3, 15776 <pdn_interface_pdn_id_get+0x1aa>
   1576e:	689b      	ldr	r3, [r3, #8]
   15770:	2b03      	cmp	r3, #3
   15772:	f000 822d 	beq.w	15bd0 <pdn_interface_pdn_id_get+0x604>
   15776:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15778:	2b00      	cmp	r3, #0
   1577a:	f43f af70 	beq.w	1565e <pdn_interface_pdn_id_get+0x92>
   1577e:	689b      	ldr	r3, [r3, #8]
   15780:	2b03      	cmp	r3, #3
   15782:	f47f af6c 	bne.w	1565e <pdn_interface_pdn_id_get+0x92>
   15786:	4628      	mov	r0, r5
   15788:	f006 fa8d 	bl	1bca6 <strlen>
   1578c:	4606      	mov	r6, r0
   1578e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   15790:	300c      	adds	r0, #12
   15792:	f006 fa88 	bl	1bca6 <strlen>
   15796:	4286      	cmp	r6, r0
   15798:	f47f af61 	bne.w	1565e <pdn_interface_pdn_id_get+0x92>
   1579c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1579e:	4628      	mov	r0, r5
   157a0:	310c      	adds	r1, #12
   157a2:	f006 fa87 	bl	1bcb4 <strcmp>
   157a6:	2800      	cmp	r0, #0
   157a8:	f47f af59 	bne.w	1565e <pdn_interface_pdn_id_get+0x92>
   157ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   157ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   157b0:	07d2      	lsls	r2, r2, #31
   157b2:	f57f af54 	bpl.w	1565e <pdn_interface_pdn_id_get+0x92>
   157b6:	e7a7      	b.n	15708 <pdn_interface_pdn_id_get+0x13c>
   157b8:	4628      	mov	r0, r5
   157ba:	f006 fa74 	bl	1bca6 <strlen>
   157be:	4606      	mov	r6, r0
   157c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   157c2:	300c      	adds	r0, #12
   157c4:	f006 fa6f 	bl	1bca6 <strlen>
   157c8:	42b0      	cmp	r0, r6
   157ca:	f47f af48 	bne.w	1565e <pdn_interface_pdn_id_get+0x92>
   157ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
   157d0:	4628      	mov	r0, r5
   157d2:	310c      	adds	r1, #12
   157d4:	f006 fa6e 	bl	1bcb4 <strcmp>
   157d8:	e741      	b.n	1565e <pdn_interface_pdn_id_get+0x92>
   157da:	4628      	mov	r0, r5
   157dc:	f006 fa63 	bl	1bca6 <strlen>
   157e0:	4606      	mov	r6, r0
   157e2:	68e0      	ldr	r0, [r4, #12]
   157e4:	300c      	adds	r0, #12
   157e6:	f006 fa5e 	bl	1bca6 <strlen>
   157ea:	4286      	cmp	r6, r0
   157ec:	f47f af13 	bne.w	15616 <pdn_interface_pdn_id_get+0x4a>
   157f0:	68e1      	ldr	r1, [r4, #12]
   157f2:	4628      	mov	r0, r5
   157f4:	310c      	adds	r1, #12
   157f6:	f006 fa5d 	bl	1bcb4 <strcmp>
   157fa:	e70c      	b.n	15616 <pdn_interface_pdn_id_get+0x4a>
   157fc:	4628      	mov	r0, r5
   157fe:	f006 fa52 	bl	1bca6 <strlen>
   15802:	4606      	mov	r6, r0
   15804:	68a0      	ldr	r0, [r4, #8]
   15806:	300c      	adds	r0, #12
   15808:	f006 fa4d 	bl	1bca6 <strlen>
   1580c:	4286      	cmp	r6, r0
   1580e:	f47f aefc 	bne.w	1560a <pdn_interface_pdn_id_get+0x3e>
   15812:	68a1      	ldr	r1, [r4, #8]
   15814:	4628      	mov	r0, r5
   15816:	310c      	adds	r1, #12
   15818:	f006 fa4c 	bl	1bcb4 <strcmp>
   1581c:	e6f5      	b.n	1560a <pdn_interface_pdn_id_get+0x3e>
   1581e:	4628      	mov	r0, r5
   15820:	f006 fa41 	bl	1bca6 <strlen>
   15824:	4606      	mov	r6, r0
   15826:	6860      	ldr	r0, [r4, #4]
   15828:	300c      	adds	r0, #12
   1582a:	f006 fa3c 	bl	1bca6 <strlen>
   1582e:	4286      	cmp	r6, r0
   15830:	f47f aee5 	bne.w	155fe <pdn_interface_pdn_id_get+0x32>
   15834:	6861      	ldr	r1, [r4, #4]
   15836:	4628      	mov	r0, r5
   15838:	310c      	adds	r1, #12
   1583a:	f006 fa3b 	bl	1bcb4 <strcmp>
   1583e:	e6de      	b.n	155fe <pdn_interface_pdn_id_get+0x32>
   15840:	4608      	mov	r0, r1
   15842:	f006 fa30 	bl	1bca6 <strlen>
   15846:	4606      	mov	r6, r0
   15848:	6820      	ldr	r0, [r4, #0]
   1584a:	300c      	adds	r0, #12
   1584c:	f006 fa2b 	bl	1bca6 <strlen>
   15850:	4286      	cmp	r6, r0
   15852:	f47f aece 	bne.w	155f2 <pdn_interface_pdn_id_get+0x26>
   15856:	6821      	ldr	r1, [r4, #0]
   15858:	4628      	mov	r0, r5
   1585a:	310c      	adds	r1, #12
   1585c:	f006 fa2a 	bl	1bcb4 <strcmp>
   15860:	e6c7      	b.n	155f2 <pdn_interface_pdn_id_get+0x26>
   15862:	bf00      	nop
   15864:	200211b0 	.word	0x200211b0
   15868:	4628      	mov	r0, r5
   1586a:	f006 fa1c 	bl	1bca6 <strlen>
   1586e:	4606      	mov	r6, r0
   15870:	6920      	ldr	r0, [r4, #16]
   15872:	300c      	adds	r0, #12
   15874:	f006 fa17 	bl	1bca6 <strlen>
   15878:	4286      	cmp	r6, r0
   1587a:	f47f aed2 	bne.w	15622 <pdn_interface_pdn_id_get+0x56>
   1587e:	6921      	ldr	r1, [r4, #16]
   15880:	4628      	mov	r0, r5
   15882:	310c      	adds	r1, #12
   15884:	f006 fa16 	bl	1bcb4 <strcmp>
   15888:	e6cb      	b.n	15622 <pdn_interface_pdn_id_get+0x56>
   1588a:	4628      	mov	r0, r5
   1588c:	f006 fa0b 	bl	1bca6 <strlen>
   15890:	4606      	mov	r6, r0
   15892:	6a20      	ldr	r0, [r4, #32]
   15894:	300c      	adds	r0, #12
   15896:	f006 fa06 	bl	1bca6 <strlen>
   1589a:	4286      	cmp	r6, r0
   1589c:	f47f aed9 	bne.w	15652 <pdn_interface_pdn_id_get+0x86>
   158a0:	6a21      	ldr	r1, [r4, #32]
   158a2:	4628      	mov	r0, r5
   158a4:	310c      	adds	r1, #12
   158a6:	f006 fa05 	bl	1bcb4 <strcmp>
   158aa:	e6d2      	b.n	15652 <pdn_interface_pdn_id_get+0x86>
   158ac:	4628      	mov	r0, r5
   158ae:	f006 f9fa 	bl	1bca6 <strlen>
   158b2:	4606      	mov	r6, r0
   158b4:	69e0      	ldr	r0, [r4, #28]
   158b6:	300c      	adds	r0, #12
   158b8:	f006 f9f5 	bl	1bca6 <strlen>
   158bc:	4286      	cmp	r6, r0
   158be:	f47f aec2 	bne.w	15646 <pdn_interface_pdn_id_get+0x7a>
   158c2:	69e1      	ldr	r1, [r4, #28]
   158c4:	4628      	mov	r0, r5
   158c6:	310c      	adds	r1, #12
   158c8:	f006 f9f4 	bl	1bcb4 <strcmp>
   158cc:	e6bb      	b.n	15646 <pdn_interface_pdn_id_get+0x7a>
   158ce:	4628      	mov	r0, r5
   158d0:	f006 f9e9 	bl	1bca6 <strlen>
   158d4:	4606      	mov	r6, r0
   158d6:	69a0      	ldr	r0, [r4, #24]
   158d8:	300c      	adds	r0, #12
   158da:	f006 f9e4 	bl	1bca6 <strlen>
   158de:	4286      	cmp	r6, r0
   158e0:	f47f aeab 	bne.w	1563a <pdn_interface_pdn_id_get+0x6e>
   158e4:	69a1      	ldr	r1, [r4, #24]
   158e6:	4628      	mov	r0, r5
   158e8:	310c      	adds	r1, #12
   158ea:	f006 f9e3 	bl	1bcb4 <strcmp>
   158ee:	e6a4      	b.n	1563a <pdn_interface_pdn_id_get+0x6e>
   158f0:	4628      	mov	r0, r5
   158f2:	f006 f9d8 	bl	1bca6 <strlen>
   158f6:	4606      	mov	r6, r0
   158f8:	6960      	ldr	r0, [r4, #20]
   158fa:	300c      	adds	r0, #12
   158fc:	f006 f9d3 	bl	1bca6 <strlen>
   15900:	4286      	cmp	r6, r0
   15902:	f47f ae94 	bne.w	1562e <pdn_interface_pdn_id_get+0x62>
   15906:	6961      	ldr	r1, [r4, #20]
   15908:	4628      	mov	r0, r5
   1590a:	310c      	adds	r1, #12
   1590c:	f006 f9d2 	bl	1bcb4 <strcmp>
   15910:	e68d      	b.n	1562e <pdn_interface_pdn_id_get+0x62>
   15912:	4628      	mov	r0, r5
   15914:	f006 f9c7 	bl	1bca6 <strlen>
   15918:	4607      	mov	r7, r0
   1591a:	68e0      	ldr	r0, [r4, #12]
   1591c:	300c      	adds	r0, #12
   1591e:	f006 f9c2 	bl	1bca6 <strlen>
   15922:	4287      	cmp	r7, r0
   15924:	f47f af09 	bne.w	1573a <pdn_interface_pdn_id_get+0x16e>
   15928:	68e1      	ldr	r1, [r4, #12]
   1592a:	4628      	mov	r0, r5
   1592c:	310c      	adds	r1, #12
   1592e:	f006 f9c1 	bl	1bcb4 <strcmp>
   15932:	2800      	cmp	r0, #0
   15934:	f47f af01 	bne.w	1573a <pdn_interface_pdn_id_get+0x16e>
   15938:	68e3      	ldr	r3, [r4, #12]
   1593a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1593c:	07d1      	lsls	r1, r2, #31
   1593e:	f57f aefc 	bpl.w	1573a <pdn_interface_pdn_id_get+0x16e>
   15942:	6858      	ldr	r0, [r3, #4]
   15944:	1c43      	adds	r3, r0, #1
   15946:	f47f ae8c 	bne.w	15662 <pdn_interface_pdn_id_get+0x96>
   1594a:	4dc6      	ldr	r5, [pc, #792]	; (15c64 <pdn_interface_pdn_id_get+0x698>)
   1594c:	4ac6      	ldr	r2, [pc, #792]	; (15c68 <pdn_interface_pdn_id_get+0x69c>)
   1594e:	f44f 7180 	mov.w	r1, #256	; 0x100
   15952:	4628      	mov	r0, r5
   15954:	f7f9 fb28 	bl	efa8 <snprintf>
   15958:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   1595c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   15960:	681b      	ldr	r3, [r3, #0]
   15962:	4ac2      	ldr	r2, [pc, #776]	; (15c6c <pdn_interface_pdn_id_get+0x6a0>)
   15964:	4428      	add	r0, r5
   15966:	f8df 830c 	ldr.w	r8, [pc, #780]	; 15c74 <pdn_interface_pdn_id_get+0x6a8>
   1596a:	f7f9 fb1d 	bl	efa8 <snprintf>
   1596e:	4628      	mov	r0, r5
   15970:	f8d8 9000 	ldr.w	r9, [r8]
   15974:	2700      	movs	r7, #0
   15976:	f006 f996 	bl	1bca6 <strlen>
   1597a:	4629      	mov	r1, r5
   1597c:	4602      	mov	r2, r0
   1597e:	463b      	mov	r3, r7
   15980:	4648      	mov	r0, r9
   15982:	9701      	str	r7, [sp, #4]
   15984:	9700      	str	r7, [sp, #0]
   15986:	f7fc f9a1 	bl	11ccc <at_interface_write>
   1598a:	4681      	mov	r9, r0
   1598c:	4628      	mov	r0, r5
   1598e:	f006 f98a 	bl	1bca6 <strlen>
   15992:	4548      	cmp	r0, r9
   15994:	f040 81e9 	bne.w	15d6a <pdn_interface_pdn_id_get+0x79e>
   15998:	463b      	mov	r3, r7
   1599a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1599e:	e9cd 7700 	strd	r7, r7, [sp]
   159a2:	4629      	mov	r1, r5
   159a4:	f8d8 0000 	ldr.w	r0, [r8]
   159a8:	f7fc fa78 	bl	11e9c <at_interface_read>
   159ac:	4607      	mov	r7, r0
   159ae:	48b0      	ldr	r0, [pc, #704]	; (15c70 <pdn_interface_pdn_id_get+0x6a4>)
   159b0:	f006 f979 	bl	1bca6 <strlen>
   159b4:	4287      	cmp	r7, r0
   159b6:	4602      	mov	r2, r0
   159b8:	f2c0 81c7 	blt.w	15d4a <pdn_interface_pdn_id_get+0x77e>
   159bc:	4629      	mov	r1, r5
   159be:	48ac      	ldr	r0, [pc, #688]	; (15c70 <pdn_interface_pdn_id_get+0x6a4>)
   159c0:	f006 f984 	bl	1bccc <strncmp>
   159c4:	2800      	cmp	r0, #0
   159c6:	f040 81c0 	bne.w	15d4a <pdn_interface_pdn_id_get+0x77e>
   159ca:	4629      	mov	r1, r5
   159cc:	4630      	mov	r0, r6
   159ce:	f7ff f92b 	bl	14c28 <pdn_id_get_parser>
   159d2:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   159d6:	6858      	ldr	r0, [r3, #4]
   159d8:	e643      	b.n	15662 <pdn_interface_pdn_id_get+0x96>
   159da:	4628      	mov	r0, r5
   159dc:	f006 f963 	bl	1bca6 <strlen>
   159e0:	4606      	mov	r6, r0
   159e2:	6920      	ldr	r0, [r4, #16]
   159e4:	300c      	adds	r0, #12
   159e6:	f006 f95e 	bl	1bca6 <strlen>
   159ea:	4286      	cmp	r6, r0
   159ec:	f47f aeab 	bne.w	15746 <pdn_interface_pdn_id_get+0x17a>
   159f0:	6921      	ldr	r1, [r4, #16]
   159f2:	4628      	mov	r0, r5
   159f4:	310c      	adds	r1, #12
   159f6:	f006 f95d 	bl	1bcb4 <strcmp>
   159fa:	2800      	cmp	r0, #0
   159fc:	f47f aea3 	bne.w	15746 <pdn_interface_pdn_id_get+0x17a>
   15a00:	6923      	ldr	r3, [r4, #16]
   15a02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15a04:	07d2      	lsls	r2, r2, #31
   15a06:	f57f ae9e 	bpl.w	15746 <pdn_interface_pdn_id_get+0x17a>
   15a0a:	2604      	movs	r6, #4
   15a0c:	e799      	b.n	15942 <pdn_interface_pdn_id_get+0x376>
   15a0e:	4628      	mov	r0, r5
   15a10:	f006 f949 	bl	1bca6 <strlen>
   15a14:	4606      	mov	r6, r0
   15a16:	6960      	ldr	r0, [r4, #20]
   15a18:	300c      	adds	r0, #12
   15a1a:	f006 f944 	bl	1bca6 <strlen>
   15a1e:	4286      	cmp	r6, r0
   15a20:	f47f ae97 	bne.w	15752 <pdn_interface_pdn_id_get+0x186>
   15a24:	6961      	ldr	r1, [r4, #20]
   15a26:	4628      	mov	r0, r5
   15a28:	310c      	adds	r1, #12
   15a2a:	f006 f943 	bl	1bcb4 <strcmp>
   15a2e:	2800      	cmp	r0, #0
   15a30:	f47f ae8f 	bne.w	15752 <pdn_interface_pdn_id_get+0x186>
   15a34:	6963      	ldr	r3, [r4, #20]
   15a36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15a38:	07d7      	lsls	r7, r2, #31
   15a3a:	f57f ae8a 	bpl.w	15752 <pdn_interface_pdn_id_get+0x186>
   15a3e:	2605      	movs	r6, #5
   15a40:	e77f      	b.n	15942 <pdn_interface_pdn_id_get+0x376>
   15a42:	4628      	mov	r0, r5
   15a44:	f006 f92f 	bl	1bca6 <strlen>
   15a48:	4606      	mov	r6, r0
   15a4a:	69a0      	ldr	r0, [r4, #24]
   15a4c:	300c      	adds	r0, #12
   15a4e:	f006 f92a 	bl	1bca6 <strlen>
   15a52:	4286      	cmp	r6, r0
   15a54:	f47f ae83 	bne.w	1575e <pdn_interface_pdn_id_get+0x192>
   15a58:	69a1      	ldr	r1, [r4, #24]
   15a5a:	4628      	mov	r0, r5
   15a5c:	310c      	adds	r1, #12
   15a5e:	f006 f929 	bl	1bcb4 <strcmp>
   15a62:	2800      	cmp	r0, #0
   15a64:	f47f ae7b 	bne.w	1575e <pdn_interface_pdn_id_get+0x192>
   15a68:	69a3      	ldr	r3, [r4, #24]
   15a6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15a6c:	07d6      	lsls	r6, r2, #31
   15a6e:	f57f ae76 	bpl.w	1575e <pdn_interface_pdn_id_get+0x192>
   15a72:	2606      	movs	r6, #6
   15a74:	e765      	b.n	15942 <pdn_interface_pdn_id_get+0x376>
   15a76:	4628      	mov	r0, r5
   15a78:	f006 f915 	bl	1bca6 <strlen>
   15a7c:	4607      	mov	r7, r0
   15a7e:	68e0      	ldr	r0, [r4, #12]
   15a80:	300c      	adds	r0, #12
   15a82:	f006 f910 	bl	1bca6 <strlen>
   15a86:	4287      	cmp	r7, r0
   15a88:	f47f ae05 	bne.w	15696 <pdn_interface_pdn_id_get+0xca>
   15a8c:	68e1      	ldr	r1, [r4, #12]
   15a8e:	4628      	mov	r0, r5
   15a90:	310c      	adds	r1, #12
   15a92:	f006 f90f 	bl	1bcb4 <strcmp>
   15a96:	2800      	cmp	r0, #0
   15a98:	f47f adfd 	bne.w	15696 <pdn_interface_pdn_id_get+0xca>
   15a9c:	68e3      	ldr	r3, [r4, #12]
   15a9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15aa0:	0791      	lsls	r1, r2, #30
   15aa2:	f53f af4e 	bmi.w	15942 <pdn_interface_pdn_id_get+0x376>
   15aa6:	e5f6      	b.n	15696 <pdn_interface_pdn_id_get+0xca>
   15aa8:	4628      	mov	r0, r5
   15aaa:	f006 f8fc 	bl	1bca6 <strlen>
   15aae:	4606      	mov	r6, r0
   15ab0:	6920      	ldr	r0, [r4, #16]
   15ab2:	300c      	adds	r0, #12
   15ab4:	f006 f8f7 	bl	1bca6 <strlen>
   15ab8:	4286      	cmp	r6, r0
   15aba:	f47f adf2 	bne.w	156a2 <pdn_interface_pdn_id_get+0xd6>
   15abe:	6921      	ldr	r1, [r4, #16]
   15ac0:	4628      	mov	r0, r5
   15ac2:	310c      	adds	r1, #12
   15ac4:	f006 f8f6 	bl	1bcb4 <strcmp>
   15ac8:	2800      	cmp	r0, #0
   15aca:	f47f adea 	bne.w	156a2 <pdn_interface_pdn_id_get+0xd6>
   15ace:	6923      	ldr	r3, [r4, #16]
   15ad0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15ad2:	0792      	lsls	r2, r2, #30
   15ad4:	d499      	bmi.n	15a0a <pdn_interface_pdn_id_get+0x43e>
   15ad6:	e5e4      	b.n	156a2 <pdn_interface_pdn_id_get+0xd6>
   15ad8:	4628      	mov	r0, r5
   15ada:	f006 f8e4 	bl	1bca6 <strlen>
   15ade:	4606      	mov	r6, r0
   15ae0:	6960      	ldr	r0, [r4, #20]
   15ae2:	300c      	adds	r0, #12
   15ae4:	f006 f8df 	bl	1bca6 <strlen>
   15ae8:	4286      	cmp	r6, r0
   15aea:	f47f ade0 	bne.w	156ae <pdn_interface_pdn_id_get+0xe2>
   15aee:	6961      	ldr	r1, [r4, #20]
   15af0:	4628      	mov	r0, r5
   15af2:	310c      	adds	r1, #12
   15af4:	f006 f8de 	bl	1bcb4 <strcmp>
   15af8:	2800      	cmp	r0, #0
   15afa:	f47f add8 	bne.w	156ae <pdn_interface_pdn_id_get+0xe2>
   15afe:	6963      	ldr	r3, [r4, #20]
   15b00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15b02:	0797      	lsls	r7, r2, #30
   15b04:	d49b      	bmi.n	15a3e <pdn_interface_pdn_id_get+0x472>
   15b06:	e5d2      	b.n	156ae <pdn_interface_pdn_id_get+0xe2>
   15b08:	4628      	mov	r0, r5
   15b0a:	f006 f8cc 	bl	1bca6 <strlen>
   15b0e:	4606      	mov	r6, r0
   15b10:	69a0      	ldr	r0, [r4, #24]
   15b12:	300c      	adds	r0, #12
   15b14:	f006 f8c7 	bl	1bca6 <strlen>
   15b18:	4286      	cmp	r6, r0
   15b1a:	f47f adce 	bne.w	156ba <pdn_interface_pdn_id_get+0xee>
   15b1e:	69a1      	ldr	r1, [r4, #24]
   15b20:	4628      	mov	r0, r5
   15b22:	310c      	adds	r1, #12
   15b24:	f006 f8c6 	bl	1bcb4 <strcmp>
   15b28:	2800      	cmp	r0, #0
   15b2a:	f47f adc6 	bne.w	156ba <pdn_interface_pdn_id_get+0xee>
   15b2e:	69a3      	ldr	r3, [r4, #24]
   15b30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15b32:	0796      	lsls	r6, r2, #30
   15b34:	d49d      	bmi.n	15a72 <pdn_interface_pdn_id_get+0x4a6>
   15b36:	e5c0      	b.n	156ba <pdn_interface_pdn_id_get+0xee>
   15b38:	4628      	mov	r0, r5
   15b3a:	f006 f8b4 	bl	1bca6 <strlen>
   15b3e:	4606      	mov	r6, r0
   15b40:	69e0      	ldr	r0, [r4, #28]
   15b42:	300c      	adds	r0, #12
   15b44:	f006 f8af 	bl	1bca6 <strlen>
   15b48:	4286      	cmp	r6, r0
   15b4a:	f47f adbc 	bne.w	156c6 <pdn_interface_pdn_id_get+0xfa>
   15b4e:	69e1      	ldr	r1, [r4, #28]
   15b50:	4628      	mov	r0, r5
   15b52:	310c      	adds	r1, #12
   15b54:	f006 f8ae 	bl	1bcb4 <strcmp>
   15b58:	2800      	cmp	r0, #0
   15b5a:	f47f adb4 	bne.w	156c6 <pdn_interface_pdn_id_get+0xfa>
   15b5e:	69e3      	ldr	r3, [r4, #28]
   15b60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15b62:	0790      	lsls	r0, r2, #30
   15b64:	f57f adaf 	bpl.w	156c6 <pdn_interface_pdn_id_get+0xfa>
   15b68:	2607      	movs	r6, #7
   15b6a:	e6ea      	b.n	15942 <pdn_interface_pdn_id_get+0x376>
   15b6c:	4628      	mov	r0, r5
   15b6e:	f006 f89a 	bl	1bca6 <strlen>
   15b72:	4606      	mov	r6, r0
   15b74:	6a20      	ldr	r0, [r4, #32]
   15b76:	300c      	adds	r0, #12
   15b78:	f006 f895 	bl	1bca6 <strlen>
   15b7c:	4286      	cmp	r6, r0
   15b7e:	f47f ada8 	bne.w	156d2 <pdn_interface_pdn_id_get+0x106>
   15b82:	6a21      	ldr	r1, [r4, #32]
   15b84:	4628      	mov	r0, r5
   15b86:	310c      	adds	r1, #12
   15b88:	f006 f894 	bl	1bcb4 <strcmp>
   15b8c:	2800      	cmp	r0, #0
   15b8e:	f47f ada0 	bne.w	156d2 <pdn_interface_pdn_id_get+0x106>
   15b92:	6a23      	ldr	r3, [r4, #32]
   15b94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15b96:	0791      	lsls	r1, r2, #30
   15b98:	f57f ad9b 	bpl.w	156d2 <pdn_interface_pdn_id_get+0x106>
   15b9c:	2608      	movs	r6, #8
   15b9e:	e6d0      	b.n	15942 <pdn_interface_pdn_id_get+0x376>
   15ba0:	4628      	mov	r0, r5
   15ba2:	f006 f880 	bl	1bca6 <strlen>
   15ba6:	4606      	mov	r6, r0
   15ba8:	69e0      	ldr	r0, [r4, #28]
   15baa:	300c      	adds	r0, #12
   15bac:	f006 f87b 	bl	1bca6 <strlen>
   15bb0:	4286      	cmp	r6, r0
   15bb2:	f47f adda 	bne.w	1576a <pdn_interface_pdn_id_get+0x19e>
   15bb6:	69e1      	ldr	r1, [r4, #28]
   15bb8:	4628      	mov	r0, r5
   15bba:	310c      	adds	r1, #12
   15bbc:	f006 f87a 	bl	1bcb4 <strcmp>
   15bc0:	2800      	cmp	r0, #0
   15bc2:	f47f add2 	bne.w	1576a <pdn_interface_pdn_id_get+0x19e>
   15bc6:	69e3      	ldr	r3, [r4, #28]
   15bc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15bca:	07d0      	lsls	r0, r2, #31
   15bcc:	d4cc      	bmi.n	15b68 <pdn_interface_pdn_id_get+0x59c>
   15bce:	e5cc      	b.n	1576a <pdn_interface_pdn_id_get+0x19e>
   15bd0:	4628      	mov	r0, r5
   15bd2:	f006 f868 	bl	1bca6 <strlen>
   15bd6:	4606      	mov	r6, r0
   15bd8:	6a20      	ldr	r0, [r4, #32]
   15bda:	300c      	adds	r0, #12
   15bdc:	f006 f863 	bl	1bca6 <strlen>
   15be0:	4286      	cmp	r6, r0
   15be2:	f47f adc8 	bne.w	15776 <pdn_interface_pdn_id_get+0x1aa>
   15be6:	6a21      	ldr	r1, [r4, #32]
   15be8:	4628      	mov	r0, r5
   15bea:	310c      	adds	r1, #12
   15bec:	f006 f862 	bl	1bcb4 <strcmp>
   15bf0:	2800      	cmp	r0, #0
   15bf2:	f47f adc0 	bne.w	15776 <pdn_interface_pdn_id_get+0x1aa>
   15bf6:	6a23      	ldr	r3, [r4, #32]
   15bf8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15bfa:	07d1      	lsls	r1, r2, #31
   15bfc:	d4ce      	bmi.n	15b9c <pdn_interface_pdn_id_get+0x5d0>
   15bfe:	e5ba      	b.n	15776 <pdn_interface_pdn_id_get+0x1aa>
   15c00:	4628      	mov	r0, r5
   15c02:	f006 f850 	bl	1bca6 <strlen>
   15c06:	4606      	mov	r6, r0
   15c08:	68a0      	ldr	r0, [r4, #8]
   15c0a:	300c      	adds	r0, #12
   15c0c:	f006 f84b 	bl	1bca6 <strlen>
   15c10:	4286      	cmp	r6, r0
   15c12:	f47f ad8c 	bne.w	1572e <pdn_interface_pdn_id_get+0x162>
   15c16:	68a1      	ldr	r1, [r4, #8]
   15c18:	4628      	mov	r0, r5
   15c1a:	310c      	adds	r1, #12
   15c1c:	f006 f84a 	bl	1bcb4 <strcmp>
   15c20:	2800      	cmp	r0, #0
   15c22:	f47f ad84 	bne.w	1572e <pdn_interface_pdn_id_get+0x162>
   15c26:	68a3      	ldr	r3, [r4, #8]
   15c28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15c2a:	07d0      	lsls	r0, r2, #31
   15c2c:	f57f ad7f 	bpl.w	1572e <pdn_interface_pdn_id_get+0x162>
   15c30:	2602      	movs	r6, #2
   15c32:	e686      	b.n	15942 <pdn_interface_pdn_id_get+0x376>
   15c34:	4628      	mov	r0, r5
   15c36:	f006 f836 	bl	1bca6 <strlen>
   15c3a:	4606      	mov	r6, r0
   15c3c:	68a0      	ldr	r0, [r4, #8]
   15c3e:	300c      	adds	r0, #12
   15c40:	f006 f831 	bl	1bca6 <strlen>
   15c44:	4286      	cmp	r6, r0
   15c46:	f47f ad20 	bne.w	1568a <pdn_interface_pdn_id_get+0xbe>
   15c4a:	68a1      	ldr	r1, [r4, #8]
   15c4c:	4628      	mov	r0, r5
   15c4e:	310c      	adds	r1, #12
   15c50:	f006 f830 	bl	1bcb4 <strcmp>
   15c54:	2800      	cmp	r0, #0
   15c56:	f47f ad18 	bne.w	1568a <pdn_interface_pdn_id_get+0xbe>
   15c5a:	68a3      	ldr	r3, [r4, #8]
   15c5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15c5e:	0790      	lsls	r0, r2, #30
   15c60:	d4e6      	bmi.n	15c30 <pdn_interface_pdn_id_get+0x664>
   15c62:	e512      	b.n	1568a <pdn_interface_pdn_id_get+0xbe>
   15c64:	200210b0 	.word	0x200210b0
   15c68:	0001e590 	.word	0x0001e590
   15c6c:	0001e58c 	.word	0x0001e58c
   15c70:	0001e5a0 	.word	0x0001e5a0
   15c74:	200210ac 	.word	0x200210ac
   15c78:	4628      	mov	r0, r5
   15c7a:	f006 f814 	bl	1bca6 <strlen>
   15c7e:	4606      	mov	r6, r0
   15c80:	6860      	ldr	r0, [r4, #4]
   15c82:	300c      	adds	r0, #12
   15c84:	f006 f80f 	bl	1bca6 <strlen>
   15c88:	4286      	cmp	r6, r0
   15c8a:	f47f acf8 	bne.w	1567e <pdn_interface_pdn_id_get+0xb2>
   15c8e:	6861      	ldr	r1, [r4, #4]
   15c90:	4628      	mov	r0, r5
   15c92:	310c      	adds	r1, #12
   15c94:	f006 f80e 	bl	1bcb4 <strcmp>
   15c98:	2800      	cmp	r0, #0
   15c9a:	f47f acf0 	bne.w	1567e <pdn_interface_pdn_id_get+0xb2>
   15c9e:	6863      	ldr	r3, [r4, #4]
   15ca0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15ca2:	0796      	lsls	r6, r2, #30
   15ca4:	f57f aceb 	bpl.w	1567e <pdn_interface_pdn_id_get+0xb2>
   15ca8:	2601      	movs	r6, #1
   15caa:	e64a      	b.n	15942 <pdn_interface_pdn_id_get+0x376>
   15cac:	4628      	mov	r0, r5
   15cae:	f005 fffa 	bl	1bca6 <strlen>
   15cb2:	4606      	mov	r6, r0
   15cb4:	6860      	ldr	r0, [r4, #4]
   15cb6:	300c      	adds	r0, #12
   15cb8:	f005 fff5 	bl	1bca6 <strlen>
   15cbc:	4286      	cmp	r6, r0
   15cbe:	f47f ad30 	bne.w	15722 <pdn_interface_pdn_id_get+0x156>
   15cc2:	6861      	ldr	r1, [r4, #4]
   15cc4:	4628      	mov	r0, r5
   15cc6:	310c      	adds	r1, #12
   15cc8:	f005 fff4 	bl	1bcb4 <strcmp>
   15ccc:	2800      	cmp	r0, #0
   15cce:	f47f ad28 	bne.w	15722 <pdn_interface_pdn_id_get+0x156>
   15cd2:	6863      	ldr	r3, [r4, #4]
   15cd4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15cd6:	07d6      	lsls	r6, r2, #31
   15cd8:	d4e6      	bmi.n	15ca8 <pdn_interface_pdn_id_get+0x6dc>
   15cda:	e522      	b.n	15722 <pdn_interface_pdn_id_get+0x156>
   15cdc:	4608      	mov	r0, r1
   15cde:	f005 ffe2 	bl	1bca6 <strlen>
   15ce2:	4606      	mov	r6, r0
   15ce4:	6820      	ldr	r0, [r4, #0]
   15ce6:	300c      	adds	r0, #12
   15ce8:	f005 ffdd 	bl	1bca6 <strlen>
   15cec:	4286      	cmp	r6, r0
   15cee:	f47f acc0 	bne.w	15672 <pdn_interface_pdn_id_get+0xa6>
   15cf2:	6821      	ldr	r1, [r4, #0]
   15cf4:	4628      	mov	r0, r5
   15cf6:	310c      	adds	r1, #12
   15cf8:	f005 ffdc 	bl	1bcb4 <strcmp>
   15cfc:	4606      	mov	r6, r0
   15cfe:	2800      	cmp	r0, #0
   15d00:	f47f acb7 	bne.w	15672 <pdn_interface_pdn_id_get+0xa6>
   15d04:	6823      	ldr	r3, [r4, #0]
   15d06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15d08:	0797      	lsls	r7, r2, #30
   15d0a:	f53f ae1a 	bmi.w	15942 <pdn_interface_pdn_id_get+0x376>
   15d0e:	e4b0      	b.n	15672 <pdn_interface_pdn_id_get+0xa6>
   15d10:	4608      	mov	r0, r1
   15d12:	f005 ffc8 	bl	1bca6 <strlen>
   15d16:	4606      	mov	r6, r0
   15d18:	6820      	ldr	r0, [r4, #0]
   15d1a:	300c      	adds	r0, #12
   15d1c:	f005 ffc3 	bl	1bca6 <strlen>
   15d20:	4286      	cmp	r6, r0
   15d22:	f47f acf8 	bne.w	15716 <pdn_interface_pdn_id_get+0x14a>
   15d26:	6821      	ldr	r1, [r4, #0]
   15d28:	4628      	mov	r0, r5
   15d2a:	310c      	adds	r1, #12
   15d2c:	f005 ffc2 	bl	1bcb4 <strcmp>
   15d30:	4606      	mov	r6, r0
   15d32:	2800      	cmp	r0, #0
   15d34:	f47f acef 	bne.w	15716 <pdn_interface_pdn_id_get+0x14a>
   15d38:	6823      	ldr	r3, [r4, #0]
   15d3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15d3c:	07d7      	lsls	r7, r2, #31
   15d3e:	f53f ae00 	bmi.w	15942 <pdn_interface_pdn_id_get+0x376>
   15d42:	e4e8      	b.n	15716 <pdn_interface_pdn_id_get+0x14a>
   15d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15d48:	4770      	bx	lr
   15d4a:	480b      	ldr	r0, [pc, #44]	; (15d78 <pdn_interface_pdn_id_get+0x7ac>)
   15d4c:	f005 ffab 	bl	1bca6 <strlen>
   15d50:	490a      	ldr	r1, [pc, #40]	; (15d7c <pdn_interface_pdn_id_get+0x7b0>)
   15d52:	4602      	mov	r2, r0
   15d54:	4808      	ldr	r0, [pc, #32]	; (15d78 <pdn_interface_pdn_id_get+0x7ac>)
   15d56:	f005 ffb9 	bl	1bccc <strncmp>
   15d5a:	b930      	cbnz	r0, 15d6a <pdn_interface_pdn_id_get+0x79e>
   15d5c:	2008      	movs	r0, #8
   15d5e:	f7f9 fe8d 	bl	fa7c <bsd_os_errno_set>
   15d62:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   15d66:	6858      	ldr	r0, [r3, #4]
   15d68:	e47b      	b.n	15662 <pdn_interface_pdn_id_get+0x96>
   15d6a:	2005      	movs	r0, #5
   15d6c:	f7f9 fe86 	bl	fa7c <bsd_os_errno_set>
   15d70:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   15d74:	6858      	ldr	r0, [r3, #4]
   15d76:	e474      	b.n	15662 <pdn_interface_pdn_id_get+0x96>
   15d78:	0001e5e4 	.word	0x0001e5e4
   15d7c:	200210b0 	.word	0x200210b0

00015d80 <linked_list_init>:
   15d80:	b128      	cbz	r0, 15d8e <linked_list_init+0xe>
   15d82:	2300      	movs	r3, #0
   15d84:	6003      	str	r3, [r0, #0]
   15d86:	e9c0 3301 	strd	r3, r3, [r0, #4]
   15d8a:	4618      	mov	r0, r3
   15d8c:	4770      	bx	lr
   15d8e:	2007      	movs	r0, #7
   15d90:	4770      	bx	lr
   15d92:	bf00      	nop

00015d94 <linked_list_push>:
   15d94:	6802      	ldr	r2, [r0, #0]
   15d96:	4603      	mov	r3, r0
   15d98:	3201      	adds	r2, #1
   15d9a:	d00e      	beq.n	15dba <linked_list_push+0x26>
   15d9c:	2200      	movs	r2, #0
   15d9e:	600a      	str	r2, [r1, #0]
   15da0:	6802      	ldr	r2, [r0, #0]
   15da2:	b13a      	cbz	r2, 15db4 <linked_list_push+0x20>
   15da4:	6882      	ldr	r2, [r0, #8]
   15da6:	6011      	str	r1, [r2, #0]
   15da8:	6081      	str	r1, [r0, #8]
   15daa:	681a      	ldr	r2, [r3, #0]
   15dac:	2000      	movs	r0, #0
   15dae:	3201      	adds	r2, #1
   15db0:	601a      	str	r2, [r3, #0]
   15db2:	4770      	bx	lr
   15db4:	e9c0 1101 	strd	r1, r1, [r0, #4]
   15db8:	e7f7      	b.n	15daa <linked_list_push+0x16>
   15dba:	2004      	movs	r0, #4
   15dbc:	4770      	bx	lr
   15dbe:	bf00      	nop

00015dc0 <linked_list_pop>:
   15dc0:	4603      	mov	r3, r0
   15dc2:	6800      	ldr	r0, [r0, #0]
   15dc4:	b128      	cbz	r0, 15dd2 <linked_list_pop+0x12>
   15dc6:	6858      	ldr	r0, [r3, #4]
   15dc8:	681a      	ldr	r2, [r3, #0]
   15dca:	6801      	ldr	r1, [r0, #0]
   15dcc:	3a01      	subs	r2, #1
   15dce:	6059      	str	r1, [r3, #4]
   15dd0:	601a      	str	r2, [r3, #0]
   15dd2:	4770      	bx	lr

00015dd4 <linked_list_peek>:
   15dd4:	6803      	ldr	r3, [r0, #0]
   15dd6:	b10b      	cbz	r3, 15ddc <linked_list_peek+0x8>
   15dd8:	6840      	ldr	r0, [r0, #4]
   15dda:	4770      	bx	lr
   15ddc:	4618      	mov	r0, r3
   15dde:	4770      	bx	lr

00015de0 <linked_list_size_get>:
   15de0:	6800      	ldr	r0, [r0, #0]
   15de2:	4770      	bx	lr

00015de4 <linked_list_get_next>:
   15de4:	6800      	ldr	r0, [r0, #0]
   15de6:	4770      	bx	lr

00015de8 <nrf_socket>:
   15de8:	b570      	push	{r4, r5, r6, lr}
   15dea:	4604      	mov	r4, r0
   15dec:	460d      	mov	r5, r1
   15dee:	4616      	mov	r6, r2
   15df0:	f7fd fdb2 	bl	13958 <bsd_platform_af_method_table_get>
   15df4:	b130      	cbz	r0, 15e04 <nrf_socket+0x1c>
   15df6:	6803      	ldr	r3, [r0, #0]
   15df8:	4632      	mov	r2, r6
   15dfa:	4629      	mov	r1, r5
   15dfc:	4620      	mov	r0, r4
   15dfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15e02:	4718      	bx	r3
   15e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15e08:	bd70      	pop	{r4, r5, r6, pc}
   15e0a:	bf00      	nop

00015e0c <nrf_close>:
   15e0c:	b510      	push	{r4, lr}
   15e0e:	4604      	mov	r4, r0
   15e10:	f7fd fdf6 	bl	13a00 <bsd_platform_fd_method_table_get>
   15e14:	b120      	cbz	r0, 15e20 <nrf_close+0x14>
   15e16:	6843      	ldr	r3, [r0, #4]
   15e18:	4620      	mov	r0, r4
   15e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15e1e:	4718      	bx	r3
   15e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15e24:	bd10      	pop	{r4, pc}
   15e26:	bf00      	nop

00015e28 <nrf_sendto>:
   15e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15e2c:	460d      	mov	r5, r1
   15e2e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   15e32:	4616      	mov	r6, r2
   15e34:	461f      	mov	r7, r3
   15e36:	4604      	mov	r4, r0
   15e38:	f7fd fde2 	bl	13a00 <bsd_platform_fd_method_table_get>
   15e3c:	b158      	cbz	r0, 15e56 <nrf_sendto+0x2e>
   15e3e:	e9cd 8908 	strd	r8, r9, [sp, #32]
   15e42:	f8d0 e008 	ldr.w	lr, [r0, #8]
   15e46:	463b      	mov	r3, r7
   15e48:	4632      	mov	r2, r6
   15e4a:	4629      	mov	r1, r5
   15e4c:	4620      	mov	r0, r4
   15e4e:	46f4      	mov	ip, lr
   15e50:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15e54:	4760      	bx	ip
   15e56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15e5e:	bf00      	nop

00015e60 <nrf_send>:
   15e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15e64:	b082      	sub	sp, #8
   15e66:	460e      	mov	r6, r1
   15e68:	4617      	mov	r7, r2
   15e6a:	4698      	mov	r8, r3
   15e6c:	4605      	mov	r5, r0
   15e6e:	f7fd fdc7 	bl	13a00 <bsd_platform_fd_method_table_get>
   15e72:	b160      	cbz	r0, 15e8e <nrf_send+0x2e>
   15e74:	4604      	mov	r4, r0
   15e76:	2000      	movs	r0, #0
   15e78:	e9cd 0000 	strd	r0, r0, [sp]
   15e7c:	4643      	mov	r3, r8
   15e7e:	463a      	mov	r2, r7
   15e80:	4631      	mov	r1, r6
   15e82:	4628      	mov	r0, r5
   15e84:	68a4      	ldr	r4, [r4, #8]
   15e86:	47a0      	blx	r4
   15e88:	b002      	add	sp, #8
   15e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15e8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15e92:	e7f9      	b.n	15e88 <nrf_send+0x28>

00015e94 <nrf_recvfrom>:
   15e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15e98:	460d      	mov	r5, r1
   15e9a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   15e9e:	4616      	mov	r6, r2
   15ea0:	461f      	mov	r7, r3
   15ea2:	4604      	mov	r4, r0
   15ea4:	f7fd fdac 	bl	13a00 <bsd_platform_fd_method_table_get>
   15ea8:	b158      	cbz	r0, 15ec2 <nrf_recvfrom+0x2e>
   15eaa:	e9cd 8908 	strd	r8, r9, [sp, #32]
   15eae:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   15eb2:	463b      	mov	r3, r7
   15eb4:	4632      	mov	r2, r6
   15eb6:	4629      	mov	r1, r5
   15eb8:	4620      	mov	r0, r4
   15eba:	46f4      	mov	ip, lr
   15ebc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15ec0:	4760      	bx	ip
   15ec2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15eca:	bf00      	nop

00015ecc <nrf_recv>:
   15ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15ed0:	b082      	sub	sp, #8
   15ed2:	460e      	mov	r6, r1
   15ed4:	4617      	mov	r7, r2
   15ed6:	4698      	mov	r8, r3
   15ed8:	4605      	mov	r5, r0
   15eda:	f7fd fd91 	bl	13a00 <bsd_platform_fd_method_table_get>
   15ede:	b160      	cbz	r0, 15efa <nrf_recv+0x2e>
   15ee0:	4604      	mov	r4, r0
   15ee2:	2000      	movs	r0, #0
   15ee4:	e9cd 0000 	strd	r0, r0, [sp]
   15ee8:	4643      	mov	r3, r8
   15eea:	463a      	mov	r2, r7
   15eec:	4631      	mov	r1, r6
   15eee:	4628      	mov	r0, r5
   15ef0:	68e4      	ldr	r4, [r4, #12]
   15ef2:	47a0      	blx	r4
   15ef4:	b002      	add	sp, #8
   15ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15efa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15efe:	e7f9      	b.n	15ef4 <nrf_recv+0x28>

00015f00 <nrf_connect>:
   15f00:	b570      	push	{r4, r5, r6, lr}
   15f02:	460d      	mov	r5, r1
   15f04:	4616      	mov	r6, r2
   15f06:	4604      	mov	r4, r0
   15f08:	f7fd fd7a 	bl	13a00 <bsd_platform_fd_method_table_get>
   15f0c:	b130      	cbz	r0, 15f1c <nrf_connect+0x1c>
   15f0e:	6943      	ldr	r3, [r0, #20]
   15f10:	4632      	mov	r2, r6
   15f12:	4629      	mov	r1, r5
   15f14:	4620      	mov	r0, r4
   15f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15f1a:	4718      	bx	r3
   15f1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15f20:	bd70      	pop	{r4, r5, r6, pc}
   15f22:	bf00      	nop

00015f24 <nrf_listen>:
   15f24:	b570      	push	{r4, r5, r6, lr}
   15f26:	460d      	mov	r5, r1
   15f28:	4604      	mov	r4, r0
   15f2a:	f7fd fd69 	bl	13a00 <bsd_platform_fd_method_table_get>
   15f2e:	b128      	cbz	r0, 15f3c <nrf_listen+0x18>
   15f30:	6983      	ldr	r3, [r0, #24]
   15f32:	4629      	mov	r1, r5
   15f34:	4620      	mov	r0, r4
   15f36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15f3a:	4718      	bx	r3
   15f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15f40:	bd70      	pop	{r4, r5, r6, pc}
   15f42:	bf00      	nop

00015f44 <nrf_accept>:
   15f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15f48:	460d      	mov	r5, r1
   15f4a:	4616      	mov	r6, r2
   15f4c:	4604      	mov	r4, r0
   15f4e:	f7fd fd57 	bl	13a00 <bsd_platform_fd_method_table_get>
   15f52:	b140      	cbz	r0, 15f66 <nrf_accept+0x22>
   15f54:	69c7      	ldr	r7, [r0, #28]
   15f56:	4632      	mov	r2, r6
   15f58:	4629      	mov	r1, r5
   15f5a:	4620      	mov	r0, r4
   15f5c:	46bc      	mov	ip, r7
   15f5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15f62:	2300      	movs	r3, #0
   15f64:	4760      	bx	ip
   15f66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15f6e:	bf00      	nop

00015f70 <nrf_bind>:
   15f70:	b570      	push	{r4, r5, r6, lr}
   15f72:	460d      	mov	r5, r1
   15f74:	4616      	mov	r6, r2
   15f76:	4604      	mov	r4, r0
   15f78:	f7fd fd42 	bl	13a00 <bsd_platform_fd_method_table_get>
   15f7c:	b130      	cbz	r0, 15f8c <nrf_bind+0x1c>
   15f7e:	6903      	ldr	r3, [r0, #16]
   15f80:	4632      	mov	r2, r6
   15f82:	4629      	mov	r1, r5
   15f84:	4620      	mov	r0, r4
   15f86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15f8a:	4718      	bx	r3
   15f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15f90:	bd70      	pop	{r4, r5, r6, pc}
   15f92:	bf00      	nop

00015f94 <nrf_setsockopt>:
   15f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15f98:	f8dd 8018 	ldr.w	r8, [sp, #24]
   15f9c:	460d      	mov	r5, r1
   15f9e:	4616      	mov	r6, r2
   15fa0:	461f      	mov	r7, r3
   15fa2:	4604      	mov	r4, r0
   15fa4:	f7fd fd2c 	bl	13a00 <bsd_platform_fd_method_table_get>
   15fa8:	b158      	cbz	r0, 15fc2 <nrf_setsockopt+0x2e>
   15faa:	f8cd 8018 	str.w	r8, [sp, #24]
   15fae:	f8d0 e020 	ldr.w	lr, [r0, #32]
   15fb2:	463b      	mov	r3, r7
   15fb4:	4632      	mov	r2, r6
   15fb6:	4629      	mov	r1, r5
   15fb8:	4620      	mov	r0, r4
   15fba:	46f4      	mov	ip, lr
   15fbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15fc0:	4760      	bx	ip
   15fc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15fca:	bf00      	nop

00015fcc <nrf_getsockopt>:
   15fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15fd0:	f8dd 8018 	ldr.w	r8, [sp, #24]
   15fd4:	460d      	mov	r5, r1
   15fd6:	4616      	mov	r6, r2
   15fd8:	461f      	mov	r7, r3
   15fda:	4604      	mov	r4, r0
   15fdc:	f7fd fd10 	bl	13a00 <bsd_platform_fd_method_table_get>
   15fe0:	b158      	cbz	r0, 15ffa <nrf_getsockopt+0x2e>
   15fe2:	f8cd 8018 	str.w	r8, [sp, #24]
   15fe6:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   15fea:	463b      	mov	r3, r7
   15fec:	4632      	mov	r2, r6
   15fee:	4629      	mov	r1, r5
   15ff0:	4620      	mov	r0, r4
   15ff2:	46f4      	mov	ip, lr
   15ff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15ff8:	4760      	bx	ip
   15ffa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16002:	bf00      	nop

00016004 <nrf_getaddrinfo>:
   16004:	f7fd bd6c 	b.w	13ae0 <bsd_platform_getaddrinfo>

00016008 <nrf_freeaddrinfo>:
   16008:	f7fd bd6c 	b.w	13ae4 <bsd_platform_freeaddrinfo>

0001600c <nrf_poll>:
   1600c:	f7fd bd6c 	b.w	13ae8 <bsd_platform_poll>

00016010 <nrf_fcntl>:
   16010:	f7fd bdc4 	b.w	13b9c <bsd_platform_fcntl>

00016014 <at_client_evt_handler>:
   16014:	b120      	cbz	r0, 16020 <at_client_evt_handler+0xc>
   16016:	f850 1b08 	ldr.w	r1, [r0], #8
   1601a:	0c09      	lsrs	r1, r1, #16
   1601c:	f7fb bf9e 	b.w	11f5c <rpc_at_event_handler>
   16020:	4770      	bx	lr
   16022:	bf00      	nop

00016024 <rpc_at_client_init>:
   16024:	4801      	ldr	r0, [pc, #4]	; (1602c <rpc_at_client_init+0x8>)
   16026:	f001 bdbf 	b.w	17ba8 <rpc_client_register>
   1602a:	bf00      	nop
   1602c:	0001e5f8 	.word	0x0001e5f8

00016030 <rpc_at_client_request_alloc>:
   16030:	b180      	cbz	r0, 16054 <rpc_at_client_request_alloc+0x24>
   16032:	2300      	movs	r3, #0
   16034:	b510      	push	{r4, lr}
   16036:	b082      	sub	sp, #8
   16038:	aa02      	add	r2, sp, #8
   1603a:	4604      	mov	r4, r0
   1603c:	f842 3d04 	str.w	r3, [r2, #-4]!
   16040:	2003      	movs	r0, #3
   16042:	f001 ffe9 	bl	18018 <rpc_message_alloc>
   16046:	b918      	cbnz	r0, 16050 <rpc_at_client_request_alloc+0x20>
   16048:	9b01      	ldr	r3, [sp, #4]
   1604a:	b10b      	cbz	r3, 16050 <rpc_at_client_request_alloc+0x20>
   1604c:	3308      	adds	r3, #8
   1604e:	6023      	str	r3, [r4, #0]
   16050:	b002      	add	sp, #8
   16052:	bd10      	pop	{r4, pc}
   16054:	200e      	movs	r0, #14
   16056:	4770      	bx	lr

00016058 <rpc_at_client_request_send>:
   16058:	b150      	cbz	r0, 16070 <rpc_at_client_request_send+0x18>
   1605a:	4603      	mov	r3, r0
   1605c:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   16060:	2003      	movs	r0, #3
   16062:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   16066:	f843 1d08 	str.w	r1, [r3, #-8]!
   1606a:	4619      	mov	r1, r3
   1606c:	f001 bfbc 	b.w	17fe8 <rpc_message_send>
   16070:	200e      	movs	r0, #14
   16072:	4770      	bx	lr

00016074 <rpc_at_client_message_free>:
   16074:	b120      	cbz	r0, 16080 <rpc_at_client_message_free+0xc>
   16076:	f1a0 0108 	sub.w	r1, r0, #8
   1607a:	2003      	movs	r0, #3
   1607c:	f001 bffe 	b.w	1807c <rpc_message_free>
   16080:	200e      	movs	r0, #14
   16082:	4770      	bx	lr

00016084 <rpc_at_client_data_free>:
   16084:	b118      	cbz	r0, 1608e <rpc_at_client_data_free+0xa>
   16086:	4601      	mov	r1, r0
   16088:	2003      	movs	r0, #3
   1608a:	f002 b909 	b.w	182a0 <rpc_message_data_free>
   1608e:	200e      	movs	r0, #14
   16090:	4770      	bx	lr
   16092:	bf00      	nop

00016094 <ip_recvd_packet_free_cb>:
   16094:	b510      	push	{r4, lr}
   16096:	4604      	mov	r4, r0
   16098:	6800      	ldr	r0, [r0, #0]
   1609a:	f7fc fc1d 	bl	128d8 <rpc_ip_client_data_free>
   1609e:	68a0      	ldr	r0, [r4, #8]
   160a0:	b118      	cbz	r0, 160aa <ip_recvd_packet_free_cb+0x16>
   160a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   160a6:	f7fc bbb7 	b.w	12818 <nrf_free>
   160aa:	bd10      	pop	{r4, pc}

000160ac <rpc_error_to_nrf_bsd_error>:
   160ac:	2810      	cmp	r0, #16
   160ae:	bf9a      	itte	ls
   160b0:	4b02      	ldrls	r3, [pc, #8]	; (160bc <rpc_error_to_nrf_bsd_error+0x10>)
   160b2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   160b6:	202d      	movhi	r0, #45	; 0x2d
   160b8:	4770      	bx	lr
   160ba:	bf00      	nop
   160bc:	0001e608 	.word	0x0001e608

000160c0 <ip_interface_request_create>:
   160c0:	b570      	push	{r4, r5, r6, lr}
   160c2:	2500      	movs	r5, #0
   160c4:	b082      	sub	sp, #8
   160c6:	ac02      	add	r4, sp, #8
   160c8:	f844 5d04 	str.w	r5, [r4, #-4]!
   160cc:	4606      	mov	r6, r0
   160ce:	460d      	mov	r5, r1
   160d0:	4620      	mov	r0, r4
   160d2:	4619      	mov	r1, r3
   160d4:	4614      	mov	r4, r2
   160d6:	f7fc fbcd 	bl	12874 <rpc_ip_client_request_alloc>
   160da:	b960      	cbnz	r0, 160f6 <ip_interface_request_create+0x36>
   160dc:	9b01      	ldr	r3, [sp, #4]
   160de:	2208      	movs	r2, #8
   160e0:	7258      	strb	r0, [r3, #9]
   160e2:	7298      	strb	r0, [r3, #10]
   160e4:	72d8      	strb	r0, [r3, #11]
   160e6:	4618      	mov	r0, r3
   160e8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   160ec:	60dc      	str	r4, [r3, #12]
   160ee:	611d      	str	r5, [r3, #16]
   160f0:	721a      	strb	r2, [r3, #8]
   160f2:	b002      	add	sp, #8
   160f4:	bd70      	pop	{r4, r5, r6, pc}
   160f6:	9b01      	ldr	r3, [sp, #4]
   160f8:	4618      	mov	r0, r3
   160fa:	b002      	add	sp, #8
   160fc:	bd70      	pop	{r4, r5, r6, pc}
   160fe:	bf00      	nop

00016100 <ip_interface_request_send>:
   16100:	b570      	push	{r4, r5, r6, lr}
   16102:	460c      	mov	r4, r1
   16104:	4605      	mov	r5, r0
   16106:	4611      	mov	r1, r2
   16108:	4620      	mov	r0, r4
   1610a:	461e      	mov	r6, r3
   1610c:	f7fc fbc6 	bl	1289c <rpc_ip_client_request_send>
   16110:	b900      	cbnz	r0, 16114 <ip_interface_request_send+0x14>
   16112:	bd70      	pop	{r4, r5, r6, pc}
   16114:	6820      	ldr	r0, [r4, #0]
   16116:	b108      	cbz	r0, 1611c <ip_interface_request_send+0x1c>
   16118:	f7fc fbde 	bl	128d8 <rpc_ip_client_data_free>
   1611c:	4620      	mov	r0, r4
   1611e:	f7fc fbd3 	bl	128c8 <rpc_ip_client_message_free>
   16122:	602e      	str	r6, [r5, #0]
   16124:	2023      	movs	r0, #35	; 0x23
   16126:	bd70      	pop	{r4, r5, r6, pc}

00016128 <ip_interface_wait>:
   16128:	b538      	push	{r3, r4, r5, lr}
   1612a:	4605      	mov	r5, r0
   1612c:	f001 fb98 	bl	17860 <interface_socket_wait>
   16130:	4604      	mov	r4, r0
   16132:	b108      	cbz	r0, 16138 <ip_interface_wait+0x10>
   16134:	4620      	mov	r0, r4
   16136:	bd38      	pop	{r3, r4, r5, pc}
   16138:	4628      	mov	r0, r5
   1613a:	f001 fc05 	bl	17948 <interface_socket_from_handle_get>
   1613e:	2800      	cmp	r0, #0
   16140:	d0f8      	beq.n	16134 <ip_interface_wait+0xc>
   16142:	6844      	ldr	r4, [r0, #4]
   16144:	2c00      	cmp	r4, #0
   16146:	d0f5      	beq.n	16134 <ip_interface_wait+0xc>
   16148:	2300      	movs	r3, #0
   1614a:	6043      	str	r3, [r0, #4]
   1614c:	4620      	mov	r0, r4
   1614e:	bd38      	pop	{r3, r4, r5, pc}

00016150 <ip_interface_init>:
   16150:	b538      	push	{r3, r4, r5, lr}
   16152:	2300      	movs	r3, #0
   16154:	4d07      	ldr	r5, [pc, #28]	; (16174 <ip_interface_init+0x24>)
   16156:	4c08      	ldr	r4, [pc, #32]	; (16178 <ip_interface_init+0x28>)
   16158:	4619      	mov	r1, r3
   1615a:	2224      	movs	r2, #36	; 0x24
   1615c:	4807      	ldr	r0, [pc, #28]	; (1617c <ip_interface_init+0x2c>)
   1615e:	602b      	str	r3, [r5, #0]
   16160:	6023      	str	r3, [r4, #0]
   16162:	f005 fdfc 	bl	1bd5e <memset>
   16166:	f7fc fb7f 	bl	12868 <rpc_ip_client_init>
   1616a:	3000      	adds	r0, #0
   1616c:	bf18      	it	ne
   1616e:	2001      	movne	r0, #1
   16170:	4240      	negs	r0, r0
   16172:	bd38      	pop	{r3, r4, r5, pc}
   16174:	200211e8 	.word	0x200211e8
   16178:	200211e4 	.word	0x200211e4
   1617c:	200211f0 	.word	0x200211f0

00016180 <ip_interface_open>:
   16180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16184:	4606      	mov	r6, r0
   16186:	2000      	movs	r0, #0
   16188:	f026 0308 	bic.w	r3, r6, #8
   1618c:	b082      	sub	sp, #8
   1618e:	2b02      	cmp	r3, #2
   16190:	460c      	mov	r4, r1
   16192:	4617      	mov	r7, r2
   16194:	9000      	str	r0, [sp, #0]
   16196:	d002      	beq.n	1619e <ip_interface_open+0x1e>
   16198:	2e05      	cmp	r6, #5
   1619a:	f040 8084 	bne.w	162a6 <ip_interface_open+0x126>
   1619e:	1e63      	subs	r3, r4, #1
   161a0:	2b02      	cmp	r3, #2
   161a2:	d85c      	bhi.n	1625e <ip_interface_open+0xde>
   161a4:	2f00      	cmp	r7, #0
   161a6:	d154      	bne.n	16252 <ip_interface_open+0xd2>
   161a8:	2c01      	cmp	r4, #1
   161aa:	d067      	beq.n	1627c <ip_interface_open+0xfc>
   161ac:	2c03      	cmp	r4, #3
   161ae:	bf18      	it	ne
   161b0:	2702      	movne	r7, #2
   161b2:	4a48      	ldr	r2, [pc, #288]	; (162d4 <ip_interface_open+0x154>)
   161b4:	4621      	mov	r1, r4
   161b6:	4668      	mov	r0, sp
   161b8:	f001 faa6 	bl	17708 <interface_socket_allocate>
   161bc:	9b00      	ldr	r3, [sp, #0]
   161be:	4680      	mov	r8, r0
   161c0:	2b00      	cmp	r3, #0
   161c2:	d059      	beq.n	16278 <ip_interface_open+0xf8>
   161c4:	2100      	movs	r1, #0
   161c6:	a802      	add	r0, sp, #8
   161c8:	f840 1d04 	str.w	r1, [r0, #-4]!
   161cc:	e9c3 6403 	strd	r6, r4, [r3, #12]
   161d0:	615f      	str	r7, [r3, #20]
   161d2:	f7fc fb4f 	bl	12874 <rpc_ip_client_request_alloc>
   161d6:	2800      	cmp	r0, #0
   161d8:	d14b      	bne.n	16272 <ip_interface_open+0xf2>
   161da:	f247 0201 	movw	r2, #28673	; 0x7001
   161de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   161e2:	2108      	movs	r1, #8
   161e4:	9d01      	ldr	r5, [sp, #4]
   161e6:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
   161ea:	60ea      	str	r2, [r5, #12]
   161ec:	7268      	strb	r0, [r5, #9]
   161ee:	72a8      	strb	r0, [r5, #10]
   161f0:	72e8      	strb	r0, [r5, #11]
   161f2:	7229      	strb	r1, [r5, #8]
   161f4:	742b      	strb	r3, [r5, #16]
   161f6:	746b      	strb	r3, [r5, #17]
   161f8:	74ab      	strb	r3, [r5, #18]
   161fa:	74eb      	strb	r3, [r5, #19]
   161fc:	68ab      	ldr	r3, [r5, #8]
   161fe:	2e05      	cmp	r6, #5
   16200:	f103 030c 	add.w	r3, r3, #12
   16204:	60ab      	str	r3, [r5, #8]
   16206:	d003      	beq.n	16210 <ip_interface_open+0x90>
   16208:	2e0a      	cmp	r6, #10
   1620a:	bf14      	ite	ne
   1620c:	2601      	movne	r6, #1
   1620e:	2602      	moveq	r6, #2
   16210:	616e      	str	r6, [r5, #20]
   16212:	61ef      	str	r7, [r5, #28]
   16214:	61ac      	str	r4, [r5, #24]
   16216:	f247 0101 	movw	r1, #28673	; 0x7001
   1621a:	4628      	mov	r0, r5
   1621c:	9f00      	ldr	r7, [sp, #0]
   1621e:	f7fc fb3d 	bl	1289c <rpc_ip_client_request_send>
   16222:	4606      	mov	r6, r0
   16224:	b360      	cbz	r0, 16280 <ip_interface_open+0x100>
   16226:	6828      	ldr	r0, [r5, #0]
   16228:	b108      	cbz	r0, 1622e <ip_interface_open+0xae>
   1622a:	f7fc fb55 	bl	128d8 <rpc_ip_client_data_free>
   1622e:	4628      	mov	r0, r5
   16230:	f7fc fb4a 	bl	128c8 <rpc_ip_client_message_free>
   16234:	2301      	movs	r3, #1
   16236:	2523      	movs	r5, #35	; 0x23
   16238:	603b      	str	r3, [r7, #0]
   1623a:	4640      	mov	r0, r8
   1623c:	f001 fac2 	bl	177c4 <interface_socket_free>
   16240:	4628      	mov	r0, r5
   16242:	f7f9 fc1b 	bl	fa7c <bsd_os_errno_set>
   16246:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1624a:	4640      	mov	r0, r8
   1624c:	b002      	add	sp, #8
   1624e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16252:	2c01      	cmp	r4, #1
   16254:	d009      	beq.n	1626a <ip_interface_open+0xea>
   16256:	2c02      	cmp	r4, #2
   16258:	d109      	bne.n	1626e <ip_interface_open+0xee>
   1625a:	2f02      	cmp	r7, #2
   1625c:	d0a9      	beq.n	161b2 <ip_interface_open+0x32>
   1625e:	2016      	movs	r0, #22
   16260:	f7f9 fc0c 	bl	fa7c <bsd_os_errno_set>
   16264:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   16268:	e7ef      	b.n	1624a <ip_interface_open+0xca>
   1626a:	2f01      	cmp	r7, #1
   1626c:	d1f7      	bne.n	1625e <ip_interface_open+0xde>
   1626e:	2702      	movs	r7, #2
   16270:	e79f      	b.n	161b2 <ip_interface_open+0x32>
   16272:	9d01      	ldr	r5, [sp, #4]
   16274:	2d00      	cmp	r5, #0
   16276:	d1c1      	bne.n	161fc <ip_interface_open+0x7c>
   16278:	250c      	movs	r5, #12
   1627a:	e7de      	b.n	1623a <ip_interface_open+0xba>
   1627c:	4627      	mov	r7, r4
   1627e:	e798      	b.n	161b2 <ip_interface_open+0x32>
   16280:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16284:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16288:	2102      	movs	r1, #2
   1628a:	4640      	mov	r0, r8
   1628c:	f001 fae8 	bl	17860 <interface_socket_wait>
   16290:	4605      	mov	r5, r0
   16292:	2800      	cmp	r0, #0
   16294:	d1d1      	bne.n	1623a <ip_interface_open+0xba>
   16296:	4640      	mov	r0, r8
   16298:	f001 fb56 	bl	17948 <interface_socket_from_handle_get>
   1629c:	b148      	cbz	r0, 162b2 <ip_interface_open+0x132>
   1629e:	6845      	ldr	r5, [r0, #4]
   162a0:	b13d      	cbz	r5, 162b2 <ip_interface_open+0x132>
   162a2:	6046      	str	r6, [r0, #4]
   162a4:	e7c9      	b.n	1623a <ip_interface_open+0xba>
   162a6:	202f      	movs	r0, #47	; 0x2f
   162a8:	f7f9 fbe8 	bl	fa7c <bsd_os_errno_set>
   162ac:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   162b0:	e7cb      	b.n	1624a <ip_interface_open+0xca>
   162b2:	3c02      	subs	r4, #2
   162b4:	2c01      	cmp	r4, #1
   162b6:	d8c8      	bhi.n	1624a <ip_interface_open+0xca>
   162b8:	4640      	mov	r0, r8
   162ba:	9b00      	ldr	r3, [sp, #0]
   162bc:	681a      	ldr	r2, [r3, #0]
   162be:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   162c2:	601a      	str	r2, [r3, #0]
   162c4:	681a      	ldr	r2, [r3, #0]
   162c6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   162ca:	601a      	str	r2, [r3, #0]
   162cc:	b002      	add	sp, #8
   162ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   162d2:	bf00      	nop
   162d4:	00016095 	.word	0x00016095

000162d8 <ip_interface_close>:
   162d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   162dc:	b082      	sub	sp, #8
   162de:	4606      	mov	r6, r0
   162e0:	f001 fb32 	bl	17948 <interface_socket_from_handle_get>
   162e4:	2800      	cmp	r0, #0
   162e6:	d063      	beq.n	163b0 <ip_interface_close+0xd8>
   162e8:	4604      	mov	r4, r0
   162ea:	2100      	movs	r1, #0
   162ec:	a802      	add	r0, sp, #8
   162ee:	6827      	ldr	r7, [r4, #0]
   162f0:	f840 1d04 	str.w	r1, [r0, #-4]!
   162f4:	f8d4 8018 	ldr.w	r8, [r4, #24]
   162f8:	f7fc fabc 	bl	12874 <rpc_ip_client_request_alloc>
   162fc:	2800      	cmp	r0, #0
   162fe:	d13a      	bne.n	16376 <ip_interface_close+0x9e>
   16300:	f247 0309 	movw	r3, #28681	; 0x7009
   16304:	2208      	movs	r2, #8
   16306:	9d01      	ldr	r5, [sp, #4]
   16308:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1630c:	60eb      	str	r3, [r5, #12]
   1630e:	f8c5 8010 	str.w	r8, [r5, #16]
   16312:	7268      	strb	r0, [r5, #9]
   16314:	72a8      	strb	r0, [r5, #10]
   16316:	72e8      	strb	r0, [r5, #11]
   16318:	722a      	strb	r2, [r5, #8]
   1631a:	6823      	ldr	r3, [r4, #0]
   1631c:	f247 0109 	movw	r1, #28681	; 0x7009
   16320:	0c1b      	lsrs	r3, r3, #16
   16322:	041b      	lsls	r3, r3, #16
   16324:	f043 030d 	orr.w	r3, r3, #13
   16328:	6023      	str	r3, [r4, #0]
   1632a:	6823      	ldr	r3, [r4, #0]
   1632c:	4628      	mov	r0, r5
   1632e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   16332:	6023      	str	r3, [r4, #0]
   16334:	6823      	ldr	r3, [r4, #0]
   16336:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1633a:	6023      	str	r3, [r4, #0]
   1633c:	f7fc faae 	bl	1289c <rpc_ip_client_request_send>
   16340:	bb40      	cbnz	r0, 16394 <ip_interface_close+0xbc>
   16342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16346:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1634a:	210e      	movs	r1, #14
   1634c:	4630      	mov	r0, r6
   1634e:	f001 fa87 	bl	17860 <interface_socket_wait>
   16352:	4604      	mov	r4, r0
   16354:	b1a0      	cbz	r0, 16380 <ip_interface_close+0xa8>
   16356:	4c17      	ldr	r4, [pc, #92]	; (163b4 <ip_interface_close+0xdc>)
   16358:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   1635c:	b120      	cbz	r0, 16368 <ip_interface_close+0x90>
   1635e:	f7fc fab3 	bl	128c8 <rpc_ip_client_message_free>
   16362:	2300      	movs	r3, #0
   16364:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   16368:	4630      	mov	r0, r6
   1636a:	f001 fa2b 	bl	177c4 <interface_socket_free>
   1636e:	2000      	movs	r0, #0
   16370:	b002      	add	sp, #8
   16372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16376:	9d01      	ldr	r5, [sp, #4]
   16378:	200c      	movs	r0, #12
   1637a:	2d00      	cmp	r5, #0
   1637c:	d1cd      	bne.n	1631a <ip_interface_close+0x42>
   1637e:	e012      	b.n	163a6 <ip_interface_close+0xce>
   16380:	4630      	mov	r0, r6
   16382:	f001 fae1 	bl	17948 <interface_socket_from_handle_get>
   16386:	2800      	cmp	r0, #0
   16388:	d0e5      	beq.n	16356 <ip_interface_close+0x7e>
   1638a:	6843      	ldr	r3, [r0, #4]
   1638c:	2b00      	cmp	r3, #0
   1638e:	d0e2      	beq.n	16356 <ip_interface_close+0x7e>
   16390:	6044      	str	r4, [r0, #4]
   16392:	e7e0      	b.n	16356 <ip_interface_close+0x7e>
   16394:	6828      	ldr	r0, [r5, #0]
   16396:	b108      	cbz	r0, 1639c <ip_interface_close+0xc4>
   16398:	f7fc fa9e 	bl	128d8 <rpc_ip_client_data_free>
   1639c:	4628      	mov	r0, r5
   1639e:	f7fc fa93 	bl	128c8 <rpc_ip_client_message_free>
   163a2:	2023      	movs	r0, #35	; 0x23
   163a4:	6027      	str	r7, [r4, #0]
   163a6:	f7f9 fb69 	bl	fa7c <bsd_os_errno_set>
   163aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   163ae:	e7df      	b.n	16370 <ip_interface_close+0x98>
   163b0:	2009      	movs	r0, #9
   163b2:	e7f8      	b.n	163a6 <ip_interface_close+0xce>
   163b4:	200211f0 	.word	0x200211f0

000163b8 <ip_interface_sendto>:
   163b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163bc:	2500      	movs	r5, #0
   163be:	b089      	sub	sp, #36	; 0x24
   163c0:	9103      	str	r1, [sp, #12]
   163c2:	4614      	mov	r4, r2
   163c4:	9301      	str	r3, [sp, #4]
   163c6:	9507      	str	r5, [sp, #28]
   163c8:	4607      	mov	r7, r0
   163ca:	9e12      	ldr	r6, [sp, #72]	; 0x48
   163cc:	f001 fabc 	bl	17948 <interface_socket_from_handle_get>
   163d0:	2800      	cmp	r0, #0
   163d2:	f000 8124 	beq.w	1661e <ip_interface_sendto+0x266>
   163d6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   163da:	f300 8118 	bgt.w	1660e <ip_interface_sendto+0x256>
   163de:	6903      	ldr	r3, [r0, #16]
   163e0:	4605      	mov	r5, r0
   163e2:	2b01      	cmp	r3, #1
   163e4:	f000 80d1 	beq.w	1658a <ip_interface_sendto+0x1d2>
   163e8:	682a      	ldr	r2, [r5, #0]
   163ea:	0390      	lsls	r0, r2, #14
   163ec:	d423      	bmi.n	16436 <ip_interface_sendto+0x7e>
   163ee:	682a      	ldr	r2, [r5, #0]
   163f0:	0091      	lsls	r1, r2, #2
   163f2:	d406      	bmi.n	16402 <ip_interface_sendto+0x4a>
   163f4:	2b01      	cmp	r3, #1
   163f6:	f000 80ed 	beq.w	165d4 <ip_interface_sendto+0x21c>
   163fa:	682b      	ldr	r3, [r5, #0]
   163fc:	031a      	lsls	r2, r3, #12
   163fe:	f140 8102 	bpl.w	16606 <ip_interface_sendto+0x24e>
   16402:	682b      	ldr	r3, [r5, #0]
   16404:	031b      	lsls	r3, r3, #12
   16406:	f140 8106 	bpl.w	16616 <ip_interface_sendto+0x25e>
   1640a:	68a8      	ldr	r0, [r5, #8]
   1640c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 16628 <ip_interface_sendto+0x270>
   16410:	2800      	cmp	r0, #0
   16412:	f040 8096 	bne.w	16542 <ip_interface_sendto+0x18a>
   16416:	682b      	ldr	r3, [r5, #0]
   16418:	0118      	lsls	r0, r3, #4
   1641a:	f140 8082 	bpl.w	16522 <ip_interface_sendto+0x16a>
   1641e:	682b      	ldr	r3, [r5, #0]
   16420:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   16424:	602b      	str	r3, [r5, #0]
   16426:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   1642a:	2800      	cmp	r0, #0
   1642c:	d17c      	bne.n	16528 <ip_interface_sendto+0x170>
   1642e:	4620      	mov	r0, r4
   16430:	b009      	add	sp, #36	; 0x24
   16432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16436:	f247 0806 	movw	r8, #28678	; 0x7006
   1643a:	f04f 0a0c 	mov.w	sl, #12
   1643e:	043b      	lsls	r3, r7, #16
   16440:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 16628 <ip_interface_sendto+0x270>
   16444:	9304      	str	r3, [sp, #16]
   16446:	4621      	mov	r1, r4
   16448:	a807      	add	r0, sp, #28
   1644a:	f7fc fa13 	bl	12874 <rpc_ip_client_request_alloc>
   1644e:	2804      	cmp	r0, #4
   16450:	d0f9      	beq.n	16446 <ip_interface_sendto+0x8e>
   16452:	2800      	cmp	r0, #0
   16454:	d171      	bne.n	1653a <ip_interface_sendto+0x182>
   16456:	9b07      	ldr	r3, [sp, #28]
   16458:	f883 a008 	strb.w	sl, [r3, #8]
   1645c:	7258      	strb	r0, [r3, #9]
   1645e:	7298      	strb	r0, [r3, #10]
   16460:	72d8      	strb	r0, [r3, #11]
   16462:	b33e      	cbz	r6, 164b4 <ip_interface_sendto+0xfc>
   16464:	68ea      	ldr	r2, [r5, #12]
   16466:	6871      	ldr	r1, [r6, #4]
   16468:	428a      	cmp	r2, r1
   1646a:	d10a      	bne.n	16482 <ip_interface_sendto+0xca>
   1646c:	2a02      	cmp	r2, #2
   1646e:	f103 001c 	add.w	r0, r3, #28
   16472:	7831      	ldrb	r1, [r6, #0]
   16474:	f000 8090 	beq.w	16598 <ip_interface_sendto+0x1e0>
   16478:	2a0a      	cmp	r2, #10
   1647a:	d102      	bne.n	16482 <ip_interface_sendto+0xca>
   1647c:	2924      	cmp	r1, #36	; 0x24
   1647e:	f000 80af 	beq.w	165e0 <ip_interface_sendto+0x228>
   16482:	6818      	ldr	r0, [r3, #0]
   16484:	b110      	cbz	r0, 1648c <ip_interface_sendto+0xd4>
   16486:	f7fc fa27 	bl	128d8 <rpc_ip_client_data_free>
   1648a:	9b07      	ldr	r3, [sp, #28]
   1648c:	4618      	mov	r0, r3
   1648e:	f7fc fa1b 	bl	128c8 <rpc_ip_client_message_free>
   16492:	2016      	movs	r0, #22
   16494:	682b      	ldr	r3, [r5, #0]
   16496:	031a      	lsls	r2, r3, #12
   16498:	d453      	bmi.n	16542 <ip_interface_sendto+0x18a>
   1649a:	682b      	ldr	r3, [r5, #0]
   1649c:	b29b      	uxth	r3, r3
   1649e:	2b0d      	cmp	r3, #13
   164a0:	d0b6      	beq.n	16410 <ip_interface_sendto+0x58>
   164a2:	682b      	ldr	r3, [r5, #0]
   164a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   164a8:	602b      	str	r3, [r5, #0]
   164aa:	682b      	ldr	r3, [r5, #0]
   164ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   164b0:	602b      	str	r3, [r5, #0]
   164b2:	e7ad      	b.n	16410 <ip_interface_sendto+0x58>
   164b4:	4642      	mov	r2, r8
   164b6:	9901      	ldr	r1, [sp, #4]
   164b8:	6159      	str	r1, [r3, #20]
   164ba:	69a9      	ldr	r1, [r5, #24]
   164bc:	9804      	ldr	r0, [sp, #16]
   164be:	6119      	str	r1, [r3, #16]
   164c0:	9903      	ldr	r1, [sp, #12]
   164c2:	4302      	orrs	r2, r0
   164c4:	60da      	str	r2, [r3, #12]
   164c6:	605c      	str	r4, [r3, #4]
   164c8:	b119      	cbz	r1, 164d2 <ip_interface_sendto+0x11a>
   164ca:	6818      	ldr	r0, [r3, #0]
   164cc:	4622      	mov	r2, r4
   164ce:	f005 fc1c 	bl	1bd0a <memcpy>
   164d2:	682b      	ldr	r3, [r5, #0]
   164d4:	4641      	mov	r1, r8
   164d6:	9305      	str	r3, [sp, #20]
   164d8:	682b      	ldr	r3, [r5, #0]
   164da:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   164de:	602b      	str	r3, [r5, #0]
   164e0:	682b      	ldr	r3, [r5, #0]
   164e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   164e6:	602b      	str	r3, [r5, #0]
   164e8:	9b07      	ldr	r3, [sp, #28]
   164ea:	4618      	mov	r0, r3
   164ec:	9302      	str	r3, [sp, #8]
   164ee:	f7fc f9d5 	bl	1289c <rpc_ip_client_request_send>
   164f2:	9b02      	ldr	r3, [sp, #8]
   164f4:	4683      	mov	fp, r0
   164f6:	bb58      	cbnz	r0, 16550 <ip_interface_sendto+0x198>
   164f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   164fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16500:	4611      	mov	r1, r2
   16502:	4638      	mov	r0, r7
   16504:	f001 f9ac 	bl	17860 <interface_socket_wait>
   16508:	b370      	cbz	r0, 16568 <ip_interface_sendto+0x1b0>
   1650a:	682b      	ldr	r3, [r5, #0]
   1650c:	0319      	lsls	r1, r3, #12
   1650e:	d437      	bmi.n	16580 <ip_interface_sendto+0x1c8>
   16510:	280c      	cmp	r0, #12
   16512:	d1bf      	bne.n	16494 <ip_interface_sendto+0xdc>
   16514:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   16518:	2800      	cmp	r0, #0
   1651a:	d094      	beq.n	16446 <ip_interface_sendto+0x8e>
   1651c:	f7fc f9d4 	bl	128c8 <rpc_ip_client_message_free>
   16520:	e791      	b.n	16446 <ip_interface_sendto+0x8e>
   16522:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   16526:	6984      	ldr	r4, [r0, #24]
   16528:	f7fc f9ce 	bl	128c8 <rpc_ip_client_message_free>
   1652c:	2300      	movs	r3, #0
   1652e:	4620      	mov	r0, r4
   16530:	f849 3027 	str.w	r3, [r9, r7, lsl #2]
   16534:	b009      	add	sp, #36	; 0x24
   16536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1653a:	682b      	ldr	r3, [r5, #0]
   1653c:	200c      	movs	r0, #12
   1653e:	031a      	lsls	r2, r3, #12
   16540:	d5ab      	bpl.n	1649a <ip_interface_sendto+0xe2>
   16542:	f7f9 fa9b 	bl	fa7c <bsd_os_errno_set>
   16546:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1654a:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   1654e:	e76c      	b.n	1642a <ip_interface_sendto+0x72>
   16550:	6818      	ldr	r0, [r3, #0]
   16552:	469b      	mov	fp, r3
   16554:	b108      	cbz	r0, 1655a <ip_interface_sendto+0x1a2>
   16556:	f7fc f9bf 	bl	128d8 <rpc_ip_client_data_free>
   1655a:	4658      	mov	r0, fp
   1655c:	f7fc f9b4 	bl	128c8 <rpc_ip_client_message_free>
   16560:	9b05      	ldr	r3, [sp, #20]
   16562:	2023      	movs	r0, #35	; 0x23
   16564:	602b      	str	r3, [r5, #0]
   16566:	e795      	b.n	16494 <ip_interface_sendto+0xdc>
   16568:	4638      	mov	r0, r7
   1656a:	f001 f9ed 	bl	17948 <interface_socket_from_handle_get>
   1656e:	4603      	mov	r3, r0
   16570:	b1f0      	cbz	r0, 165b0 <ip_interface_sendto+0x1f8>
   16572:	6840      	ldr	r0, [r0, #4]
   16574:	b1e0      	cbz	r0, 165b0 <ip_interface_sendto+0x1f8>
   16576:	f8c3 b004 	str.w	fp, [r3, #4]
   1657a:	682b      	ldr	r3, [r5, #0]
   1657c:	0319      	lsls	r1, r3, #12
   1657e:	d5c7      	bpl.n	16510 <ip_interface_sendto+0x158>
   16580:	68a8      	ldr	r0, [r5, #8]
   16582:	682b      	ldr	r3, [r5, #0]
   16584:	031e      	lsls	r6, r3, #12
   16586:	d588      	bpl.n	1649a <ip_interface_sendto+0xe2>
   16588:	e742      	b.n	16410 <ip_interface_sendto+0x58>
   1658a:	2e00      	cmp	r6, #0
   1658c:	f43f af2c 	beq.w	163e8 <ip_interface_sendto+0x30>
   16590:	2016      	movs	r0, #22
   16592:	f8df 9094 	ldr.w	r9, [pc, #148]	; 16628 <ip_interface_sendto+0x270>
   16596:	e7d4      	b.n	16542 <ip_interface_sendto+0x18a>
   16598:	2910      	cmp	r1, #16
   1659a:	f47f af72 	bne.w	16482 <ip_interface_sendto+0xca>
   1659e:	2204      	movs	r2, #4
   165a0:	8931      	ldrh	r1, [r6, #8]
   165a2:	835a      	strh	r2, [r3, #26]
   165a4:	8319      	strh	r1, [r3, #24]
   165a6:	f106 010c 	add.w	r1, r6, #12
   165aa:	f005 fbae 	bl	1bd0a <memcpy>
   165ae:	e01e      	b.n	165ee <ip_interface_sendto+0x236>
   165b0:	682b      	ldr	r3, [r5, #0]
   165b2:	031b      	lsls	r3, r3, #12
   165b4:	f53f af2f 	bmi.w	16416 <ip_interface_sendto+0x5e>
   165b8:	682b      	ldr	r3, [r5, #0]
   165ba:	b29b      	uxth	r3, r3
   165bc:	2b0d      	cmp	r3, #13
   165be:	f43f af2a 	beq.w	16416 <ip_interface_sendto+0x5e>
   165c2:	682b      	ldr	r3, [r5, #0]
   165c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   165c8:	602b      	str	r3, [r5, #0]
   165ca:	682b      	ldr	r3, [r5, #0]
   165cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   165d0:	602b      	str	r3, [r5, #0]
   165d2:	e720      	b.n	16416 <ip_interface_sendto+0x5e>
   165d4:	682b      	ldr	r3, [r5, #0]
   165d6:	b29b      	uxth	r3, r3
   165d8:	2b05      	cmp	r3, #5
   165da:	f47f af12 	bne.w	16402 <ip_interface_sendto+0x4a>
   165de:	e70c      	b.n	163fa <ip_interface_sendto+0x42>
   165e0:	2210      	movs	r2, #16
   165e2:	8931      	ldrh	r1, [r6, #8]
   165e4:	835a      	strh	r2, [r3, #26]
   165e6:	8319      	strh	r1, [r3, #24]
   165e8:	18b1      	adds	r1, r6, r2
   165ea:	f005 fb8e 	bl	1bd0a <memcpy>
   165ee:	f247 0207 	movw	r2, #28679	; 0x7007
   165f2:	9b07      	ldr	r3, [sp, #28]
   165f4:	4690      	mov	r8, r2
   165f6:	6899      	ldr	r1, [r3, #8]
   165f8:	8b58      	ldrh	r0, [r3, #26]
   165fa:	3104      	adds	r1, #4
   165fc:	4401      	add	r1, r0
   165fe:	9801      	ldr	r0, [sp, #4]
   16600:	6099      	str	r1, [r3, #8]
   16602:	6158      	str	r0, [r3, #20]
   16604:	e759      	b.n	164ba <ip_interface_sendto+0x102>
   16606:	2023      	movs	r0, #35	; 0x23
   16608:	f8df 901c 	ldr.w	r9, [pc, #28]	; 16628 <ip_interface_sendto+0x270>
   1660c:	e799      	b.n	16542 <ip_interface_sendto+0x18a>
   1660e:	2028      	movs	r0, #40	; 0x28
   16610:	f8df 9014 	ldr.w	r9, [pc, #20]	; 16628 <ip_interface_sendto+0x270>
   16614:	e795      	b.n	16542 <ip_interface_sendto+0x18a>
   16616:	2039      	movs	r0, #57	; 0x39
   16618:	f8df 900c 	ldr.w	r9, [pc, #12]	; 16628 <ip_interface_sendto+0x270>
   1661c:	e791      	b.n	16542 <ip_interface_sendto+0x18a>
   1661e:	2009      	movs	r0, #9
   16620:	f8df 9004 	ldr.w	r9, [pc, #4]	; 16628 <ip_interface_sendto+0x270>
   16624:	e78d      	b.n	16542 <ip_interface_sendto+0x18a>
   16626:	bf00      	nop
   16628:	200211f0 	.word	0x200211f0

0001662c <ip_interface_recvfrom>:
   1662c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16630:	b085      	sub	sp, #20
   16632:	2a00      	cmp	r2, #0
   16634:	f000 8110 	beq.w	16858 <ip_interface_recvfrom+0x22c>
   16638:	468a      	mov	sl, r1
   1663a:	4699      	mov	r9, r3
   1663c:	4607      	mov	r7, r0
   1663e:	4616      	mov	r6, r2
   16640:	f001 f982 	bl	17948 <interface_socket_from_handle_get>
   16644:	4604      	mov	r4, r0
   16646:	2800      	cmp	r0, #0
   16648:	f000 810d 	beq.w	16866 <ip_interface_recvfrom+0x23a>
   1664c:	6803      	ldr	r3, [r0, #0]
   1664e:	02d9      	lsls	r1, r3, #11
   16650:	d565      	bpl.n	1671e <ip_interface_recvfrom+0xf2>
   16652:	f019 0f02 	tst.w	r9, #2
   16656:	bf18      	it	ne
   16658:	f04f 0800 	movne.w	r8, #0
   1665c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   16660:	bf08      	it	eq
   16662:	6803      	ldreq	r3, [r0, #0]
   16664:	f009 0510 	and.w	r5, r9, #16
   16668:	bf04      	itt	eq
   1666a:	f083 5880 	eoreq.w	r8, r3, #268435456	; 0x10000000
   1666e:	f3c8 7800 	ubfxeq	r8, r8, #28, #1
   16672:	6823      	ldr	r3, [r4, #0]
   16674:	03da      	lsls	r2, r3, #15
   16676:	d56d      	bpl.n	16754 <ip_interface_recvfrom+0x128>
   16678:	6823      	ldr	r3, [r4, #0]
   1667a:	69e0      	ldr	r0, [r4, #28]
   1667c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   16680:	6023      	str	r3, [r4, #0]
   16682:	6803      	ldr	r3, [r0, #0]
   16684:	68db      	ldr	r3, [r3, #12]
   16686:	4798      	blx	r3
   16688:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1668c:	4683      	mov	fp, r0
   1668e:	f000 8081 	beq.w	16794 <ip_interface_recvfrom+0x168>
   16692:	4286      	cmp	r6, r0
   16694:	dd03      	ble.n	1669e <ip_interface_recvfrom+0x72>
   16696:	6923      	ldr	r3, [r4, #16]
   16698:	2b01      	cmp	r3, #1
   1669a:	f000 80a7 	beq.w	167ec <ip_interface_recvfrom+0x1c0>
   1669e:	2500      	movs	r5, #0
   166a0:	69e0      	ldr	r0, [r4, #28]
   166a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   166a4:	b103      	cbz	r3, 166a8 <ip_interface_recvfrom+0x7c>
   166a6:	681b      	ldr	r3, [r3, #0]
   166a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   166aa:	e9cd a600 	strd	sl, r6, [sp]
   166ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
   166b2:	6803      	ldr	r3, [r0, #0]
   166b4:	464a      	mov	r2, r9
   166b6:	689b      	ldr	r3, [r3, #8]
   166b8:	4669      	mov	r1, sp
   166ba:	4798      	blx	r3
   166bc:	4683      	mov	fp, r0
   166be:	69e0      	ldr	r0, [r4, #28]
   166c0:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   166c4:	6803      	ldr	r3, [r0, #0]
   166c6:	bf18      	it	ne
   166c8:	2601      	movne	r6, #1
   166ca:	68db      	ldr	r3, [r3, #12]
   166cc:	bf0a      	itet	eq
   166ce:	2600      	moveq	r6, #0
   166d0:	f04f 0800 	movne.w	r8, #0
   166d4:	f04f 0823 	moveq.w	r8, #35	; 0x23
   166d8:	4798      	blx	r3
   166da:	3001      	adds	r0, #1
   166dc:	d135      	bne.n	1674a <ip_interface_recvfrom+0x11e>
   166de:	2d00      	cmp	r5, #0
   166e0:	f000 80b6 	beq.w	16850 <ip_interface_recvfrom+0x224>
   166e4:	2e00      	cmp	r6, #0
   166e6:	f000 80a6 	beq.w	16836 <ip_interface_recvfrom+0x20a>
   166ea:	6823      	ldr	r3, [r4, #0]
   166ec:	0319      	lsls	r1, r3, #12
   166ee:	d506      	bpl.n	166fe <ip_interface_recvfrom+0xd2>
   166f0:	6823      	ldr	r3, [r4, #0]
   166f2:	b29b      	uxth	r3, r3
   166f4:	2b0d      	cmp	r3, #13
   166f6:	d002      	beq.n	166fe <ip_interface_recvfrom+0xd2>
   166f8:	6923      	ldr	r3, [r4, #16]
   166fa:	2b01      	cmp	r3, #1
   166fc:	d025      	beq.n	1674a <ip_interface_recvfrom+0x11e>
   166fe:	6823      	ldr	r3, [r4, #0]
   16700:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   16704:	6823      	ldr	r3, [r4, #0]
   16706:	f040 80b1 	bne.w	1686c <ip_interface_recvfrom+0x240>
   1670a:	031a      	lsls	r2, r3, #12
   1670c:	d475      	bmi.n	167fa <ip_interface_recvfrom+0x1ce>
   1670e:	f1b8 0f00 	cmp.w	r8, #0
   16712:	f040 808a 	bne.w	1682a <ip_interface_recvfrom+0x1fe>
   16716:	4658      	mov	r0, fp
   16718:	b005      	add	sp, #20
   1671a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1671e:	6803      	ldr	r3, [r0, #0]
   16720:	b29b      	uxth	r3, r3
   16722:	2b06      	cmp	r3, #6
   16724:	d073      	beq.n	1680e <ip_interface_recvfrom+0x1e2>
   16726:	6803      	ldr	r3, [r0, #0]
   16728:	b29b      	uxth	r3, r3
   1672a:	2b07      	cmp	r3, #7
   1672c:	bf0c      	ite	eq
   1672e:	f04f 0809 	moveq.w	r8, #9
   16732:	f04f 0839 	movne.w	r8, #57	; 0x39
   16736:	69e0      	ldr	r0, [r4, #28]
   16738:	6803      	ldr	r3, [r0, #0]
   1673a:	68db      	ldr	r3, [r3, #12]
   1673c:	4798      	blx	r3
   1673e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   16742:	4683      	mov	fp, r0
   16744:	d0db      	beq.n	166fe <ip_interface_recvfrom+0xd2>
   16746:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   1674a:	6823      	ldr	r3, [r4, #0]
   1674c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   16750:	6023      	str	r3, [r4, #0]
   16752:	e7dc      	b.n	1670e <ip_interface_recvfrom+0xe2>
   16754:	f1b8 0f00 	cmp.w	r8, #0
   16758:	f000 8081 	beq.w	1685e <ip_interface_recvfrom+0x232>
   1675c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   16760:	6a23      	ldr	r3, [r4, #32]
   16762:	4611      	mov	r1, r2
   16764:	2b00      	cmp	r3, #0
   16766:	bf08      	it	eq
   16768:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   1676c:	4638      	mov	r0, r7
   1676e:	f001 f877 	bl	17860 <interface_socket_wait>
   16772:	4680      	mov	r8, r0
   16774:	b358      	cbz	r0, 167ce <ip_interface_recvfrom+0x1a2>
   16776:	6823      	ldr	r3, [r4, #0]
   16778:	69e0      	ldr	r0, [r4, #28]
   1677a:	031b      	lsls	r3, r3, #12
   1677c:	d521      	bpl.n	167c2 <ip_interface_recvfrom+0x196>
   1677e:	6823      	ldr	r3, [r4, #0]
   16780:	b29b      	uxth	r3, r3
   16782:	2b0d      	cmp	r3, #13
   16784:	d01d      	beq.n	167c2 <ip_interface_recvfrom+0x196>
   16786:	6925      	ldr	r5, [r4, #16]
   16788:	f1a5 0501 	sub.w	r5, r5, #1
   1678c:	fab5 f585 	clz	r5, r5
   16790:	096d      	lsrs	r5, r5, #5
   16792:	e786      	b.n	166a2 <ip_interface_recvfrom+0x76>
   16794:	6823      	ldr	r3, [r4, #0]
   16796:	0318      	lsls	r0, r3, #12
   16798:	d5dc      	bpl.n	16754 <ip_interface_recvfrom+0x128>
   1679a:	6823      	ldr	r3, [r4, #0]
   1679c:	b29b      	uxth	r3, r3
   1679e:	2b0d      	cmp	r3, #13
   167a0:	d0d8      	beq.n	16754 <ip_interface_recvfrom+0x128>
   167a2:	6923      	ldr	r3, [r4, #16]
   167a4:	69e0      	ldr	r0, [r4, #28]
   167a6:	2b01      	cmp	r3, #1
   167a8:	d034      	beq.n	16814 <ip_interface_recvfrom+0x1e8>
   167aa:	f04f 0839 	mov.w	r8, #57	; 0x39
   167ae:	6823      	ldr	r3, [r4, #0]
   167b0:	0c1b      	lsrs	r3, r3, #16
   167b2:	041b      	lsls	r3, r3, #16
   167b4:	f043 030d 	orr.w	r3, r3, #13
   167b8:	6023      	str	r3, [r4, #0]
   167ba:	6823      	ldr	r3, [r4, #0]
   167bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   167c0:	6023      	str	r3, [r4, #0]
   167c2:	6803      	ldr	r3, [r0, #0]
   167c4:	68db      	ldr	r3, [r3, #12]
   167c6:	4798      	blx	r3
   167c8:	3001      	adds	r0, #1
   167ca:	d1be      	bne.n	1674a <ip_interface_recvfrom+0x11e>
   167cc:	e797      	b.n	166fe <ip_interface_recvfrom+0xd2>
   167ce:	4638      	mov	r0, r7
   167d0:	f001 f8ba 	bl	17948 <interface_socket_from_handle_get>
   167d4:	b138      	cbz	r0, 167e6 <ip_interface_recvfrom+0x1ba>
   167d6:	f8d0 8004 	ldr.w	r8, [r0, #4]
   167da:	f1b8 0f00 	cmp.w	r8, #0
   167de:	d002      	beq.n	167e6 <ip_interface_recvfrom+0x1ba>
   167e0:	2300      	movs	r3, #0
   167e2:	6043      	str	r3, [r0, #4]
   167e4:	e7c7      	b.n	16776 <ip_interface_recvfrom+0x14a>
   167e6:	f04f 0801 	mov.w	r8, #1
   167ea:	e742      	b.n	16672 <ip_interface_recvfrom+0x46>
   167ec:	b11d      	cbz	r5, 167f6 <ip_interface_recvfrom+0x1ca>
   167ee:	6823      	ldr	r3, [r4, #0]
   167f0:	00db      	lsls	r3, r3, #3
   167f2:	d5b3      	bpl.n	1675c <ip_interface_recvfrom+0x130>
   167f4:	e753      	b.n	1669e <ip_interface_recvfrom+0x72>
   167f6:	69e0      	ldr	r0, [r4, #28]
   167f8:	e753      	b.n	166a2 <ip_interface_recvfrom+0x76>
   167fa:	6823      	ldr	r3, [r4, #0]
   167fc:	b29b      	uxth	r3, r3
   167fe:	2b0d      	cmp	r3, #13
   16800:	d185      	bne.n	1670e <ip_interface_recvfrom+0xe2>
   16802:	68a3      	ldr	r3, [r4, #8]
   16804:	2b00      	cmp	r3, #0
   16806:	d082      	beq.n	1670e <ip_interface_recvfrom+0xe2>
   16808:	f8d4 8008 	ldr.w	r8, [r4, #8]
   1680c:	e77f      	b.n	1670e <ip_interface_recvfrom+0xe2>
   1680e:	f04f 0809 	mov.w	r8, #9
   16812:	e790      	b.n	16736 <ip_interface_recvfrom+0x10a>
   16814:	6803      	ldr	r3, [r0, #0]
   16816:	68db      	ldr	r3, [r3, #12]
   16818:	4798      	blx	r3
   1681a:	3001      	adds	r0, #1
   1681c:	d00b      	beq.n	16836 <ip_interface_recvfrom+0x20a>
   1681e:	f04f 0823 	mov.w	r8, #35	; 0x23
   16822:	6823      	ldr	r3, [r4, #0]
   16824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   16828:	6023      	str	r3, [r4, #0]
   1682a:	4640      	mov	r0, r8
   1682c:	f7f9 f926 	bl	fa7c <bsd_os_errno_set>
   16830:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   16834:	e76f      	b.n	16716 <ip_interface_recvfrom+0xea>
   16836:	6823      	ldr	r3, [r4, #0]
   16838:	f04f 0b00 	mov.w	fp, #0
   1683c:	0c1b      	lsrs	r3, r3, #16
   1683e:	041b      	lsls	r3, r3, #16
   16840:	f043 030d 	orr.w	r3, r3, #13
   16844:	6023      	str	r3, [r4, #0]
   16846:	6823      	ldr	r3, [r4, #0]
   16848:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1684c:	6023      	str	r3, [r4, #0]
   1684e:	e762      	b.n	16716 <ip_interface_recvfrom+0xea>
   16850:	2e00      	cmp	r6, #0
   16852:	f47f af4a 	bne.w	166ea <ip_interface_recvfrom+0xbe>
   16856:	e752      	b.n	166fe <ip_interface_recvfrom+0xd2>
   16858:	f04f 0816 	mov.w	r8, #22
   1685c:	e7e5      	b.n	1682a <ip_interface_recvfrom+0x1fe>
   1685e:	f04f 0823 	mov.w	r8, #35	; 0x23
   16862:	69e0      	ldr	r0, [r4, #28]
   16864:	e7ad      	b.n	167c2 <ip_interface_recvfrom+0x196>
   16866:	f04f 0809 	mov.w	r8, #9
   1686a:	e7de      	b.n	1682a <ip_interface_recvfrom+0x1fe>
   1686c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   16870:	6023      	str	r3, [r4, #0]
   16872:	6823      	ldr	r3, [r4, #0]
   16874:	f04f 0869 	mov.w	r8, #105	; 0x69
   16878:	0c1b      	lsrs	r3, r3, #16
   1687a:	041b      	lsls	r3, r3, #16
   1687c:	f043 030d 	orr.w	r3, r3, #13
   16880:	6023      	str	r3, [r4, #0]
   16882:	e7d2      	b.n	1682a <ip_interface_recvfrom+0x1fe>

00016884 <ip_interface_connect>:
   16884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16888:	b082      	sub	sp, #8
   1688a:	2900      	cmp	r1, #0
   1688c:	d044      	beq.n	16918 <ip_interface_connect+0x94>
   1688e:	2a00      	cmp	r2, #0
   16890:	d042      	beq.n	16918 <ip_interface_connect+0x94>
   16892:	4606      	mov	r6, r0
   16894:	460f      	mov	r7, r1
   16896:	f001 f857 	bl	17948 <interface_socket_from_handle_get>
   1689a:	4605      	mov	r5, r0
   1689c:	2800      	cmp	r0, #0
   1689e:	f000 8096 	beq.w	169ce <ip_interface_connect+0x14a>
   168a2:	6803      	ldr	r3, [r0, #0]
   168a4:	b29b      	uxth	r3, r3
   168a6:	2b02      	cmp	r3, #2
   168a8:	d004      	beq.n	168b4 <ip_interface_connect+0x30>
   168aa:	6803      	ldr	r3, [r0, #0]
   168ac:	b29b      	uxth	r3, r3
   168ae:	2b04      	cmp	r3, #4
   168b0:	f040 808d 	bne.w	169ce <ip_interface_connect+0x14a>
   168b4:	6829      	ldr	r1, [r5, #0]
   168b6:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   168ba:	f040 8084 	bne.w	169c6 <ip_interface_connect+0x142>
   168be:	a802      	add	r0, sp, #8
   168c0:	f840 1d04 	str.w	r1, [r0, #-4]!
   168c4:	f8d5 8018 	ldr.w	r8, [r5, #24]
   168c8:	f7fb ffd4 	bl	12874 <rpc_ip_client_request_alloc>
   168cc:	bb70      	cbnz	r0, 1692c <ip_interface_connect+0xa8>
   168ce:	2108      	movs	r1, #8
   168d0:	0433      	lsls	r3, r6, #16
   168d2:	9c01      	ldr	r4, [sp, #4]
   168d4:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
   168d8:	f042 0202 	orr.w	r2, r2, #2
   168dc:	60e2      	str	r2, [r4, #12]
   168de:	f8c4 8010 	str.w	r8, [r4, #16]
   168e2:	7260      	strb	r0, [r4, #9]
   168e4:	72a0      	strb	r0, [r4, #10]
   168e6:	72e0      	strb	r0, [r4, #11]
   168e8:	7221      	strb	r1, [r4, #8]
   168ea:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
   168ee:	f043 0302 	orr.w	r3, r3, #2
   168f2:	60e3      	str	r3, [r4, #12]
   168f4:	68a3      	ldr	r3, [r4, #8]
   168f6:	69aa      	ldr	r2, [r5, #24]
   168f8:	3304      	adds	r3, #4
   168fa:	6122      	str	r2, [r4, #16]
   168fc:	60a3      	str	r3, [r4, #8]
   168fe:	68eb      	ldr	r3, [r5, #12]
   16900:	687a      	ldr	r2, [r7, #4]
   16902:	4293      	cmp	r3, r2
   16904:	d108      	bne.n	16918 <ip_interface_connect+0x94>
   16906:	2b02      	cmp	r3, #2
   16908:	f104 0018 	add.w	r0, r4, #24
   1690c:	783a      	ldrb	r2, [r7, #0]
   1690e:	d03a      	beq.n	16986 <ip_interface_connect+0x102>
   16910:	2b0a      	cmp	r3, #10
   16912:	d101      	bne.n	16918 <ip_interface_connect+0x94>
   16914:	2a24      	cmp	r2, #36	; 0x24
   16916:	d00e      	beq.n	16936 <ip_interface_connect+0xb2>
   16918:	2416      	movs	r4, #22
   1691a:	4620      	mov	r0, r4
   1691c:	f7f9 f8ae 	bl	fa7c <bsd_os_errno_set>
   16920:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16924:	4620      	mov	r0, r4
   16926:	b002      	add	sp, #8
   16928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1692c:	9c01      	ldr	r4, [sp, #4]
   1692e:	2c00      	cmp	r4, #0
   16930:	d04f      	beq.n	169d2 <ip_interface_connect+0x14e>
   16932:	0433      	lsls	r3, r6, #16
   16934:	e7d9      	b.n	168ea <ip_interface_connect+0x66>
   16936:	2210      	movs	r2, #16
   16938:	893b      	ldrh	r3, [r7, #8]
   1693a:	18b9      	adds	r1, r7, r2
   1693c:	82e2      	strh	r2, [r4, #22]
   1693e:	82a3      	strh	r3, [r4, #20]
   16940:	f005 f9e3 	bl	1bd0a <memcpy>
   16944:	68a3      	ldr	r3, [r4, #8]
   16946:	8ae2      	ldrh	r2, [r4, #22]
   16948:	f247 0102 	movw	r1, #28674	; 0x7002
   1694c:	4413      	add	r3, r2
   1694e:	60a3      	str	r3, [r4, #8]
   16950:	682f      	ldr	r7, [r5, #0]
   16952:	682b      	ldr	r3, [r5, #0]
   16954:	4620      	mov	r0, r4
   16956:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   1695a:	602b      	str	r3, [r5, #0]
   1695c:	f7fb ff9e 	bl	1289c <rpc_ip_client_request_send>
   16960:	b9e0      	cbnz	r0, 1699c <ip_interface_connect+0x118>
   16962:	682b      	ldr	r3, [r5, #0]
   16964:	f013 5880 	ands.w	r8, r3, #268435456	; 0x10000000
   16968:	d12f      	bne.n	169ca <ip_interface_connect+0x146>
   1696a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1696e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16972:	2105      	movs	r1, #5
   16974:	4630      	mov	r0, r6
   16976:	f000 ff73 	bl	17860 <interface_socket_wait>
   1697a:	4604      	mov	r4, r0
   1697c:	b1c0      	cbz	r0, 169b0 <ip_interface_connect+0x12c>
   1697e:	2c73      	cmp	r4, #115	; 0x73
   16980:	d0cb      	beq.n	1691a <ip_interface_connect+0x96>
   16982:	602f      	str	r7, [r5, #0]
   16984:	e7c9      	b.n	1691a <ip_interface_connect+0x96>
   16986:	2a10      	cmp	r2, #16
   16988:	d1c6      	bne.n	16918 <ip_interface_connect+0x94>
   1698a:	2204      	movs	r2, #4
   1698c:	893b      	ldrh	r3, [r7, #8]
   1698e:	f107 010c 	add.w	r1, r7, #12
   16992:	82e2      	strh	r2, [r4, #22]
   16994:	82a3      	strh	r3, [r4, #20]
   16996:	f005 f9b8 	bl	1bd0a <memcpy>
   1699a:	e7d3      	b.n	16944 <ip_interface_connect+0xc0>
   1699c:	6820      	ldr	r0, [r4, #0]
   1699e:	b108      	cbz	r0, 169a4 <ip_interface_connect+0x120>
   169a0:	f7fb ff9a 	bl	128d8 <rpc_ip_client_data_free>
   169a4:	4620      	mov	r0, r4
   169a6:	f7fb ff8f 	bl	128c8 <rpc_ip_client_message_free>
   169aa:	2423      	movs	r4, #35	; 0x23
   169ac:	602f      	str	r7, [r5, #0]
   169ae:	e7b4      	b.n	1691a <ip_interface_connect+0x96>
   169b0:	4630      	mov	r0, r6
   169b2:	f000 ffc9 	bl	17948 <interface_socket_from_handle_get>
   169b6:	2800      	cmp	r0, #0
   169b8:	d0b4      	beq.n	16924 <ip_interface_connect+0xa0>
   169ba:	6844      	ldr	r4, [r0, #4]
   169bc:	2c00      	cmp	r4, #0
   169be:	d0b1      	beq.n	16924 <ip_interface_connect+0xa0>
   169c0:	f8c0 8004 	str.w	r8, [r0, #4]
   169c4:	e7db      	b.n	1697e <ip_interface_connect+0xfa>
   169c6:	2472      	movs	r4, #114	; 0x72
   169c8:	e7a7      	b.n	1691a <ip_interface_connect+0x96>
   169ca:	2473      	movs	r4, #115	; 0x73
   169cc:	e7a5      	b.n	1691a <ip_interface_connect+0x96>
   169ce:	2409      	movs	r4, #9
   169d0:	e7a3      	b.n	1691a <ip_interface_connect+0x96>
   169d2:	240c      	movs	r4, #12
   169d4:	e7a1      	b.n	1691a <ip_interface_connect+0x96>
   169d6:	bf00      	nop

000169d8 <ip_interface_bind>:
   169d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   169dc:	b082      	sub	sp, #8
   169de:	b389      	cbz	r1, 16a44 <ip_interface_bind+0x6c>
   169e0:	b382      	cbz	r2, 16a44 <ip_interface_bind+0x6c>
   169e2:	4607      	mov	r7, r0
   169e4:	460e      	mov	r6, r1
   169e6:	f000 ffaf 	bl	17948 <interface_socket_from_handle_get>
   169ea:	4605      	mov	r5, r0
   169ec:	2800      	cmp	r0, #0
   169ee:	d07b      	beq.n	16ae8 <ip_interface_bind+0x110>
   169f0:	6803      	ldr	r3, [r0, #0]
   169f2:	b29b      	uxth	r3, r3
   169f4:	2b02      	cmp	r3, #2
   169f6:	d177      	bne.n	16ae8 <ip_interface_bind+0x110>
   169f8:	2100      	movs	r1, #0
   169fa:	a802      	add	r0, sp, #8
   169fc:	f840 1d04 	str.w	r1, [r0, #-4]!
   16a00:	f8d5 8018 	ldr.w	r8, [r5, #24]
   16a04:	f7fb ff36 	bl	12874 <rpc_ip_client_request_alloc>
   16a08:	bb30      	cbnz	r0, 16a58 <ip_interface_bind+0x80>
   16a0a:	f247 0305 	movw	r3, #28677	; 0x7005
   16a0e:	2208      	movs	r2, #8
   16a10:	9c01      	ldr	r4, [sp, #4]
   16a12:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   16a16:	60e3      	str	r3, [r4, #12]
   16a18:	f8c4 8010 	str.w	r8, [r4, #16]
   16a1c:	7260      	strb	r0, [r4, #9]
   16a1e:	72a0      	strb	r0, [r4, #10]
   16a20:	72e0      	strb	r0, [r4, #11]
   16a22:	7222      	strb	r2, [r4, #8]
   16a24:	68a3      	ldr	r3, [r4, #8]
   16a26:	3304      	adds	r3, #4
   16a28:	60a3      	str	r3, [r4, #8]
   16a2a:	68eb      	ldr	r3, [r5, #12]
   16a2c:	6872      	ldr	r2, [r6, #4]
   16a2e:	4293      	cmp	r3, r2
   16a30:	d108      	bne.n	16a44 <ip_interface_bind+0x6c>
   16a32:	2b02      	cmp	r3, #2
   16a34:	f104 0018 	add.w	r0, r4, #24
   16a38:	7832      	ldrb	r2, [r6, #0]
   16a3a:	d03c      	beq.n	16ab6 <ip_interface_bind+0xde>
   16a3c:	2b0a      	cmp	r3, #10
   16a3e:	d101      	bne.n	16a44 <ip_interface_bind+0x6c>
   16a40:	2a24      	cmp	r2, #36	; 0x24
   16a42:	d00e      	beq.n	16a62 <ip_interface_bind+0x8a>
   16a44:	2416      	movs	r4, #22
   16a46:	4620      	mov	r0, r4
   16a48:	f7f9 f818 	bl	fa7c <bsd_os_errno_set>
   16a4c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16a50:	4620      	mov	r0, r4
   16a52:	b002      	add	sp, #8
   16a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16a58:	9c01      	ldr	r4, [sp, #4]
   16a5a:	2c00      	cmp	r4, #0
   16a5c:	d1e2      	bne.n	16a24 <ip_interface_bind+0x4c>
   16a5e:	240c      	movs	r4, #12
   16a60:	e7f1      	b.n	16a46 <ip_interface_bind+0x6e>
   16a62:	2210      	movs	r2, #16
   16a64:	8933      	ldrh	r3, [r6, #8]
   16a66:	18b1      	adds	r1, r6, r2
   16a68:	82e2      	strh	r2, [r4, #22]
   16a6a:	82a3      	strh	r3, [r4, #20]
   16a6c:	f005 f94d 	bl	1bd0a <memcpy>
   16a70:	68a3      	ldr	r3, [r4, #8]
   16a72:	8ae2      	ldrh	r2, [r4, #22]
   16a74:	f247 0105 	movw	r1, #28677	; 0x7005
   16a78:	4413      	add	r3, r2
   16a7a:	60a3      	str	r3, [r4, #8]
   16a7c:	682b      	ldr	r3, [r5, #0]
   16a7e:	4620      	mov	r0, r4
   16a80:	0c1b      	lsrs	r3, r3, #16
   16a82:	041b      	lsls	r3, r3, #16
   16a84:	f043 0303 	orr.w	r3, r3, #3
   16a88:	602b      	str	r3, [r5, #0]
   16a8a:	682e      	ldr	r6, [r5, #0]
   16a8c:	f7fb ff06 	bl	1289c <rpc_ip_client_request_send>
   16a90:	4680      	mov	r8, r0
   16a92:	b9d8      	cbnz	r0, 16acc <ip_interface_bind+0xf4>
   16a94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16a98:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16a9c:	2104      	movs	r1, #4
   16a9e:	4638      	mov	r0, r7
   16aa0:	f000 fede 	bl	17860 <interface_socket_wait>
   16aa4:	4604      	mov	r4, r0
   16aa6:	b308      	cbz	r0, 16aec <ip_interface_bind+0x114>
   16aa8:	682b      	ldr	r3, [r5, #0]
   16aaa:	0c1b      	lsrs	r3, r3, #16
   16aac:	041b      	lsls	r3, r3, #16
   16aae:	f043 0302 	orr.w	r3, r3, #2
   16ab2:	602b      	str	r3, [r5, #0]
   16ab4:	e7c7      	b.n	16a46 <ip_interface_bind+0x6e>
   16ab6:	2a10      	cmp	r2, #16
   16ab8:	d1c4      	bne.n	16a44 <ip_interface_bind+0x6c>
   16aba:	2204      	movs	r2, #4
   16abc:	8933      	ldrh	r3, [r6, #8]
   16abe:	f106 010c 	add.w	r1, r6, #12
   16ac2:	82e2      	strh	r2, [r4, #22]
   16ac4:	82a3      	strh	r3, [r4, #20]
   16ac6:	f005 f920 	bl	1bd0a <memcpy>
   16aca:	e7d1      	b.n	16a70 <ip_interface_bind+0x98>
   16acc:	6820      	ldr	r0, [r4, #0]
   16ace:	b108      	cbz	r0, 16ad4 <ip_interface_bind+0xfc>
   16ad0:	f7fb ff02 	bl	128d8 <rpc_ip_client_data_free>
   16ad4:	0c36      	lsrs	r6, r6, #16
   16ad6:	0436      	lsls	r6, r6, #16
   16ad8:	4620      	mov	r0, r4
   16ada:	f046 0602 	orr.w	r6, r6, #2
   16ade:	f7fb fef3 	bl	128c8 <rpc_ip_client_message_free>
   16ae2:	2423      	movs	r4, #35	; 0x23
   16ae4:	602e      	str	r6, [r5, #0]
   16ae6:	e7ae      	b.n	16a46 <ip_interface_bind+0x6e>
   16ae8:	2409      	movs	r4, #9
   16aea:	e7ac      	b.n	16a46 <ip_interface_bind+0x6e>
   16aec:	4638      	mov	r0, r7
   16aee:	f000 ff2b 	bl	17948 <interface_socket_from_handle_get>
   16af2:	2800      	cmp	r0, #0
   16af4:	d0ac      	beq.n	16a50 <ip_interface_bind+0x78>
   16af6:	6844      	ldr	r4, [r0, #4]
   16af8:	2c00      	cmp	r4, #0
   16afa:	d0a9      	beq.n	16a50 <ip_interface_bind+0x78>
   16afc:	f8c0 8004 	str.w	r8, [r0, #4]
   16b00:	e7d2      	b.n	16aa8 <ip_interface_bind+0xd0>
   16b02:	bf00      	nop

00016b04 <ip_interface_listen>:
   16b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16b08:	b082      	sub	sp, #8
   16b0a:	4606      	mov	r6, r0
   16b0c:	f000 ff1c 	bl	17948 <interface_socket_from_handle_get>
   16b10:	2800      	cmp	r0, #0
   16b12:	d067      	beq.n	16be4 <ip_interface_listen+0xe0>
   16b14:	6803      	ldr	r3, [r0, #0]
   16b16:	4605      	mov	r5, r0
   16b18:	b29b      	uxth	r3, r3
   16b1a:	2b04      	cmp	r3, #4
   16b1c:	d162      	bne.n	16be4 <ip_interface_listen+0xe0>
   16b1e:	2100      	movs	r1, #0
   16b20:	4a32      	ldr	r2, [pc, #200]	; (16bec <ip_interface_listen+0xe8>)
   16b22:	4630      	mov	r0, r6
   16b24:	f000 fe64 	bl	177f0 <interface_socket_packet_handler_update>
   16b28:	4601      	mov	r1, r0
   16b2a:	2800      	cmp	r0, #0
   16b2c:	d15c      	bne.n	16be8 <ip_interface_listen+0xe4>
   16b2e:	a802      	add	r0, sp, #8
   16b30:	f840 1d04 	str.w	r1, [r0, #-4]!
   16b34:	69af      	ldr	r7, [r5, #24]
   16b36:	f7fb fe9d 	bl	12874 <rpc_ip_client_request_alloc>
   16b3a:	bba8      	cbnz	r0, 16ba8 <ip_interface_listen+0xa4>
   16b3c:	f247 0308 	movw	r3, #28680	; 0x7008
   16b40:	2208      	movs	r2, #8
   16b42:	9c01      	ldr	r4, [sp, #4]
   16b44:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   16b48:	60e3      	str	r3, [r4, #12]
   16b4a:	6127      	str	r7, [r4, #16]
   16b4c:	7260      	strb	r0, [r4, #9]
   16b4e:	72a0      	strb	r0, [r4, #10]
   16b50:	72e0      	strb	r0, [r4, #11]
   16b52:	7222      	strb	r2, [r4, #8]
   16b54:	68a3      	ldr	r3, [r4, #8]
   16b56:	f247 0108 	movw	r1, #28680	; 0x7008
   16b5a:	3304      	adds	r3, #4
   16b5c:	60a3      	str	r3, [r4, #8]
   16b5e:	682b      	ldr	r3, [r5, #0]
   16b60:	4620      	mov	r0, r4
   16b62:	0c1b      	lsrs	r3, r3, #16
   16b64:	041b      	lsls	r3, r3, #16
   16b66:	f043 0306 	orr.w	r3, r3, #6
   16b6a:	602b      	str	r3, [r5, #0]
   16b6c:	682f      	ldr	r7, [r5, #0]
   16b6e:	f7fb fe95 	bl	1289c <rpc_ip_client_request_send>
   16b72:	4680      	mov	r8, r0
   16b74:	b9e8      	cbnz	r0, 16bb2 <ip_interface_listen+0xae>
   16b76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16b7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16b7e:	2107      	movs	r1, #7
   16b80:	4630      	mov	r0, r6
   16b82:	f000 fe6d 	bl	17860 <interface_socket_wait>
   16b86:	4604      	mov	r4, r0
   16b88:	b308      	cbz	r0, 16bce <ip_interface_listen+0xca>
   16b8a:	682b      	ldr	r3, [r5, #0]
   16b8c:	0c1b      	lsrs	r3, r3, #16
   16b8e:	041b      	lsls	r3, r3, #16
   16b90:	f043 0304 	orr.w	r3, r3, #4
   16b94:	602b      	str	r3, [r5, #0]
   16b96:	4620      	mov	r0, r4
   16b98:	f7f8 ff70 	bl	fa7c <bsd_os_errno_set>
   16b9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16ba0:	4620      	mov	r0, r4
   16ba2:	b002      	add	sp, #8
   16ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16ba8:	9c01      	ldr	r4, [sp, #4]
   16baa:	2c00      	cmp	r4, #0
   16bac:	d1d2      	bne.n	16b54 <ip_interface_listen+0x50>
   16bae:	240c      	movs	r4, #12
   16bb0:	e7f1      	b.n	16b96 <ip_interface_listen+0x92>
   16bb2:	6820      	ldr	r0, [r4, #0]
   16bb4:	b108      	cbz	r0, 16bba <ip_interface_listen+0xb6>
   16bb6:	f7fb fe8f 	bl	128d8 <rpc_ip_client_data_free>
   16bba:	0c3f      	lsrs	r7, r7, #16
   16bbc:	043f      	lsls	r7, r7, #16
   16bbe:	4620      	mov	r0, r4
   16bc0:	f047 0704 	orr.w	r7, r7, #4
   16bc4:	f7fb fe80 	bl	128c8 <rpc_ip_client_message_free>
   16bc8:	2423      	movs	r4, #35	; 0x23
   16bca:	602f      	str	r7, [r5, #0]
   16bcc:	e7e3      	b.n	16b96 <ip_interface_listen+0x92>
   16bce:	4630      	mov	r0, r6
   16bd0:	f000 feba 	bl	17948 <interface_socket_from_handle_get>
   16bd4:	2800      	cmp	r0, #0
   16bd6:	d0e3      	beq.n	16ba0 <ip_interface_listen+0x9c>
   16bd8:	6844      	ldr	r4, [r0, #4]
   16bda:	2c00      	cmp	r4, #0
   16bdc:	d0e0      	beq.n	16ba0 <ip_interface_listen+0x9c>
   16bde:	f8c0 8004 	str.w	r8, [r0, #4]
   16be2:	e7d2      	b.n	16b8a <ip_interface_listen+0x86>
   16be4:	2409      	movs	r4, #9
   16be6:	e7d6      	b.n	16b96 <ip_interface_listen+0x92>
   16be8:	2423      	movs	r4, #35	; 0x23
   16bea:	e7d4      	b.n	16b96 <ip_interface_listen+0x92>
   16bec:	00016095 	.word	0x00016095

00016bf0 <ip_interface_accept>:
   16bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bf4:	2500      	movs	r5, #0
   16bf6:	b085      	sub	sp, #20
   16bf8:	460f      	mov	r7, r1
   16bfa:	4690      	mov	r8, r2
   16bfc:	9502      	str	r5, [sp, #8]
   16bfe:	4606      	mov	r6, r0
   16c00:	f000 fea2 	bl	17948 <interface_socket_from_handle_get>
   16c04:	4604      	mov	r4, r0
   16c06:	2800      	cmp	r0, #0
   16c08:	f000 811c 	beq.w	16e44 <ip_interface_accept+0x254>
   16c0c:	6803      	ldr	r3, [r0, #0]
   16c0e:	b29b      	uxth	r3, r3
   16c10:	2b07      	cmp	r3, #7
   16c12:	d10a      	bne.n	16c2a <ip_interface_accept+0x3a>
   16c14:	6803      	ldr	r3, [r0, #0]
   16c16:	6805      	ldr	r5, [r0, #0]
   16c18:	00db      	lsls	r3, r3, #3
   16c1a:	d416      	bmi.n	16c4a <ip_interface_accept+0x5a>
   16c1c:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   16c20:	d019      	beq.n	16c56 <ip_interface_accept+0x66>
   16c22:	6805      	ldr	r5, [r0, #0]
   16c24:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   16c28:	d124      	bne.n	16c74 <ip_interface_accept+0x84>
   16c2a:	f04f 0909 	mov.w	r9, #9
   16c2e:	9b02      	ldr	r3, [sp, #8]
   16c30:	b113      	cbz	r3, 16c38 <ip_interface_accept+0x48>
   16c32:	4628      	mov	r0, r5
   16c34:	f000 fdc6 	bl	177c4 <interface_socket_free>
   16c38:	4648      	mov	r0, r9
   16c3a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   16c3e:	f7f8 ff1d 	bl	fa7c <bsd_os_errno_set>
   16c42:	4648      	mov	r0, r9
   16c44:	b005      	add	sp, #20
   16c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c4a:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   16c4e:	d16d      	bne.n	16d2c <ip_interface_accept+0x13c>
   16c50:	f04f 0923 	mov.w	r9, #35	; 0x23
   16c54:	e7eb      	b.n	16c2e <ip_interface_accept+0x3e>
   16c56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   16c5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16c5e:	4611      	mov	r1, r2
   16c60:	4630      	mov	r0, r6
   16c62:	f000 fdfd 	bl	17860 <interface_socket_wait>
   16c66:	4681      	mov	r9, r0
   16c68:	2800      	cmp	r0, #0
   16c6a:	d07e      	beq.n	16d6a <ip_interface_accept+0x17a>
   16c6c:	6825      	ldr	r5, [r4, #0]
   16c6e:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   16c72:	d0dc      	beq.n	16c2e <ip_interface_accept+0x3e>
   16c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16c78:	2300      	movs	r3, #0
   16c7a:	e9cd 0300 	strd	r0, r3, [sp]
   16c7e:	4a75      	ldr	r2, [pc, #468]	; (16e54 <ip_interface_accept+0x264>)
   16c80:	6921      	ldr	r1, [r4, #16]
   16c82:	a802      	add	r0, sp, #8
   16c84:	f000 fd40 	bl	17708 <interface_socket_allocate>
   16c88:	9b02      	ldr	r3, [sp, #8]
   16c8a:	4605      	mov	r5, r0
   16c8c:	2b00      	cmp	r3, #0
   16c8e:	f000 80dd 	beq.w	16e4c <ip_interface_accept+0x25c>
   16c92:	2100      	movs	r1, #0
   16c94:	6962      	ldr	r2, [r4, #20]
   16c96:	a804      	add	r0, sp, #16
   16c98:	615a      	str	r2, [r3, #20]
   16c9a:	68e2      	ldr	r2, [r4, #12]
   16c9c:	f840 1d04 	str.w	r1, [r0, #-4]!
   16ca0:	60da      	str	r2, [r3, #12]
   16ca2:	6922      	ldr	r2, [r4, #16]
   16ca4:	611a      	str	r2, [r3, #16]
   16ca6:	f8d4 9018 	ldr.w	r9, [r4, #24]
   16caa:	f7fb fde3 	bl	12874 <rpc_ip_client_request_alloc>
   16cae:	2800      	cmp	r0, #0
   16cb0:	d143      	bne.n	16d3a <ip_interface_accept+0x14a>
   16cb2:	f247 030c 	movw	r3, #28684	; 0x700c
   16cb6:	2108      	movs	r1, #8
   16cb8:	f8dd b00c 	ldr.w	fp, [sp, #12]
   16cbc:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   16cc0:	f8cb 300c 	str.w	r3, [fp, #12]
   16cc4:	f8cb 9010 	str.w	r9, [fp, #16]
   16cc8:	f88b 0009 	strb.w	r0, [fp, #9]
   16ccc:	f88b 000a 	strb.w	r0, [fp, #10]
   16cd0:	f88b 000b 	strb.w	r0, [fp, #11]
   16cd4:	f88b 1008 	strb.w	r1, [fp, #8]
   16cd8:	6823      	ldr	r3, [r4, #0]
   16cda:	f247 010c 	movw	r1, #28684	; 0x700c
   16cde:	0c1b      	lsrs	r3, r3, #16
   16ce0:	041b      	lsls	r3, r3, #16
   16ce2:	f043 0308 	orr.w	r3, r3, #8
   16ce6:	6023      	str	r3, [r4, #0]
   16ce8:	4658      	mov	r0, fp
   16cea:	f8d4 9000 	ldr.w	r9, [r4]
   16cee:	f7fb fdd5 	bl	1289c <rpc_ip_client_request_send>
   16cf2:	4682      	mov	sl, r0
   16cf4:	bb48      	cbnz	r0, 16d4a <ip_interface_accept+0x15a>
   16cf6:	6822      	ldr	r2, [r4, #0]
   16cf8:	9900      	ldr	r1, [sp, #0]
   16cfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16cfe:	400a      	ands	r2, r1
   16d00:	6022      	str	r2, [r4, #0]
   16d02:	2109      	movs	r1, #9
   16d04:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16d08:	4630      	mov	r0, r6
   16d0a:	f000 fda9 	bl	17860 <interface_socket_wait>
   16d0e:	4681      	mov	r9, r0
   16d10:	2800      	cmp	r0, #0
   16d12:	f000 8085 	beq.w	16e20 <ip_interface_accept+0x230>
   16d16:	6823      	ldr	r3, [r4, #0]
   16d18:	9a01      	ldr	r2, [sp, #4]
   16d1a:	431a      	orrs	r2, r3
   16d1c:	6022      	str	r2, [r4, #0]
   16d1e:	6823      	ldr	r3, [r4, #0]
   16d20:	0c1b      	lsrs	r3, r3, #16
   16d22:	041b      	lsls	r3, r3, #16
   16d24:	f043 0307 	orr.w	r3, r3, #7
   16d28:	6023      	str	r3, [r4, #0]
   16d2a:	e780      	b.n	16c2e <ip_interface_accept+0x3e>
   16d2c:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   16d30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   16d34:	e9cd 2300 	strd	r2, r3, [sp]
   16d38:	e7a1      	b.n	16c7e <ip_interface_accept+0x8e>
   16d3a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   16d3e:	f04f 090c 	mov.w	r9, #12
   16d42:	f1bb 0f00 	cmp.w	fp, #0
   16d46:	d1c7      	bne.n	16cd8 <ip_interface_accept+0xe8>
   16d48:	e771      	b.n	16c2e <ip_interface_accept+0x3e>
   16d4a:	f8db 0000 	ldr.w	r0, [fp]
   16d4e:	b108      	cbz	r0, 16d54 <ip_interface_accept+0x164>
   16d50:	f7fb fdc2 	bl	128d8 <rpc_ip_client_data_free>
   16d54:	ea4f 4919 	mov.w	r9, r9, lsr #16
   16d58:	4658      	mov	r0, fp
   16d5a:	ea4f 4909 	mov.w	r9, r9, lsl #16
   16d5e:	f7fb fdb3 	bl	128c8 <rpc_ip_client_message_free>
   16d62:	f049 0307 	orr.w	r3, r9, #7
   16d66:	6023      	str	r3, [r4, #0]
   16d68:	e772      	b.n	16c50 <ip_interface_accept+0x60>
   16d6a:	4630      	mov	r0, r6
   16d6c:	f000 fdec 	bl	17948 <interface_socket_from_handle_get>
   16d70:	b130      	cbz	r0, 16d80 <ip_interface_accept+0x190>
   16d72:	f8d0 9004 	ldr.w	r9, [r0, #4]
   16d76:	f1b9 0f00 	cmp.w	r9, #0
   16d7a:	d001      	beq.n	16d80 <ip_interface_accept+0x190>
   16d7c:	6045      	str	r5, [r0, #4]
   16d7e:	e775      	b.n	16c6c <ip_interface_accept+0x7c>
   16d80:	6823      	ldr	r3, [r4, #0]
   16d82:	03d9      	lsls	r1, r3, #15
   16d84:	f53f af76 	bmi.w	16c74 <ip_interface_accept+0x84>
   16d88:	4d33      	ldr	r5, [pc, #204]	; (16e58 <ip_interface_accept+0x268>)
   16d8a:	9902      	ldr	r1, [sp, #8]
   16d8c:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   16d90:	699b      	ldr	r3, [r3, #24]
   16d92:	618b      	str	r3, [r1, #24]
   16d94:	b147      	cbz	r7, 16da8 <ip_interface_accept+0x1b8>
   16d96:	68cb      	ldr	r3, [r1, #12]
   16d98:	2b0a      	cmp	r3, #10
   16d9a:	d024      	beq.n	16de6 <ip_interface_accept+0x1f6>
   16d9c:	2b02      	cmp	r3, #2
   16d9e:	d103      	bne.n	16da8 <ip_interface_accept+0x1b8>
   16da0:	f8d8 2000 	ldr.w	r2, [r8]
   16da4:	2a10      	cmp	r2, #16
   16da6:	d032      	beq.n	16e0e <ip_interface_accept+0x21e>
   16da8:	680a      	ldr	r2, [r1, #0]
   16daa:	482c      	ldr	r0, [pc, #176]	; (16e5c <ip_interface_accept+0x26c>)
   16dac:	4002      	ands	r2, r0
   16dae:	f042 0205 	orr.w	r2, r2, #5
   16db2:	600a      	str	r2, [r1, #0]
   16db4:	9a02      	ldr	r2, [sp, #8]
   16db6:	6811      	ldr	r1, [r2, #0]
   16db8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   16dbc:	6011      	str	r1, [r2, #0]
   16dbe:	6811      	ldr	r1, [r2, #0]
   16dc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   16dc4:	6011      	str	r1, [r2, #0]
   16dc6:	6823      	ldr	r3, [r4, #0]
   16dc8:	4003      	ands	r3, r0
   16dca:	f043 0307 	orr.w	r3, r3, #7
   16dce:	6023      	str	r3, [r4, #0]
   16dd0:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   16dd4:	f7fb fd78 	bl	128c8 <rpc_ip_client_message_free>
   16dd8:	2300      	movs	r3, #0
   16dda:	4648      	mov	r0, r9
   16ddc:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   16de0:	b005      	add	sp, #20
   16de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16de6:	f8d8 2000 	ldr.w	r2, [r8]
   16dea:	2a24      	cmp	r2, #36	; 0x24
   16dec:	d1dc      	bne.n	16da8 <ip_interface_accept+0x1b8>
   16dee:	703a      	strb	r2, [r7, #0]
   16df0:	2210      	movs	r2, #16
   16df2:	607b      	str	r3, [r7, #4]
   16df4:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   16df8:	f107 0010 	add.w	r0, r7, #16
   16dfc:	8b9b      	ldrh	r3, [r3, #28]
   16dfe:	813b      	strh	r3, [r7, #8]
   16e00:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   16e04:	3120      	adds	r1, #32
   16e06:	f004 ff80 	bl	1bd0a <memcpy>
   16e0a:	9902      	ldr	r1, [sp, #8]
   16e0c:	e7cc      	b.n	16da8 <ip_interface_accept+0x1b8>
   16e0e:	703a      	strb	r2, [r7, #0]
   16e10:	607b      	str	r3, [r7, #4]
   16e12:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   16e16:	f107 000c 	add.w	r0, r7, #12
   16e1a:	8b9b      	ldrh	r3, [r3, #28]
   16e1c:	2204      	movs	r2, #4
   16e1e:	e7ee      	b.n	16dfe <ip_interface_accept+0x20e>
   16e20:	4630      	mov	r0, r6
   16e22:	f000 fd91 	bl	17948 <interface_socket_from_handle_get>
   16e26:	b138      	cbz	r0, 16e38 <ip_interface_accept+0x248>
   16e28:	f8d0 9004 	ldr.w	r9, [r0, #4]
   16e2c:	f1b9 0f00 	cmp.w	r9, #0
   16e30:	d002      	beq.n	16e38 <ip_interface_accept+0x248>
   16e32:	f8c0 a004 	str.w	sl, [r0, #4]
   16e36:	e76e      	b.n	16d16 <ip_interface_accept+0x126>
   16e38:	6823      	ldr	r3, [r4, #0]
   16e3a:	9a01      	ldr	r2, [sp, #4]
   16e3c:	46a9      	mov	r9, r5
   16e3e:	4313      	orrs	r3, r2
   16e40:	6023      	str	r3, [r4, #0]
   16e42:	e7a1      	b.n	16d88 <ip_interface_accept+0x198>
   16e44:	4605      	mov	r5, r0
   16e46:	f04f 0909 	mov.w	r9, #9
   16e4a:	e6f0      	b.n	16c2e <ip_interface_accept+0x3e>
   16e4c:	f04f 090c 	mov.w	r9, #12
   16e50:	e6f2      	b.n	16c38 <ip_interface_accept+0x48>
   16e52:	bf00      	nop
   16e54:	00016095 	.word	0x00016095
   16e58:	200211f0 	.word	0x200211f0
   16e5c:	ffff0000 	.word	0xffff0000

00016e60 <ip_interface_setopt>:
   16e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16e64:	2901      	cmp	r1, #1
   16e66:	b084      	sub	sp, #16
   16e68:	f040 809c 	bne.w	16fa4 <ip_interface_setopt+0x144>
   16e6c:	460e      	mov	r6, r1
   16e6e:	4690      	mov	r8, r2
   16e70:	461d      	mov	r5, r3
   16e72:	4607      	mov	r7, r0
   16e74:	f000 fd68 	bl	17948 <interface_socket_from_handle_get>
   16e78:	4604      	mov	r4, r0
   16e7a:	2800      	cmp	r0, #0
   16e7c:	f000 80a5 	beq.w	16fca <ip_interface_setopt+0x16a>
   16e80:	f1b8 0f19 	cmp.w	r8, #25
   16e84:	d16e      	bne.n	16f64 <ip_interface_setopt+0x104>
   16e86:	2d00      	cmp	r5, #0
   16e88:	f000 8092 	beq.w	16fb0 <ip_interface_setopt+0x150>
   16e8c:	4628      	mov	r0, r5
   16e8e:	f004 ff0a 	bl	1bca6 <strlen>
   16e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16e94:	4298      	cmp	r0, r3
   16e96:	f040 808b 	bne.w	16fb0 <ip_interface_setopt+0x150>
   16e9a:	6823      	ldr	r3, [r4, #0]
   16e9c:	b29b      	uxth	r3, r3
   16e9e:	2b02      	cmp	r3, #2
   16ea0:	d173      	bne.n	16f8a <ip_interface_setopt+0x12a>
   16ea2:	4629      	mov	r1, r5
   16ea4:	68e0      	ldr	r0, [r4, #12]
   16ea6:	f7fe fb91 	bl	155cc <pdn_interface_pdn_id_get>
   16eaa:	9002      	str	r0, [sp, #8]
   16eac:	3001      	adds	r0, #1
   16eae:	bf08      	it	eq
   16eb0:	2516      	moveq	r5, #22
   16eb2:	d04e      	beq.n	16f52 <ip_interface_setopt+0xf2>
   16eb4:	6823      	ldr	r3, [r4, #0]
   16eb6:	025b      	lsls	r3, r3, #9
   16eb8:	d44a      	bmi.n	16f50 <ip_interface_setopt+0xf0>
   16eba:	6823      	ldr	r3, [r4, #0]
   16ebc:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
   16ec0:	d146      	bne.n	16f50 <ip_interface_setopt+0xf0>
   16ec2:	6826      	ldr	r6, [r4, #0]
   16ec4:	6822      	ldr	r2, [r4, #0]
   16ec6:	a804      	add	r0, sp, #16
   16ec8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   16ecc:	6022      	str	r2, [r4, #0]
   16ece:	2104      	movs	r1, #4
   16ed0:	f840 3d04 	str.w	r3, [r0, #-4]!
   16ed4:	f8d4 8018 	ldr.w	r8, [r4, #24]
   16ed8:	f7fb fccc 	bl	12874 <rpc_ip_client_request_alloc>
   16edc:	2800      	cmp	r0, #0
   16ede:	d14e      	bne.n	16f7e <ip_interface_setopt+0x11e>
   16ee0:	f247 0203 	movw	r2, #28675	; 0x7003
   16ee4:	2300      	movs	r3, #0
   16ee6:	2108      	movs	r1, #8
   16ee8:	9d03      	ldr	r5, [sp, #12]
   16eea:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   16eee:	60ea      	str	r2, [r5, #12]
   16ef0:	f8c5 8010 	str.w	r8, [r5, #16]
   16ef4:	7229      	strb	r1, [r5, #8]
   16ef6:	726b      	strb	r3, [r5, #9]
   16ef8:	72ab      	strb	r3, [r5, #10]
   16efa:	72eb      	strb	r3, [r5, #11]
   16efc:	f04f 0c08 	mov.w	ip, #8
   16f00:	2300      	movs	r3, #0
   16f02:	2010      	movs	r0, #16
   16f04:	2130      	movs	r1, #48	; 0x30
   16f06:	68aa      	ldr	r2, [r5, #8]
   16f08:	756b      	strb	r3, [r5, #21]
   16f0a:	4462      	add	r2, ip
   16f0c:	60aa      	str	r2, [r5, #8]
   16f0e:	75ab      	strb	r3, [r5, #22]
   16f10:	75eb      	strb	r3, [r5, #23]
   16f12:	76ab      	strb	r3, [r5, #26]
   16f14:	76eb      	strb	r3, [r5, #27]
   16f16:	f885 c014 	strb.w	ip, [r5, #20]
   16f1a:	7628      	strb	r0, [r5, #24]
   16f1c:	7669      	strb	r1, [r5, #25]
   16f1e:	2204      	movs	r2, #4
   16f20:	eb0d 010c 	add.w	r1, sp, ip
   16f24:	6828      	ldr	r0, [r5, #0]
   16f26:	f004 fef0 	bl	1bd0a <memcpy>
   16f2a:	f247 0103 	movw	r1, #28675	; 0x7003
   16f2e:	4628      	mov	r0, r5
   16f30:	f7fb fcb4 	bl	1289c <rpc_ip_client_request_send>
   16f34:	4680      	mov	r8, r0
   16f36:	bb50      	cbnz	r0, 16f8e <ip_interface_setopt+0x12e>
   16f38:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   16f3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16f40:	4611      	mov	r1, r2
   16f42:	4638      	mov	r0, r7
   16f44:	f000 fc8c 	bl	17860 <interface_socket_wait>
   16f48:	4605      	mov	r5, r0
   16f4a:	b398      	cbz	r0, 16fb4 <ip_interface_setopt+0x154>
   16f4c:	6026      	str	r6, [r4, #0]
   16f4e:	e000      	b.n	16f52 <ip_interface_setopt+0xf2>
   16f50:	2523      	movs	r5, #35	; 0x23
   16f52:	4628      	mov	r0, r5
   16f54:	f7f8 fd92 	bl	fa7c <bsd_os_errno_set>
   16f58:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   16f5c:	4628      	mov	r0, r5
   16f5e:	b004      	add	sp, #16
   16f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16f66:	4642      	mov	r2, r8
   16f68:	9300      	str	r3, [sp, #0]
   16f6a:	4631      	mov	r1, r6
   16f6c:	462b      	mov	r3, r5
   16f6e:	4638      	mov	r0, r7
   16f70:	f000 fd12 	bl	17998 <interface_socket_setopt>
   16f74:	4605      	mov	r5, r0
   16f76:	4628      	mov	r0, r5
   16f78:	b004      	add	sp, #16
   16f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16f7e:	9d03      	ldr	r5, [sp, #12]
   16f80:	2d00      	cmp	r5, #0
   16f82:	d1bb      	bne.n	16efc <ip_interface_setopt+0x9c>
   16f84:	6026      	str	r6, [r4, #0]
   16f86:	250c      	movs	r5, #12
   16f88:	e7e3      	b.n	16f52 <ip_interface_setopt+0xf2>
   16f8a:	2509      	movs	r5, #9
   16f8c:	e7e1      	b.n	16f52 <ip_interface_setopt+0xf2>
   16f8e:	6828      	ldr	r0, [r5, #0]
   16f90:	b108      	cbz	r0, 16f96 <ip_interface_setopt+0x136>
   16f92:	f7fb fca1 	bl	128d8 <rpc_ip_client_data_free>
   16f96:	4628      	mov	r0, r5
   16f98:	f7fb fc96 	bl	128c8 <rpc_ip_client_message_free>
   16f9c:	2523      	movs	r5, #35	; 0x23
   16f9e:	6026      	str	r6, [r4, #0]
   16fa0:	6026      	str	r6, [r4, #0]
   16fa2:	e7d6      	b.n	16f52 <ip_interface_setopt+0xf2>
   16fa4:	202a      	movs	r0, #42	; 0x2a
   16fa6:	f7f8 fd69 	bl	fa7c <bsd_os_errno_set>
   16faa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   16fae:	e7d5      	b.n	16f5c <ip_interface_setopt+0xfc>
   16fb0:	250e      	movs	r5, #14
   16fb2:	e7ce      	b.n	16f52 <ip_interface_setopt+0xf2>
   16fb4:	4638      	mov	r0, r7
   16fb6:	f000 fcc7 	bl	17948 <interface_socket_from_handle_get>
   16fba:	b120      	cbz	r0, 16fc6 <ip_interface_setopt+0x166>
   16fbc:	6845      	ldr	r5, [r0, #4]
   16fbe:	b115      	cbz	r5, 16fc6 <ip_interface_setopt+0x166>
   16fc0:	f8c0 8004 	str.w	r8, [r0, #4]
   16fc4:	e7c2      	b.n	16f4c <ip_interface_setopt+0xec>
   16fc6:	6026      	str	r6, [r4, #0]
   16fc8:	e7c8      	b.n	16f5c <ip_interface_setopt+0xfc>
   16fca:	2009      	movs	r0, #9
   16fcc:	f7f8 fd56 	bl	fa7c <bsd_os_errno_set>
   16fd0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   16fd4:	e7c2      	b.n	16f5c <ip_interface_setopt+0xfc>
   16fd6:	bf00      	nop

00016fd8 <ip_interface_getopt>:
   16fd8:	f000 bd14 	b.w	17a04 <interface_socket_getopt>

00016fdc <ip_interface_getaddrinfo>:
   16fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fe0:	f04f 0c00 	mov.w	ip, #0
   16fe4:	2401      	movs	r4, #1
   16fe6:	4e72      	ldr	r6, [pc, #456]	; (171b0 <ip_interface_getaddrinfo+0x1d4>)
   16fe8:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 171bc <ip_interface_getaddrinfo+0x1e0>
   16fec:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 171c0 <ip_interface_getaddrinfo+0x1e4>
   16ff0:	b085      	sub	sp, #20
   16ff2:	4607      	mov	r7, r0
   16ff4:	4615      	mov	r5, r2
   16ff6:	9301      	str	r3, [sp, #4]
   16ff8:	f8a6 c000 	strh.w	ip, [r6]
   16ffc:	f8ca 4000 	str.w	r4, [sl]
   17000:	f8c9 4000 	str.w	r4, [r9]
   17004:	b171      	cbz	r1, 17024 <ip_interface_getaddrinfo+0x48>
   17006:	4608      	mov	r0, r1
   17008:	220a      	movs	r2, #10
   1700a:	4661      	mov	r1, ip
   1700c:	f004 fd14 	bl	1ba38 <strtol>
   17010:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   17014:	1e42      	subs	r2, r0, #1
   17016:	429a      	cmp	r2, r3
   17018:	f200 8083 	bhi.w	17122 <ip_interface_getaddrinfo+0x146>
   1701c:	0203      	lsls	r3, r0, #8
   1701e:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   17022:	8030      	strh	r0, [r6, #0]
   17024:	f8df 819c 	ldr.w	r8, [pc, #412]	; 171c4 <ip_interface_getaddrinfo+0x1e8>
   17028:	f8d8 3000 	ldr.w	r3, [r8]
   1702c:	2b00      	cmp	r3, #0
   1702e:	d174      	bne.n	1711a <ip_interface_getaddrinfo+0x13e>
   17030:	4a60      	ldr	r2, [pc, #384]	; (171b4 <ip_interface_getaddrinfo+0x1d8>)
   17032:	6013      	str	r3, [r2, #0]
   17034:	4a60      	ldr	r2, [pc, #384]	; (171b8 <ip_interface_getaddrinfo+0x1dc>)
   17036:	6013      	str	r3, [r2, #0]
   17038:	2f00      	cmp	r7, #0
   1703a:	d062      	beq.n	17102 <ip_interface_getaddrinfo+0x126>
   1703c:	4638      	mov	r0, r7
   1703e:	f004 fe32 	bl	1bca6 <strlen>
   17042:	4683      	mov	fp, r0
   17044:	b125      	cbz	r5, 17050 <ip_interface_getaddrinfo+0x74>
   17046:	69ea      	ldr	r2, [r5, #28]
   17048:	b112      	cbz	r2, 17050 <ip_interface_getaddrinfo+0x74>
   1704a:	6851      	ldr	r1, [r2, #4]
   1704c:	2966      	cmp	r1, #102	; 0x66
   1704e:	d06c      	beq.n	1712a <ip_interface_getaddrinfo+0x14e>
   17050:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17054:	2100      	movs	r1, #0
   17056:	ae04      	add	r6, sp, #16
   17058:	f846 1d04 	str.w	r1, [r6, #-4]!
   1705c:	4630      	mov	r0, r6
   1705e:	4659      	mov	r1, fp
   17060:	9200      	str	r2, [sp, #0]
   17062:	f7fb fc07 	bl	12874 <rpc_ip_client_request_alloc>
   17066:	9a00      	ldr	r2, [sp, #0]
   17068:	2800      	cmp	r0, #0
   1706a:	d14c      	bne.n	17106 <ip_interface_getaddrinfo+0x12a>
   1706c:	f247 010d 	movw	r1, #28685	; 0x700d
   17070:	f04f 0c08 	mov.w	ip, #8
   17074:	9c03      	ldr	r4, [sp, #12]
   17076:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   1707a:	60e1      	str	r1, [r4, #12]
   1707c:	6122      	str	r2, [r4, #16]
   1707e:	7260      	strb	r0, [r4, #9]
   17080:	72a0      	strb	r0, [r4, #10]
   17082:	72e0      	strb	r0, [r4, #11]
   17084:	f884 c008 	strb.w	ip, [r4, #8]
   17088:	2d00      	cmp	r5, #0
   1708a:	d076      	beq.n	1717a <ip_interface_getaddrinfo+0x19e>
   1708c:	686a      	ldr	r2, [r5, #4]
   1708e:	f022 0108 	bic.w	r1, r2, #8
   17092:	2902      	cmp	r1, #2
   17094:	d05c      	beq.n	17150 <ip_interface_getaddrinfo+0x174>
   17096:	2a05      	cmp	r2, #5
   17098:	d178      	bne.n	1718c <ip_interface_getaddrinfo+0x1b0>
   1709a:	68a9      	ldr	r1, [r5, #8]
   1709c:	2902      	cmp	r1, #2
   1709e:	f8c9 1000 	str.w	r1, [r9]
   170a2:	d061      	beq.n	17168 <ip_interface_getaddrinfo+0x18c>
   170a4:	61a2      	str	r2, [r4, #24]
   170a6:	68ea      	ldr	r2, [r5, #12]
   170a8:	6222      	str	r2, [r4, #32]
   170aa:	68aa      	ldr	r2, [r5, #8]
   170ac:	61e2      	str	r2, [r4, #28]
   170ae:	682a      	ldr	r2, [r5, #0]
   170b0:	6162      	str	r2, [r4, #20]
   170b2:	68a2      	ldr	r2, [r4, #8]
   170b4:	3210      	adds	r2, #16
   170b6:	60a2      	str	r2, [r4, #8]
   170b8:	b12f      	cbz	r7, 170c6 <ip_interface_getaddrinfo+0xea>
   170ba:	6820      	ldr	r0, [r4, #0]
   170bc:	b118      	cbz	r0, 170c6 <ip_interface_getaddrinfo+0xea>
   170be:	465a      	mov	r2, fp
   170c0:	4639      	mov	r1, r7
   170c2:	f004 fe22 	bl	1bd0a <memcpy>
   170c6:	2301      	movs	r3, #1
   170c8:	f247 010d 	movw	r1, #28685	; 0x700d
   170cc:	4620      	mov	r0, r4
   170ce:	f8c8 3000 	str.w	r3, [r8]
   170d2:	f7fb fbe3 	bl	1289c <rpc_ip_client_request_send>
   170d6:	2800      	cmp	r0, #0
   170d8:	d156      	bne.n	17188 <ip_interface_getaddrinfo+0x1ac>
   170da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   170de:	9303      	str	r3, [sp, #12]
   170e0:	4631      	mov	r1, r6
   170e2:	4620      	mov	r0, r4
   170e4:	f7f8 fc36 	bl	f954 <bsd_os_timedwait>
   170e8:	f8d8 3000 	ldr.w	r3, [r8]
   170ec:	2b01      	cmp	r3, #1
   170ee:	d0f7      	beq.n	170e0 <ip_interface_getaddrinfo+0x104>
   170f0:	4b31      	ldr	r3, [pc, #196]	; (171b8 <ip_interface_getaddrinfo+0x1dc>)
   170f2:	6818      	ldr	r0, [r3, #0]
   170f4:	2800      	cmp	r0, #0
   170f6:	d13b      	bne.n	17170 <ip_interface_getaddrinfo+0x194>
   170f8:	4b2e      	ldr	r3, [pc, #184]	; (171b4 <ip_interface_getaddrinfo+0x1d8>)
   170fa:	9a01      	ldr	r2, [sp, #4]
   170fc:	681b      	ldr	r3, [r3, #0]
   170fe:	6013      	str	r3, [r2, #0]
   17100:	e00c      	b.n	1711c <ip_interface_getaddrinfo+0x140>
   17102:	46bb      	mov	fp, r7
   17104:	e79e      	b.n	17044 <ip_interface_getaddrinfo+0x68>
   17106:	9c03      	ldr	r4, [sp, #12]
   17108:	2c00      	cmp	r4, #0
   1710a:	d1bd      	bne.n	17088 <ip_interface_getaddrinfo+0xac>
   1710c:	200c      	movs	r0, #12
   1710e:	2300      	movs	r3, #0
   17110:	f8c8 3000 	str.w	r3, [r8]
   17114:	b005      	add	sp, #20
   17116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1711a:	2073      	movs	r0, #115	; 0x73
   1711c:	b005      	add	sp, #20
   1711e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17122:	2016      	movs	r0, #22
   17124:	b005      	add	sp, #20
   17126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1712a:	6891      	ldr	r1, [r2, #8]
   1712c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   17130:	d18e      	bne.n	17050 <ip_interface_getaddrinfo+0x74>
   17132:	f240 2102 	movw	r1, #514	; 0x202
   17136:	68d0      	ldr	r0, [r2, #12]
   17138:	4288      	cmp	r0, r1
   1713a:	d189      	bne.n	17050 <ip_interface_getaddrinfo+0x74>
   1713c:	6991      	ldr	r1, [r2, #24]
   1713e:	2900      	cmp	r1, #0
   17140:	d086      	beq.n	17050 <ip_interface_getaddrinfo+0x74>
   17142:	6868      	ldr	r0, [r5, #4]
   17144:	f7fe fa42 	bl	155cc <pdn_interface_pdn_id_get>
   17148:	1c43      	adds	r3, r0, #1
   1714a:	d081      	beq.n	17050 <ip_interface_getaddrinfo+0x74>
   1714c:	4602      	mov	r2, r0
   1714e:	e781      	b.n	17054 <ip_interface_getaddrinfo+0x78>
   17150:	68a9      	ldr	r1, [r5, #8]
   17152:	2902      	cmp	r1, #2
   17154:	f8c9 1000 	str.w	r1, [r9]
   17158:	d006      	beq.n	17168 <ip_interface_getaddrinfo+0x18c>
   1715a:	2a05      	cmp	r2, #5
   1715c:	d0a2      	beq.n	170a4 <ip_interface_getaddrinfo+0xc8>
   1715e:	2a0a      	cmp	r2, #10
   17160:	bf14      	ite	ne
   17162:	2201      	movne	r2, #1
   17164:	2202      	moveq	r2, #2
   17166:	e79d      	b.n	170a4 <ip_interface_getaddrinfo+0xc8>
   17168:	2102      	movs	r1, #2
   1716a:	f8ca 1000 	str.w	r1, [sl]
   1716e:	e7f4      	b.n	1715a <ip_interface_getaddrinfo+0x17e>
   17170:	4b11      	ldr	r3, [pc, #68]	; (171b8 <ip_interface_getaddrinfo+0x1dc>)
   17172:	6818      	ldr	r0, [r3, #0]
   17174:	2800      	cmp	r0, #0
   17176:	d0d1      	beq.n	1711c <ip_interface_getaddrinfo+0x140>
   17178:	e7c9      	b.n	1710e <ip_interface_getaddrinfo+0x132>
   1717a:	4629      	mov	r1, r5
   1717c:	2210      	movs	r2, #16
   1717e:	f104 0014 	add.w	r0, r4, #20
   17182:	f004 fdec 	bl	1bd5e <memset>
   17186:	e794      	b.n	170b2 <ip_interface_getaddrinfo+0xd6>
   17188:	2023      	movs	r0, #35	; 0x23
   1718a:	e7c0      	b.n	1710e <ip_interface_getaddrinfo+0x132>
   1718c:	202f      	movs	r0, #47	; 0x2f
   1718e:	f7f8 fc75 	bl	fa7c <bsd_os_errno_set>
   17192:	68a2      	ldr	r2, [r4, #8]
   17194:	3210      	adds	r2, #16
   17196:	60a2      	str	r2, [r4, #8]
   17198:	b917      	cbnz	r7, 171a0 <ip_interface_getaddrinfo+0x1c4>
   1719a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1719e:	e7b6      	b.n	1710e <ip_interface_getaddrinfo+0x132>
   171a0:	6820      	ldr	r0, [r4, #0]
   171a2:	2800      	cmp	r0, #0
   171a4:	d0f9      	beq.n	1719a <ip_interface_getaddrinfo+0x1be>
   171a6:	465a      	mov	r2, fp
   171a8:	4639      	mov	r1, r7
   171aa:	f004 fdae 	bl	1bd0a <memcpy>
   171ae:	e7f4      	b.n	1719a <ip_interface_getaddrinfo+0x1be>
   171b0:	20021e82 	.word	0x20021e82
   171b4:	200211e8 	.word	0x200211e8
   171b8:	200211e0 	.word	0x200211e0
   171bc:	200211d8 	.word	0x200211d8
   171c0:	200211dc 	.word	0x200211dc
   171c4:	200211e4 	.word	0x200211e4

000171c8 <ip_interface_freeaddrinfo>:
   171c8:	b538      	push	{r3, r4, r5, lr}
   171ca:	4c0b      	ldr	r4, [pc, #44]	; (171f8 <ip_interface_freeaddrinfo+0x30>)
   171cc:	6823      	ldr	r3, [r4, #0]
   171ce:	2b02      	cmp	r3, #2
   171d0:	d000      	beq.n	171d4 <ip_interface_freeaddrinfo+0xc>
   171d2:	bd38      	pop	{r3, r4, r5, pc}
   171d4:	b130      	cbz	r0, 171e4 <ip_interface_freeaddrinfo+0x1c>
   171d6:	4605      	mov	r5, r0
   171d8:	6940      	ldr	r0, [r0, #20]
   171da:	f7fb fb1d 	bl	12818 <nrf_free>
   171de:	4628      	mov	r0, r5
   171e0:	f7fb fb1a 	bl	12818 <nrf_free>
   171e4:	2300      	movs	r3, #0
   171e6:	4a05      	ldr	r2, [pc, #20]	; (171fc <ip_interface_freeaddrinfo+0x34>)
   171e8:	4905      	ldr	r1, [pc, #20]	; (17200 <ip_interface_freeaddrinfo+0x38>)
   171ea:	6023      	str	r3, [r4, #0]
   171ec:	6013      	str	r3, [r2, #0]
   171ee:	6808      	ldr	r0, [r1, #0]
   171f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   171f4:	f7fb bb70 	b.w	128d8 <rpc_ip_client_data_free>
   171f8:	200211e4 	.word	0x200211e4
   171fc:	200211e0 	.word	0x200211e0
   17200:	200211ec 	.word	0x200211ec

00017204 <rpc_ip_event_handler>:
   17204:	f248 030d 	movw	r3, #32781	; 0x800d
   17208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1720c:	4299      	cmp	r1, r3
   1720e:	b089      	sub	sp, #36	; 0x24
   17210:	4605      	mov	r5, r0
   17212:	d062      	beq.n	172da <rpc_ip_event_handler+0xd6>
   17214:	f248 030f 	movw	r3, #32783	; 0x800f
   17218:	4299      	cmp	r1, r3
   1721a:	460c      	mov	r4, r1
   1721c:	d04b      	beq.n	172b6 <rpc_ip_event_handler+0xb2>
   1721e:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   17222:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   17226:	68c0      	ldr	r0, [r0, #12]
   17228:	d07b      	beq.n	17322 <rpc_ip_event_handler+0x11e>
   1722a:	0c07      	lsrs	r7, r0, #16
   1722c:	4638      	mov	r0, r7
   1722e:	f000 fb8b 	bl	17948 <interface_socket_from_handle_get>
   17232:	4606      	mov	r6, r0
   17234:	2800      	cmp	r0, #0
   17236:	d05f      	beq.n	172f8 <rpc_ip_event_handler+0xf4>
   17238:	4601      	mov	r1, r0
   1723a:	4623      	mov	r3, r4
   1723c:	462a      	mov	r2, r5
   1723e:	4638      	mov	r0, r7
   17240:	f7fb ff8c 	bl	1315c <tls_rpc_ip_event_handler>
   17244:	2800      	cmp	r0, #0
   17246:	d053      	beq.n	172f0 <rpc_ip_event_handler+0xec>
   17248:	f248 0307 	movw	r3, #32775	; 0x8007
   1724c:	429c      	cmp	r4, r3
   1724e:	d97c      	bls.n	1734a <rpc_ip_event_handler+0x146>
   17250:	f248 030c 	movw	r3, #32780	; 0x800c
   17254:	429c      	cmp	r4, r3
   17256:	d068      	beq.n	1732a <rpc_ip_event_handler+0x126>
   17258:	f240 8118 	bls.w	1748c <rpc_ip_event_handler+0x288>
   1725c:	f249 0302 	movw	r3, #36866	; 0x9002
   17260:	429c      	cmp	r4, r3
   17262:	f000 8191 	beq.w	17588 <rpc_ip_event_handler+0x384>
   17266:	f249 0303 	movw	r3, #36867	; 0x9003
   1726a:	429c      	cmp	r4, r3
   1726c:	f000 81a6 	beq.w	175bc <rpc_ip_event_handler+0x3b8>
   17270:	f249 0301 	movw	r3, #36865	; 0x9001
   17274:	429c      	cmp	r4, r3
   17276:	d13f      	bne.n	172f8 <rpc_ip_event_handler+0xf4>
   17278:	6834      	ldr	r4, [r6, #0]
   1727a:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   1727e:	f000 81be 	beq.w	175fe <rpc_ip_event_handler+0x3fa>
   17282:	68ab      	ldr	r3, [r5, #8]
   17284:	2b04      	cmp	r3, #4
   17286:	f200 81f4 	bhi.w	17672 <rpc_ip_event_handler+0x46e>
   1728a:	2400      	movs	r4, #0
   1728c:	4627      	mov	r7, r4
   1728e:	6829      	ldr	r1, [r5, #0]
   17290:	686a      	ldr	r2, [r5, #4]
   17292:	e9cd 7406 	strd	r7, r4, [sp, #24]
   17296:	e9cd 1204 	strd	r1, r2, [sp, #16]
   1729a:	69f0      	ldr	r0, [r6, #28]
   1729c:	a904      	add	r1, sp, #16
   1729e:	6803      	ldr	r3, [r0, #0]
   172a0:	685b      	ldr	r3, [r3, #4]
   172a2:	4798      	blx	r3
   172a4:	3001      	adds	r0, #1
   172a6:	f000 81d0 	beq.w	1764a <rpc_ip_event_handler+0x446>
   172aa:	6833      	ldr	r3, [r6, #0]
   172ac:	2000      	movs	r0, #0
   172ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   172b2:	6033      	str	r3, [r6, #0]
   172b4:	e00e      	b.n	172d4 <rpc_ip_event_handler+0xd0>
   172b6:	6943      	ldr	r3, [r0, #20]
   172b8:	2001      	movs	r0, #1
   172ba:	2b10      	cmp	r3, #16
   172bc:	49b5      	ldr	r1, [pc, #724]	; (17594 <rpc_ip_event_handler+0x390>)
   172be:	bf88      	it	hi
   172c0:	222d      	movhi	r2, #45	; 0x2d
   172c2:	7008      	strb	r0, [r1, #0]
   172c4:	f04f 0000 	mov.w	r0, #0
   172c8:	bf9c      	itt	ls
   172ca:	4ab3      	ldrls	r2, [pc, #716]	; (17598 <rpc_ip_event_handler+0x394>)
   172cc:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   172d0:	4bb2      	ldr	r3, [pc, #712]	; (1759c <rpc_ip_event_handler+0x398>)
   172d2:	601a      	str	r2, [r3, #0]
   172d4:	b009      	add	sp, #36	; 0x24
   172d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172da:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 175b0 <rpc_ip_event_handler+0x3ac>
   172de:	6807      	ldr	r7, [r0, #0]
   172e0:	f8d9 3000 	ldr.w	r3, [r9]
   172e4:	2b01      	cmp	r3, #1
   172e6:	d00b      	beq.n	17300 <rpc_ip_event_handler+0xfc>
   172e8:	b117      	cbz	r7, 172f0 <rpc_ip_event_handler+0xec>
   172ea:	4638      	mov	r0, r7
   172ec:	f7fb faf4 	bl	128d8 <rpc_ip_client_data_free>
   172f0:	2000      	movs	r0, #0
   172f2:	b009      	add	sp, #36	; 0x24
   172f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172f8:	6828      	ldr	r0, [r5, #0]
   172fa:	2800      	cmp	r0, #0
   172fc:	d1f6      	bne.n	172ec <rpc_ip_event_handler+0xe8>
   172fe:	e7f7      	b.n	172f0 <rpc_ip_event_handler+0xec>
   17300:	6943      	ldr	r3, [r0, #20]
   17302:	2b00      	cmp	r3, #0
   17304:	d045      	beq.n	17392 <rpc_ip_event_handler+0x18e>
   17306:	2b10      	cmp	r3, #16
   17308:	bf96      	itet	ls
   1730a:	4aa3      	ldrls	r2, [pc, #652]	; (17598 <rpc_ip_event_handler+0x394>)
   1730c:	232d      	movhi	r3, #45	; 0x2d
   1730e:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   17312:	2202      	movs	r2, #2
   17314:	49a2      	ldr	r1, [pc, #648]	; (175a0 <rpc_ip_event_handler+0x39c>)
   17316:	600b      	str	r3, [r1, #0]
   17318:	f8c9 2000 	str.w	r2, [r9]
   1731c:	2f00      	cmp	r7, #0
   1731e:	d1e4      	bne.n	172ea <rpc_ip_event_handler+0xe6>
   17320:	e7e6      	b.n	172f0 <rpc_ip_event_handler+0xec>
   17322:	f000 fabf 	bl	178a4 <interface_from_internal_id_search>
   17326:	4607      	mov	r7, r0
   17328:	e780      	b.n	1722c <rpc_ip_event_handler+0x28>
   1732a:	6833      	ldr	r3, [r6, #0]
   1732c:	b29b      	uxth	r3, r3
   1732e:	2b08      	cmp	r3, #8
   17330:	d1de      	bne.n	172f0 <rpc_ip_event_handler+0xec>
   17332:	696b      	ldr	r3, [r5, #20]
   17334:	2b00      	cmp	r3, #0
   17336:	f000 818a 	beq.w	1764e <rpc_ip_event_handler+0x44a>
   1733a:	2b10      	cmp	r3, #16
   1733c:	f200 815d 	bhi.w	175fa <rpc_ip_event_handler+0x3f6>
   17340:	4a95      	ldr	r2, [pc, #596]	; (17598 <rpc_ip_event_handler+0x394>)
   17342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17346:	6073      	str	r3, [r6, #4]
   17348:	e7d2      	b.n	172f0 <rpc_ip_event_handler+0xec>
   1734a:	f248 0306 	movw	r3, #32774	; 0x8006
   1734e:	429c      	cmp	r4, r3
   17350:	f080 8109 	bcs.w	17566 <rpc_ip_event_handler+0x362>
   17354:	f248 0302 	movw	r3, #32770	; 0x8002
   17358:	429c      	cmp	r4, r3
   1735a:	f000 80ec 	beq.w	17536 <rpc_ip_event_handler+0x332>
   1735e:	f240 80be 	bls.w	174de <rpc_ip_event_handler+0x2da>
   17362:	f248 0303 	movw	r3, #32771	; 0x8003
   17366:	429c      	cmp	r4, r3
   17368:	f000 80ca 	beq.w	17500 <rpc_ip_event_handler+0x2fc>
   1736c:	f248 0305 	movw	r3, #32773	; 0x8005
   17370:	429c      	cmp	r4, r3
   17372:	d1c1      	bne.n	172f8 <rpc_ip_event_handler+0xf4>
   17374:	6833      	ldr	r3, [r6, #0]
   17376:	b29b      	uxth	r3, r3
   17378:	2b03      	cmp	r3, #3
   1737a:	d1b9      	bne.n	172f0 <rpc_ip_event_handler+0xec>
   1737c:	696b      	ldr	r3, [r5, #20]
   1737e:	2b00      	cmp	r3, #0
   17380:	d1db      	bne.n	1733a <rpc_ip_event_handler+0x136>
   17382:	6833      	ldr	r3, [r6, #0]
   17384:	2000      	movs	r0, #0
   17386:	0c1b      	lsrs	r3, r3, #16
   17388:	041b      	lsls	r3, r3, #16
   1738a:	f043 0304 	orr.w	r3, r3, #4
   1738e:	6033      	str	r3, [r6, #0]
   17390:	e7a0      	b.n	172d4 <rpc_ip_event_handler+0xd0>
   17392:	4b84      	ldr	r3, [pc, #528]	; (175a4 <rpc_ip_event_handler+0x3a0>)
   17394:	601f      	str	r7, [r3, #0]
   17396:	6984      	ldr	r4, [r0, #24]
   17398:	0163      	lsls	r3, r4, #5
   1739a:	4618      	mov	r0, r3
   1739c:	9303      	str	r3, [sp, #12]
   1739e:	f7fb fa31 	bl	12804 <nrf_malloc>
   173a2:	9002      	str	r0, [sp, #8]
   173a4:	2800      	cmp	r0, #0
   173a6:	f000 808a 	beq.w	174be <rpc_ip_event_handler+0x2ba>
   173aa:	00e5      	lsls	r5, r4, #3
   173ac:	1928      	adds	r0, r5, r4
   173ae:	0080      	lsls	r0, r0, #2
   173b0:	f7fb fa28 	bl	12804 <nrf_malloc>
   173b4:	2800      	cmp	r0, #0
   173b6:	f000 811c 	beq.w	175f2 <rpc_ip_event_handler+0x3ee>
   173ba:	2c00      	cmp	r4, #0
   173bc:	d05e      	beq.n	1747c <rpc_ip_event_handler+0x278>
   173be:	3510      	adds	r5, #16
   173c0:	1943      	adds	r3, r0, r5
   173c2:	9301      	str	r3, [sp, #4]
   173c4:	9b02      	ldr	r3, [sp, #8]
   173c6:	2404      	movs	r4, #4
   173c8:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 175b4 <rpc_ip_event_handler+0x3b0>
   173cc:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 175b8 <rpc_ip_event_handler+0x3b4>
   173d0:	f100 0810 	add.w	r8, r0, #16
   173d4:	f103 0620 	add.w	r6, r3, #32
   173d8:	e01d      	b.n	17416 <rpc_ip_event_handler+0x212>
   173da:	220a      	movs	r2, #10
   173dc:	f848 2c0c 	str.w	r2, [r8, #-12]
   173e0:	f04f 0224 	mov.w	r2, #36	; 0x24
   173e4:	4640      	mov	r0, r8
   173e6:	f808 2c10 	strb.w	r2, [r8, #-16]
   173ea:	f828 3c08 	strh.w	r3, [r8, #-8]
   173ee:	f856 2c10 	ldr.w	r2, [r6, #-16]
   173f2:	f004 fc8a 	bl	1bd0a <memcpy>
   173f6:	f856 3c10 	ldr.w	r3, [r6, #-16]
   173fa:	f108 0808 	add.w	r8, r8, #8
   173fe:	441c      	add	r4, r3
   17400:	193b      	adds	r3, r7, r4
   17402:	f846 3c08 	str.w	r3, [r6, #-8]
   17406:	9b01      	ldr	r3, [sp, #4]
   17408:	f846 6c04 	str.w	r6, [r6, #-4]
   1740c:	4598      	cmp	r8, r3
   1740e:	442c      	add	r4, r5
   17410:	f106 0620 	add.w	r6, r6, #32
   17414:	d02c      	beq.n	17470 <rpc_ip_event_handler+0x26c>
   17416:	593b      	ldr	r3, [r7, r4]
   17418:	193a      	adds	r2, r7, r4
   1741a:	f846 3c20 	str.w	r3, [r6, #-32]
   1741e:	6853      	ldr	r3, [r2, #4]
   17420:	f8da 1000 	ldr.w	r1, [sl]
   17424:	2b02      	cmp	r3, #2
   17426:	bf14      	ite	ne
   17428:	2002      	movne	r0, #2
   1742a:	200a      	moveq	r0, #10
   1742c:	f8db 3000 	ldr.w	r3, [fp]
   17430:	e946 0107 	strd	r0, r1, [r6, #-28]
   17434:	f846 3c14 	str.w	r3, [r6, #-20]
   17438:	8a10      	ldrh	r0, [r2, #16]
   1743a:	f1a8 0310 	sub.w	r3, r8, #16
   1743e:	f846 0c10 	str.w	r0, [r6, #-16]
   17442:	8a55      	ldrh	r5, [r2, #18]
   17444:	f846 3c0c 	str.w	r3, [r6, #-12]
   17448:	4b57      	ldr	r3, [pc, #348]	; (175a8 <rpc_ip_event_handler+0x3a4>)
   1744a:	3414      	adds	r4, #20
   1744c:	2804      	cmp	r0, #4
   1744e:	eb07 0104 	add.w	r1, r7, r4
   17452:	881b      	ldrh	r3, [r3, #0]
   17454:	d1c1      	bne.n	173da <rpc_ip_event_handler+0x1d6>
   17456:	2210      	movs	r2, #16
   17458:	2002      	movs	r0, #2
   1745a:	f828 3c08 	strh.w	r3, [r8, #-8]
   1745e:	f848 0c0c 	str.w	r0, [r8, #-12]
   17462:	f808 2c10 	strb.w	r2, [r8, #-16]
   17466:	f856 2c10 	ldr.w	r2, [r6, #-16]
   1746a:	f1a8 0004 	sub.w	r0, r8, #4
   1746e:	e7c0      	b.n	173f2 <rpc_ip_event_handler+0x1ee>
   17470:	2200      	movs	r2, #0
   17472:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   17476:	440b      	add	r3, r1
   17478:	f843 2c04 	str.w	r2, [r3, #-4]
   1747c:	2202      	movs	r2, #2
   1747e:	4b4b      	ldr	r3, [pc, #300]	; (175ac <rpc_ip_event_handler+0x3a8>)
   17480:	f8c9 2000 	str.w	r2, [r9]
   17484:	9a02      	ldr	r2, [sp, #8]
   17486:	2000      	movs	r0, #0
   17488:	601a      	str	r2, [r3, #0]
   1748a:	e723      	b.n	172d4 <rpc_ip_event_handler+0xd0>
   1748c:	f248 0308 	movw	r3, #32776	; 0x8008
   17490:	429c      	cmp	r4, r3
   17492:	d041      	beq.n	17518 <rpc_ip_event_handler+0x314>
   17494:	f248 0309 	movw	r3, #32777	; 0x8009
   17498:	429c      	cmp	r4, r3
   1749a:	f47f af2d 	bne.w	172f8 <rpc_ip_event_handler+0xf4>
   1749e:	6833      	ldr	r3, [r6, #0]
   174a0:	b29b      	uxth	r3, r3
   174a2:	2b0d      	cmp	r3, #13
   174a4:	f47f af24 	bne.w	172f0 <rpc_ip_event_handler+0xec>
   174a8:	6968      	ldr	r0, [r5, #20]
   174aa:	2800      	cmp	r0, #0
   174ac:	f000 80da 	beq.w	17664 <rpc_ip_event_handler+0x460>
   174b0:	2810      	cmp	r0, #16
   174b2:	f200 80a2 	bhi.w	175fa <rpc_ip_event_handler+0x3f6>
   174b6:	4b38      	ldr	r3, [pc, #224]	; (17598 <rpc_ip_event_handler+0x394>)
   174b8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   174bc:	e743      	b.n	17346 <rpc_ip_event_handler+0x142>
   174be:	f7fb f9ab 	bl	12818 <nrf_free>
   174c2:	200c      	movs	r0, #12
   174c4:	2302      	movs	r3, #2
   174c6:	4936      	ldr	r1, [pc, #216]	; (175a0 <rpc_ip_event_handler+0x39c>)
   174c8:	4a38      	ldr	r2, [pc, #224]	; (175ac <rpc_ip_event_handler+0x3a8>)
   174ca:	6008      	str	r0, [r1, #0]
   174cc:	682f      	ldr	r7, [r5, #0]
   174ce:	9902      	ldr	r1, [sp, #8]
   174d0:	f8c9 3000 	str.w	r3, [r9]
   174d4:	6011      	str	r1, [r2, #0]
   174d6:	2f00      	cmp	r7, #0
   174d8:	f47f af07 	bne.w	172ea <rpc_ip_event_handler+0xe6>
   174dc:	e708      	b.n	172f0 <rpc_ip_event_handler+0xec>
   174de:	f248 0301 	movw	r3, #32769	; 0x8001
   174e2:	429c      	cmp	r4, r3
   174e4:	f47f af08 	bne.w	172f8 <rpc_ip_event_handler+0xf4>
   174e8:	6833      	ldr	r3, [r6, #0]
   174ea:	2b01      	cmp	r3, #1
   174ec:	f47f af00 	bne.w	172f0 <rpc_ip_event_handler+0xec>
   174f0:	6968      	ldr	r0, [r5, #20]
   174f2:	2800      	cmp	r0, #0
   174f4:	d1dc      	bne.n	174b0 <rpc_ip_event_handler+0x2ac>
   174f6:	2302      	movs	r3, #2
   174f8:	6033      	str	r3, [r6, #0]
   174fa:	69ab      	ldr	r3, [r5, #24]
   174fc:	61b3      	str	r3, [r6, #24]
   174fe:	e6e9      	b.n	172d4 <rpc_ip_event_handler+0xd0>
   17500:	6833      	ldr	r3, [r6, #0]
   17502:	025b      	lsls	r3, r3, #9
   17504:	f57f aef4 	bpl.w	172f0 <rpc_ip_event_handler+0xec>
   17508:	6968      	ldr	r0, [r5, #20]
   1750a:	2800      	cmp	r0, #0
   1750c:	d1d0      	bne.n	174b0 <rpc_ip_event_handler+0x2ac>
   1750e:	6833      	ldr	r3, [r6, #0]
   17510:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   17514:	6033      	str	r3, [r6, #0]
   17516:	e6dd      	b.n	172d4 <rpc_ip_event_handler+0xd0>
   17518:	6833      	ldr	r3, [r6, #0]
   1751a:	b29b      	uxth	r3, r3
   1751c:	2b06      	cmp	r3, #6
   1751e:	f47f aee7 	bne.w	172f0 <rpc_ip_event_handler+0xec>
   17522:	6968      	ldr	r0, [r5, #20]
   17524:	2800      	cmp	r0, #0
   17526:	d1c3      	bne.n	174b0 <rpc_ip_event_handler+0x2ac>
   17528:	6833      	ldr	r3, [r6, #0]
   1752a:	0c1b      	lsrs	r3, r3, #16
   1752c:	041b      	lsls	r3, r3, #16
   1752e:	f043 0307 	orr.w	r3, r3, #7
   17532:	6033      	str	r3, [r6, #0]
   17534:	e6ce      	b.n	172d4 <rpc_ip_event_handler+0xd0>
   17536:	6833      	ldr	r3, [r6, #0]
   17538:	0099      	lsls	r1, r3, #2
   1753a:	f57f aed9 	bpl.w	172f0 <rpc_ip_event_handler+0xec>
   1753e:	6833      	ldr	r3, [r6, #0]
   17540:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   17544:	6033      	str	r3, [r6, #0]
   17546:	6968      	ldr	r0, [r5, #20]
   17548:	2800      	cmp	r0, #0
   1754a:	d066      	beq.n	1761a <rpc_ip_event_handler+0x416>
   1754c:	2810      	cmp	r0, #16
   1754e:	bf8e      	itee	hi
   17550:	232d      	movhi	r3, #45	; 0x2d
   17552:	4b11      	ldrls	r3, [pc, #68]	; (17598 <rpc_ip_event_handler+0x394>)
   17554:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   17558:	2000      	movs	r0, #0
   1755a:	6073      	str	r3, [r6, #4]
   1755c:	6833      	ldr	r3, [r6, #0]
   1755e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   17562:	6033      	str	r3, [r6, #0]
   17564:	e6b6      	b.n	172d4 <rpc_ip_event_handler+0xd0>
   17566:	6833      	ldr	r3, [r6, #0]
   17568:	029a      	lsls	r2, r3, #10
   1756a:	f57f aec1 	bpl.w	172f0 <rpc_ip_event_handler+0xec>
   1756e:	696b      	ldr	r3, [r5, #20]
   17570:	2b00      	cmp	r3, #0
   17572:	d061      	beq.n	17638 <rpc_ip_event_handler+0x434>
   17574:	2b6b      	cmp	r3, #107	; 0x6b
   17576:	f47f aee0 	bne.w	1733a <rpc_ip_event_handler+0x136>
   1757a:	6933      	ldr	r3, [r6, #16]
   1757c:	2b01      	cmp	r3, #1
   1757e:	d07c      	beq.n	1767a <rpc_ip_event_handler+0x476>
   17580:	230c      	movs	r3, #12
   17582:	2000      	movs	r0, #0
   17584:	6073      	str	r3, [r6, #4]
   17586:	e6a5      	b.n	172d4 <rpc_ip_event_handler+0xd0>
   17588:	6833      	ldr	r3, [r6, #0]
   1758a:	b29b      	uxth	r3, r3
   1758c:	2b07      	cmp	r3, #7
   1758e:	f47f aeaf 	bne.w	172f0 <rpc_ip_event_handler+0xec>
   17592:	e68a      	b.n	172aa <rpc_ip_event_handler+0xa6>
   17594:	20022078 	.word	0x20022078
   17598:	0001e608 	.word	0x0001e608
   1759c:	20021214 	.word	0x20021214
   175a0:	200211e0 	.word	0x200211e0
   175a4:	200211ec 	.word	0x200211ec
   175a8:	20021e82 	.word	0x20021e82
   175ac:	200211e8 	.word	0x200211e8
   175b0:	200211e4 	.word	0x200211e4
   175b4:	200211dc 	.word	0x200211dc
   175b8:	200211d8 	.word	0x200211d8
   175bc:	6833      	ldr	r3, [r6, #0]
   175be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   175c2:	6033      	str	r3, [r6, #0]
   175c4:	6833      	ldr	r3, [r6, #0]
   175c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   175ca:	6033      	str	r3, [r6, #0]
   175cc:	6833      	ldr	r3, [r6, #0]
   175ce:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   175d2:	6033      	str	r3, [r6, #0]
   175d4:	692b      	ldr	r3, [r5, #16]
   175d6:	2b6c      	cmp	r3, #108	; 0x6c
   175d8:	d016      	beq.n	17608 <rpc_ip_event_handler+0x404>
   175da:	2b10      	cmp	r3, #16
   175dc:	bf8c      	ite	hi
   175de:	232d      	movhi	r3, #45	; 0x2d
   175e0:	4a40      	ldrls	r2, [pc, #256]	; (176e4 <rpc_ip_event_handler+0x4e0>)
   175e2:	f04f 0000 	mov.w	r0, #0
   175e6:	bf98      	it	ls
   175e8:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   175ec:	6073      	str	r3, [r6, #4]
   175ee:	60b3      	str	r3, [r6, #8]
   175f0:	e670      	b.n	172d4 <rpc_ip_event_handler+0xd0>
   175f2:	220c      	movs	r2, #12
   175f4:	4b3c      	ldr	r3, [pc, #240]	; (176e8 <rpc_ip_event_handler+0x4e4>)
   175f6:	601a      	str	r2, [r3, #0]
   175f8:	e740      	b.n	1747c <rpc_ip_event_handler+0x278>
   175fa:	232d      	movs	r3, #45	; 0x2d
   175fc:	e6a3      	b.n	17346 <rpc_ip_event_handler+0x142>
   175fe:	6828      	ldr	r0, [r5, #0]
   17600:	f7fb f96a 	bl	128d8 <rpc_ip_client_data_free>
   17604:	4620      	mov	r0, r4
   17606:	e665      	b.n	172d4 <rpc_ip_event_handler+0xd0>
   17608:	2239      	movs	r2, #57	; 0x39
   1760a:	6833      	ldr	r3, [r6, #0]
   1760c:	2000      	movs	r0, #0
   1760e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   17612:	6033      	str	r3, [r6, #0]
   17614:	6072      	str	r2, [r6, #4]
   17616:	60b2      	str	r2, [r6, #8]
   17618:	e65c      	b.n	172d4 <rpc_ip_event_handler+0xd0>
   1761a:	6833      	ldr	r3, [r6, #0]
   1761c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17620:	6033      	str	r3, [r6, #0]
   17622:	6833      	ldr	r3, [r6, #0]
   17624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17628:	6033      	str	r3, [r6, #0]
   1762a:	6833      	ldr	r3, [r6, #0]
   1762c:	0c1b      	lsrs	r3, r3, #16
   1762e:	041b      	lsls	r3, r3, #16
   17630:	f043 0305 	orr.w	r3, r3, #5
   17634:	6033      	str	r3, [r6, #0]
   17636:	e64d      	b.n	172d4 <rpc_ip_event_handler+0xd0>
   17638:	6833      	ldr	r3, [r6, #0]
   1763a:	4a2c      	ldr	r2, [pc, #176]	; (176ec <rpc_ip_event_handler+0x4e8>)
   1763c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17640:	6033      	str	r3, [r6, #0]
   17642:	2001      	movs	r0, #1
   17644:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
   17648:	e644      	b.n	172d4 <rpc_ip_event_handler+0xd0>
   1764a:	2002      	movs	r0, #2
   1764c:	e642      	b.n	172d4 <rpc_ip_event_handler+0xd0>
   1764e:	4b27      	ldr	r3, [pc, #156]	; (176ec <rpc_ip_event_handler+0x4e8>)
   17650:	2001      	movs	r0, #1
   17652:	f843 5027 	str.w	r5, [r3, r7, lsl #2]
   17656:	6833      	ldr	r3, [r6, #0]
   17658:	0c1b      	lsrs	r3, r3, #16
   1765a:	041b      	lsls	r3, r3, #16
   1765c:	f043 0309 	orr.w	r3, r3, #9
   17660:	6033      	str	r3, [r6, #0]
   17662:	e637      	b.n	172d4 <rpc_ip_event_handler+0xd0>
   17664:	6833      	ldr	r3, [r6, #0]
   17666:	0c1b      	lsrs	r3, r3, #16
   17668:	041b      	lsls	r3, r3, #16
   1766a:	f043 030e 	orr.w	r3, r3, #14
   1766e:	6033      	str	r3, [r6, #0]
   17670:	e630      	b.n	172d4 <rpc_ip_event_handler+0xd0>
   17672:	8a6c      	ldrh	r4, [r5, #18]
   17674:	b94c      	cbnz	r4, 1768a <rpc_ip_event_handler+0x486>
   17676:	4627      	mov	r7, r4
   17678:	e609      	b.n	1728e <rpc_ip_event_handler+0x8a>
   1767a:	220c      	movs	r2, #12
   1767c:	6833      	ldr	r3, [r6, #0]
   1767e:	2000      	movs	r0, #0
   17680:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   17684:	6033      	str	r3, [r6, #0]
   17686:	6072      	str	r2, [r6, #4]
   17688:	e624      	b.n	172d4 <rpc_ip_event_handler+0xd0>
   1768a:	2024      	movs	r0, #36	; 0x24
   1768c:	f7fb f8ba 	bl	12804 <nrf_malloc>
   17690:	4607      	mov	r7, r0
   17692:	b318      	cbz	r0, 176dc <rpc_ip_event_handler+0x4d8>
   17694:	8a6a      	ldrh	r2, [r5, #18]
   17696:	2a10      	cmp	r2, #16
   17698:	d014      	beq.n	176c4 <rpc_ip_event_handler+0x4c0>
   1769a:	2a04      	cmp	r2, #4
   1769c:	d006      	beq.n	176ac <rpc_ip_event_handler+0x4a8>
   1769e:	6828      	ldr	r0, [r5, #0]
   176a0:	f7fb f91a 	bl	128d8 <rpc_ip_client_data_free>
   176a4:	4638      	mov	r0, r7
   176a6:	f7fb f8b7 	bl	12818 <nrf_free>
   176aa:	e621      	b.n	172f0 <rpc_ip_event_handler+0xec>
   176ac:	2302      	movs	r3, #2
   176ae:	2410      	movs	r4, #16
   176b0:	6043      	str	r3, [r0, #4]
   176b2:	7004      	strb	r4, [r0, #0]
   176b4:	8a2b      	ldrh	r3, [r5, #16]
   176b6:	f105 0114 	add.w	r1, r5, #20
   176ba:	8103      	strh	r3, [r0, #8]
   176bc:	300c      	adds	r0, #12
   176be:	f004 fb24 	bl	1bd0a <memcpy>
   176c2:	e5e4      	b.n	1728e <rpc_ip_event_handler+0x8a>
   176c4:	230a      	movs	r3, #10
   176c6:	2424      	movs	r4, #36	; 0x24
   176c8:	6043      	str	r3, [r0, #4]
   176ca:	7004      	strb	r4, [r0, #0]
   176cc:	8a2b      	ldrh	r3, [r5, #16]
   176ce:	f105 0114 	add.w	r1, r5, #20
   176d2:	8103      	strh	r3, [r0, #8]
   176d4:	3010      	adds	r0, #16
   176d6:	f004 fb18 	bl	1bd0a <memcpy>
   176da:	e5d8      	b.n	1728e <rpc_ip_event_handler+0x8a>
   176dc:	6828      	ldr	r0, [r5, #0]
   176de:	f7fb f8fb 	bl	128d8 <rpc_ip_client_data_free>
   176e2:	e605      	b.n	172f0 <rpc_ip_event_handler+0xec>
   176e4:	0001e608 	.word	0x0001e608
   176e8:	200211e0 	.word	0x200211e0
   176ec:	200211f0 	.word	0x200211f0

000176f0 <interface_init>:
   176f0:	b508      	push	{r3, lr}
   176f2:	f44f 72a2 	mov.w	r2, #324	; 0x144
   176f6:	2100      	movs	r1, #0
   176f8:	4802      	ldr	r0, [pc, #8]	; (17704 <interface_init+0x14>)
   176fa:	f004 fb30 	bl	1bd5e <memset>
   176fe:	2000      	movs	r0, #0
   17700:	bd08      	pop	{r3, pc}
   17702:	bf00      	nop
   17704:	2002207c 	.word	0x2002207c

00017708 <interface_socket_allocate>:
   17708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1770a:	4b2d      	ldr	r3, [pc, #180]	; (177c0 <interface_socket_allocate+0xb8>)
   1770c:	4606      	mov	r6, r0
   1770e:	681d      	ldr	r5, [r3, #0]
   17710:	4608      	mov	r0, r1
   17712:	b315      	cbz	r5, 1775a <interface_socket_allocate+0x52>
   17714:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   17716:	2c00      	cmp	r4, #0
   17718:	d043      	beq.n	177a2 <interface_socket_allocate+0x9a>
   1771a:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   1771c:	2c00      	cmp	r4, #0
   1771e:	d042      	beq.n	177a6 <interface_socket_allocate+0x9e>
   17720:	6edc      	ldr	r4, [r3, #108]	; 0x6c
   17722:	2c00      	cmp	r4, #0
   17724:	d041      	beq.n	177aa <interface_socket_allocate+0xa2>
   17726:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
   1772a:	2900      	cmp	r1, #0
   1772c:	d03f      	beq.n	177ae <interface_socket_allocate+0xa6>
   1772e:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
   17732:	b189      	cbz	r1, 17758 <interface_socket_allocate+0x50>
   17734:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
   17738:	2900      	cmp	r1, #0
   1773a:	d03c      	beq.n	177b6 <interface_socket_allocate+0xae>
   1773c:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
   17740:	2900      	cmp	r1, #0
   17742:	d03a      	beq.n	177ba <interface_socket_allocate+0xb2>
   17744:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   17748:	b399      	cbz	r1, 177b2 <interface_socket_allocate+0xaa>
   1774a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1774e:	200c      	movs	r0, #12
   17750:	f7f8 f994 	bl	fa7c <bsd_os_errno_set>
   17754:	4628      	mov	r0, r5
   17756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17758:	2505      	movs	r5, #5
   1775a:	f04f 0c01 	mov.w	ip, #1
   1775e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   17762:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   17766:	00a4      	lsls	r4, r4, #2
   17768:	f843 c004 	str.w	ip, [r3, r4]
   1776c:	441c      	add	r4, r3
   1776e:	4611      	mov	r1, r2
   17770:	61a7      	str	r7, [r4, #24]
   17772:	4622      	mov	r2, r4
   17774:	f001 ffba 	bl	196ec <packet_handler_create>
   17778:	4603      	mov	r3, r0
   1777a:	61e0      	str	r0, [r4, #28]
   1777c:	b158      	cbz	r0, 17796 <interface_socket_allocate+0x8e>
   1777e:	681b      	ldr	r3, [r3, #0]
   17780:	681b      	ldr	r3, [r3, #0]
   17782:	4798      	blx	r3
   17784:	b910      	cbnz	r0, 1778c <interface_socket_allocate+0x84>
   17786:	6034      	str	r4, [r6, #0]
   17788:	4628      	mov	r0, r5
   1778a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1778c:	69e0      	ldr	r0, [r4, #28]
   1778e:	f001 ffcd 	bl	1972c <packet_handler_delete>
   17792:	2300      	movs	r3, #0
   17794:	61e3      	str	r3, [r4, #28]
   17796:	4620      	mov	r0, r4
   17798:	2224      	movs	r2, #36	; 0x24
   1779a:	2100      	movs	r1, #0
   1779c:	f004 fadf 	bl	1bd5e <memset>
   177a0:	e7d3      	b.n	1774a <interface_socket_allocate+0x42>
   177a2:	2501      	movs	r5, #1
   177a4:	e7d9      	b.n	1775a <interface_socket_allocate+0x52>
   177a6:	2502      	movs	r5, #2
   177a8:	e7d7      	b.n	1775a <interface_socket_allocate+0x52>
   177aa:	2503      	movs	r5, #3
   177ac:	e7d5      	b.n	1775a <interface_socket_allocate+0x52>
   177ae:	2504      	movs	r5, #4
   177b0:	e7d3      	b.n	1775a <interface_socket_allocate+0x52>
   177b2:	2508      	movs	r5, #8
   177b4:	e7d1      	b.n	1775a <interface_socket_allocate+0x52>
   177b6:	2506      	movs	r5, #6
   177b8:	e7cf      	b.n	1775a <interface_socket_allocate+0x52>
   177ba:	2507      	movs	r5, #7
   177bc:	e7cd      	b.n	1775a <interface_socket_allocate+0x52>
   177be:	bf00      	nop
   177c0:	2002207c 	.word	0x2002207c

000177c4 <interface_socket_free>:
   177c4:	2808      	cmp	r0, #8
   177c6:	d900      	bls.n	177ca <interface_socket_free+0x6>
   177c8:	4770      	bx	lr
   177ca:	b510      	push	{r4, lr}
   177cc:	4c07      	ldr	r4, [pc, #28]	; (177ec <interface_socket_free+0x28>)
   177ce:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   177d2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   177d6:	69e0      	ldr	r0, [r4, #28]
   177d8:	b108      	cbz	r0, 177de <interface_socket_free+0x1a>
   177da:	f001 ffa7 	bl	1972c <packet_handler_delete>
   177de:	4620      	mov	r0, r4
   177e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   177e4:	2224      	movs	r2, #36	; 0x24
   177e6:	2100      	movs	r1, #0
   177e8:	f004 bab9 	b.w	1bd5e <memset>
   177ec:	2002207c 	.word	0x2002207c

000177f0 <interface_socket_packet_handler_update>:
   177f0:	2808      	cmp	r0, #8
   177f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   177f6:	d81e      	bhi.n	17836 <interface_socket_packet_handler_update+0x46>
   177f8:	ea4f 08c0 	mov.w	r8, r0, lsl #3
   177fc:	4e17      	ldr	r6, [pc, #92]	; (1785c <interface_socket_packet_handler_update+0x6c>)
   177fe:	eb08 0300 	add.w	r3, r8, r0
   17802:	009b      	lsls	r3, r3, #2
   17804:	58f4      	ldr	r4, [r6, r3]
   17806:	18f5      	adds	r5, r6, r3
   17808:	b1ac      	cbz	r4, 17836 <interface_socket_packet_handler_update+0x46>
   1780a:	460b      	mov	r3, r1
   1780c:	4604      	mov	r4, r0
   1780e:	4611      	mov	r1, r2
   17810:	4618      	mov	r0, r3
   17812:	462a      	mov	r2, r5
   17814:	f8d5 901c 	ldr.w	r9, [r5, #28]
   17818:	f001 ff68 	bl	196ec <packet_handler_create>
   1781c:	61e8      	str	r0, [r5, #28]
   1781e:	b1d0      	cbz	r0, 17856 <interface_socket_packet_handler_update+0x66>
   17820:	6803      	ldr	r3, [r0, #0]
   17822:	681b      	ldr	r3, [r3, #0]
   17824:	4798      	blx	r3
   17826:	4607      	mov	r7, r0
   17828:	b948      	cbnz	r0, 1783e <interface_socket_packet_handler_update+0x4e>
   1782a:	4648      	mov	r0, r9
   1782c:	f001 ff7e 	bl	1972c <packet_handler_delete>
   17830:	4638      	mov	r0, r7
   17832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17836:	2705      	movs	r7, #5
   17838:	4638      	mov	r0, r7
   1783a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1783e:	69e8      	ldr	r0, [r5, #28]
   17840:	f001 ff74 	bl	1972c <packet_handler_delete>
   17844:	eb08 0004 	add.w	r0, r8, r4
   17848:	eb06 0680 	add.w	r6, r6, r0, lsl #2
   1784c:	f8c6 901c 	str.w	r9, [r6, #28]
   17850:	4638      	mov	r0, r7
   17852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17856:	2704      	movs	r7, #4
   17858:	e7f4      	b.n	17844 <interface_socket_packet_handler_update+0x54>
   1785a:	bf00      	nop
   1785c:	2002207c 	.word	0x2002207c

00017860 <interface_socket_wait>:
   17860:	b5f0      	push	{r4, r5, r6, r7, lr}
   17862:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   17866:	4c0e      	ldr	r4, [pc, #56]	; (178a0 <interface_socket_wait+0x40>)
   17868:	0080      	lsls	r0, r0, #2
   1786a:	5825      	ldr	r5, [r4, r0]
   1786c:	b083      	sub	sp, #12
   1786e:	4015      	ands	r5, r2
   17870:	428d      	cmp	r5, r1
   17872:	9301      	str	r3, [sp, #4]
   17874:	4404      	add	r4, r0
   17876:	d010      	beq.n	1789a <interface_socket_wait+0x3a>
   17878:	6863      	ldr	r3, [r4, #4]
   1787a:	b973      	cbnz	r3, 1789a <interface_socket_wait+0x3a>
   1787c:	460f      	mov	r7, r1
   1787e:	4616      	mov	r6, r2
   17880:	4625      	mov	r5, r4
   17882:	e006      	b.n	17892 <interface_socket_wait+0x32>
   17884:	686b      	ldr	r3, [r5, #4]
   17886:	b943      	cbnz	r3, 1789a <interface_socket_wait+0x3a>
   17888:	a901      	add	r1, sp, #4
   1788a:	4620      	mov	r0, r4
   1788c:	f7f8 f862 	bl	f954 <bsd_os_timedwait>
   17890:	b920      	cbnz	r0, 1789c <interface_socket_wait+0x3c>
   17892:	682b      	ldr	r3, [r5, #0]
   17894:	4033      	ands	r3, r6
   17896:	42bb      	cmp	r3, r7
   17898:	d1f4      	bne.n	17884 <interface_socket_wait+0x24>
   1789a:	2000      	movs	r0, #0
   1789c:	b003      	add	sp, #12
   1789e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   178a0:	2002207c 	.word	0x2002207c

000178a4 <interface_from_internal_id_search>:
   178a4:	4b27      	ldr	r3, [pc, #156]	; (17944 <interface_from_internal_id_search+0xa0>)
   178a6:	681a      	ldr	r2, [r3, #0]
   178a8:	b112      	cbz	r2, 178b0 <interface_from_internal_id_search+0xc>
   178aa:	699a      	ldr	r2, [r3, #24]
   178ac:	4282      	cmp	r2, r0
   178ae:	d039      	beq.n	17924 <interface_from_internal_id_search+0x80>
   178b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   178b2:	b112      	cbz	r2, 178ba <interface_from_internal_id_search+0x16>
   178b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   178b6:	4282      	cmp	r2, r0
   178b8:	d036      	beq.n	17928 <interface_from_internal_id_search+0x84>
   178ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   178bc:	b112      	cbz	r2, 178c4 <interface_from_internal_id_search+0x20>
   178be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   178c0:	4282      	cmp	r2, r0
   178c2:	d033      	beq.n	1792c <interface_from_internal_id_search+0x88>
   178c4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   178c6:	b11a      	cbz	r2, 178d0 <interface_from_internal_id_search+0x2c>
   178c8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   178cc:	4282      	cmp	r2, r0
   178ce:	d02f      	beq.n	17930 <interface_from_internal_id_search+0x8c>
   178d0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   178d4:	b11a      	cbz	r2, 178de <interface_from_internal_id_search+0x3a>
   178d6:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
   178da:	4282      	cmp	r2, r0
   178dc:	d02a      	beq.n	17934 <interface_from_internal_id_search+0x90>
   178de:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   178e2:	b11a      	cbz	r2, 178ec <interface_from_internal_id_search+0x48>
   178e4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   178e8:	4282      	cmp	r2, r0
   178ea:	d025      	beq.n	17938 <interface_from_internal_id_search+0x94>
   178ec:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
   178f0:	b11a      	cbz	r2, 178fa <interface_from_internal_id_search+0x56>
   178f2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   178f6:	4282      	cmp	r2, r0
   178f8:	d020      	beq.n	1793c <interface_from_internal_id_search+0x98>
   178fa:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
   178fe:	b11a      	cbz	r2, 17908 <interface_from_internal_id_search+0x64>
   17900:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
   17904:	4282      	cmp	r2, r0
   17906:	d01b      	beq.n	17940 <interface_from_internal_id_search+0x9c>
   17908:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1790c:	b13a      	cbz	r2, 1791e <interface_from_internal_id_search+0x7a>
   1790e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
   17912:	4283      	cmp	r3, r0
   17914:	bf14      	ite	ne
   17916:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1791a:	2008      	moveq	r0, #8
   1791c:	4770      	bx	lr
   1791e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17922:	4770      	bx	lr
   17924:	2000      	movs	r0, #0
   17926:	4770      	bx	lr
   17928:	2001      	movs	r0, #1
   1792a:	4770      	bx	lr
   1792c:	2002      	movs	r0, #2
   1792e:	4770      	bx	lr
   17930:	2003      	movs	r0, #3
   17932:	4770      	bx	lr
   17934:	2004      	movs	r0, #4
   17936:	4770      	bx	lr
   17938:	2005      	movs	r0, #5
   1793a:	4770      	bx	lr
   1793c:	2006      	movs	r0, #6
   1793e:	4770      	bx	lr
   17940:	2007      	movs	r0, #7
   17942:	4770      	bx	lr
   17944:	2002207c 	.word	0x2002207c

00017948 <interface_socket_from_handle_get>:
   17948:	2808      	cmp	r0, #8
   1794a:	d807      	bhi.n	1795c <interface_socket_from_handle_get+0x14>
   1794c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   17950:	4b03      	ldr	r3, [pc, #12]	; (17960 <interface_socket_from_handle_get+0x18>)
   17952:	0080      	lsls	r0, r0, #2
   17954:	581a      	ldr	r2, [r3, r0]
   17956:	b10a      	cbz	r2, 1795c <interface_socket_from_handle_get+0x14>
   17958:	4418      	add	r0, r3
   1795a:	4770      	bx	lr
   1795c:	2000      	movs	r0, #0
   1795e:	4770      	bx	lr
   17960:	2002207c 	.word	0x2002207c

00017964 <interface_socket_event_get>:
   17964:	b119      	cbz	r1, 1796e <interface_socket_event_get+0xa>
   17966:	2808      	cmp	r0, #8
   17968:	d902      	bls.n	17970 <interface_socket_event_get+0xc>
   1796a:	2310      	movs	r3, #16
   1796c:	600b      	str	r3, [r1, #0]
   1796e:	4770      	bx	lr
   17970:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   17974:	4b07      	ldr	r3, [pc, #28]	; (17994 <interface_socket_event_get+0x30>)
   17976:	0080      	lsls	r0, r0, #2
   17978:	581a      	ldr	r2, [r3, r0]
   1797a:	2a00      	cmp	r2, #0
   1797c:	d0f5      	beq.n	1796a <interface_socket_event_get+0x6>
   1797e:	581b      	ldr	r3, [r3, r0]
   17980:	0c1b      	lsrs	r3, r3, #16
   17982:	f003 020a 	and.w	r2, r3, #10
   17986:	2a0a      	cmp	r2, #10
   17988:	bf14      	ite	ne
   1798a:	f003 030f 	andne.w	r3, r3, #15
   1798e:	f003 030d 	andeq.w	r3, r3, #13
   17992:	e7eb      	b.n	1796c <interface_socket_event_get+0x8>
   17994:	2002207c 	.word	0x2002207c

00017998 <interface_socket_setopt>:
   17998:	2808      	cmp	r0, #8
   1799a:	b570      	push	{r4, r5, r6, lr}
   1799c:	d827      	bhi.n	179ee <interface_socket_setopt+0x56>
   1799e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   179a2:	4c16      	ldr	r4, [pc, #88]	; (179fc <interface_socket_setopt+0x64>)
   179a4:	0080      	lsls	r0, r0, #2
   179a6:	5825      	ldr	r5, [r4, r0]
   179a8:	b30d      	cbz	r5, 179ee <interface_socket_setopt+0x56>
   179aa:	2901      	cmp	r1, #1
   179ac:	d119      	bne.n	179e2 <interface_socket_setopt+0x4a>
   179ae:	2a14      	cmp	r2, #20
   179b0:	d117      	bne.n	179e2 <interface_socket_setopt+0x4a>
   179b2:	b183      	cbz	r3, 179d6 <interface_socket_setopt+0x3e>
   179b4:	9a04      	ldr	r2, [sp, #16]
   179b6:	2a08      	cmp	r2, #8
   179b8:	d10d      	bne.n	179d6 <interface_socket_setopt+0x3e>
   179ba:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   179be:	685a      	ldr	r2, [r3, #4]
   179c0:	4e0f      	ldr	r6, [pc, #60]	; (17a00 <interface_socket_setopt+0x68>)
   179c2:	6819      	ldr	r1, [r3, #0]
   179c4:	fba6 2302 	umull	r2, r3, r6, r2
   179c8:	099b      	lsrs	r3, r3, #6
   179ca:	fb05 3301 	mla	r3, r5, r1, r3
   179ce:	4420      	add	r0, r4
   179d0:	6203      	str	r3, [r0, #32]
   179d2:	2000      	movs	r0, #0
   179d4:	bd70      	pop	{r4, r5, r6, pc}
   179d6:	2016      	movs	r0, #22
   179d8:	f7f8 f850 	bl	fa7c <bsd_os_errno_set>
   179dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   179e0:	bd70      	pop	{r4, r5, r6, pc}
   179e2:	202a      	movs	r0, #42	; 0x2a
   179e4:	f7f8 f84a 	bl	fa7c <bsd_os_errno_set>
   179e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   179ec:	bd70      	pop	{r4, r5, r6, pc}
   179ee:	2009      	movs	r0, #9
   179f0:	f7f8 f844 	bl	fa7c <bsd_os_errno_set>
   179f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   179f8:	bd70      	pop	{r4, r5, r6, pc}
   179fa:	bf00      	nop
   179fc:	2002207c 	.word	0x2002207c
   17a00:	10624dd3 	.word	0x10624dd3

00017a04 <interface_socket_getopt>:
   17a04:	b570      	push	{r4, r5, r6, lr}
   17a06:	2808      	cmp	r0, #8
   17a08:	9d04      	ldr	r5, [sp, #16]
   17a0a:	d821      	bhi.n	17a50 <interface_socket_getopt+0x4c>
   17a0c:	4c13      	ldr	r4, [pc, #76]	; (17a5c <interface_socket_getopt+0x58>)
   17a0e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   17a12:	0080      	lsls	r0, r0, #2
   17a14:	5826      	ldr	r6, [r4, r0]
   17a16:	4404      	add	r4, r0
   17a18:	b1d6      	cbz	r6, 17a50 <interface_socket_getopt+0x4c>
   17a1a:	2901      	cmp	r1, #1
   17a1c:	d112      	bne.n	17a44 <interface_socket_getopt+0x40>
   17a1e:	2a04      	cmp	r2, #4
   17a20:	d110      	bne.n	17a44 <interface_socket_getopt+0x40>
   17a22:	b14b      	cbz	r3, 17a38 <interface_socket_getopt+0x34>
   17a24:	b145      	cbz	r5, 17a38 <interface_socket_getopt+0x34>
   17a26:	682a      	ldr	r2, [r5, #0]
   17a28:	2a04      	cmp	r2, #4
   17a2a:	d105      	bne.n	17a38 <interface_socket_getopt+0x34>
   17a2c:	2200      	movs	r2, #0
   17a2e:	6861      	ldr	r1, [r4, #4]
   17a30:	4610      	mov	r0, r2
   17a32:	6019      	str	r1, [r3, #0]
   17a34:	6062      	str	r2, [r4, #4]
   17a36:	bd70      	pop	{r4, r5, r6, pc}
   17a38:	2016      	movs	r0, #22
   17a3a:	f7f8 f81f 	bl	fa7c <bsd_os_errno_set>
   17a3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17a42:	bd70      	pop	{r4, r5, r6, pc}
   17a44:	202a      	movs	r0, #42	; 0x2a
   17a46:	f7f8 f819 	bl	fa7c <bsd_os_errno_set>
   17a4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17a4e:	bd70      	pop	{r4, r5, r6, pc}
   17a50:	2009      	movs	r0, #9
   17a52:	f7f8 f813 	bl	fa7c <bsd_os_errno_set>
   17a56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17a5a:	bd70      	pop	{r4, r5, r6, pc}
   17a5c:	2002207c 	.word	0x2002207c

00017a60 <interface_socket_fcntl>:
   17a60:	2808      	cmp	r0, #8
   17a62:	b510      	push	{r4, lr}
   17a64:	d818      	bhi.n	17a98 <interface_socket_fcntl+0x38>
   17a66:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   17a6a:	4c11      	ldr	r4, [pc, #68]	; (17ab0 <interface_socket_fcntl+0x50>)
   17a6c:	0083      	lsls	r3, r0, #2
   17a6e:	58e0      	ldr	r0, [r4, r3]
   17a70:	b190      	cbz	r0, 17a98 <interface_socket_fcntl+0x38>
   17a72:	2901      	cmp	r1, #1
   17a74:	d005      	beq.n	17a82 <interface_socket_fcntl+0x22>
   17a76:	2902      	cmp	r1, #2
   17a78:	d114      	bne.n	17aa4 <interface_socket_fcntl+0x44>
   17a7a:	58e0      	ldr	r0, [r4, r3]
   17a7c:	f3c0 7000 	ubfx	r0, r0, #28, #1
   17a80:	bd10      	pop	{r4, pc}
   17a82:	f012 0001 	ands.w	r0, r2, #1
   17a86:	58e2      	ldr	r2, [r4, r3]
   17a88:	bf1a      	itte	ne
   17a8a:	2000      	movne	r0, #0
   17a8c:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
   17a90:	f022 5280 	biceq.w	r2, r2, #268435456	; 0x10000000
   17a94:	50e2      	str	r2, [r4, r3]
   17a96:	bd10      	pop	{r4, pc}
   17a98:	2009      	movs	r0, #9
   17a9a:	f7f7 ffef 	bl	fa7c <bsd_os_errno_set>
   17a9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17aa2:	bd10      	pop	{r4, pc}
   17aa4:	2016      	movs	r0, #22
   17aa6:	f7f7 ffe9 	bl	fa7c <bsd_os_errno_set>
   17aaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17aae:	bd10      	pop	{r4, pc}
   17ab0:	2002207c 	.word	0x2002207c

00017ab4 <bsd_os_application_irq_handler>:
   17ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17ab8:	4c33      	ldr	r4, [pc, #204]	; (17b88 <bsd_os_application_irq_handler+0xd4>)
   17aba:	f7f8 f893 	bl	fbe4 <bsd_os_application_irq_clear>
   17abe:	f04f 0803 	mov.w	r8, #3
   17ac2:	4d32      	ldr	r5, [pc, #200]	; (17b8c <bsd_os_application_irq_handler+0xd8>)
   17ac4:	4f32      	ldr	r7, [pc, #200]	; (17b90 <bsd_os_application_irq_handler+0xdc>)
   17ac6:	f104 0680 	add.w	r6, r4, #128	; 0x80
   17aca:	e004      	b.n	17ad6 <bsd_os_application_irq_handler+0x22>
   17acc:	2b04      	cmp	r3, #4
   17ace:	d006      	beq.n	17ade <bsd_os_application_irq_handler+0x2a>
   17ad0:	3408      	adds	r4, #8
   17ad2:	42b4      	cmp	r4, r6
   17ad4:	d03b      	beq.n	17b4e <bsd_os_application_irq_handler+0x9a>
   17ad6:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   17ada:	2b02      	cmp	r3, #2
   17adc:	d1f6      	bne.n	17acc <bsd_os_application_irq_handler+0x18>
   17ade:	6820      	ldr	r0, [r4, #0]
   17ae0:	882a      	ldrh	r2, [r5, #0]
   17ae2:	6803      	ldr	r3, [r0, #0]
   17ae4:	b29b      	uxth	r3, r3
   17ae6:	429a      	cmp	r2, r3
   17ae8:	d033      	beq.n	17b52 <bsd_os_application_irq_handler+0x9e>
   17aea:	8a2a      	ldrh	r2, [r5, #16]
   17aec:	429a      	cmp	r2, r3
   17aee:	d032      	beq.n	17b56 <bsd_os_application_irq_handler+0xa2>
   17af0:	8c2a      	ldrh	r2, [r5, #32]
   17af2:	429a      	cmp	r2, r3
   17af4:	d031      	beq.n	17b5a <bsd_os_application_irq_handler+0xa6>
   17af6:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
   17af8:	429a      	cmp	r2, r3
   17afa:	d030      	beq.n	17b5e <bsd_os_application_irq_handler+0xaa>
   17afc:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
   17b00:	429a      	cmp	r2, r3
   17b02:	d036      	beq.n	17b72 <bsd_os_application_irq_handler+0xbe>
   17b04:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
   17b08:	429a      	cmp	r2, r3
   17b0a:	d034      	beq.n	17b76 <bsd_os_application_irq_handler+0xc2>
   17b0c:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
   17b10:	429a      	cmp	r2, r3
   17b12:	d032      	beq.n	17b7a <bsd_os_application_irq_handler+0xc6>
   17b14:	f8b5 2070 	ldrh.w	r2, [r5, #112]	; 0x70
   17b18:	429a      	cmp	r2, r3
   17b1a:	d030      	beq.n	17b7e <bsd_os_application_irq_handler+0xca>
   17b1c:	f8b5 2080 	ldrh.w	r2, [r5, #128]	; 0x80
   17b20:	429a      	cmp	r2, r3
   17b22:	d02e      	beq.n	17b82 <bsd_os_application_irq_handler+0xce>
   17b24:	f8b5 2090 	ldrh.w	r2, [r5, #144]	; 0x90
   17b28:	429a      	cmp	r2, r3
   17b2a:	bf08      	it	eq
   17b2c:	2309      	moveq	r3, #9
   17b2e:	d1cf      	bne.n	17ad0 <bsd_os_application_irq_handler+0x1c>
   17b30:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   17b34:	685a      	ldr	r2, [r3, #4]
   17b36:	68d9      	ldr	r1, [r3, #12]
   17b38:	4790      	blx	r2
   17b3a:	b990      	cbnz	r0, 17b62 <bsd_os_application_irq_handler+0xae>
   17b3c:	2201      	movs	r2, #1
   17b3e:	6820      	ldr	r0, [r4, #0]
   17b40:	f804 2c04 	strb.w	r2, [r4, #-4]
   17b44:	68fb      	ldr	r3, [r7, #12]
   17b46:	3408      	adds	r4, #8
   17b48:	4798      	blx	r3
   17b4a:	42b4      	cmp	r4, r6
   17b4c:	d1c3      	bne.n	17ad6 <bsd_os_application_irq_handler+0x22>
   17b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17b52:	2300      	movs	r3, #0
   17b54:	e7ec      	b.n	17b30 <bsd_os_application_irq_handler+0x7c>
   17b56:	2301      	movs	r3, #1
   17b58:	e7ea      	b.n	17b30 <bsd_os_application_irq_handler+0x7c>
   17b5a:	2302      	movs	r3, #2
   17b5c:	e7e8      	b.n	17b30 <bsd_os_application_irq_handler+0x7c>
   17b5e:	2303      	movs	r3, #3
   17b60:	e7e6      	b.n	17b30 <bsd_os_application_irq_handler+0x7c>
   17b62:	2802      	cmp	r0, #2
   17b64:	bf0a      	itet	eq
   17b66:	2304      	moveq	r3, #4
   17b68:	f804 8c04 	strbne.w	r8, [r4, #-4]
   17b6c:	f804 3c04 	strbeq.w	r3, [r4, #-4]
   17b70:	e7ae      	b.n	17ad0 <bsd_os_application_irq_handler+0x1c>
   17b72:	2304      	movs	r3, #4
   17b74:	e7dc      	b.n	17b30 <bsd_os_application_irq_handler+0x7c>
   17b76:	2305      	movs	r3, #5
   17b78:	e7da      	b.n	17b30 <bsd_os_application_irq_handler+0x7c>
   17b7a:	2306      	movs	r3, #6
   17b7c:	e7d8      	b.n	17b30 <bsd_os_application_irq_handler+0x7c>
   17b7e:	2307      	movs	r3, #7
   17b80:	e7d6      	b.n	17b30 <bsd_os_application_irq_handler+0x7c>
   17b82:	2308      	movs	r3, #8
   17b84:	e7d4      	b.n	17b30 <bsd_os_application_irq_handler+0x7c>
   17b86:	bf00      	nop
   17b88:	20021354 	.word	0x20021354
   17b8c:	20021218 	.word	0x20021218
   17b90:	200212b8 	.word	0x200212b8

00017b94 <rpc_framework_init>:
   17b94:	b508      	push	{r3, lr}
   17b96:	22a0      	movs	r2, #160	; 0xa0
   17b98:	2100      	movs	r1, #0
   17b9a:	4802      	ldr	r0, [pc, #8]	; (17ba4 <rpc_framework_init+0x10>)
   17b9c:	f004 f8df 	bl	1bd5e <memset>
   17ba0:	2000      	movs	r0, #0
   17ba2:	bd08      	pop	{r3, pc}
   17ba4:	20021218 	.word	0x20021218

00017ba8 <rpc_client_register>:
   17ba8:	8803      	ldrh	r3, [r0, #0]
   17baa:	2b00      	cmp	r3, #0
   17bac:	d045      	beq.n	17c3a <rpc_client_register+0x92>
   17bae:	6842      	ldr	r2, [r0, #4]
   17bb0:	4601      	mov	r1, r0
   17bb2:	2a00      	cmp	r2, #0
   17bb4:	d050      	beq.n	17c58 <rpc_client_register+0xb0>
   17bb6:	4a30      	ldr	r2, [pc, #192]	; (17c78 <rpc_client_register+0xd0>)
   17bb8:	8810      	ldrh	r0, [r2, #0]
   17bba:	4283      	cmp	r3, r0
   17bbc:	d03d      	beq.n	17c3a <rpc_client_register+0x92>
   17bbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17bc2:	8a14      	ldrh	r4, [r2, #16]
   17bc4:	42a3      	cmp	r3, r4
   17bc6:	d035      	beq.n	17c34 <rpc_client_register+0x8c>
   17bc8:	8c15      	ldrh	r5, [r2, #32]
   17bca:	42ab      	cmp	r3, r5
   17bcc:	d032      	beq.n	17c34 <rpc_client_register+0x8c>
   17bce:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   17bd0:	42b3      	cmp	r3, r6
   17bd2:	d02f      	beq.n	17c34 <rpc_client_register+0x8c>
   17bd4:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   17bd8:	42bb      	cmp	r3, r7
   17bda:	d02b      	beq.n	17c34 <rpc_client_register+0x8c>
   17bdc:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   17be0:	4563      	cmp	r3, ip
   17be2:	d027      	beq.n	17c34 <rpc_client_register+0x8c>
   17be4:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   17be8:	4573      	cmp	r3, lr
   17bea:	d023      	beq.n	17c34 <rpc_client_register+0x8c>
   17bec:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   17bf0:	4543      	cmp	r3, r8
   17bf2:	d01f      	beq.n	17c34 <rpc_client_register+0x8c>
   17bf4:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   17bf8:	454b      	cmp	r3, r9
   17bfa:	d01b      	beq.n	17c34 <rpc_client_register+0x8c>
   17bfc:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   17c00:	4553      	cmp	r3, sl
   17c02:	d017      	beq.n	17c34 <rpc_client_register+0x8c>
   17c04:	b1e0      	cbz	r0, 17c40 <rpc_client_register+0x98>
   17c06:	b35c      	cbz	r4, 17c60 <rpc_client_register+0xb8>
   17c08:	b365      	cbz	r5, 17c64 <rpc_client_register+0xbc>
   17c0a:	b36e      	cbz	r6, 17c68 <rpc_client_register+0xc0>
   17c0c:	b377      	cbz	r7, 17c6c <rpc_client_register+0xc4>
   17c0e:	f1bc 0f00 	cmp.w	ip, #0
   17c12:	d02d      	beq.n	17c70 <rpc_client_register+0xc8>
   17c14:	f1be 0f00 	cmp.w	lr, #0
   17c18:	d020      	beq.n	17c5c <rpc_client_register+0xb4>
   17c1a:	f1b8 0f00 	cmp.w	r8, #0
   17c1e:	d029      	beq.n	17c74 <rpc_client_register+0xcc>
   17c20:	f1b9 0f00 	cmp.w	r9, #0
   17c24:	d00b      	beq.n	17c3e <rpc_client_register+0x96>
   17c26:	2009      	movs	r0, #9
   17c28:	f1ba 0f00 	cmp.w	sl, #0
   17c2c:	d008      	beq.n	17c40 <rpc_client_register+0x98>
   17c2e:	2004      	movs	r0, #4
   17c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17c34:	2007      	movs	r0, #7
   17c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17c3a:	2007      	movs	r0, #7
   17c3c:	4770      	bx	lr
   17c3e:	2008      	movs	r0, #8
   17c40:	0100      	lsls	r0, r0, #4
   17c42:	5213      	strh	r3, [r2, r0]
   17c44:	684b      	ldr	r3, [r1, #4]
   17c46:	4402      	add	r2, r0
   17c48:	6053      	str	r3, [r2, #4]
   17c4a:	688b      	ldr	r3, [r1, #8]
   17c4c:	2000      	movs	r0, #0
   17c4e:	6093      	str	r3, [r2, #8]
   17c50:	68cb      	ldr	r3, [r1, #12]
   17c52:	60d3      	str	r3, [r2, #12]
   17c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17c58:	200e      	movs	r0, #14
   17c5a:	4770      	bx	lr
   17c5c:	2006      	movs	r0, #6
   17c5e:	e7ef      	b.n	17c40 <rpc_client_register+0x98>
   17c60:	2001      	movs	r0, #1
   17c62:	e7ed      	b.n	17c40 <rpc_client_register+0x98>
   17c64:	2002      	movs	r0, #2
   17c66:	e7eb      	b.n	17c40 <rpc_client_register+0x98>
   17c68:	2003      	movs	r0, #3
   17c6a:	e7e9      	b.n	17c40 <rpc_client_register+0x98>
   17c6c:	2004      	movs	r0, #4
   17c6e:	e7e7      	b.n	17c40 <rpc_client_register+0x98>
   17c70:	2005      	movs	r0, #5
   17c72:	e7e5      	b.n	17c40 <rpc_client_register+0x98>
   17c74:	2007      	movs	r0, #7
   17c76:	e7e3      	b.n	17c40 <rpc_client_register+0x98>
   17c78:	20021218 	.word	0x20021218

00017c7c <rpc_transport_input>:
   17c7c:	b538      	push	{r3, r4, r5, lr}
   17c7e:	4a82      	ldr	r2, [pc, #520]	; (17e88 <rpc_transport_input+0x20c>)
   17c80:	680b      	ldr	r3, [r1, #0]
   17c82:	8810      	ldrh	r0, [r2, #0]
   17c84:	b29b      	uxth	r3, r3
   17c86:	4298      	cmp	r0, r3
   17c88:	d027      	beq.n	17cda <rpc_transport_input+0x5e>
   17c8a:	8a10      	ldrh	r0, [r2, #16]
   17c8c:	4298      	cmp	r0, r3
   17c8e:	d024      	beq.n	17cda <rpc_transport_input+0x5e>
   17c90:	8c10      	ldrh	r0, [r2, #32]
   17c92:	4298      	cmp	r0, r3
   17c94:	d021      	beq.n	17cda <rpc_transport_input+0x5e>
   17c96:	8e10      	ldrh	r0, [r2, #48]	; 0x30
   17c98:	4298      	cmp	r0, r3
   17c9a:	d01e      	beq.n	17cda <rpc_transport_input+0x5e>
   17c9c:	f8b2 0040 	ldrh.w	r0, [r2, #64]	; 0x40
   17ca0:	4298      	cmp	r0, r3
   17ca2:	d01a      	beq.n	17cda <rpc_transport_input+0x5e>
   17ca4:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
   17ca8:	4298      	cmp	r0, r3
   17caa:	d016      	beq.n	17cda <rpc_transport_input+0x5e>
   17cac:	f8b2 0060 	ldrh.w	r0, [r2, #96]	; 0x60
   17cb0:	4298      	cmp	r0, r3
   17cb2:	d012      	beq.n	17cda <rpc_transport_input+0x5e>
   17cb4:	f8b2 0070 	ldrh.w	r0, [r2, #112]	; 0x70
   17cb8:	4298      	cmp	r0, r3
   17cba:	d00e      	beq.n	17cda <rpc_transport_input+0x5e>
   17cbc:	f8b2 0080 	ldrh.w	r0, [r2, #128]	; 0x80
   17cc0:	4298      	cmp	r0, r3
   17cc2:	d00a      	beq.n	17cda <rpc_transport_input+0x5e>
   17cc4:	f8b2 2090 	ldrh.w	r2, [r2, #144]	; 0x90
   17cc8:	429a      	cmp	r2, r3
   17cca:	d006      	beq.n	17cda <rpc_transport_input+0x5e>
   17ccc:	6888      	ldr	r0, [r1, #8]
   17cce:	b118      	cbz	r0, 17cd8 <rpc_transport_input+0x5c>
   17cd0:	4b6e      	ldr	r3, [pc, #440]	; (17e8c <rpc_transport_input+0x210>)
   17cd2:	691b      	ldr	r3, [r3, #16]
   17cd4:	4798      	blx	r3
   17cd6:	2000      	movs	r0, #0
   17cd8:	bd38      	pop	{r3, r4, r5, pc}
   17cda:	6888      	ldr	r0, [r1, #8]
   17cdc:	2800      	cmp	r0, #0
   17cde:	f000 8098 	beq.w	17e12 <rpc_transport_input+0x196>
   17ce2:	4a6b      	ldr	r2, [pc, #428]	; (17e90 <rpc_transport_input+0x214>)
   17ce4:	6814      	ldr	r4, [r2, #0]
   17ce6:	2c00      	cmp	r4, #0
   17ce8:	d03c      	beq.n	17d64 <rpc_transport_input+0xe8>
   17cea:	6894      	ldr	r4, [r2, #8]
   17cec:	2c00      	cmp	r4, #0
   17cee:	f000 809a 	beq.w	17e26 <rpc_transport_input+0x1aa>
   17cf2:	6914      	ldr	r4, [r2, #16]
   17cf4:	2c00      	cmp	r4, #0
   17cf6:	f000 809a 	beq.w	17e2e <rpc_transport_input+0x1b2>
   17cfa:	6994      	ldr	r4, [r2, #24]
   17cfc:	2c00      	cmp	r4, #0
   17cfe:	f000 809a 	beq.w	17e36 <rpc_transport_input+0x1ba>
   17d02:	6a14      	ldr	r4, [r2, #32]
   17d04:	2c00      	cmp	r4, #0
   17d06:	f000 809a 	beq.w	17e3e <rpc_transport_input+0x1c2>
   17d0a:	6a94      	ldr	r4, [r2, #40]	; 0x28
   17d0c:	2c00      	cmp	r4, #0
   17d0e:	f000 8084 	beq.w	17e1a <rpc_transport_input+0x19e>
   17d12:	6b14      	ldr	r4, [r2, #48]	; 0x30
   17d14:	2c00      	cmp	r4, #0
   17d16:	f000 8098 	beq.w	17e4a <rpc_transport_input+0x1ce>
   17d1a:	6b94      	ldr	r4, [r2, #56]	; 0x38
   17d1c:	2c00      	cmp	r4, #0
   17d1e:	f000 8096 	beq.w	17e4e <rpc_transport_input+0x1d2>
   17d22:	6c14      	ldr	r4, [r2, #64]	; 0x40
   17d24:	2c00      	cmp	r4, #0
   17d26:	f000 8096 	beq.w	17e56 <rpc_transport_input+0x1da>
   17d2a:	6c94      	ldr	r4, [r2, #72]	; 0x48
   17d2c:	2c00      	cmp	r4, #0
   17d2e:	f000 8096 	beq.w	17e5e <rpc_transport_input+0x1e2>
   17d32:	6d14      	ldr	r4, [r2, #80]	; 0x50
   17d34:	2c00      	cmp	r4, #0
   17d36:	f000 8096 	beq.w	17e66 <rpc_transport_input+0x1ea>
   17d3a:	6d94      	ldr	r4, [r2, #88]	; 0x58
   17d3c:	2c00      	cmp	r4, #0
   17d3e:	f000 8098 	beq.w	17e72 <rpc_transport_input+0x1f6>
   17d42:	6e14      	ldr	r4, [r2, #96]	; 0x60
   17d44:	2c00      	cmp	r4, #0
   17d46:	f000 8098 	beq.w	17e7a <rpc_transport_input+0x1fe>
   17d4a:	6e94      	ldr	r4, [r2, #104]	; 0x68
   17d4c:	2c00      	cmp	r4, #0
   17d4e:	f000 8096 	beq.w	17e7e <rpc_transport_input+0x202>
   17d52:	6f14      	ldr	r4, [r2, #112]	; 0x70
   17d54:	2c00      	cmp	r4, #0
   17d56:	f000 8094 	beq.w	17e82 <rpc_transport_input+0x206>
   17d5a:	6f94      	ldr	r4, [r2, #120]	; 0x78
   17d5c:	b10c      	cbz	r4, 17d62 <rpc_transport_input+0xe6>
   17d5e:	2001      	movs	r0, #1
   17d60:	bd38      	pop	{r3, r4, r5, pc}
   17d62:	240f      	movs	r4, #15
   17d64:	eb02 05c4 	add.w	r5, r2, r4, lsl #3
   17d68:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
   17d6c:	80ab      	strh	r3, [r5, #4]
   17d6e:	4b49      	ldr	r3, [pc, #292]	; (17e94 <rpc_transport_input+0x218>)
   17d70:	781a      	ldrb	r2, [r3, #0]
   17d72:	2a01      	cmp	r2, #1
   17d74:	d053      	beq.n	17e1e <rpc_transport_input+0x1a2>
   17d76:	7a1a      	ldrb	r2, [r3, #8]
   17d78:	2a01      	cmp	r2, #1
   17d7a:	d041      	beq.n	17e00 <rpc_transport_input+0x184>
   17d7c:	7c1a      	ldrb	r2, [r3, #16]
   17d7e:	2a01      	cmp	r2, #1
   17d80:	d04f      	beq.n	17e22 <rpc_transport_input+0x1a6>
   17d82:	7e1a      	ldrb	r2, [r3, #24]
   17d84:	2a01      	cmp	r2, #1
   17d86:	d050      	beq.n	17e2a <rpc_transport_input+0x1ae>
   17d88:	f893 2020 	ldrb.w	r2, [r3, #32]
   17d8c:	2a01      	cmp	r2, #1
   17d8e:	d050      	beq.n	17e32 <rpc_transport_input+0x1b6>
   17d90:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   17d94:	2a01      	cmp	r2, #1
   17d96:	d050      	beq.n	17e3a <rpc_transport_input+0x1be>
   17d98:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   17d9c:	2a01      	cmp	r2, #1
   17d9e:	d03a      	beq.n	17e16 <rpc_transport_input+0x19a>
   17da0:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   17da4:	2a01      	cmp	r2, #1
   17da6:	d04c      	beq.n	17e42 <rpc_transport_input+0x1c6>
   17da8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   17dac:	2a01      	cmp	r2, #1
   17dae:	d04a      	beq.n	17e46 <rpc_transport_input+0x1ca>
   17db0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   17db4:	2a01      	cmp	r2, #1
   17db6:	d04c      	beq.n	17e52 <rpc_transport_input+0x1d6>
   17db8:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   17dbc:	2a01      	cmp	r2, #1
   17dbe:	d04c      	beq.n	17e5a <rpc_transport_input+0x1de>
   17dc0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   17dc4:	2a01      	cmp	r2, #1
   17dc6:	d04c      	beq.n	17e62 <rpc_transport_input+0x1e6>
   17dc8:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   17dcc:	2a01      	cmp	r2, #1
   17dce:	d04c      	beq.n	17e6a <rpc_transport_input+0x1ee>
   17dd0:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   17dd4:	2a01      	cmp	r2, #1
   17dd6:	d04a      	beq.n	17e6e <rpc_transport_input+0x1f2>
   17dd8:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   17ddc:	2a01      	cmp	r2, #1
   17dde:	d04a      	beq.n	17e76 <rpc_transport_input+0x1fa>
   17de0:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   17de4:	2a01      	cmp	r2, #1
   17de6:	d00a      	beq.n	17dfe <rpc_transport_input+0x182>
   17de8:	2c10      	cmp	r4, #16
   17dea:	d0b8      	beq.n	17d5e <rpc_transport_input+0xe2>
   17dec:	2200      	movs	r2, #0
   17dee:	4b28      	ldr	r3, [pc, #160]	; (17e90 <rpc_transport_input+0x214>)
   17df0:	2001      	movs	r0, #1
   17df2:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
   17df6:	808a      	strh	r2, [r1, #4]
   17df8:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
   17dfc:	bd38      	pop	{r3, r4, r5, pc}
   17dfe:	220f      	movs	r2, #15
   17e00:	2402      	movs	r4, #2
   17e02:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
   17e06:	f803 4032 	strb.w	r4, [r3, r2, lsl #3]
   17e0a:	6041      	str	r1, [r0, #4]
   17e0c:	f7f7 fee2 	bl	fbd4 <bsd_os_application_irq_set>
   17e10:	e7a5      	b.n	17d5e <rpc_transport_input+0xe2>
   17e12:	2410      	movs	r4, #16
   17e14:	e7ab      	b.n	17d6e <rpc_transport_input+0xf2>
   17e16:	2206      	movs	r2, #6
   17e18:	e7f2      	b.n	17e00 <rpc_transport_input+0x184>
   17e1a:	2405      	movs	r4, #5
   17e1c:	e7a2      	b.n	17d64 <rpc_transport_input+0xe8>
   17e1e:	2200      	movs	r2, #0
   17e20:	e7ee      	b.n	17e00 <rpc_transport_input+0x184>
   17e22:	2202      	movs	r2, #2
   17e24:	e7ec      	b.n	17e00 <rpc_transport_input+0x184>
   17e26:	2401      	movs	r4, #1
   17e28:	e79c      	b.n	17d64 <rpc_transport_input+0xe8>
   17e2a:	2203      	movs	r2, #3
   17e2c:	e7e8      	b.n	17e00 <rpc_transport_input+0x184>
   17e2e:	2402      	movs	r4, #2
   17e30:	e798      	b.n	17d64 <rpc_transport_input+0xe8>
   17e32:	2204      	movs	r2, #4
   17e34:	e7e4      	b.n	17e00 <rpc_transport_input+0x184>
   17e36:	2403      	movs	r4, #3
   17e38:	e794      	b.n	17d64 <rpc_transport_input+0xe8>
   17e3a:	2205      	movs	r2, #5
   17e3c:	e7e0      	b.n	17e00 <rpc_transport_input+0x184>
   17e3e:	2404      	movs	r4, #4
   17e40:	e790      	b.n	17d64 <rpc_transport_input+0xe8>
   17e42:	2207      	movs	r2, #7
   17e44:	e7dc      	b.n	17e00 <rpc_transport_input+0x184>
   17e46:	2208      	movs	r2, #8
   17e48:	e7da      	b.n	17e00 <rpc_transport_input+0x184>
   17e4a:	2406      	movs	r4, #6
   17e4c:	e78a      	b.n	17d64 <rpc_transport_input+0xe8>
   17e4e:	2407      	movs	r4, #7
   17e50:	e788      	b.n	17d64 <rpc_transport_input+0xe8>
   17e52:	2209      	movs	r2, #9
   17e54:	e7d4      	b.n	17e00 <rpc_transport_input+0x184>
   17e56:	2408      	movs	r4, #8
   17e58:	e784      	b.n	17d64 <rpc_transport_input+0xe8>
   17e5a:	220a      	movs	r2, #10
   17e5c:	e7d0      	b.n	17e00 <rpc_transport_input+0x184>
   17e5e:	2409      	movs	r4, #9
   17e60:	e780      	b.n	17d64 <rpc_transport_input+0xe8>
   17e62:	220b      	movs	r2, #11
   17e64:	e7cc      	b.n	17e00 <rpc_transport_input+0x184>
   17e66:	240a      	movs	r4, #10
   17e68:	e77c      	b.n	17d64 <rpc_transport_input+0xe8>
   17e6a:	220c      	movs	r2, #12
   17e6c:	e7c8      	b.n	17e00 <rpc_transport_input+0x184>
   17e6e:	220d      	movs	r2, #13
   17e70:	e7c6      	b.n	17e00 <rpc_transport_input+0x184>
   17e72:	240b      	movs	r4, #11
   17e74:	e776      	b.n	17d64 <rpc_transport_input+0xe8>
   17e76:	220e      	movs	r2, #14
   17e78:	e7c2      	b.n	17e00 <rpc_transport_input+0x184>
   17e7a:	240c      	movs	r4, #12
   17e7c:	e772      	b.n	17d64 <rpc_transport_input+0xe8>
   17e7e:	240d      	movs	r4, #13
   17e80:	e770      	b.n	17d64 <rpc_transport_input+0xe8>
   17e82:	240e      	movs	r4, #14
   17e84:	e76e      	b.n	17d64 <rpc_transport_input+0xe8>
   17e86:	bf00      	nop
   17e88:	20021218 	.word	0x20021218
   17e8c:	200212b8 	.word	0x200212b8
   17e90:	200212d0 	.word	0x200212d0
   17e94:	20021350 	.word	0x20021350

00017e98 <rpc_transport_register>:
   17e98:	b4f0      	push	{r4, r5, r6, r7}
   17e9a:	2900      	cmp	r1, #0
   17e9c:	d052      	beq.n	17f44 <rpc_transport_register+0xac>
   17e9e:	2800      	cmp	r0, #0
   17ea0:	d050      	beq.n	17f44 <rpc_transport_register+0xac>
   17ea2:	6883      	ldr	r3, [r0, #8]
   17ea4:	2b00      	cmp	r3, #0
   17ea6:	d04d      	beq.n	17f44 <rpc_transport_register+0xac>
   17ea8:	6903      	ldr	r3, [r0, #16]
   17eaa:	2b00      	cmp	r3, #0
   17eac:	d04a      	beq.n	17f44 <rpc_transport_register+0xac>
   17eae:	6843      	ldr	r3, [r0, #4]
   17eb0:	2b00      	cmp	r3, #0
   17eb2:	d047      	beq.n	17f44 <rpc_transport_register+0xac>
   17eb4:	68c3      	ldr	r3, [r0, #12]
   17eb6:	2b00      	cmp	r3, #0
   17eb8:	d044      	beq.n	17f44 <rpc_transport_register+0xac>
   17eba:	6803      	ldr	r3, [r0, #0]
   17ebc:	2b00      	cmp	r3, #0
   17ebe:	d041      	beq.n	17f44 <rpc_transport_register+0xac>
   17ec0:	6943      	ldr	r3, [r0, #20]
   17ec2:	2b00      	cmp	r3, #0
   17ec4:	d03e      	beq.n	17f44 <rpc_transport_register+0xac>
   17ec6:	2601      	movs	r6, #1
   17ec8:	2500      	movs	r5, #0
   17eca:	4604      	mov	r4, r0
   17ecc:	460f      	mov	r7, r1
   17ece:	4a1f      	ldr	r2, [pc, #124]	; (17f4c <rpc_transport_register+0xb4>)
   17ed0:	4b1f      	ldr	r3, [pc, #124]	; (17f50 <rpc_transport_register+0xb8>)
   17ed2:	f8df c080 	ldr.w	ip, [pc, #128]	; 17f54 <rpc_transport_register+0xbc>
   17ed6:	7416      	strb	r6, [r2, #16]
   17ed8:	7616      	strb	r6, [r2, #24]
   17eda:	f882 6020 	strb.w	r6, [r2, #32]
   17ede:	f882 6028 	strb.w	r6, [r2, #40]	; 0x28
   17ee2:	f882 6030 	strb.w	r6, [r2, #48]	; 0x30
   17ee6:	f882 6038 	strb.w	r6, [r2, #56]	; 0x38
   17eea:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
   17eee:	f882 6048 	strb.w	r6, [r2, #72]	; 0x48
   17ef2:	f882 6050 	strb.w	r6, [r2, #80]	; 0x50
   17ef6:	f882 6058 	strb.w	r6, [r2, #88]	; 0x58
   17efa:	f882 6060 	strb.w	r6, [r2, #96]	; 0x60
   17efe:	f882 6068 	strb.w	r6, [r2, #104]	; 0x68
   17f02:	f882 6070 	strb.w	r6, [r2, #112]	; 0x70
   17f06:	f882 6078 	strb.w	r6, [r2, #120]	; 0x78
   17f0a:	611d      	str	r5, [r3, #16]
   17f0c:	619d      	str	r5, [r3, #24]
   17f0e:	621d      	str	r5, [r3, #32]
   17f10:	629d      	str	r5, [r3, #40]	; 0x28
   17f12:	631d      	str	r5, [r3, #48]	; 0x30
   17f14:	639d      	str	r5, [r3, #56]	; 0x38
   17f16:	641d      	str	r5, [r3, #64]	; 0x40
   17f18:	649d      	str	r5, [r3, #72]	; 0x48
   17f1a:	651d      	str	r5, [r3, #80]	; 0x50
   17f1c:	659d      	str	r5, [r3, #88]	; 0x58
   17f1e:	661d      	str	r5, [r3, #96]	; 0x60
   17f20:	669d      	str	r5, [r3, #104]	; 0x68
   17f22:	671d      	str	r5, [r3, #112]	; 0x70
   17f24:	679d      	str	r5, [r3, #120]	; 0x78
   17f26:	7016      	strb	r6, [r2, #0]
   17f28:	7216      	strb	r6, [r2, #8]
   17f2a:	601d      	str	r5, [r3, #0]
   17f2c:	609d      	str	r5, [r3, #8]
   17f2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   17f30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   17f34:	e894 0003 	ldmia.w	r4, {r0, r1}
   17f38:	e88c 0003 	stmia.w	ip, {r0, r1}
   17f3c:	603e      	str	r6, [r7, #0]
   17f3e:	4628      	mov	r0, r5
   17f40:	bcf0      	pop	{r4, r5, r6, r7}
   17f42:	4770      	bx	lr
   17f44:	250e      	movs	r5, #14
   17f46:	4628      	mov	r0, r5
   17f48:	bcf0      	pop	{r4, r5, r6, r7}
   17f4a:	4770      	bx	lr
   17f4c:	20021350 	.word	0x20021350
   17f50:	200212d0 	.word	0x200212d0
   17f54:	200212b8 	.word	0x200212b8

00017f58 <rpc_transport_unregister>:
   17f58:	2800      	cmp	r0, #0
   17f5a:	d03a      	beq.n	17fd2 <rpc_transport_unregister+0x7a>
   17f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17f60:	4680      	mov	r8, r0
   17f62:	4c1d      	ldr	r4, [pc, #116]	; (17fd8 <rpc_transport_unregister+0x80>)
   17f64:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
   17f68:	68a3      	ldr	r3, [r4, #8]
   17f6a:	3410      	adds	r4, #16
   17f6c:	b103      	cbz	r3, 17f70 <rpc_transport_unregister+0x18>
   17f6e:	4798      	blx	r3
   17f70:	42ac      	cmp	r4, r5
   17f72:	d1f9      	bne.n	17f68 <rpc_transport_unregister+0x10>
   17f74:	f04f 0901 	mov.w	r9, #1
   17f78:	2600      	movs	r6, #0
   17f7a:	4c18      	ldr	r4, [pc, #96]	; (17fdc <rpc_transport_unregister+0x84>)
   17f7c:	4d18      	ldr	r5, [pc, #96]	; (17fe0 <rpc_transport_unregister+0x88>)
   17f7e:	f8df a064 	ldr.w	sl, [pc, #100]	; 17fe4 <rpc_transport_unregister+0x8c>
   17f82:	f104 0780 	add.w	r7, r4, #128	; 0x80
   17f86:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   17f8a:	2b01      	cmp	r3, #1
   17f8c:	d005      	beq.n	17f9a <rpc_transport_unregister+0x42>
   17f8e:	f8da 300c 	ldr.w	r3, [sl, #12]
   17f92:	6820      	ldr	r0, [r4, #0]
   17f94:	4798      	blx	r3
   17f96:	f804 9c04 	strb.w	r9, [r4, #-4]
   17f9a:	f855 0c04 	ldr.w	r0, [r5, #-4]
   17f9e:	3408      	adds	r4, #8
   17fa0:	b128      	cbz	r0, 17fae <rpc_transport_unregister+0x56>
   17fa2:	f8da 3010 	ldr.w	r3, [sl, #16]
   17fa6:	4798      	blx	r3
   17fa8:	802e      	strh	r6, [r5, #0]
   17faa:	f845 6c04 	str.w	r6, [r5, #-4]
   17fae:	42bc      	cmp	r4, r7
   17fb0:	f105 0508 	add.w	r5, r5, #8
   17fb4:	d1e7      	bne.n	17f86 <rpc_transport_unregister+0x2e>
   17fb6:	f8d8 0000 	ldr.w	r0, [r8]
   17fba:	2218      	movs	r2, #24
   17fbc:	3801      	subs	r0, #1
   17fbe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17fc2:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
   17fc6:	2100      	movs	r1, #0
   17fc8:	f003 fec9 	bl	1bd5e <memset>
   17fcc:	2000      	movs	r0, #0
   17fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17fd2:	200e      	movs	r0, #14
   17fd4:	4770      	bx	lr
   17fd6:	bf00      	nop
   17fd8:	20021218 	.word	0x20021218
   17fdc:	20021354 	.word	0x20021354
   17fe0:	200212d4 	.word	0x200212d4
   17fe4:	200212b8 	.word	0x200212b8

00017fe8 <rpc_message_send>:
   17fe8:	b168      	cbz	r0, 18006 <rpc_message_send+0x1e>
   17fea:	b171      	cbz	r1, 1800a <rpc_message_send+0x22>
   17fec:	4a09      	ldr	r2, [pc, #36]	; (18014 <rpc_message_send+0x2c>)
   17fee:	6853      	ldr	r3, [r2, #4]
   17ff0:	b16b      	cbz	r3, 1800e <rpc_message_send+0x26>
   17ff2:	684b      	ldr	r3, [r1, #4]
   17ff4:	8008      	strh	r0, [r1, #0]
   17ff6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   17ffa:	f043 0302 	orr.w	r3, r3, #2
   17ffe:	6812      	ldr	r2, [r2, #0]
   18000:	604b      	str	r3, [r1, #4]
   18002:	4608      	mov	r0, r1
   18004:	4710      	bx	r2
   18006:	2007      	movs	r0, #7
   18008:	4770      	bx	lr
   1800a:	200e      	movs	r0, #14
   1800c:	4770      	bx	lr
   1800e:	2008      	movs	r0, #8
   18010:	4770      	bx	lr
   18012:	bf00      	nop
   18014:	200212b8 	.word	0x200212b8

00018018 <rpc_message_alloc>:
   18018:	b35a      	cbz	r2, 18072 <rpc_message_alloc+0x5a>
   1801a:	b330      	cbz	r0, 1806a <rpc_message_alloc+0x52>
   1801c:	2300      	movs	r3, #0
   1801e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18022:	4f15      	ldr	r7, [pc, #84]	; (18078 <rpc_message_alloc+0x60>)
   18024:	6013      	str	r3, [r2, #0]
   18026:	687b      	ldr	r3, [r7, #4]
   18028:	b30b      	cbz	r3, 1806e <rpc_message_alloc+0x56>
   1802a:	4615      	mov	r5, r2
   1802c:	460c      	mov	r4, r1
   1802e:	4606      	mov	r6, r0
   18030:	b959      	cbnz	r1, 1804a <rpc_message_alloc+0x32>
   18032:	4798      	blx	r3
   18034:	4603      	mov	r3, r0
   18036:	b1a8      	cbz	r0, 18064 <rpc_message_alloc+0x4c>
   18038:	46a0      	mov	r8, r4
   1803a:	60dc      	str	r4, [r3, #12]
   1803c:	f8c3 8008 	str.w	r8, [r3, #8]
   18040:	801e      	strh	r6, [r3, #0]
   18042:	602b      	str	r3, [r5, #0]
   18044:	2000      	movs	r0, #0
   18046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1804a:	68bb      	ldr	r3, [r7, #8]
   1804c:	4608      	mov	r0, r1
   1804e:	4798      	blx	r3
   18050:	4680      	mov	r8, r0
   18052:	b138      	cbz	r0, 18064 <rpc_message_alloc+0x4c>
   18054:	687b      	ldr	r3, [r7, #4]
   18056:	4798      	blx	r3
   18058:	4603      	mov	r3, r0
   1805a:	2800      	cmp	r0, #0
   1805c:	d1ed      	bne.n	1803a <rpc_message_alloc+0x22>
   1805e:	693b      	ldr	r3, [r7, #16]
   18060:	4640      	mov	r0, r8
   18062:	4798      	blx	r3
   18064:	2004      	movs	r0, #4
   18066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1806a:	2007      	movs	r0, #7
   1806c:	4770      	bx	lr
   1806e:	2008      	movs	r0, #8
   18070:	e7f9      	b.n	18066 <rpc_message_alloc+0x4e>
   18072:	200e      	movs	r0, #14
   18074:	4770      	bx	lr
   18076:	bf00      	nop
   18078:	200212b8 	.word	0x200212b8

0001807c <rpc_message_free>:
   1807c:	2800      	cmp	r0, #0
   1807e:	f000 808c 	beq.w	1819a <rpc_message_free+0x11e>
   18082:	2900      	cmp	r1, #0
   18084:	f000 80e9 	beq.w	1825a <rpc_message_free+0x1de>
   18088:	b538      	push	{r3, r4, r5, lr}
   1808a:	4a83      	ldr	r2, [pc, #524]	; (18298 <rpc_message_free+0x21c>)
   1808c:	6853      	ldr	r3, [r2, #4]
   1808e:	2b00      	cmp	r3, #0
   18090:	f000 8085 	beq.w	1819e <rpc_message_free+0x122>
   18094:	4c81      	ldr	r4, [pc, #516]	; (1829c <rpc_message_free+0x220>)
   18096:	4608      	mov	r0, r1
   18098:	6863      	ldr	r3, [r4, #4]
   1809a:	4299      	cmp	r1, r3
   1809c:	f000 8085 	beq.w	181aa <rpc_message_free+0x12e>
   180a0:	68e3      	ldr	r3, [r4, #12]
   180a2:	4298      	cmp	r0, r3
   180a4:	f000 808e 	beq.w	181c4 <rpc_message_free+0x148>
   180a8:	6963      	ldr	r3, [r4, #20]
   180aa:	4298      	cmp	r0, r3
   180ac:	f000 8090 	beq.w	181d0 <rpc_message_free+0x154>
   180b0:	69e3      	ldr	r3, [r4, #28]
   180b2:	4298      	cmp	r0, r3
   180b4:	f000 8092 	beq.w	181dc <rpc_message_free+0x160>
   180b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   180ba:	4298      	cmp	r0, r3
   180bc:	f000 8095 	beq.w	181ea <rpc_message_free+0x16e>
   180c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   180c2:	4298      	cmp	r0, r3
   180c4:	f000 8098 	beq.w	181f8 <rpc_message_free+0x17c>
   180c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   180ca:	4298      	cmp	r0, r3
   180cc:	f000 809b 	beq.w	18206 <rpc_message_free+0x18a>
   180d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   180d2:	4298      	cmp	r0, r3
   180d4:	f000 809e 	beq.w	18214 <rpc_message_free+0x198>
   180d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   180da:	4298      	cmp	r0, r3
   180dc:	f000 80a1 	beq.w	18222 <rpc_message_free+0x1a6>
   180e0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   180e2:	4298      	cmp	r0, r3
   180e4:	f000 80a4 	beq.w	18230 <rpc_message_free+0x1b4>
   180e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   180ea:	4298      	cmp	r0, r3
   180ec:	f000 80a7 	beq.w	1823e <rpc_message_free+0x1c2>
   180f0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   180f2:	4298      	cmp	r0, r3
   180f4:	f000 80aa 	beq.w	1824c <rpc_message_free+0x1d0>
   180f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   180fa:	4298      	cmp	r0, r3
   180fc:	f000 80af 	beq.w	1825e <rpc_message_free+0x1e2>
   18100:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   18102:	4298      	cmp	r0, r3
   18104:	f000 80b2 	beq.w	1826c <rpc_message_free+0x1f0>
   18108:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1810a:	4298      	cmp	r0, r3
   1810c:	f000 80b5 	beq.w	1827a <rpc_message_free+0x1fe>
   18110:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   18112:	4283      	cmp	r3, r0
   18114:	f000 80b8 	beq.w	18288 <rpc_message_free+0x20c>
   18118:	68d3      	ldr	r3, [r2, #12]
   1811a:	4798      	blx	r3
   1811c:	7823      	ldrb	r3, [r4, #0]
   1811e:	2b04      	cmp	r3, #4
   18120:	d03f      	beq.n	181a2 <rpc_message_free+0x126>
   18122:	7a23      	ldrb	r3, [r4, #8]
   18124:	2b04      	cmp	r3, #4
   18126:	d03c      	beq.n	181a2 <rpc_message_free+0x126>
   18128:	7c23      	ldrb	r3, [r4, #16]
   1812a:	2b04      	cmp	r3, #4
   1812c:	d039      	beq.n	181a2 <rpc_message_free+0x126>
   1812e:	7e23      	ldrb	r3, [r4, #24]
   18130:	2b04      	cmp	r3, #4
   18132:	d036      	beq.n	181a2 <rpc_message_free+0x126>
   18134:	f894 3020 	ldrb.w	r3, [r4, #32]
   18138:	2b04      	cmp	r3, #4
   1813a:	d032      	beq.n	181a2 <rpc_message_free+0x126>
   1813c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   18140:	2b04      	cmp	r3, #4
   18142:	d02e      	beq.n	181a2 <rpc_message_free+0x126>
   18144:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   18148:	2b04      	cmp	r3, #4
   1814a:	d02a      	beq.n	181a2 <rpc_message_free+0x126>
   1814c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   18150:	2b04      	cmp	r3, #4
   18152:	d026      	beq.n	181a2 <rpc_message_free+0x126>
   18154:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   18158:	2b04      	cmp	r3, #4
   1815a:	d022      	beq.n	181a2 <rpc_message_free+0x126>
   1815c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   18160:	2b04      	cmp	r3, #4
   18162:	d01e      	beq.n	181a2 <rpc_message_free+0x126>
   18164:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   18168:	2b04      	cmp	r3, #4
   1816a:	d01a      	beq.n	181a2 <rpc_message_free+0x126>
   1816c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   18170:	2b04      	cmp	r3, #4
   18172:	d016      	beq.n	181a2 <rpc_message_free+0x126>
   18174:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   18178:	2b04      	cmp	r3, #4
   1817a:	d012      	beq.n	181a2 <rpc_message_free+0x126>
   1817c:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   18180:	2b04      	cmp	r3, #4
   18182:	d00e      	beq.n	181a2 <rpc_message_free+0x126>
   18184:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   18188:	2b04      	cmp	r3, #4
   1818a:	d00a      	beq.n	181a2 <rpc_message_free+0x126>
   1818c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   18190:	2b04      	cmp	r3, #4
   18192:	bf18      	it	ne
   18194:	2000      	movne	r0, #0
   18196:	d004      	beq.n	181a2 <rpc_message_free+0x126>
   18198:	bd38      	pop	{r3, r4, r5, pc}
   1819a:	2007      	movs	r0, #7
   1819c:	4770      	bx	lr
   1819e:	2008      	movs	r0, #8
   181a0:	bd38      	pop	{r3, r4, r5, pc}
   181a2:	f7f7 fd17 	bl	fbd4 <bsd_os_application_irq_set>
   181a6:	2000      	movs	r0, #0
   181a8:	bd38      	pop	{r3, r4, r5, pc}
   181aa:	7821      	ldrb	r1, [r4, #0]
   181ac:	2903      	cmp	r1, #3
   181ae:	f47f af77 	bne.w	180a0 <rpc_message_free+0x24>
   181b2:	2100      	movs	r1, #0
   181b4:	2501      	movs	r5, #1
   181b6:	4618      	mov	r0, r3
   181b8:	68d2      	ldr	r2, [r2, #12]
   181ba:	f804 5031 	strb.w	r5, [r4, r1, lsl #3]
   181be:	4790      	blx	r2
   181c0:	2000      	movs	r0, #0
   181c2:	bd38      	pop	{r3, r4, r5, pc}
   181c4:	7a21      	ldrb	r1, [r4, #8]
   181c6:	2903      	cmp	r1, #3
   181c8:	f47f af6e 	bne.w	180a8 <rpc_message_free+0x2c>
   181cc:	2101      	movs	r1, #1
   181ce:	e7f1      	b.n	181b4 <rpc_message_free+0x138>
   181d0:	7c21      	ldrb	r1, [r4, #16]
   181d2:	2903      	cmp	r1, #3
   181d4:	f47f af6c 	bne.w	180b0 <rpc_message_free+0x34>
   181d8:	2102      	movs	r1, #2
   181da:	e7eb      	b.n	181b4 <rpc_message_free+0x138>
   181dc:	7e21      	ldrb	r1, [r4, #24]
   181de:	2903      	cmp	r1, #3
   181e0:	d0e8      	beq.n	181b4 <rpc_message_free+0x138>
   181e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   181e4:	4298      	cmp	r0, r3
   181e6:	f47f af6b 	bne.w	180c0 <rpc_message_free+0x44>
   181ea:	f894 1020 	ldrb.w	r1, [r4, #32]
   181ee:	2903      	cmp	r1, #3
   181f0:	f47f af66 	bne.w	180c0 <rpc_message_free+0x44>
   181f4:	2104      	movs	r1, #4
   181f6:	e7dd      	b.n	181b4 <rpc_message_free+0x138>
   181f8:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   181fc:	2903      	cmp	r1, #3
   181fe:	f47f af63 	bne.w	180c8 <rpc_message_free+0x4c>
   18202:	2105      	movs	r1, #5
   18204:	e7d6      	b.n	181b4 <rpc_message_free+0x138>
   18206:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
   1820a:	2903      	cmp	r1, #3
   1820c:	f47f af60 	bne.w	180d0 <rpc_message_free+0x54>
   18210:	2106      	movs	r1, #6
   18212:	e7cf      	b.n	181b4 <rpc_message_free+0x138>
   18214:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   18218:	2903      	cmp	r1, #3
   1821a:	f47f af5d 	bne.w	180d8 <rpc_message_free+0x5c>
   1821e:	2107      	movs	r1, #7
   18220:	e7c8      	b.n	181b4 <rpc_message_free+0x138>
   18222:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   18226:	2903      	cmp	r1, #3
   18228:	f47f af5a 	bne.w	180e0 <rpc_message_free+0x64>
   1822c:	2108      	movs	r1, #8
   1822e:	e7c1      	b.n	181b4 <rpc_message_free+0x138>
   18230:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
   18234:	2903      	cmp	r1, #3
   18236:	f47f af57 	bne.w	180e8 <rpc_message_free+0x6c>
   1823a:	2109      	movs	r1, #9
   1823c:	e7ba      	b.n	181b4 <rpc_message_free+0x138>
   1823e:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   18242:	2903      	cmp	r1, #3
   18244:	f47f af54 	bne.w	180f0 <rpc_message_free+0x74>
   18248:	210a      	movs	r1, #10
   1824a:	e7b3      	b.n	181b4 <rpc_message_free+0x138>
   1824c:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
   18250:	2903      	cmp	r1, #3
   18252:	f47f af51 	bne.w	180f8 <rpc_message_free+0x7c>
   18256:	210b      	movs	r1, #11
   18258:	e7ac      	b.n	181b4 <rpc_message_free+0x138>
   1825a:	200e      	movs	r0, #14
   1825c:	4770      	bx	lr
   1825e:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   18262:	2903      	cmp	r1, #3
   18264:	f47f af4c 	bne.w	18100 <rpc_message_free+0x84>
   18268:	210c      	movs	r1, #12
   1826a:	e7a3      	b.n	181b4 <rpc_message_free+0x138>
   1826c:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
   18270:	2903      	cmp	r1, #3
   18272:	f47f af49 	bne.w	18108 <rpc_message_free+0x8c>
   18276:	210d      	movs	r1, #13
   18278:	e79c      	b.n	181b4 <rpc_message_free+0x138>
   1827a:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
   1827e:	2903      	cmp	r1, #3
   18280:	f47f af46 	bne.w	18110 <rpc_message_free+0x94>
   18284:	210e      	movs	r1, #14
   18286:	e795      	b.n	181b4 <rpc_message_free+0x138>
   18288:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1828c:	2b03      	cmp	r3, #3
   1828e:	f47f af43 	bne.w	18118 <rpc_message_free+0x9c>
   18292:	4603      	mov	r3, r0
   18294:	210f      	movs	r1, #15
   18296:	e78d      	b.n	181b4 <rpc_message_free+0x138>
   18298:	200212b8 	.word	0x200212b8
   1829c:	20021350 	.word	0x20021350

000182a0 <rpc_message_data_free>:
   182a0:	2800      	cmp	r0, #0
   182a2:	f000 8091 	beq.w	183c8 <rpc_message_data_free+0x128>
   182a6:	2900      	cmp	r1, #0
   182a8:	f000 80e4 	beq.w	18474 <rpc_message_data_free+0x1d4>
   182ac:	b538      	push	{r3, r4, r5, lr}
   182ae:	4a81      	ldr	r2, [pc, #516]	; (184b4 <rpc_message_data_free+0x214>)
   182b0:	6853      	ldr	r3, [r2, #4]
   182b2:	2b00      	cmp	r3, #0
   182b4:	f000 808a 	beq.w	183cc <rpc_message_data_free+0x12c>
   182b8:	4b7f      	ldr	r3, [pc, #508]	; (184b8 <rpc_message_data_free+0x218>)
   182ba:	681c      	ldr	r4, [r3, #0]
   182bc:	42a1      	cmp	r1, r4
   182be:	f000 8087 	beq.w	183d0 <rpc_message_data_free+0x130>
   182c2:	689c      	ldr	r4, [r3, #8]
   182c4:	42a1      	cmp	r1, r4
   182c6:	f000 808f 	beq.w	183e8 <rpc_message_data_free+0x148>
   182ca:	691c      	ldr	r4, [r3, #16]
   182cc:	42a1      	cmp	r1, r4
   182ce:	f000 8091 	beq.w	183f4 <rpc_message_data_free+0x154>
   182d2:	699c      	ldr	r4, [r3, #24]
   182d4:	42a1      	cmp	r1, r4
   182d6:	f000 8093 	beq.w	18400 <rpc_message_data_free+0x160>
   182da:	6a1c      	ldr	r4, [r3, #32]
   182dc:	42a1      	cmp	r1, r4
   182de:	f000 8095 	beq.w	1840c <rpc_message_data_free+0x16c>
   182e2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   182e4:	42a1      	cmp	r1, r4
   182e6:	f000 8097 	beq.w	18418 <rpc_message_data_free+0x178>
   182ea:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   182ec:	42a1      	cmp	r1, r4
   182ee:	f000 8099 	beq.w	18424 <rpc_message_data_free+0x184>
   182f2:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   182f4:	42a1      	cmp	r1, r4
   182f6:	f000 809b 	beq.w	18430 <rpc_message_data_free+0x190>
   182fa:	6c1c      	ldr	r4, [r3, #64]	; 0x40
   182fc:	42a1      	cmp	r1, r4
   182fe:	f000 809d 	beq.w	1843c <rpc_message_data_free+0x19c>
   18302:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   18304:	42a1      	cmp	r1, r4
   18306:	f000 80a0 	beq.w	1844a <rpc_message_data_free+0x1aa>
   1830a:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   1830c:	42a1      	cmp	r1, r4
   1830e:	f000 80a3 	beq.w	18458 <rpc_message_data_free+0x1b8>
   18312:	6d9c      	ldr	r4, [r3, #88]	; 0x58
   18314:	42a1      	cmp	r1, r4
   18316:	f000 80a6 	beq.w	18466 <rpc_message_data_free+0x1c6>
   1831a:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   1831c:	42a1      	cmp	r1, r4
   1831e:	f000 80ab 	beq.w	18478 <rpc_message_data_free+0x1d8>
   18322:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   18324:	42a1      	cmp	r1, r4
   18326:	f000 80ae 	beq.w	18486 <rpc_message_data_free+0x1e6>
   1832a:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   1832c:	42a1      	cmp	r1, r4
   1832e:	f000 80b1 	beq.w	18494 <rpc_message_data_free+0x1f4>
   18332:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   18334:	428c      	cmp	r4, r1
   18336:	f000 80b4 	beq.w	184a2 <rpc_message_data_free+0x202>
   1833a:	6913      	ldr	r3, [r2, #16]
   1833c:	4608      	mov	r0, r1
   1833e:	4798      	blx	r3
   18340:	4b5e      	ldr	r3, [pc, #376]	; (184bc <rpc_message_data_free+0x21c>)
   18342:	781a      	ldrb	r2, [r3, #0]
   18344:	2a04      	cmp	r2, #4
   18346:	d03b      	beq.n	183c0 <rpc_message_data_free+0x120>
   18348:	7a1a      	ldrb	r2, [r3, #8]
   1834a:	2a04      	cmp	r2, #4
   1834c:	d038      	beq.n	183c0 <rpc_message_data_free+0x120>
   1834e:	7c1a      	ldrb	r2, [r3, #16]
   18350:	2a04      	cmp	r2, #4
   18352:	d035      	beq.n	183c0 <rpc_message_data_free+0x120>
   18354:	7e1a      	ldrb	r2, [r3, #24]
   18356:	2a04      	cmp	r2, #4
   18358:	d032      	beq.n	183c0 <rpc_message_data_free+0x120>
   1835a:	f893 2020 	ldrb.w	r2, [r3, #32]
   1835e:	2a04      	cmp	r2, #4
   18360:	d02e      	beq.n	183c0 <rpc_message_data_free+0x120>
   18362:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   18366:	2a04      	cmp	r2, #4
   18368:	d02a      	beq.n	183c0 <rpc_message_data_free+0x120>
   1836a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   1836e:	2a04      	cmp	r2, #4
   18370:	d026      	beq.n	183c0 <rpc_message_data_free+0x120>
   18372:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   18376:	2a04      	cmp	r2, #4
   18378:	d022      	beq.n	183c0 <rpc_message_data_free+0x120>
   1837a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   1837e:	2a04      	cmp	r2, #4
   18380:	d01e      	beq.n	183c0 <rpc_message_data_free+0x120>
   18382:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   18386:	2a04      	cmp	r2, #4
   18388:	d01a      	beq.n	183c0 <rpc_message_data_free+0x120>
   1838a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   1838e:	2a04      	cmp	r2, #4
   18390:	d016      	beq.n	183c0 <rpc_message_data_free+0x120>
   18392:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   18396:	2a04      	cmp	r2, #4
   18398:	d012      	beq.n	183c0 <rpc_message_data_free+0x120>
   1839a:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   1839e:	2a04      	cmp	r2, #4
   183a0:	d00e      	beq.n	183c0 <rpc_message_data_free+0x120>
   183a2:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   183a6:	2a04      	cmp	r2, #4
   183a8:	d00a      	beq.n	183c0 <rpc_message_data_free+0x120>
   183aa:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   183ae:	2a04      	cmp	r2, #4
   183b0:	d006      	beq.n	183c0 <rpc_message_data_free+0x120>
   183b2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   183b6:	2b04      	cmp	r3, #4
   183b8:	bf18      	it	ne
   183ba:	2000      	movne	r0, #0
   183bc:	d000      	beq.n	183c0 <rpc_message_data_free+0x120>
   183be:	bd38      	pop	{r3, r4, r5, pc}
   183c0:	f7f7 fc08 	bl	fbd4 <bsd_os_application_irq_set>
   183c4:	2000      	movs	r0, #0
   183c6:	bd38      	pop	{r3, r4, r5, pc}
   183c8:	2007      	movs	r0, #7
   183ca:	4770      	bx	lr
   183cc:	2008      	movs	r0, #8
   183ce:	bd38      	pop	{r3, r4, r5, pc}
   183d0:	889c      	ldrh	r4, [r3, #4]
   183d2:	4284      	cmp	r4, r0
   183d4:	f47f af75 	bne.w	182c2 <rpc_message_data_free+0x22>
   183d8:	2400      	movs	r4, #0
   183da:	2000      	movs	r0, #0
   183dc:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   183e0:	f843 0034 	str.w	r0, [r3, r4, lsl #3]
   183e4:	80a8      	strh	r0, [r5, #4]
   183e6:	e7a8      	b.n	1833a <rpc_message_data_free+0x9a>
   183e8:	899c      	ldrh	r4, [r3, #12]
   183ea:	4284      	cmp	r4, r0
   183ec:	f47f af6d 	bne.w	182ca <rpc_message_data_free+0x2a>
   183f0:	2401      	movs	r4, #1
   183f2:	e7f2      	b.n	183da <rpc_message_data_free+0x13a>
   183f4:	8a9c      	ldrh	r4, [r3, #20]
   183f6:	4284      	cmp	r4, r0
   183f8:	f47f af6b 	bne.w	182d2 <rpc_message_data_free+0x32>
   183fc:	2402      	movs	r4, #2
   183fe:	e7ec      	b.n	183da <rpc_message_data_free+0x13a>
   18400:	8b9c      	ldrh	r4, [r3, #28]
   18402:	4284      	cmp	r4, r0
   18404:	f47f af69 	bne.w	182da <rpc_message_data_free+0x3a>
   18408:	2403      	movs	r4, #3
   1840a:	e7e6      	b.n	183da <rpc_message_data_free+0x13a>
   1840c:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
   1840e:	4284      	cmp	r4, r0
   18410:	f47f af67 	bne.w	182e2 <rpc_message_data_free+0x42>
   18414:	2404      	movs	r4, #4
   18416:	e7e0      	b.n	183da <rpc_message_data_free+0x13a>
   18418:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
   1841a:	4284      	cmp	r4, r0
   1841c:	f47f af65 	bne.w	182ea <rpc_message_data_free+0x4a>
   18420:	2405      	movs	r4, #5
   18422:	e7da      	b.n	183da <rpc_message_data_free+0x13a>
   18424:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
   18426:	4284      	cmp	r4, r0
   18428:	f47f af63 	bne.w	182f2 <rpc_message_data_free+0x52>
   1842c:	2406      	movs	r4, #6
   1842e:	e7d4      	b.n	183da <rpc_message_data_free+0x13a>
   18430:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
   18432:	4284      	cmp	r4, r0
   18434:	f47f af61 	bne.w	182fa <rpc_message_data_free+0x5a>
   18438:	2407      	movs	r4, #7
   1843a:	e7ce      	b.n	183da <rpc_message_data_free+0x13a>
   1843c:	f8b3 4044 	ldrh.w	r4, [r3, #68]	; 0x44
   18440:	4284      	cmp	r4, r0
   18442:	f47f af5e 	bne.w	18302 <rpc_message_data_free+0x62>
   18446:	2408      	movs	r4, #8
   18448:	e7c7      	b.n	183da <rpc_message_data_free+0x13a>
   1844a:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
   1844e:	4284      	cmp	r4, r0
   18450:	f47f af5b 	bne.w	1830a <rpc_message_data_free+0x6a>
   18454:	2409      	movs	r4, #9
   18456:	e7c0      	b.n	183da <rpc_message_data_free+0x13a>
   18458:	f8b3 4054 	ldrh.w	r4, [r3, #84]	; 0x54
   1845c:	4284      	cmp	r4, r0
   1845e:	f47f af58 	bne.w	18312 <rpc_message_data_free+0x72>
   18462:	240a      	movs	r4, #10
   18464:	e7b9      	b.n	183da <rpc_message_data_free+0x13a>
   18466:	f8b3 405c 	ldrh.w	r4, [r3, #92]	; 0x5c
   1846a:	4284      	cmp	r4, r0
   1846c:	f47f af55 	bne.w	1831a <rpc_message_data_free+0x7a>
   18470:	240b      	movs	r4, #11
   18472:	e7b2      	b.n	183da <rpc_message_data_free+0x13a>
   18474:	200e      	movs	r0, #14
   18476:	4770      	bx	lr
   18478:	f8b3 4064 	ldrh.w	r4, [r3, #100]	; 0x64
   1847c:	4284      	cmp	r4, r0
   1847e:	f47f af50 	bne.w	18322 <rpc_message_data_free+0x82>
   18482:	240c      	movs	r4, #12
   18484:	e7a9      	b.n	183da <rpc_message_data_free+0x13a>
   18486:	f8b3 406c 	ldrh.w	r4, [r3, #108]	; 0x6c
   1848a:	4284      	cmp	r4, r0
   1848c:	f47f af4d 	bne.w	1832a <rpc_message_data_free+0x8a>
   18490:	240d      	movs	r4, #13
   18492:	e7a2      	b.n	183da <rpc_message_data_free+0x13a>
   18494:	f8b3 4074 	ldrh.w	r4, [r3, #116]	; 0x74
   18498:	4284      	cmp	r4, r0
   1849a:	f47f af4a 	bne.w	18332 <rpc_message_data_free+0x92>
   1849e:	240e      	movs	r4, #14
   184a0:	e79b      	b.n	183da <rpc_message_data_free+0x13a>
   184a2:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
   184a6:	4284      	cmp	r4, r0
   184a8:	bf08      	it	eq
   184aa:	240f      	moveq	r4, #15
   184ac:	f47f af45 	bne.w	1833a <rpc_message_data_free+0x9a>
   184b0:	e793      	b.n	183da <rpc_message_data_free+0x13a>
   184b2:	bf00      	nop
   184b4:	200212b8 	.word	0x200212b8
   184b8:	200212d0 	.word	0x200212d0
   184bc:	20021350 	.word	0x20021350

000184c0 <packet_free_cb>:
   184c0:	b510      	push	{r4, lr}
   184c2:	4604      	mov	r4, r0
   184c4:	b118      	cbz	r0, 184ce <packet_free_cb+0xe>
   184c6:	6800      	ldr	r0, [r0, #0]
   184c8:	b108      	cbz	r0, 184ce <packet_free_cb+0xe>
   184ca:	f001 f829 	bl	19520 <rpc_gnss_client_data_free>
   184ce:	68a0      	ldr	r0, [r4, #8]
   184d0:	b118      	cbz	r0, 184da <packet_free_cb+0x1a>
   184d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   184d6:	f7fa b99f 	b.w	12818 <nrf_free>
   184da:	bd10      	pop	{r4, pc}

000184dc <rpc_gnss_event_handler>:
   184dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   184e0:	4b64      	ldr	r3, [pc, #400]	; (18674 <rpc_gnss_event_handler+0x198>)
   184e2:	4606      	mov	r6, r0
   184e4:	6800      	ldr	r0, [r0, #0]
   184e6:	881b      	ldrh	r3, [r3, #0]
   184e8:	6802      	ldr	r2, [r0, #0]
   184ea:	4f63      	ldr	r7, [pc, #396]	; (18678 <rpc_gnss_event_handler+0x19c>)
   184ec:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   184f0:	b084      	sub	sp, #16
   184f2:	460d      	mov	r5, r1
   184f4:	6038      	str	r0, [r7, #0]
   184f6:	d038      	beq.n	1856a <rpc_gnss_event_handler+0x8e>
   184f8:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   184fc:	33ff      	adds	r3, #255	; 0xff
   184fe:	b29b      	uxth	r3, r3
   18500:	2b02      	cmp	r3, #2
   18502:	d810      	bhi.n	18526 <rpc_gnss_event_handler+0x4a>
   18504:	4c5d      	ldr	r4, [pc, #372]	; (1867c <rpc_gnss_event_handler+0x1a0>)
   18506:	6823      	ldr	r3, [r4, #0]
   18508:	075a      	lsls	r2, r3, #29
   1850a:	d410      	bmi.n	1852e <rpc_gnss_event_handler+0x52>
   1850c:	6823      	ldr	r3, [r4, #0]
   1850e:	079b      	lsls	r3, r3, #30
   18510:	d503      	bpl.n	1851a <rpc_gnss_event_handler+0x3e>
   18512:	f244 0303 	movw	r3, #16387	; 0x4003
   18516:	429d      	cmp	r5, r3
   18518:	d009      	beq.n	1852e <rpc_gnss_event_handler+0x52>
   1851a:	6830      	ldr	r0, [r6, #0]
   1851c:	b118      	cbz	r0, 18526 <rpc_gnss_event_handler+0x4a>
   1851e:	f000 ffff 	bl	19520 <rpc_gnss_client_data_free>
   18522:	2300      	movs	r3, #0
   18524:	603b      	str	r3, [r7, #0]
   18526:	2000      	movs	r0, #0
   18528:	b004      	add	sp, #16
   1852a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1852e:	2002      	movs	r0, #2
   18530:	f7fa f968 	bl	12804 <nrf_malloc>
   18534:	4680      	mov	r8, r0
   18536:	2800      	cmp	r0, #0
   18538:	f000 8093 	beq.w	18662 <rpc_gnss_event_handler+0x186>
   1853c:	2302      	movs	r3, #2
   1853e:	8005      	strh	r5, [r0, #0]
   18540:	6831      	ldr	r1, [r6, #0]
   18542:	6872      	ldr	r2, [r6, #4]
   18544:	484e      	ldr	r0, [pc, #312]	; (18680 <rpc_gnss_event_handler+0x1a4>)
   18546:	e88d 0106 	stmia.w	sp, {r1, r2, r8}
   1854a:	6800      	ldr	r0, [r0, #0]
   1854c:	9303      	str	r3, [sp, #12]
   1854e:	6803      	ldr	r3, [r0, #0]
   18550:	4669      	mov	r1, sp
   18552:	685b      	ldr	r3, [r3, #4]
   18554:	4798      	blx	r3
   18556:	3001      	adds	r0, #1
   18558:	d070      	beq.n	1863c <rpc_gnss_event_handler+0x160>
   1855a:	2000      	movs	r0, #0
   1855c:	6823      	ldr	r3, [r4, #0]
   1855e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   18562:	6023      	str	r3, [r4, #0]
   18564:	b004      	add	sp, #16
   18566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1856a:	4c44      	ldr	r4, [pc, #272]	; (1867c <rpc_gnss_event_handler+0x1a0>)
   1856c:	6823      	ldr	r3, [r4, #0]
   1856e:	01d9      	lsls	r1, r3, #7
   18570:	d523      	bpl.n	185ba <rpc_gnss_event_handler+0xde>
   18572:	f242 1302 	movw	r3, #8450	; 0x2102
   18576:	429d      	cmp	r5, r3
   18578:	d11f      	bne.n	185ba <rpc_gnss_event_handler+0xde>
   1857a:	6843      	ldr	r3, [r0, #4]
   1857c:	b91b      	cbnz	r3, 18586 <rpc_gnss_event_handler+0xaa>
   1857e:	6823      	ldr	r3, [r4, #0]
   18580:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   18584:	6023      	str	r3, [r4, #0]
   18586:	6823      	ldr	r3, [r4, #0]
   18588:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1858c:	6023      	str	r3, [r4, #0]
   1858e:	6823      	ldr	r3, [r4, #0]
   18590:	025a      	lsls	r2, r3, #9
   18592:	d430      	bmi.n	185f6 <rpc_gnss_event_handler+0x11a>
   18594:	f242 0305 	movw	r3, #8197	; 0x2005
   18598:	429d      	cmp	r5, r3
   1859a:	d12c      	bne.n	185f6 <rpc_gnss_event_handler+0x11a>
   1859c:	6823      	ldr	r3, [r4, #0]
   1859e:	0299      	lsls	r1, r3, #10
   185a0:	d529      	bpl.n	185f6 <rpc_gnss_event_handler+0x11a>
   185a2:	6843      	ldr	r3, [r0, #4]
   185a4:	2b00      	cmp	r3, #0
   185a6:	d157      	bne.n	18658 <rpc_gnss_event_handler+0x17c>
   185a8:	6823      	ldr	r3, [r4, #0]
   185aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   185ae:	6023      	str	r3, [r4, #0]
   185b0:	6823      	ldr	r3, [r4, #0]
   185b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   185b6:	6023      	str	r3, [r4, #0]
   185b8:	e01d      	b.n	185f6 <rpc_gnss_event_handler+0x11a>
   185ba:	6823      	ldr	r3, [r4, #0]
   185bc:	025b      	lsls	r3, r3, #9
   185be:	d50e      	bpl.n	185de <rpc_gnss_event_handler+0x102>
   185c0:	f242 1303 	movw	r3, #8451	; 0x2103
   185c4:	429d      	cmp	r5, r3
   185c6:	d10a      	bne.n	185de <rpc_gnss_event_handler+0x102>
   185c8:	6843      	ldr	r3, [r0, #4]
   185ca:	b91b      	cbnz	r3, 185d4 <rpc_gnss_event_handler+0xf8>
   185cc:	6823      	ldr	r3, [r4, #0]
   185ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   185d2:	6023      	str	r3, [r4, #0]
   185d4:	6823      	ldr	r3, [r4, #0]
   185d6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   185da:	6023      	str	r3, [r4, #0]
   185dc:	e00b      	b.n	185f6 <rpc_gnss_event_handler+0x11a>
   185de:	f242 0301 	movw	r3, #8193	; 0x2001
   185e2:	429d      	cmp	r5, r3
   185e4:	d10c      	bne.n	18600 <rpc_gnss_event_handler+0x124>
   185e6:	6843      	ldr	r3, [r0, #4]
   185e8:	b92b      	cbnz	r3, 185f6 <rpc_gnss_event_handler+0x11a>
   185ea:	6823      	ldr	r3, [r4, #0]
   185ec:	0c1b      	lsrs	r3, r3, #16
   185ee:	041b      	lsls	r3, r3, #16
   185f0:	f043 0302 	orr.w	r3, r3, #2
   185f4:	6023      	str	r3, [r4, #0]
   185f6:	f000 ff93 	bl	19520 <rpc_gnss_client_data_free>
   185fa:	2300      	movs	r3, #0
   185fc:	603b      	str	r3, [r7, #0]
   185fe:	e77b      	b.n	184f8 <rpc_gnss_event_handler+0x1c>
   18600:	f242 0304 	movw	r3, #8196	; 0x2004
   18604:	429d      	cmp	r5, r3
   18606:	d1c5      	bne.n	18594 <rpc_gnss_event_handler+0xb8>
   18608:	6843      	ldr	r3, [r0, #4]
   1860a:	b993      	cbnz	r3, 18632 <rpc_gnss_event_handler+0x156>
   1860c:	6823      	ldr	r3, [r4, #0]
   1860e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   18612:	6023      	str	r3, [r4, #0]
   18614:	6823      	ldr	r3, [r4, #0]
   18616:	b29b      	uxth	r3, r3
   18618:	2b03      	cmp	r3, #3
   1861a:	6823      	ldr	r3, [r4, #0]
   1861c:	d016      	beq.n	1864c <rpc_gnss_event_handler+0x170>
   1861e:	b29b      	uxth	r3, r3
   18620:	2b04      	cmp	r3, #4
   18622:	d1d7      	bne.n	185d4 <rpc_gnss_event_handler+0xf8>
   18624:	6823      	ldr	r3, [r4, #0]
   18626:	0c1b      	lsrs	r3, r3, #16
   18628:	041b      	lsls	r3, r3, #16
   1862a:	f043 0302 	orr.w	r3, r3, #2
   1862e:	6023      	str	r3, [r4, #0]
   18630:	e7d0      	b.n	185d4 <rpc_gnss_event_handler+0xf8>
   18632:	6823      	ldr	r3, [r4, #0]
   18634:	b29b      	uxth	r3, r3
   18636:	2b03      	cmp	r3, #3
   18638:	d1cc      	bne.n	185d4 <rpc_gnss_event_handler+0xf8>
   1863a:	e7f3      	b.n	18624 <rpc_gnss_event_handler+0x148>
   1863c:	4640      	mov	r0, r8
   1863e:	f7fa f8eb 	bl	12818 <nrf_free>
   18642:	6830      	ldr	r0, [r6, #0]
   18644:	2800      	cmp	r0, #0
   18646:	f47f af6a 	bne.w	1851e <rpc_gnss_event_handler+0x42>
   1864a:	e76c      	b.n	18526 <rpc_gnss_event_handler+0x4a>
   1864c:	0c1b      	lsrs	r3, r3, #16
   1864e:	041b      	lsls	r3, r3, #16
   18650:	f043 0304 	orr.w	r3, r3, #4
   18654:	6023      	str	r3, [r4, #0]
   18656:	e7bd      	b.n	185d4 <rpc_gnss_event_handler+0xf8>
   18658:	6823      	ldr	r3, [r4, #0]
   1865a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1865e:	6023      	str	r3, [r4, #0]
   18660:	e7c9      	b.n	185f6 <rpc_gnss_event_handler+0x11a>
   18662:	6830      	ldr	r0, [r6, #0]
   18664:	2800      	cmp	r0, #0
   18666:	f43f af5e 	beq.w	18526 <rpc_gnss_event_handler+0x4a>
   1866a:	f000 ff59 	bl	19520 <rpc_gnss_client_data_free>
   1866e:	f8c7 8000 	str.w	r8, [r7]
   18672:	e758      	b.n	18526 <rpc_gnss_event_handler+0x4a>
   18674:	20021e84 	.word	0x20021e84
   18678:	200213d4 	.word	0x200213d4
   1867c:	200213d0 	.word	0x200213d0
   18680:	200213d8 	.word	0x200213d8

00018684 <gnss_interface_write>:
   18684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18688:	4a75      	ldr	r2, [pc, #468]	; (18860 <gnss_interface_write+0x1dc>)
   1868a:	b09f      	sub	sp, #124	; 0x7c
   1868c:	4290      	cmp	r0, r2
   1868e:	9d26      	ldr	r5, [sp, #152]	; 0x98
   18690:	f040 80d4 	bne.w	1883c <gnss_interface_write+0x1b8>
   18694:	2900      	cmp	r1, #0
   18696:	f000 80c9 	beq.w	1882c <gnss_interface_write+0x1a8>
   1869a:	2d00      	cmp	r5, #0
   1869c:	f000 80c6 	beq.w	1882c <gnss_interface_write+0x1a8>
   186a0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   186a2:	2a02      	cmp	r2, #2
   186a4:	f040 80c2 	bne.w	1882c <gnss_interface_write+0x1a8>
   186a8:	4c6e      	ldr	r4, [pc, #440]	; (18864 <gnss_interface_write+0x1e0>)
   186aa:	6822      	ldr	r2, [r4, #0]
   186ac:	b292      	uxth	r2, r2
   186ae:	2a02      	cmp	r2, #2
   186b0:	d004      	beq.n	186bc <gnss_interface_write+0x38>
   186b2:	6822      	ldr	r2, [r4, #0]
   186b4:	b292      	uxth	r2, r2
   186b6:	2a04      	cmp	r2, #4
   186b8:	f040 80c6 	bne.w	18848 <gnss_interface_write+0x1c4>
   186bc:	0798      	lsls	r0, r3, #30
   186be:	f100 80c9 	bmi.w	18854 <gnss_interface_write+0x1d0>
   186c2:	6820      	ldr	r0, [r4, #0]
   186c4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
   186c8:	d065      	beq.n	18796 <gnss_interface_write+0x112>
   186ca:	6822      	ldr	r2, [r4, #0]
   186cc:	882b      	ldrh	r3, [r5, #0]
   186ce:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   186d2:	6022      	str	r2, [r4, #0]
   186d4:	6822      	ldr	r2, [r4, #0]
   186d6:	3b01      	subs	r3, #1
   186d8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   186dc:	6022      	str	r2, [r4, #0]
   186de:	2b07      	cmp	r3, #7
   186e0:	f200 80a4 	bhi.w	1882c <gnss_interface_write+0x1a8>
   186e4:	e8df f003 	tbb	[pc, r3]
   186e8:	696e7378 	.word	0x696e7378
   186ec:	045f5a64 	.word	0x045f5a64
   186f0:	4608      	mov	r0, r1
   186f2:	a902      	add	r1, sp, #8
   186f4:	f000 fec8 	bl	19488 <rpc_gnss_serialize_integrity>
   186f8:	2172      	movs	r1, #114	; 0x72
   186fa:	4668      	mov	r0, sp
   186fc:	f000 fede 	bl	194bc <rpc_gnss_client_request_alloc>
   18700:	4605      	mov	r5, r0
   18702:	9800      	ldr	r0, [sp, #0]
   18704:	2d00      	cmp	r5, #0
   18706:	d16c      	bne.n	187e2 <gnss_interface_write+0x15e>
   18708:	2800      	cmp	r0, #0
   1870a:	d071      	beq.n	187f0 <gnss_interface_write+0x16c>
   1870c:	f241 0605 	movw	r6, #4101	; 0x1005
   18710:	f04f 0c49 	mov.w	ip, #73	; 0x49
   18714:	2272      	movs	r2, #114	; 0x72
   18716:	f04f 0e76 	mov.w	lr, #118	; 0x76
   1871a:	f04f 0943 	mov.w	r9, #67	; 0x43
   1871e:	f04f 0854 	mov.w	r8, #84	; 0x54
   18722:	4f51      	ldr	r7, [pc, #324]	; (18868 <gnss_interface_write+0x1e4>)
   18724:	a91e      	add	r1, sp, #120	; 0x78
   18726:	883b      	ldrh	r3, [r7, #0]
   18728:	f880 c00f 	strb.w	ip, [r0, #15]
   1872c:	3301      	adds	r3, #1
   1872e:	b29b      	uxth	r3, r3
   18730:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   18734:	f841 cd74 	str.w	ip, [r1, #-116]!
   18738:	7145      	strb	r5, [r0, #5]
   1873a:	7185      	strb	r5, [r0, #6]
   1873c:	71c5      	strb	r5, [r0, #7]
   1873e:	7205      	strb	r5, [r0, #8]
   18740:	7245      	strb	r5, [r0, #9]
   18742:	7285      	strb	r5, [r0, #10]
   18744:	72c5      	strb	r5, [r0, #11]
   18746:	7102      	strb	r2, [r0, #4]
   18748:	f880 900c 	strb.w	r9, [r0, #12]
   1874c:	f880 800d 	strb.w	r8, [r0, #13]
   18750:	f880 e00e 	strb.w	lr, [r0, #14]
   18754:	6800      	ldr	r0, [r0, #0]
   18756:	803b      	strh	r3, [r7, #0]
   18758:	f003 fad7 	bl	1bd0a <memcpy>
   1875c:	4b43      	ldr	r3, [pc, #268]	; (1886c <gnss_interface_write+0x1e8>)
   1875e:	4631      	mov	r1, r6
   18760:	9800      	ldr	r0, [sp, #0]
   18762:	601d      	str	r5, [r3, #0]
   18764:	f000 febe 	bl	194e4 <rpc_gnss_client_request_send>
   18768:	2800      	cmp	r0, #0
   1876a:	d148      	bne.n	187fe <gnss_interface_write+0x17a>
   1876c:	6823      	ldr	r3, [r4, #0]
   1876e:	0299      	lsls	r1, r3, #10
   18770:	d50d      	bpl.n	1878e <gnss_interface_write+0x10a>
   18772:	4e3f      	ldr	r6, [pc, #252]	; (18870 <gnss_interface_write+0x1ec>)
   18774:	4d3a      	ldr	r5, [pc, #232]	; (18860 <gnss_interface_write+0x1dc>)
   18776:	e001      	b.n	1877c <gnss_interface_write+0xf8>
   18778:	2800      	cmp	r0, #0
   1877a:	d150      	bne.n	1881e <gnss_interface_write+0x19a>
   1877c:	4631      	mov	r1, r6
   1877e:	4628      	mov	r0, r5
   18780:	f7f7 f8e8 	bl	f954 <bsd_os_timedwait>
   18784:	6823      	ldr	r3, [r4, #0]
   18786:	029a      	lsls	r2, r3, #10
   18788:	d4f6      	bmi.n	18778 <gnss_interface_write+0xf4>
   1878a:	2800      	cmp	r0, #0
   1878c:	d147      	bne.n	1881e <gnss_interface_write+0x19a>
   1878e:	6823      	ldr	r3, [r4, #0]
   18790:	039b      	lsls	r3, r3, #14
   18792:	d53f      	bpl.n	18814 <gnss_interface_write+0x190>
   18794:	2000      	movs	r0, #0
   18796:	b01f      	add	sp, #124	; 0x7c
   18798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1879c:	4608      	mov	r0, r1
   1879e:	a902      	add	r1, sp, #8
   187a0:	f000 fe2a 	bl	193f8 <rpc_gnss_serialize_time_and_sv_tow>
   187a4:	e7a8      	b.n	186f8 <gnss_interface_write+0x74>
   187a6:	4608      	mov	r0, r1
   187a8:	a902      	add	r1, sp, #8
   187aa:	f000 fe4d 	bl	19448 <rpc_gnss_serialize_location>
   187ae:	e7a3      	b.n	186f8 <gnss_interface_write+0x74>
   187b0:	4608      	mov	r0, r1
   187b2:	a902      	add	r1, sp, #8
   187b4:	f000 fe06 	bl	193c4 <rpc_gnss_serialize_nequick>
   187b8:	e79e      	b.n	186f8 <gnss_interface_write+0x74>
   187ba:	4608      	mov	r0, r1
   187bc:	a902      	add	r1, sp, #8
   187be:	f000 fddd 	bl	1937c <rpc_gnss_serialize_klob>
   187c2:	e799      	b.n	186f8 <gnss_interface_write+0x74>
   187c4:	4608      	mov	r0, r1
   187c6:	a902      	add	r1, sp, #8
   187c8:	f000 fda6 	bl	19318 <rpc_gnss_serialize_alm>
   187cc:	e794      	b.n	186f8 <gnss_interface_write+0x74>
   187ce:	4608      	mov	r0, r1
   187d0:	a902      	add	r1, sp, #8
   187d2:	f000 fd4f 	bl	19274 <rpc_gnss_serialize_ephe>
   187d6:	e78f      	b.n	186f8 <gnss_interface_write+0x74>
   187d8:	4608      	mov	r0, r1
   187da:	a902      	add	r1, sp, #8
   187dc:	f000 fd28 	bl	19230 <rpc_gnss_serialize_utc>
   187e0:	e78a      	b.n	186f8 <gnss_interface_write+0x74>
   187e2:	b128      	cbz	r0, 187f0 <gnss_interface_write+0x16c>
   187e4:	6803      	ldr	r3, [r0, #0]
   187e6:	b11b      	cbz	r3, 187f0 <gnss_interface_write+0x16c>
   187e8:	4618      	mov	r0, r3
   187ea:	f000 fe99 	bl	19520 <rpc_gnss_client_data_free>
   187ee:	9800      	ldr	r0, [sp, #0]
   187f0:	f000 fe8e 	bl	19510 <rpc_gnss_client_message_free>
   187f4:	2023      	movs	r0, #35	; 0x23
   187f6:	f7f7 f941 	bl	fa7c <bsd_os_errno_set>
   187fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   187fe:	6823      	ldr	r3, [r4, #0]
   18800:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   18804:	6023      	str	r3, [r4, #0]
   18806:	6823      	ldr	r3, [r4, #0]
   18808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1880c:	6023      	str	r3, [r4, #0]
   1880e:	b01f      	add	sp, #124	; 0x7c
   18810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18814:	2005      	movs	r0, #5
   18816:	6823      	ldr	r3, [r4, #0]
   18818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1881c:	6023      	str	r3, [r4, #0]
   1881e:	f7f7 f92d 	bl	fa7c <bsd_os_errno_set>
   18822:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18826:	b01f      	add	sp, #124	; 0x7c
   18828:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1882c:	2016      	movs	r0, #22
   1882e:	f7f7 f925 	bl	fa7c <bsd_os_errno_set>
   18832:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18836:	b01f      	add	sp, #124	; 0x7c
   18838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1883c:	2009      	movs	r0, #9
   1883e:	f7f7 f91d 	bl	fa7c <bsd_os_errno_set>
   18842:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18846:	e7a6      	b.n	18796 <gnss_interface_write+0x112>
   18848:	2039      	movs	r0, #57	; 0x39
   1884a:	f7f7 f917 	bl	fa7c <bsd_os_errno_set>
   1884e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18852:	e7a0      	b.n	18796 <gnss_interface_write+0x112>
   18854:	202d      	movs	r0, #45	; 0x2d
   18856:	f7f7 f911 	bl	fa7c <bsd_os_errno_set>
   1885a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1885e:	e79a      	b.n	18796 <gnss_interface_write+0x112>
   18860:	49765443 	.word	0x49765443
   18864:	200213d0 	.word	0x200213d0
   18868:	20021e84 	.word	0x20021e84
   1886c:	200213d4 	.word	0x200213d4
   18870:	20026824 	.word	0x20026824

00018874 <gnss_interface_read>:
   18874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18878:	4c4a      	ldr	r4, [pc, #296]	; (189a4 <gnss_interface_read+0x130>)
   1887a:	b0b7      	sub	sp, #220	; 0xdc
   1887c:	42a0      	cmp	r0, r4
   1887e:	f040 81ec 	bne.w	18c5a <gnss_interface_read+0x3e6>
   18882:	4688      	mov	r8, r1
   18884:	2900      	cmp	r1, #0
   18886:	f000 81e2 	beq.w	18c4e <gnss_interface_read+0x3da>
   1888a:	2ad7      	cmp	r2, #215	; 0xd7
   1888c:	f240 81df 	bls.w	18c4e <gnss_interface_read+0x3da>
   18890:	4d45      	ldr	r5, [pc, #276]	; (189a8 <gnss_interface_read+0x134>)
   18892:	4699      	mov	r9, r3
   18894:	682b      	ldr	r3, [r5, #0]
   18896:	b29b      	uxth	r3, r3
   18898:	2b04      	cmp	r3, #4
   1889a:	d004      	beq.n	188a6 <gnss_interface_read+0x32>
   1889c:	682b      	ldr	r3, [r5, #0]
   1889e:	b29b      	uxth	r3, r3
   188a0:	2b02      	cmp	r3, #2
   188a2:	f040 81e0 	bne.w	18c66 <gnss_interface_read+0x3f2>
   188a6:	2102      	movs	r1, #2
   188a8:	20b6      	movs	r0, #182	; 0xb6
   188aa:	2400      	movs	r4, #0
   188ac:	682b      	ldr	r3, [r5, #0]
   188ae:	f10d 020e 	add.w	r2, sp, #14
   188b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   188b6:	602b      	str	r3, [r5, #0]
   188b8:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 189b0 <gnss_interface_read+0x13c>
   188bc:	ab08      	add	r3, sp, #32
   188be:	4f3b      	ldr	r7, [pc, #236]	; (189ac <gnss_interface_read+0x138>)
   188c0:	4e38      	ldr	r6, [pc, #224]	; (189a4 <gnss_interface_read+0x130>)
   188c2:	9005      	str	r0, [sp, #20]
   188c4:	9107      	str	r1, [sp, #28]
   188c6:	9304      	str	r3, [sp, #16]
   188c8:	9206      	str	r2, [sp, #24]
   188ca:	ea09 0b01 	and.w	fp, r9, r1
   188ce:	f8da 0000 	ldr.w	r0, [sl]
   188d2:	464a      	mov	r2, r9
   188d4:	6803      	ldr	r3, [r0, #0]
   188d6:	a904      	add	r1, sp, #16
   188d8:	689b      	ldr	r3, [r3, #8]
   188da:	4798      	blx	r3
   188dc:	2800      	cmp	r0, #0
   188de:	da11      	bge.n	18904 <gnss_interface_read+0x90>
   188e0:	f1bb 0f00 	cmp.w	fp, #0
   188e4:	d138      	bne.n	18958 <gnss_interface_read+0xe4>
   188e6:	682b      	ldr	r3, [r5, #0]
   188e8:	03d8      	lsls	r0, r3, #15
   188ea:	d4f0      	bmi.n	188ce <gnss_interface_read+0x5a>
   188ec:	b10c      	cbz	r4, 188f2 <gnss_interface_read+0x7e>
   188ee:	e7ee      	b.n	188ce <gnss_interface_read+0x5a>
   188f0:	b930      	cbnz	r0, 18900 <gnss_interface_read+0x8c>
   188f2:	4639      	mov	r1, r7
   188f4:	4630      	mov	r0, r6
   188f6:	f7f7 f82d 	bl	f954 <bsd_os_timedwait>
   188fa:	682b      	ldr	r3, [r5, #0]
   188fc:	03d9      	lsls	r1, r3, #15
   188fe:	d5f7      	bpl.n	188f0 <gnss_interface_read+0x7c>
   18900:	4604      	mov	r4, r0
   18902:	e7e4      	b.n	188ce <gnss_interface_read+0x5a>
   18904:	f244 0202 	movw	r2, #16386	; 0x4002
   18908:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1890c:	4293      	cmp	r3, r2
   1890e:	d039      	beq.n	18984 <gnss_interface_read+0x110>
   18910:	f244 0201 	movw	r2, #16385	; 0x4001
   18914:	4293      	cmp	r3, r2
   18916:	d04d      	beq.n	189b4 <gnss_interface_read+0x140>
   18918:	f244 0203 	movw	r2, #16387	; 0x4003
   1891c:	4293      	cmp	r3, r2
   1891e:	f040 8196 	bne.w	18c4e <gnss_interface_read+0x3da>
   18922:	2203      	movs	r2, #3
   18924:	2414      	movs	r4, #20
   18926:	9b08      	ldr	r3, [sp, #32]
   18928:	f888 2000 	strb.w	r2, [r8]
   1892c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1892e:	f8c8 3008 	str.w	r3, [r8, #8]
   18932:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   18936:	e9c8 2303 	strd	r2, r3, [r8, #12]
   1893a:	f8da 0000 	ldr.w	r0, [sl]
   1893e:	6803      	ldr	r3, [r0, #0]
   18940:	68db      	ldr	r3, [r3, #12]
   18942:	4798      	blx	r3
   18944:	2800      	cmp	r0, #0
   18946:	dd03      	ble.n	18950 <gnss_interface_read+0xdc>
   18948:	682b      	ldr	r3, [r5, #0]
   1894a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1894e:	602b      	str	r3, [r5, #0]
   18950:	4620      	mov	r0, r4
   18952:	b037      	add	sp, #220	; 0xdc
   18954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18958:	1c42      	adds	r2, r0, #1
   1895a:	4603      	mov	r3, r0
   1895c:	d1d2      	bne.n	18904 <gnss_interface_read+0x90>
   1895e:	b93c      	cbnz	r4, 18970 <gnss_interface_read+0xfc>
   18960:	461c      	mov	r4, r3
   18962:	2023      	movs	r0, #35	; 0x23
   18964:	f7f7 f88a 	bl	fa7c <bsd_os_errno_set>
   18968:	4620      	mov	r0, r4
   1896a:	b037      	add	sp, #220	; 0xdc
   1896c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18970:	9001      	str	r0, [sp, #4]
   18972:	4620      	mov	r0, r4
   18974:	f7f7 f882 	bl	fa7c <bsd_os_errno_set>
   18978:	9b01      	ldr	r3, [sp, #4]
   1897a:	461c      	mov	r4, r3
   1897c:	4620      	mov	r0, r4
   1897e:	b037      	add	sp, #220	; 0xdc
   18980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18984:	a808      	add	r0, sp, #32
   18986:	f003 f98e 	bl	1bca6 <strlen>
   1898a:	2302      	movs	r3, #2
   1898c:	1c44      	adds	r4, r0, #1
   1898e:	b2a4      	uxth	r4, r4
   18990:	f808 3b08 	strb.w	r3, [r8], #8
   18994:	4622      	mov	r2, r4
   18996:	a908      	add	r1, sp, #32
   18998:	4640      	mov	r0, r8
   1899a:	f003 f9b6 	bl	1bd0a <memcpy>
   1899e:	3408      	adds	r4, #8
   189a0:	e7cb      	b.n	1893a <gnss_interface_read+0xc6>
   189a2:	bf00      	nop
   189a4:	49765443 	.word	0x49765443
   189a8:	200213d0 	.word	0x200213d0
   189ac:	20026824 	.word	0x20026824
   189b0:	200213d8 	.word	0x200213d8
   189b4:	2401      	movs	r4, #1
   189b6:	a809      	add	r0, sp, #36	; 0x24
   189b8:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   189ba:	e9c8 0102 	strd	r0, r1, [r8, #8]
   189be:	e9c8 2304 	strd	r2, r3, [r8, #16]
   189c2:	990d      	ldr	r1, [sp, #52]	; 0x34
   189c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   189c6:	f888 4000 	strb.w	r4, [r8]
   189ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   189cc:	f8c8 1018 	str.w	r1, [r8, #24]
   189d0:	9910      	ldr	r1, [sp, #64]	; 0x40
   189d2:	f8c8 201c 	str.w	r2, [r8, #28]
   189d6:	f8c8 3020 	str.w	r3, [r8, #32]
   189da:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   189de:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   189e2:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
   189e6:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   189ea:	f888 2044 	strb.w	r2, [r8, #68]	; 0x44
   189ee:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   189f2:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
   189f6:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   189fa:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
   189fe:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   18a02:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
   18a06:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
   18a0a:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   18a0e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   18a12:	f8a8 1028 	strh.w	r1, [r8, #40]	; 0x28
   18a16:	f888 302e 	strb.w	r3, [r8, #46]	; 0x2e
   18a1a:	f8c8 202a 	str.w	r2, [r8, #42]	; 0x2a
   18a1e:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   18a22:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   18a26:	9b18      	ldr	r3, [sp, #96]	; 0x60
   18a28:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   18a2c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   18a30:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   18a34:	f3c3 210f 	ubfx	r1, r3, #8, #16
   18a38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   18a3a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   18a3e:	f8a8 0030 	strh.w	r0, [r8, #48]	; 0x30
   18a42:	f8a8 104a 	strh.w	r1, [r8, #74]	; 0x4a
   18a46:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   18a4a:	f3c3 230f 	ubfx	r3, r3, #8, #16
   18a4e:	f8a8 2056 	strh.w	r2, [r8, #86]	; 0x56
   18a52:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   18a56:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
   18a5a:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   18a5e:	f8a8 1046 	strh.w	r1, [r8, #70]	; 0x46
   18a62:	f888 2048 	strb.w	r2, [r8, #72]	; 0x48
   18a66:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   18a6a:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   18a6e:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
   18a72:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   18a76:	f888 1050 	strb.w	r1, [r8, #80]	; 0x50
   18a7a:	f8a8 2052 	strh.w	r2, [r8, #82]	; 0x52
   18a7e:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
   18a82:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   18a86:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   18a8a:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   18a8e:	f8c8 1058 	str.w	r1, [r8, #88]	; 0x58
   18a92:	f888 205c 	strb.w	r2, [r8, #92]	; 0x5c
   18a96:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   18a9a:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   18a9e:	f8a8 305e 	strh.w	r3, [r8, #94]	; 0x5e
   18aa2:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   18aa6:	f888 1060 	strb.w	r1, [r8, #96]	; 0x60
   18aaa:	f8c8 2064 	str.w	r2, [r8, #100]	; 0x64
   18aae:	f888 3068 	strb.w	r3, [r8, #104]	; 0x68
   18ab2:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   18ab6:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   18aba:	9a22      	ldr	r2, [sp, #136]	; 0x88
   18abc:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   18ac0:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   18ac4:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   18ac8:	f3c2 220f 	ubfx	r2, r2, #8, #16
   18acc:	f8a8 106e 	strh.w	r1, [r8, #110]	; 0x6e
   18ad0:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   18ad4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   18ad8:	f8a8 207a 	strh.w	r2, [r8, #122]	; 0x7a
   18adc:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   18ae0:	f8a8 3086 	strh.w	r3, [r8, #134]	; 0x86
   18ae4:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   18ae8:	f8a8 106a 	strh.w	r1, [r8, #106]	; 0x6a
   18aec:	f888 206c 	strb.w	r2, [r8, #108]	; 0x6c
   18af0:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   18af4:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   18af8:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
   18afc:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   18b00:	f888 1074 	strb.w	r1, [r8, #116]	; 0x74
   18b04:	f8a8 2076 	strh.w	r2, [r8, #118]	; 0x76
   18b08:	f888 3078 	strb.w	r3, [r8, #120]	; 0x78
   18b0c:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   18b10:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   18b14:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   18b18:	f8c8 107c 	str.w	r1, [r8, #124]	; 0x7c
   18b1c:	f888 2080 	strb.w	r2, [r8, #128]	; 0x80
   18b20:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   18b24:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   18b28:	f8a8 3082 	strh.w	r3, [r8, #130]	; 0x82
   18b2c:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   18b30:	f888 1084 	strb.w	r1, [r8, #132]	; 0x84
   18b34:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
   18b38:	f888 308c 	strb.w	r3, [r8, #140]	; 0x8c
   18b3c:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   18b40:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   18b42:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   18b46:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   18b4a:	f3c3 210f 	ubfx	r1, r3, #8, #16
   18b4e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   18b50:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   18b54:	f8a8 1092 	strh.w	r1, [r8, #146]	; 0x92
   18b58:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   18b5c:	f8a8 209e 	strh.w	r2, [r8, #158]	; 0x9e
   18b60:	f3c3 230f 	ubfx	r3, r3, #8, #16
   18b64:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   18b68:	f8a8 008e 	strh.w	r0, [r8, #142]	; 0x8e
   18b6c:	f8a8 30aa 	strh.w	r3, [r8, #170]	; 0xaa
   18b70:	f888 1090 	strb.w	r1, [r8, #144]	; 0x90
   18b74:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   18b78:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   18b7c:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
   18b80:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   18b84:	f888 3098 	strb.w	r3, [r8, #152]	; 0x98
   18b88:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   18b8c:	f8a8 109a 	strh.w	r1, [r8, #154]	; 0x9a
   18b90:	f888 209c 	strb.w	r2, [r8, #156]	; 0x9c
   18b94:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   18b98:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   18b9c:	f8c8 30a0 	str.w	r3, [r8, #160]	; 0xa0
   18ba0:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   18ba4:	f888 10a4 	strb.w	r1, [r8, #164]	; 0xa4
   18ba8:	f8a8 20a6 	strh.w	r2, [r8, #166]	; 0xa6
   18bac:	f888 30a8 	strb.w	r3, [r8, #168]	; 0xa8
   18bb0:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   18bb4:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   18bb8:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   18bbc:	f8c8 10ac 	str.w	r1, [r8, #172]	; 0xac
   18bc0:	f888 20b0 	strb.w	r2, [r8, #176]	; 0xb0
   18bc4:	f8a8 30b2 	strh.w	r3, [r8, #178]	; 0xb2
   18bc8:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   18bcc:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   18bd0:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   18bd4:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   18bd6:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   18bda:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   18bde:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   18be2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   18be6:	f3c2 220f 	ubfx	r2, r2, #8, #16
   18bea:	f8a8 10b6 	strh.w	r1, [r8, #182]	; 0xb6
   18bee:	f8a8 30ce 	strh.w	r3, [r8, #206]	; 0xce
   18bf2:	f888 40b4 	strb.w	r4, [r8, #180]	; 0xb4
   18bf6:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
   18bfa:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   18bfe:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   18c02:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   18c06:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   18c0a:	f888 10bc 	strb.w	r1, [r8, #188]	; 0xbc
   18c0e:	f8a8 20be 	strh.w	r2, [r8, #190]	; 0xbe
   18c12:	f8c8 00b8 	str.w	r0, [r8, #184]	; 0xb8
   18c16:	f888 30c0 	strb.w	r3, [r8, #192]	; 0xc0
   18c1a:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   18c1e:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   18c22:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   18c26:	f8c8 10c4 	str.w	r1, [r8, #196]	; 0xc4
   18c2a:	f888 20c8 	strb.w	r2, [r8, #200]	; 0xc8
   18c2e:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   18c32:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   18c36:	f8a8 30ca 	strh.w	r3, [r8, #202]	; 0xca
   18c3a:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   18c3e:	f888 10cc 	strb.w	r1, [r8, #204]	; 0xcc
   18c42:	f8c8 20d0 	str.w	r2, [r8, #208]	; 0xd0
   18c46:	f888 30d4 	strb.w	r3, [r8, #212]	; 0xd4
   18c4a:	24d8      	movs	r4, #216	; 0xd8
   18c4c:	e675      	b.n	1893a <gnss_interface_read+0xc6>
   18c4e:	2016      	movs	r0, #22
   18c50:	f7f6 ff14 	bl	fa7c <bsd_os_errno_set>
   18c54:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   18c58:	e67a      	b.n	18950 <gnss_interface_read+0xdc>
   18c5a:	2009      	movs	r0, #9
   18c5c:	f7f6 ff0e 	bl	fa7c <bsd_os_errno_set>
   18c60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   18c64:	e674      	b.n	18950 <gnss_interface_read+0xdc>
   18c66:	2039      	movs	r0, #57	; 0x39
   18c68:	f7f6 ff08 	bl	fa7c <bsd_os_errno_set>
   18c6c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   18c70:	e66e      	b.n	18950 <gnss_interface_read+0xdc>
   18c72:	bf00      	nop

00018c74 <gnss_interface_setopt>:
   18c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18c78:	f241 1402 	movw	r4, #4354	; 0x1102
   18c7c:	4222      	tst	r2, r4
   18c7e:	b086      	sub	sp, #24
   18c80:	4d9c      	ldr	r5, [pc, #624]	; (18ef4 <gnss_interface_setopt+0x280>)
   18c82:	d004      	beq.n	18c8e <gnss_interface_setopt+0x1a>
   18c84:	682c      	ldr	r4, [r5, #0]
   18c86:	b2a4      	uxth	r4, r4
   18c88:	2c02      	cmp	r4, #2
   18c8a:	f040 8104 	bne.w	18e96 <gnss_interface_setopt+0x222>
   18c8e:	682c      	ldr	r4, [r5, #0]
   18c90:	0264      	lsls	r4, r4, #9
   18c92:	f100 8128 	bmi.w	18ee6 <gnss_interface_setopt+0x272>
   18c96:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   18c9a:	f040 811e 	bne.w	18eda <gnss_interface_setopt+0x266>
   18c9e:	4996      	ldr	r1, [pc, #600]	; (18ef8 <gnss_interface_setopt+0x284>)
   18ca0:	4288      	cmp	r0, r1
   18ca2:	f040 8114 	bne.w	18ece <gnss_interface_setopt+0x25a>
   18ca6:	3a01      	subs	r2, #1
   18ca8:	2a08      	cmp	r2, #8
   18caa:	f200 80ec 	bhi.w	18e86 <gnss_interface_setopt+0x212>
   18cae:	e8df f012 	tbh	[pc, r2, lsl #1]
   18cb2:	0075      	.short	0x0075
   18cb4:	00c200d8 	.word	0x00c200d8
   18cb8:	008100cc 	.word	0x008100cc
   18cbc:	0098008c 	.word	0x0098008c
   18cc0:	000900af 	.word	0x000900af
   18cc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18cc6:	2a01      	cmp	r2, #1
   18cc8:	f040 80dd 	bne.w	18e86 <gnss_interface_setopt+0x212>
   18ccc:	f241 1603 	movw	r6, #4355	; 0x1103
   18cd0:	2240      	movs	r2, #64	; 0x40
   18cd2:	4637      	mov	r7, r6
   18cd4:	781b      	ldrb	r3, [r3, #0]
   18cd6:	9202      	str	r2, [sp, #8]
   18cd8:	f88d 3015 	strb.w	r3, [sp, #21]
   18cdc:	682b      	ldr	r3, [r5, #0]
   18cde:	2112      	movs	r1, #18
   18ce0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   18ce4:	4668      	mov	r0, sp
   18ce6:	602b      	str	r3, [r5, #0]
   18ce8:	f000 fbe8 	bl	194bc <rpc_gnss_client_request_alloc>
   18cec:	4604      	mov	r4, r0
   18cee:	9800      	ldr	r0, [sp, #0]
   18cf0:	2c00      	cmp	r4, #0
   18cf2:	f040 80d6 	bne.w	18ea2 <gnss_interface_setopt+0x22e>
   18cf6:	2800      	cmp	r0, #0
   18cf8:	f000 80da 	beq.w	18eb0 <gnss_interface_setopt+0x23c>
   18cfc:	2212      	movs	r2, #18
   18cfe:	f04f 0876 	mov.w	r8, #118	; 0x76
   18d02:	f04f 0e49 	mov.w	lr, #73	; 0x49
   18d06:	f04f 0a43 	mov.w	sl, #67	; 0x43
   18d0a:	f04f 0954 	mov.w	r9, #84	; 0x54
   18d0e:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 18f00 <gnss_interface_setopt+0x28c>
   18d12:	a906      	add	r1, sp, #24
   18d14:	f8bc 3000 	ldrh.w	r3, [ip]
   18d18:	f880 800e 	strb.w	r8, [r0, #14]
   18d1c:	3301      	adds	r3, #1
   18d1e:	b29b      	uxth	r3, r3
   18d20:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   18d24:	f841 6d14 	str.w	r6, [r1, #-20]!
   18d28:	7144      	strb	r4, [r0, #5]
   18d2a:	7184      	strb	r4, [r0, #6]
   18d2c:	71c4      	strb	r4, [r0, #7]
   18d2e:	7204      	strb	r4, [r0, #8]
   18d30:	7244      	strb	r4, [r0, #9]
   18d32:	7284      	strb	r4, [r0, #10]
   18d34:	72c4      	strb	r4, [r0, #11]
   18d36:	7102      	strb	r2, [r0, #4]
   18d38:	f880 a00c 	strb.w	sl, [r0, #12]
   18d3c:	f880 900d 	strb.w	r9, [r0, #13]
   18d40:	f880 e00f 	strb.w	lr, [r0, #15]
   18d44:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 18f04 <gnss_interface_setopt+0x290>
   18d48:	6800      	ldr	r0, [r0, #0]
   18d4a:	f8ac 3000 	strh.w	r3, [ip]
   18d4e:	f002 ffdc 	bl	1bd0a <memcpy>
   18d52:	4639      	mov	r1, r7
   18d54:	9800      	ldr	r0, [sp, #0]
   18d56:	f8c8 4000 	str.w	r4, [r8]
   18d5a:	f000 fbc3 	bl	194e4 <rpc_gnss_client_request_send>
   18d5e:	2800      	cmp	r0, #0
   18d60:	f040 80ab 	bne.w	18eba <gnss_interface_setopt+0x246>
   18d64:	4f65      	ldr	r7, [pc, #404]	; (18efc <gnss_interface_setopt+0x288>)
   18d66:	4e64      	ldr	r6, [pc, #400]	; (18ef8 <gnss_interface_setopt+0x284>)
   18d68:	4639      	mov	r1, r7
   18d6a:	4630      	mov	r0, r6
   18d6c:	f7f6 fdf2 	bl	f954 <bsd_os_timedwait>
   18d70:	682c      	ldr	r4, [r5, #0]
   18d72:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   18d76:	d1f7      	bne.n	18d68 <gnss_interface_setopt+0xf4>
   18d78:	f8d8 0000 	ldr.w	r0, [r8]
   18d7c:	b118      	cbz	r0, 18d86 <gnss_interface_setopt+0x112>
   18d7e:	f000 fbcf 	bl	19520 <rpc_gnss_client_data_free>
   18d82:	f8c8 4000 	str.w	r4, [r8]
   18d86:	682b      	ldr	r3, [r5, #0]
   18d88:	021b      	lsls	r3, r3, #8
   18d8a:	d576      	bpl.n	18e7a <gnss_interface_setopt+0x206>
   18d8c:	2000      	movs	r0, #0
   18d8e:	682b      	ldr	r3, [r5, #0]
   18d90:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   18d94:	602b      	str	r3, [r5, #0]
   18d96:	b006      	add	sp, #24
   18d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18d9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18d9e:	2a02      	cmp	r2, #2
   18da0:	d171      	bne.n	18e86 <gnss_interface_setopt+0x212>
   18da2:	2208      	movs	r2, #8
   18da4:	f241 1603 	movw	r6, #4355	; 0x1103
   18da8:	881b      	ldrh	r3, [r3, #0]
   18daa:	9202      	str	r2, [sp, #8]
   18dac:	f8ad 300f 	strh.w	r3, [sp, #15]
   18db0:	4637      	mov	r7, r6
   18db2:	e793      	b.n	18cdc <gnss_interface_setopt+0x68>
   18db4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18db6:	2a01      	cmp	r2, #1
   18db8:	d165      	bne.n	18e86 <gnss_interface_setopt+0x212>
   18dba:	f241 1603 	movw	r6, #4355	; 0x1103
   18dbe:	781b      	ldrb	r3, [r3, #0]
   18dc0:	9202      	str	r2, [sp, #8]
   18dc2:	f88d 300c 	strb.w	r3, [sp, #12]
   18dc6:	4637      	mov	r7, r6
   18dc8:	e788      	b.n	18cdc <gnss_interface_setopt+0x68>
   18dca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18dcc:	2a01      	cmp	r2, #1
   18dce:	d15a      	bne.n	18e86 <gnss_interface_setopt+0x212>
   18dd0:	2202      	movs	r2, #2
   18dd2:	f241 1603 	movw	r6, #4355	; 0x1103
   18dd6:	781b      	ldrb	r3, [r3, #0]
   18dd8:	9202      	str	r2, [sp, #8]
   18dda:	f88d 300d 	strb.w	r3, [sp, #13]
   18dde:	4637      	mov	r7, r6
   18de0:	e77c      	b.n	18cdc <gnss_interface_setopt+0x68>
   18de2:	682a      	ldr	r2, [r5, #0]
   18de4:	b292      	uxth	r2, r2
   18de6:	2a02      	cmp	r2, #2
   18de8:	d155      	bne.n	18e96 <gnss_interface_setopt+0x222>
   18dea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18dec:	2a04      	cmp	r2, #4
   18dee:	d14a      	bne.n	18e86 <gnss_interface_setopt+0x212>
   18df0:	2101      	movs	r1, #1
   18df2:	f241 0604 	movw	r6, #4100	; 0x1004
   18df6:	682a      	ldr	r2, [r5, #0]
   18df8:	6818      	ldr	r0, [r3, #0]
   18dfa:	0c13      	lsrs	r3, r2, #16
   18dfc:	041b      	lsls	r3, r3, #16
   18dfe:	f043 0303 	orr.w	r3, r3, #3
   18e02:	f8cd 0009 	str.w	r0, [sp, #9]
   18e06:	602b      	str	r3, [r5, #0]
   18e08:	f88d 1008 	strb.w	r1, [sp, #8]
   18e0c:	4637      	mov	r7, r6
   18e0e:	e765      	b.n	18cdc <gnss_interface_setopt+0x68>
   18e10:	682b      	ldr	r3, [r5, #0]
   18e12:	b29b      	uxth	r3, r3
   18e14:	2b04      	cmp	r3, #4
   18e16:	d13e      	bne.n	18e96 <gnss_interface_setopt+0x222>
   18e18:	2300      	movs	r3, #0
   18e1a:	f241 0604 	movw	r6, #4100	; 0x1004
   18e1e:	f88d 3008 	strb.w	r3, [sp, #8]
   18e22:	f88d 3009 	strb.w	r3, [sp, #9]
   18e26:	f88d 300a 	strb.w	r3, [sp, #10]
   18e2a:	f88d 300b 	strb.w	r3, [sp, #11]
   18e2e:	f88d 300c 	strb.w	r3, [sp, #12]
   18e32:	4637      	mov	r7, r6
   18e34:	e752      	b.n	18cdc <gnss_interface_setopt+0x68>
   18e36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18e38:	2a01      	cmp	r2, #1
   18e3a:	d124      	bne.n	18e86 <gnss_interface_setopt+0x212>
   18e3c:	781b      	ldrb	r3, [r3, #0]
   18e3e:	2b01      	cmp	r3, #1
   18e40:	d121      	bne.n	18e86 <gnss_interface_setopt+0x212>
   18e42:	f241 1603 	movw	r6, #4355	; 0x1103
   18e46:	4637      	mov	r7, r6
   18e48:	e748      	b.n	18cdc <gnss_interface_setopt+0x68>
   18e4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18e4c:	2a02      	cmp	r2, #2
   18e4e:	d11a      	bne.n	18e86 <gnss_interface_setopt+0x212>
   18e50:	2220      	movs	r2, #32
   18e52:	f241 1603 	movw	r6, #4355	; 0x1103
   18e56:	881b      	ldrh	r3, [r3, #0]
   18e58:	9202      	str	r2, [sp, #8]
   18e5a:	f8ad 3013 	strh.w	r3, [sp, #19]
   18e5e:	4637      	mov	r7, r6
   18e60:	e73c      	b.n	18cdc <gnss_interface_setopt+0x68>
   18e62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18e64:	2a02      	cmp	r2, #2
   18e66:	d10e      	bne.n	18e86 <gnss_interface_setopt+0x212>
   18e68:	2210      	movs	r2, #16
   18e6a:	f241 1603 	movw	r6, #4355	; 0x1103
   18e6e:	881b      	ldrh	r3, [r3, #0]
   18e70:	9202      	str	r2, [sp, #8]
   18e72:	f8ad 3011 	strh.w	r3, [sp, #17]
   18e76:	4637      	mov	r7, r6
   18e78:	e730      	b.n	18cdc <gnss_interface_setopt+0x68>
   18e7a:	200e      	movs	r0, #14
   18e7c:	f7f6 fdfe 	bl	fa7c <bsd_os_errno_set>
   18e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18e84:	e783      	b.n	18d8e <gnss_interface_setopt+0x11a>
   18e86:	2016      	movs	r0, #22
   18e88:	f7f6 fdf8 	bl	fa7c <bsd_os_errno_set>
   18e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18e90:	b006      	add	sp, #24
   18e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18e96:	200e      	movs	r0, #14
   18e98:	f7f6 fdf0 	bl	fa7c <bsd_os_errno_set>
   18e9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18ea0:	e779      	b.n	18d96 <gnss_interface_setopt+0x122>
   18ea2:	b128      	cbz	r0, 18eb0 <gnss_interface_setopt+0x23c>
   18ea4:	6803      	ldr	r3, [r0, #0]
   18ea6:	b11b      	cbz	r3, 18eb0 <gnss_interface_setopt+0x23c>
   18ea8:	4618      	mov	r0, r3
   18eaa:	f000 fb39 	bl	19520 <rpc_gnss_client_data_free>
   18eae:	9800      	ldr	r0, [sp, #0]
   18eb0:	f000 fb2e 	bl	19510 <rpc_gnss_client_message_free>
   18eb4:	2023      	movs	r0, #35	; 0x23
   18eb6:	f7f6 fde1 	bl	fa7c <bsd_os_errno_set>
   18eba:	682b      	ldr	r3, [r5, #0]
   18ebc:	200e      	movs	r0, #14
   18ebe:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   18ec2:	602b      	str	r3, [r5, #0]
   18ec4:	f7f6 fdda 	bl	fa7c <bsd_os_errno_set>
   18ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18ecc:	e763      	b.n	18d96 <gnss_interface_setopt+0x122>
   18ece:	2009      	movs	r0, #9
   18ed0:	f7f6 fdd4 	bl	fa7c <bsd_os_errno_set>
   18ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18ed8:	e75d      	b.n	18d96 <gnss_interface_setopt+0x122>
   18eda:	202a      	movs	r0, #42	; 0x2a
   18edc:	f7f6 fdce 	bl	fa7c <bsd_os_errno_set>
   18ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18ee4:	e757      	b.n	18d96 <gnss_interface_setopt+0x122>
   18ee6:	2073      	movs	r0, #115	; 0x73
   18ee8:	f7f6 fdc8 	bl	fa7c <bsd_os_errno_set>
   18eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18ef0:	e751      	b.n	18d96 <gnss_interface_setopt+0x122>
   18ef2:	bf00      	nop
   18ef4:	200213d0 	.word	0x200213d0
   18ef8:	49765443 	.word	0x49765443
   18efc:	20026824 	.word	0x20026824
   18f00:	20021e84 	.word	0x20021e84
   18f04:	200213d4 	.word	0x200213d4

00018f08 <gnss_interface_getopt>:
   18f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f0c:	4c81      	ldr	r4, [pc, #516]	; (19114 <gnss_interface_getopt+0x20c>)
   18f0e:	b087      	sub	sp, #28
   18f10:	6825      	ldr	r5, [r4, #0]
   18f12:	4698      	mov	r8, r3
   18f14:	b2ad      	uxth	r5, r5
   18f16:	2d02      	cmp	r5, #2
   18f18:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18f1a:	f040 80dd 	bne.w	190d8 <gnss_interface_getopt+0x1d0>
   18f1e:	6825      	ldr	r5, [r4, #0]
   18f20:	03ee      	lsls	r6, r5, #15
   18f22:	f100 80eb 	bmi.w	190fc <gnss_interface_getopt+0x1f4>
   18f26:	6825      	ldr	r5, [r4, #0]
   18f28:	01ed      	lsls	r5, r5, #7
   18f2a:	f100 80ed 	bmi.w	19108 <gnss_interface_getopt+0x200>
   18f2e:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   18f32:	f040 80d7 	bne.w	190e4 <gnss_interface_getopt+0x1dc>
   18f36:	4978      	ldr	r1, [pc, #480]	; (19118 <gnss_interface_getopt+0x210>)
   18f38:	4288      	cmp	r0, r1
   18f3a:	f040 80d9 	bne.w	190f0 <gnss_interface_getopt+0x1e8>
   18f3e:	f1b8 0f00 	cmp.w	r8, #0
   18f42:	d00b      	beq.n	18f5c <gnss_interface_getopt+0x54>
   18f44:	b153      	cbz	r3, 18f5c <gnss_interface_getopt+0x54>
   18f46:	1e57      	subs	r7, r2, #1
   18f48:	2f05      	cmp	r7, #5
   18f4a:	d807      	bhi.n	18f5c <gnss_interface_getopt+0x54>
   18f4c:	e8df f007 	tbb	[pc, r7]
   18f50:	0f030f0f 	.word	0x0f030f0f
   18f54:	0303      	.short	0x0303
   18f56:	681b      	ldr	r3, [r3, #0]
   18f58:	2b01      	cmp	r3, #1
   18f5a:	d00b      	beq.n	18f74 <gnss_interface_getopt+0x6c>
   18f5c:	2016      	movs	r0, #22
   18f5e:	f7f6 fd8d 	bl	fa7c <bsd_os_errno_set>
   18f62:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18f66:	4628      	mov	r0, r5
   18f68:	b007      	add	sp, #28
   18f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f6e:	681b      	ldr	r3, [r3, #0]
   18f70:	2b02      	cmp	r3, #2
   18f72:	d1f3      	bne.n	18f5c <gnss_interface_getopt+0x54>
   18f74:	6823      	ldr	r3, [r4, #0]
   18f76:	2212      	movs	r2, #18
   18f78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   18f7c:	2100      	movs	r1, #0
   18f7e:	a801      	add	r0, sp, #4
   18f80:	6023      	str	r3, [r4, #0]
   18f82:	f002 feec 	bl	1bd5e <memset>
   18f86:	2112      	movs	r1, #18
   18f88:	4668      	mov	r0, sp
   18f8a:	f000 fa97 	bl	194bc <rpc_gnss_client_request_alloc>
   18f8e:	4605      	mov	r5, r0
   18f90:	9800      	ldr	r0, [sp, #0]
   18f92:	2d00      	cmp	r5, #0
   18f94:	f040 808a 	bne.w	190ac <gnss_interface_getopt+0x1a4>
   18f98:	2800      	cmp	r0, #0
   18f9a:	f000 808e 	beq.w	190ba <gnss_interface_getopt+0x1b2>
   18f9e:	f241 1602 	movw	r6, #4354	; 0x1102
   18fa2:	f04f 0e49 	mov.w	lr, #73	; 0x49
   18fa6:	2212      	movs	r2, #18
   18fa8:	f04f 0976 	mov.w	r9, #118	; 0x76
   18fac:	f04f 0b43 	mov.w	fp, #67	; 0x43
   18fb0:	f04f 0a54 	mov.w	sl, #84	; 0x54
   18fb4:	f8df c168 	ldr.w	ip, [pc, #360]	; 19120 <gnss_interface_getopt+0x218>
   18fb8:	f880 e00f 	strb.w	lr, [r0, #15]
   18fbc:	f8bc 3000 	ldrh.w	r3, [ip]
   18fc0:	f880 900e 	strb.w	r9, [r0, #14]
   18fc4:	3301      	adds	r3, #1
   18fc6:	b29b      	uxth	r3, r3
   18fc8:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   18fcc:	f8cd e004 	str.w	lr, [sp, #4]
   18fd0:	7145      	strb	r5, [r0, #5]
   18fd2:	7185      	strb	r5, [r0, #6]
   18fd4:	71c5      	strb	r5, [r0, #7]
   18fd6:	7205      	strb	r5, [r0, #8]
   18fd8:	7245      	strb	r5, [r0, #9]
   18fda:	7285      	strb	r5, [r0, #10]
   18fdc:	72c5      	strb	r5, [r0, #11]
   18fde:	a901      	add	r1, sp, #4
   18fe0:	7102      	strb	r2, [r0, #4]
   18fe2:	f880 b00c 	strb.w	fp, [r0, #12]
   18fe6:	f880 a00d 	strb.w	sl, [r0, #13]
   18fea:	f8df 9138 	ldr.w	r9, [pc, #312]	; 19124 <gnss_interface_getopt+0x21c>
   18fee:	6800      	ldr	r0, [r0, #0]
   18ff0:	f8ac 3000 	strh.w	r3, [ip]
   18ff4:	f002 fe89 	bl	1bd0a <memcpy>
   18ff8:	4631      	mov	r1, r6
   18ffa:	9800      	ldr	r0, [sp, #0]
   18ffc:	f8c9 5000 	str.w	r5, [r9]
   19000:	f000 fa70 	bl	194e4 <rpc_gnss_client_request_send>
   19004:	2800      	cmp	r0, #0
   19006:	d15d      	bne.n	190c4 <gnss_interface_getopt+0x1bc>
   19008:	4e44      	ldr	r6, [pc, #272]	; (1911c <gnss_interface_getopt+0x214>)
   1900a:	4d43      	ldr	r5, [pc, #268]	; (19118 <gnss_interface_getopt+0x210>)
   1900c:	4631      	mov	r1, r6
   1900e:	4628      	mov	r0, r5
   19010:	f7f6 fca0 	bl	f954 <bsd_os_timedwait>
   19014:	6823      	ldr	r3, [r4, #0]
   19016:	01db      	lsls	r3, r3, #7
   19018:	d4f8      	bmi.n	1900c <gnss_interface_getopt+0x104>
   1901a:	f8d9 0000 	ldr.w	r0, [r9]
   1901e:	b1d8      	cbz	r0, 19058 <gnss_interface_getopt+0x150>
   19020:	6825      	ldr	r5, [r4, #0]
   19022:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   19026:	d00f      	beq.n	19048 <gnss_interface_getopt+0x140>
   19028:	2f05      	cmp	r7, #5
   1902a:	d837      	bhi.n	1909c <gnss_interface_getopt+0x194>
   1902c:	e8df f007 	tbb	[pc, r7]
   19030:	2b26201a 	.word	0x2b26201a
   19034:	0331      	.short	0x0331
   19036:	2500      	movs	r5, #0
   19038:	7b43      	ldrb	r3, [r0, #13]
   1903a:	f888 3000 	strb.w	r3, [r8]
   1903e:	f000 fa6f 	bl	19520 <rpc_gnss_client_data_free>
   19042:	2300      	movs	r3, #0
   19044:	f8c9 3000 	str.w	r3, [r9]
   19048:	6823      	ldr	r3, [r4, #0]
   1904a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1904e:	6023      	str	r3, [r4, #0]
   19050:	4628      	mov	r0, r5
   19052:	b007      	add	sp, #28
   19054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19058:	6823      	ldr	r3, [r4, #0]
   1905a:	4605      	mov	r5, r0
   1905c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   19060:	6023      	str	r3, [r4, #0]
   19062:	e7f5      	b.n	19050 <gnss_interface_getopt+0x148>
   19064:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   19068:	2500      	movs	r5, #0
   1906a:	f8a8 3000 	strh.w	r3, [r8]
   1906e:	e7e6      	b.n	1903e <gnss_interface_getopt+0x136>
   19070:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   19074:	2500      	movs	r5, #0
   19076:	f8a8 3000 	strh.w	r3, [r8]
   1907a:	e7e0      	b.n	1903e <gnss_interface_getopt+0x136>
   1907c:	7b83      	ldrb	r3, [r0, #14]
   1907e:	2500      	movs	r5, #0
   19080:	f888 3000 	strb.w	r3, [r8]
   19084:	e7db      	b.n	1903e <gnss_interface_getopt+0x136>
   19086:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   1908a:	2500      	movs	r5, #0
   1908c:	f8a8 3000 	strh.w	r3, [r8]
   19090:	e7d5      	b.n	1903e <gnss_interface_getopt+0x136>
   19092:	7b03      	ldrb	r3, [r0, #12]
   19094:	2500      	movs	r5, #0
   19096:	f888 3000 	strb.w	r3, [r8]
   1909a:	e7d0      	b.n	1903e <gnss_interface_getopt+0x136>
   1909c:	2016      	movs	r0, #22
   1909e:	f7f6 fced 	bl	fa7c <bsd_os_errno_set>
   190a2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   190a6:	f8d9 0000 	ldr.w	r0, [r9]
   190aa:	e7c8      	b.n	1903e <gnss_interface_getopt+0x136>
   190ac:	b128      	cbz	r0, 190ba <gnss_interface_getopt+0x1b2>
   190ae:	6803      	ldr	r3, [r0, #0]
   190b0:	b11b      	cbz	r3, 190ba <gnss_interface_getopt+0x1b2>
   190b2:	4618      	mov	r0, r3
   190b4:	f000 fa34 	bl	19520 <rpc_gnss_client_data_free>
   190b8:	9800      	ldr	r0, [sp, #0]
   190ba:	f000 fa29 	bl	19510 <rpc_gnss_client_message_free>
   190be:	2023      	movs	r0, #35	; 0x23
   190c0:	f7f6 fcdc 	bl	fa7c <bsd_os_errno_set>
   190c4:	6823      	ldr	r3, [r4, #0]
   190c6:	200e      	movs	r0, #14
   190c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   190cc:	6023      	str	r3, [r4, #0]
   190ce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   190d2:	f7f6 fcd3 	bl	fa7c <bsd_os_errno_set>
   190d6:	e746      	b.n	18f66 <gnss_interface_getopt+0x5e>
   190d8:	200e      	movs	r0, #14
   190da:	f7f6 fccf 	bl	fa7c <bsd_os_errno_set>
   190de:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   190e2:	e740      	b.n	18f66 <gnss_interface_getopt+0x5e>
   190e4:	202a      	movs	r0, #42	; 0x2a
   190e6:	f7f6 fcc9 	bl	fa7c <bsd_os_errno_set>
   190ea:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   190ee:	e73a      	b.n	18f66 <gnss_interface_getopt+0x5e>
   190f0:	2009      	movs	r0, #9
   190f2:	f7f6 fcc3 	bl	fa7c <bsd_os_errno_set>
   190f6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   190fa:	e734      	b.n	18f66 <gnss_interface_getopt+0x5e>
   190fc:	2005      	movs	r0, #5
   190fe:	f7f6 fcbd 	bl	fa7c <bsd_os_errno_set>
   19102:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   19106:	e72e      	b.n	18f66 <gnss_interface_getopt+0x5e>
   19108:	2073      	movs	r0, #115	; 0x73
   1910a:	f7f6 fcb7 	bl	fa7c <bsd_os_errno_set>
   1910e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   19112:	e728      	b.n	18f66 <gnss_interface_getopt+0x5e>
   19114:	200213d0 	.word	0x200213d0
   19118:	49765443 	.word	0x49765443
   1911c:	20026824 	.word	0x20026824
   19120:	20021e84 	.word	0x20021e84
   19124:	200213d4 	.word	0x200213d4

00019128 <gnss_interface_init>:
   19128:	2100      	movs	r1, #0
   1912a:	b538      	push	{r3, r4, r5, lr}
   1912c:	4c09      	ldr	r4, [pc, #36]	; (19154 <gnss_interface_init+0x2c>)
   1912e:	4d0a      	ldr	r5, [pc, #40]	; (19158 <gnss_interface_init+0x30>)
   19130:	6822      	ldr	r2, [r4, #0]
   19132:	480a      	ldr	r0, [pc, #40]	; (1915c <gnss_interface_init+0x34>)
   19134:	4b0a      	ldr	r3, [pc, #40]	; (19160 <gnss_interface_init+0x38>)
   19136:	402a      	ands	r2, r5
   19138:	6022      	str	r2, [r4, #0]
   1913a:	8001      	strh	r1, [r0, #0]
   1913c:	6019      	str	r1, [r3, #0]
   1913e:	f000 f9b7 	bl	194b0 <rpc_gnss_client_init>
   19142:	b928      	cbnz	r0, 19150 <gnss_interface_init+0x28>
   19144:	6823      	ldr	r3, [r4, #0]
   19146:	402b      	ands	r3, r5
   19148:	f043 0301 	orr.w	r3, r3, #1
   1914c:	6023      	str	r3, [r4, #0]
   1914e:	bd38      	pop	{r3, r4, r5, pc}
   19150:	2003      	movs	r0, #3
   19152:	bd38      	pop	{r3, r4, r5, pc}
   19154:	200213d0 	.word	0x200213d0
   19158:	ffff0000 	.word	0xffff0000
   1915c:	20021e84 	.word	0x20021e84
   19160:	200213d4 	.word	0x200213d4

00019164 <gnss_interface_open>:
   19164:	2801      	cmp	r0, #1
   19166:	b510      	push	{r4, lr}
   19168:	d120      	bne.n	191ac <gnss_interface_open+0x48>
   1916a:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   1916e:	d11d      	bne.n	191ac <gnss_interface_open+0x48>
   19170:	2902      	cmp	r1, #2
   19172:	d11b      	bne.n	191ac <gnss_interface_open+0x48>
   19174:	4c13      	ldr	r4, [pc, #76]	; (191c4 <gnss_interface_open+0x60>)
   19176:	6823      	ldr	r3, [r4, #0]
   19178:	b29b      	uxth	r3, r3
   1917a:	2b01      	cmp	r3, #1
   1917c:	d11c      	bne.n	191b8 <gnss_interface_open+0x54>
   1917e:	6823      	ldr	r3, [r4, #0]
   19180:	4608      	mov	r0, r1
   19182:	0c1b      	lsrs	r3, r3, #16
   19184:	041b      	lsls	r3, r3, #16
   19186:	f043 0302 	orr.w	r3, r3, #2
   1918a:	2200      	movs	r2, #0
   1918c:	490e      	ldr	r1, [pc, #56]	; (191c8 <gnss_interface_open+0x64>)
   1918e:	6023      	str	r3, [r4, #0]
   19190:	f000 faac 	bl	196ec <packet_handler_create>
   19194:	4a0d      	ldr	r2, [pc, #52]	; (191cc <gnss_interface_open+0x68>)
   19196:	6010      	str	r0, [r2, #0]
   19198:	b170      	cbz	r0, 191b8 <gnss_interface_open+0x54>
   1919a:	6823      	ldr	r3, [r4, #0]
   1919c:	6802      	ldr	r2, [r0, #0]
   1919e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   191a2:	6812      	ldr	r2, [r2, #0]
   191a4:	6023      	str	r3, [r4, #0]
   191a6:	4790      	blx	r2
   191a8:	4809      	ldr	r0, [pc, #36]	; (191d0 <gnss_interface_open+0x6c>)
   191aa:	bd10      	pop	{r4, pc}
   191ac:	2016      	movs	r0, #22
   191ae:	f7f6 fc65 	bl	fa7c <bsd_os_errno_set>
   191b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   191b6:	bd10      	pop	{r4, pc}
   191b8:	200e      	movs	r0, #14
   191ba:	f7f6 fc5f 	bl	fa7c <bsd_os_errno_set>
   191be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   191c2:	bd10      	pop	{r4, pc}
   191c4:	200213d0 	.word	0x200213d0
   191c8:	000184c1 	.word	0x000184c1
   191cc:	200213d8 	.word	0x200213d8
   191d0:	49765443 	.word	0x49765443

000191d4 <gnss_interface_close>:
   191d4:	b530      	push	{r4, r5, lr}
   191d6:	4b13      	ldr	r3, [pc, #76]	; (19224 <gnss_interface_close+0x50>)
   191d8:	b083      	sub	sp, #12
   191da:	4298      	cmp	r0, r3
   191dc:	d11c      	bne.n	19218 <gnss_interface_close+0x44>
   191de:	4c12      	ldr	r4, [pc, #72]	; (19228 <gnss_interface_close+0x54>)
   191e0:	6823      	ldr	r3, [r4, #0]
   191e2:	b29b      	uxth	r3, r3
   191e4:	2b04      	cmp	r3, #4
   191e6:	d00f      	beq.n	19208 <gnss_interface_close+0x34>
   191e8:	4d10      	ldr	r5, [pc, #64]	; (1922c <gnss_interface_close+0x58>)
   191ea:	6828      	ldr	r0, [r5, #0]
   191ec:	b118      	cbz	r0, 191f6 <gnss_interface_close+0x22>
   191ee:	f000 fa9d 	bl	1972c <packet_handler_delete>
   191f2:	2300      	movs	r3, #0
   191f4:	602b      	str	r3, [r5, #0]
   191f6:	2000      	movs	r0, #0
   191f8:	6823      	ldr	r3, [r4, #0]
   191fa:	0c1b      	lsrs	r3, r3, #16
   191fc:	041b      	lsls	r3, r3, #16
   191fe:	f043 0301 	orr.w	r3, r3, #1
   19202:	6023      	str	r3, [r4, #0]
   19204:	b003      	add	sp, #12
   19206:	bd30      	pop	{r4, r5, pc}
   19208:	2300      	movs	r3, #0
   1920a:	2208      	movs	r2, #8
   1920c:	9300      	str	r3, [sp, #0]
   1920e:	f44f 7101 	mov.w	r1, #516	; 0x204
   19212:	f7fc febf 	bl	15f94 <nrf_setsockopt>
   19216:	e7e7      	b.n	191e8 <gnss_interface_close+0x14>
   19218:	2009      	movs	r0, #9
   1921a:	f7f6 fc2f 	bl	fa7c <bsd_os_errno_set>
   1921e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19222:	e7ef      	b.n	19204 <gnss_interface_close+0x30>
   19224:	49765443 	.word	0x49765443
   19228:	200213d0 	.word	0x200213d0
   1922c:	200213d8 	.word	0x200213d8

00019230 <rpc_gnss_serialize_utc>:
   19230:	4603      	mov	r3, r0
   19232:	b1d8      	cbz	r0, 1926c <rpc_gnss_serialize_utc+0x3c>
   19234:	b1d1      	cbz	r1, 1926c <rpc_gnss_serialize_utc+0x3c>
   19236:	2000      	movs	r0, #0
   19238:	2201      	movs	r2, #1
   1923a:	7048      	strb	r0, [r1, #1]
   1923c:	700a      	strb	r2, [r1, #0]
   1923e:	685a      	ldr	r2, [r3, #4]
   19240:	2010      	movs	r0, #16
   19242:	f8c1 2006 	str.w	r2, [r1, #6]
   19246:	681a      	ldr	r2, [r3, #0]
   19248:	f8c1 2002 	str.w	r2, [r1, #2]
   1924c:	f993 200a 	ldrsb.w	r2, [r3, #10]
   19250:	730a      	strb	r2, [r1, #12]
   19252:	f993 200d 	ldrsb.w	r2, [r3, #13]
   19256:	73ca      	strb	r2, [r1, #15]
   19258:	f993 200c 	ldrsb.w	r2, [r3, #12]
   1925c:	738a      	strb	r2, [r1, #14]
   1925e:	7a1a      	ldrb	r2, [r3, #8]
   19260:	728a      	strb	r2, [r1, #10]
   19262:	7ada      	ldrb	r2, [r3, #11]
   19264:	734a      	strb	r2, [r1, #13]
   19266:	7a5b      	ldrb	r3, [r3, #9]
   19268:	72cb      	strb	r3, [r1, #11]
   1926a:	4770      	bx	lr
   1926c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19270:	4770      	bx	lr
   19272:	bf00      	nop

00019274 <rpc_gnss_serialize_ephe>:
   19274:	4603      	mov	r3, r0
   19276:	2800      	cmp	r0, #0
   19278:	d04b      	beq.n	19312 <rpc_gnss_serialize_ephe+0x9e>
   1927a:	2900      	cmp	r1, #0
   1927c:	d049      	beq.n	19312 <rpc_gnss_serialize_ephe+0x9e>
   1927e:	2000      	movs	r0, #0
   19280:	2202      	movs	r2, #2
   19282:	7048      	strb	r0, [r1, #1]
   19284:	700a      	strb	r2, [r1, #0]
   19286:	68da      	ldr	r2, [r3, #12]
   19288:	2040      	movs	r0, #64	; 0x40
   1928a:	f8c1 200b 	str.w	r2, [r1, #11]
   1928e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   19292:	f8a1 2009 	strh.w	r2, [r1, #9]
   19296:	f993 2006 	ldrsb.w	r2, [r3, #6]
   1929a:	720a      	strb	r2, [r1, #8]
   1929c:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   192a0:	878a      	strh	r2, [r1, #60]	; 0x3c
   192a2:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   192a6:	86ca      	strh	r2, [r1, #54]	; 0x36
   192a8:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   192ac:	874a      	strh	r2, [r1, #58]	; 0x3a
   192ae:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   192b2:	868a      	strh	r2, [r1, #52]	; 0x34
   192b4:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   192b8:	87ca      	strh	r2, [r1, #62]	; 0x3e
   192ba:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   192be:	870a      	strh	r2, [r1, #56]	; 0x38
   192c0:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   192c4:	830a      	strh	r2, [r1, #24]
   192c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   192c8:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   192cc:	7c9a      	ldrb	r2, [r3, #18]
   192ce:	744a      	strb	r2, [r1, #17]
   192d0:	785a      	ldrb	r2, [r3, #1]
   192d2:	70ca      	strb	r2, [r1, #3]
   192d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   192d6:	62ca      	str	r2, [r1, #44]	; 0x2c
   192d8:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   192dc:	84ca      	strh	r2, [r1, #38]	; 0x26
   192de:	885a      	ldrh	r2, [r3, #2]
   192e0:	808a      	strh	r2, [r1, #4]
   192e2:	6a1a      	ldr	r2, [r3, #32]
   192e4:	f8c1 201a 	str.w	r2, [r1, #26]
   192e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   192ea:	630a      	str	r2, [r1, #48]	; 0x30
   192ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   192ee:	f8c1 201e 	str.w	r2, [r1, #30]
   192f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   192f4:	628a      	str	r2, [r1, #40]	; 0x28
   192f6:	781a      	ldrb	r2, [r3, #0]
   192f8:	708a      	strb	r2, [r1, #2]
   192fa:	f993 2010 	ldrsb.w	r2, [r3, #16]
   192fe:	73ca      	strb	r2, [r1, #15]
   19300:	889a      	ldrh	r2, [r3, #4]
   19302:	80ca      	strh	r2, [r1, #6]
   19304:	8a9a      	ldrh	r2, [r3, #20]
   19306:	824a      	strh	r2, [r1, #18]
   19308:	7c5a      	ldrb	r2, [r3, #17]
   1930a:	740a      	strb	r2, [r1, #16]
   1930c:	699b      	ldr	r3, [r3, #24]
   1930e:	614b      	str	r3, [r1, #20]
   19310:	4770      	bx	lr
   19312:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19316:	4770      	bx	lr

00019318 <rpc_gnss_serialize_alm>:
   19318:	4603      	mov	r3, r0
   1931a:	b360      	cbz	r0, 19376 <rpc_gnss_serialize_alm+0x5e>
   1931c:	b359      	cbz	r1, 19376 <rpc_gnss_serialize_alm+0x5e>
   1931e:	2000      	movs	r0, #0
   19320:	2203      	movs	r2, #3
   19322:	7048      	strb	r0, [r1, #1]
   19324:	700a      	strb	r2, [r1, #0]
   19326:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   1932a:	2021      	movs	r0, #33	; 0x21
   1932c:	f8a1 201d 	strh.w	r2, [r1, #29]
   19330:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   19334:	f8a1 201f 	strh.w	r2, [r1, #31]
   19338:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   1933c:	810a      	strh	r2, [r1, #8]
   1933e:	889a      	ldrh	r2, [r3, #4]
   19340:	80ca      	strh	r2, [r1, #6]
   19342:	78da      	ldrb	r2, [r3, #3]
   19344:	714a      	strb	r2, [r1, #5]
   19346:	699a      	ldr	r2, [r3, #24]
   19348:	f8c1 2019 	str.w	r2, [r1, #25]
   1934c:	691a      	ldr	r2, [r3, #16]
   1934e:	f8c1 2011 	str.w	r2, [r1, #17]
   19352:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   19356:	814a      	strh	r2, [r1, #10]
   19358:	68da      	ldr	r2, [r3, #12]
   1935a:	f8c1 200d 	str.w	r2, [r1, #13]
   1935e:	7a9a      	ldrb	r2, [r3, #10]
   19360:	730a      	strb	r2, [r1, #12]
   19362:	781a      	ldrb	r2, [r3, #0]
   19364:	708a      	strb	r2, [r1, #2]
   19366:	789a      	ldrb	r2, [r3, #2]
   19368:	710a      	strb	r2, [r1, #4]
   1936a:	695a      	ldr	r2, [r3, #20]
   1936c:	f8c1 2015 	str.w	r2, [r1, #21]
   19370:	785b      	ldrb	r3, [r3, #1]
   19372:	70cb      	strb	r3, [r1, #3]
   19374:	4770      	bx	lr
   19376:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1937a:	4770      	bx	lr

0001937c <rpc_gnss_serialize_klob>:
   1937c:	4603      	mov	r3, r0
   1937e:	b1f0      	cbz	r0, 193be <rpc_gnss_serialize_klob+0x42>
   19380:	b1e9      	cbz	r1, 193be <rpc_gnss_serialize_klob+0x42>
   19382:	2000      	movs	r0, #0
   19384:	2204      	movs	r2, #4
   19386:	7048      	strb	r0, [r1, #1]
   19388:	700a      	strb	r2, [r1, #0]
   1938a:	f993 2000 	ldrsb.w	r2, [r3]
   1938e:	200a      	movs	r0, #10
   19390:	708a      	strb	r2, [r1, #2]
   19392:	f993 2001 	ldrsb.w	r2, [r3, #1]
   19396:	70ca      	strb	r2, [r1, #3]
   19398:	f993 2002 	ldrsb.w	r2, [r3, #2]
   1939c:	710a      	strb	r2, [r1, #4]
   1939e:	f993 2003 	ldrsb.w	r2, [r3, #3]
   193a2:	714a      	strb	r2, [r1, #5]
   193a4:	f993 2004 	ldrsb.w	r2, [r3, #4]
   193a8:	718a      	strb	r2, [r1, #6]
   193aa:	f993 2005 	ldrsb.w	r2, [r3, #5]
   193ae:	71ca      	strb	r2, [r1, #7]
   193b0:	f993 2006 	ldrsb.w	r2, [r3, #6]
   193b4:	720a      	strb	r2, [r1, #8]
   193b6:	f993 3007 	ldrsb.w	r3, [r3, #7]
   193ba:	724b      	strb	r3, [r1, #9]
   193bc:	4770      	bx	lr
   193be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   193c2:	4770      	bx	lr

000193c4 <rpc_gnss_serialize_nequick>:
   193c4:	4603      	mov	r3, r0
   193c6:	b198      	cbz	r0, 193f0 <rpc_gnss_serialize_nequick+0x2c>
   193c8:	b191      	cbz	r1, 193f0 <rpc_gnss_serialize_nequick+0x2c>
   193ca:	2000      	movs	r0, #0
   193cc:	2205      	movs	r2, #5
   193ce:	7048      	strb	r0, [r1, #1]
   193d0:	700a      	strb	r2, [r1, #0]
   193d2:	f9b3 2000 	ldrsh.w	r2, [r3]
   193d6:	200a      	movs	r0, #10
   193d8:	804a      	strh	r2, [r1, #2]
   193da:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   193de:	808a      	strh	r2, [r1, #4]
   193e0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   193e4:	80ca      	strh	r2, [r1, #6]
   193e6:	799a      	ldrb	r2, [r3, #6]
   193e8:	720a      	strb	r2, [r1, #8]
   193ea:	79db      	ldrb	r3, [r3, #7]
   193ec:	724b      	strb	r3, [r1, #9]
   193ee:	4770      	bx	lr
   193f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   193f4:	4770      	bx	lr
   193f6:	bf00      	nop

000193f8 <rpc_gnss_serialize_time_and_sv_tow>:
   193f8:	b310      	cbz	r0, 19440 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   193fa:	b309      	cbz	r1, 19440 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   193fc:	b470      	push	{r4, r5, r6}
   193fe:	2500      	movs	r5, #0
   19400:	2606      	movs	r6, #6
   19402:	460c      	mov	r4, r1
   19404:	704d      	strb	r5, [r1, #1]
   19406:	700e      	strb	r6, [r1, #0]
   19408:	462b      	mov	r3, r5
   1940a:	8805      	ldrh	r5, [r0, #0]
   1940c:	4602      	mov	r2, r0
   1940e:	804d      	strh	r5, [r1, #2]
   19410:	68c5      	ldr	r5, [r0, #12]
   19412:	f8c1 500a 	str.w	r5, [r1, #10]
   19416:	8905      	ldrh	r5, [r0, #8]
   19418:	810d      	strh	r5, [r1, #8]
   1941a:	6840      	ldr	r0, [r0, #4]
   1941c:	6048      	str	r0, [r1, #4]
   1941e:	8a15      	ldrh	r5, [r2, #16]
   19420:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   19424:	4408      	add	r0, r1
   19426:	81c5      	strh	r5, [r0, #14]
   19428:	7c90      	ldrb	r0, [r2, #18]
   1942a:	3301      	adds	r3, #1
   1942c:	2b20      	cmp	r3, #32
   1942e:	7420      	strb	r0, [r4, #16]
   19430:	f102 0204 	add.w	r2, r2, #4
   19434:	f104 0403 	add.w	r4, r4, #3
   19438:	d1f1      	bne.n	1941e <rpc_gnss_serialize_time_and_sv_tow+0x26>
   1943a:	206e      	movs	r0, #110	; 0x6e
   1943c:	bc70      	pop	{r4, r5, r6}
   1943e:	4770      	bx	lr
   19440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19444:	4770      	bx	lr
   19446:	bf00      	nop

00019448 <rpc_gnss_serialize_location>:
   19448:	4603      	mov	r3, r0
   1944a:	b1c8      	cbz	r0, 19480 <rpc_gnss_serialize_location+0x38>
   1944c:	b1c1      	cbz	r1, 19480 <rpc_gnss_serialize_location+0x38>
   1944e:	2000      	movs	r0, #0
   19450:	2207      	movs	r2, #7
   19452:	7048      	strb	r0, [r1, #1]
   19454:	700a      	strb	r2, [r1, #0]
   19456:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1945a:	2011      	movs	r0, #17
   1945c:	814a      	strh	r2, [r1, #10]
   1945e:	7b9a      	ldrb	r2, [r3, #14]
   19460:	740a      	strb	r2, [r1, #16]
   19462:	681a      	ldr	r2, [r3, #0]
   19464:	f8c1 2002 	str.w	r2, [r1, #2]
   19468:	685a      	ldr	r2, [r3, #4]
   1946a:	f8c1 2006 	str.w	r2, [r1, #6]
   1946e:	7b1a      	ldrb	r2, [r3, #12]
   19470:	738a      	strb	r2, [r1, #14]
   19472:	7b5a      	ldrb	r2, [r3, #13]
   19474:	73ca      	strb	r2, [r1, #15]
   19476:	7a9a      	ldrb	r2, [r3, #10]
   19478:	730a      	strb	r2, [r1, #12]
   1947a:	7adb      	ldrb	r3, [r3, #11]
   1947c:	734b      	strb	r3, [r1, #13]
   1947e:	4770      	bx	lr
   19480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19484:	4770      	bx	lr
   19486:	bf00      	nop

00019488 <rpc_gnss_serialize_integrity>:
   19488:	b148      	cbz	r0, 1949e <rpc_gnss_serialize_integrity+0x16>
   1948a:	b141      	cbz	r1, 1949e <rpc_gnss_serialize_integrity+0x16>
   1948c:	2200      	movs	r2, #0
   1948e:	2308      	movs	r3, #8
   19490:	704a      	strb	r2, [r1, #1]
   19492:	700b      	strb	r3, [r1, #0]
   19494:	6803      	ldr	r3, [r0, #0]
   19496:	2006      	movs	r0, #6
   19498:	f8c1 3002 	str.w	r3, [r1, #2]
   1949c:	4770      	bx	lr
   1949e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   194a2:	4770      	bx	lr

000194a4 <gnss_client_event_handler>:
   194a4:	f850 1b08 	ldr.w	r1, [r0], #8
   194a8:	0c09      	lsrs	r1, r1, #16
   194aa:	f7ff b817 	b.w	184dc <rpc_gnss_event_handler>
   194ae:	bf00      	nop

000194b0 <rpc_gnss_client_init>:
   194b0:	4801      	ldr	r0, [pc, #4]	; (194b8 <rpc_gnss_client_init+0x8>)
   194b2:	f7fe bb79 	b.w	17ba8 <rpc_client_register>
   194b6:	bf00      	nop
   194b8:	0001e64c 	.word	0x0001e64c

000194bc <rpc_gnss_client_request_alloc>:
   194bc:	2300      	movs	r3, #0
   194be:	b510      	push	{r4, lr}
   194c0:	b082      	sub	sp, #8
   194c2:	9301      	str	r3, [sp, #4]
   194c4:	b158      	cbz	r0, 194de <rpc_gnss_client_request_alloc+0x22>
   194c6:	4604      	mov	r4, r0
   194c8:	aa01      	add	r2, sp, #4
   194ca:	2007      	movs	r0, #7
   194cc:	f7fe fda4 	bl	18018 <rpc_message_alloc>
   194d0:	b918      	cbnz	r0, 194da <rpc_gnss_client_request_alloc+0x1e>
   194d2:	9b01      	ldr	r3, [sp, #4]
   194d4:	b10b      	cbz	r3, 194da <rpc_gnss_client_request_alloc+0x1e>
   194d6:	3308      	adds	r3, #8
   194d8:	6023      	str	r3, [r4, #0]
   194da:	b002      	add	sp, #8
   194dc:	bd10      	pop	{r4, pc}
   194de:	2007      	movs	r0, #7
   194e0:	b002      	add	sp, #8
   194e2:	bd10      	pop	{r4, pc}

000194e4 <rpc_gnss_client_request_send>:
   194e4:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   194e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   194ec:	d10b      	bne.n	19506 <rpc_gnss_client_request_send+0x22>
   194ee:	b160      	cbz	r0, 1950a <rpc_gnss_client_request_send+0x26>
   194f0:	4603      	mov	r3, r0
   194f2:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   194f6:	2007      	movs	r0, #7
   194f8:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   194fc:	f843 1d08 	str.w	r1, [r3, #-8]!
   19500:	4619      	mov	r1, r3
   19502:	f7fe bd71 	b.w	17fe8 <rpc_message_send>
   19506:	200f      	movs	r0, #15
   19508:	4770      	bx	lr
   1950a:	2007      	movs	r0, #7
   1950c:	4770      	bx	lr
   1950e:	bf00      	nop

00019510 <rpc_gnss_client_message_free>:
   19510:	b120      	cbz	r0, 1951c <rpc_gnss_client_message_free+0xc>
   19512:	f1a0 0108 	sub.w	r1, r0, #8
   19516:	2007      	movs	r0, #7
   19518:	f7fe bdb0 	b.w	1807c <rpc_message_free>
   1951c:	2007      	movs	r0, #7
   1951e:	4770      	bx	lr

00019520 <rpc_gnss_client_data_free>:
   19520:	b118      	cbz	r0, 1952a <rpc_gnss_client_data_free+0xa>
   19522:	4601      	mov	r1, r0
   19524:	2007      	movs	r0, #7
   19526:	f7fe bebb 	b.w	182a0 <rpc_message_data_free>
   1952a:	2007      	movs	r0, #7
   1952c:	4770      	bx	lr
   1952e:	bf00      	nop

00019530 <datagram_handler_init>:
   19530:	b510      	push	{r4, lr}
   19532:	4604      	mov	r4, r0
   19534:	200c      	movs	r0, #12
   19536:	f7f9 f965 	bl	12804 <nrf_malloc>
   1953a:	60e0      	str	r0, [r4, #12]
   1953c:	b118      	cbz	r0, 19546 <datagram_handler_init+0x16>
   1953e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19542:	f7fc bc1d 	b.w	15d80 <linked_list_init>
   19546:	2004      	movs	r0, #4
   19548:	bd10      	pop	{r4, pc}
   1954a:	bf00      	nop

0001954c <datagram_handler_put>:
   1954c:	b570      	push	{r4, r5, r6, lr}
   1954e:	4606      	mov	r6, r0
   19550:	2014      	movs	r0, #20
   19552:	460d      	mov	r5, r1
   19554:	f7f9 f956 	bl	12804 <nrf_malloc>
   19558:	b178      	cbz	r0, 1957a <datagram_handler_put+0x2e>
   1955a:	682b      	ldr	r3, [r5, #0]
   1955c:	4604      	mov	r4, r0
   1955e:	6043      	str	r3, [r0, #4]
   19560:	686b      	ldr	r3, [r5, #4]
   19562:	4601      	mov	r1, r0
   19564:	6083      	str	r3, [r0, #8]
   19566:	68eb      	ldr	r3, [r5, #12]
   19568:	60c3      	str	r3, [r0, #12]
   1956a:	68ab      	ldr	r3, [r5, #8]
   1956c:	6103      	str	r3, [r0, #16]
   1956e:	68f0      	ldr	r0, [r6, #12]
   19570:	f7fc fc10 	bl	15d94 <linked_list_push>
   19574:	b920      	cbnz	r0, 19580 <datagram_handler_put+0x34>
   19576:	6868      	ldr	r0, [r5, #4]
   19578:	bd70      	pop	{r4, r5, r6, pc}
   1957a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1957e:	bd70      	pop	{r4, r5, r6, pc}
   19580:	4620      	mov	r0, r4
   19582:	f7f9 f949 	bl	12818 <nrf_free>
   19586:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1958a:	bd70      	pop	{r4, r5, r6, pc}

0001958c <datagram_handler_get>:
   1958c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1958e:	4606      	mov	r6, r0
   19590:	b085      	sub	sp, #20
   19592:	68c0      	ldr	r0, [r0, #12]
   19594:	460c      	mov	r4, r1
   19596:	4617      	mov	r7, r2
   19598:	f7fc fc1c 	bl	15dd4 <linked_list_peek>
   1959c:	2800      	cmp	r0, #0
   1959e:	d037      	beq.n	19610 <datagram_handler_get+0x84>
   195a0:	6882      	ldr	r2, [r0, #8]
   195a2:	4605      	mov	r5, r0
   195a4:	e9d4 0300 	ldrd	r0, r3, [r4]
   195a8:	429a      	cmp	r2, r3
   195aa:	bf28      	it	cs
   195ac:	461a      	movcs	r2, r3
   195ae:	6062      	str	r2, [r4, #4]
   195b0:	b110      	cbz	r0, 195b8 <datagram_handler_get+0x2c>
   195b2:	6869      	ldr	r1, [r5, #4]
   195b4:	f002 fba9 	bl	1bd0a <memcpy>
   195b8:	68a0      	ldr	r0, [r4, #8]
   195ba:	b118      	cbz	r0, 195c4 <datagram_handler_get+0x38>
   195bc:	692b      	ldr	r3, [r5, #16]
   195be:	b10b      	cbz	r3, 195c4 <datagram_handler_get+0x38>
   195c0:	68ea      	ldr	r2, [r5, #12]
   195c2:	b9e2      	cbnz	r2, 195fe <datagram_handler_get+0x72>
   195c4:	2300      	movs	r3, #0
   195c6:	60e3      	str	r3, [r4, #12]
   195c8:	073b      	lsls	r3, r7, #28
   195ca:	d502      	bpl.n	195d2 <datagram_handler_get+0x46>
   195cc:	6860      	ldr	r0, [r4, #4]
   195ce:	b005      	add	sp, #20
   195d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   195d2:	68f0      	ldr	r0, [r6, #12]
   195d4:	f7fc fbf4 	bl	15dc0 <linked_list_pop>
   195d8:	4605      	mov	r5, r0
   195da:	2800      	cmp	r0, #0
   195dc:	d0f6      	beq.n	195cc <datagram_handler_get+0x40>
   195de:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   195e2:	6902      	ldr	r2, [r0, #16]
   195e4:	9300      	str	r3, [sp, #0]
   195e6:	68c3      	ldr	r3, [r0, #12]
   195e8:	e9cd 1201 	strd	r1, r2, [sp, #4]
   195ec:	9303      	str	r3, [sp, #12]
   195ee:	4668      	mov	r0, sp
   195f0:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
   195f4:	4798      	blx	r3
   195f6:	4628      	mov	r0, r5
   195f8:	f7f9 f90e 	bl	12818 <nrf_free>
   195fc:	e7e6      	b.n	195cc <datagram_handler_get+0x40>
   195fe:	68e3      	ldr	r3, [r4, #12]
   19600:	429a      	cmp	r2, r3
   19602:	bf28      	it	cs
   19604:	461a      	movcs	r2, r3
   19606:	60e2      	str	r2, [r4, #12]
   19608:	6929      	ldr	r1, [r5, #16]
   1960a:	f002 fb7e 	bl	1bd0a <memcpy>
   1960e:	e7db      	b.n	195c8 <datagram_handler_get+0x3c>
   19610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19614:	e7db      	b.n	195ce <datagram_handler_get+0x42>
   19616:	bf00      	nop

00019618 <datagram_handler_available>:
   19618:	b508      	push	{r3, lr}
   1961a:	68c0      	ldr	r0, [r0, #12]
   1961c:	f7fc fbda 	bl	15dd4 <linked_list_peek>
   19620:	b108      	cbz	r0, 19626 <datagram_handler_available+0xe>
   19622:	6880      	ldr	r0, [r0, #8]
   19624:	bd08      	pop	{r3, pc}
   19626:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1962a:	bd08      	pop	{r3, pc}

0001962c <datagram_handler_flush>:
   1962c:	b530      	push	{r4, r5, lr}
   1962e:	4605      	mov	r5, r0
   19630:	68c0      	ldr	r0, [r0, #12]
   19632:	b085      	sub	sp, #20
   19634:	b9a8      	cbnz	r0, 19662 <datagram_handler_flush+0x36>
   19636:	e01a      	b.n	1966e <datagram_handler_flush+0x42>
   19638:	68e8      	ldr	r0, [r5, #12]
   1963a:	f7fc fbc1 	bl	15dc0 <linked_list_pop>
   1963e:	4604      	mov	r4, r0
   19640:	b170      	cbz	r0, 19660 <datagram_handler_flush+0x34>
   19642:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   19646:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1964a:	e9cd 0100 	strd	r0, r1, [sp]
   1964e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   19652:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   19656:	4668      	mov	r0, sp
   19658:	4798      	blx	r3
   1965a:	4620      	mov	r0, r4
   1965c:	f7f9 f8dc 	bl	12818 <nrf_free>
   19660:	68e8      	ldr	r0, [r5, #12]
   19662:	f7fc fbbd 	bl	15de0 <linked_list_size_get>
   19666:	2800      	cmp	r0, #0
   19668:	d1e6      	bne.n	19638 <datagram_handler_flush+0xc>
   1966a:	b005      	add	sp, #20
   1966c:	bd30      	pop	{r4, r5, pc}
   1966e:	2008      	movs	r0, #8
   19670:	b005      	add	sp, #20
   19672:	bd30      	pop	{r4, r5, pc}

00019674 <datagram_handler_free>:
   19674:	b530      	push	{r4, r5, lr}
   19676:	4605      	mov	r5, r0
   19678:	68c0      	ldr	r0, [r0, #12]
   1967a:	b085      	sub	sp, #20
   1967c:	b9a0      	cbnz	r0, 196a8 <datagram_handler_free+0x34>
   1967e:	e01c      	b.n	196ba <datagram_handler_free+0x46>
   19680:	f7fc fb9e 	bl	15dc0 <linked_list_pop>
   19684:	4604      	mov	r4, r0
   19686:	b170      	cbz	r0, 196a6 <datagram_handler_free+0x32>
   19688:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1968c:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   19690:	e9cd 0100 	strd	r0, r1, [sp]
   19694:	e9cd 2302 	strd	r2, r3, [sp, #8]
   19698:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1969c:	4668      	mov	r0, sp
   1969e:	4798      	blx	r3
   196a0:	4620      	mov	r0, r4
   196a2:	f7f9 f8b9 	bl	12818 <nrf_free>
   196a6:	68e8      	ldr	r0, [r5, #12]
   196a8:	f7fc fb9a 	bl	15de0 <linked_list_size_get>
   196ac:	4604      	mov	r4, r0
   196ae:	68e8      	ldr	r0, [r5, #12]
   196b0:	2c00      	cmp	r4, #0
   196b2:	d1e5      	bne.n	19680 <datagram_handler_free+0xc>
   196b4:	f7f9 f8b0 	bl	12818 <nrf_free>
   196b8:	60ec      	str	r4, [r5, #12]
   196ba:	b005      	add	sp, #20
   196bc:	bd30      	pop	{r4, r5, pc}
   196be:	bf00      	nop

000196c0 <null_handler_init>:
   196c0:	2000      	movs	r0, #0
   196c2:	4770      	bx	lr

000196c4 <null_handler_put>:
   196c4:	b510      	push	{r4, lr}
   196c6:	460c      	mov	r4, r1
   196c8:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   196cc:	4620      	mov	r0, r4
   196ce:	4798      	blx	r3
   196d0:	6860      	ldr	r0, [r4, #4]
   196d2:	bd10      	pop	{r4, pc}

000196d4 <null_handler_get>:
   196d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   196d8:	4770      	bx	lr
   196da:	bf00      	nop

000196dc <null_handler_available>:
   196dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   196e0:	4770      	bx	lr
   196e2:	bf00      	nop

000196e4 <null_handler_flush>:
   196e4:	2000      	movs	r0, #0
   196e6:	4770      	bx	lr

000196e8 <null_handler_free>:
   196e8:	4770      	bx	lr
   196ea:	bf00      	nop

000196ec <packet_handler_create>:
   196ec:	2801      	cmp	r0, #1
   196ee:	b538      	push	{r3, r4, r5, lr}
   196f0:	460d      	mov	r5, r1
   196f2:	4614      	mov	r4, r2
   196f4:	d00d      	beq.n	19712 <packet_handler_create+0x26>
   196f6:	db11      	blt.n	1971c <packet_handler_create+0x30>
   196f8:	2803      	cmp	r0, #3
   196fa:	dc0f      	bgt.n	1971c <packet_handler_create+0x30>
   196fc:	2010      	movs	r0, #16
   196fe:	f7f9 f881 	bl	12804 <nrf_malloc>
   19702:	2218      	movs	r2, #24
   19704:	b120      	cbz	r0, 19710 <packet_handler_create+0x24>
   19706:	4b08      	ldr	r3, [pc, #32]	; (19728 <packet_handler_create+0x3c>)
   19708:	6045      	str	r5, [r0, #4]
   1970a:	4413      	add	r3, r2
   1970c:	6084      	str	r4, [r0, #8]
   1970e:	6003      	str	r3, [r0, #0]
   19710:	bd38      	pop	{r3, r4, r5, pc}
   19712:	2014      	movs	r0, #20
   19714:	f7f9 f876 	bl	12804 <nrf_malloc>
   19718:	2230      	movs	r2, #48	; 0x30
   1971a:	e7f3      	b.n	19704 <packet_handler_create+0x18>
   1971c:	200c      	movs	r0, #12
   1971e:	f7f9 f871 	bl	12804 <nrf_malloc>
   19722:	2200      	movs	r2, #0
   19724:	e7ee      	b.n	19704 <packet_handler_create+0x18>
   19726:	bf00      	nop
   19728:	0001e65c 	.word	0x0001e65c

0001972c <packet_handler_delete>:
   1972c:	b510      	push	{r4, lr}
   1972e:	4604      	mov	r4, r0
   19730:	6803      	ldr	r3, [r0, #0]
   19732:	691b      	ldr	r3, [r3, #16]
   19734:	4798      	blx	r3
   19736:	6823      	ldr	r3, [r4, #0]
   19738:	4620      	mov	r0, r4
   1973a:	695b      	ldr	r3, [r3, #20]
   1973c:	4798      	blx	r3
   1973e:	4620      	mov	r0, r4
   19740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19744:	f7f9 b868 	b.w	12818 <nrf_free>

00019748 <stream_handler_init>:
   19748:	b510      	push	{r4, lr}
   1974a:	4604      	mov	r4, r0
   1974c:	200c      	movs	r0, #12
   1974e:	f7f9 f859 	bl	12804 <nrf_malloc>
   19752:	60e0      	str	r0, [r4, #12]
   19754:	b128      	cbz	r0, 19762 <stream_handler_init+0x1a>
   19756:	2300      	movs	r3, #0
   19758:	6123      	str	r3, [r4, #16]
   1975a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1975e:	f7fc bb0f 	b.w	15d80 <linked_list_init>
   19762:	2004      	movs	r0, #4
   19764:	bd10      	pop	{r4, pc}
   19766:	bf00      	nop

00019768 <stream_handler_put>:
   19768:	b570      	push	{r4, r5, r6, lr}
   1976a:	4606      	mov	r6, r0
   1976c:	2014      	movs	r0, #20
   1976e:	460d      	mov	r5, r1
   19770:	f7f9 f848 	bl	12804 <nrf_malloc>
   19774:	b178      	cbz	r0, 19796 <stream_handler_put+0x2e>
   19776:	682b      	ldr	r3, [r5, #0]
   19778:	4604      	mov	r4, r0
   1977a:	6043      	str	r3, [r0, #4]
   1977c:	686b      	ldr	r3, [r5, #4]
   1977e:	4601      	mov	r1, r0
   19780:	6083      	str	r3, [r0, #8]
   19782:	68eb      	ldr	r3, [r5, #12]
   19784:	60c3      	str	r3, [r0, #12]
   19786:	68ab      	ldr	r3, [r5, #8]
   19788:	6103      	str	r3, [r0, #16]
   1978a:	68f0      	ldr	r0, [r6, #12]
   1978c:	f7fc fb02 	bl	15d94 <linked_list_push>
   19790:	b920      	cbnz	r0, 1979c <stream_handler_put+0x34>
   19792:	6868      	ldr	r0, [r5, #4]
   19794:	bd70      	pop	{r4, r5, r6, pc}
   19796:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1979a:	bd70      	pop	{r4, r5, r6, pc}
   1979c:	4620      	mov	r0, r4
   1979e:	f7f9 f83b 	bl	12818 <nrf_free>
   197a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   197a6:	bd70      	pop	{r4, r5, r6, pc}

000197a8 <stream_handler_get>:
   197a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   197ac:	4682      	mov	sl, r0
   197ae:	b087      	sub	sp, #28
   197b0:	68c0      	ldr	r0, [r0, #12]
   197b2:	4689      	mov	r9, r1
   197b4:	4693      	mov	fp, r2
   197b6:	f7fc fb0d 	bl	15dd4 <linked_list_peek>
   197ba:	2800      	cmp	r0, #0
   197bc:	d072      	beq.n	198a4 <stream_handler_get+0xfc>
   197be:	4605      	mov	r5, r0
   197c0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   197c4:	b120      	cbz	r0, 197d0 <stream_handler_get+0x28>
   197c6:	692b      	ldr	r3, [r5, #16]
   197c8:	b113      	cbz	r3, 197d0 <stream_handler_get+0x28>
   197ca:	68ea      	ldr	r2, [r5, #12]
   197cc:	2a00      	cmp	r2, #0
   197ce:	d15c      	bne.n	1988a <stream_handler_get+0xe2>
   197d0:	2300      	movs	r3, #0
   197d2:	f8c9 300c 	str.w	r3, [r9, #12]
   197d6:	f8d9 2000 	ldr.w	r2, [r9]
   197da:	f8d9 8004 	ldr.w	r8, [r9, #4]
   197de:	f8da 1010 	ldr.w	r1, [sl, #16]
   197e2:	9201      	str	r2, [sp, #4]
   197e4:	f1b8 0f00 	cmp.w	r8, #0
   197e8:	d05a      	beq.n	198a0 <stream_handler_get+0xf8>
   197ea:	f00b 0308 	and.w	r3, fp, #8
   197ee:	2400      	movs	r4, #0
   197f0:	9300      	str	r3, [sp, #0]
   197f2:	e010      	b.n	19816 <stream_handler_get+0x6e>
   197f4:	f8da 3010 	ldr.w	r3, [sl, #16]
   197f8:	443b      	add	r3, r7
   197fa:	f8ca 3010 	str.w	r3, [sl, #16]
   197fe:	4628      	mov	r0, r5
   19800:	f7fc faf0 	bl	15de4 <linked_list_get_next>
   19804:	443c      	add	r4, r7
   19806:	4605      	mov	r5, r0
   19808:	2800      	cmp	r0, #0
   1980a:	d038      	beq.n	1987e <stream_handler_get+0xd6>
   1980c:	45a0      	cmp	r8, r4
   1980e:	d936      	bls.n	1987e <stream_handler_get+0xd6>
   19810:	2100      	movs	r1, #0
   19812:	f8d9 2000 	ldr.w	r2, [r9]
   19816:	68ae      	ldr	r6, [r5, #8]
   19818:	eba8 0b04 	sub.w	fp, r8, r4
   1981c:	1a76      	subs	r6, r6, r1
   1981e:	455e      	cmp	r6, fp
   19820:	4637      	mov	r7, r6
   19822:	bf28      	it	cs
   19824:	465f      	movcs	r7, fp
   19826:	b132      	cbz	r2, 19836 <stream_handler_get+0x8e>
   19828:	6868      	ldr	r0, [r5, #4]
   1982a:	9b01      	ldr	r3, [sp, #4]
   1982c:	4401      	add	r1, r0
   1982e:	463a      	mov	r2, r7
   19830:	1918      	adds	r0, r3, r4
   19832:	f002 fa6a 	bl	1bd0a <memcpy>
   19836:	9b00      	ldr	r3, [sp, #0]
   19838:	2b00      	cmp	r3, #0
   1983a:	d1e0      	bne.n	197fe <stream_handler_get+0x56>
   1983c:	455e      	cmp	r6, fp
   1983e:	d8d9      	bhi.n	197f4 <stream_handler_get+0x4c>
   19840:	f8da 000c 	ldr.w	r0, [sl, #12]
   19844:	f7fc fabc 	bl	15dc0 <linked_list_pop>
   19848:	4606      	mov	r6, r0
   1984a:	b170      	cbz	r0, 1986a <stream_handler_get+0xc2>
   1984c:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   19850:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   19854:	e9cd 2302 	strd	r2, r3, [sp, #8]
   19858:	e9cd 1004 	strd	r1, r0, [sp, #16]
   1985c:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   19860:	a802      	add	r0, sp, #8
   19862:	4798      	blx	r3
   19864:	4630      	mov	r0, r6
   19866:	f7f8 ffd7 	bl	12818 <nrf_free>
   1986a:	2300      	movs	r3, #0
   1986c:	4628      	mov	r0, r5
   1986e:	f8ca 3010 	str.w	r3, [sl, #16]
   19872:	f7fc fab7 	bl	15de4 <linked_list_get_next>
   19876:	443c      	add	r4, r7
   19878:	4605      	mov	r5, r0
   1987a:	2800      	cmp	r0, #0
   1987c:	d1c6      	bne.n	1980c <stream_handler_get+0x64>
   1987e:	4620      	mov	r0, r4
   19880:	f8c9 4004 	str.w	r4, [r9, #4]
   19884:	b007      	add	sp, #28
   19886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1988a:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1988e:	429a      	cmp	r2, r3
   19890:	bf28      	it	cs
   19892:	461a      	movcs	r2, r3
   19894:	f8c9 200c 	str.w	r2, [r9, #12]
   19898:	6929      	ldr	r1, [r5, #16]
   1989a:	f002 fa36 	bl	1bd0a <memcpy>
   1989e:	e79a      	b.n	197d6 <stream_handler_get+0x2e>
   198a0:	4644      	mov	r4, r8
   198a2:	e7ec      	b.n	1987e <stream_handler_get+0xd6>
   198a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   198a8:	e7ec      	b.n	19884 <stream_handler_get+0xdc>
   198aa:	bf00      	nop

000198ac <stream_handler_available>:
   198ac:	b510      	push	{r4, lr}
   198ae:	4604      	mov	r4, r0
   198b0:	68c0      	ldr	r0, [r0, #12]
   198b2:	f7fc fa8f 	bl	15dd4 <linked_list_peek>
   198b6:	b150      	cbz	r0, 198ce <stream_handler_available+0x22>
   198b8:	6924      	ldr	r4, [r4, #16]
   198ba:	4264      	negs	r4, r4
   198bc:	6883      	ldr	r3, [r0, #8]
   198be:	441c      	add	r4, r3
   198c0:	f7fc fa90 	bl	15de4 <linked_list_get_next>
   198c4:	2800      	cmp	r0, #0
   198c6:	d1f9      	bne.n	198bc <stream_handler_available+0x10>
   198c8:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   198cc:	bd10      	pop	{r4, pc}
   198ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   198d2:	bd10      	pop	{r4, pc}

000198d4 <stream_handler_flush>:
   198d4:	b530      	push	{r4, r5, lr}
   198d6:	4605      	mov	r5, r0
   198d8:	68c0      	ldr	r0, [r0, #12]
   198da:	b085      	sub	sp, #20
   198dc:	b9a8      	cbnz	r0, 1990a <stream_handler_flush+0x36>
   198de:	e01a      	b.n	19916 <stream_handler_flush+0x42>
   198e0:	68e8      	ldr	r0, [r5, #12]
   198e2:	f7fc fa6d 	bl	15dc0 <linked_list_pop>
   198e6:	4604      	mov	r4, r0
   198e8:	b170      	cbz	r0, 19908 <stream_handler_flush+0x34>
   198ea:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   198ee:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   198f2:	e9cd 0100 	strd	r0, r1, [sp]
   198f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   198fa:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   198fe:	4668      	mov	r0, sp
   19900:	4798      	blx	r3
   19902:	4620      	mov	r0, r4
   19904:	f7f8 ff88 	bl	12818 <nrf_free>
   19908:	68e8      	ldr	r0, [r5, #12]
   1990a:	f7fc fa69 	bl	15de0 <linked_list_size_get>
   1990e:	2800      	cmp	r0, #0
   19910:	d1e6      	bne.n	198e0 <stream_handler_flush+0xc>
   19912:	b005      	add	sp, #20
   19914:	bd30      	pop	{r4, r5, pc}
   19916:	2008      	movs	r0, #8
   19918:	b005      	add	sp, #20
   1991a:	bd30      	pop	{r4, r5, pc}

0001991c <stream_handler_free>:
   1991c:	b530      	push	{r4, r5, lr}
   1991e:	4605      	mov	r5, r0
   19920:	68c0      	ldr	r0, [r0, #12]
   19922:	b085      	sub	sp, #20
   19924:	b9a0      	cbnz	r0, 19950 <stream_handler_free+0x34>
   19926:	e01c      	b.n	19962 <stream_handler_free+0x46>
   19928:	f7fc fa4a 	bl	15dc0 <linked_list_pop>
   1992c:	4604      	mov	r4, r0
   1992e:	b170      	cbz	r0, 1994e <stream_handler_free+0x32>
   19930:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   19934:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   19938:	e9cd 0100 	strd	r0, r1, [sp]
   1993c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   19940:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   19944:	4668      	mov	r0, sp
   19946:	4798      	blx	r3
   19948:	4620      	mov	r0, r4
   1994a:	f7f8 ff65 	bl	12818 <nrf_free>
   1994e:	68e8      	ldr	r0, [r5, #12]
   19950:	f7fc fa46 	bl	15de0 <linked_list_size_get>
   19954:	4604      	mov	r4, r0
   19956:	68e8      	ldr	r0, [r5, #12]
   19958:	2c00      	cmp	r4, #0
   1995a:	d1e5      	bne.n	19928 <stream_handler_free+0xc>
   1995c:	f7f8 ff5c 	bl	12818 <nrf_free>
   19960:	60ec      	str	r4, [r5, #12]
   19962:	b005      	add	sp, #20
   19964:	bd30      	pop	{r4, r5, pc}
   19966:	bf00      	nop

00019968 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   19968:	4a07      	ldr	r2, [pc, #28]	; (19988 <SystemInit+0x20>)
   1996a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1996e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   19972:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   19976:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1997a:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   1997e:	4b03      	ldr	r3, [pc, #12]	; (1998c <SystemInit+0x24>)
   19980:	4a03      	ldr	r2, [pc, #12]	; (19990 <SystemInit+0x28>)
   19982:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   19984:	4770      	bx	lr
   19986:	bf00      	nop
   19988:	e000ed00 	.word	0xe000ed00
   1998c:	20026828 	.word	0x20026828
   19990:	03d09000 	.word	0x03d09000

00019994 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   19994:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   19996:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   19998:	4b08      	ldr	r3, [pc, #32]	; (199bc <z_sys_device_do_config_level+0x28>)
   1999a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1999e:	3001      	adds	r0, #1
   199a0:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   199a4:	42a5      	cmp	r5, r4
   199a6:	d800      	bhi.n	199aa <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   199a8:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   199aa:	6823      	ldr	r3, [r4, #0]
   199ac:	4620      	mov	r0, r4
   199ae:	685b      	ldr	r3, [r3, #4]
   199b0:	4798      	blx	r3
		if (retval != 0) {
   199b2:	b100      	cbz	r0, 199b6 <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   199b4:	6066      	str	r6, [r4, #4]
								info++) {
   199b6:	340c      	adds	r4, #12
   199b8:	e7f4      	b.n	199a4 <z_sys_device_do_config_level+0x10>
   199ba:	bf00      	nop
   199bc:	0001e6a4 	.word	0x0001e6a4

000199c0 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   199c0:	4b10      	ldr	r3, [pc, #64]	; (19a04 <z_impl_device_get_binding+0x44>)
{
   199c2:	b570      	push	{r4, r5, r6, lr}
   199c4:	4605      	mov	r5, r0
   199c6:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   199c8:	4c0f      	ldr	r4, [pc, #60]	; (19a08 <z_impl_device_get_binding+0x48>)
   199ca:	429c      	cmp	r4, r3
   199cc:	d104      	bne.n	199d8 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   199ce:	4c0e      	ldr	r4, [pc, #56]	; (19a08 <z_impl_device_get_binding+0x48>)
   199d0:	42b4      	cmp	r4, r6
   199d2:	d109      	bne.n	199e8 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   199d4:	2400      	movs	r4, #0
   199d6:	e012      	b.n	199fe <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   199d8:	6862      	ldr	r2, [r4, #4]
   199da:	b11a      	cbz	r2, 199e4 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   199dc:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   199de:	6812      	ldr	r2, [r2, #0]
   199e0:	42aa      	cmp	r2, r5
   199e2:	d00c      	beq.n	199fe <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   199e4:	340c      	adds	r4, #12
   199e6:	e7f0      	b.n	199ca <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   199e8:	6863      	ldr	r3, [r4, #4]
   199ea:	b90b      	cbnz	r3, 199f0 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   199ec:	340c      	adds	r4, #12
   199ee:	e7ef      	b.n	199d0 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   199f0:	6823      	ldr	r3, [r4, #0]
   199f2:	4628      	mov	r0, r5
   199f4:	6819      	ldr	r1, [r3, #0]
   199f6:	f002 f95d 	bl	1bcb4 <strcmp>
   199fa:	2800      	cmp	r0, #0
   199fc:	d1f6      	bne.n	199ec <z_impl_device_get_binding+0x2c>
}
   199fe:	4620      	mov	r0, r4
   19a00:	bd70      	pop	{r4, r5, r6, pc}
   19a02:	bf00      	nop
   19a04:	200268fc 	.word	0x200268fc
   19a08:	2002683c 	.word	0x2002683c

00019a0c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   19a0c:	4b01      	ldr	r3, [pc, #4]	; (19a14 <z_impl_z_errno+0x8>)
   19a0e:	6898      	ldr	r0, [r3, #8]
}
   19a10:	3054      	adds	r0, #84	; 0x54
   19a12:	4770      	bx	lr
   19a14:	20021d60 	.word	0x20021d60

00019a18 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   19a18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19a1c:	4605      	mov	r5, r0
   19a1e:	4688      	mov	r8, r1
	return z_impl_k_current_get();
   19a20:	f000 ff2e 	bl	1a880 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   19a24:	2201      	movs	r2, #1
   19a26:	f04f 0300 	mov.w	r3, #0
   19a2a:	4c26      	ldr	r4, [pc, #152]	; (19ac4 <z_fatal_error+0xac>)
   19a2c:	f362 0307 	bfi	r3, r2, #0, #8
   19a30:	4a25      	ldr	r2, [pc, #148]	; (19ac8 <z_fatal_error+0xb0>)
   19a32:	2d04      	cmp	r5, #4
   19a34:	eba4 0402 	sub.w	r4, r4, r2
   19a38:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   19a3c:	bf98      	it	ls
   19a3e:	4a23      	ldrls	r2, [pc, #140]	; (19acc <z_fatal_error+0xb4>)
   19a40:	f364 138f 	bfi	r3, r4, #6, #10
   19a44:	f8ad 3000 	strh.w	r3, [sp]
   19a48:	4606      	mov	r6, r0
   19a4a:	f04f 0300 	mov.w	r3, #0
   19a4e:	bf94      	ite	ls
   19a50:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
   19a54:	4a1e      	ldrhi	r2, [pc, #120]	; (19ad0 <z_fatal_error+0xb8>)
   19a56:	4629      	mov	r1, r5
   19a58:	481e      	ldr	r0, [pc, #120]	; (19ad4 <z_fatal_error+0xbc>)
   19a5a:	f001 fe63 	bl	1b724 <log_3>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   19a5e:	f8d8 301c 	ldr.w	r3, [r8, #28]
   19a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if (arch_is_in_nested_exception(esf)) {
   19a66:	b14b      	cbz	r3, 19a7c <z_fatal_error+0x64>
		LOG_ERR("Fault during interrupt handling\n");
   19a68:	f04f 0100 	mov.w	r1, #0
   19a6c:	2301      	movs	r3, #1
   19a6e:	f363 0107 	bfi	r1, r3, #0, #8
   19a72:	f364 118f 	bfi	r1, r4, #6, #10
   19a76:	4818      	ldr	r0, [pc, #96]	; (19ad8 <z_fatal_error+0xc0>)
   19a78:	f001 fe1b 	bl	1b6b2 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   19a7c:	f04f 0700 	mov.w	r7, #0
   19a80:	2301      	movs	r3, #1
	const char *thread_name = k_thread_name_get(thread);
   19a82:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
   19a84:	f363 0707 	bfi	r7, r3, #0, #8
   19a88:	f364 178f 	bfi	r7, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
   19a8c:	f003 ff6b 	bl	1d966 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   19a90:	b1b0      	cbz	r0, 19ac0 <z_fatal_error+0xa8>
   19a92:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   19a94:	4b11      	ldr	r3, [pc, #68]	; (19adc <z_fatal_error+0xc4>)
   19a96:	2a00      	cmp	r2, #0
   19a98:	bf08      	it	eq
   19a9a:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   19a9c:	f7f3 fb04 	bl	d0a8 <log_strdup>
   19aa0:	463b      	mov	r3, r7
   19aa2:	4602      	mov	r2, r0
   19aa4:	4631      	mov	r1, r6
   19aa6:	480e      	ldr	r0, [pc, #56]	; (19ae0 <z_fatal_error+0xc8>)
   19aa8:	f001 fe24 	bl	1b6f4 <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   19aac:	4641      	mov	r1, r8
   19aae:	4628      	mov	r0, r5
   19ab0:	f7f7 fcee 	bl	11490 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
   19ab4:	4630      	mov	r0, r6
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
   19ab6:	b002      	add	sp, #8
   19ab8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19abc:	f7f4 bbaa 	b.w	e214 <z_impl_k_thread_abort>
		thread_name = "unknown";
   19ac0:	4806      	ldr	r0, [pc, #24]	; (19adc <z_fatal_error+0xc4>)
   19ac2:	e7eb      	b.n	19a9c <z_fatal_error+0x84>
   19ac4:	0001e09c 	.word	0x0001e09c
   19ac8:	0001e02c 	.word	0x0001e02c
   19acc:	0001e6bc 	.word	0x0001e6bc
   19ad0:	000202a9 	.word	0x000202a9
   19ad4:	000202bf 	.word	0x000202bf
   19ad8:	000202e7 	.word	0x000202e7
   19adc:	000202b7 	.word	0x000202b7
   19ae0:	00020308 	.word	0x00020308

00019ae4 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   19ae4:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   19ae6:	4d0b      	ldr	r5, [pc, #44]	; (19b14 <idle+0x30>)
	__asm__ volatile(
   19ae8:	f04f 0220 	mov.w	r2, #32
   19aec:	f3ef 8311 	mrs	r3, BASEPRI
   19af0:	f382 8811 	msr	BASEPRI, r2
   19af4:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   19af8:	f003 ffbf 	bl	1da7a <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   19afc:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   19afe:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   19b00:	2802      	cmp	r0, #2
   19b02:	bfd8      	it	le
   19b04:	4608      	movle	r0, r1
   19b06:	f003 ffc8 	bl	1da9a <z_set_timeout_expiry>
	_kernel.idle = ticks;
   19b0a:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   19b0c:	f7f3 ffac 	bl	da68 <arch_cpu_idle>
   19b10:	e7ea      	b.n	19ae8 <idle+0x4>
   19b12:	bf00      	nop
   19b14:	20021d60 	.word	0x20021d60

00019b18 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   19b18:	4802      	ldr	r0, [pc, #8]	; (19b24 <z_bss_zero+0xc>)
   19b1a:	4a03      	ldr	r2, [pc, #12]	; (19b28 <z_bss_zero+0x10>)
   19b1c:	2100      	movs	r1, #0
   19b1e:	1a12      	subs	r2, r2, r0
   19b20:	f002 b91d 	b.w	1bd5e <memset>
   19b24:	20020000 	.word	0x20020000
   19b28:	200221c0 	.word	0x200221c0

00019b2c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   19b2c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   19b2e:	4806      	ldr	r0, [pc, #24]	; (19b48 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   19b30:	4a06      	ldr	r2, [pc, #24]	; (19b4c <z_data_copy+0x20>)
   19b32:	4907      	ldr	r1, [pc, #28]	; (19b50 <z_data_copy+0x24>)
   19b34:	1a12      	subs	r2, r2, r0
   19b36:	f002 f8e8 	bl	1bd0a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   19b3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   19b3e:	4a05      	ldr	r2, [pc, #20]	; (19b54 <z_data_copy+0x28>)
   19b40:	4905      	ldr	r1, [pc, #20]	; (19b58 <z_data_copy+0x2c>)
   19b42:	4806      	ldr	r0, [pc, #24]	; (19b5c <z_data_copy+0x30>)
   19b44:	f002 b8e1 	b.w	1bd0a <memcpy>
   19b48:	20026810 	.word	0x20026810
   19b4c:	20026a1c 	.word	0x20026a1c
   19b50:	00020338 	.word	0x00020338
   19b54:	00000000 	.word	0x00000000
   19b58:	00020338 	.word	0x00020338
   19b5c:	20020000 	.word	0x20020000

00019b60 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   19b60:	2201      	movs	r2, #1
{
   19b62:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   19b64:	4b08      	ldr	r3, [pc, #32]	; (19b88 <bg_thread_main+0x28>)

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   19b66:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   19b68:	701a      	strb	r2, [r3, #0]
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   19b6a:	f7ff ff13 	bl	19994 <z_sys_device_do_config_level>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   19b6e:	2003      	movs	r0, #3
   19b70:	f7ff ff10 	bl	19994 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   19b74:	f000 ff80 	bl	1aa78 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   19b78:	f7f2 fd68 	bl	c64c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   19b7c:	4a03      	ldr	r2, [pc, #12]	; (19b8c <bg_thread_main+0x2c>)
   19b7e:	7b13      	ldrb	r3, [r2, #12]
   19b80:	f023 0301 	bic.w	r3, r3, #1
   19b84:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   19b86:	bd08      	pop	{r3, pc}
   19b88:	20022079 	.word	0x20022079
   19b8c:	2002148c 	.word	0x2002148c

00019b90 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   19b90:	b580      	push	{r7, lr}
   19b92:	b0b2      	sub	sp, #200	; 0xc8
#endif	/* CONFIG_STACK_CANARIES */

	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   19b94:	f7f3 f9fa 	bl	cf8c <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   19b98:	4b34      	ldr	r3, [pc, #208]	; (19c6c <z_cstart+0xdc>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   19b9a:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19b9e:	2400      	movs	r4, #0
   19ba0:	23e0      	movs	r3, #224	; 0xe0
   19ba2:	4d33      	ldr	r5, [pc, #204]	; (19c70 <z_cstart+0xe0>)

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   19ba4:	2701      	movs	r7, #1
   19ba6:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   19baa:	77ec      	strb	r4, [r5, #31]
   19bac:	762c      	strb	r4, [r5, #24]
   19bae:	766c      	strb	r4, [r5, #25]
   19bb0:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   19bb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   19bb4:	4e2f      	ldr	r6, [pc, #188]	; (19c74 <z_cstart+0xe4>)
   19bb6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   19bba:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   19bbc:	f7f4 fb04 	bl	e1c8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   19bc0:	f7f3 ff4c 	bl	da5c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   19bc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19bc8:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   19bca:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   19bcc:	ab06      	add	r3, sp, #24
   19bce:	22b0      	movs	r2, #176	; 0xb0
   19bd0:	4621      	mov	r1, r4
   19bd2:	4618      	mov	r0, r3
   19bd4:	f002 f8c3 	bl	1bd5e <memset>
	_current = &dummy_thread;
   19bd8:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   19bda:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   19bdc:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   19be0:	f7ff fed8 	bl	19994 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   19be4:	4638      	mov	r0, r7
   19be6:	f7ff fed5 	bl	19994 <z_sys_device_do_config_level>
	z_sched_init();
   19bea:	f000 fdc9 	bl	1a780 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   19bee:	4b22      	ldr	r3, [pc, #136]	; (19c78 <z_cstart+0xe8>)
	_kernel.ready_q.cache = &z_main_thread;
   19bf0:	4d22      	ldr	r5, [pc, #136]	; (19c7c <z_cstart+0xec>)
	z_setup_new_thread(&z_main_thread, z_main_stack,
   19bf2:	e9cd 7304 	strd	r7, r3, [sp, #16]
   19bf6:	2307      	movs	r3, #7
   19bf8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   19bfc:	e9cd 4302 	strd	r4, r3, [sp, #8]
   19c00:	e9cd 4400 	strd	r4, r4, [sp]
   19c04:	4b1e      	ldr	r3, [pc, #120]	; (19c80 <z_cstart+0xf0>)
   19c06:	491f      	ldr	r1, [pc, #124]	; (19c84 <z_cstart+0xf4>)
   19c08:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   19c0a:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   19c0c:	f000 fecc 	bl	1a9a8 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   19c10:	7b6b      	ldrb	r3, [r5, #13]
   19c12:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   19c16:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   19c1a:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   19c1c:	d104      	bne.n	19c28 <z_cstart+0x98>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   19c1e:	69ab      	ldr	r3, [r5, #24]
   19c20:	b913      	cbnz	r3, 19c28 <z_cstart+0x98>
		z_add_thread_to_ready_q(thread);
   19c22:	4628      	mov	r0, r5
   19c24:	f000 fb72 	bl	1a30c <z_add_thread_to_ready_q>
	z_setup_new_thread(thread, stack,
   19c28:	4b17      	ldr	r3, [pc, #92]	; (19c88 <z_cstart+0xf8>)
   19c2a:	2201      	movs	r2, #1
   19c2c:	9305      	str	r3, [sp, #20]
   19c2e:	230f      	movs	r3, #15
   19c30:	e9cd 3203 	strd	r3, r2, [sp, #12]
   19c34:	2300      	movs	r3, #0
   19c36:	4d15      	ldr	r5, [pc, #84]	; (19c8c <z_cstart+0xfc>)
   19c38:	e9cd 3301 	strd	r3, r3, [sp, #4]
   19c3c:	9300      	str	r3, [sp, #0]
   19c3e:	f44f 72a0 	mov.w	r2, #320	; 0x140
   19c42:	4b13      	ldr	r3, [pc, #76]	; (19c90 <z_cstart+0x100>)
   19c44:	4913      	ldr	r1, [pc, #76]	; (19c94 <z_cstart+0x104>)
   19c46:	4628      	mov	r0, r5
   19c48:	f000 feae 	bl	1a9a8 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   19c4c:	7b6b      	ldrb	r3, [r5, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   19c4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   19c52:	f023 0304 	bic.w	r3, r3, #4
   19c56:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   19c58:	4b0f      	ldr	r3, [pc, #60]	; (19c98 <z_cstart+0x108>)
   19c5a:	490a      	ldr	r1, [pc, #40]	; (19c84 <z_cstart+0xf4>)
	list->tail = (sys_dnode_t *)list;
   19c5c:	e9c6 3306 	strd	r3, r3, [r6, #24]
   19c60:	4806      	ldr	r0, [pc, #24]	; (19c7c <z_cstart+0xec>)
   19c62:	4b07      	ldr	r3, [pc, #28]	; (19c80 <z_cstart+0xf0>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   19c64:	60f5      	str	r5, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   19c66:	f7f3 fecf 	bl	da08 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   19c6a:	bf00      	nop
   19c6c:	20024a00 	.word	0x20024a00
   19c70:	e000ed00 	.word	0xe000ed00
   19c74:	20021d60 	.word	0x20021d60
   19c78:	0001f1d6 	.word	0x0001f1d6
   19c7c:	2002148c 	.word	0x2002148c
   19c80:	00019b61 	.word	0x00019b61
   19c84:	200230c0 	.word	0x200230c0
   19c88:	00020323 	.word	0x00020323
   19c8c:	200213dc 	.word	0x200213dc
   19c90:	00019ae5 	.word	0x00019ae5
   19c94:	200240c0 	.word	0x200240c0
   19c98:	20021d78 	.word	0x20021d78

00019c9c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   19c9c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   19c9e:	4b0e      	ldr	r3, [pc, #56]	; (19cd8 <init_mem_slab_module+0x3c>)
   19ca0:	4c0e      	ldr	r4, [pc, #56]	; (19cdc <init_mem_slab_module+0x40>)
   19ca2:	42a3      	cmp	r3, r4
   19ca4:	d301      	bcc.n	19caa <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   19ca6:	2000      	movs	r0, #0
	return rc;
}
   19ca8:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   19caa:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   19cae:	ea41 0200 	orr.w	r2, r1, r0
   19cb2:	f012 0203 	ands.w	r2, r2, #3
   19cb6:	d10b      	bne.n	19cd0 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   19cb8:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   19cba:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   19cbc:	42aa      	cmp	r2, r5
   19cbe:	d101      	bne.n	19cc4 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   19cc0:	331c      	adds	r3, #28
   19cc2:	e7ee      	b.n	19ca2 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   19cc4:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   19cc6:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   19cc8:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   19cca:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   19ccc:	4401      	add	r1, r0
   19cce:	e7f5      	b.n	19cbc <init_mem_slab_module+0x20>
		return -EINVAL;
   19cd0:	f06f 0015 	mvn.w	r0, #21
	return rc;
   19cd4:	e7e8      	b.n	19ca8 <init_mem_slab_module+0xc>
   19cd6:	bf00      	nop
   19cd8:	20026928 	.word	0x20026928
   19cdc:	20026944 	.word	0x20026944

00019ce0 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   19ce0:	b510      	push	{r4, lr}
   19ce2:	4613      	mov	r3, r2
   19ce4:	460c      	mov	r4, r1
   19ce6:	f04f 0220 	mov.w	r2, #32
   19cea:	f3ef 8111 	mrs	r1, BASEPRI
   19cee:	f382 8811 	msr	BASEPRI, r2
   19cf2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   19cf6:	6942      	ldr	r2, [r0, #20]
   19cf8:	b15a      	cbz	r2, 19d12 <k_mem_slab_alloc+0x32>
		/* take a free block */
		*mem = slab->free_list;
   19cfa:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   19cfc:	6813      	ldr	r3, [r2, #0]
   19cfe:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   19d00:	6983      	ldr	r3, [r0, #24]
   19d02:	3301      	adds	r3, #1
   19d04:	6183      	str	r3, [r0, #24]
		result = 0;
   19d06:	2000      	movs	r0, #0
	__asm__ volatile(
   19d08:	f381 8811 	msr	BASEPRI, r1
   19d0c:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   19d10:	e00d      	b.n	19d2e <k_mem_slab_alloc+0x4e>
	} else if (timeout == K_NO_WAIT) {
   19d12:	b91b      	cbnz	r3, 19d1c <k_mem_slab_alloc+0x3c>
		*mem = NULL;
   19d14:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   19d16:	f06f 000b 	mvn.w	r0, #11
   19d1a:	e7f5      	b.n	19d08 <k_mem_slab_alloc+0x28>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   19d1c:	4602      	mov	r2, r0
   19d1e:	4804      	ldr	r0, [pc, #16]	; (19d30 <k_mem_slab_alloc+0x50>)
   19d20:	f000 fcaa 	bl	1a678 <z_pend_curr>
		if (result == 0) {
   19d24:	b918      	cbnz	r0, 19d2e <k_mem_slab_alloc+0x4e>
			*mem = _current->base.swap_data;
   19d26:	4b03      	ldr	r3, [pc, #12]	; (19d34 <k_mem_slab_alloc+0x54>)
   19d28:	689b      	ldr	r3, [r3, #8]
   19d2a:	695b      	ldr	r3, [r3, #20]
   19d2c:	6023      	str	r3, [r4, #0]
}
   19d2e:	bd10      	pop	{r4, pc}
   19d30:	2002207a 	.word	0x2002207a
   19d34:	20021d60 	.word	0x20021d60

00019d38 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   19d38:	b570      	push	{r4, r5, r6, lr}
   19d3a:	4604      	mov	r4, r0
   19d3c:	460d      	mov	r5, r1
	__asm__ volatile(
   19d3e:	f04f 0320 	mov.w	r3, #32
   19d42:	f3ef 8611 	mrs	r6, BASEPRI
   19d46:	f383 8811 	msr	BASEPRI, r3
   19d4a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   19d4e:	f003 fdae 	bl	1d8ae <z_unpend_first_thread>

	if (pending_thread != NULL) {
   19d52:	b180      	cbz	r0, 19d76 <k_mem_slab_free+0x3e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   19d54:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   19d56:	682a      	ldr	r2, [r5, #0]
   19d58:	6681      	str	r1, [r0, #104]	; 0x68
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   19d5a:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   19d5c:	7b42      	ldrb	r2, [r0, #13]
   19d5e:	06d2      	lsls	r2, r2, #27
   19d60:	d103      	bne.n	19d6a <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
   19d62:	6983      	ldr	r3, [r0, #24]
   19d64:	b90b      	cbnz	r3, 19d6a <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
   19d66:	f000 fad1 	bl	1a30c <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   19d6a:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   19d6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   19d70:	4807      	ldr	r0, [pc, #28]	; (19d90 <k_mem_slab_free+0x58>)
   19d72:	f003 bd26 	b.w	1d7c2 <z_reschedule>
		**(char ***)mem = slab->free_list;
   19d76:	682b      	ldr	r3, [r5, #0]
   19d78:	6962      	ldr	r2, [r4, #20]
   19d7a:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   19d7c:	682b      	ldr	r3, [r5, #0]
   19d7e:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   19d80:	69a3      	ldr	r3, [r4, #24]
   19d82:	3b01      	subs	r3, #1
   19d84:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   19d86:	f386 8811 	msr	BASEPRI, r6
   19d8a:	f3bf 8f6f 	isb	sy
}
   19d8e:	bd70      	pop	{r4, r5, r6, pc}
   19d90:	2002207a 	.word	0x2002207a

00019d94 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   19d94:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   19d96:	4c07      	ldr	r4, [pc, #28]	; (19db4 <init_static_pools+0x20>)
   19d98:	4d07      	ldr	r5, [pc, #28]	; (19db8 <init_static_pools+0x24>)
   19d9a:	42ac      	cmp	r4, r5
   19d9c:	d301      	bcc.n	19da2 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   19d9e:	2000      	movs	r0, #0
   19da0:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   19da2:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   19da6:	4620      	mov	r0, r4
   19da8:	e9c4 3305 	strd	r3, r3, [r4, #20]
   19dac:	f001 f8f7 	bl	1af9e <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   19db0:	341c      	adds	r4, #28
   19db2:	e7f2      	b.n	19d9a <init_static_pools+0x6>
   19db4:	20026944 	.word	0x20026944
   19db8:	20026960 	.word	0x20026960

00019dbc <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   19dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   19dc0:	1e1c      	subs	r4, r3, #0
{
   19dc2:	b085      	sub	sp, #20
   19dc4:	4607      	mov	r7, r0
   19dc6:	460d      	mov	r5, r1
   19dc8:	4692      	mov	sl, r2
	if (timeout > 0) {
   19dca:	dd3b      	ble.n	19e44 <k_mem_pool_alloc+0x88>
	return z_impl_k_uptime_get();
   19dcc:	f003 fe83 	bl	1dad6 <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   19dd0:	eb10 0804 	adds.w	r8, r0, r4
	return pool - &_k_mem_pool_list_start[0];
   19dd4:	4b1d      	ldr	r3, [pc, #116]	; (19e4c <k_mem_pool_alloc+0x90>)
   19dd6:	4e1e      	ldr	r6, [pc, #120]	; (19e50 <k_mem_pool_alloc+0x94>)
   19dd8:	1afb      	subs	r3, r7, r3
   19dda:	109b      	asrs	r3, r3, #2
   19ddc:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   19dde:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
   19de2:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   19de4:	ab03      	add	r3, sp, #12
   19de6:	aa02      	add	r2, sp, #8
   19de8:	9500      	str	r5, [sp, #0]
   19dea:	4651      	mov	r1, sl
   19dec:	4638      	mov	r0, r7
   19dee:	f001 f91c 	bl	1b02a <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   19df2:	796b      	ldrb	r3, [r5, #5]
   19df4:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   19df6:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   19df8:	f362 0303 	bfi	r3, r2, #0, #4
   19dfc:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   19dfe:	686b      	ldr	r3, [r5, #4]
   19e00:	9a03      	ldr	r2, [sp, #12]
   19e02:	f362 331f 	bfi	r3, r2, #12, #20
   19e06:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   19e08:	b1c8      	cbz	r0, 19e3e <k_mem_pool_alloc+0x82>
   19e0a:	b1c4      	cbz	r4, 19e3e <k_mem_pool_alloc+0x82>
   19e0c:	f110 0f0c 	cmn.w	r0, #12
   19e10:	d115      	bne.n	19e3e <k_mem_pool_alloc+0x82>
	__asm__ volatile(
   19e12:	f04f 0320 	mov.w	r3, #32
   19e16:	f3ef 8011 	mrs	r0, BASEPRI
   19e1a:	f383 8811 	msr	BASEPRI, r3
   19e1e:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
   19e22:	4622      	mov	r2, r4
   19e24:	4659      	mov	r1, fp
   19e26:	f000 fc03 	bl	1a630 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   19e2a:	1c63      	adds	r3, r4, #1
   19e2c:	d0da      	beq.n	19de4 <k_mem_pool_alloc+0x28>
   19e2e:	f003 fe52 	bl	1dad6 <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   19e32:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   19e36:	2c00      	cmp	r4, #0
   19e38:	dcd4      	bgt.n	19de4 <k_mem_pool_alloc+0x28>
				break;
			}
		}
	}

	return -EAGAIN;
   19e3a:	f06f 000a 	mvn.w	r0, #10
}
   19e3e:	b005      	add	sp, #20
   19e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   19e44:	f04f 0800 	mov.w	r8, #0
   19e48:	e7c4      	b.n	19dd4 <k_mem_pool_alloc+0x18>
   19e4a:	bf00      	nop
   19e4c:	20026944 	.word	0x20026944
   19e50:	b6db6db7 	.word	0xb6db6db7

00019e54 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   19e54:	b570      	push	{r4, r5, r6, lr}
   19e56:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   19e58:	6802      	ldr	r2, [r0, #0]
   19e5a:	7841      	ldrb	r1, [r0, #1]
   19e5c:	4e11      	ldr	r6, [pc, #68]	; (19ea4 <k_mem_pool_free_id+0x50>)
   19e5e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   19e62:	00a4      	lsls	r4, r4, #2
   19e64:	0b12      	lsrs	r2, r2, #12
   19e66:	f001 010f 	and.w	r1, r1, #15
   19e6a:	1930      	adds	r0, r6, r4
   19e6c:	f001 f98f 	bl	1b18e <z_sys_mem_pool_block_free>
   19e70:	f04f 0320 	mov.w	r3, #32
   19e74:	f3ef 8511 	mrs	r5, BASEPRI
   19e78:	f383 8811 	msr	BASEPRI, r3
   19e7c:	f3bf 8f6f 	isb	sy
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   19e80:	f104 0014 	add.w	r0, r4, #20
   19e84:	4430      	add	r0, r6
   19e86:	f003 fd3f 	bl	1d908 <z_unpend_all>

	if (need_sched != 0) {
   19e8a:	b128      	cbz	r0, 19e98 <k_mem_pool_free_id+0x44>
		z_reschedule(&lock, key);
   19e8c:	4629      	mov	r1, r5
	} else {
		k_spin_unlock(&lock, key);
	}
}
   19e8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   19e92:	4805      	ldr	r0, [pc, #20]	; (19ea8 <k_mem_pool_free_id+0x54>)
   19e94:	f003 bc95 	b.w	1d7c2 <z_reschedule>
	__asm__ volatile(
   19e98:	f385 8811 	msr	BASEPRI, r5
   19e9c:	f3bf 8f6f 	isb	sy
}
   19ea0:	bd70      	pop	{r4, r5, r6, pc}
   19ea2:	bf00      	nop
   19ea4:	20026944 	.word	0x20026944
   19ea8:	2002207a 	.word	0x2002207a

00019eac <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   19eac:	4601      	mov	r1, r0
   19eae:	4801      	ldr	r0, [pc, #4]	; (19eb4 <k_malloc+0x8>)
   19eb0:	f003 bb4b 	b.w	1d54a <k_mem_pool_malloc>
   19eb4:	20026944 	.word	0x20026944

00019eb8 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   19eb8:	b510      	push	{r4, lr}
   19eba:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   19ebc:	f003 fd4a 	bl	1d954 <k_is_in_isr>
   19ec0:	b948      	cbnz	r0, 19ed6 <z_thread_malloc+0x1e>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   19ec2:	4b06      	ldr	r3, [pc, #24]	; (19edc <z_thread_malloc+0x24>)
   19ec4:	689b      	ldr	r3, [r3, #8]
   19ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	}

	if (pool) {
   19ec8:	b13b      	cbz	r3, 19eda <z_thread_malloc+0x22>
		ret = k_mem_pool_malloc(pool, size);
   19eca:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
   19ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   19ed0:	4618      	mov	r0, r3
   19ed2:	f003 bb3a 	b.w	1d54a <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   19ed6:	4b02      	ldr	r3, [pc, #8]	; (19ee0 <z_thread_malloc+0x28>)
   19ed8:	e7f7      	b.n	19eca <z_thread_malloc+0x12>
}
   19eda:	bd10      	pop	{r4, pc}
   19edc:	20021d60 	.word	0x20021d60
   19ee0:	20026944 	.word	0x20026944

00019ee4 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, s32_t timeout)
{
   19ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19ee8:	4613      	mov	r3, r2
   19eea:	4604      	mov	r4, r0
   19eec:	460f      	mov	r7, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   19eee:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   19ef2:	f04f 0220 	mov.w	r2, #32
   19ef6:	f3ef 8611 	mrs	r6, BASEPRI
   19efa:	f382 8811 	msr	BASEPRI, r2
   19efe:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
   19f02:	6a01      	ldr	r1, [r0, #32]
   19f04:	68c2      	ldr	r2, [r0, #12]
   19f06:	4291      	cmp	r1, r2
   19f08:	d22e      	bcs.n	19f68 <z_impl_k_msgq_put+0x84>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   19f0a:	f003 fcd0 	bl	1d8ae <z_unpend_first_thread>
		if (pending_thread != NULL) {
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   19f0e:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   19f10:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   19f12:	4639      	mov	r1, r7
		if (pending_thread != NULL) {
   19f14:	b198      	cbz	r0, 19f3e <z_impl_k_msgq_put+0x5a>
			(void)memcpy(pending_thread->base.swap_data, data,
   19f16:	6940      	ldr	r0, [r0, #20]
   19f18:	f001 fef7 	bl	1bd0a <memcpy>
   19f1c:	2300      	movs	r3, #0
   19f1e:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   19f20:	7b6b      	ldrb	r3, [r5, #13]
   19f22:	06db      	lsls	r3, r3, #27
   19f24:	d104      	bne.n	19f30 <z_impl_k_msgq_put+0x4c>
	if (z_is_thread_ready(thread)) {
   19f26:	69ab      	ldr	r3, [r5, #24]
   19f28:	b913      	cbnz	r3, 19f30 <z_impl_k_msgq_put+0x4c>
		z_add_thread_to_ready_q(thread);
   19f2a:	4628      	mov	r0, r5
   19f2c:	f000 f9ee 	bl	1a30c <z_add_thread_to_ready_q>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   19f30:	4640      	mov	r0, r8
   19f32:	4631      	mov	r1, r6
   19f34:	f003 fc45 	bl	1d7c2 <z_reschedule>
			return 0;
   19f38:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   19f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   19f3e:	69e0      	ldr	r0, [r4, #28]
   19f40:	f001 fee3 	bl	1bd0a <memcpy>
		result = 0;
   19f44:	2000      	movs	r0, #0
			msgq->write_ptr += msgq->msg_size;
   19f46:	69e3      	ldr	r3, [r4, #28]
   19f48:	68a2      	ldr	r2, [r4, #8]
   19f4a:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   19f4c:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   19f4e:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   19f50:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   19f52:	bf04      	itt	eq
   19f54:	6923      	ldreq	r3, [r4, #16]
   19f56:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   19f58:	6a23      	ldr	r3, [r4, #32]
   19f5a:	3301      	adds	r3, #1
   19f5c:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
   19f5e:	f386 8811 	msr	BASEPRI, r6
   19f62:	f3bf 8f6f 	isb	sy
	return result;
   19f66:	e7e8      	b.n	19f3a <z_impl_k_msgq_put+0x56>
	} else if (timeout == K_NO_WAIT) {
   19f68:	b14b      	cbz	r3, 19f7e <z_impl_k_msgq_put+0x9a>
		_current->base.swap_data = data;
   19f6a:	4a06      	ldr	r2, [pc, #24]	; (19f84 <z_impl_k_msgq_put+0xa0>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   19f6c:	4631      	mov	r1, r6
		_current->base.swap_data = data;
   19f6e:	6892      	ldr	r2, [r2, #8]
   19f70:	6157      	str	r7, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   19f72:	4602      	mov	r2, r0
   19f74:	4640      	mov	r0, r8
}
   19f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   19f7a:	f000 bb7d 	b.w	1a678 <z_pend_curr>
		result = -ENOMSG;
   19f7e:	f06f 004f 	mvn.w	r0, #79	; 0x4f
   19f82:	e7ec      	b.n	19f5e <z_impl_k_msgq_put+0x7a>
   19f84:	20021d60 	.word	0x20021d60

00019f88 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, s32_t timeout)
{
   19f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19f8c:	4604      	mov	r4, r0
   19f8e:	4613      	mov	r3, r2
   19f90:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   19f92:	f104 0708 	add.w	r7, r4, #8
	__asm__ volatile(
   19f96:	f04f 0220 	mov.w	r2, #32
   19f9a:	f3ef 8611 	mrs	r6, BASEPRI
   19f9e:	f382 8811 	msr	BASEPRI, r2
   19fa2:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
   19fa6:	6a22      	ldr	r2, [r4, #32]
   19fa8:	2a00      	cmp	r2, #0
   19faa:	d037      	beq.n	1a01c <z_impl_k_msgq_get+0x94>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   19fac:	68a2      	ldr	r2, [r4, #8]
   19fae:	69a1      	ldr	r1, [r4, #24]
   19fb0:	f001 feab 	bl	1bd0a <memcpy>
		msgq->read_ptr += msgq->msg_size;
   19fb4:	69a3      	ldr	r3, [r4, #24]
   19fb6:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   19fb8:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   19fba:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   19fbc:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   19fbe:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   19fc0:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   19fc2:	bf04      	itt	eq
   19fc4:	6923      	ldreq	r3, [r4, #16]
   19fc6:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   19fc8:	6a23      	ldr	r3, [r4, #32]
   19fca:	3b01      	subs	r3, #1
   19fcc:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   19fce:	f003 fc6e 	bl	1d8ae <z_unpend_first_thread>
		if (pending_thread != NULL) {
   19fd2:	4605      	mov	r5, r0
   19fd4:	2800      	cmp	r0, #0
   19fd6:	d02e      	beq.n	1a036 <z_impl_k_msgq_get+0xae>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   19fd8:	68a2      	ldr	r2, [r4, #8]
   19fda:	6941      	ldr	r1, [r0, #20]
   19fdc:	69e0      	ldr	r0, [r4, #28]
   19fde:	f001 fe94 	bl	1bd0a <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   19fe2:	69e3      	ldr	r3, [r4, #28]
   19fe4:	68a2      	ldr	r2, [r4, #8]
   19fe6:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   19fe8:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   19fea:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   19fec:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   19fee:	bf04      	itt	eq
   19ff0:	6923      	ldreq	r3, [r4, #16]
   19ff2:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
   19ff4:	6a23      	ldr	r3, [r4, #32]
   19ff6:	3301      	adds	r3, #1
   19ff8:	6223      	str	r3, [r4, #32]
   19ffa:	2300      	movs	r3, #0
   19ffc:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   19ffe:	7b6b      	ldrb	r3, [r5, #13]
   1a000:	06db      	lsls	r3, r3, #27
   1a002:	d104      	bne.n	1a00e <z_impl_k_msgq_get+0x86>
	if (z_is_thread_ready(thread)) {
   1a004:	69ab      	ldr	r3, [r5, #24]
   1a006:	b913      	cbnz	r3, 1a00e <z_impl_k_msgq_get+0x86>
		z_add_thread_to_ready_q(thread);
   1a008:	4628      	mov	r0, r5
   1a00a:	f000 f97f 	bl	1a30c <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   1a00e:	4638      	mov	r0, r7
   1a010:	4631      	mov	r1, r6
   1a012:	f003 fbd6 	bl	1d7c2 <z_reschedule>
			return 0;
   1a016:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1a018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
   1a01c:	b14b      	cbz	r3, 1a032 <z_impl_k_msgq_get+0xaa>
		_current->base.swap_data = data;
   1a01e:	4a08      	ldr	r2, [pc, #32]	; (1a040 <z_impl_k_msgq_get+0xb8>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1a020:	4638      	mov	r0, r7
		_current->base.swap_data = data;
   1a022:	6892      	ldr	r2, [r2, #8]
   1a024:	6151      	str	r1, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1a026:	4622      	mov	r2, r4
   1a028:	4631      	mov	r1, r6
}
   1a02a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1a02e:	f000 bb23 	b.w	1a678 <z_pend_curr>
		result = -ENOMSG;
   1a032:	f06f 004f 	mvn.w	r0, #79	; 0x4f
	__asm__ volatile(
   1a036:	f386 8811 	msr	BASEPRI, r6
   1a03a:	f3bf 8f6f 	isb	sy
	return result;
   1a03e:	e7eb      	b.n	1a018 <z_impl_k_msgq_get+0x90>
   1a040:	20021d60 	.word	0x20021d60

0001a044 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   1a044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a046:	4604      	mov	r4, r0
   1a048:	460f      	mov	r7, r1
	__asm__ volatile(
   1a04a:	f04f 0320 	mov.w	r3, #32
   1a04e:	f3ef 8511 	mrs	r5, BASEPRI
   1a052:	f383 8811 	msr	BASEPRI, r3
   1a056:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1a05a:	68c2      	ldr	r2, [r0, #12]
   1a05c:	4930      	ldr	r1, [pc, #192]	; (1a120 <z_impl_k_mutex_lock+0xdc>)
   1a05e:	b15a      	cbz	r2, 1a078 <z_impl_k_mutex_lock+0x34>
   1a060:	6880      	ldr	r0, [r0, #8]
   1a062:	688e      	ldr	r6, [r1, #8]
   1a064:	42b0      	cmp	r0, r6
   1a066:	d015      	beq.n	1a094 <z_impl_k_mutex_lock+0x50>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   1a068:	b9b7      	cbnz	r7, 1a098 <z_impl_k_mutex_lock+0x54>
	__asm__ volatile(
   1a06a:	f385 8811 	msr	BASEPRI, r5
   1a06e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1a072:	f06f 000f 	mvn.w	r0, #15
   1a076:	e00c      	b.n	1a092 <z_impl_k_mutex_lock+0x4e>
					_current->base.prio :
   1a078:	688b      	ldr	r3, [r1, #8]
   1a07a:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1a07e:	6123      	str	r3, [r4, #16]
		mutex->owner = _current;
   1a080:	688b      	ldr	r3, [r1, #8]
		mutex->lock_count++;
   1a082:	3201      	adds	r2, #1
   1a084:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
   1a086:	60a3      	str	r3, [r4, #8]
   1a088:	f385 8811 	msr	BASEPRI, r5
   1a08c:	f3bf 8f6f 	isb	sy
		return 0;
   1a090:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1a092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   1a094:	6923      	ldr	r3, [r4, #16]
   1a096:	e7f2      	b.n	1a07e <z_impl_k_mutex_lock+0x3a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1a098:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1a09c:	f996 100e 	ldrsb.w	r1, [r6, #14]
   1a0a0:	4299      	cmp	r1, r3
   1a0a2:	bfa8      	it	ge
   1a0a4:	4619      	movge	r1, r3
   1a0a6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1a0aa:	4299      	cmp	r1, r3
   1a0ac:	da2b      	bge.n	1a106 <z_impl_k_mutex_lock+0xc2>
		return z_set_prio(mutex->owner, new_prio);
   1a0ae:	f000 fb25 	bl	1a6fc <z_set_prio>
   1a0b2:	4606      	mov	r6, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1a0b4:	463b      	mov	r3, r7
   1a0b6:	4622      	mov	r2, r4
   1a0b8:	4629      	mov	r1, r5
   1a0ba:	481a      	ldr	r0, [pc, #104]	; (1a124 <z_impl_k_mutex_lock+0xe0>)
   1a0bc:	f000 fadc 	bl	1a678 <z_pend_curr>
	if (got_mutex == 0) {
   1a0c0:	2800      	cmp	r0, #0
   1a0c2:	d0e6      	beq.n	1a092 <z_impl_k_mutex_lock+0x4e>
	__asm__ volatile(
   1a0c4:	f04f 0320 	mov.w	r3, #32
   1a0c8:	f3ef 8511 	mrs	r5, BASEPRI
   1a0cc:	f383 8811 	msr	BASEPRI, r3
   1a0d0:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1a0d4:	6823      	ldr	r3, [r4, #0]
   1a0d6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a0d8:	429c      	cmp	r4, r3
   1a0da:	d007      	beq.n	1a0ec <z_impl_k_mutex_lock+0xa8>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1a0dc:	b133      	cbz	r3, 1a0ec <z_impl_k_mutex_lock+0xa8>
   1a0de:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1a0e2:	4299      	cmp	r1, r3
   1a0e4:	bfa8      	it	ge
   1a0e6:	4619      	movge	r1, r3
   1a0e8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1a0ec:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1a0ee:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1a0f2:	4299      	cmp	r1, r3
   1a0f4:	d109      	bne.n	1a10a <z_impl_k_mutex_lock+0xc6>
	if (resched) {
   1a0f6:	b16e      	cbz	r6, 1a114 <z_impl_k_mutex_lock+0xd0>
		z_reschedule(&lock, key);
   1a0f8:	4629      	mov	r1, r5
   1a0fa:	480a      	ldr	r0, [pc, #40]	; (1a124 <z_impl_k_mutex_lock+0xe0>)
   1a0fc:	f003 fb61 	bl	1d7c2 <z_reschedule>
	return -EAGAIN;
   1a100:	f06f 000a 	mvn.w	r0, #10
   1a104:	e7c5      	b.n	1a092 <z_impl_k_mutex_lock+0x4e>
	bool resched = false;
   1a106:	2600      	movs	r6, #0
   1a108:	e7d4      	b.n	1a0b4 <z_impl_k_mutex_lock+0x70>
		return z_set_prio(mutex->owner, new_prio);
   1a10a:	f000 faf7 	bl	1a6fc <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1a10e:	2800      	cmp	r0, #0
   1a110:	d1f2      	bne.n	1a0f8 <z_impl_k_mutex_lock+0xb4>
   1a112:	e7f0      	b.n	1a0f6 <z_impl_k_mutex_lock+0xb2>
	__asm__ volatile(
   1a114:	f385 8811 	msr	BASEPRI, r5
   1a118:	f3bf 8f6f 	isb	sy
   1a11c:	e7f0      	b.n	1a100 <z_impl_k_mutex_lock+0xbc>
   1a11e:	bf00      	nop
   1a120:	20021d60 	.word	0x20021d60
   1a124:	2002207a 	.word	0x2002207a

0001a128 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1a128:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
   1a12a:	6883      	ldr	r3, [r0, #8]
{
   1a12c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1a12e:	2b00      	cmp	r3, #0
   1a130:	d03b      	beq.n	1a1aa <z_impl_k_mutex_unlock+0x82>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1a132:	4a21      	ldr	r2, [pc, #132]	; (1a1b8 <z_impl_k_mutex_unlock+0x90>)
   1a134:	6892      	ldr	r2, [r2, #8]
   1a136:	4293      	cmp	r3, r2
   1a138:	d13a      	bne.n	1a1b0 <z_impl_k_mutex_unlock+0x88>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1a13a:	7bda      	ldrb	r2, [r3, #15]
   1a13c:	3a01      	subs	r2, #1
   1a13e:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1a140:	68c3      	ldr	r3, [r0, #12]
   1a142:	2b01      	cmp	r3, #1
   1a144:	d005      	beq.n	1a152 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1a146:	3b01      	subs	r3, #1
   1a148:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1a14a:	f000 f8c3 	bl	1a2d4 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1a14e:	2000      	movs	r0, #0
}
   1a150:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1a152:	f04f 0320 	mov.w	r3, #32
   1a156:	f3ef 8511 	mrs	r5, BASEPRI
   1a15a:	f383 8811 	msr	BASEPRI, r3
   1a15e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1a162:	6901      	ldr	r1, [r0, #16]
   1a164:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1a166:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1a16a:	4299      	cmp	r1, r3
   1a16c:	d001      	beq.n	1a172 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1a16e:	f000 fac5 	bl	1a6fc <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1a172:	4620      	mov	r0, r4
   1a174:	f003 fb9b 	bl	1d8ae <z_unpend_first_thread>
	mutex->owner = new_owner;
   1a178:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1a17a:	b180      	cbz	r0, 1a19e <z_impl_k_mutex_unlock+0x76>
		mutex->owner_orig_prio = new_owner->base.prio;
   1a17c:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1a180:	6122      	str	r2, [r4, #16]
   1a182:	2200      	movs	r2, #0
   1a184:	6682      	str	r2, [r0, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1a186:	7b42      	ldrb	r2, [r0, #13]
   1a188:	06d2      	lsls	r2, r2, #27
   1a18a:	d103      	bne.n	1a194 <z_impl_k_mutex_unlock+0x6c>
	if (z_is_thread_ready(thread)) {
   1a18c:	6983      	ldr	r3, [r0, #24]
   1a18e:	b90b      	cbnz	r3, 1a194 <z_impl_k_mutex_unlock+0x6c>
		z_add_thread_to_ready_q(thread);
   1a190:	f000 f8bc 	bl	1a30c <z_add_thread_to_ready_q>
		z_reschedule(&lock, key);
   1a194:	4629      	mov	r1, r5
   1a196:	4809      	ldr	r0, [pc, #36]	; (1a1bc <z_impl_k_mutex_unlock+0x94>)
   1a198:	f003 fb13 	bl	1d7c2 <z_reschedule>
   1a19c:	e7d5      	b.n	1a14a <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1a19e:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1a1a0:	f385 8811 	msr	BASEPRI, r5
   1a1a4:	f3bf 8f6f 	isb	sy
   1a1a8:	e7cf      	b.n	1a14a <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1a1aa:	f06f 0015 	mvn.w	r0, #21
   1a1ae:	e7cf      	b.n	1a150 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1a1b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a1b4:	e7cc      	b.n	1a150 <z_impl_k_mutex_unlock+0x28>
   1a1b6:	bf00      	nop
   1a1b8:	20021d60 	.word	0x20021d60
   1a1bc:	2002207a 	.word	0x2002207a

0001a1c0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1a1c0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1a1c2:	4c08      	ldr	r4, [pc, #32]	; (1a1e4 <z_reset_time_slice+0x24>)
   1a1c4:	6823      	ldr	r3, [r4, #0]
   1a1c6:	b15b      	cbz	r3, 1a1e0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1a1c8:	f7f3 fb00 	bl	d7cc <z_clock_elapsed>
   1a1cc:	6823      	ldr	r3, [r4, #0]
   1a1ce:	4a06      	ldr	r2, [pc, #24]	; (1a1e8 <z_reset_time_slice+0x28>)
   1a1d0:	4418      	add	r0, r3
   1a1d2:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1a1d4:	2100      	movs	r1, #0
	}
}
   1a1d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   1a1da:	4618      	mov	r0, r3
   1a1dc:	f003 bc5d 	b.w	1da9a <z_set_timeout_expiry>
}
   1a1e0:	bd10      	pop	{r4, pc}
   1a1e2:	bf00      	nop
   1a1e4:	20021d9c 	.word	0x20021d9c
   1a1e8:	20021d60 	.word	0x20021d60

0001a1ec <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
   1a1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a1ee:	460d      	mov	r5, r1
	__asm__ volatile(
   1a1f0:	f04f 0320 	mov.w	r3, #32
   1a1f4:	f3ef 8411 	mrs	r4, BASEPRI
   1a1f8:	f383 8811 	msr	BASEPRI, r3
   1a1fc:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
   1a200:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1a204:	f240 36e7 	movw	r6, #999	; 0x3e7
   1a208:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1a20a:	2200      	movs	r2, #0
   1a20c:	fbe1 6700 	umlal	r6, r7, r1, r0
   1a210:	4b09      	ldr	r3, [pc, #36]	; (1a238 <k_sched_time_slice_set+0x4c>)
   1a212:	4630      	mov	r0, r6
   1a214:	611a      	str	r2, [r3, #16]
   1a216:	4639      	mov	r1, r7
   1a218:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a21c:	2300      	movs	r3, #0
   1a21e:	f7f2 f80d 	bl	c23c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1a222:	4b06      	ldr	r3, [pc, #24]	; (1a23c <k_sched_time_slice_set+0x50>)
   1a224:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1a226:	4b06      	ldr	r3, [pc, #24]	; (1a240 <k_sched_time_slice_set+0x54>)
   1a228:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1a22a:	f7ff ffc9 	bl	1a1c0 <z_reset_time_slice>
	__asm__ volatile(
   1a22e:	f384 8811 	msr	BASEPRI, r4
   1a232:	f3bf 8f6f 	isb	sy
	}
}
   1a236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a238:	20021d60 	.word	0x20021d60
   1a23c:	20021d9c 	.word	0x20021d9c
   1a240:	20021d98 	.word	0x20021d98

0001a244 <k_sched_lock>:
	__asm__ volatile(
   1a244:	f04f 0320 	mov.w	r3, #32
   1a248:	f3ef 8111 	mrs	r1, BASEPRI
   1a24c:	f383 8811 	msr	BASEPRI, r3
   1a250:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1a254:	4b04      	ldr	r3, [pc, #16]	; (1a268 <k_sched_lock+0x24>)
   1a256:	689a      	ldr	r2, [r3, #8]
   1a258:	7bd3      	ldrb	r3, [r2, #15]
   1a25a:	3b01      	subs	r3, #1
   1a25c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1a25e:	f381 8811 	msr	BASEPRI, r1
   1a262:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1a266:	4770      	bx	lr
   1a268:	20021d60 	.word	0x20021d60

0001a26c <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1a26c:	4b09      	ldr	r3, [pc, #36]	; (1a294 <z_priq_dumb_remove+0x28>)
   1a26e:	f103 0228 	add.w	r2, r3, #40	; 0x28
   1a272:	4282      	cmp	r2, r0
   1a274:	d105      	bne.n	1a282 <z_priq_dumb_remove+0x16>
   1a276:	689b      	ldr	r3, [r3, #8]
   1a278:	428b      	cmp	r3, r1
   1a27a:	d102      	bne.n	1a282 <z_priq_dumb_remove+0x16>
   1a27c:	7b4b      	ldrb	r3, [r1, #13]
   1a27e:	06db      	lsls	r3, r3, #27
   1a280:	d106      	bne.n	1a290 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1a282:	e9d1 3200 	ldrd	r3, r2, [r1]
   1a286:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1a288:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a28a:	2300      	movs	r3, #0
	node->prev = NULL;
   1a28c:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1a290:	4770      	bx	lr
   1a292:	bf00      	nop
   1a294:	20021d60 	.word	0x20021d60

0001a298 <update_cache>:
{
   1a298:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1a29a:	4c0d      	ldr	r4, [pc, #52]	; (1a2d0 <update_cache+0x38>)
{
   1a29c:	4602      	mov	r2, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1a29e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1a2a2:	f003 facd 	bl	1d840 <z_priq_dumb_best>
	return thread ? thread : _current_cpu->idle_thread;
   1a2a6:	4605      	mov	r5, r0
   1a2a8:	b900      	cbnz	r0, 1a2ac <update_cache+0x14>
   1a2aa:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1a2ac:	68a3      	ldr	r3, [r4, #8]
   1a2ae:	b94a      	cbnz	r2, 1a2c4 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
   1a2b0:	7b5a      	ldrb	r2, [r3, #13]
   1a2b2:	06d2      	lsls	r2, r2, #27
   1a2b4:	d106      	bne.n	1a2c4 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1a2b6:	69aa      	ldr	r2, [r5, #24]
   1a2b8:	b922      	cbnz	r2, 1a2c4 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(thread)) {
   1a2ba:	89da      	ldrh	r2, [r3, #14]
   1a2bc:	2a7f      	cmp	r2, #127	; 0x7f
   1a2be:	d901      	bls.n	1a2c4 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
   1a2c0:	6263      	str	r3, [r4, #36]	; 0x24
}
   1a2c2:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1a2c4:	429d      	cmp	r5, r3
   1a2c6:	d001      	beq.n	1a2cc <update_cache+0x34>
			z_reset_time_slice();
   1a2c8:	f7ff ff7a 	bl	1a1c0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1a2cc:	6265      	str	r5, [r4, #36]	; 0x24
}
   1a2ce:	e7f8      	b.n	1a2c2 <update_cache+0x2a>
   1a2d0:	20021d60 	.word	0x20021d60

0001a2d4 <k_sched_unlock>:
{
   1a2d4:	b510      	push	{r4, lr}
	__asm__ volatile(
   1a2d6:	f04f 0320 	mov.w	r3, #32
   1a2da:	f3ef 8411 	mrs	r4, BASEPRI
   1a2de:	f383 8811 	msr	BASEPRI, r3
   1a2e2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1a2e6:	4b08      	ldr	r3, [pc, #32]	; (1a308 <k_sched_unlock+0x34>)
		update_cache(0);
   1a2e8:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1a2ea:	689a      	ldr	r2, [r3, #8]
   1a2ec:	7bd3      	ldrb	r3, [r2, #15]
   1a2ee:	3301      	adds	r3, #1
   1a2f0:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1a2f2:	f7ff ffd1 	bl	1a298 <update_cache>
	__asm__ volatile(
   1a2f6:	f384 8811 	msr	BASEPRI, r4
   1a2fa:	f3bf 8f6f 	isb	sy
}
   1a2fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1a302:	f003 ba75 	b.w	1d7f0 <z_reschedule_unlocked>
   1a306:	bf00      	nop
   1a308:	20021d60 	.word	0x20021d60

0001a30c <z_add_thread_to_ready_q>:
{
   1a30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1a30e:	f04f 0320 	mov.w	r3, #32
   1a312:	f3ef 8411 	mrs	r4, BASEPRI
   1a316:	f383 8811 	msr	BASEPRI, r3
   1a31a:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1a31e:	4a15      	ldr	r2, [pc, #84]	; (1a374 <z_add_thread_to_ready_q+0x68>)
   1a320:	4611      	mov	r1, r2
   1a322:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a326:	428b      	cmp	r3, r1
   1a328:	d01d      	beq.n	1a366 <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a32a:	b1e3      	cbz	r3, 1a366 <z_add_thread_to_ready_q+0x5a>
   1a32c:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   1a32e:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1a332:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1a336:	42af      	cmp	r7, r5
   1a338:	dd10      	ble.n	1a35c <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
   1a33a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1a33c:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1a340:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1a342:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1a344:	7b43      	ldrb	r3, [r0, #13]
   1a346:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1a34a:	7343      	strb	r3, [r0, #13]
		update_cache(0);
   1a34c:	2000      	movs	r0, #0
   1a34e:	f7ff ffa3 	bl	1a298 <update_cache>
	__asm__ volatile(
   1a352:	f384 8811 	msr	BASEPRI, r4
   1a356:	f3bf 8f6f 	isb	sy
}
   1a35a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1a35c:	42b3      	cmp	r3, r6
   1a35e:	d002      	beq.n	1a366 <z_add_thread_to_ready_q+0x5a>
   1a360:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a362:	2b00      	cmp	r3, #0
   1a364:	d1e5      	bne.n	1a332 <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
   1a366:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   1a368:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   1a36a:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   1a36c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1a36e:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1a370:	62d0      	str	r0, [r2, #44]	; 0x2c
   1a372:	e7e7      	b.n	1a344 <z_add_thread_to_ready_q+0x38>
   1a374:	20021d60 	.word	0x20021d60

0001a378 <z_move_thread_to_end_of_prio_q>:
{
   1a378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a37a:	4604      	mov	r4, r0
	__asm__ volatile(
   1a37c:	f04f 0320 	mov.w	r3, #32
   1a380:	f3ef 8511 	mrs	r5, BASEPRI
   1a384:	f383 8811 	msr	BASEPRI, r3
   1a388:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1a38c:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1a390:	2b00      	cmp	r3, #0
   1a392:	da03      	bge.n	1a39c <z_move_thread_to_end_of_prio_q+0x24>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1a394:	4601      	mov	r1, r0
   1a396:	4818      	ldr	r0, [pc, #96]	; (1a3f8 <z_move_thread_to_end_of_prio_q+0x80>)
   1a398:	f7ff ff68 	bl	1a26c <z_priq_dumb_remove>
	return list->head == list;
   1a39c:	4a17      	ldr	r2, [pc, #92]	; (1a3fc <z_move_thread_to_end_of_prio_q+0x84>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a39e:	f102 0128 	add.w	r1, r2, #40	; 0x28
   1a3a2:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   1a3a6:	428b      	cmp	r3, r1
   1a3a8:	d01f      	beq.n	1a3ea <z_move_thread_to_end_of_prio_q+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a3aa:	b1f3      	cbz	r3, 1a3ea <z_move_thread_to_end_of_prio_q+0x72>
	if (thread_1->base.prio < thread_2->base.prio) {
   1a3ac:	f994 600e 	ldrsb.w	r6, [r4, #14]
   1a3b0:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1a3b4:	42b7      	cmp	r7, r6
   1a3b6:	dd13      	ble.n	1a3e0 <z_move_thread_to_end_of_prio_q+0x68>
	node->prev = successor->prev;
   1a3b8:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1a3ba:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   1a3be:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1a3c0:	605c      	str	r4, [r3, #4]
   1a3c2:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   1a3c4:	6890      	ldr	r0, [r2, #8]
   1a3c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1a3ca:	7363      	strb	r3, [r4, #13]
   1a3cc:	1b03      	subs	r3, r0, r4
   1a3ce:	4258      	negs	r0, r3
   1a3d0:	4158      	adcs	r0, r3
   1a3d2:	f7ff ff61 	bl	1a298 <update_cache>
	__asm__ volatile(
   1a3d6:	f385 8811 	msr	BASEPRI, r5
   1a3da:	f3bf 8f6f 	isb	sy
}
   1a3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1a3e0:	4298      	cmp	r0, r3
   1a3e2:	d002      	beq.n	1a3ea <z_move_thread_to_end_of_prio_q+0x72>
   1a3e4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a3e6:	2b00      	cmp	r3, #0
   1a3e8:	d1e2      	bne.n	1a3b0 <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = list->tail;
   1a3ea:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   1a3ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1a3f0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1a3f2:	62d4      	str	r4, [r2, #44]	; 0x2c
   1a3f4:	e7e5      	b.n	1a3c2 <z_move_thread_to_end_of_prio_q+0x4a>
   1a3f6:	bf00      	nop
   1a3f8:	20021d88 	.word	0x20021d88
   1a3fc:	20021d60 	.word	0x20021d60

0001a400 <z_time_slice>:
	if (pending_current == _current) {
   1a400:	4a15      	ldr	r2, [pc, #84]	; (1a458 <z_time_slice+0x58>)
   1a402:	4916      	ldr	r1, [pc, #88]	; (1a45c <z_time_slice+0x5c>)
{
   1a404:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   1a406:	680c      	ldr	r4, [r1, #0]
   1a408:	6893      	ldr	r3, [r2, #8]
   1a40a:	42a3      	cmp	r3, r4
   1a40c:	4614      	mov	r4, r2
   1a40e:	d103      	bne.n	1a418 <z_time_slice+0x18>
}
   1a410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   1a414:	f7ff bed4 	b.w	1a1c0 <z_reset_time_slice>
	pending_current = NULL;
   1a418:	2500      	movs	r5, #0
   1a41a:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   1a41c:	4910      	ldr	r1, [pc, #64]	; (1a460 <z_time_slice+0x60>)
   1a41e:	6809      	ldr	r1, [r1, #0]
   1a420:	b1b9      	cbz	r1, 1a452 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   1a422:	89d9      	ldrh	r1, [r3, #14]
   1a424:	297f      	cmp	r1, #127	; 0x7f
   1a426:	d814      	bhi.n	1a452 <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1a428:	490e      	ldr	r1, [pc, #56]	; (1a464 <z_time_slice+0x64>)
   1a42a:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1a42e:	6809      	ldr	r1, [r1, #0]
   1a430:	428d      	cmp	r5, r1
   1a432:	db0e      	blt.n	1a452 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   1a434:	490c      	ldr	r1, [pc, #48]	; (1a468 <z_time_slice+0x68>)
   1a436:	428b      	cmp	r3, r1
   1a438:	d00b      	beq.n	1a452 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   1a43a:	6999      	ldr	r1, [r3, #24]
   1a43c:	b949      	cbnz	r1, 1a452 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   1a43e:	6911      	ldr	r1, [r2, #16]
   1a440:	4281      	cmp	r1, r0
   1a442:	dc03      	bgt.n	1a44c <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   1a444:	4618      	mov	r0, r3
   1a446:	f7ff ff97 	bl	1a378 <z_move_thread_to_end_of_prio_q>
   1a44a:	e7e1      	b.n	1a410 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   1a44c:	1a09      	subs	r1, r1, r0
   1a44e:	6111      	str	r1, [r2, #16]
}
   1a450:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   1a452:	2300      	movs	r3, #0
   1a454:	6123      	str	r3, [r4, #16]
   1a456:	e7fb      	b.n	1a450 <z_time_slice+0x50>
   1a458:	20021d60 	.word	0x20021d60
   1a45c:	20021d94 	.word	0x20021d94
   1a460:	20021d9c 	.word	0x20021d9c
   1a464:	20021d98 	.word	0x20021d98
   1a468:	200213dc 	.word	0x200213dc

0001a46c <z_thread_single_suspend>:
{
   1a46c:	b570      	push	{r4, r5, r6, lr}
   1a46e:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1a470:	3018      	adds	r0, #24
   1a472:	f003 faec 	bl	1da4e <z_abort_timeout>
	__asm__ volatile(
   1a476:	f04f 0320 	mov.w	r3, #32
   1a47a:	f3ef 8611 	mrs	r6, BASEPRI
   1a47e:	f383 8811 	msr	BASEPRI, r3
   1a482:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1a486:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1a48a:	2b00      	cmp	r3, #0
   1a48c:	da07      	bge.n	1a49e <z_thread_single_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1a48e:	4621      	mov	r1, r4
   1a490:	480e      	ldr	r0, [pc, #56]	; (1a4cc <z_thread_single_suspend+0x60>)
   1a492:	f7ff feeb 	bl	1a26c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1a496:	7b63      	ldrb	r3, [r4, #13]
   1a498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a49c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1a49e:	4d0c      	ldr	r5, [pc, #48]	; (1a4d0 <z_thread_single_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1a4a0:	7b63      	ldrb	r3, [r4, #13]
   1a4a2:	68a8      	ldr	r0, [r5, #8]
   1a4a4:	f043 0310 	orr.w	r3, r3, #16
   1a4a8:	7363      	strb	r3, [r4, #13]
   1a4aa:	1b03      	subs	r3, r0, r4
   1a4ac:	4258      	negs	r0, r3
   1a4ae:	4158      	adcs	r0, r3
   1a4b0:	f7ff fef2 	bl	1a298 <update_cache>
	__asm__ volatile(
   1a4b4:	f386 8811 	msr	BASEPRI, r6
   1a4b8:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1a4bc:	68ab      	ldr	r3, [r5, #8]
   1a4be:	42a3      	cmp	r3, r4
   1a4c0:	d103      	bne.n	1a4ca <z_thread_single_suspend+0x5e>
}
   1a4c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1a4c6:	f003 b993 	b.w	1d7f0 <z_reschedule_unlocked>
}
   1a4ca:	bd70      	pop	{r4, r5, r6, pc}
   1a4cc:	20021d88 	.word	0x20021d88
   1a4d0:	20021d60 	.word	0x20021d60

0001a4d4 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   1a4d4:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1a4d6:	b570      	push	{r4, r5, r6, lr}
   1a4d8:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   1a4da:	b103      	cbz	r3, 1a4de <z_thread_single_abort+0xa>
		thread->fn_abort();
   1a4dc:	4798      	blx	r3
   1a4de:	f104 0018 	add.w	r0, r4, #24
   1a4e2:	f003 fab4 	bl	1da4e <z_abort_timeout>
	__asm__ volatile(
   1a4e6:	f04f 0320 	mov.w	r3, #32
   1a4ea:	f3ef 8511 	mrs	r5, BASEPRI
   1a4ee:	f383 8811 	msr	BASEPRI, r3
   1a4f2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_ready(thread)) {
   1a4f6:	4620      	mov	r0, r4
   1a4f8:	f003 f928 	bl	1d74c <z_is_thread_ready>
   1a4fc:	4606      	mov	r6, r0
   1a4fe:	b1d8      	cbz	r0, 1a538 <z_thread_single_abort+0x64>
			if (z_is_thread_queued(thread)) {
   1a500:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1a504:	2b00      	cmp	r3, #0
   1a506:	da07      	bge.n	1a518 <z_thread_single_abort+0x44>
				_priq_run_remove(&_kernel.ready_q.runq,
   1a508:	4621      	mov	r1, r4
   1a50a:	4812      	ldr	r0, [pc, #72]	; (1a554 <z_thread_single_abort+0x80>)
   1a50c:	f7ff feae 	bl	1a26c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1a510:	7b63      	ldrb	r3, [r4, #13]
   1a512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a516:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1a518:	4b0f      	ldr	r3, [pc, #60]	; (1a558 <z_thread_single_abort+0x84>)
   1a51a:	6898      	ldr	r0, [r3, #8]
   1a51c:	1b02      	subs	r2, r0, r4
   1a51e:	4250      	negs	r0, r2
   1a520:	4150      	adcs	r0, r2
   1a522:	f7ff feb9 	bl	1a298 <update_cache>
		thread->base.thread_state |= mask;
   1a526:	7b63      	ldrb	r3, [r4, #13]
   1a528:	f043 0308 	orr.w	r3, r3, #8
   1a52c:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1a52e:	f385 8811 	msr	BASEPRI, r5
   1a532:	f3bf 8f6f 	isb	sy
}
   1a536:	bd70      	pop	{r4, r5, r6, pc}
			if (z_is_thread_pending(thread)) {
   1a538:	7b63      	ldrb	r3, [r4, #13]
   1a53a:	079b      	lsls	r3, r3, #30
   1a53c:	d5f3      	bpl.n	1a526 <z_thread_single_abort+0x52>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1a53e:	4621      	mov	r1, r4
   1a540:	68a0      	ldr	r0, [r4, #8]
   1a542:	f7ff fe93 	bl	1a26c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1a546:	7b63      	ldrb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1a548:	60a6      	str	r6, [r4, #8]
   1a54a:	f023 0302 	bic.w	r3, r3, #2
   1a54e:	7363      	strb	r3, [r4, #13]
   1a550:	e7e9      	b.n	1a526 <z_thread_single_abort+0x52>
   1a552:	bf00      	nop
   1a554:	20021d88 	.word	0x20021d88
   1a558:	20021d60 	.word	0x20021d60

0001a55c <z_remove_thread_from_ready_q>:
{
   1a55c:	b538      	push	{r3, r4, r5, lr}
   1a55e:	4604      	mov	r4, r0
	__asm__ volatile(
   1a560:	f04f 0320 	mov.w	r3, #32
   1a564:	f3ef 8511 	mrs	r5, BASEPRI
   1a568:	f383 8811 	msr	BASEPRI, r3
   1a56c:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1a570:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1a574:	2b00      	cmp	r3, #0
   1a576:	da07      	bge.n	1a588 <z_remove_thread_from_ready_q+0x2c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1a578:	4601      	mov	r1, r0
   1a57a:	4809      	ldr	r0, [pc, #36]	; (1a5a0 <z_remove_thread_from_ready_q+0x44>)
   1a57c:	f7ff fe76 	bl	1a26c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1a580:	7b63      	ldrb	r3, [r4, #13]
   1a582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a586:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1a588:	4b06      	ldr	r3, [pc, #24]	; (1a5a4 <z_remove_thread_from_ready_q+0x48>)
   1a58a:	6898      	ldr	r0, [r3, #8]
   1a58c:	1b03      	subs	r3, r0, r4
   1a58e:	4258      	negs	r0, r3
   1a590:	4158      	adcs	r0, r3
   1a592:	f7ff fe81 	bl	1a298 <update_cache>
	__asm__ volatile(
   1a596:	f385 8811 	msr	BASEPRI, r5
   1a59a:	f3bf 8f6f 	isb	sy
}
   1a59e:	bd38      	pop	{r3, r4, r5, pc}
   1a5a0:	20021d88 	.word	0x20021d88
   1a5a4:	20021d60 	.word	0x20021d60

0001a5a8 <pend>:
{
   1a5a8:	b570      	push	{r4, r5, r6, lr}
   1a5aa:	4604      	mov	r4, r0
   1a5ac:	460d      	mov	r5, r1
   1a5ae:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   1a5b0:	f7ff ffd4 	bl	1a55c <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   1a5b4:	7b63      	ldrb	r3, [r4, #13]
   1a5b6:	f043 0302 	orr.w	r3, r3, #2
   1a5ba:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1a5bc:	b17d      	cbz	r5, 1a5de <pend+0x36>
	return list->head == list;
   1a5be:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1a5c0:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a5c2:	429d      	cmp	r5, r3
   1a5c4:	d029      	beq.n	1a61a <pend+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a5c6:	b343      	cbz	r3, 1a61a <pend+0x72>
	if (thread_1->base.prio < thread_2->base.prio) {
   1a5c8:	f994 200e 	ldrsb.w	r2, [r4, #14]
   1a5cc:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1a5d0:	4291      	cmp	r1, r2
   1a5d2:	dd1c      	ble.n	1a60e <pend+0x66>
	node->prev = successor->prev;
   1a5d4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1a5d6:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1a5da:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1a5dc:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   1a5de:	1c73      	adds	r3, r6, #1
   1a5e0:	d022      	beq.n	1a628 <pend+0x80>
   1a5e2:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1a5e6:	f240 30e7 	movw	r0, #999	; 0x3e7
   1a5ea:	2100      	movs	r1, #0
   1a5ec:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   1a5f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a5f4:	fbc5 0106 	smlal	r0, r1, r5, r6
   1a5f8:	2300      	movs	r3, #0
   1a5fa:	f7f1 fe1f 	bl	c23c <__aeabi_uldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1a5fe:	490b      	ldr	r1, [pc, #44]	; (1a62c <pend+0x84>)
   1a600:	1c42      	adds	r2, r0, #1
   1a602:	f104 0018 	add.w	r0, r4, #24
}
   1a606:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a60a:	f000 bb31 	b.w	1ac70 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   1a60e:	6869      	ldr	r1, [r5, #4]
   1a610:	428b      	cmp	r3, r1
   1a612:	d002      	beq.n	1a61a <pend+0x72>
   1a614:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a616:	2b00      	cmp	r3, #0
   1a618:	d1d8      	bne.n	1a5cc <pend+0x24>
	node->prev = list->tail;
   1a61a:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1a61c:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   1a61e:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1a620:	686b      	ldr	r3, [r5, #4]
   1a622:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1a624:	606c      	str	r4, [r5, #4]
   1a626:	e7da      	b.n	1a5de <pend+0x36>
}
   1a628:	bd70      	pop	{r4, r5, r6, pc}
   1a62a:	bf00      	nop
   1a62c:	0001d84d 	.word	0x0001d84d

0001a630 <z_pend_curr_irqlock>:
{
   1a630:	b570      	push	{r4, r5, r6, lr}
   1a632:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   1a634:	4d0e      	ldr	r5, [pc, #56]	; (1a670 <z_pend_curr_irqlock+0x40>)
	pending_current = _current;
   1a636:	4c0f      	ldr	r4, [pc, #60]	; (1a674 <z_pend_curr_irqlock+0x44>)
	pend(_current, wait_q, timeout);
   1a638:	68a8      	ldr	r0, [r5, #8]
   1a63a:	f7ff ffb5 	bl	1a5a8 <pend>
	pending_current = _current;
   1a63e:	68ab      	ldr	r3, [r5, #8]
   1a640:	4630      	mov	r0, r6
   1a642:	6023      	str	r3, [r4, #0]
   1a644:	f7f3 f904 	bl	d850 <arch_swap>
	__asm__ volatile(
   1a648:	f04f 0220 	mov.w	r2, #32
   1a64c:	f3ef 8311 	mrs	r3, BASEPRI
   1a650:	f382 8811 	msr	BASEPRI, r2
   1a654:	f3bf 8f6f 	isb	sy
		if (pending_current == _current) {
   1a658:	6822      	ldr	r2, [r4, #0]
   1a65a:	68a9      	ldr	r1, [r5, #8]
   1a65c:	4291      	cmp	r1, r2
			pending_current = NULL;
   1a65e:	bf04      	itt	eq
   1a660:	2200      	moveq	r2, #0
   1a662:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
   1a664:	f383 8811 	msr	BASEPRI, r3
   1a668:	f3bf 8f6f 	isb	sy
}
   1a66c:	bd70      	pop	{r4, r5, r6, pc}
   1a66e:	bf00      	nop
   1a670:	20021d60 	.word	0x20021d60
   1a674:	20021d94 	.word	0x20021d94

0001a678 <z_pend_curr>:
{
   1a678:	b510      	push	{r4, lr}
   1a67a:	460c      	mov	r4, r1
   1a67c:	4611      	mov	r1, r2
	pending_current = _current;
   1a67e:	4a06      	ldr	r2, [pc, #24]	; (1a698 <z_pend_curr+0x20>)
   1a680:	6890      	ldr	r0, [r2, #8]
   1a682:	4a06      	ldr	r2, [pc, #24]	; (1a69c <z_pend_curr+0x24>)
   1a684:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   1a686:	461a      	mov	r2, r3
   1a688:	f7ff ff8e 	bl	1a5a8 <pend>
   1a68c:	4620      	mov	r0, r4
}
   1a68e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a692:	f7f3 b8dd 	b.w	d850 <arch_swap>
   1a696:	bf00      	nop
   1a698:	20021d60 	.word	0x20021d60
   1a69c:	20021d94 	.word	0x20021d94

0001a6a0 <z_tick_sleep.part.19>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
   1a6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
   1a6a2:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   1a6a4:	f003 fa13 	bl	1dace <z_tick_get_32>
   1a6a8:	1834      	adds	r4, r6, r0
	__asm__ volatile(
   1a6aa:	f04f 0320 	mov.w	r3, #32
   1a6ae:	f3ef 8711 	mrs	r7, BASEPRI
   1a6b2:	f383 8811 	msr	BASEPRI, r3
   1a6b6:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1a6ba:	4d0d      	ldr	r5, [pc, #52]	; (1a6f0 <z_tick_sleep.part.19+0x50>)
   1a6bc:	4b0d      	ldr	r3, [pc, #52]	; (1a6f4 <z_tick_sleep.part.19+0x54>)
   1a6be:	68a8      	ldr	r0, [r5, #8]
   1a6c0:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   1a6c2:	f7ff ff4b 	bl	1a55c <z_remove_thread_from_ready_q>
   1a6c6:	68a8      	ldr	r0, [r5, #8]
   1a6c8:	490b      	ldr	r1, [pc, #44]	; (1a6f8 <z_tick_sleep.part.19+0x58>)
   1a6ca:	4632      	mov	r2, r6
   1a6cc:	3018      	adds	r0, #24
   1a6ce:	f000 facf 	bl	1ac70 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
   1a6d2:	68aa      	ldr	r2, [r5, #8]
   1a6d4:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1a6d6:	7b53      	ldrb	r3, [r2, #13]
   1a6d8:	f043 0310 	orr.w	r3, r3, #16
   1a6dc:	7353      	strb	r3, [r2, #13]
   1a6de:	f7f3 f8b7 	bl	d850 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   1a6e2:	f003 f9f4 	bl	1dace <z_tick_get_32>
   1a6e6:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   1a6e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1a6ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a6ee:	bf00      	nop
   1a6f0:	20021d60 	.word	0x20021d60
   1a6f4:	20021d94 	.word	0x20021d94
   1a6f8:	0001d84d 	.word	0x0001d84d

0001a6fc <z_set_prio>:
{
   1a6fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a700:	4604      	mov	r4, r0
   1a702:	f04f 0320 	mov.w	r3, #32
   1a706:	f3ef 8911 	mrs	r9, BASEPRI
   1a70a:	f383 8811 	msr	BASEPRI, r3
   1a70e:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
   1a712:	f003 f81b 	bl	1d74c <z_is_thread_ready>
		if (need_sched) {
   1a716:	b24e      	sxtb	r6, r1
   1a718:	4680      	mov	r8, r0
   1a71a:	b360      	cbz	r0, 1a776 <z_set_prio+0x7a>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1a71c:	4d17      	ldr	r5, [pc, #92]	; (1a77c <z_set_prio+0x80>)
   1a71e:	4621      	mov	r1, r4
   1a720:	f105 0728 	add.w	r7, r5, #40	; 0x28
   1a724:	4638      	mov	r0, r7
   1a726:	f7ff fda1 	bl	1a26c <z_priq_dumb_remove>
	return list->head == list;
   1a72a:	6aab      	ldr	r3, [r5, #40]	; 0x28
				thread->base.prio = prio;
   1a72c:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a72e:	42bb      	cmp	r3, r7
   1a730:	462a      	mov	r2, r5
   1a732:	d019      	beq.n	1a768 <z_set_prio+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a734:	b1c3      	cbz	r3, 1a768 <z_set_prio+0x6c>
   1a736:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   1a738:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1a73c:	42b0      	cmp	r0, r6
   1a73e:	dd0e      	ble.n	1a75e <z_set_prio+0x62>
	node->prev = successor->prev;
   1a740:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1a742:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1a746:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1a748:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1a74a:	2001      	movs	r0, #1
   1a74c:	f7ff fda4 	bl	1a298 <update_cache>
	__asm__ volatile(
   1a750:	f389 8811 	msr	BASEPRI, r9
   1a754:	f3bf 8f6f 	isb	sy
}
   1a758:	4640      	mov	r0, r8
   1a75a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (node == list->tail) ? NULL : node->next;
   1a75e:	4299      	cmp	r1, r3
   1a760:	d002      	beq.n	1a768 <z_set_prio+0x6c>
   1a762:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a764:	2b00      	cmp	r3, #0
   1a766:	d1e7      	bne.n	1a738 <z_set_prio+0x3c>
	node->prev = list->tail;
   1a768:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   1a76a:	6027      	str	r7, [r4, #0]
	node->prev = list->tail;
   1a76c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1a76e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1a770:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1a772:	62d4      	str	r4, [r2, #44]	; 0x2c
   1a774:	e7e9      	b.n	1a74a <z_set_prio+0x4e>
			thread->base.prio = prio;
   1a776:	73a6      	strb	r6, [r4, #14]
   1a778:	e7ea      	b.n	1a750 <z_set_prio+0x54>
   1a77a:	bf00      	nop
   1a77c:	20021d60 	.word	0x20021d60

0001a780 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1a780:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   1a782:	4b04      	ldr	r3, [pc, #16]	; (1a794 <z_sched_init+0x14>)
   1a784:	4608      	mov	r0, r1
   1a786:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1a78a:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1a78e:	f7ff bd2d 	b.w	1a1ec <k_sched_time_slice_set>
   1a792:	bf00      	nop
   1a794:	20021d60 	.word	0x20021d60

0001a798 <z_impl_k_yield>:
{
   1a798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1a79a:	4c23      	ldr	r4, [pc, #140]	; (1a828 <z_impl_k_yield+0x90>)
   1a79c:	4b23      	ldr	r3, [pc, #140]	; (1a82c <z_impl_k_yield+0x94>)
   1a79e:	68a2      	ldr	r2, [r4, #8]
   1a7a0:	429a      	cmp	r2, r3
   1a7a2:	d029      	beq.n	1a7f8 <z_impl_k_yield+0x60>
	__asm__ volatile(
   1a7a4:	f04f 0320 	mov.w	r3, #32
   1a7a8:	f3ef 8611 	mrs	r6, BASEPRI
   1a7ac:	f383 8811 	msr	BASEPRI, r3
   1a7b0:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   1a7b4:	f104 0528 	add.w	r5, r4, #40	; 0x28
   1a7b8:	68a1      	ldr	r1, [r4, #8]
   1a7ba:	4628      	mov	r0, r5
   1a7bc:	f7ff fd56 	bl	1a26c <z_priq_dumb_remove>
	return list->head == list;
   1a7c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1a7c2:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a7c4:	42aa      	cmp	r2, r5
   1a7c6:	d028      	beq.n	1a81a <z_impl_k_yield+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a7c8:	b33a      	cbz	r2, 1a81a <z_impl_k_yield+0x82>
   1a7ca:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   1a7cc:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1a7d0:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1a7d4:	428f      	cmp	r7, r1
   1a7d6:	dd1b      	ble.n	1a810 <z_impl_k_yield+0x78>
	node->prev = successor->prev;
   1a7d8:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1a7da:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   1a7de:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1a7e0:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   1a7e2:	7b5a      	ldrb	r2, [r3, #13]
			update_cache(1);
   1a7e4:	2001      	movs	r0, #1
   1a7e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1a7ea:	735a      	strb	r2, [r3, #13]
   1a7ec:	f7ff fd54 	bl	1a298 <update_cache>
	__asm__ volatile(
   1a7f0:	f386 8811 	msr	BASEPRI, r6
   1a7f4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1a7f8:	f04f 0320 	mov.w	r3, #32
   1a7fc:	f3ef 8011 	mrs	r0, BASEPRI
   1a800:	f383 8811 	msr	BASEPRI, r3
   1a804:	f3bf 8f6f 	isb	sy
}
   1a808:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1a80c:	f7f3 b820 	b.w	d850 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1a810:	4282      	cmp	r2, r0
   1a812:	d002      	beq.n	1a81a <z_impl_k_yield+0x82>
   1a814:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a816:	2a00      	cmp	r2, #0
   1a818:	d1da      	bne.n	1a7d0 <z_impl_k_yield+0x38>
	node->prev = list->tail;
   1a81a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
   1a81c:	601d      	str	r5, [r3, #0]
	node->prev = list->tail;
   1a81e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1a820:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1a822:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1a824:	62e3      	str	r3, [r4, #44]	; 0x2c
   1a826:	e7dc      	b.n	1a7e2 <z_impl_k_yield+0x4a>
   1a828:	20021d60 	.word	0x20021d60
   1a82c:	200213dc 	.word	0x200213dc

0001a830 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
   1a830:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (ms == K_FOREVER) {
   1a832:	1c43      	adds	r3, r0, #1
{
   1a834:	4604      	mov	r4, r0
	if (ms == K_FOREVER) {
   1a836:	d105      	bne.n	1a844 <z_impl_k_sleep+0x14>
		k_thread_suspend(_current);
   1a838:	4b10      	ldr	r3, [pc, #64]	; (1a87c <z_impl_k_sleep+0x4c>)
   1a83a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1a83c:	f000 f8fc 	bl	1aa38 <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   1a840:	4620      	mov	r0, r4
   1a842:	bd38      	pop	{r3, r4, r5, pc}
   1a844:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1a848:	f240 30e7 	movw	r0, #999	; 0x3e7
   1a84c:	2100      	movs	r1, #0
   1a84e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a852:	fbe5 0104 	umlal	r0, r1, r5, r4
   1a856:	2300      	movs	r3, #0
   1a858:	f7f1 fcf0 	bl	c23c <__aeabi_uldivmod>
	if (ticks == 0) {
   1a85c:	4604      	mov	r4, r0
   1a85e:	b948      	cbnz	r0, 1a874 <z_impl_k_sleep+0x44>
	z_impl_k_yield();
   1a860:	f7ff ff9a 	bl	1a798 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
   1a864:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1a868:	fb84 0100 	smull	r0, r1, r4, r0
   1a86c:	0bc4      	lsrs	r4, r0, #15
   1a86e:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1a872:	e7e5      	b.n	1a840 <z_impl_k_sleep+0x10>
   1a874:	f7ff ff14 	bl	1a6a0 <z_tick_sleep.part.19>
   1a878:	4604      	mov	r4, r0
   1a87a:	e7f3      	b.n	1a864 <z_impl_k_sleep+0x34>
   1a87c:	20021d60 	.word	0x20021d60

0001a880 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   1a880:	4b01      	ldr	r3, [pc, #4]	; (1a888 <z_impl_k_current_get+0x8>)
   1a882:	6898      	ldr	r0, [r3, #8]
   1a884:	4770      	bx	lr
   1a886:	bf00      	nop
   1a888:	20021d60 	.word	0x20021d60

0001a88c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1a88c:	b570      	push	{r4, r5, r6, lr}
   1a88e:	4604      	mov	r4, r0
   1a890:	f04f 0320 	mov.w	r3, #32
   1a894:	f3ef 8611 	mrs	r6, BASEPRI
   1a898:	f383 8811 	msr	BASEPRI, r3
   1a89c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   1a8a0:	f003 f805 	bl	1d8ae <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   1a8a4:	4605      	mov	r5, r0
   1a8a6:	b170      	cbz	r0, 1a8c6 <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1a8a8:	7b43      	ldrb	r3, [r0, #13]
   1a8aa:	06db      	lsls	r3, r3, #27
   1a8ac:	d103      	bne.n	1a8b6 <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
   1a8ae:	6983      	ldr	r3, [r0, #24]
   1a8b0:	b90b      	cbnz	r3, 1a8b6 <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
   1a8b2:	f7ff fd2b 	bl	1a30c <z_add_thread_to_ready_q>
   1a8b6:	2300      	movs	r3, #0
   1a8b8:	66ab      	str	r3, [r5, #104]	; 0x68
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   1a8ba:	4631      	mov	r1, r6
}
   1a8bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   1a8c0:	4807      	ldr	r0, [pc, #28]	; (1a8e0 <z_impl_k_sem_give+0x54>)
   1a8c2:	f002 bf7e 	b.w	1d7c2 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1a8c6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1a8ca:	429a      	cmp	r2, r3
   1a8cc:	bf18      	it	ne
   1a8ce:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1a8d0:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1a8d2:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1a8d4:	f104 0010 	add.w	r0, r4, #16
   1a8d8:	f003 fa30 	bl	1dd3c <z_handle_obj_poll_events>
   1a8dc:	e7ed      	b.n	1a8ba <z_impl_k_sem_give+0x2e>
   1a8de:	bf00      	nop
   1a8e0:	2002207a 	.word	0x2002207a

0001a8e4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   1a8e4:	b410      	push	{r4}
   1a8e6:	4602      	mov	r2, r0
   1a8e8:	460b      	mov	r3, r1
   1a8ea:	f04f 0020 	mov.w	r0, #32
   1a8ee:	f3ef 8111 	mrs	r1, BASEPRI
   1a8f2:	f380 8811 	msr	BASEPRI, r0
   1a8f6:	f3bf 8f6f 	isb	sy
	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   1a8fa:	6894      	ldr	r4, [r2, #8]
   1a8fc:	b14c      	cbz	r4, 1a912 <z_impl_k_sem_take+0x2e>
		sem->count--;
   1a8fe:	3c01      	subs	r4, #1
   1a900:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
   1a902:	f381 8811 	msr	BASEPRI, r1
   1a906:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1a90a:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1a90c:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a910:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   1a912:	b933      	cbnz	r3, 1a922 <z_impl_k_sem_take+0x3e>
   1a914:	f381 8811 	msr	BASEPRI, r1
   1a918:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1a91c:	f06f 000f 	mvn.w	r0, #15
		goto out;
   1a920:	e7f4      	b.n	1a90c <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1a922:	4802      	ldr	r0, [pc, #8]	; (1a92c <z_impl_k_sem_take+0x48>)
}
   1a924:	f85d 4b04 	ldr.w	r4, [sp], #4
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1a928:	f7ff bea6 	b.w	1a678 <z_pend_curr>
   1a92c:	2002207a 	.word	0x2002207a

0001a930 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   1a930:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1a932:	4c08      	ldr	r4, [pc, #32]	; (1a954 <k_sys_work_q_init+0x24>)
   1a934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a938:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1a93c:	4906      	ldr	r1, [pc, #24]	; (1a958 <k_sys_work_q_init+0x28>)
   1a93e:	4620      	mov	r0, r4
   1a940:	f000 f8f4 	bl	1ab2c <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1a944:	4905      	ldr	r1, [pc, #20]	; (1a95c <k_sys_work_q_init+0x2c>)
   1a946:	f104 0010 	add.w	r0, r4, #16
   1a94a:	f003 f809 	bl	1d960 <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1a94e:	2000      	movs	r0, #0
   1a950:	bd10      	pop	{r4, pc}
   1a952:	bf00      	nop
   1a954:	20021da0 	.word	0x20021da0
   1a958:	20024a00 	.word	0x20024a00
   1a95c:	00020328 	.word	0x00020328

0001a960 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
   1a960:	b510      	push	{r4, lr}
	__asm__ volatile(
   1a962:	f04f 0220 	mov.w	r2, #32
   1a966:	f3ef 8411 	mrs	r4, BASEPRI
   1a96a:	f382 8811 	msr	BASEPRI, r2
   1a96e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
   1a972:	7b42      	ldrb	r2, [r0, #13]
   1a974:	0751      	lsls	r1, r2, #29
   1a976:	d404      	bmi.n	1a982 <z_impl_k_thread_start+0x22>
	__asm__ volatile(
   1a978:	f384 8811 	msr	BASEPRI, r4
   1a97c:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
   1a980:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1a982:	f022 0104 	bic.w	r1, r2, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1a986:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1a98a:	7341      	strb	r1, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1a98c:	d103      	bne.n	1a996 <z_impl_k_thread_start+0x36>
	if (z_is_thread_ready(thread)) {
   1a98e:	6983      	ldr	r3, [r0, #24]
   1a990:	b90b      	cbnz	r3, 1a996 <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
   1a992:	f7ff fcbb 	bl	1a30c <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   1a996:	4621      	mov	r1, r4
}
   1a998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   1a99c:	4801      	ldr	r0, [pc, #4]	; (1a9a4 <z_impl_k_thread_start+0x44>)
   1a99e:	f002 bf10 	b.w	1d7c2 <z_reschedule>
   1a9a2:	bf00      	nop
   1a9a4:	2002207a 	.word	0x2002207a

0001a9a8 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   1a9a8:	b530      	push	{r4, r5, lr}
   1a9aa:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a9ac:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   1a9ae:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a9b0:	9504      	str	r5, [sp, #16]
   1a9b2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1a9b4:	9503      	str	r5, [sp, #12]
   1a9b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1a9b8:	9502      	str	r5, [sp, #8]
   1a9ba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1a9bc:	9501      	str	r5, [sp, #4]
   1a9be:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1a9c0:	9500      	str	r5, [sp, #0]
   1a9c2:	f7f2 fffd 	bl	d9c0 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1a9c6:	4b03      	ldr	r3, [pc, #12]	; (1a9d4 <z_setup_new_thread+0x2c>)
   1a9c8:	689b      	ldr	r3, [r3, #8]
   1a9ca:	b103      	cbz	r3, 1a9ce <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   1a9cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1a9ce:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   1a9d0:	b007      	add	sp, #28
   1a9d2:	bd30      	pop	{r4, r5, pc}
   1a9d4:	20021d60 	.word	0x20021d60

0001a9d8 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   1a9d8:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a9da:	2600      	movs	r6, #0
{
   1a9dc:	b086      	sub	sp, #24
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a9de:	9605      	str	r6, [sp, #20]
   1a9e0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
{
   1a9e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a9e4:	9604      	str	r6, [sp, #16]
   1a9e6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
{
   1a9e8:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a9ea:	9603      	str	r6, [sp, #12]
   1a9ec:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1a9ee:	9602      	str	r6, [sp, #8]
   1a9f0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1a9f2:	9601      	str	r6, [sp, #4]
   1a9f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1a9f6:	9600      	str	r6, [sp, #0]
   1a9f8:	f7ff ffd6 	bl	1a9a8 <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
   1a9fc:	1c6b      	adds	r3, r5, #1
   1a9fe:	d003      	beq.n	1aa08 <z_impl_k_thread_create+0x30>
	if (delay == 0) {
   1aa00:	b92d      	cbnz	r5, 1aa0e <z_impl_k_thread_create+0x36>
	z_impl_k_thread_start(thread);
   1aa02:	4620      	mov	r0, r4
   1aa04:	f7ff ffac 	bl	1a960 <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
   1aa08:	4620      	mov	r0, r4
   1aa0a:	b006      	add	sp, #24
   1aa0c:	bd70      	pop	{r4, r5, r6, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
   1aa0e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1aa12:	f240 30e7 	movw	r0, #999	; 0x3e7
   1aa16:	2100      	movs	r1, #0
   1aa18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1aa1c:	2300      	movs	r3, #0
   1aa1e:	fbe6 0105 	umlal	r0, r1, r6, r5
   1aa22:	f7f1 fc0b 	bl	c23c <__aeabi_uldivmod>
   1aa26:	4903      	ldr	r1, [pc, #12]	; (1aa34 <z_impl_k_thread_create+0x5c>)
   1aa28:	1c42      	adds	r2, r0, #1
   1aa2a:	f104 0018 	add.w	r0, r4, #24
   1aa2e:	f000 f91f 	bl	1ac70 <z_add_timeout>
   1aa32:	e7e9      	b.n	1aa08 <z_impl_k_thread_create+0x30>
   1aa34:	0001d84d 	.word	0x0001d84d

0001aa38 <z_impl_k_thread_suspend>:
#endif /* CONFIG_MULTITHREADING */

extern void z_thread_single_suspend(struct k_thread *thread);

void z_impl_k_thread_suspend(struct k_thread *thread)
{
   1aa38:	b538      	push	{r3, r4, r5, lr}
   1aa3a:	4605      	mov	r5, r0
	__asm__ volatile(
   1aa3c:	f04f 0320 	mov.w	r3, #32
   1aa40:	f3ef 8411 	mrs	r4, BASEPRI
   1aa44:	f383 8811 	msr	BASEPRI, r3
   1aa48:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_suspend(thread);
   1aa4c:	f7ff fd0e 	bl	1a46c <z_thread_single_suspend>

	if (thread == _current) {
   1aa50:	4b07      	ldr	r3, [pc, #28]	; (1aa70 <z_impl_k_thread_suspend+0x38>)
   1aa52:	689b      	ldr	r3, [r3, #8]
   1aa54:	42ab      	cmp	r3, r5
   1aa56:	d105      	bne.n	1aa64 <z_impl_k_thread_suspend+0x2c>
		z_reschedule(&lock, key);
   1aa58:	4621      	mov	r1, r4
	} else {
		k_spin_unlock(&lock, key);
	}
}
   1aa5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   1aa5e:	4805      	ldr	r0, [pc, #20]	; (1aa74 <z_impl_k_thread_suspend+0x3c>)
   1aa60:	f002 beaf 	b.w	1d7c2 <z_reschedule>
	__asm__ volatile(
   1aa64:	f384 8811 	msr	BASEPRI, r4
   1aa68:	f3bf 8f6f 	isb	sy
}
   1aa6c:	bd38      	pop	{r3, r4, r5, pc}
   1aa6e:	bf00      	nop
   1aa70:	20021d60 	.word	0x20021d60
   1aa74:	2002207a 	.word	0x2002207a

0001aa78 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   1aa78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1aa7c:	4e28      	ldr	r6, [pc, #160]	; (1ab20 <z_init_static_threads+0xa8>)
   1aa7e:	4d29      	ldr	r5, [pc, #164]	; (1ab24 <z_init_static_threads+0xac>)
   1aa80:	46b0      	mov	r8, r6
{
   1aa82:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   1aa84:	42b5      	cmp	r5, r6
   1aa86:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1aa8a:	d310      	bcc.n	1aaae <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   1aa8c:	f7ff fbda 	bl	1a244 <k_sched_lock>
   1aa90:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1aa94:	f240 36e7 	movw	r6, #999	; 0x3e7
   1aa98:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   1aa9a:	4c22      	ldr	r4, [pc, #136]	; (1ab24 <z_init_static_threads+0xac>)
   1aa9c:	f8df a088 	ldr.w	sl, [pc, #136]	; 1ab28 <z_init_static_threads+0xb0>
   1aaa0:	4544      	cmp	r4, r8
   1aaa2:	d321      	bcc.n	1aae8 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
   1aaa4:	b007      	add	sp, #28
   1aaa6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   1aaaa:	f7ff bc13 	b.w	1a2d4 <k_sched_unlock>
		z_setup_new_thread(
   1aaae:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1aab2:	9305      	str	r3, [sp, #20]
   1aab4:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1aab8:	9304      	str	r3, [sp, #16]
   1aaba:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1aabe:	9303      	str	r3, [sp, #12]
   1aac0:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1aac4:	9302      	str	r3, [sp, #8]
   1aac6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1aaca:	9301      	str	r3, [sp, #4]
   1aacc:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1aad0:	9300      	str	r3, [sp, #0]
   1aad2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1aad6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1aada:	f7ff ff65 	bl	1a9a8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1aade:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1aae2:	64dd      	str	r5, [r3, #76]	; 0x4c
   1aae4:	4625      	mov	r5, r4
   1aae6:	e7cd      	b.n	1aa84 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
   1aae8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1aaea:	1c4b      	adds	r3, r1, #1
   1aaec:	d004      	beq.n	1aaf8 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
   1aaee:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
   1aaf0:	b921      	cbnz	r1, 1aafc <z_init_static_threads+0x84>
   1aaf2:	4628      	mov	r0, r5
   1aaf4:	f7ff ff34 	bl	1a960 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1aaf8:	3430      	adds	r4, #48	; 0x30
   1aafa:	e7d1      	b.n	1aaa0 <z_init_static_threads+0x28>
   1aafc:	46b3      	mov	fp, r6
   1aafe:	46bc      	mov	ip, r7
   1ab00:	fbe9 bc01 	umlal	fp, ip, r9, r1
   1ab04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ab08:	2300      	movs	r3, #0
   1ab0a:	4658      	mov	r0, fp
   1ab0c:	4661      	mov	r1, ip
   1ab0e:	f7f1 fb95 	bl	c23c <__aeabi_uldivmod>
   1ab12:	4651      	mov	r1, sl
   1ab14:	1c42      	adds	r2, r0, #1
   1ab16:	f105 0018 	add.w	r0, r5, #24
   1ab1a:	f000 f8a9 	bl	1ac70 <z_add_timeout>
   1ab1e:	e7eb      	b.n	1aaf8 <z_init_static_threads+0x80>
   1ab20:	200268fc 	.word	0x200268fc
   1ab24:	200268fc 	.word	0x200268fc
   1ab28:	0001d84d 	.word	0x0001d84d

0001ab2c <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1ab2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab30:	4605      	mov	r5, r0
   1ab32:	b086      	sub	sp, #24
   1ab34:	460e      	mov	r6, r1
   1ab36:	4617      	mov	r7, r2
   1ab38:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   1ab3a:	f002 fd95 	bl	1d668 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1ab3e:	f105 0410 	add.w	r4, r5, #16
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1ab42:	2000      	movs	r0, #0
   1ab44:	4b09      	ldr	r3, [pc, #36]	; (1ab6c <k_work_q_start+0x40>)
   1ab46:	e9cd 0004 	strd	r0, r0, [sp, #16]
   1ab4a:	e9cd 0802 	strd	r0, r8, [sp, #8]
   1ab4e:	e9cd 5000 	strd	r5, r0, [sp]
   1ab52:	463a      	mov	r2, r7
   1ab54:	4631      	mov	r1, r6
   1ab56:	4620      	mov	r0, r4
   1ab58:	f7ff ff3e 	bl	1a9d8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1ab5c:	4620      	mov	r0, r4
   1ab5e:	4904      	ldr	r1, [pc, #16]	; (1ab70 <k_work_q_start+0x44>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1ab60:	b006      	add	sp, #24
   1ab62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ab66:	f002 befb 	b.w	1d960 <z_impl_k_thread_name_set>
   1ab6a:	bf00      	nop
   1ab6c:	0001b5f1 	.word	0x0001b5f1
   1ab70:	0001fa75 	.word	0x0001fa75

0001ab74 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   s32_t delay)
{
   1ab74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab78:	4606      	mov	r6, r0
   1ab7a:	460d      	mov	r5, r1
   1ab7c:	4617      	mov	r7, r2
	__asm__ volatile(
   1ab7e:	f04f 0320 	mov.w	r3, #32
   1ab82:	f3ef 8811 	mrs	r8, BASEPRI
   1ab86:	f383 8811 	msr	BASEPRI, r3
   1ab8a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   1ab8e:	69cc      	ldr	r4, [r1, #28]
   1ab90:	b15c      	cbz	r4, 1abaa <k_delayed_work_submit_to_queue+0x36>
   1ab92:	4284      	cmp	r4, r0
   1ab94:	d12c      	bne.n	1abf0 <k_delayed_work_submit_to_queue+0x7c>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   1ab96:	4628      	mov	r0, r5
   1ab98:	f002 ff0f 	bl	1d9ba <work_cancel>
		if (err < 0) {
   1ab9c:	1e04      	subs	r4, r0, #0
   1ab9e:	da06      	bge.n	1abae <k_delayed_work_submit_to_queue+0x3a>
	__asm__ volatile(
   1aba0:	f388 8811 	msr	BASEPRI, r8
   1aba4:	f3bf 8f6f 	isb	sy
	z_add_timeout(&work->timeout, work_timeout,
		     _TICK_ALIGN + k_ms_to_ticks_ceil32(delay));

done:
	k_spin_unlock(&lock, key);
	return err;
   1aba8:	e00c      	b.n	1abc4 <k_delayed_work_submit_to_queue+0x50>
	if (work->work_q == work_q) {
   1abaa:	2800      	cmp	r0, #0
   1abac:	d0f3      	beq.n	1ab96 <k_delayed_work_submit_to_queue+0x22>
	work->work_q = work_q;
   1abae:	61ee      	str	r6, [r5, #28]
	if (delay == 0) {
   1abb0:	b95f      	cbnz	r7, 1abca <k_delayed_work_submit_to_queue+0x56>
   1abb2:	f388 8811 	msr	BASEPRI, r8
   1abb6:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1abba:	4629      	mov	r1, r5
   1abbc:	4630      	mov	r0, r6
   1abbe:	f002 fee3 	bl	1d988 <k_work_submit_to_queue>
		return 0;
   1abc2:	463c      	mov	r4, r7
}
   1abc4:	4620      	mov	r0, r4
   1abc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1abca:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1abce:	f240 30e7 	movw	r0, #999	; 0x3e7
   1abd2:	2100      	movs	r1, #0
   1abd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1abd8:	2300      	movs	r3, #0
   1abda:	fbe6 0107 	umlal	r0, r1, r6, r7
   1abde:	f7f1 fb2d 	bl	c23c <__aeabi_uldivmod>
	z_add_timeout(&work->timeout, work_timeout,
   1abe2:	4905      	ldr	r1, [pc, #20]	; (1abf8 <k_delayed_work_submit_to_queue+0x84>)
   1abe4:	1c42      	adds	r2, r0, #1
   1abe6:	f105 000c 	add.w	r0, r5, #12
   1abea:	f000 f841 	bl	1ac70 <z_add_timeout>
   1abee:	e7d7      	b.n	1aba0 <k_delayed_work_submit_to_queue+0x2c>
		err = -EADDRINUSE;
   1abf0:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   1abf4:	e7d4      	b.n	1aba0 <k_delayed_work_submit_to_queue+0x2c>
   1abf6:	bf00      	nop
   1abf8:	0001d9b1 	.word	0x0001d9b1

0001abfc <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   1abfc:	4b03      	ldr	r3, [pc, #12]	; (1ac0c <elapsed+0x10>)
   1abfe:	681b      	ldr	r3, [r3, #0]
   1ac00:	b90b      	cbnz	r3, 1ac06 <elapsed+0xa>
   1ac02:	f7f2 bde3 	b.w	d7cc <z_clock_elapsed>
}
   1ac06:	2000      	movs	r0, #0
   1ac08:	4770      	bx	lr
   1ac0a:	bf00      	nop
   1ac0c:	20021e60 	.word	0x20021e60

0001ac10 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ac10:	6803      	ldr	r3, [r0, #0]
   1ac12:	b140      	cbz	r0, 1ac26 <remove_timeout+0x16>
   1ac14:	4a07      	ldr	r2, [pc, #28]	; (1ac34 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   1ac16:	6852      	ldr	r2, [r2, #4]
   1ac18:	4290      	cmp	r0, r2
   1ac1a:	d004      	beq.n	1ac26 <remove_timeout+0x16>
	if (next(t) != NULL) {
   1ac1c:	b11b      	cbz	r3, 1ac26 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   1ac1e:	689a      	ldr	r2, [r3, #8]
   1ac20:	6881      	ldr	r1, [r0, #8]
   1ac22:	440a      	add	r2, r1
   1ac24:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   1ac26:	6842      	ldr	r2, [r0, #4]
   1ac28:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1ac2a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1ac2c:	2300      	movs	r3, #0
	node->prev = NULL;
   1ac2e:	e9c0 3300 	strd	r3, r3, [r0]
}
   1ac32:	4770      	bx	lr
   1ac34:	2002682c 	.word	0x2002682c

0001ac38 <next_timeout>:
	return list->head == list;
   1ac38:	4b0b      	ldr	r3, [pc, #44]	; (1ac68 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   1ac3a:	b510      	push	{r4, lr}
   1ac3c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ac3e:	429c      	cmp	r4, r3
   1ac40:	bf08      	it	eq
   1ac42:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   1ac44:	f7ff ffda 	bl	1abfc <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1ac48:	b154      	cbz	r4, 1ac60 <next_timeout+0x28>
   1ac4a:	68a3      	ldr	r3, [r4, #8]
   1ac4c:	1a18      	subs	r0, r3, r0
   1ac4e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1ac52:	4b06      	ldr	r3, [pc, #24]	; (1ac6c <next_timeout+0x34>)
   1ac54:	691b      	ldr	r3, [r3, #16]
   1ac56:	b113      	cbz	r3, 1ac5e <next_timeout+0x26>
   1ac58:	4298      	cmp	r0, r3
   1ac5a:	bfa8      	it	ge
   1ac5c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1ac5e:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1ac60:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1ac64:	e7f5      	b.n	1ac52 <next_timeout+0x1a>
   1ac66:	bf00      	nop
   1ac68:	2002682c 	.word	0x2002682c
   1ac6c:	20021d60 	.word	0x20021d60

0001ac70 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
   1ac70:	b570      	push	{r4, r5, r6, lr}
   1ac72:	4604      	mov	r4, r0
   1ac74:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1ac76:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
   1ac78:	f04f 0320 	mov.w	r3, #32
   1ac7c:	f3ef 8511 	mrs	r5, BASEPRI
   1ac80:	f383 8811 	msr	BASEPRI, r3
   1ac84:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1ac88:	f7ff ffb8 	bl	1abfc <elapsed>
   1ac8c:	2e01      	cmp	r6, #1
   1ac8e:	bfac      	ite	ge
   1ac90:	1980      	addge	r0, r0, r6
   1ac92:	3001      	addlt	r0, #1
	return list->head == list;
   1ac94:	4b16      	ldr	r3, [pc, #88]	; (1acf0 <z_add_timeout+0x80>)
   1ac96:	60a0      	str	r0, [r4, #8]
   1ac98:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ac9a:	429a      	cmp	r2, r3
   1ac9c:	d001      	beq.n	1aca2 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ac9e:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1aca0:	b932      	cbnz	r2, 1acb0 <z_add_timeout+0x40>
	node->prev = list->tail;
   1aca2:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1aca4:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   1aca6:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   1aca8:	685a      	ldr	r2, [r3, #4]
   1acaa:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1acac:	605c      	str	r4, [r3, #4]
   1acae:	e00a      	b.n	1acc6 <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   1acb0:	6890      	ldr	r0, [r2, #8]
   1acb2:	68a1      	ldr	r1, [r4, #8]
   1acb4:	4288      	cmp	r0, r1
   1acb6:	dd15      	ble.n	1ace4 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
   1acb8:	1a41      	subs	r1, r0, r1
   1acba:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   1acbc:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1acbe:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
   1acc2:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1acc4:	6054      	str	r4, [r2, #4]
	return list->head == list;
   1acc6:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1acc8:	429a      	cmp	r2, r3
   1acca:	d006      	beq.n	1acda <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1accc:	4294      	cmp	r4, r2
   1acce:	d104      	bne.n	1acda <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
   1acd0:	f7ff ffb2 	bl	1ac38 <next_timeout>
   1acd4:	2100      	movs	r1, #0
   1acd6:	f7f2 fd23 	bl	d720 <z_clock_set_timeout>
	__asm__ volatile(
   1acda:	f385 8811 	msr	BASEPRI, r5
   1acde:	f3bf 8f6f 	isb	sy
		}
	}
}
   1ace2:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
   1ace4:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   1ace6:	4296      	cmp	r6, r2
   1ace8:	60a1      	str	r1, [r4, #8]
   1acea:	d0da      	beq.n	1aca2 <z_add_timeout+0x32>
   1acec:	6812      	ldr	r2, [r2, #0]
   1acee:	e7d7      	b.n	1aca0 <z_add_timeout+0x30>
   1acf0:	2002682c 	.word	0x2002682c

0001acf4 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   1acf4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   1acf8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1acfa:	f7ff fb81 	bl	1a400 <z_time_slice>
	__asm__ volatile(
   1acfe:	f04f 0320 	mov.w	r3, #32
   1ad02:	f3ef 8511 	mrs	r5, BASEPRI
   1ad06:	f383 8811 	msr	BASEPRI, r3
   1ad0a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1ad0e:	4f21      	ldr	r7, [pc, #132]	; (1ad94 <z_clock_announce+0xa0>)
   1ad10:	4e21      	ldr	r6, [pc, #132]	; (1ad98 <z_clock_announce+0xa4>)
   1ad12:	46b8      	mov	r8, r7
	return list->head == list;
   1ad14:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1ad9c <z_clock_announce+0xa8>
   1ad18:	6034      	str	r4, [r6, #0]
   1ad1a:	f8d9 4000 	ldr.w	r4, [r9]
   1ad1e:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ad20:	454c      	cmp	r4, r9
   1ad22:	e9d7 bc00 	ldrd	fp, ip, [r7]
   1ad26:	d005      	beq.n	1ad34 <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1ad28:	b124      	cbz	r4, 1ad34 <z_clock_announce+0x40>
   1ad2a:	68a3      	ldr	r3, [r4, #8]
   1ad2c:	4293      	cmp	r3, r2
   1ad2e:	dd14      	ble.n	1ad5a <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1ad30:	1a9b      	subs	r3, r3, r2
   1ad32:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   1ad34:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1ad36:	eb1b 0002 	adds.w	r0, fp, r2
   1ad3a:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   1ad3e:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
   1ad42:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   1ad44:	f7ff ff78 	bl	1ac38 <next_timeout>
   1ad48:	4621      	mov	r1, r4
   1ad4a:	f7f2 fce9 	bl	d720 <z_clock_set_timeout>
	__asm__ volatile(
   1ad4e:	f385 8811 	msr	BASEPRI, r5
   1ad52:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1ad56:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   1ad5a:	eb1b 0003 	adds.w	r0, fp, r3
   1ad5e:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   1ad62:	1ad3      	subs	r3, r2, r3
   1ad64:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1ad66:	2300      	movs	r3, #0
		curr_tick += dt;
   1ad68:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   1ad6c:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   1ad6e:	4620      	mov	r0, r4
   1ad70:	f7ff ff4e 	bl	1ac10 <remove_timeout>
   1ad74:	f385 8811 	msr	BASEPRI, r5
   1ad78:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1ad7c:	68e3      	ldr	r3, [r4, #12]
   1ad7e:	4798      	blx	r3
	__asm__ volatile(
   1ad80:	f04f 0320 	mov.w	r3, #32
   1ad84:	f3ef 8511 	mrs	r5, BASEPRI
   1ad88:	f383 8811 	msr	BASEPRI, r3
   1ad8c:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1ad90:	e7c3      	b.n	1ad1a <z_clock_announce+0x26>
   1ad92:	bf00      	nop
   1ad94:	20020878 	.word	0x20020878
   1ad98:	20021e60 	.word	0x20021e60
   1ad9c:	2002682c 	.word	0x2002682c

0001ada0 <z_tick_get>:

s64_t z_tick_get(void)
{
   1ada0:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
   1ada4:	f04f 0320 	mov.w	r3, #32
   1ada8:	f3ef 8411 	mrs	r4, BASEPRI
   1adac:	f383 8811 	msr	BASEPRI, r3
   1adb0:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1adb4:	f7f2 fd0a 	bl	d7cc <z_clock_elapsed>
   1adb8:	4b07      	ldr	r3, [pc, #28]	; (1add8 <z_tick_get+0x38>)
   1adba:	e9d3 2300 	ldrd	r2, r3, [r3]
   1adbe:	eb12 0b00 	adds.w	fp, r2, r0
   1adc2:	f143 0c00 	adc.w	ip, r3, #0
   1adc6:	4658      	mov	r0, fp
   1adc8:	4661      	mov	r1, ip
	__asm__ volatile(
   1adca:	f384 8811 	msr	BASEPRI, r4
   1adce:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1add2:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   1add6:	bf00      	nop
   1add8:	20020878 	.word	0x20020878

0001addc <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   1addc:	6a02      	ldr	r2, [r0, #32]
{
   1adde:	b538      	push	{r3, r4, r5, lr}
	if (timer->period > 0) {
   1ade0:	2a00      	cmp	r2, #0
{
   1ade2:	4604      	mov	r4, r0
	if (timer->period > 0) {
   1ade4:	dd02      	ble.n	1adec <z_timer_expiration_handler+0x10>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1ade6:	490e      	ldr	r1, [pc, #56]	; (1ae20 <z_timer_expiration_handler+0x44>)
   1ade8:	f7ff ff42 	bl	1ac70 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1adec:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1adee:	3301      	adds	r3, #1
   1adf0:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1adf2:	69a3      	ldr	r3, [r4, #24]
   1adf4:	b10b      	cbz	r3, 1adfa <z_timer_expiration_handler+0x1e>
		timer->expiry_fn(timer);
   1adf6:	4620      	mov	r0, r4
   1adf8:	4798      	blx	r3
	return list->head == list;
   1adfa:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1adfe:	42a5      	cmp	r5, r4
   1ae00:	d00d      	beq.n	1ae1e <z_timer_expiration_handler+0x42>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1ae02:	b165      	cbz	r5, 1ae1e <z_timer_expiration_handler+0x42>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1ae04:	4628      	mov	r0, r5
   1ae06:	f002 fcc3 	bl	1d790 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1ae0a:	7b6b      	ldrb	r3, [r5, #13]
   1ae0c:	06db      	lsls	r3, r3, #27
   1ae0e:	d104      	bne.n	1ae1a <z_timer_expiration_handler+0x3e>
	if (z_is_thread_ready(thread)) {
   1ae10:	69ab      	ldr	r3, [r5, #24]
   1ae12:	b913      	cbnz	r3, 1ae1a <z_timer_expiration_handler+0x3e>
		z_add_thread_to_ready_q(thread);
   1ae14:	4628      	mov	r0, r5
   1ae16:	f7ff fa79 	bl	1a30c <z_add_thread_to_ready_q>
   1ae1a:	2300      	movs	r3, #0
   1ae1c:	66ab      	str	r3, [r5, #104]	; 0x68

	z_ready_thread(thread);

	arch_thread_return_value_set(thread, 0);
}
   1ae1e:	bd38      	pop	{r3, r4, r5, pc}
   1ae20:	0001addd 	.word	0x0001addd

0001ae24 <z_impl_k_timer_start>:
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   1ae24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ae28:	f240 36e7 	movw	r6, #999	; 0x3e7
   1ae2c:	2700      	movs	r7, #0
   1ae2e:	4604      	mov	r4, r0
   1ae30:	4688      	mov	r8, r1
   1ae32:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1ae36:	4630      	mov	r0, r6
   1ae38:	4639      	mov	r1, r7
   1ae3a:	2300      	movs	r3, #0
   1ae3c:	fbe5 0102 	umlal	r0, r1, r5, r2
   1ae40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ae44:	f7f1 f9fa 	bl	c23c <__aeabi_uldivmod>
   1ae48:	4639      	mov	r1, r7
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = k_ms_to_ticks_ceil32(period);
   1ae4a:	9000      	str	r0, [sp, #0]
   1ae4c:	4630      	mov	r0, r6
   1ae4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ae52:	2300      	movs	r3, #0
   1ae54:	fbe5 0108 	umlal	r0, r1, r5, r8
   1ae58:	f7f1 f9f0 	bl	c23c <__aeabi_uldivmod>
	duration_in_ticks = k_ms_to_ticks_ceil32(duration);
   1ae5c:	9001      	str	r0, [sp, #4]

	(void)z_abort_timeout(&timer->timeout);
   1ae5e:	4620      	mov	r0, r4
   1ae60:	f002 fdf5 	bl	1da4e <z_abort_timeout>
	timer->period = period_in_ticks;
   1ae64:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0U;
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1ae66:	4620      	mov	r0, r4
	timer->period = period_in_ticks;
   1ae68:	6223      	str	r3, [r4, #32]
	timer->status = 0U;
   1ae6a:	2300      	movs	r3, #0
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1ae6c:	9a01      	ldr	r2, [sp, #4]
   1ae6e:	4903      	ldr	r1, [pc, #12]	; (1ae7c <z_impl_k_timer_start+0x58>)
	timer->status = 0U;
   1ae70:	6263      	str	r3, [r4, #36]	; 0x24
		     duration_in_ticks);
}
   1ae72:	b002      	add	sp, #8
   1ae74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1ae78:	f7ff befa 	b.w	1ac70 <z_add_timeout>
   1ae7c:	0001addd 	.word	0x0001addd

0001ae80 <k_poll_event_init>:
 */
static struct k_spinlock lock;

void k_poll_event_init(struct k_poll_event *event, u32_t type,
		       int mode, void *obj)
{
   1ae80:	b510      	push	{r4, lr}
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
	__ASSERT(obj != NULL, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
   1ae82:	7b44      	ldrb	r4, [r0, #13]
   1ae84:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
	event->mode = mode;
   1ae88:	7b81      	ldrb	r1, [r0, #14]
	event->type = type;
   1ae8a:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
   1ae8c:	f362 0141 	bfi	r1, r2, #1, #1
	event->poller = NULL;
   1ae90:	2200      	movs	r2, #0
	event->mode = mode;
   1ae92:	7381      	strb	r1, [r0, #14]
	event->state = K_POLL_STATE_NOT_READY;
   1ae94:	68c1      	ldr	r1, [r0, #12]
	event->poller = NULL;
   1ae96:	6082      	str	r2, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   1ae98:	4a02      	ldr	r2, [pc, #8]	; (1aea4 <k_poll_event_init+0x24>)
   1ae9a:	400a      	ands	r2, r1
	event->unused = 0U;
	event->obj = obj;
   1ae9c:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   1aea0:	bd10      	pop	{r4, pc}
   1aea2:	bf00      	nop
   1aea4:	00020fff 	.word	0x00020fff

0001aea8 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   1aea8:	2301      	movs	r3, #1
{
   1aeaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aeae:	b086      	sub	sp, #24
	struct _poller poller = { .is_polling = true,
   1aeb0:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   1aeb4:	4b23      	ldr	r3, [pc, #140]	; (1af44 <z_impl_k_poll+0x9c>)

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, &poller,
   1aeb6:	4690      	mov	r8, r2
	struct _poller poller = { .is_polling = true,
   1aeb8:	689b      	ldr	r3, [r3, #8]
{
   1aeba:	4606      	mov	r6, r0
	struct _poller poller = { .is_polling = true,
   1aebc:	9304      	str	r3, [sp, #16]
   1aebe:	4b22      	ldr	r3, [pc, #136]	; (1af48 <z_impl_k_poll+0xa0>)
   1aec0:	9305      	str	r3, [sp, #20]
	events_registered = register_events(events, num_events, &poller,
   1aec2:	fab2 f382 	clz	r3, r2
   1aec6:	aa03      	add	r2, sp, #12
   1aec8:	095b      	lsrs	r3, r3, #5
   1aeca:	f002 fedd 	bl	1dc88 <register_events>
   1aece:	4607      	mov	r7, r0
	__asm__ volatile(
   1aed0:	f04f 0320 	mov.w	r3, #32
   1aed4:	f3ef 8511 	mrs	r5, BASEPRI
   1aed8:	f383 8811 	msr	BASEPRI, r3
   1aedc:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   1aee0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1aee4:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   1aee8:	b94b      	cbnz	r3, 1aefe <z_impl_k_poll+0x56>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   1aeea:	462a      	mov	r2, r5
   1aeec:	4639      	mov	r1, r7
   1aeee:	4630      	mov	r0, r6
   1aef0:	f002 fe32 	bl	1db58 <clear_event_registrations>
	__asm__ volatile(
   1aef4:	f385 8811 	msr	BASEPRI, r5
   1aef8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return swap_rc;
   1aefc:	e00b      	b.n	1af16 <z_impl_k_poll+0x6e>
	poller.is_polling = false;
   1aefe:	2300      	movs	r3, #0
   1af00:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   1af04:	f1b8 0f00 	cmp.w	r8, #0
   1af08:	d109      	bne.n	1af1e <z_impl_k_poll+0x76>
   1af0a:	f385 8811 	msr	BASEPRI, r5
   1af0e:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1af12:	f06f 040a 	mvn.w	r4, #10
}
   1af16:	4620      	mov	r0, r4
   1af18:	b006      	add	sp, #24
   1af1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1af1e:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1af20:	4643      	mov	r3, r8
   1af22:	4629      	mov	r1, r5
   1af24:	4809      	ldr	r0, [pc, #36]	; (1af4c <z_impl_k_poll+0xa4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1af26:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1af2a:	f7ff fba5 	bl	1a678 <z_pend_curr>
   1af2e:	4604      	mov	r4, r0
	__asm__ volatile(
   1af30:	f04f 0320 	mov.w	r3, #32
   1af34:	f3ef 8511 	mrs	r5, BASEPRI
   1af38:	f383 8811 	msr	BASEPRI, r3
   1af3c:	f3bf 8f6f 	isb	sy
   1af40:	e7d3      	b.n	1aeea <z_impl_k_poll+0x42>
   1af42:	bf00      	nop
   1af44:	20021d60 	.word	0x20021d60
   1af48:	0001dbe9 	.word	0x0001dbe9
   1af4c:	2002207a 	.word	0x2002207a

0001af50 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
   1af50:	b570      	push	{r4, r5, r6, lr}
   1af52:	250c      	movs	r5, #12
   1af54:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   1af56:	f990 000b 	ldrsb.w	r0, [r0, #11]
   1af5a:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
   1af5c:	4288      	cmp	r0, r1

	*word = &bitarray[bn / 32];
   1af5e:	4610      	mov	r0, r2
   1af60:	eb06 0405 	add.w	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
   1af64:	bfb8      	it	lt
   1af66:	5974      	ldrlt	r4, [r6, r5]
	*word = &bitarray[bn / 32];
   1af68:	2a00      	cmp	r2, #0
   1af6a:	bfb8      	it	lt
   1af6c:	f102 001f 	addlt.w	r0, r2, #31
   1af70:	1140      	asrs	r0, r0, #5
   1af72:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   1af76:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
   1af78:	f002 001f 	and.w	r0, r2, #31
   1af7c:	bd70      	pop	{r4, r5, r6, pc}

0001af7e <pool_irq_lock.isra.2.part.3>:
   1af7e:	f04f 0320 	mov.w	r3, #32
   1af82:	f3ef 8011 	mrs	r0, BASEPRI
   1af86:	f383 8811 	msr	BASEPRI, r3
   1af8a:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
		return irq_lock();
	} else {
		return 0;
	}
}
   1af8e:	4770      	bx	lr

0001af90 <pool_irq_unlock.isra.4>:

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1af90:	07c3      	lsls	r3, r0, #31
   1af92:	d503      	bpl.n	1af9c <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   1af94:	f381 8811 	msr	BASEPRI, r1
   1af98:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
   1af9c:	4770      	bx	lr

0001af9e <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
   1af9e:	23ff      	movs	r3, #255	; 0xff
{
   1afa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1afa4:	6846      	ldr	r6, [r0, #4]
	p->max_inline_level = -1;
   1afa6:	72c3      	strb	r3, [r0, #11]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1afa8:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
   1afaa:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
   1afac:	f04f 090c 	mov.w	r9, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1afb0:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1afb2:	6801      	ldr	r1, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1afb4:	fb06 fc07 	mul.w	ip, r6, r7
	for (i = 0; i < p->n_levels; i++) {
   1afb8:	f890 800a 	ldrb.w	r8, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1afbc:	4461      	add	r1, ip
	for (i = 0; i < p->n_levels; i++) {
   1afbe:	4598      	cmp	r8, r3
   1afc0:	dc05      	bgt.n	1afce <z_sys_mem_pool_base_init+0x30>
   1afc2:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   1afc4:	4619      	mov	r1, r3
   1afc6:	428f      	cmp	r7, r1
   1afc8:	dc20      	bgt.n	1b00c <z_sys_mem_pool_base_init+0x6e>
}
   1afca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   1afce:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
   1afd2:	fb09 fe03 	mul.w	lr, r9, r3
   1afd6:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   1afda:	2d20      	cmp	r5, #32
		sys_dlist_init(&p->levels[i].free_list);
   1afdc:	eb0a 040e 	add.w	r4, sl, lr
   1afe0:	f104 0b04 	add.w	fp, r4, #4
	list->tail = (sys_dnode_t *)list;
   1afe4:	e9c4 bb01 	strd	fp, fp, [r4, #4]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   1afe8:	d805      	bhi.n	1aff6 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   1afea:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
   1afec:	0892      	lsrs	r2, r2, #2
   1afee:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
   1aff2:	3301      	adds	r3, #1
   1aff4:	e7e3      	b.n	1afbe <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
   1aff6:	f115 041f 	adds.w	r4, r5, #31
   1affa:	bf48      	it	mi
   1affc:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
   1b000:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
   1b002:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
   1b006:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   1b00a:	e7ef      	b.n	1afec <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
   1b00c:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   1b00e:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   1b010:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
   1b014:	18ec      	adds	r4, r5, r3
	node->next = list;
   1b016:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
   1b01a:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   1b01c:	3101      	adds	r1, #1
   1b01e:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
   1b020:	6895      	ldr	r5, [r2, #8]
   1b022:	4433      	add	r3, r6
   1b024:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1b026:	6094      	str	r4, [r2, #8]
   1b028:	e7cd      	b.n	1afc6 <z_sys_mem_pool_base_init+0x28>

0001b02a <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
   1b02a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b02e:	b087      	sub	sp, #28
	int i, from_l, alloc_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1b030:	7a84      	ldrb	r4, [r0, #10]
{
   1b032:	af00      	add	r7, sp, #0
   1b034:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1b038:	00a3      	lsls	r3, r4, #2
   1b03a:	3307      	adds	r3, #7
   1b03c:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1b040:	ebad 0d03 	sub.w	sp, sp, r3
   1b044:	46ea      	mov	sl, sp
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = p->max_sz;
   1b046:	4653      	mov	r3, sl
   1b048:	6842      	ldr	r2, [r0, #4]
{
   1b04a:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   1b04c:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   1b050:	2200      	movs	r2, #0
   1b052:	4294      	cmp	r4, r2
   1b054:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   1b058:	dd09      	ble.n	1b06e <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   1b05a:	b122      	cbz	r2, 1b066 <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1b05c:	6818      	ldr	r0, [r3, #0]
   1b05e:	0880      	lsrs	r0, r0, #2
   1b060:	f020 0003 	bic.w	r0, r0, #3
   1b064:	6058      	str	r0, [r3, #4]
		}

		if (lsizes[i] < size) {
   1b066:	f853 0f04 	ldr.w	r0, [r3, #4]!
   1b06a:	4288      	cmp	r0, r1
   1b06c:	d208      	bcs.n	1b080 <z_sys_mem_pool_block_alloc+0x56>
		}

		alloc_l = i;
	}

	if (alloc_l < 0) {
   1b06e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   1b072:	d107      	bne.n	1b084 <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   1b074:	2300      	movs	r3, #0
   1b076:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1b078:	6013      	str	r3, [r2, #0]
	pool_irq_unlock(p, key);

	*data_p = data;

	if (data == NULL) {
		return -ENOMEM;
   1b07a:	f06f 000b 	mvn.w	r0, #11
   1b07e:	e02c      	b.n	1b0da <z_sys_mem_pool_block_alloc+0xb0>
	for (i = 0; i < p->n_levels; i++) {
   1b080:	3201      	adds	r2, #1
   1b082:	e7e6      	b.n	1b052 <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1b084:	7c28      	ldrb	r0, [r5, #16]
   1b086:	f010 0001 	ands.w	r0, r0, #1
   1b08a:	d001      	beq.n	1b090 <z_sys_mem_pool_block_alloc+0x66>
   1b08c:	f7ff ff77 	bl	1af7e <pool_irq_lock.isra.2.part.3>
   1b090:	230c      	movs	r3, #12
	key = pool_irq_lock(p);
   1b092:	4680      	mov	r8, r0
	block = sys_dlist_get(&p->levels[l].free_list);
   1b094:	464e      	mov	r6, r9
   1b096:	68ea      	ldr	r2, [r5, #12]
   1b098:	fb03 2309 	mla	r3, r3, r9, r2
	return list->head == list;
   1b09c:	461a      	mov	r2, r3
   1b09e:	f852 4f04 	ldr.w	r4, [r2, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1b0a2:	4294      	cmp	r4, r2
   1b0a4:	d11d      	bne.n	1b0e2 <z_sys_mem_pool_block_alloc+0xb8>
	for (i = alloc_l; i >= 0; i--) {
   1b0a6:	3e01      	subs	r6, #1
   1b0a8:	1c72      	adds	r2, r6, #1
   1b0aa:	f1a3 030c 	sub.w	r3, r3, #12
   1b0ae:	d1f5      	bne.n	1b09c <z_sys_mem_pool_block_alloc+0x72>
   1b0b0:	2400      	movs	r4, #0
	pool_irq_unlock(p, key);
   1b0b2:	4641      	mov	r1, r8
   1b0b4:	7c28      	ldrb	r0, [r5, #16]
   1b0b6:	f7ff ff6b 	bl	1af90 <pool_irq_unlock.isra.4>
	*data_p = data;
   1b0ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b0bc:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   1b0be:	2c00      	cmp	r4, #0
   1b0c0:	d0db      	beq.n	1b07a <z_sys_mem_pool_block_alloc+0x50>
	}

	*level_p = alloc_l;
   1b0c2:	68bb      	ldr	r3, [r7, #8]
	*block_p = block_num(p, data, lsizes[alloc_l]);

	return 0;
   1b0c4:	2000      	movs	r0, #0
	*level_p = alloc_l;
   1b0c6:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1b0ca:	682b      	ldr	r3, [r5, #0]
   1b0cc:	1ae4      	subs	r4, r4, r3
   1b0ce:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   1b0d2:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   1b0d6:	687b      	ldr	r3, [r7, #4]
   1b0d8:	601c      	str	r4, [r3, #0]
}
   1b0da:	371c      	adds	r7, #28
   1b0dc:	46bd      	mov	sp, r7
   1b0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	node->prev->next = node->next;
   1b0e2:	e9d4 3200 	ldrd	r3, r2, [r4]
   1b0e6:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1b0e8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1b0ea:	2300      	movs	r3, #0
	node->prev = NULL;
   1b0ec:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1b0f0:	682b      	ldr	r3, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
   1b0f2:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1b0f6:	1ae2      	subs	r2, r4, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   1b0f8:	f107 0b14 	add.w	fp, r7, #20
   1b0fc:	fb92 f2f1 	sdiv	r2, r2, r1
   1b100:	465b      	mov	r3, fp
   1b102:	4631      	mov	r1, r6
   1b104:	4628      	mov	r0, r5
   1b106:	f7ff ff23 	bl	1af50 <get_bit_ptr>
	*word |= (1<<bit);
   1b10a:	2201      	movs	r2, #1
   1b10c:	6979      	ldr	r1, [r7, #20]
   1b10e:	fa02 f000 	lsl.w	r0, r2, r0
   1b112:	680b      	ldr	r3, [r1, #0]
   1b114:	603a      	str	r2, [r7, #0]
   1b116:	4303      	orrs	r3, r0
   1b118:	600b      	str	r3, [r1, #0]
			for (from_l = i; from_l < alloc_l; from_l++) {
   1b11a:	454e      	cmp	r6, r9
   1b11c:	dac9      	bge.n	1b0b2 <z_sys_mem_pool_block_alloc+0x88>
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1b11e:	682a      	ldr	r2, [r5, #0]
   1b120:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
   1b124:	1aa2      	subs	r2, r4, r2
   1b126:	fb92 f2f3 	sdiv	r2, r2, r3
	set_alloc_bit(p, l + 1, 4*bn);
   1b12a:	3601      	adds	r6, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   1b12c:	465b      	mov	r3, fp
   1b12e:	0092      	lsls	r2, r2, #2
   1b130:	4631      	mov	r1, r6
   1b132:	4628      	mov	r0, r5
   1b134:	f7ff ff0c 	bl	1af50 <get_bit_ptr>
	*word |= (1<<bit);
   1b138:	697a      	ldr	r2, [r7, #20]
   1b13a:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1b13c:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   1b13e:	fa03 f000 	lsl.w	r0, r3, r0
   1b142:	6813      	ldr	r3, [r2, #0]
   1b144:	4303      	orrs	r3, r0
   1b146:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1b148:	230c      	movs	r3, #12
   1b14a:	2203      	movs	r2, #3
   1b14c:	fb03 1106 	mla	r1, r3, r6, r1
		int lsz = lsizes[l + 1];
   1b150:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1b154:	f101 0e04 	add.w	lr, r1, #4
   1b158:	1823      	adds	r3, r4, r0
   1b15a:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
   1b15c:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   1b15e:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
   1b162:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1b164:	688a      	ldr	r2, [r1, #8]
   1b166:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   1b168:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
   1b16a:	608b      	str	r3, [r1, #8]
   1b16c:	3a01      	subs	r2, #1
   1b16e:	4403      	add	r3, r0
   1b170:	60fa      	str	r2, [r7, #12]
   1b172:	d1f3      	bne.n	1b15c <z_sys_mem_pool_block_alloc+0x132>
				pool_irq_unlock(p, key);
   1b174:	4641      	mov	r1, r8
   1b176:	7c28      	ldrb	r0, [r5, #16]
   1b178:	f7ff ff0a 	bl	1af90 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1b17c:	7c2b      	ldrb	r3, [r5, #16]
   1b17e:	07db      	lsls	r3, r3, #31
   1b180:	d503      	bpl.n	1b18a <z_sys_mem_pool_block_alloc+0x160>
   1b182:	f7ff fefc 	bl	1af7e <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   1b186:	4680      	mov	r8, r0
   1b188:	e7c7      	b.n	1b11a <z_sys_mem_pool_block_alloc+0xf0>
		return 0;
   1b18a:	68f8      	ldr	r0, [r7, #12]
   1b18c:	e7fb      	b.n	1b186 <z_sys_mem_pool_block_alloc+0x15c>

0001b18e <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   1b18e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b192:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1b194:	7a83      	ldrb	r3, [r0, #10]
{
   1b196:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1b198:	009b      	lsls	r3, r3, #2
   1b19a:	3307      	adds	r3, #7
   1b19c:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1b1a0:	ebad 0d03 	sub.w	sp, sp, r3
   1b1a4:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   1b1a6:	6843      	ldr	r3, [r0, #4]
{
   1b1a8:	4606      	mov	r6, r0
	lsizes[0] = p->max_sz;
   1b1aa:	465c      	mov	r4, fp
	for (i = 1; i <= level; i++) {
   1b1ac:	2001      	movs	r0, #1
	lsizes[0] = p->max_sz;
   1b1ae:	f8cb 3000 	str.w	r3, [fp]
	for (i = 1; i <= level; i++) {
   1b1b2:	4281      	cmp	r1, r0
   1b1b4:	d215      	bcs.n	1b1e2 <z_sys_mem_pool_block_free+0x54>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1b1b6:	7c30      	ldrb	r0, [r6, #16]
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   1b1b8:	4688      	mov	r8, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1b1ba:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
   1b1be:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1b1c0:	d001      	beq.n	1b1c6 <z_sys_mem_pool_block_free+0x38>
   1b1c2:	f7ff fedc 	bl	1af7e <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
   1b1c6:	4604      	mov	r4, r0
	while (level >= 0) {
   1b1c8:	f1b8 0f00 	cmp.w	r8, #0
   1b1cc:	da11      	bge.n	1b1f2 <z_sys_mem_pool_block_free+0x64>
	return -1;
   1b1ce:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	pool_irq_unlock(p, key);
   1b1d2:	4621      	mov	r1, r4
   1b1d4:	7c30      	ldrb	r0, [r6, #16]
   1b1d6:	f7ff fedb 	bl	1af90 <pool_irq_unlock.isra.4>
}
   1b1da:	3714      	adds	r7, #20
   1b1dc:	46bd      	mov	sp, r7
   1b1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1b1e2:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
   1b1e4:	3001      	adds	r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1b1e6:	089b      	lsrs	r3, r3, #2
   1b1e8:	f023 0303 	bic.w	r3, r3, #3
   1b1ec:	f844 3f04 	str.w	r3, [r4, #4]!
   1b1f0:	e7df      	b.n	1b1b2 <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
   1b1f2:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
   1b1f6:	462a      	mov	r2, r5
	return (u8_t *)p->buf + lsz * block;
   1b1f8:	fb03 fa05 	mul.w	sl, r3, r5
		int i, lsz = lsizes[level];
   1b1fc:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   1b1fe:	6833      	ldr	r3, [r6, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   1b200:	4641      	mov	r1, r8
	return (u8_t *)p->buf + lsz * block;
   1b202:	eb03 090a 	add.w	r9, r3, sl
   1b206:	603b      	str	r3, [r7, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   1b208:	4630      	mov	r0, r6
   1b20a:	f107 030c 	add.w	r3, r7, #12
   1b20e:	f7ff fe9f 	bl	1af50 <get_bit_ptr>
	*word &= ~(1<<bit);
   1b212:	2301      	movs	r3, #1
   1b214:	68fa      	ldr	r2, [r7, #12]
   1b216:	fa03 f000 	lsl.w	r0, r3, r0
   1b21a:	6813      	ldr	r3, [r2, #0]
	node->next = list;
   1b21c:	6839      	ldr	r1, [r7, #0]
   1b21e:	ea23 0300 	bic.w	r3, r3, r0
   1b222:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
   1b224:	220c      	movs	r2, #12
   1b226:	68f3      	ldr	r3, [r6, #12]
   1b228:	fb02 3308 	mla	r3, r2, r8, r3
   1b22c:	1d1a      	adds	r2, r3, #4
   1b22e:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
   1b232:	689a      	ldr	r2, [r3, #8]
		pool_irq_unlock(p, key);
   1b234:	4621      	mov	r1, r4
   1b236:	f8c9 2004 	str.w	r2, [r9, #4]
	list->tail->next = node;
   1b23a:	689a      	ldr	r2, [r3, #8]
   1b23c:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
   1b240:	f8c3 9008 	str.w	r9, [r3, #8]
   1b244:	7c30      	ldrb	r0, [r6, #16]
   1b246:	f7ff fea3 	bl	1af90 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1b24a:	7c30      	ldrb	r0, [r6, #16]
   1b24c:	f010 0001 	ands.w	r0, r0, #1
   1b250:	d001      	beq.n	1b256 <z_sys_mem_pool_block_free+0xc8>
   1b252:	f7ff fe94 	bl	1af7e <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
   1b256:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1b258:	f1b8 0f00 	cmp.w	r8, #0
   1b25c:	d0b9      	beq.n	1b1d2 <z_sys_mem_pool_block_free+0x44>
	int bit = get_bit_ptr(p, level, bn, &word);
   1b25e:	f107 030c 	add.w	r3, r7, #12
   1b262:	462a      	mov	r2, r5
   1b264:	4641      	mov	r1, r8
   1b266:	4630      	mov	r0, r6
   1b268:	f7ff fe72 	bl	1af50 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   1b26c:	68fb      	ldr	r3, [r7, #12]
   1b26e:	2800      	cmp	r0, #0
   1b270:	bfb8      	it	lt
   1b272:	3003      	addlt	r0, #3
   1b274:	681b      	ldr	r3, [r3, #0]
   1b276:	f020 0003 	bic.w	r0, r0, #3
   1b27a:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1b27e:	f010 000f 	ands.w	r0, r0, #15
   1b282:	d1a6      	bne.n	1b1d2 <z_sys_mem_pool_block_free+0x44>
	node->next = NULL;
   1b284:	4684      	mov	ip, r0
			int b = (bn & ~3) + i;
   1b286:	f025 0a03 	bic.w	sl, r5, #3
	return (u8_t *)p->buf + lsz * block;
   1b28a:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
   1b28c:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
   1b290:	4353      	muls	r3, r2
   1b292:	6832      	ldr	r2, [r6, #0]
		for (i = 0; i < 4; i++) {
   1b294:	3001      	adds	r0, #1
	return (u8_t *)p->buf + lsz * block;
   1b296:	18d1      	adds	r1, r2, r3
	node->prev->next = node->next;
   1b298:	f8d1 9004 	ldr.w	r9, [r1, #4]
   1b29c:	f852 e003 	ldr.w	lr, [r2, r3]
		for (i = 0; i < 4; i++) {
   1b2a0:	2804      	cmp	r0, #4
   1b2a2:	f8c9 e000 	str.w	lr, [r9]
	node->next->prev = node->prev;
   1b2a6:	f8ce 9004 	str.w	r9, [lr, #4]
	node->next = NULL;
   1b2aa:	f842 c003 	str.w	ip, [r2, r3]
	node->prev = NULL;
   1b2ae:	f8c1 c004 	str.w	ip, [r1, #4]
   1b2b2:	d1ea      	bne.n	1b28a <z_sys_mem_pool_block_free+0xfc>
		bn = bn / 4;
   1b2b4:	2d00      	cmp	r5, #0
   1b2b6:	bfb8      	it	lt
   1b2b8:	3503      	addlt	r5, #3
		level = level - 1;
   1b2ba:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		bn = bn / 4;
   1b2be:	10ad      	asrs	r5, r5, #2
   1b2c0:	e782      	b.n	1b1c8 <z_sys_mem_pool_block_free+0x3a>

0001b2c2 <arch_printk_char_out>:
}
   1b2c2:	2000      	movs	r0, #0
   1b2c4:	4770      	bx	lr

0001b2c6 <print_err>:
{
   1b2c6:	b570      	push	{r4, r5, r6, lr}
   1b2c8:	460d      	mov	r5, r1
   1b2ca:	4604      	mov	r4, r0
	out('E', ctx);
   1b2cc:	2045      	movs	r0, #69	; 0x45
   1b2ce:	47a0      	blx	r4
	out('R', ctx);
   1b2d0:	4629      	mov	r1, r5
   1b2d2:	2052      	movs	r0, #82	; 0x52
   1b2d4:	47a0      	blx	r4
	out('R', ctx);
   1b2d6:	4629      	mov	r1, r5
   1b2d8:	4623      	mov	r3, r4
}
   1b2da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   1b2de:	2052      	movs	r0, #82	; 0x52
   1b2e0:	4718      	bx	r3

0001b2e2 <z_vprintk>:
{
   1b2e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   1b2e6:	f04f 0800 	mov.w	r8, #0
{
   1b2ea:	4606      	mov	r6, r0
   1b2ec:	460f      	mov	r7, r1
	int min_width = -1;
   1b2ee:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   1b2f2:	46c1      	mov	r9, r8
{
   1b2f4:	b08b      	sub	sp, #44	; 0x2c
   1b2f6:	461c      	mov	r4, r3
	while (*fmt) {
   1b2f8:	1e53      	subs	r3, r2, #1
   1b2fa:	9302      	str	r3, [sp, #8]
			might_format = 0;
   1b2fc:	2500      	movs	r5, #0
					break;
   1b2fe:	e005      	b.n	1b30c <z_vprintk+0x2a>
		if (!might_format) {
   1b300:	b96d      	cbnz	r5, 1b31e <z_vprintk+0x3c>
			if (*fmt != '%') {
   1b302:	2825      	cmp	r0, #37	; 0x25
   1b304:	f000 814f 	beq.w	1b5a6 <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
   1b308:	4639      	mov	r1, r7
   1b30a:	47b0      	blx	r6
	while (*fmt) {
   1b30c:	9b02      	ldr	r3, [sp, #8]
   1b30e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1b312:	9302      	str	r3, [sp, #8]
   1b314:	2800      	cmp	r0, #0
   1b316:	d1f3      	bne.n	1b300 <z_vprintk+0x1e>
}
   1b318:	b00b      	add	sp, #44	; 0x2c
   1b31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   1b31e:	2864      	cmp	r0, #100	; 0x64
   1b320:	d06e      	beq.n	1b400 <z_vprintk+0x11e>
   1b322:	d81a      	bhi.n	1b35a <z_vprintk+0x78>
   1b324:	2839      	cmp	r0, #57	; 0x39
   1b326:	d80a      	bhi.n	1b33e <z_vprintk+0x5c>
   1b328:	2831      	cmp	r0, #49	; 0x31
   1b32a:	d260      	bcs.n	1b3ee <z_vprintk+0x10c>
   1b32c:	282d      	cmp	r0, #45	; 0x2d
   1b32e:	f000 8140 	beq.w	1b5b2 <z_vprintk+0x2d0>
   1b332:	2830      	cmp	r0, #48	; 0x30
   1b334:	d04c      	beq.n	1b3d0 <z_vprintk+0xee>
   1b336:	2825      	cmp	r0, #37	; 0x25
   1b338:	d107      	bne.n	1b34a <z_vprintk+0x68>
				out((int)'%', ctx);
   1b33a:	4639      	mov	r1, r7
   1b33c:	e00b      	b.n	1b356 <z_vprintk+0x74>
			switch (*fmt) {
   1b33e:	2858      	cmp	r0, #88	; 0x58
   1b340:	f000 80bb 	beq.w	1b4ba <z_vprintk+0x1d8>
   1b344:	2863      	cmp	r0, #99	; 0x63
   1b346:	f000 812a 	beq.w	1b59e <z_vprintk+0x2bc>
					out((int)'%', ctx);
   1b34a:	4639      	mov	r1, r7
   1b34c:	2025      	movs	r0, #37	; 0x25
   1b34e:	47b0      	blx	r6
					out((int)*fmt, ctx);
   1b350:	4639      	mov	r1, r7
   1b352:	9b02      	ldr	r3, [sp, #8]
   1b354:	7818      	ldrb	r0, [r3, #0]
   1b356:	47b0      	blx	r6
   1b358:	e7d0      	b.n	1b2fc <z_vprintk+0x1a>
			switch (*fmt) {
   1b35a:	2870      	cmp	r0, #112	; 0x70
   1b35c:	f000 80a3 	beq.w	1b4a6 <z_vprintk+0x1c4>
   1b360:	d811      	bhi.n	1b386 <z_vprintk+0xa4>
   1b362:	2869      	cmp	r0, #105	; 0x69
   1b364:	d04c      	beq.n	1b400 <z_vprintk+0x11e>
   1b366:	286c      	cmp	r0, #108	; 0x6c
   1b368:	d105      	bne.n	1b376 <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
   1b36a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1b36e:	d12a      	bne.n	1b3c6 <z_vprintk+0xe4>
					length_mod = 'L';
   1b370:	f04f 084c 	mov.w	r8, #76	; 0x4c
   1b374:	e7ca      	b.n	1b30c <z_vprintk+0x2a>
			switch (*fmt) {
   1b376:	2868      	cmp	r0, #104	; 0x68
   1b378:	d1e7      	bne.n	1b34a <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
   1b37a:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   1b37e:	d122      	bne.n	1b3c6 <z_vprintk+0xe4>
					length_mod = 'H';
   1b380:	f04f 0848 	mov.w	r8, #72	; 0x48
   1b384:	e7c2      	b.n	1b30c <z_vprintk+0x2a>
			switch (*fmt) {
   1b386:	2875      	cmp	r0, #117	; 0x75
   1b388:	d071      	beq.n	1b46e <z_vprintk+0x18c>
   1b38a:	d818      	bhi.n	1b3be <z_vprintk+0xdc>
   1b38c:	2873      	cmp	r0, #115	; 0x73
   1b38e:	d1dc      	bne.n	1b34a <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   1b390:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
   1b394:	46ab      	mov	fp, r5
   1b396:	465b      	mov	r3, fp
   1b398:	f81b 0b01 	ldrb.w	r0, [fp], #1
   1b39c:	2800      	cmp	r0, #0
   1b39e:	f040 80fb 	bne.w	1b598 <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
   1b3a2:	f1b9 0f03 	cmp.w	r9, #3
   1b3a6:	f040 810a 	bne.w	1b5be <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
   1b3aa:	1b5d      	subs	r5, r3, r5
   1b3ac:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
   1b3b0:	2d00      	cmp	r5, #0
   1b3b2:	dda3      	ble.n	1b2fc <z_vprintk+0x1a>
						out(' ', ctx);
   1b3b4:	4639      	mov	r1, r7
   1b3b6:	2020      	movs	r0, #32
   1b3b8:	47b0      	blx	r6
   1b3ba:	3d01      	subs	r5, #1
   1b3bc:	e7f8      	b.n	1b3b0 <z_vprintk+0xce>
			switch (*fmt) {
   1b3be:	2878      	cmp	r0, #120	; 0x78
   1b3c0:	d07b      	beq.n	1b4ba <z_vprintk+0x1d8>
   1b3c2:	287a      	cmp	r0, #122	; 0x7a
   1b3c4:	d1c1      	bne.n	1b34a <z_vprintk+0x68>
				} else if (length_mod == 0) {
   1b3c6:	f1b8 0f00 	cmp.w	r8, #0
   1b3ca:	d1be      	bne.n	1b34a <z_vprintk+0x68>
   1b3cc:	4680      	mov	r8, r0
   1b3ce:	e79d      	b.n	1b30c <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
   1b3d0:	f1ba 0f00 	cmp.w	sl, #0
   1b3d4:	da0e      	bge.n	1b3f4 <z_vprintk+0x112>
   1b3d6:	f1b9 0f00 	cmp.w	r9, #0
   1b3da:	f000 80ed 	beq.w	1b5b8 <z_vprintk+0x2d6>
					min_width = *fmt - '0';
   1b3de:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   1b3e2:	f1b9 0f00 	cmp.w	r9, #0
   1b3e6:	bf08      	it	eq
   1b3e8:	f04f 0902 	moveq.w	r9, #2
   1b3ec:	e78e      	b.n	1b30c <z_vprintk+0x2a>
				if (min_width < 0) {
   1b3ee:	f1ba 0f00 	cmp.w	sl, #0
   1b3f2:	dbf4      	blt.n	1b3de <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
   1b3f4:	230a      	movs	r3, #10
   1b3f6:	fb03 0a0a 	mla	sl, r3, sl, r0
   1b3fa:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   1b3fe:	e7f0      	b.n	1b3e2 <z_vprintk+0x100>
				if (length_mod == 'z') {
   1b400:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   1b404:	d102      	bne.n	1b40c <z_vprintk+0x12a>
					d = va_arg(ap, int);
   1b406:	f854 5b04 	ldr.w	r5, [r4], #4
   1b40a:	e01f      	b.n	1b44c <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
   1b40c:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1b410:	d0f9      	beq.n	1b406 <z_vprintk+0x124>
				} else if (length_mod == 'L') {
   1b412:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1b416:	d1f6      	bne.n	1b406 <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
   1b418:	3407      	adds	r4, #7
   1b41a:	f024 0407 	bic.w	r4, r4, #7
   1b41e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
   1b422:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
   1b426:	9106      	str	r1, [sp, #24]
   1b428:	f143 0100 	adc.w	r1, r3, #0
   1b42c:	9107      	str	r1, [sp, #28]
   1b42e:	2100      	movs	r1, #0
   1b430:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   1b434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b438:	4561      	cmp	r1, ip
   1b43a:	bf08      	it	eq
   1b43c:	4558      	cmpeq	r0, fp
   1b43e:	d204      	bcs.n	1b44a <z_vprintk+0x168>
						print_err(out, ctx);
   1b440:	4639      	mov	r1, r7
   1b442:	4630      	mov	r0, r6
   1b444:	f7ff ff3f 	bl	1b2c6 <print_err>
						break;
   1b448:	e758      	b.n	1b2fc <z_vprintk+0x1a>
					d = lld;
   1b44a:	4615      	mov	r5, r2
				if (d < 0) {
   1b44c:	2d00      	cmp	r5, #0
   1b44e:	da05      	bge.n	1b45c <z_vprintk+0x17a>
					out((int)'-', ctx);
   1b450:	4639      	mov	r1, r7
   1b452:	202d      	movs	r0, #45	; 0x2d
   1b454:	47b0      	blx	r6
					d = -d;
   1b456:	426d      	negs	r5, r5
					min_width--;
   1b458:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
   1b45c:	464b      	mov	r3, r9
   1b45e:	462a      	mov	r2, r5
   1b460:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   1b464:	4639      	mov	r1, r7
   1b466:	4630      	mov	r0, r6
   1b468:	f7f1 fcf2 	bl	ce50 <_printk_dec_ulong>
				break;
   1b46c:	e746      	b.n	1b2fc <z_vprintk+0x1a>
				if (length_mod == 'z') {
   1b46e:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   1b472:	d102      	bne.n	1b47a <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
   1b474:	f854 2b04 	ldr.w	r2, [r4], #4
   1b478:	e011      	b.n	1b49e <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
   1b47a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1b47e:	d0f9      	beq.n	1b474 <z_vprintk+0x192>
				} else if (length_mod == 'L') {
   1b480:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1b484:	d1f6      	bne.n	1b474 <z_vprintk+0x192>
					if (llu > ~0UL) {
   1b486:	2100      	movs	r1, #0
   1b488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
   1b48c:	3407      	adds	r4, #7
   1b48e:	f024 0407 	bic.w	r4, r4, #7
   1b492:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   1b496:	4299      	cmp	r1, r3
   1b498:	bf08      	it	eq
   1b49a:	4290      	cmpeq	r0, r2
   1b49c:	d3d0      	bcc.n	1b440 <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
   1b49e:	f8cd a000 	str.w	sl, [sp]
   1b4a2:	464b      	mov	r3, r9
   1b4a4:	e7de      	b.n	1b464 <z_vprintk+0x182>
				out('0', ctx);
   1b4a6:	4639      	mov	r1, r7
   1b4a8:	2030      	movs	r0, #48	; 0x30
   1b4aa:	47b0      	blx	r6
				out('x', ctx);
   1b4ac:	4639      	mov	r1, r7
   1b4ae:	2078      	movs	r0, #120	; 0x78
   1b4b0:	47b0      	blx	r6
					min_width = 8;
   1b4b2:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
   1b4b6:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
   1b4ba:	9b02      	ldr	r3, [sp, #8]
   1b4bc:	781b      	ldrb	r3, [r3, #0]
   1b4be:	2b70      	cmp	r3, #112	; 0x70
   1b4c0:	d104      	bne.n	1b4cc <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
   1b4c2:	f854 3b04 	ldr.w	r3, [r4], #4
   1b4c6:	9304      	str	r3, [sp, #16]
   1b4c8:	2300      	movs	r3, #0
   1b4ca:	e00d      	b.n	1b4e8 <z_vprintk+0x206>
				} else if (length_mod == 'l') {
   1b4cc:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1b4d0:	d0f7      	beq.n	1b4c2 <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
   1b4d2:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1b4d6:	d1f4      	bne.n	1b4c2 <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
   1b4d8:	3407      	adds	r4, #7
   1b4da:	f024 0307 	bic.w	r3, r4, #7
   1b4de:	461c      	mov	r4, r3
   1b4e0:	f854 2b08 	ldr.w	r2, [r4], #8
   1b4e4:	685b      	ldr	r3, [r3, #4]
   1b4e6:	9204      	str	r2, [sp, #16]
	int digits = 0;
   1b4e8:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   1b4ea:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
   1b4ec:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
   1b4f0:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
   1b4f2:	9105      	str	r1, [sp, #20]
		shift -= 4;
   1b4f4:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
   1b4f8:	9804      	ldr	r0, [sp, #16]
   1b4fa:	f1cb 0c20 	rsb	ip, fp, #32
   1b4fe:	f1ab 0120 	sub.w	r1, fp, #32
   1b502:	fa20 f00b 	lsr.w	r0, r0, fp
   1b506:	fa03 fc0c 	lsl.w	ip, r3, ip
   1b50a:	ea40 000c 	orr.w	r0, r0, ip
   1b50e:	fa23 f101 	lsr.w	r1, r3, r1
   1b512:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   1b514:	f010 000f 	ands.w	r0, r0, #15
   1b518:	d106      	bne.n	1b528 <z_vprintk+0x246>
   1b51a:	9905      	ldr	r1, [sp, #20]
   1b51c:	b911      	cbnz	r1, 1b524 <z_vprintk+0x242>
   1b51e:	f1bb 0f00 	cmp.w	fp, #0
   1b522:	d122      	bne.n	1b56a <z_vprintk+0x288>
			nibble += nibble > 9 ? 87 : 48;
   1b524:	2130      	movs	r1, #48	; 0x30
   1b526:	e003      	b.n	1b530 <z_vprintk+0x24e>
   1b528:	2809      	cmp	r0, #9
   1b52a:	bf8c      	ite	hi
   1b52c:	2157      	movhi	r1, #87	; 0x57
   1b52e:	2130      	movls	r1, #48	; 0x30
   1b530:	4408      	add	r0, r1
			out((int)nibble, ctx);
   1b532:	b240      	sxtb	r0, r0
   1b534:	4639      	mov	r1, r7
   1b536:	9308      	str	r3, [sp, #32]
   1b538:	9205      	str	r2, [sp, #20]
   1b53a:	47b0      	blx	r6
			digits++;
   1b53c:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
   1b53e:	9a05      	ldr	r2, [sp, #20]
			digits++;
   1b540:	3301      	adds	r3, #1
   1b542:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   1b544:	9b08      	ldr	r3, [sp, #32]
   1b546:	f1bb 0f00 	cmp.w	fp, #0
   1b54a:	d123      	bne.n	1b594 <z_vprintk+0x2b2>
	if (padding == PAD_SPACE_AFTER) {
   1b54c:	f1b9 0f03 	cmp.w	r9, #3
   1b550:	f47f aed4 	bne.w	1b2fc <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
   1b554:	9b03      	ldr	r3, [sp, #12]
   1b556:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
   1b55a:	2d00      	cmp	r5, #0
   1b55c:	f77f aece 	ble.w	1b2fc <z_vprintk+0x1a>
			out(' ', ctx);
   1b560:	4639      	mov	r1, r7
   1b562:	2020      	movs	r0, #32
   1b564:	47b0      	blx	r6
   1b566:	3d01      	subs	r5, #1
   1b568:	e7f7      	b.n	1b55a <z_vprintk+0x278>
		if (remaining-- <= min_width) {
   1b56a:	1e51      	subs	r1, r2, #1
   1b56c:	4592      	cmp	sl, r2
   1b56e:	9108      	str	r1, [sp, #32]
   1b570:	db07      	blt.n	1b582 <z_vprintk+0x2a0>
			if (padding == PAD_ZERO_BEFORE) {
   1b572:	f1b9 0f01 	cmp.w	r9, #1
   1b576:	d106      	bne.n	1b586 <z_vprintk+0x2a4>
				out('0', ctx);
   1b578:	4639      	mov	r1, r7
   1b57a:	2030      	movs	r0, #48	; 0x30
   1b57c:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   1b57e:	47b0      	blx	r6
   1b580:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
   1b582:	9a08      	ldr	r2, [sp, #32]
   1b584:	e7b6      	b.n	1b4f4 <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
   1b586:	f1b9 0f02 	cmp.w	r9, #2
   1b58a:	d1fa      	bne.n	1b582 <z_vprintk+0x2a0>
   1b58c:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   1b58e:	4639      	mov	r1, r7
   1b590:	2020      	movs	r0, #32
   1b592:	e7f4      	b.n	1b57e <z_vprintk+0x29c>
			found_largest_digit = 1;
   1b594:	9505      	str	r5, [sp, #20]
   1b596:	e7ad      	b.n	1b4f4 <z_vprintk+0x212>
					out((int)(*s++), ctx);
   1b598:	4639      	mov	r1, r7
   1b59a:	47b0      	blx	r6
   1b59c:	e6fb      	b.n	1b396 <z_vprintk+0xb4>
				out(c, ctx);
   1b59e:	4639      	mov	r1, r7
   1b5a0:	f854 0b04 	ldr.w	r0, [r4], #4
   1b5a4:	e6d7      	b.n	1b356 <z_vprintk+0x74>
				length_mod = 0;
   1b5a6:	46a8      	mov	r8, r5
				padding = PAD_NONE;
   1b5a8:	46a9      	mov	r9, r5
				min_width = -1;
   1b5aa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
   1b5ae:	2501      	movs	r5, #1
   1b5b0:	e6ac      	b.n	1b30c <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
   1b5b2:	f04f 0903 	mov.w	r9, #3
   1b5b6:	e6a9      	b.n	1b30c <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
   1b5b8:	f04f 0901 	mov.w	r9, #1
   1b5bc:	e6a6      	b.n	1b30c <z_vprintk+0x2a>
			might_format = 0;
   1b5be:	4605      	mov	r5, r0
		++fmt;
   1b5c0:	e6a4      	b.n	1b30c <z_vprintk+0x2a>

0001b5c2 <printk>:
{
   1b5c2:	b40f      	push	{r0, r1, r2, r3}
   1b5c4:	b507      	push	{r0, r1, r2, lr}
   1b5c6:	a904      	add	r1, sp, #16
   1b5c8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1b5cc:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1b5ce:	f7f1 fc8b 	bl	cee8 <vprintk>
}
   1b5d2:	b003      	add	sp, #12
   1b5d4:	f85d eb04 	ldr.w	lr, [sp], #4
   1b5d8:	b004      	add	sp, #16
   1b5da:	4770      	bx	lr

0001b5dc <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1b5dc:	4604      	mov	r4, r0
   1b5de:	b508      	push	{r3, lr}
   1b5e0:	4608      	mov	r0, r1
   1b5e2:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1b5e4:	461a      	mov	r2, r3
   1b5e6:	47a0      	blx	r4
	return z_impl_k_current_get();
   1b5e8:	f7ff f94a 	bl	1a880 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1b5ec:	f7f2 fe12 	bl	e214 <z_impl_k_thread_abort>

0001b5f0 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1b5f0:	b510      	push	{r4, lr}
   1b5f2:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   1b5f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b5f8:	4620      	mov	r0, r4
   1b5fa:	f002 f842 	bl	1d682 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   1b5fe:	4603      	mov	r3, r0
   1b600:	2800      	cmp	r0, #0
   1b602:	d0f7      	beq.n	1b5f4 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   1b604:	6842      	ldr	r2, [r0, #4]
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b606:	3308      	adds	r3, #8
   1b608:	e8d3 1fef 	ldaex	r1, [r3]
   1b60c:	f021 0c01 	bic.w	ip, r1, #1
   1b610:	e8c3 cfee 	stlex	lr, ip, [r3]
   1b614:	f1be 0f00 	cmp.w	lr, #0
   1b618:	d1f6      	bne.n	1b608 <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1b61a:	07cb      	lsls	r3, r1, #31
   1b61c:	d500      	bpl.n	1b620 <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1b61e:	4790      	blx	r2
	z_impl_k_yield();
   1b620:	f7ff f8ba 	bl	1a798 <z_impl_k_yield>
   1b624:	e7e6      	b.n	1b5f4 <z_work_q_main+0x4>

0001b626 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1b626:	4770      	bx	lr

0001b628 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
   1b628:	f7fe b99e 	b.w	19968 <SystemInit>

0001b62c <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1b62c:	2300      	movs	r3, #0
	list->head = NULL;
   1b62e:	e9c0 3300 	strd	r3, r3, [r0]
}
   1b632:	4770      	bx	lr

0001b634 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1b634:	6803      	ldr	r3, [r0, #0]
   1b636:	b923      	cbnz	r3, 1b642 <log_list_add_tail+0xe>
		list->head = msg;
   1b638:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1b63a:	2300      	movs	r3, #0
	list->tail = msg;
   1b63c:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1b63e:	600b      	str	r3, [r1, #0]
}
   1b640:	4770      	bx	lr
		list->tail->next = msg;
   1b642:	6843      	ldr	r3, [r0, #4]
   1b644:	6019      	str	r1, [r3, #0]
   1b646:	e7f8      	b.n	1b63a <log_list_add_tail+0x6>

0001b648 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1b648:	6800      	ldr	r0, [r0, #0]
   1b64a:	4770      	bx	lr

0001b64c <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   1b64c:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   1b64e:	b10b      	cbz	r3, 1b654 <log_list_head_get+0x8>
		list->head = list->head->next;
   1b650:	681a      	ldr	r2, [r3, #0]
   1b652:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   1b654:	4618      	mov	r0, r3
   1b656:	4770      	bx	lr

0001b658 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1b658:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1b65a:	f7f1 fee1 	bl	d420 <log_msg_chunk_alloc>

	if (msg != NULL) {
   1b65e:	b118      	cbz	r0, 1b668 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1b660:	2301      	movs	r3, #1
   1b662:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1b664:	2300      	movs	r3, #0
   1b666:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
   1b668:	bd08      	pop	{r3, pc}

0001b66a <k_cycle_get_32_wrapper>:
   1b66a:	f7f2 b8c9 	b.w	d800 <z_timer_cycle_get_32>

0001b66e <dummy_timestamp>:
   1b66e:	2000      	movs	r0, #0
   1b670:	4770      	bx	lr

0001b672 <z_log_get_s_mask>:
	u32_t mask = 0;
   1b672:	2300      	movs	r3, #0
{
   1b674:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t arg = 0;
   1b676:	461a      	mov	r2, r3
	bool arm = false;
   1b678:	461c      	mov	r4, r3
				mask |= BIT(arg);
   1b67a:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   1b67c:	f810 5b01 	ldrb.w	r5, [r0], #1
   1b680:	b10d      	cbz	r5, 1b686 <z_log_get_s_mask+0x14>
   1b682:	428a      	cmp	r2, r1
   1b684:	d301      	bcc.n	1b68a <z_log_get_s_mask+0x18>
}
   1b686:	4618      	mov	r0, r3
   1b688:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   1b68a:	2d25      	cmp	r5, #37	; 0x25
   1b68c:	d102      	bne.n	1b694 <z_log_get_s_mask+0x22>
			arm = !arm;
   1b68e:	f084 0401 	eor.w	r4, r4, #1
   1b692:	e7f3      	b.n	1b67c <z_log_get_s_mask+0xa>
		} else if (arm && isalpha((int)curr)) {
   1b694:	2c00      	cmp	r4, #0
   1b696:	d0f1      	beq.n	1b67c <z_log_get_s_mask+0xa>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1b698:	f045 0620 	orr.w	r6, r5, #32
   1b69c:	3e61      	subs	r6, #97	; 0x61
   1b69e:	2e19      	cmp	r6, #25
   1b6a0:	d8ec      	bhi.n	1b67c <z_log_get_s_mask+0xa>
			if (curr == 's') {
   1b6a2:	2d73      	cmp	r5, #115	; 0x73
				mask |= BIT(arg);
   1b6a4:	bf04      	itt	eq
   1b6a6:	fa07 f402 	lsleq.w	r4, r7, r2
   1b6aa:	4323      	orreq	r3, r4
			arg++;
   1b6ac:	3201      	adds	r2, #1
			arm = false;
   1b6ae:	2400      	movs	r4, #0
   1b6b0:	e7e4      	b.n	1b67c <z_log_get_s_mask+0xa>

0001b6b2 <log_0>:
{
   1b6b2:	b538      	push	{r3, r4, r5, lr}
   1b6b4:	4605      	mov	r5, r0
   1b6b6:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1b6b8:	f7ff ffce 	bl	1b658 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1b6bc:	b128      	cbz	r0, 1b6ca <log_0+0x18>
		msg->str = str;
   1b6be:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   1b6c0:	4621      	mov	r1, r4
}
   1b6c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1b6c6:	f7f1 bdd5 	b.w	d274 <msg_finalize>
}
   1b6ca:	bd38      	pop	{r3, r4, r5, pc}

0001b6cc <log_1>:
{
   1b6cc:	b570      	push	{r4, r5, r6, lr}
   1b6ce:	4604      	mov	r4, r0
   1b6d0:	460e      	mov	r6, r1
   1b6d2:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1b6d4:	f7ff ffc0 	bl	1b658 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1b6d8:	b158      	cbz	r0, 1b6f2 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1b6da:	2201      	movs	r2, #1
		msg->str = str;
   1b6dc:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1b6de:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1b6e0:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   1b6e2:	f362 1407 	bfi	r4, r2, #4, #4
   1b6e6:	7244      	strb	r4, [r0, #9]
		msg_finalize(msg, src_level);
   1b6e8:	4629      	mov	r1, r5
}
   1b6ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1b6ee:	f7f1 bdc1 	b.w	d274 <msg_finalize>
}
   1b6f2:	bd70      	pop	{r4, r5, r6, pc}

0001b6f4 <log_2>:
{
   1b6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b6f8:	4605      	mov	r5, r0
   1b6fa:	4688      	mov	r8, r1
   1b6fc:	4617      	mov	r7, r2
   1b6fe:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1b700:	f7ff ffaa 	bl	1b658 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1b704:	b160      	cbz	r0, 1b720 <log_2+0x2c>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1b706:	2302      	movs	r3, #2
		msg->str = str;
   1b708:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1b70a:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1b70c:	e9c0 8705 	strd	r8, r7, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   1b710:	f363 1507 	bfi	r5, r3, #4, #4
   1b714:	7245      	strb	r5, [r0, #9]
		msg_finalize(msg, src_level);
   1b716:	4631      	mov	r1, r6
}
   1b718:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1b71c:	f7f1 bdaa 	b.w	d274 <msg_finalize>
}
   1b720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b724 <log_3>:
{
   1b724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b728:	4605      	mov	r5, r0
   1b72a:	4689      	mov	r9, r1
   1b72c:	4690      	mov	r8, r2
   1b72e:	461f      	mov	r7, r3
   1b730:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1b734:	f7ff ff90 	bl	1b658 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1b738:	b168      	cbz	r0, 1b756 <log_3+0x32>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1b73a:	2303      	movs	r3, #3
		msg->str = str;
   1b73c:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1b73e:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1b740:	e9c0 9805 	strd	r9, r8, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   1b744:	f363 1507 	bfi	r5, r3, #4, #4
   1b748:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[2] = arg3;
   1b74a:	61c7      	str	r7, [r0, #28]
		msg_finalize(msg, src_level);
   1b74c:	4631      	mov	r1, r6
}
   1b74e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   1b752:	f7f1 bd8f 	b.w	d274 <msg_finalize>
}
   1b756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001b75a <log_n>:
{
   1b75a:	b510      	push	{r4, lr}
   1b75c:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1b75e:	f000 f838 	bl	1b7d2 <log_msg_create_n>
		if (msg == NULL) {
   1b762:	b120      	cbz	r0, 1b76e <log_n+0x14>
		msg_finalize(msg, src_level);
   1b764:	4621      	mov	r1, r4
}
   1b766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1b76a:	f7f1 bd83 	b.w	d274 <msg_finalize>
}
   1b76e:	bd10      	pop	{r4, pc}

0001b770 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1b770:	7a40      	ldrb	r0, [r0, #9]
}
   1b772:	0900      	lsrs	r0, r0, #4
   1b774:	4770      	bx	lr

0001b776 <log_msg_arg_get>:
log_arg_t log_msg_arg_get(struct log_msg *msg, u32_t arg_idx)
{
	log_arg_t arg;

	/* Return early if requested argument not present in the message. */
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1b776:	7a43      	ldrb	r3, [r0, #9]
   1b778:	091b      	lsrs	r3, r3, #4
   1b77a:	428b      	cmp	r3, r1
   1b77c:	d916      	bls.n	1b7ac <log_msg_arg_get+0x36>
		return 0;
	}

	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1b77e:	2b03      	cmp	r3, #3
   1b780:	d803      	bhi.n	1b78a <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
   1b782:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1b786:	6948      	ldr	r0, [r1, #20]
   1b788:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1b78a:	2901      	cmp	r1, #1
   1b78c:	d803      	bhi.n	1b796 <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
   1b78e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1b792:	6988      	ldr	r0, [r1, #24]
   1b794:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1b796:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1b798:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1b79a:	2906      	cmp	r1, #6
   1b79c:	d803      	bhi.n	1b7a6 <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
   1b79e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1b7a2:	6848      	ldr	r0, [r1, #4]
   1b7a4:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
   1b7a6:	3907      	subs	r1, #7
		cont = cont->next;
   1b7a8:	681b      	ldr	r3, [r3, #0]
   1b7aa:	e7f6      	b.n	1b79a <log_msg_arg_get+0x24>
		return 0;
   1b7ac:	2000      	movs	r0, #0
	} else {
		arg = cont_arg_get(msg, arg_idx);
	}

	return arg;
}
   1b7ae:	4770      	bx	lr

0001b7b0 <log_msg_put>:
{
   1b7b0:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1b7b2:	1d02      	adds	r2, r0, #4
   1b7b4:	e8d2 1fef 	ldaex	r1, [r2]
   1b7b8:	3901      	subs	r1, #1
   1b7ba:	e8c2 1fec 	stlex	ip, r1, [r2]
   1b7be:	f1bc 0f00 	cmp.w	ip, #0
   1b7c2:	d1f7      	bne.n	1b7b4 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   1b7c4:	685b      	ldr	r3, [r3, #4]
   1b7c6:	b90b      	cbnz	r3, 1b7cc <log_msg_put+0x1c>
		msg_free(msg);
   1b7c8:	f7f1 be3c 	b.w	d444 <msg_free>
}
   1b7cc:	4770      	bx	lr

0001b7ce <log_msg_str_get>:

const char *log_msg_str_get(struct log_msg *msg)
{
	return msg->str;
}
   1b7ce:	6900      	ldr	r0, [r0, #16]
   1b7d0:	4770      	bx	lr

0001b7d2 <log_msg_create_n>:
		cont = cont->next;
	}
}

struct log_msg *log_msg_create_n(const char *str, log_arg_t *args, u32_t nargs)
{
   1b7d2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b7d6:	4682      	mov	sl, r0
   1b7d8:	4688      	mov	r8, r1
   1b7da:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1b7dc:	f7f1 fe20 	bl	d420 <log_msg_chunk_alloc>
	if (msg != NULL) {
   1b7e0:	4604      	mov	r4, r0
   1b7e2:	b330      	cbz	r0, 1b832 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   1b7e4:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1b7e6:	2600      	movs	r6, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1b7e8:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1b7ea:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1b7ec:	8106      	strh	r6, [r0, #8]
   1b7ee:	d909      	bls.n	1b804 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   1b7f0:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1b7f2:	f1a5 0902 	sub.w	r9, r5, #2
	msg->hdr.params.generic.ext = 1;
   1b7f6:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
   1b7f8:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1b7fc:	6146      	str	r6, [r0, #20]
	while (n > 0) {
   1b7fe:	f1b9 0f00 	cmp.w	r9, #0
   1b802:	dc0e      	bgt.n	1b822 <log_msg_create_n+0x50>

	msg = msg_alloc(nargs);

	if (msg != NULL) {
		msg->str = str;
		msg->hdr.params.std.nargs = nargs;
   1b804:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1b806:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1b808:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   1b80c:	f8c4 a010 	str.w	sl, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1b810:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1b812:	d818      	bhi.n	1b846 <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   1b814:	00aa      	lsls	r2, r5, #2
   1b816:	4641      	mov	r1, r8
   1b818:	f104 0014 	add.w	r0, r4, #20
   1b81c:	f000 fa75 	bl	1bd0a <memcpy>
		nargs  = 0U;
   1b820:	e007      	b.n	1b832 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1b822:	f7f1 fdfd 	bl	d420 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1b826:	4607      	mov	r7, r0
   1b828:	b930      	cbnz	r0, 1b838 <log_msg_create_n+0x66>
			msg_free(msg);
   1b82a:	4620      	mov	r0, r4
   1b82c:	f7f1 fe0a 	bl	d444 <msg_free>
			return NULL;
   1b830:	463c      	mov	r4, r7
		copy_args_to_msg(msg, args, nargs);
	}

	return msg;
}
   1b832:	4620      	mov	r0, r4
   1b834:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1b838:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1b83c:	f1a9 0907 	sub.w	r9, r9, #7
   1b840:	6006      	str	r6, [r0, #0]
		next = &cont->next;
   1b842:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1b844:	e7db      	b.n	1b7fe <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   1b846:	4641      	mov	r1, r8
   1b848:	2208      	movs	r2, #8
   1b84a:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1b84e:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   1b850:	f000 fa5b 	bl	1bd0a <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1b854:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1b856:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1b85a:	2d07      	cmp	r5, #7
   1b85c:	462e      	mov	r6, r5
   1b85e:	bf28      	it	cs
   1b860:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1b862:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1b866:	4641      	mov	r1, r8
   1b868:	1d38      	adds	r0, r7, #4
   1b86a:	464a      	mov	r2, r9
   1b86c:	f000 fa4d 	bl	1bd0a <memcpy>
	while (nargs != 0U) {
   1b870:	1bad      	subs	r5, r5, r6
		args += cpy_args;
   1b872:	44c8      	add	r8, r9
		cont = cont->next;
   1b874:	683f      	ldr	r7, [r7, #0]
	while (nargs != 0U) {
   1b876:	d1f0      	bne.n	1b85a <log_msg_create_n+0x88>
   1b878:	e7db      	b.n	1b832 <log_msg_create_n+0x60>

0001b87a <get_status>:
	if (data->started) {
   1b87a:	220c      	movs	r2, #12
	data = get_sub_data(dev, type);
   1b87c:	6883      	ldr	r3, [r0, #8]
	return &data->subsys[type];
   1b87e:	b2c9      	uxtb	r1, r1
	if (data->started) {
   1b880:	fb02 3101 	mla	r1, r2, r1, r3
   1b884:	7a4b      	ldrb	r3, [r1, #9]
   1b886:	b923      	cbnz	r3, 1b892 <get_status+0x18>
	if (data->ref > 0) {
   1b888:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
   1b88a:	fab0 f080 	clz	r0, r0
   1b88e:	0940      	lsrs	r0, r0, #5
   1b890:	4770      	bx	lr
   1b892:	2002      	movs	r0, #2
}
   1b894:	4770      	bx	lr

0001b896 <clock_stop>:
	const struct nrf_clock_control_config *config =
   1b896:	6802      	ldr	r2, [r0, #0]
{
   1b898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct nrf_clock_control_config *config =
   1b89c:	f8d2 8008 	ldr.w	r8, [r2, #8]
	return &config->subsys[type];
   1b8a0:	b2cc      	uxtb	r4, r1
	data = get_sub_data(dev, type);
   1b8a2:	6887      	ldr	r7, [r0, #8]
	__asm__ volatile(
   1b8a4:	f04f 0320 	mov.w	r3, #32
   1b8a8:	f3ef 8611 	mrs	r6, BASEPRI
   1b8ac:	f383 8811 	msr	BASEPRI, r3
   1b8b0:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
   1b8b4:	220c      	movs	r2, #12
   1b8b6:	4362      	muls	r2, r4
   1b8b8:	18b9      	adds	r1, r7, r2
   1b8ba:	7a0b      	ldrb	r3, [r1, #8]
   1b8bc:	b343      	cbz	r3, 1b910 <clock_stop+0x7a>
	data->ref--;
   1b8be:	3b01      	subs	r3, #1
   1b8c0:	b2db      	uxtb	r3, r3
   1b8c2:	720b      	strb	r3, [r1, #8]
	if (data->ref == 0) {
   1b8c4:	bb3b      	cbnz	r3, 1b916 <clock_stop+0x80>
		do_stop =  (config->stop_handler) ?
   1b8c6:	0125      	lsls	r5, r4, #4
	list->head = NULL;
   1b8c8:	50bb      	str	r3, [r7, r2]
	list->tail = NULL;
   1b8ca:	604b      	str	r3, [r1, #4]
   1b8cc:	eb08 0305 	add.w	r3, r8, r5
   1b8d0:	685b      	ldr	r3, [r3, #4]
				config->stop_handler(dev) : true;
   1b8d2:	b9cb      	cbnz	r3, 1b908 <clock_stop+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b8d4:	2201      	movs	r2, #1
			nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
   1b8d6:	4445      	add	r5, r8
   1b8d8:	7aeb      	ldrb	r3, [r5, #11]
   1b8da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b8de:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1b8e2:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b8e4:	2200      	movs	r2, #0
   1b8e6:	892b      	ldrh	r3, [r5, #8]
   1b8e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b8ec:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1b8f0:	601a      	str	r2, [r3, #0]
		data->started = false;
   1b8f2:	210c      	movs	r1, #12
   1b8f4:	2000      	movs	r0, #0
   1b8f6:	fb01 7404 	mla	r4, r1, r4, r7
   1b8fa:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
   1b8fc:	f386 8811 	msr	BASEPRI, r6
   1b900:	f3bf 8f6f 	isb	sy
}
   1b904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				config->stop_handler(dev) : true;
   1b908:	4798      	blx	r3
   1b90a:	2800      	cmp	r0, #0
   1b90c:	d1e2      	bne.n	1b8d4 <clock_stop+0x3e>
   1b90e:	e7f0      	b.n	1b8f2 <clock_stop+0x5c>
		err = -EALREADY;
   1b910:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1b914:	e7f2      	b.n	1b8fc <clock_stop+0x66>
	int err = 0;
   1b916:	2000      	movs	r0, #0
   1b918:	e7f0      	b.n	1b8fc <clock_stop+0x66>

0001b91a <clkstarted_handle>:
{
   1b91a:	b538      	push	{r3, r4, r5, lr}
	sub_data->started = true;
   1b91c:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   1b91e:	6883      	ldr	r3, [r0, #8]
{
   1b920:	4605      	mov	r5, r0
	sub_data->started = true;
   1b922:	fb04 3401 	mla	r4, r4, r1, r3
   1b926:	2301      	movs	r3, #1
   1b928:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   1b92a:	f04f 0320 	mov.w	r3, #32
   1b92e:	f3ef 8111 	mrs	r1, BASEPRI
   1b932:	f383 8811 	msr	BASEPRI, r3
   1b936:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1b93a:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1b93c:	b12b      	cbz	r3, 1b94a <clkstarted_handle+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b93e:	6860      	ldr	r0, [r4, #4]
   1b940:	681a      	ldr	r2, [r3, #0]
   1b942:	4283      	cmp	r3, r0
	list->head = node;
   1b944:	6022      	str	r2, [r4, #0]
	list->tail = node;
   1b946:	bf08      	it	eq
   1b948:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
   1b94a:	f381 8811 	msr	BASEPRI, r1
   1b94e:	f3bf 8f6f 	isb	sy
	while ((async_data = list_get(&sub_data->list)) != NULL) {
   1b952:	b903      	cbnz	r3, 1b956 <clkstarted_handle+0x3c>
}
   1b954:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   1b956:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   1b95a:	4628      	mov	r0, r5
   1b95c:	4790      	blx	r2
   1b95e:	e7e4      	b.n	1b92a <clkstarted_handle+0x10>

0001b960 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   1b960:	2200      	movs	r2, #0
   1b962:	f7f1 bdcf 	b.w	d504 <clock_async_start>

0001b966 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1b966:	4770      	bx	lr

0001b968 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1b968:	4770      	bx	lr

0001b96a <z_irq_spurious>:
	z_arm_reserved();
   1b96a:	f7f2 b883 	b.w	da74 <z_arm_bus_fault>

0001b96e <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1b96e:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   1b970:	6800      	ldr	r0, [r0, #0]
   1b972:	f7f2 b889 	b.w	da88 <z_arm_fatal_error>

0001b976 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1b976:	b508      	push	{r3, lr}
	handler();
   1b978:	f7f2 f920 	bl	dbbc <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   1b97c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   1b980:	f7f1 bf58 	b.w	d834 <z_arm_exc_exit>

0001b984 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   1b984:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   1b986:	2100      	movs	r1, #0
   1b988:	a801      	add	r0, sp, #4
   1b98a:	f7f2 fe29 	bl	e5e0 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   1b98e:	b003      	add	sp, #12
   1b990:	f85d fb04 	ldr.w	pc, [sp], #4

0001b994 <mpu_configure_region>:
{
   1b994:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   1b996:	684b      	ldr	r3, [r1, #4]
{
   1b998:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   1b99a:	680c      	ldr	r4, [r1, #0]
	p_attr->rbar = attr->rbar &
   1b99c:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1b9a0:	890d      	ldrh	r5, [r1, #8]
   1b9a2:	9400      	str	r4, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   1b9a4:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1b9a6:	f024 041f 	bic.w	r4, r4, #31
   1b9aa:	3b01      	subs	r3, #1
   1b9ac:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   1b9ae:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   1b9b2:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1b9b6:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   1b9ba:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
   1b9bc:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1b9c0:	9303      	str	r3, [sp, #12]
   1b9c2:	4604      	mov	r4, r0
   1b9c4:	d905      	bls.n	1b9d2 <mpu_configure_region+0x3e>
   1b9c6:	f7f2 fc8d 	bl	e2e4 <region_allocate_and_init.part.0>
   1b9ca:	4604      	mov	r4, r0
}
   1b9cc:	4620      	mov	r0, r4
   1b9ce:	b005      	add	sp, #20
   1b9d0:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   1b9d2:	4669      	mov	r1, sp
   1b9d4:	f7f2 fc6e 	bl	e2b4 <region_init>
	return region_allocate_and_init(index,
   1b9d8:	e7f8      	b.n	1b9cc <mpu_configure_region+0x38>

0001b9da <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1b9da:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   1b9de:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1b9e2:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   1b9e4:	bf08      	it	eq
   1b9e6:	f06f 0015 	mvneq.w	r0, #21
   1b9ea:	4770      	bx	lr

0001b9ec <atoi>:

#include <stdlib.h>
#include <ctype.h>

int atoi(const char *s)
{
   1b9ec:	b530      	push	{r4, r5, lr}
	int n = 0;
	int neg = 0;

	while (isspace(*s)) {
   1b9ee:	7802      	ldrb	r2, [r0, #0]
   1b9f0:	4603      	mov	r3, r0
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1b9f2:	2a20      	cmp	r2, #32
   1b9f4:	f100 0001 	add.w	r0, r0, #1
   1b9f8:	d0f9      	beq.n	1b9ee <atoi+0x2>
   1b9fa:	f1a2 0109 	sub.w	r1, r2, #9
   1b9fe:	2904      	cmp	r1, #4
   1ba00:	d9f5      	bls.n	1b9ee <atoi+0x2>
		s++;
	}
	switch (*s) {
   1ba02:	2a2b      	cmp	r2, #43	; 0x2b
   1ba04:	d008      	beq.n	1ba18 <atoi+0x2c>
	case '-':
		neg = 1;
		s++;
   1ba06:	2a2d      	cmp	r2, #45	; 0x2d
   1ba08:	bf0a      	itet	eq
   1ba0a:	4603      	moveq	r3, r0
   1ba0c:	2100      	movne	r1, #0
   1ba0e:	2101      	moveq	r1, #1
   1ba10:	3b01      	subs	r3, #1
	int neg = 0;
   1ba12:	2000      	movs	r0, #0
	case '+':
		s++;
	}
	/* Compute n as a negative number to avoid overflow on INT_MIN */
	while (isdigit(*s)) {
		n = 10*n - (*s++ - '0');
   1ba14:	250a      	movs	r5, #10
   1ba16:	e006      	b.n	1ba26 <atoi+0x3a>
		s++;
   1ba18:	4603      	mov	r3, r0
	int neg = 0;
   1ba1a:	2100      	movs	r1, #0
   1ba1c:	e7f8      	b.n	1ba10 <atoi+0x24>
		n = 10*n - (*s++ - '0');
   1ba1e:	f1c2 0230 	rsb	r2, r2, #48	; 0x30
   1ba22:	fb05 2000 	mla	r0, r5, r0, r2
	while (isdigit(*s)) {
   1ba26:	f813 2f01 	ldrb.w	r2, [r3, #1]!
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1ba2a:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   1ba2e:	2c09      	cmp	r4, #9
   1ba30:	d9f5      	bls.n	1ba1e <atoi+0x32>
	}
	return neg ? n : -n;
   1ba32:	b901      	cbnz	r1, 1ba36 <atoi+0x4a>
   1ba34:	4240      	negs	r0, r0
}
   1ba36:	bd30      	pop	{r4, r5, pc}

0001ba38 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1ba38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ba3c:	4684      	mov	ip, r0
   1ba3e:	460f      	mov	r7, r1
	register const char *s = nptr;
   1ba40:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1ba42:	462c      	mov	r4, r5
   1ba44:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1ba48:	2b20      	cmp	r3, #32
   1ba4a:	d036      	beq.n	1baba <strtol+0x82>
   1ba4c:	f1a3 0109 	sub.w	r1, r3, #9
   1ba50:	2904      	cmp	r1, #4
   1ba52:	d932      	bls.n	1baba <strtol+0x82>
	} while (isspace(c));
	if (c == '-') {
   1ba54:	2b2d      	cmp	r3, #45	; 0x2d
   1ba56:	d132      	bne.n	1babe <strtol+0x86>
		neg = 1;
   1ba58:	2101      	movs	r1, #1
		c = *s++;
   1ba5a:	786b      	ldrb	r3, [r5, #1]
   1ba5c:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1ba5e:	2a00      	cmp	r2, #0
   1ba60:	d05c      	beq.n	1bb1c <strtol+0xe4>
   1ba62:	2a10      	cmp	r2, #16
   1ba64:	d109      	bne.n	1ba7a <strtol+0x42>
   1ba66:	2b30      	cmp	r3, #48	; 0x30
   1ba68:	d107      	bne.n	1ba7a <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1ba6a:	7823      	ldrb	r3, [r4, #0]
   1ba6c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1ba70:	2b58      	cmp	r3, #88	; 0x58
   1ba72:	d14e      	bne.n	1bb12 <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
   1ba74:	2210      	movs	r2, #16
		c = s[1];
   1ba76:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1ba78:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1ba7a:	2900      	cmp	r1, #0
   1ba7c:	bf14      	ite	ne
   1ba7e:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
   1ba82:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1ba86:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   1ba88:	fbb8 fef2 	udiv	lr, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
   1ba8c:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1ba8e:	fb02 891e 	mls	r9, r2, lr, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1ba92:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1ba96:	2d09      	cmp	r5, #9
   1ba98:	d817      	bhi.n	1baca <strtol+0x92>
			c -= '0';
   1ba9a:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1ba9c:	429a      	cmp	r2, r3
   1ba9e:	dd24      	ble.n	1baea <strtol+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1baa0:	1c75      	adds	r5, r6, #1
   1baa2:	d007      	beq.n	1bab4 <strtol+0x7c>
   1baa4:	4570      	cmp	r0, lr
   1baa6:	d81d      	bhi.n	1bae4 <strtol+0xac>
   1baa8:	d101      	bne.n	1baae <strtol+0x76>
   1baaa:	454b      	cmp	r3, r9
   1baac:	dc1a      	bgt.n	1bae4 <strtol+0xac>
			any = -1;
		} else {
			any = 1;
   1baae:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1bab0:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1bab4:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1bab8:	e7eb      	b.n	1ba92 <strtol+0x5a>
{
   1baba:	4625      	mov	r5, r4
   1babc:	e7c1      	b.n	1ba42 <strtol+0xa>
	} else if (c == '+') {
   1babe:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1bac0:	bf04      	itt	eq
   1bac2:	1cac      	addeq	r4, r5, #2
   1bac4:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   1bac6:	2100      	movs	r1, #0
   1bac8:	e7c9      	b.n	1ba5e <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1baca:	f043 0520 	orr.w	r5, r3, #32
   1bace:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1bad0:	2d19      	cmp	r5, #25
   1bad2:	d80a      	bhi.n	1baea <strtol+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1bad4:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1bad8:	2d1a      	cmp	r5, #26
   1bada:	bf34      	ite	cc
   1badc:	2537      	movcc	r5, #55	; 0x37
   1bade:	2557      	movcs	r5, #87	; 0x57
   1bae0:	1b5b      	subs	r3, r3, r5
   1bae2:	e7db      	b.n	1ba9c <strtol+0x64>
			any = -1;
   1bae4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1bae8:	e7e4      	b.n	1bab4 <strtol+0x7c>
		}
	}

	if (any < 0) {
   1baea:	1c73      	adds	r3, r6, #1
   1baec:	d107      	bne.n	1bafe <strtol+0xc6>
   1baee:	f7fd ff8d 	bl	19a0c <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1baf2:	2326      	movs	r3, #38	; 0x26
   1baf4:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1baf6:	4640      	mov	r0, r8
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1baf8:	b937      	cbnz	r7, 1bb08 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1bafa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1bafe:	b101      	cbz	r1, 1bb02 <strtol+0xca>
		acc = -acc;
   1bb00:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1bb02:	2f00      	cmp	r7, #0
   1bb04:	d0f9      	beq.n	1bafa <strtol+0xc2>
		*endptr = (char *)(any ? s - 1 : nptr);
   1bb06:	b10e      	cbz	r6, 1bb0c <strtol+0xd4>
   1bb08:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   1bb0c:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   1bb10:	e7f3      	b.n	1bafa <strtol+0xc2>
	if (base == 0) {
   1bb12:	2330      	movs	r3, #48	; 0x30
   1bb14:	2a00      	cmp	r2, #0
   1bb16:	d1b0      	bne.n	1ba7a <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1bb18:	2208      	movs	r2, #8
   1bb1a:	e7ae      	b.n	1ba7a <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1bb1c:	2b30      	cmp	r3, #48	; 0x30
   1bb1e:	d0a4      	beq.n	1ba6a <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1bb20:	220a      	movs	r2, #10
   1bb22:	e7aa      	b.n	1ba7a <strtol+0x42>

0001bb24 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   1bb24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bb28:	4684      	mov	ip, r0
   1bb2a:	460f      	mov	r7, r1
	register const char *s = nptr;
   1bb2c:	4605      	mov	r5, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   1bb2e:	462c      	mov	r4, r5
   1bb30:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1bb34:	2b20      	cmp	r3, #32
   1bb36:	d035      	beq.n	1bba4 <strtoul+0x80>
   1bb38:	f1a3 0109 	sub.w	r1, r3, #9
   1bb3c:	2904      	cmp	r1, #4
   1bb3e:	d931      	bls.n	1bba4 <strtoul+0x80>
	} while (isspace(c));
	if (c == '-') {
   1bb40:	2b2d      	cmp	r3, #45	; 0x2d
   1bb42:	d131      	bne.n	1bba8 <strtoul+0x84>
		neg = 1;
   1bb44:	f04f 0e01 	mov.w	lr, #1
		c = *s++;
   1bb48:	786b      	ldrb	r3, [r5, #1]
   1bb4a:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1bb4c:	2a00      	cmp	r2, #0
   1bb4e:	d05e      	beq.n	1bc0e <strtoul+0xea>
   1bb50:	2a10      	cmp	r2, #16
   1bb52:	d109      	bne.n	1bb68 <strtoul+0x44>
   1bb54:	2b30      	cmp	r3, #48	; 0x30
   1bb56:	d107      	bne.n	1bb68 <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1bb58:	7823      	ldrb	r3, [r4, #0]
   1bb5a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1bb5e:	2b58      	cmp	r3, #88	; 0x58
   1bb60:	d150      	bne.n	1bc04 <strtoul+0xe0>
		c = s[1];
		s += 2;
		base = 16;
   1bb62:	2210      	movs	r2, #16
		c = s[1];
   1bb64:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1bb66:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   1bb68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1bb6c:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1bb70:	2600      	movs	r6, #0
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   1bb72:	fb02 f801 	mul.w	r8, r2, r1
	for (acc = 0, any = 0;; c = *s++) {
   1bb76:	4630      	mov	r0, r6
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   1bb78:	ea6f 0808 	mvn.w	r8, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1bb7c:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1bb80:	2d09      	cmp	r5, #9
   1bb82:	d818      	bhi.n	1bbb6 <strtoul+0x92>
			c -= '0';
   1bb84:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1bb86:	429a      	cmp	r2, r3
   1bb88:	dd25      	ble.n	1bbd6 <strtoul+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1bb8a:	2e00      	cmp	r6, #0
   1bb8c:	db20      	blt.n	1bbd0 <strtoul+0xac>
   1bb8e:	4288      	cmp	r0, r1
   1bb90:	d81e      	bhi.n	1bbd0 <strtoul+0xac>
   1bb92:	d101      	bne.n	1bb98 <strtoul+0x74>
   1bb94:	4543      	cmp	r3, r8
   1bb96:	dc1b      	bgt.n	1bbd0 <strtoul+0xac>
			any = -1;
		} else {
			any = 1;
   1bb98:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1bb9a:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1bb9e:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1bba2:	e7eb      	b.n	1bb7c <strtoul+0x58>
{
   1bba4:	4625      	mov	r5, r4
   1bba6:	e7c2      	b.n	1bb2e <strtoul+0xa>
	} else if (c == '+') {
   1bba8:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1bbaa:	bf04      	itt	eq
   1bbac:	1cac      	addeq	r4, r5, #2
   1bbae:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   1bbb0:	f04f 0e00 	mov.w	lr, #0
   1bbb4:	e7ca      	b.n	1bb4c <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1bbb6:	f043 0520 	orr.w	r5, r3, #32
   1bbba:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1bbbc:	2d19      	cmp	r5, #25
   1bbbe:	d80a      	bhi.n	1bbd6 <strtoul+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1bbc0:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1bbc4:	2d1a      	cmp	r5, #26
   1bbc6:	bf34      	ite	cc
   1bbc8:	2537      	movcc	r5, #55	; 0x37
   1bbca:	2557      	movcs	r5, #87	; 0x57
   1bbcc:	1b5b      	subs	r3, r3, r5
   1bbce:	e7da      	b.n	1bb86 <strtoul+0x62>
			any = -1;
   1bbd0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1bbd4:	e7e3      	b.n	1bb9e <strtoul+0x7a>
		}
	}
	if (any < 0) {
   1bbd6:	2e00      	cmp	r6, #0
   1bbd8:	da08      	bge.n	1bbec <strtoul+0xc8>
   1bbda:	f7fd ff17 	bl	19a0c <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   1bbde:	2326      	movs	r3, #38	; 0x26
   1bbe0:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   1bbe2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   1bbe6:	b947      	cbnz	r7, 1bbfa <strtoul+0xd6>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1bbe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   1bbec:	f1be 0f00 	cmp.w	lr, #0
   1bbf0:	d000      	beq.n	1bbf4 <strtoul+0xd0>
		acc = -acc;
   1bbf2:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1bbf4:	2f00      	cmp	r7, #0
   1bbf6:	d0f7      	beq.n	1bbe8 <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   1bbf8:	b10e      	cbz	r6, 1bbfe <strtoul+0xda>
   1bbfa:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   1bbfe:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   1bc02:	e7f1      	b.n	1bbe8 <strtoul+0xc4>
	if (base == 0) {
   1bc04:	2330      	movs	r3, #48	; 0x30
   1bc06:	2a00      	cmp	r2, #0
   1bc08:	d1ae      	bne.n	1bb68 <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   1bc0a:	2208      	movs	r2, #8
   1bc0c:	e7ac      	b.n	1bb68 <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   1bc0e:	2b30      	cmp	r3, #48	; 0x30
   1bc10:	d0a2      	beq.n	1bb58 <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   1bc12:	220a      	movs	r2, #10
   1bc14:	e7a8      	b.n	1bb68 <strtoul+0x44>

0001bc16 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   1bc16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   1bc1a:	780f      	ldrb	r7, [r1, #0]
{
   1bc1c:	4605      	mov	r5, r0
	if (c != 0) {
   1bc1e:	b187      	cbz	r7, 1bc42 <strstr+0x2c>
	c = *find++;
   1bc20:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   1bc22:	4620      	mov	r0, r4
   1bc24:	f000 f83f 	bl	1bca6 <strlen>
   1bc28:	4680      	mov	r8, r0
		do {
			do {
				sc = *s++;
   1bc2a:	462e      	mov	r6, r5
   1bc2c:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   1bc30:	b163      	cbz	r3, 1bc4c <strstr+0x36>
					return NULL;
				}
			} while (sc != c);
   1bc32:	429f      	cmp	r7, r3
   1bc34:	d108      	bne.n	1bc48 <strstr+0x32>
		} while (strncmp(s, find, len) != 0);
   1bc36:	4642      	mov	r2, r8
   1bc38:	4621      	mov	r1, r4
   1bc3a:	4630      	mov	r0, r6
   1bc3c:	f000 f846 	bl	1bccc <strncmp>
   1bc40:	b910      	cbnz	r0, 1bc48 <strstr+0x32>
	s--;
	}
	return (char *)s;
}
   1bc42:	4628      	mov	r0, r5
   1bc44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   1bc48:	4635      	mov	r5, r6
   1bc4a:	e7ee      	b.n	1bc2a <strstr+0x14>
					return NULL;
   1bc4c:	461d      	mov	r5, r3
   1bc4e:	e7f8      	b.n	1bc42 <strstr+0x2c>

0001bc50 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1bc50:	4603      	mov	r3, r0
   1bc52:	3901      	subs	r1, #1
   1bc54:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1bc58:	b90a      	cbnz	r2, 1bc5e <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1bc5a:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1bc5c:	4770      	bx	lr
		*d = *s;
   1bc5e:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1bc62:	e7f7      	b.n	1bc54 <strcpy+0x4>

0001bc64 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1bc64:	b570      	push	{r4, r5, r6, lr}
   1bc66:	4605      	mov	r5, r0
   1bc68:	3901      	subs	r1, #1
   1bc6a:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1bc6c:	b142      	cbz	r2, 1bc80 <strncpy+0x1c>
   1bc6e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1bc72:	1e56      	subs	r6, r2, #1
   1bc74:	b92b      	cbnz	r3, 1bc82 <strncpy+0x1e>
   1bc76:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   1bc78:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   1bc7c:	42a2      	cmp	r2, r4
   1bc7e:	d1fb      	bne.n	1bc78 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   1bc80:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   1bc82:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   1bc86:	4632      	mov	r2, r6
   1bc88:	e7ef      	b.n	1bc6a <strncpy+0x6>

0001bc8a <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   1bc8a:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   1bc8c:	7802      	ldrb	r2, [r0, #0]
   1bc8e:	4603      	mov	r3, r0
   1bc90:	428a      	cmp	r2, r1
   1bc92:	f100 0001 	add.w	r0, r0, #1
   1bc96:	d004      	beq.n	1bca2 <strchr+0x18>
   1bc98:	2a00      	cmp	r2, #0
   1bc9a:	d1f7      	bne.n	1bc8c <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   1bc9c:	2900      	cmp	r1, #0
   1bc9e:	bf18      	it	ne
   1bca0:	2300      	movne	r3, #0
}
   1bca2:	4618      	mov	r0, r3
   1bca4:	4770      	bx	lr

0001bca6 <strlen>:
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
	size_t n = 0;
   1bca6:	2300      	movs	r3, #0

	while (*s != '\0') {
   1bca8:	5cc2      	ldrb	r2, [r0, r3]
   1bcaa:	b90a      	cbnz	r2, 1bcb0 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1bcac:	4618      	mov	r0, r3
   1bcae:	4770      	bx	lr
		n++;
   1bcb0:	3301      	adds	r3, #1
   1bcb2:	e7f9      	b.n	1bca8 <strlen+0x2>

0001bcb4 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1bcb4:	3801      	subs	r0, #1
   1bcb6:	3901      	subs	r1, #1
   1bcb8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1bcbc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1bcc0:	4293      	cmp	r3, r2
   1bcc2:	d101      	bne.n	1bcc8 <strcmp+0x14>
   1bcc4:	2b00      	cmp	r3, #0
   1bcc6:	d1f7      	bne.n	1bcb8 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1bcc8:	1a98      	subs	r0, r3, r2
   1bcca:	4770      	bx	lr

0001bccc <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1bccc:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1bcce:	2400      	movs	r4, #0
   1bcd0:	42a2      	cmp	r2, r4
   1bcd2:	d008      	beq.n	1bce6 <strncmp+0x1a>
   1bcd4:	5d03      	ldrb	r3, [r0, r4]
   1bcd6:	5d0d      	ldrb	r5, [r1, r4]
   1bcd8:	42ab      	cmp	r3, r5
   1bcda:	d102      	bne.n	1bce2 <strncmp+0x16>
   1bcdc:	3401      	adds	r4, #1
   1bcde:	2b00      	cmp	r3, #0
   1bce0:	d1f6      	bne.n	1bcd0 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1bce2:	1b58      	subs	r0, r3, r5
   1bce4:	e000      	b.n	1bce8 <strncmp+0x1c>
   1bce6:	2000      	movs	r0, #0
}
   1bce8:	bd30      	pop	{r4, r5, pc}

0001bcea <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1bcea:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1bcec:	b15a      	cbz	r2, 1bd06 <memcmp+0x1c>
   1bcee:	3901      	subs	r1, #1
   1bcf0:	1884      	adds	r4, r0, r2
   1bcf2:	f810 2b01 	ldrb.w	r2, [r0], #1
   1bcf6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1bcfa:	42a0      	cmp	r0, r4
   1bcfc:	d001      	beq.n	1bd02 <memcmp+0x18>
   1bcfe:	429a      	cmp	r2, r3
   1bd00:	d0f7      	beq.n	1bcf2 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1bd02:	1ad0      	subs	r0, r2, r3
}
   1bd04:	bd10      	pop	{r4, pc}
		return 0;
   1bd06:	4610      	mov	r0, r2
   1bd08:	e7fc      	b.n	1bd04 <memcmp+0x1a>

0001bd0a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1bd0a:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1bd0c:	ea81 0400 	eor.w	r4, r1, r0
   1bd10:	07a5      	lsls	r5, r4, #30
   1bd12:	4603      	mov	r3, r0
   1bd14:	d00b      	beq.n	1bd2e <memcpy+0x24>
   1bd16:	3b01      	subs	r3, #1
   1bd18:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1bd1a:	4291      	cmp	r1, r2
   1bd1c:	d11a      	bne.n	1bd54 <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1bd1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1bd20:	2a00      	cmp	r2, #0
   1bd22:	d0fc      	beq.n	1bd1e <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1bd24:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1bd28:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1bd2a:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   1bd2e:	079c      	lsls	r4, r3, #30
   1bd30:	d1f6      	bne.n	1bd20 <memcpy+0x16>
   1bd32:	0895      	lsrs	r5, r2, #2
   1bd34:	00ac      	lsls	r4, r5, #2
   1bd36:	1f1e      	subs	r6, r3, #4
   1bd38:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1bd3a:	42b9      	cmp	r1, r7
   1bd3c:	d105      	bne.n	1bd4a <memcpy+0x40>
   1bd3e:	f06f 0603 	mvn.w	r6, #3
   1bd42:	4423      	add	r3, r4
   1bd44:	fb06 2205 	mla	r2, r6, r5, r2
   1bd48:	e7e5      	b.n	1bd16 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1bd4a:	f851 cb04 	ldr.w	ip, [r1], #4
   1bd4e:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
   1bd52:	e7f2      	b.n	1bd3a <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
   1bd54:	f811 4b01 	ldrb.w	r4, [r1], #1
   1bd58:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1bd5c:	e7dd      	b.n	1bd1a <memcpy+0x10>

0001bd5e <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1bd5e:	4603      	mov	r3, r0
{
   1bd60:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   1bd62:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1bd64:	079c      	lsls	r4, r3, #30
   1bd66:	d110      	bne.n	1bd8a <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1bd68:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1bd6c:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1bd70:	0894      	lsrs	r4, r2, #2
   1bd72:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   1bd76:	42b3      	cmp	r3, r6
   1bd78:	d10d      	bne.n	1bd96 <memset+0x38>
   1bd7a:	f06f 0503 	mvn.w	r5, #3
   1bd7e:	fb05 2404 	mla	r4, r5, r4, r2
   1bd82:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1bd84:	42a3      	cmp	r3, r4
   1bd86:	d109      	bne.n	1bd9c <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1bd88:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1bd8a:	2a00      	cmp	r2, #0
   1bd8c:	d0fc      	beq.n	1bd88 <memset+0x2a>
		*(d_byte++) = c_byte;
   1bd8e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1bd92:	3a01      	subs	r2, #1
   1bd94:	e7e6      	b.n	1bd64 <memset+0x6>
		*(d_word++) = c_word;
   1bd96:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   1bd9a:	e7ec      	b.n	1bd76 <memset+0x18>
		*(d_byte++) = c_byte;
   1bd9c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1bda0:	e7f0      	b.n	1bd84 <memset+0x26>

0001bda2 <_to_x>:
{
   1bda2:	4603      	mov	r3, r0
   1bda4:	b5f0      	push	{r4, r5, r6, r7, lr}
		unsigned int d = n % base;
   1bda6:	fbb1 f7f2 	udiv	r7, r1, r2
   1bdaa:	fb02 1517 	mls	r5, r2, r7, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1bdae:	2d09      	cmp	r5, #9
   1bdb0:	bf8c      	ite	hi
   1bdb2:	2627      	movhi	r6, #39	; 0x27
   1bdb4:	2600      	movls	r6, #0
   1bdb6:	461c      	mov	r4, r3
   1bdb8:	3530      	adds	r5, #48	; 0x30
   1bdba:	4435      	add	r5, r6
	} while (n);
   1bdbc:	4291      	cmp	r1, r2
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1bdbe:	f804 5b01 	strb.w	r5, [r4], #1
	} while (n);
   1bdc2:	d206      	bcs.n	1bdd2 <_to_x+0x30>
	*buf = 0;
   1bdc4:	2200      	movs	r2, #0
   1bdc6:	7022      	strb	r2, [r4, #0]
	len = buf - start;
   1bdc8:	1a24      	subs	r4, r4, r0
	for (buf--; buf > start; buf--, start++) {
   1bdca:	4283      	cmp	r3, r0
   1bdcc:	d804      	bhi.n	1bdd8 <_to_x+0x36>
}
   1bdce:	4620      	mov	r0, r4
   1bdd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n /= base;
   1bdd2:	4639      	mov	r1, r7
   1bdd4:	4623      	mov	r3, r4
   1bdd6:	e7e6      	b.n	1bda6 <_to_x+0x4>
		char tmp = *buf;
   1bdd8:	781a      	ldrb	r2, [r3, #0]
		*buf = *start;
   1bdda:	7801      	ldrb	r1, [r0, #0]
   1bddc:	f803 1901 	strb.w	r1, [r3], #-1
		*start = tmp;
   1bde0:	f800 2b01 	strb.w	r2, [r0], #1
   1bde4:	e7f1      	b.n	1bdca <_to_x+0x28>

0001bde6 <_rlrshift>:
	*v = (*v & 1) + (*v >> 1);
   1bde6:	2100      	movs	r1, #0
{
   1bde8:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
   1bdea:	e9d0 6500 	ldrd	r6, r5, [r0]
   1bdee:	0872      	lsrs	r2, r6, #1
   1bdf0:	f006 0301 	and.w	r3, r6, #1
   1bdf4:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   1bdf8:	189b      	adds	r3, r3, r2
   1bdfa:	ea4f 0455 	mov.w	r4, r5, lsr #1
   1bdfe:	eb44 0101 	adc.w	r1, r4, r1
   1be02:	e9c0 3100 	strd	r3, r1, [r0]
}
   1be06:	bd70      	pop	{r4, r5, r6, pc}

0001be08 <_ldiv5>:
{
   1be08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint64_t rem = *v, quot = 0U, q;
   1be0c:	e9d0 3200 	ldrd	r3, r2, [r0]
		q = (uint64_t)(hi / 5U) << shifts[i];
   1be10:	2705      	movs	r7, #5
	rem += 2U;
   1be12:	3302      	adds	r3, #2
   1be14:	f142 0200 	adc.w	r2, r2, #0
		q = (uint64_t)(hi / 5U) << shifts[i];
   1be18:	fbb2 fef7 	udiv	lr, r2, r7
   1be1c:	f04f 0c00 	mov.w	ip, #0
		rem -= q * 5U;
   1be20:	fb07 f10e 	mul.w	r1, r7, lr
   1be24:	ebb3 060c 	subs.w	r6, r3, ip
   1be28:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
   1be2c:	08f2      	lsrs	r2, r6, #3
   1be2e:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
   1be32:	fbb2 f1f7 	udiv	r1, r2, r7
   1be36:	00ca      	lsls	r2, r1, #3
		quot += q;
   1be38:	eb1c 0802 	adds.w	r8, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1be3c:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
   1be40:	eb4e 0903 	adc.w	r9, lr, r3
		rem -= q * 5U;
   1be44:	fba2 2307 	umull	r2, r3, r2, r7
   1be48:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1be4a:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
   1be4e:	eb18 0403 	adds.w	r4, r8, r3
   1be52:	f149 0500 	adc.w	r5, r9, #0
	*v = quot;
   1be56:	e9c0 4500 	strd	r4, r5, [r0]
}
   1be5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001be5e <_get_digit>:
	if (*digit_count > 0) {
   1be5e:	680b      	ldr	r3, [r1, #0]
{
   1be60:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   1be62:	2b00      	cmp	r3, #0
   1be64:	dd10      	ble.n	1be88 <_get_digit+0x2a>
		*digit_count -= 1;
   1be66:	3b01      	subs	r3, #1
   1be68:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
   1be6a:	210a      	movs	r1, #10
   1be6c:	6802      	ldr	r2, [r0, #0]
   1be6e:	6844      	ldr	r4, [r0, #4]
   1be70:	fba2 5601 	umull	r5, r6, r2, r1
   1be74:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   1be78:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   1be7c:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   1be80:	0f31      	lsrs	r1, r6, #28
   1be82:	3130      	adds	r1, #48	; 0x30
}
   1be84:	4608      	mov	r0, r1
   1be86:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   1be88:	2130      	movs	r1, #48	; 0x30
   1be8a:	e7fb      	b.n	1be84 <_get_digit+0x26>

0001be8c <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   1be8c:	684b      	ldr	r3, [r1, #4]
   1be8e:	2b01      	cmp	r3, #1
   1be90:	dd07      	ble.n	1bea2 <sprintf_out+0x16>
		*(p->ptr) = c;
   1be92:	680b      	ldr	r3, [r1, #0]
   1be94:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   1be96:	680b      	ldr	r3, [r1, #0]
   1be98:	3301      	adds	r3, #1
   1be9a:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   1be9c:	684b      	ldr	r3, [r1, #4]
   1be9e:	3b01      	subs	r3, #1
   1bea0:	604b      	str	r3, [r1, #4]
}
   1bea2:	2000      	movs	r0, #0
   1bea4:	4770      	bx	lr

0001bea6 <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   1bea6:	b508      	push	{r3, lr}
	net_if_init();
   1bea8:	f7f3 f896 	bl	efd8 <net_if_init>
	net_if_post_init();
   1beac:	f7f3 f8a8 	bl	f000 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   1beb0:	2000      	movs	r0, #0
   1beb2:	bd08      	pop	{r3, pc}

0001beb4 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   1beb4:	b110      	cbz	r0, 1bebc <net_if_l2+0x8>
   1beb6:	6800      	ldr	r0, [r0, #0]
   1beb8:	b100      	cbz	r0, 1bebc <net_if_l2+0x8>
	return iface->if_dev->l2;
   1beba:	6840      	ldr	r0, [r0, #4]
}
   1bebc:	4770      	bx	lr

0001bebe <l2_flags_get>:
{
   1bebe:	b510      	push	{r4, lr}
   1bec0:	4602      	mov	r2, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   1bec2:	f7ff fff7 	bl	1beb4 <net_if_l2>
   1bec6:	b128      	cbz	r0, 1bed4 <l2_flags_get+0x16>
   1bec8:	68c3      	ldr	r3, [r0, #12]
   1beca:	b11b      	cbz	r3, 1bed4 <l2_flags_get+0x16>
}
   1becc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   1bed0:	4610      	mov	r0, r2
   1bed2:	4718      	bx	r3
}
   1bed4:	2000      	movs	r0, #0
   1bed6:	bd10      	pop	{r4, pc}

0001bed8 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bed8:	e8d0 0faf 	lda	r0, [r0]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1bedc:	4108      	asrs	r0, r1
}
   1bede:	f000 0001 	and.w	r0, r0, #1
   1bee2:	4770      	bx	lr

0001bee4 <net_if_up>:
{
   1bee4:	b510      	push	{r4, lr}
   1bee6:	4604      	mov	r4, r0
	return atomic_test_bit(iface->if_dev->flags, value);
   1bee8:	6800      	ldr	r0, [r0, #0]
   1beea:	2100      	movs	r1, #0
   1beec:	300c      	adds	r0, #12
   1beee:	f7ff fff3 	bl	1bed8 <atomic_test_bit>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1bef2:	b9e8      	cbnz	r0, 1bf30 <net_if_up+0x4c>
	     net_if_is_socket_offloaded(iface))) {
   1bef4:	6823      	ldr	r3, [r4, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1bef6:	7e9a      	ldrb	r2, [r3, #26]
   1bef8:	b14a      	cbz	r2, 1bf0e <net_if_up+0x2a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1befa:	330c      	adds	r3, #12
   1befc:	e8d3 2fef 	ldaex	r2, [r3]
   1bf00:	f042 0201 	orr.w	r2, r2, #1
   1bf04:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1bf08:	2900      	cmp	r1, #0
   1bf0a:	d1f7      	bne.n	1befc <net_if_up+0x18>
}
   1bf0c:	bd10      	pop	{r4, pc}
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1bf0e:	4620      	mov	r0, r4
   1bf10:	f7ff ffd0 	bl	1beb4 <net_if_l2>
   1bf14:	b970      	cbnz	r0, 1bf34 <net_if_up+0x50>
   1bf16:	6823      	ldr	r3, [r4, #0]
   1bf18:	330c      	adds	r3, #12
   1bf1a:	e8d3 2fef 	ldaex	r2, [r3]
   1bf1e:	f042 0201 	orr.w	r2, r2, #1
   1bf22:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1bf26:	2900      	cmp	r1, #0
   1bf28:	d1f7      	bne.n	1bf1a <net_if_up+0x36>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   1bf2a:	4620      	mov	r0, r4
   1bf2c:	f7ff ffc7 	bl	1bebe <l2_flags_get>
		return 0;
   1bf30:	2000      	movs	r0, #0
   1bf32:	e7eb      	b.n	1bf0c <net_if_up+0x28>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1bf34:	6883      	ldr	r3, [r0, #8]
   1bf36:	2b00      	cmp	r3, #0
   1bf38:	d0ed      	beq.n	1bf16 <net_if_up+0x32>
	status = net_if_l2(iface)->enable(iface, true);
   1bf3a:	2101      	movs	r1, #1
   1bf3c:	4620      	mov	r0, r4
   1bf3e:	4798      	blx	r3
	if (status < 0) {
   1bf40:	2800      	cmp	r0, #0
   1bf42:	dae8      	bge.n	1bf16 <net_if_up+0x32>
   1bf44:	e7e2      	b.n	1bf0c <net_if_up+0x28>

0001bf46 <net_byte_to_hex>:
{
   1bf46:	b570      	push	{r4, r5, r6, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1bf48:	090e      	lsrs	r6, r1, #4
		if (i == 0 && !pad && !val) {
   1bf4a:	b1b3      	cbz	r3, 1bf7a <net_byte_to_hex+0x34>
		if (val < 10) {
   1bf4c:	2e09      	cmp	r6, #9
			*ptr++ = (char) (val - 10 + base);
   1bf4e:	b274      	sxtb	r4, r6
   1bf50:	bf86      	itte	hi
   1bf52:	f1a2 030a 	subhi.w	r3, r2, #10
   1bf56:	18e4      	addhi	r4, r4, r3
			*ptr++ = (char) (val + '0');
   1bf58:	3430      	addls	r4, #48	; 0x30
   1bf5a:	1c45      	adds	r5, r0, #1
   1bf5c:	7004      	strb	r4, [r0, #0]
   1bf5e:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
   1bf62:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
   1bf64:	b24b      	sxtb	r3, r1
   1bf66:	bf83      	ittte	hi
   1bf68:	3a0a      	subhi	r2, #10
   1bf6a:	189b      	addhi	r3, r3, r2
   1bf6c:	b2db      	uxtbhi	r3, r3
			*ptr++ = (char) (val + '0');
   1bf6e:	3330      	addls	r3, #48	; 0x30
   1bf70:	702b      	strb	r3, [r5, #0]
	*ptr = '\0';
   1bf72:	2300      	movs	r3, #0
   1bf74:	706b      	strb	r3, [r5, #1]
   1bf76:	1c68      	adds	r0, r5, #1
}
   1bf78:	bd70      	pop	{r4, r5, r6, pc}
		if (i == 0 && !pad && !val) {
   1bf7a:	2e00      	cmp	r6, #0
   1bf7c:	d1e6      	bne.n	1bf4c <net_byte_to_hex+0x6>
   1bf7e:	4605      	mov	r5, r0
   1bf80:	e7ed      	b.n	1bf5e <net_byte_to_hex+0x18>

0001bf82 <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, u16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   1bf82:	e9d0 2300 	ldrd	r2, r3, [r0]
   1bf86:	1a9b      	subs	r3, r3, r2
   1bf88:	2b01      	cmp	r3, #1
{
   1bf8a:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   1bf8c:	d90c      	bls.n	1bfa8 <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   1bf8e:	4614      	mov	r4, r2
   1bf90:	1c53      	adds	r3, r2, #1
   1bf92:	6003      	str	r3, [r0, #0]
   1bf94:	f814 3b02 	ldrb.w	r3, [r4], #2
   1bf98:	021b      	lsls	r3, r3, #8
   1bf9a:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   1bf9c:	6004      	str	r4, [r0, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   1bf9e:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   1bfa0:	7852      	ldrb	r2, [r2, #1]
   1bfa2:	4313      	orrs	r3, r2
   1bfa4:	800b      	strh	r3, [r1, #0]
}
   1bfa6:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1bfa8:	f06f 0015 	mvn.w	r0, #21
   1bfac:	e7fb      	b.n	1bfa6 <unpack_uint16+0x24>

0001bfae <packet_length_decode>:
int packet_length_decode(struct buf_ctx *buf, u32_t *length)
{
	u8_t shift = 0U;
	u8_t bytes = 0U;

	*length = 0U;
   1bfae:	2300      	movs	r3, #0
{
   1bfb0:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		if (bytes > MQTT_MAX_LENGTH_BYTES) {
			return -EINVAL;
		}

		if (buf->cur >= buf->end) {
   1bfb2:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   1bfb4:	600b      	str	r3, [r1, #0]
		if (buf->cur >= buf->end) {
   1bfb6:	6804      	ldr	r4, [r0, #0]
   1bfb8:	42bc      	cmp	r4, r7
   1bfba:	d215      	bcs.n	1bfe8 <packet_length_decode+0x3a>
			return -EAGAIN;
		}

		*length += ((u32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   1bfbc:	4625      	mov	r5, r4
   1bfbe:	f815 2b01 	ldrb.w	r2, [r5], #1
   1bfc2:	680e      	ldr	r6, [r1, #0]
   1bfc4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
								<< shift;
   1bfc8:	409a      	lsls	r2, r3
		*length += ((u32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   1bfca:	4432      	add	r2, r6
   1bfcc:	600a      	str	r2, [r1, #0]
		shift += MQTT_LENGTH_SHIFT;
		bytes++;
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   1bfce:	6005      	str	r5, [r0, #0]
   1bfd0:	f994 2000 	ldrsb.w	r2, [r4]
   1bfd4:	2a00      	cmp	r2, #0
   1bfd6:	db01      	blt.n	1bfdc <packet_length_decode+0x2e>

	MQTT_TRC("length:0x%08x", *length);

	return 0;
   1bfd8:	2000      	movs	r0, #0
}
   1bfda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (bytes > MQTT_MAX_LENGTH_BYTES) {
   1bfdc:	3307      	adds	r3, #7
   1bfde:	2b23      	cmp	r3, #35	; 0x23
   1bfe0:	d1e9      	bne.n	1bfb6 <packet_length_decode+0x8>
			return -EINVAL;
   1bfe2:	f06f 0015 	mvn.w	r0, #21
   1bfe6:	e7f8      	b.n	1bfda <packet_length_decode+0x2c>
			return -EAGAIN;
   1bfe8:	f06f 000a 	mvn.w	r0, #10
   1bfec:	e7f5      	b.n	1bfda <packet_length_decode+0x2c>

0001bfee <fixed_header_decode>:

int fixed_header_decode(struct buf_ctx *buf, u8_t *type_and_flags,
			u32_t *length)
{
   1bfee:	b430      	push	{r4, r5}
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   1bff0:	e9d0 3500 	ldrd	r3, r5, [r0]
   1bff4:	429d      	cmp	r5, r3
   1bff6:	d007      	beq.n	1c008 <fixed_header_decode+0x1a>
	*val = *(buf->cur++);
   1bff8:	1c5d      	adds	r5, r3, #1
   1bffa:	6005      	str	r5, [r0, #0]
   1bffc:	781b      	ldrb	r3, [r3, #0]
   1bffe:	700b      	strb	r3, [r1, #0]
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   1c000:	bc30      	pop	{r4, r5}
	return packet_length_decode(buf, length);
   1c002:	4611      	mov	r1, r2
   1c004:	f7ff bfd3 	b.w	1bfae <packet_length_decode>
}
   1c008:	f06f 0015 	mvn.w	r0, #21
   1c00c:	bc30      	pop	{r4, r5}
   1c00e:	4770      	bx	lr

0001c010 <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   1c010:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   1c012:	e9d1 3500 	ldrd	r3, r5, [r1]
   1c016:	429d      	cmp	r5, r3
   1c018:	d102      	bne.n	1c020 <connect_ack_decode+0x10>
		return -EINVAL;
   1c01a:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   1c01e:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   1c020:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   1c022:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   1c024:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   1c026:	d0f8      	beq.n	1c01a <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   1c028:	461d      	mov	r5, r3
   1c02a:	f815 4b02 	ldrb.w	r4, [r5], #2
   1c02e:	600d      	str	r5, [r1, #0]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   1c030:	f890 105e 	ldrb.w	r1, [r0, #94]	; 0x5e
	*val = *(buf->cur++);
   1c034:	785b      	ldrb	r3, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   1c036:	2904      	cmp	r1, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   1c038:	bf04      	itt	eq
   1c03a:	f004 0401 	andeq.w	r4, r4, #1
		param->session_present_flag =
   1c03e:	7014      	strbeq	r4, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   1c040:	7053      	strb	r3, [r2, #1]
	return 0;
   1c042:	2000      	movs	r0, #0
   1c044:	e7eb      	b.n	1c01e <connect_ack_decode+0xe>

0001c046 <publish_decode>:

int publish_decode(u8_t flags, u32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   1c046:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c04a:	461c      	mov	r4, r3
	int err_code;
	u32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   1c04c:	7d9b      	ldrb	r3, [r3, #22]
{
   1c04e:	4688      	mov	r8, r1
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
   1c050:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   1c054:	f360 0341 	bfi	r3, r0, #1, #1
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   1c058:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1c05c:	7220      	strb	r0, [r4, #8]
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
   1c05e:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   1c060:	f10d 0106 	add.w	r1, sp, #6
   1c064:	4610      	mov	r0, r2
{
   1c066:	4616      	mov	r6, r2
	err_code = unpack_uint16(buf, &utf8_strlen);
   1c068:	f7ff ff8b 	bl	1bf82 <unpack_uint16>
	if (err_code != 0) {
   1c06c:	4607      	mov	r7, r0
   1c06e:	b940      	cbnz	r0, 1c082 <publish_decode+0x3c>
	if ((buf->end - buf->cur) < utf8_strlen) {
   1c070:	6833      	ldr	r3, [r6, #0]
   1c072:	6872      	ldr	r2, [r6, #4]
   1c074:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   1c078:	1ad2      	subs	r2, r2, r3
   1c07a:	42aa      	cmp	r2, r5
   1c07c:	da05      	bge.n	1c08a <publish_decode+0x44>
		return -EINVAL;
   1c07e:	f06f 0715 	mvn.w	r7, #21

	param->message.payload.data = NULL;
	param->message.payload.len = var_length - var_header_length;

	return 0;
}
   1c082:	4638      	mov	r0, r7
   1c084:	b002      	add	sp, #8
   1c086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	str->size = utf8_strlen;
   1c08a:	6065      	str	r5, [r4, #4]
	if (utf8_strlen) {
   1c08c:	b15d      	cbz	r5, 1c0a6 <publish_decode+0x60>
		str->utf8 = buf->cur;
   1c08e:	6023      	str	r3, [r4, #0]
		buf->cur += utf8_strlen;
   1c090:	442b      	add	r3, r5
   1c092:	6033      	str	r3, [r6, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   1c094:	7a23      	ldrb	r3, [r4, #8]
   1c096:	b943      	cbnz	r3, 1c0aa <publish_decode+0x64>
	var_header_length = param->message.topic.topic.size + sizeof(u16_t);
   1c098:	3502      	adds	r5, #2
	param->message.payload.data = NULL;
   1c09a:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   1c09c:	eba8 0505 	sub.w	r5, r8, r5
	param->message.payload.data = NULL;
   1c0a0:	60e3      	str	r3, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   1c0a2:	6125      	str	r5, [r4, #16]
	return 0;
   1c0a4:	e7ed      	b.n	1c082 <publish_decode+0x3c>
		str->utf8 = NULL;
   1c0a6:	6025      	str	r5, [r4, #0]
	if (err_code != 0) {
   1c0a8:	e7f4      	b.n	1c094 <publish_decode+0x4e>
		err_code = unpack_uint16(buf, &param->message_id);
   1c0aa:	f104 0114 	add.w	r1, r4, #20
   1c0ae:	4630      	mov	r0, r6
   1c0b0:	f7ff ff67 	bl	1bf82 <unpack_uint16>
		if (err_code != 0) {
   1c0b4:	b908      	cbnz	r0, 1c0ba <publish_decode+0x74>
		var_header_length += sizeof(u16_t);
   1c0b6:	3504      	adds	r5, #4
   1c0b8:	e7ef      	b.n	1c09a <publish_decode+0x54>
   1c0ba:	4607      	mov	r7, r0
   1c0bc:	e7e1      	b.n	1c082 <publish_decode+0x3c>

0001c0be <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   1c0be:	f7ff bf60 	b.w	1bf82 <unpack_uint16>

0001c0c2 <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   1c0c2:	f7ff bf5e 	b.w	1bf82 <unpack_uint16>

0001c0c6 <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   1c0c6:	f7ff bf5c 	b.w	1bf82 <unpack_uint16>

0001c0ca <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   1c0ca:	f7ff bf5a 	b.w	1bf82 <unpack_uint16>

0001c0ce <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   1c0ce:	b538      	push	{r3, r4, r5, lr}
   1c0d0:	4605      	mov	r5, r0
   1c0d2:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   1c0d4:	f7ff ff55 	bl	1bf82 <unpack_uint16>
	if (err_code != 0) {
   1c0d8:	b930      	cbnz	r0, 1c0e8 <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   1c0da:	e9d5 2300 	ldrd	r2, r3, [r5]
   1c0de:	1a99      	subs	r1, r3, r2
	str->len = length;
   1c0e0:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   1c0e2:	b111      	cbz	r1, 1c0ea <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   1c0e4:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   1c0e6:	602b      	str	r3, [r5, #0]
}
   1c0e8:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   1c0ea:	6060      	str	r0, [r4, #4]
   1c0ec:	e7fc      	b.n	1c0e8 <subscribe_ack_decode+0x1a>

0001c0ee <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   1c0ee:	f7ff bf48 	b.w	1bf82 <unpack_uint16>

0001c0f2 <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   1c0f2:	e9d1 3200 	ldrd	r3, r2, [r1]
   1c0f6:	1ad2      	subs	r2, r2, r3
   1c0f8:	2a01      	cmp	r2, #1
   1c0fa:	d909      	bls.n	1c110 <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   1c0fc:	1c5a      	adds	r2, r3, #1
   1c0fe:	600a      	str	r2, [r1, #0]
   1c100:	0a02      	lsrs	r2, r0, #8
   1c102:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   1c104:	680b      	ldr	r3, [r1, #0]
   1c106:	1c5a      	adds	r2, r3, #1
   1c108:	600a      	str	r2, [r1, #0]
   1c10a:	7018      	strb	r0, [r3, #0]
	return 0;
   1c10c:	2000      	movs	r0, #0
   1c10e:	4770      	bx	lr
		return -ENOMEM;
   1c110:	f06f 000b 	mvn.w	r0, #11
}
   1c114:	4770      	bx	lr

0001c116 <pack_utf8_str>:
{
   1c116:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   1c118:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   1c11c:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   1c11e:	6840      	ldr	r0, [r0, #4]
   1c120:	1a9b      	subs	r3, r3, r2
   1c122:	1c82      	adds	r2, r0, #2
   1c124:	4293      	cmp	r3, r2
{
   1c126:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   1c128:	d30d      	bcc.n	1c146 <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   1c12a:	b280      	uxth	r0, r0
   1c12c:	f7ff ffe1 	bl	1c0f2 <pack_uint16>
	memcpy(buf->cur, str->utf8, str->size);
   1c130:	e9d5 1200 	ldrd	r1, r2, [r5]
   1c134:	6820      	ldr	r0, [r4, #0]
   1c136:	f7ff fde8 	bl	1bd0a <memcpy>
	return 0;
   1c13a:	2000      	movs	r0, #0
	buf->cur += str->size;
   1c13c:	6823      	ldr	r3, [r4, #0]
   1c13e:	686a      	ldr	r2, [r5, #4]
   1c140:	4413      	add	r3, r2
   1c142:	6023      	str	r3, [r4, #0]
}
   1c144:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   1c146:	f06f 000b 	mvn.w	r0, #11
   1c14a:	e7fb      	b.n	1c144 <pack_utf8_str+0x2e>

0001c14c <mqtt_encode_fixed_header>:
{
   1c14c:	b570      	push	{r4, r5, r6, lr}
	u32_t length = buf->cur - start;
   1c14e:	6815      	ldr	r5, [r2, #0]
   1c150:	1a6d      	subs	r5, r5, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   1c152:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
   1c156:	d227      	bcs.n	1c1a8 <mqtt_encode_fixed_header+0x5c>
   1c158:	462c      	mov	r4, r5
   1c15a:	2600      	movs	r6, #0
	} while (length > 0);
   1c15c:	09e4      	lsrs	r4, r4, #7
   1c15e:	b2f3      	uxtb	r3, r6
		if (buf != NULL) {
   1c160:	f106 0601 	add.w	r6, r6, #1
	} while (length > 0);
   1c164:	d1fa      	bne.n	1c15c <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(u8_t);
   1c166:	3302      	adds	r3, #2
	buf->cur = start - fixed_header_length;
   1c168:	b2db      	uxtb	r3, r3
   1c16a:	425b      	negs	r3, r3
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   1c16c:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   1c16e:	18cc      	adds	r4, r1, r3
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   1c170:	42b4      	cmp	r4, r6
	buf->cur = start - fixed_header_length;
   1c172:	6014      	str	r4, [r2, #0]
	*(buf->cur++) = val;
   1c174:	bf1e      	ittt	ne
   1c176:	3401      	addne	r4, #1
   1c178:	6014      	strne	r4, [r2, #0]
   1c17a:	54c8      	strbne	r0, [r1, r3]
	return 0;
   1c17c:	4628      	mov	r0, r5
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   1c17e:	6811      	ldr	r1, [r2, #0]
   1c180:	f000 047f 	and.w	r4, r0, #127	; 0x7f
   1c184:	700c      	strb	r4, [r1, #0]
			if (length > 0) {
   1c186:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   1c188:	bf1f      	itttt	ne
   1c18a:	6814      	ldrne	r4, [r2, #0]
   1c18c:	7821      	ldrbne	r1, [r4, #0]
   1c18e:	f061 017f 	ornne	r1, r1, #127	; 0x7f
   1c192:	7021      	strbne	r1, [r4, #0]
			buf->cur++;
   1c194:	6811      	ldr	r1, [r2, #0]
   1c196:	3101      	adds	r1, #1
   1c198:	6011      	str	r1, [r2, #0]
	} while (length > 0);
   1c19a:	2800      	cmp	r0, #0
   1c19c:	d1ef      	bne.n	1c17e <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   1c19e:	440b      	add	r3, r1
	buf->end = buf->cur + length + fixed_header_length;
   1c1a0:	4429      	add	r1, r5
	buf->cur = buf->cur - fixed_header_length;
   1c1a2:	6013      	str	r3, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   1c1a4:	6051      	str	r1, [r2, #4]
}
   1c1a6:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1c1a8:	f06f 0023 	mvn.w	r0, #35	; 0x23
   1c1ac:	e7fb      	b.n	1c1a6 <mqtt_encode_fixed_header+0x5a>

0001c1ae <publish_encode>:
{
   1c1ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c1b2:	4607      	mov	r7, r0
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   1c1b4:	7d80      	ldrb	r0, [r0, #22]
   1c1b6:	7a3c      	ldrb	r4, [r7, #8]
{
   1c1b8:	460d      	mov	r5, r1
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   1c1ba:	f000 0801 	and.w	r8, r0, #1
   1c1be:	f3c0 0940 	ubfx	r9, r0, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   1c1c2:	b10c      	cbz	r4, 1c1c8 <publish_encode+0x1a>
   1c1c4:	8abb      	ldrh	r3, [r7, #20]
   1c1c6:	b35b      	cbz	r3, 1c220 <publish_encode+0x72>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1c1c8:	682e      	ldr	r6, [r5, #0]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   1c1ca:	4629      	mov	r1, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1c1cc:	3605      	adds	r6, #5
   1c1ce:	602e      	str	r6, [r5, #0]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   1c1d0:	4638      	mov	r0, r7
   1c1d2:	f7ff ffa0 	bl	1c116 <pack_utf8_str>
	if (err_code != 0) {
   1c1d6:	b9a8      	cbnz	r0, 1c204 <publish_encode+0x56>
	if (param->message.topic.qos) {
   1c1d8:	7a3b      	ldrb	r3, [r7, #8]
   1c1da:	b9ab      	cbnz	r3, 1c208 <publish_encode+0x5a>
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   1c1dc:	0060      	lsls	r0, r4, #1
   1c1de:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   1c1e2:	693a      	ldr	r2, [r7, #16]
   1c1e4:	682b      	ldr	r3, [r5, #0]
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   1c1e6:	ea40 0009 	orr.w	r0, r0, r9
   1c1ea:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   1c1ee:	4413      	add	r3, r2
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   1c1f0:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	buf->cur += param->message.payload.len;
   1c1f4:	602b      	str	r3, [r5, #0]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   1c1f6:	462a      	mov	r2, r5
   1c1f8:	4631      	mov	r1, r6
   1c1fa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1c1fe:	f7ff ffa5 	bl	1c14c <mqtt_encode_fixed_header>
	if (err_code != 0) {
   1c202:	b140      	cbz	r0, 1c216 <publish_encode+0x68>
}
   1c204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   1c208:	4629      	mov	r1, r5
   1c20a:	8ab8      	ldrh	r0, [r7, #20]
   1c20c:	f7ff ff71 	bl	1c0f2 <pack_uint16>
		if (err_code != 0) {
   1c210:	2800      	cmp	r0, #0
   1c212:	d0e3      	beq.n	1c1dc <publish_encode+0x2e>
   1c214:	e7f6      	b.n	1c204 <publish_encode+0x56>
	buf->end -= param->message.payload.len;
   1c216:	686b      	ldr	r3, [r5, #4]
   1c218:	693a      	ldr	r2, [r7, #16]
   1c21a:	1a9b      	subs	r3, r3, r2
   1c21c:	606b      	str	r3, [r5, #4]
	return 0;
   1c21e:	e7f1      	b.n	1c204 <publish_encode+0x56>
		return -EINVAL;
   1c220:	f06f 0015 	mvn.w	r0, #21
   1c224:	e7ee      	b.n	1c204 <publish_encode+0x56>

0001c226 <subscribe_encode>:
{
   1c226:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c22a:	4607      	mov	r7, r0
	if (param->message_id == 0U) {
   1c22c:	88c0      	ldrh	r0, [r0, #6]
{
   1c22e:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   1c230:	b330      	cbz	r0, 1c280 <subscribe_encode+0x5a>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1c232:	680e      	ldr	r6, [r1, #0]
   1c234:	3605      	adds	r6, #5
   1c236:	600e      	str	r6, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   1c238:	f7ff ff5b 	bl	1c0f2 <pack_uint16>
	if (err_code != 0) {
   1c23c:	4604      	mov	r4, r0
   1c23e:	bb08      	cbnz	r0, 1c284 <subscribe_encode+0x5e>
   1c240:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < param->list_count; i++) {
   1c244:	88bb      	ldrh	r3, [r7, #4]
   1c246:	42a3      	cmp	r3, r4
   1c248:	dc06      	bgt.n	1c258 <subscribe_encode+0x32>
	return mqtt_encode_fixed_header(message_type, start, buf);
   1c24a:	462a      	mov	r2, r5
   1c24c:	4631      	mov	r1, r6
}
   1c24e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   1c252:	2082      	movs	r0, #130	; 0x82
   1c254:	f7ff bf7a 	b.w	1c14c <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   1c258:	fb09 f804 	mul.w	r8, r9, r4
   1c25c:	6838      	ldr	r0, [r7, #0]
   1c25e:	4629      	mov	r1, r5
   1c260:	4440      	add	r0, r8
   1c262:	f7ff ff58 	bl	1c116 <pack_utf8_str>
		if (err_code != 0) {
   1c266:	b980      	cbnz	r0, 1c28a <subscribe_encode+0x64>
		err_code = pack_uint8(param->list[i].qos, buf);
   1c268:	683b      	ldr	r3, [r7, #0]
   1c26a:	4443      	add	r3, r8
   1c26c:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   1c26e:	e9d5 3100 	ldrd	r3, r1, [r5]
   1c272:	4299      	cmp	r1, r3
   1c274:	d00b      	beq.n	1c28e <subscribe_encode+0x68>
	*(buf->cur++) = val;
   1c276:	1c59      	adds	r1, r3, #1
   1c278:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   1c27a:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   1c27c:	701a      	strb	r2, [r3, #0]
		if (err_code != 0) {
   1c27e:	e7e1      	b.n	1c244 <subscribe_encode+0x1e>
		return -EINVAL;
   1c280:	f06f 0415 	mvn.w	r4, #21
}
   1c284:	4620      	mov	r0, r4
   1c286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   1c28a:	4604      	mov	r4, r0
   1c28c:	e7fa      	b.n	1c284 <subscribe_encode+0x5e>
		return -ENOMEM;
   1c28e:	f06f 040b 	mvn.w	r4, #11
   1c292:	e7f7      	b.n	1c284 <subscribe_encode+0x5e>

0001c294 <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, u32_t length)
{
   1c294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c296:	460d      	mov	r5, r1
	int len;

	/* Calculate how much data we need to read from the transport,
	 * given the already buffered data.
	 */
	remaining = length - (buf->end - buf->cur);
   1c298:	e9d1 4100 	ldrd	r4, r1, [r1]
   1c29c:	1b0c      	subs	r4, r1, r4
   1c29e:	1b14      	subs	r4, r2, r4
	if (remaining <= 0) {
   1c2a0:	2c00      	cmp	r4, #0
{
   1c2a2:	4606      	mov	r6, r0
	if (remaining <= 0) {
   1c2a4:	dd14      	ble.n	1c2d0 <mqtt_read_message_chunk+0x3c>
		return 0;
	}

	/* Check if read does not exceed the buffer. */
	if (buf->end + remaining > client->rx_buf + client->rx_buf_size) {
   1c2a6:	e9d0 3713 	ldrd	r3, r7, [r0, #76]	; 0x4c
   1c2aa:	190a      	adds	r2, r1, r4
   1c2ac:	443b      	add	r3, r7
   1c2ae:	429a      	cmp	r2, r3
   1c2b0:	d810      	bhi.n	1c2d4 <mqtt_read_message_chunk+0x40>
		MQTT_ERR("[CID %p]: Buffer too small to receive the message",
			 client);
		return -ENOMEM;
	}

	len = mqtt_transport_read(client, buf->end, remaining, false);
   1c2b2:	2300      	movs	r3, #0
   1c2b4:	4622      	mov	r2, r4
   1c2b6:	f7f3 f8c1 	bl	f43c <mqtt_transport_read>
	if (len < 0) {
   1c2ba:	2800      	cmp	r0, #0
   1c2bc:	db09      	blt.n	1c2d2 <mqtt_read_message_chunk+0x3e>
		MQTT_TRC("[CID %p]: Transport read error: %d", client, len);
		return len;
	}

	if (len == 0) {
   1c2be:	d00c      	beq.n	1c2da <mqtt_read_message_chunk+0x46>
		MQTT_TRC("[CID %p]: Connection closed.", client);
		return -ENOTCONN;
	}

	client->internal.rx_buf_datalen += len;
   1c2c0:	69f3      	ldr	r3, [r6, #28]
	buf->end += len;

	if (len < remaining) {
   1c2c2:	4284      	cmp	r4, r0
	client->internal.rx_buf_datalen += len;
   1c2c4:	4403      	add	r3, r0
   1c2c6:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   1c2c8:	686b      	ldr	r3, [r5, #4]
   1c2ca:	4403      	add	r3, r0
   1c2cc:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   1c2ce:	dc07      	bgt.n	1c2e0 <mqtt_read_message_chunk+0x4c>
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
   1c2d0:	2000      	movs	r0, #0
}
   1c2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOMEM;
   1c2d4:	f06f 000b 	mvn.w	r0, #11
   1c2d8:	e7fb      	b.n	1c2d2 <mqtt_read_message_chunk+0x3e>
		return -ENOTCONN;
   1c2da:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1c2de:	e7f8      	b.n	1c2d2 <mqtt_read_message_chunk+0x3e>
		return -EAGAIN;
   1c2e0:	f06f 000a 	mvn.w	r0, #10
   1c2e4:	e7f5      	b.n	1c2d2 <mqtt_read_message_chunk+0x3e>

0001c2e6 <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   1c2e6:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	u8_t type_and_flags;
	u32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   1c2e8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   1c2ea:	69c2      	ldr	r2, [r0, #28]
{
   1c2ec:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   1c2ee:	9302      	str	r3, [sp, #8]
{
   1c2f0:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   1c2f2:	4413      	add	r3, r2
	u8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   1c2f4:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   1c2f6:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   1c2f8:	a902      	add	r1, sp, #8
   1c2fa:	4628      	mov	r0, r5
   1c2fc:	f7ff ffca 	bl	1c294 <mqtt_read_message_chunk>
		if (err_code < 0) {
   1c300:	1e04      	subs	r4, r0, #0
   1c302:	db2b      	blt.n	1c35c <mqtt_handle_rx+0x76>
		buf->cur = client->rx_buf;
   1c304:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   1c306:	aa01      	add	r2, sp, #4
   1c308:	f10d 0103 	add.w	r1, sp, #3
   1c30c:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   1c30e:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   1c310:	f7ff fe6d 	bl	1bfee <fixed_header_decode>
	} while (err_code == -EAGAIN);
   1c314:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   1c318:	4604      	mov	r4, r0
		chunk_size = 1U;
   1c31a:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   1c31e:	d0eb      	beq.n	1c2f8 <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   1c320:	2800      	cmp	r0, #0
   1c322:	db1f      	blt.n	1c364 <mqtt_handle_rx+0x7e>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   1c324:	f89d 6003 	ldrb.w	r6, [sp, #3]
   1c328:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   1c32c:	2b30      	cmp	r3, #48	; 0x30
   1c32e:	d11c      	bne.n	1c36a <mqtt_handle_rx+0x84>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(u16_t));
   1c330:	2202      	movs	r2, #2
   1c332:	a902      	add	r1, sp, #8
   1c334:	4628      	mov	r0, r5
   1c336:	f7ff ffad 	bl	1c294 <mqtt_read_message_chunk>
	if (err_code < 0) {
   1c33a:	1e04      	subs	r4, r0, #0
   1c33c:	db0e      	blt.n	1c35c <mqtt_handle_rx+0x76>
	variable_header_length = *buf->cur << 8; /* MSB */
   1c33e:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   1c340:	f016 0f06 	tst.w	r6, #6
   1c344:	881a      	ldrh	r2, [r3, #0]
   1c346:	ba52      	rev16	r2, r2
   1c348:	b292      	uxth	r2, r2
	variable_header_length += sizeof(u16_t);
   1c34a:	bf0c      	ite	eq
   1c34c:	3202      	addeq	r2, #2
		variable_header_length += sizeof(u16_t);
   1c34e:	3204      	addne	r2, #4
		err_code = mqtt_read_publish_var_header(client, type_and_flags,
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   1c350:	a902      	add	r1, sp, #8
   1c352:	4628      	mov	r0, r5
   1c354:	f7ff ff9e 	bl	1c294 <mqtt_read_message_chunk>
	}

	if (err_code < 0) {
   1c358:	1e04      	subs	r4, r0, #0
   1c35a:	da08      	bge.n	1c36e <mqtt_handle_rx+0x88>
		return (err_code == -EAGAIN) ? 0 : err_code;
   1c35c:	f114 0f0b 	cmn.w	r4, #11
   1c360:	d100      	bne.n	1c364 <mqtt_handle_rx+0x7e>
   1c362:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   1c364:	4620      	mov	r0, r4
   1c366:	b00c      	add	sp, #48	; 0x30
   1c368:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   1c36a:	9a01      	ldr	r2, [sp, #4]
   1c36c:	e7f0      	b.n	1c350 <mqtt_handle_rx+0x6a>
	evt.result = 0;
   1c36e:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   1c370:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1c374:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   1c376:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   1c37a:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   1c37c:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   1c37e:	d05e      	beq.n	1c43e <mqtt_handle_rx+0x158>
   1c380:	d813      	bhi.n	1c3aa <mqtt_handle_rx+0xc4>
   1c382:	2b30      	cmp	r3, #48	; 0x30
   1c384:	d045      	beq.n	1c412 <mqtt_handle_rx+0x12c>
   1c386:	d804      	bhi.n	1c392 <mqtt_handle_rx+0xac>
   1c388:	2b20      	cmp	r3, #32
   1c38a:	d02a      	beq.n	1c3e2 <mqtt_handle_rx+0xfc>
	client->internal.rx_buf_datalen = 0U;
   1c38c:	2400      	movs	r4, #0
   1c38e:	61ec      	str	r4, [r5, #28]
	return 0;
   1c390:	e7e8      	b.n	1c364 <mqtt_handle_rx+0x7e>
	switch (type_and_flags & 0xF0) {
   1c392:	2b40      	cmp	r3, #64	; 0x40
   1c394:	d049      	beq.n	1c42a <mqtt_handle_rx+0x144>
   1c396:	2b50      	cmp	r3, #80	; 0x50
   1c398:	d1f8      	bne.n	1c38c <mqtt_handle_rx+0xa6>
		evt.type = MQTT_EVT_PUBREC;
   1c39a:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   1c39c:	a905      	add	r1, sp, #20
   1c39e:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   1c3a0:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   1c3a4:	f7ff fe8d 	bl	1c0c2 <publish_receive_decode>
   1c3a8:	e046      	b.n	1c438 <mqtt_handle_rx+0x152>
	switch (type_and_flags & 0xF0) {
   1c3aa:	2b90      	cmp	r3, #144	; 0x90
   1c3ac:	d04f      	beq.n	1c44e <mqtt_handle_rx+0x168>
   1c3ae:	d809      	bhi.n	1c3c4 <mqtt_handle_rx+0xde>
   1c3b0:	2b70      	cmp	r3, #112	; 0x70
   1c3b2:	d1eb      	bne.n	1c38c <mqtt_handle_rx+0xa6>
		evt.type = MQTT_EVT_PUBCOMP;
   1c3b4:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   1c3b6:	a905      	add	r1, sp, #20
   1c3b8:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   1c3ba:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   1c3be:	f7ff fe84 	bl	1c0ca <publish_complete_decode>
   1c3c2:	e039      	b.n	1c438 <mqtt_handle_rx+0x152>
	switch (type_and_flags & 0xF0) {
   1c3c4:	2bb0      	cmp	r3, #176	; 0xb0
   1c3c6:	d04a      	beq.n	1c45e <mqtt_handle_rx+0x178>
   1c3c8:	2bd0      	cmp	r3, #208	; 0xd0
   1c3ca:	d1df      	bne.n	1c38c <mqtt_handle_rx+0xa6>
		if (client->unacked_ping <= 0) {
   1c3cc:	f995 305f 	ldrsb.w	r3, [r5, #95]	; 0x5f
   1c3d0:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   1c3d2:	bfca      	itet	gt
   1c3d4:	f103 33ff 	addgt.w	r3, r3, #4294967295	; 0xffffffff
			client->unacked_ping = 0;
   1c3d8:	f885 205f 	strble.w	r2, [r5, #95]	; 0x5f
			client->unacked_ping--;
   1c3dc:	f885 305f 	strbgt.w	r3, [r5, #95]	; 0x5f
	if (err_code < 0) {
   1c3e0:	e7d4      	b.n	1c38c <mqtt_handle_rx+0xa6>
		evt.type = MQTT_EVT_CONNACK;
   1c3e2:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   1c3e6:	a902      	add	r1, sp, #8
   1c3e8:	aa05      	add	r2, sp, #20
   1c3ea:	4628      	mov	r0, r5
   1c3ec:	f7ff fe10 	bl	1c010 <connect_ack_decode>
		if (err_code == 0) {
   1c3f0:	4604      	mov	r4, r0
   1c3f2:	bb10      	cbnz	r0, 1c43a <mqtt_handle_rx+0x154>
			if (evt.param.connack.return_code ==
   1c3f4:	f89d 2015 	ldrb.w	r2, [sp, #21]
   1c3f8:	b91a      	cbnz	r2, 1c402 <mqtt_handle_rx+0x11c>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   1c3fa:	69ab      	ldr	r3, [r5, #24]
   1c3fc:	f043 0304 	orr.w	r3, r3, #4
   1c400:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   1c402:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   1c404:	a904      	add	r1, sp, #16
   1c406:	4628      	mov	r0, r5
   1c408:	f000 f846 	bl	1c498 <event_notify>
	if (err_code < 0) {
   1c40c:	2c00      	cmp	r4, #0
   1c40e:	dabd      	bge.n	1c38c <mqtt_handle_rx+0xa6>
   1c410:	e7a8      	b.n	1c364 <mqtt_handle_rx+0x7e>
		evt.type = MQTT_EVT_PUBLISH;
   1c412:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   1c414:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   1c416:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   1c41a:	ab05      	add	r3, sp, #20
   1c41c:	f7ff fe13 	bl	1c046 <publish_decode>
		client->internal.remaining_payload =
   1c420:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   1c422:	4604      	mov	r4, r0
		evt.result = err_code;
   1c424:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   1c426:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   1c428:	e7ec      	b.n	1c404 <mqtt_handle_rx+0x11e>
		evt.type = MQTT_EVT_PUBACK;
   1c42a:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   1c42c:	a905      	add	r1, sp, #20
   1c42e:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   1c430:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   1c434:	f7ff fe43 	bl	1c0be <publish_ack_decode>
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   1c438:	4604      	mov	r4, r0
		evt.result = err_code;
   1c43a:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   1c43c:	e7e2      	b.n	1c404 <mqtt_handle_rx+0x11e>
		evt.type = MQTT_EVT_PUBREL;
   1c43e:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   1c440:	a905      	add	r1, sp, #20
   1c442:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   1c444:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   1c448:	f7ff fe3d 	bl	1c0c6 <publish_release_decode>
   1c44c:	e7f4      	b.n	1c438 <mqtt_handle_rx+0x152>
		evt.type = MQTT_EVT_SUBACK;
   1c44e:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   1c450:	a905      	add	r1, sp, #20
   1c452:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   1c454:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   1c458:	f7ff fe39 	bl	1c0ce <subscribe_ack_decode>
   1c45c:	e7ec      	b.n	1c438 <mqtt_handle_rx+0x152>
		evt.type = MQTT_EVT_UNSUBACK;
   1c45e:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   1c460:	a905      	add	r1, sp, #20
   1c462:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   1c466:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   1c46a:	f7ff fe40 	bl	1c0ee <unsubscribe_ack_decode>
   1c46e:	e7e3      	b.n	1c438 <mqtt_handle_rx+0x152>

0001c470 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   1c470:	f7f2 bfbe 	b.w	f3f0 <mqtt_client_tcp_disconnect>

0001c474 <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   1c474:	b538      	push	{r3, r4, r5, lr}
   1c476:	4604      	mov	r4, r0
   1c478:	460d      	mov	r5, r1
	memset(client->tx_buf, 0, client->tx_buf_size);
   1c47a:	6d82      	ldr	r2, [r0, #88]	; 0x58
   1c47c:	2100      	movs	r1, #0
   1c47e:	6d40      	ldr	r0, [r0, #84]	; 0x54
   1c480:	f7ff fc6d 	bl	1bd5e <memset>
	buf->cur = client->tx_buf;
   1c484:	6d63      	ldr	r3, [r4, #84]	; 0x54
	buf->end = client->tx_buf + client->tx_buf_size;
   1c486:	6da2      	ldr	r2, [r4, #88]	; 0x58
	buf->cur = client->tx_buf;
   1c488:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   1c48a:	4413      	add	r3, r2
   1c48c:	606b      	str	r3, [r5, #4]
}
   1c48e:	bd38      	pop	{r3, r4, r5, pc}

0001c490 <mqtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   1c490:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c494:	f7fd bdd6 	b.w	1a044 <z_impl_k_mutex_lock>

0001c498 <event_notify>:
	/* Reset internal state. */
	client_reset(client);
}

void event_notify(struct mqtt_client *client, const struct mqtt_evt *evt)
{
   1c498:	b538      	push	{r3, r4, r5, lr}
	if (client->evt_cb != NULL) {
   1c49a:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
   1c49c:	4604      	mov	r4, r0
   1c49e:	460d      	mov	r5, r1
	if (client->evt_cb != NULL) {
   1c4a0:	b153      	cbz	r3, 1c4b8 <event_notify+0x20>

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
	int ret = sys_mutex_unlock(&client->internal.mutex);
   1c4a2:	f7f2 ffd7 	bl	f454 <sys_mutex_unlock>
		mqtt_mutex_unlock(client);

		client->evt_cb(client, evt);
   1c4a6:	4620      	mov	r0, r4
   1c4a8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1c4aa:	4629      	mov	r1, r5
   1c4ac:	4798      	blx	r3

		mqtt_mutex_lock(client);
   1c4ae:	4620      	mov	r0, r4
	}
}
   1c4b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		mqtt_mutex_lock(client);
   1c4b4:	f7ff bfec 	b.w	1c490 <mqtt_mutex_lock>
}
   1c4b8:	bd38      	pop	{r3, r4, r5, pc}

0001c4ba <client_disconnect>:

static void client_disconnect(struct mqtt_client *client, int result)
{
   1c4ba:	b530      	push	{r4, r5, lr}
   1c4bc:	4604      	mov	r4, r0
   1c4be:	b089      	sub	sp, #36	; 0x24
   1c4c0:	460d      	mov	r5, r1
	int err_code;

	err_code = mqtt_transport_disconnect(client);
   1c4c2:	f7ff ffd5 	bl	1c470 <mqtt_transport_disconnect>
	if (MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   1c4c6:	69a3      	ldr	r3, [r4, #24]
	event_notify(client, &evt);
   1c4c8:	4669      	mov	r1, sp
	if (MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   1c4ca:	f013 0304 	ands.w	r3, r3, #4
		evt.type = MQTT_EVT_DISCONNECT;
   1c4ce:	bf12      	itee	ne
   1c4d0:	2301      	movne	r3, #1
		evt.type = MQTT_EVT_CONNACK;
   1c4d2:	f88d 3000 	strbeq.w	r3, [sp]
		evt.result = -ECONNREFUSED;
   1c4d6:	f06f 033c 	mvneq.w	r3, #60	; 0x3c
	event_notify(client, &evt);
   1c4da:	4620      	mov	r0, r4
		evt.type = MQTT_EVT_DISCONNECT;
   1c4dc:	bf16      	itet	ne
   1c4de:	f88d 3000 	strbne.w	r3, [sp]
		evt.result = -ECONNREFUSED;
   1c4e2:	9307      	streq	r3, [sp, #28]
		evt.result = result;
   1c4e4:	9507      	strne	r5, [sp, #28]
	event_notify(client, &evt);
   1c4e6:	f7ff ffd7 	bl	1c498 <event_notify>
	MQTT_STATE_INIT(client);
   1c4ea:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   1c4ec:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   1c4f0:	e9c4 3307 	strd	r3, r3, [r4, #28]
	if (err_code < 0) {
		MQTT_ERR("Failed to disconnect transport!");
	}

	disconnect_event_notify(client, result);
}
   1c4f4:	b009      	add	sp, #36	; 0x24
   1c4f6:	bd30      	pop	{r4, r5, pc}

0001c4f8 <client_write>:
	return err_code;
}

static int client_write(struct mqtt_client *client, const u8_t *data,
			u32_t datalen)
{
   1c4f8:	b538      	push	{r3, r4, r5, lr}
   1c4fa:	4605      	mov	r5, r0
	int err_code;

	MQTT_TRC("[%p]: Transport writing %d bytes.", client, datalen);

	err_code = mqtt_transport_write(client, data, datalen);
   1c4fc:	f7f2 ff92 	bl	f424 <mqtt_transport_write>
	if (err_code < 0) {
   1c500:	1e04      	subs	r4, r0, #0
   1c502:	da05      	bge.n	1c510 <client_write+0x18>
		MQTT_TRC("TCP write failed, errno = %d, "
			 "closing connection", errno);
		client_disconnect(client, err_code);
   1c504:	4621      	mov	r1, r4
   1c506:	4628      	mov	r0, r5
   1c508:	f7ff ffd7 	bl	1c4ba <client_disconnect>

	MQTT_TRC("[%p]: Transport write complete.", client);
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();

	return 0;
}
   1c50c:	4620      	mov	r0, r4
   1c50e:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_uptime_get();
   1c510:	f001 fae1 	bl	1dad6 <z_impl_k_uptime_get>
	return 0;
   1c514:	2400      	movs	r4, #0
	return (u32_t)k_uptime_get();
   1c516:	6168      	str	r0, [r5, #20]
   1c518:	e7f8      	b.n	1c50c <client_write+0x14>

0001c51a <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   1c51a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c51e:	460f      	mov	r7, r1
   1c520:	4690      	mov	r8, r2
   1c522:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   1c524:	4605      	mov	r5, r0
   1c526:	b320      	cbz	r0, 1c572 <read_publish_payload+0x58>

	mqtt_mutex_lock(client);
   1c528:	f7ff ffb2 	bl	1c490 <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   1c52c:	6a2c      	ldr	r4, [r5, #32]
   1c52e:	b1b4      	cbz	r4, 1c55e <read_publish_payload+0x44>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   1c530:	4544      	cmp	r4, r8
   1c532:	4622      	mov	r2, r4
   1c534:	4633      	mov	r3, r6
   1c536:	bf28      	it	cs
   1c538:	4642      	movcs	r2, r8
   1c53a:	4639      	mov	r1, r7
   1c53c:	4628      	mov	r0, r5
   1c53e:	f7f2 ff7d 	bl	f43c <mqtt_transport_read>
   1c542:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   1c544:	b916      	cbnz	r6, 1c54c <read_publish_payload+0x32>
   1c546:	f110 0f0b 	cmn.w	r0, #11
   1c54a:	d008      	beq.n	1c55e <read_publish_payload+0x44>
		goto exit;
	}

	if (ret <= 0) {
   1c54c:	2c00      	cmp	r4, #0
   1c54e:	dc0c      	bgt.n	1c56a <read_publish_payload+0x50>
		if (ret == 0) {
			ret = -ENOTCONN;
   1c550:	bf08      	it	eq
   1c552:	f06f 0438 	mvneq.w	r4, #56	; 0x38
		}

		client_disconnect(client, ret);
   1c556:	4628      	mov	r0, r5
   1c558:	4621      	mov	r1, r4
   1c55a:	f7ff ffae 	bl	1c4ba <client_disconnect>
   1c55e:	4628      	mov	r0, r5
   1c560:	f7f2 ff78 	bl	f454 <sys_mutex_unlock>

exit:
	mqtt_mutex_unlock(client);

	return ret;
}
   1c564:	4620      	mov	r0, r4
   1c566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	client->internal.remaining_payload -= ret;
   1c56a:	6a2b      	ldr	r3, [r5, #32]
   1c56c:	1b1b      	subs	r3, r3, r4
   1c56e:	622b      	str	r3, [r5, #32]
   1c570:	e7f5      	b.n	1c55e <read_publish_payload+0x44>
	NULL_PARAM_CHECK(client);
   1c572:	f06f 0415 	mvn.w	r4, #21
   1c576:	e7f5      	b.n	1c564 <read_publish_payload+0x4a>

0001c578 <mqtt_client_init>:
{
   1c578:	b510      	push	{r4, lr}
	NULL_PARAM_CHECK_VOID(client);
   1c57a:	4604      	mov	r4, r0
   1c57c:	b1a0      	cbz	r0, 1c5a8 <mqtt_client_init+0x30>
	memset(client, 0, sizeof(*client));
   1c57e:	2264      	movs	r2, #100	; 0x64
   1c580:	2100      	movs	r1, #0
   1c582:	f7ff fbec 	bl	1bd5e <memset>
	MQTT_STATE_INIT(client);
   1c586:	2300      	movs	r3, #0
   1c588:	61a3      	str	r3, [r4, #24]
	return z_impl_k_mutex_init(mutex);
   1c58a:	4620      	mov	r0, r4
   1c58c:	f001 f808 	bl	1d5a0 <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   1c590:	2304      	movs	r3, #4
   1c592:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	client->clean_session = 1U;
   1c596:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   1c59a:	f043 0302 	orr.w	r3, r3, #2
   1c59e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	client->keepalive = MQTT_KEEPALIVE;
   1c5a2:	233c      	movs	r3, #60	; 0x3c
   1c5a4:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
}
   1c5a8:	bd10      	pop	{r4, pc}

0001c5aa <mqtt_connect>:
{
   1c5aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   1c5ac:	4604      	mov	r4, r0
   1c5ae:	2800      	cmp	r0, #0
   1c5b0:	d03c      	beq.n	1c62c <mqtt_connect+0x82>
	NULL_PARAM_CHECK(client->client_id.utf8);
   1c5b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1c5b4:	2b00      	cmp	r3, #0
   1c5b6:	d039      	beq.n	1c62c <mqtt_connect+0x82>
	mqtt_mutex_lock(client);
   1c5b8:	f7ff ff6a 	bl	1c490 <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   1c5bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1c5be:	b393      	cbz	r3, 1c626 <mqtt_connect+0x7c>
   1c5c0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1c5c2:	b383      	cbz	r3, 1c626 <mqtt_connect+0x7c>
	err_code = mqtt_transport_connect(client);
   1c5c4:	4620      	mov	r0, r4
   1c5c6:	f7f2 ff25 	bl	f414 <mqtt_transport_connect>
	if (err_code < 0) {
   1c5ca:	1e05      	subs	r5, r0, #0
   1c5cc:	db25      	blt.n	1c61a <mqtt_connect+0x70>
	tx_buf_init(client, &packet);
   1c5ce:	4669      	mov	r1, sp
   1c5d0:	4620      	mov	r0, r4
   1c5d2:	f7ff ff4f 	bl	1c474 <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   1c5d6:	69a3      	ldr	r3, [r4, #24]
	err_code = connect_request_encode(client, &packet);
   1c5d8:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   1c5da:	f043 0302 	orr.w	r3, r3, #2
   1c5de:	61a3      	str	r3, [r4, #24]
	err_code = connect_request_encode(client, &packet);
   1c5e0:	4620      	mov	r0, r4
   1c5e2:	f7f2 fdfd 	bl	f1e0 <connect_request_encode>
	if (err_code < 0) {
   1c5e6:	1e05      	subs	r5, r0, #0
   1c5e8:	db13      	blt.n	1c612 <mqtt_connect+0x68>
	err_code = mqtt_transport_write(client, packet.cur,
   1c5ea:	e9dd 1200 	ldrd	r1, r2, [sp]
   1c5ee:	4620      	mov	r0, r4
   1c5f0:	1a52      	subs	r2, r2, r1
   1c5f2:	f7f2 ff17 	bl	f424 <mqtt_transport_write>
	if (err_code < 0) {
   1c5f6:	1e05      	subs	r5, r0, #0
   1c5f8:	db0b      	blt.n	1c612 <mqtt_connect+0x68>
	return z_impl_k_uptime_get();
   1c5fa:	f001 fa6c 	bl	1dad6 <z_impl_k_uptime_get>
	client->unacked_ping = 0;
   1c5fe:	2500      	movs	r5, #0
   1c600:	6160      	str	r0, [r4, #20]
   1c602:	f884 505f 	strb.w	r5, [r4, #95]	; 0x5f
   1c606:	4620      	mov	r0, r4
   1c608:	f7f2 ff24 	bl	f454 <sys_mutex_unlock>
}
   1c60c:	4628      	mov	r0, r5
   1c60e:	b003      	add	sp, #12
   1c610:	bd30      	pop	{r4, r5, pc}
	client_disconnect(client, err_code);
   1c612:	4629      	mov	r1, r5
   1c614:	4620      	mov	r0, r4
   1c616:	f7ff ff50 	bl	1c4ba <client_disconnect>
	MQTT_STATE_INIT(client);
   1c61a:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   1c61c:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   1c620:	e9c4 3307 	strd	r3, r3, [r4, #28]
   1c624:	e7ef      	b.n	1c606 <mqtt_connect+0x5c>
		err_code = -ENOMEM;
   1c626:	f06f 050b 	mvn.w	r5, #11
   1c62a:	e7f6      	b.n	1c61a <mqtt_connect+0x70>
	NULL_PARAM_CHECK(client);
   1c62c:	f06f 0515 	mvn.w	r5, #21
   1c630:	e7ec      	b.n	1c60c <mqtt_connect+0x62>

0001c632 <mqtt_publish>:
{
   1c632:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c634:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   1c636:	4605      	mov	r5, r0
   1c638:	b330      	cbz	r0, 1c688 <mqtt_publish+0x56>
	NULL_PARAM_CHECK(param);
   1c63a:	b329      	cbz	r1, 1c688 <mqtt_publish+0x56>
	mqtt_mutex_lock(client);
   1c63c:	f7ff ff28 	bl	1c490 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   1c640:	4669      	mov	r1, sp
   1c642:	4628      	mov	r0, r5
   1c644:	f7ff ff16 	bl	1c474 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   1c648:	69ab      	ldr	r3, [r5, #24]
   1c64a:	075b      	lsls	r3, r3, #29
   1c64c:	d519      	bpl.n	1c682 <mqtt_publish+0x50>
	err_code = publish_encode(param, &packet);
   1c64e:	4669      	mov	r1, sp
   1c650:	4630      	mov	r0, r6
   1c652:	f7ff fdac 	bl	1c1ae <publish_encode>
	if (err_code < 0) {
   1c656:	1e04      	subs	r4, r0, #0
   1c658:	db0d      	blt.n	1c676 <mqtt_publish+0x44>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   1c65a:	e9dd 1200 	ldrd	r1, r2, [sp]
   1c65e:	4628      	mov	r0, r5
   1c660:	1a52      	subs	r2, r2, r1
   1c662:	f7ff ff49 	bl	1c4f8 <client_write>
	if (err_code < 0) {
   1c666:	1e04      	subs	r4, r0, #0
   1c668:	db05      	blt.n	1c676 <mqtt_publish+0x44>
	err_code = client_write(client, param->message.payload.data,
   1c66a:	e9d6 1203 	ldrd	r1, r2, [r6, #12]
   1c66e:	4628      	mov	r0, r5
   1c670:	f7ff ff42 	bl	1c4f8 <client_write>
   1c674:	4604      	mov	r4, r0
   1c676:	4628      	mov	r0, r5
   1c678:	f7f2 feec 	bl	f454 <sys_mutex_unlock>
}
   1c67c:	4620      	mov	r0, r4
   1c67e:	b002      	add	sp, #8
   1c680:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTCONN;
   1c682:	f06f 0438 	mvn.w	r4, #56	; 0x38
   1c686:	e7f6      	b.n	1c676 <mqtt_publish+0x44>
	NULL_PARAM_CHECK(client);
   1c688:	f06f 0415 	mvn.w	r4, #21
   1c68c:	e7f6      	b.n	1c67c <mqtt_publish+0x4a>

0001c68e <mqtt_disconnect>:
{
   1c68e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   1c690:	4604      	mov	r4, r0
   1c692:	b310      	cbz	r0, 1c6da <mqtt_disconnect+0x4c>
	mqtt_mutex_lock(client);
   1c694:	f7ff fefc 	bl	1c490 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   1c698:	4669      	mov	r1, sp
   1c69a:	4620      	mov	r0, r4
   1c69c:	f7ff feea 	bl	1c474 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   1c6a0:	69a3      	ldr	r3, [r4, #24]
   1c6a2:	075b      	lsls	r3, r3, #29
   1c6a4:	d516      	bpl.n	1c6d4 <mqtt_disconnect+0x46>
	err_code = disconnect_encode(&packet);
   1c6a6:	4668      	mov	r0, sp
   1c6a8:	f7f2 fe1a 	bl	f2e0 <disconnect_encode>
	if (err_code < 0) {
   1c6ac:	1e05      	subs	r5, r0, #0
   1c6ae:	db0b      	blt.n	1c6c8 <mqtt_disconnect+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   1c6b0:	e9dd 1200 	ldrd	r1, r2, [sp]
   1c6b4:	4620      	mov	r0, r4
   1c6b6:	1a52      	subs	r2, r2, r1
   1c6b8:	f7ff ff1e 	bl	1c4f8 <client_write>
	if (err_code < 0) {
   1c6bc:	1e05      	subs	r5, r0, #0
   1c6be:	db03      	blt.n	1c6c8 <mqtt_disconnect+0x3a>
	client_disconnect(client, 0);
   1c6c0:	2100      	movs	r1, #0
   1c6c2:	4620      	mov	r0, r4
   1c6c4:	f7ff fef9 	bl	1c4ba <client_disconnect>
   1c6c8:	4620      	mov	r0, r4
   1c6ca:	f7f2 fec3 	bl	f454 <sys_mutex_unlock>
}
   1c6ce:	4628      	mov	r0, r5
   1c6d0:	b003      	add	sp, #12
   1c6d2:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   1c6d4:	f06f 0538 	mvn.w	r5, #56	; 0x38
   1c6d8:	e7f6      	b.n	1c6c8 <mqtt_disconnect+0x3a>
	NULL_PARAM_CHECK(client);
   1c6da:	f06f 0515 	mvn.w	r5, #21
   1c6de:	e7f6      	b.n	1c6ce <mqtt_disconnect+0x40>

0001c6e0 <mqtt_subscribe>:
{
   1c6e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c6e2:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   1c6e4:	4605      	mov	r5, r0
   1c6e6:	b1f8      	cbz	r0, 1c728 <mqtt_subscribe+0x48>
	NULL_PARAM_CHECK(param);
   1c6e8:	b1f1      	cbz	r1, 1c728 <mqtt_subscribe+0x48>
	mqtt_mutex_lock(client);
   1c6ea:	f7ff fed1 	bl	1c490 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   1c6ee:	4669      	mov	r1, sp
   1c6f0:	4628      	mov	r0, r5
   1c6f2:	f7ff febf 	bl	1c474 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   1c6f6:	69ab      	ldr	r3, [r5, #24]
   1c6f8:	075b      	lsls	r3, r3, #29
   1c6fa:	d512      	bpl.n	1c722 <mqtt_subscribe+0x42>
	err_code = subscribe_encode(param, &packet);
   1c6fc:	4620      	mov	r0, r4
   1c6fe:	4669      	mov	r1, sp
   1c700:	f7ff fd91 	bl	1c226 <subscribe_encode>
	if (err_code < 0) {
   1c704:	1e04      	subs	r4, r0, #0
   1c706:	db06      	blt.n	1c716 <mqtt_subscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   1c708:	e9dd 1200 	ldrd	r1, r2, [sp]
   1c70c:	4628      	mov	r0, r5
   1c70e:	1a52      	subs	r2, r2, r1
   1c710:	f7ff fef2 	bl	1c4f8 <client_write>
   1c714:	4604      	mov	r4, r0
   1c716:	4628      	mov	r0, r5
   1c718:	f7f2 fe9c 	bl	f454 <sys_mutex_unlock>
}
   1c71c:	4620      	mov	r0, r4
   1c71e:	b003      	add	sp, #12
   1c720:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   1c722:	f06f 0438 	mvn.w	r4, #56	; 0x38
   1c726:	e7f6      	b.n	1c716 <mqtt_subscribe+0x36>
	NULL_PARAM_CHECK(client);
   1c728:	f06f 0415 	mvn.w	r4, #21
   1c72c:	e7f6      	b.n	1c71c <mqtt_subscribe+0x3c>

0001c72e <mqtt_ping>:
{
   1c72e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   1c730:	4604      	mov	r4, r0
   1c732:	b320      	cbz	r0, 1c77e <mqtt_ping+0x50>
	mqtt_mutex_lock(client);
   1c734:	f7ff feac 	bl	1c490 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   1c738:	4669      	mov	r1, sp
   1c73a:	4620      	mov	r0, r4
   1c73c:	f7ff fe9a 	bl	1c474 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   1c740:	69a3      	ldr	r3, [r4, #24]
   1c742:	075b      	lsls	r3, r3, #29
   1c744:	d518      	bpl.n	1c778 <mqtt_ping+0x4a>
	err_code = ping_request_encode(&packet);
   1c746:	4668      	mov	r0, sp
   1c748:	f7f2 fde0 	bl	f30c <ping_request_encode>
	if (err_code < 0) {
   1c74c:	1e05      	subs	r5, r0, #0
   1c74e:	db0d      	blt.n	1c76c <mqtt_ping+0x3e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   1c750:	e9dd 1200 	ldrd	r1, r2, [sp]
   1c754:	4620      	mov	r0, r4
   1c756:	1a52      	subs	r2, r2, r1
   1c758:	f7ff fece 	bl	1c4f8 <client_write>
	if (client->unacked_ping >= INT8_MAX) {
   1c75c:	f994 305f 	ldrsb.w	r3, [r4, #95]	; 0x5f
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   1c760:	4605      	mov	r5, r0
	if (client->unacked_ping >= INT8_MAX) {
   1c762:	2b7f      	cmp	r3, #127	; 0x7f
   1c764:	d002      	beq.n	1c76c <mqtt_ping+0x3e>
		client->unacked_ping++;
   1c766:	3301      	adds	r3, #1
   1c768:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
   1c76c:	4620      	mov	r0, r4
   1c76e:	f7f2 fe71 	bl	f454 <sys_mutex_unlock>
}
   1c772:	4628      	mov	r0, r5
   1c774:	b003      	add	sp, #12
   1c776:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   1c778:	f06f 0538 	mvn.w	r5, #56	; 0x38
   1c77c:	e7f6      	b.n	1c76c <mqtt_ping+0x3e>
	NULL_PARAM_CHECK(client);
   1c77e:	f06f 0515 	mvn.w	r5, #21
   1c782:	e7f6      	b.n	1c772 <mqtt_ping+0x44>

0001c784 <mqtt_live>:
{
   1c784:	b570      	push	{r4, r5, r6, lr}
	NULL_PARAM_CHECK(client);
   1c786:	4606      	mov	r6, r0
   1c788:	b300      	cbz	r0, 1c7cc <mqtt_live+0x48>
	mqtt_mutex_lock(client);
   1c78a:	f7ff fe81 	bl	1c490 <mqtt_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   1c78e:	6974      	ldr	r4, [r6, #20]
   1c790:	f001 f9a1 	bl	1dad6 <z_impl_k_uptime_get>
 *
 * @retval Time elapsed since last_activity time.
 */
static inline u32_t mqtt_elapsed_time_in_ms_get(u32_t last_activity)
{
	s32_t diff = k_uptime_get_32() - last_activity;
   1c794:	1b00      	subs	r0, r0, r4
	if ((client->keepalive > 0) &&
   1c796:	f8b6 405c 	ldrh.w	r4, [r6, #92]	; 0x5c

	if (diff < 0) {
		return 0;
   1c79a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1c79e:	b19c      	cbz	r4, 1c7c8 <mqtt_live+0x44>
	    (elapsed_time >= (client->keepalive * 1000))) {
   1c7a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1c7a4:	435c      	muls	r4, r3
	if ((client->keepalive > 0) &&
   1c7a6:	4284      	cmp	r4, r0
   1c7a8:	d80d      	bhi.n	1c7c6 <mqtt_live+0x42>
		err_code = mqtt_ping(client);
   1c7aa:	4630      	mov	r0, r6
   1c7ac:	f7ff ffbf 	bl	1c72e <mqtt_ping>
		ping_sent = true;
   1c7b0:	2401      	movs	r4, #1
		err_code = mqtt_ping(client);
   1c7b2:	4605      	mov	r5, r0
	int ret = sys_mutex_unlock(&client->internal.mutex);
   1c7b4:	4630      	mov	r0, r6
   1c7b6:	f7f2 fe4d 	bl	f454 <sys_mutex_unlock>
		return -EAGAIN;
   1c7ba:	2c00      	cmp	r4, #0
   1c7bc:	bf08      	it	eq
   1c7be:	f06f 050a 	mvneq.w	r5, #10
}
   1c7c2:	4628      	mov	r0, r5
   1c7c4:	bd70      	pop	{r4, r5, r6, pc}
	bool ping_sent = false;
   1c7c6:	2400      	movs	r4, #0
	int err_code = 0;
   1c7c8:	4625      	mov	r5, r4
   1c7ca:	e7f3      	b.n	1c7b4 <mqtt_live+0x30>
	NULL_PARAM_CHECK(client);
   1c7cc:	f06f 0515 	mvn.w	r5, #21
   1c7d0:	e7f7      	b.n	1c7c2 <mqtt_live+0x3e>

0001c7d2 <mqtt_keepalive_time_left>:
{
   1c7d2:	b538      	push	{r3, r4, r5, lr}
   1c7d4:	4605      	mov	r5, r0
	u32_t elapsed_time = mqtt_elapsed_time_in_ms_get(
   1c7d6:	6944      	ldr	r4, [r0, #20]
   1c7d8:	f001 f97d 	bl	1dad6 <z_impl_k_uptime_get>
	s32_t diff = k_uptime_get_32() - last_activity;
   1c7dc:	1b04      	subs	r4, r0, r4
	u32_t keepalive_ms = 1000U * client->keepalive;
   1c7de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1c7e2:	f8b5 205c 	ldrh.w	r2, [r5, #92]	; 0x5c
		return 0;
   1c7e6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   1c7ea:	4350      	muls	r0, r2
	if (client->keepalive == 0) {
   1c7ec:	b11a      	cbz	r2, 1c7f6 <mqtt_keepalive_time_left+0x24>
	if (keepalive_ms <= elapsed_time) {
   1c7ee:	42a0      	cmp	r0, r4
   1c7f0:	d904      	bls.n	1c7fc <mqtt_keepalive_time_left+0x2a>
	return keepalive_ms - elapsed_time;
   1c7f2:	1b00      	subs	r0, r0, r4
}
   1c7f4:	bd38      	pop	{r3, r4, r5, pc}
		return UINT32_MAX;
   1c7f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c7fa:	e7fb      	b.n	1c7f4 <mqtt_keepalive_time_left+0x22>
		return 0;
   1c7fc:	2000      	movs	r0, #0
   1c7fe:	e7f9      	b.n	1c7f4 <mqtt_keepalive_time_left+0x22>

0001c800 <mqtt_input>:
{
   1c800:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   1c802:	4605      	mov	r5, r0
   1c804:	b1d0      	cbz	r0, 1c83c <mqtt_input+0x3c>
	mqtt_mutex_lock(client);
   1c806:	f7ff fe43 	bl	1c490 <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   1c80a:	69ab      	ldr	r3, [r5, #24]
   1c80c:	079b      	lsls	r3, r3, #30
   1c80e:	d50f      	bpl.n	1c830 <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   1c810:	6a2b      	ldr	r3, [r5, #32]
   1c812:	b983      	cbnz	r3, 1c836 <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   1c814:	4628      	mov	r0, r5
   1c816:	f7ff fd66 	bl	1c2e6 <mqtt_handle_rx>
	if (err_code < 0) {
   1c81a:	1e04      	subs	r4, r0, #0
   1c81c:	da03      	bge.n	1c826 <mqtt_input+0x26>
		client_disconnect(client, err_code);
   1c81e:	4621      	mov	r1, r4
   1c820:	4628      	mov	r0, r5
   1c822:	f7ff fe4a 	bl	1c4ba <client_disconnect>
	int ret = sys_mutex_unlock(&client->internal.mutex);
   1c826:	4628      	mov	r0, r5
   1c828:	f7f2 fe14 	bl	f454 <sys_mutex_unlock>
}
   1c82c:	4620      	mov	r0, r4
   1c82e:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -EACCES;
   1c830:	f06f 040c 	mvn.w	r4, #12
   1c834:	e7f7      	b.n	1c826 <mqtt_input+0x26>
		return -EBUSY;
   1c836:	f06f 040f 	mvn.w	r4, #15
   1c83a:	e7f4      	b.n	1c826 <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   1c83c:	f06f 0415 	mvn.w	r4, #21
   1c840:	e7f4      	b.n	1c82c <mqtt_input+0x2c>

0001c842 <mqtt_read_publish_payload>:

int mqtt_read_publish_payload(struct mqtt_client *client, void *buffer,
			      size_t length)
{
	return read_publish_payload(client, buffer, length, false);
   1c842:	2300      	movs	r3, #0
   1c844:	f7ff be69 	b.w	1c51a <read_publish_payload>

0001c848 <gpio_nrfx_write>:
{
   1c848:	b510      	push	{r4, lr}
	return port->config->config_info;
   1c84a:	6804      	ldr	r4, [r0, #0]
   1c84c:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c84e:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1c850:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c852:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1c854:	69c0      	ldr	r0, [r0, #28]
   1c856:	d103      	bne.n	1c860 <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   1c858:	4058      	eors	r0, r3
}


NRF_STATIC_INLINE void nrf_gpio_port_out_write(NRF_GPIO_Type * p_reg, uint32_t value)
{
    p_reg->OUT = value;
   1c85a:	6060      	str	r0, [r4, #4]
}
   1c85c:	2000      	movs	r0, #0
   1c85e:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   1c860:	3300      	adds	r3, #0
   1c862:	f04f 0101 	mov.w	r1, #1
   1c866:	bf18      	it	ne
   1c868:	2301      	movne	r3, #1
   1c86a:	40d0      	lsrs	r0, r2
   1c86c:	f000 0001 	and.w	r0, r0, #1
   1c870:	4091      	lsls	r1, r2
   1c872:	4283      	cmp	r3, r0
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   1c874:	bf14      	ite	ne
   1c876:	60a1      	strne	r1, [r4, #8]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   1c878:	60e1      	streq	r1, [r4, #12]
   1c87a:	e7ef      	b.n	1c85c <gpio_nrfx_write+0x14>

0001c87c <gpio_nrfx_read>:
{
   1c87c:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   1c87e:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1c880:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c882:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1c884:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c886:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1c888:	2901      	cmp	r1, #1
    return p_reg->DIR;
   1c88a:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   1c88c:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   1c88e:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1c890:	ea80 0004 	eor.w	r0, r0, r4
   1c894:	ea84 0405 	eor.w	r4, r4, r5
   1c898:	ea04 0406 	and.w	r4, r4, r6
   1c89c:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   1c8a0:	bf1c      	itt	ne
   1c8a2:	40d0      	lsrne	r0, r2
   1c8a4:	f000 0001 	andne.w	r0, r0, #1
   1c8a8:	6018      	str	r0, [r3, #0]
}
   1c8aa:	2000      	movs	r0, #0
   1c8ac:	bd70      	pop	{r4, r5, r6, pc}

0001c8ae <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1c8ae:	6883      	ldr	r3, [r0, #8]
{
   1c8b0:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   1c8b2:	6818      	ldr	r0, [r3, #0]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   1c8b4:	b158      	cbz	r0, 1c8ce <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c8b6:	2400      	movs	r4, #0
   1c8b8:	4281      	cmp	r1, r0
   1c8ba:	d113      	bne.n	1c8e4 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1c8bc:	6808      	ldr	r0, [r1, #0]
   1c8be:	b95c      	cbnz	r4, 1c8d8 <gpio_nrfx_manage_callback+0x2a>
   1c8c0:	685c      	ldr	r4, [r3, #4]
	list->head = node;
   1c8c2:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c8c4:	42a1      	cmp	r1, r4
   1c8c6:	d100      	bne.n	1c8ca <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1c8c8:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1c8ca:	2000      	movs	r0, #0
   1c8cc:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1c8ce:	b972      	cbnz	r2, 1c8ee <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1c8d0:	2000      	movs	r0, #0
}
   1c8d2:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c8d4:	4628      	mov	r0, r5
   1c8d6:	e7ef      	b.n	1c8b8 <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
   1c8d8:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c8da:	6858      	ldr	r0, [r3, #4]
   1c8dc:	4281      	cmp	r1, r0
	list->tail = node;
   1c8de:	bf08      	it	eq
   1c8e0:	605c      	streq	r4, [r3, #4]
   1c8e2:	e7f2      	b.n	1c8ca <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c8e4:	6805      	ldr	r5, [r0, #0]
	return node->next;
   1c8e6:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c8e8:	2d00      	cmp	r5, #0
   1c8ea:	d1f3      	bne.n	1c8d4 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1c8ec:	b13a      	cbz	r2, 1c8fe <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1c8ee:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   1c8f0:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c8f2:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   1c8f4:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c8f6:	2800      	cmp	r0, #0
   1c8f8:	d1ea      	bne.n	1c8d0 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1c8fa:	6059      	str	r1, [r3, #4]
   1c8fc:	e7e9      	b.n	1c8d2 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1c8fe:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1c902:	e7e6      	b.n	1c8d2 <gpio_nrfx_manage_callback+0x24>

0001c904 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1c904:	2901      	cmp	r1, #1
{
   1c906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   1c90a:	bf18      	it	ne
   1c90c:	b2d4      	uxtbne	r4, r2
{
   1c90e:	4606      	mov	r6, r0
		to_pin   = pin;
   1c910:	bf12      	itee	ne
   1c912:	4625      	movne	r5, r4
		to_pin   = 31U;
   1c914:	251f      	moveq	r5, #31
		from_pin = 0U;
   1c916:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   1c918:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   1c91c:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1c91e:	42ac      	cmp	r4, r5
   1c920:	d902      	bls.n	1c928 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   1c922:	2000      	movs	r0, #0
}
   1c924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   1c928:	68fb      	ldr	r3, [r7, #12]
   1c92a:	fa08 f204 	lsl.w	r2, r8, r4
   1c92e:	ea23 0302 	bic.w	r3, r3, r2
   1c932:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1c934:	4621      	mov	r1, r4
   1c936:	4630      	mov	r0, r6
   1c938:	f7f2 fdd2 	bl	f4e0 <gpiote_pin_int_cfg>
		if (res != 0) {
   1c93c:	2800      	cmp	r0, #0
   1c93e:	d1f1      	bne.n	1c924 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1c940:	3401      	adds	r4, #1
   1c942:	b2e4      	uxtb	r4, r4
   1c944:	e7eb      	b.n	1c91e <gpio_nrfx_pin_disable_callback+0x1a>

0001c946 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1c946:	2901      	cmp	r1, #1
{
   1c948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   1c94c:	bf18      	it	ne
   1c94e:	b2d4      	uxtbne	r4, r2
{
   1c950:	4606      	mov	r6, r0
		to_pin   = pin;
   1c952:	bf12      	itee	ne
   1c954:	4625      	movne	r5, r4
		to_pin   = 31U;
   1c956:	251f      	moveq	r5, #31
		from_pin = 0U;
   1c958:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   1c95a:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   1c95e:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1c960:	42ac      	cmp	r4, r5
   1c962:	d902      	bls.n	1c96a <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   1c964:	2000      	movs	r0, #0
}
   1c966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   1c96a:	68fb      	ldr	r3, [r7, #12]
   1c96c:	fa08 f204 	lsl.w	r2, r8, r4
   1c970:	4313      	orrs	r3, r2
   1c972:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1c974:	4621      	mov	r1, r4
   1c976:	4630      	mov	r0, r6
   1c978:	f7f2 fdb2 	bl	f4e0 <gpiote_pin_int_cfg>
		if (res != 0) {
   1c97c:	2800      	cmp	r0, #0
   1c97e:	d1f2      	bne.n	1c966 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1c980:	3401      	adds	r4, #1
   1c982:	b2e4      	uxtb	r4, r4
   1c984:	e7ec      	b.n	1c960 <gpio_nrfx_pin_enable_callback+0x1a>

0001c986 <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   1c986:	2000      	movs	r0, #0
   1c988:	4770      	bx	lr

0001c98a <entropy_cc310_rng_get_entropy>:
{
   1c98a:	b513      	push	{r0, r1, r4, lr}
   1c98c:	4614      	mov	r4, r2
   1c98e:	4608      	mov	r0, r1
	res = spm_request_random_number(buffer, length, &olen);
   1c990:	aa01      	add	r2, sp, #4
   1c992:	4621      	mov	r1, r4
   1c994:	f7eb fb2c 	bl	7ff0 <spm_request_random_number>
	if (olen != length) {
   1c998:	9b01      	ldr	r3, [sp, #4]
   1c99a:	429c      	cmp	r4, r3
}
   1c99c:	bf18      	it	ne
   1c99e:	f06f 0015 	mvnne.w	r0, #21
   1c9a2:	b002      	add	sp, #8
   1c9a4:	bd10      	pop	{r4, pc}

0001c9a6 <z_errno>:
   1c9a6:	f7fd b831 	b.w	19a0c <z_impl_z_errno>

0001c9aa <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1c9aa:	4668      	mov	r0, sp
   1c9ac:	f020 0107 	bic.w	r1, r0, #7
   1c9b0:	468d      	mov	sp, r1
   1c9b2:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   1c9b4:	f7f7 f908 	bl	13bc8 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1c9b8:	f7f0 fff4 	bl	d9a4 <_arch_isr_direct_pm>
   1c9bc:	f7f0 ff3a 	bl	d834 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1c9c0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1c9c4:	4685      	mov	sp, r0
   1c9c6:	4770      	bx	lr

0001c9c8 <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   1c9c8:	4668      	mov	r0, sp
   1c9ca:	f020 0107 	bic.w	r1, r0, #7
   1c9ce:	468d      	mov	sp, r1
   1c9d0:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   1c9d2:	f7f7 fcf1 	bl	143b8 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1c9d6:	f7f0 ffe5 	bl	d9a4 <_arch_isr_direct_pm>
   1c9da:	f7f0 ff2b 	bl	d834 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   1c9de:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1c9e2:	4685      	mov	sp, r0
   1c9e4:	4770      	bx	lr

0001c9e6 <trace_task_create>:
{
   1c9e6:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   1c9e8:	201d      	movs	r0, #29
   1c9ea:	2200      	movs	r2, #0
   1c9ec:	2106      	movs	r1, #6
   1c9ee:	f7f0 ffc1 	bl	d974 <z_arm_irq_priority_set>
}
   1c9f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   1c9f6:	201d      	movs	r0, #29
   1c9f8:	f7f0 bfac 	b.w	d954 <arch_irq_enable>

0001c9fc <read_task_create>:
{
   1c9fc:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   1c9fe:	201c      	movs	r0, #28
   1ca00:	2200      	movs	r2, #0
   1ca02:	2106      	movs	r1, #6
   1ca04:	f7f0 ffb6 	bl	d974 <z_arm_irq_priority_set>
}
   1ca08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   1ca0c:	201c      	movs	r0, #28
   1ca0e:	f7f0 bfa1 	b.w	d954 <arch_irq_enable>

0001ca12 <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   1ca12:	2000      	movs	r0, #0
   1ca14:	4770      	bx	lr

0001ca16 <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   1ca16:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   1ca1a:	bf18      	it	ne
   1ca1c:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   1ca1e:	0782      	lsls	r2, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   1ca20:	bf48      	it	mi
   1ca22:	f043 0308 	orrmi.w	r3, r3, #8
}
   1ca26:	4618      	mov	r0, r3
   1ca28:	4770      	bx	lr

0001ca2a <z_to_nrf_family>:
	switch (z_family) {
   1ca2a:	2803      	cmp	r0, #3
   1ca2c:	d00f      	beq.n	1ca4e <z_to_nrf_family+0x24>
   1ca2e:	d808      	bhi.n	1ca42 <z_to_nrf_family+0x18>
   1ca30:	2801      	cmp	r0, #1
   1ca32:	d00e      	beq.n	1ca52 <z_to_nrf_family+0x28>
   1ca34:	2802      	cmp	r0, #2
		return -EAFNOSUPPORT;
   1ca36:	bf08      	it	eq
   1ca38:	200a      	moveq	r0, #10
   1ca3a:	bf18      	it	ne
   1ca3c:	f06f 002e 	mvnne.w	r0, #46	; 0x2e
   1ca40:	4770      	bx	lr
	switch (z_family) {
   1ca42:	2866      	cmp	r0, #102	; 0x66
   1ca44:	d006      	beq.n	1ca54 <z_to_nrf_family+0x2a>
   1ca46:	2867      	cmp	r0, #103	; 0x67
		return -EAFNOSUPPORT;
   1ca48:	bf08      	it	eq
   1ca4a:	2001      	moveq	r0, #1
   1ca4c:	e7f5      	b.n	1ca3a <z_to_nrf_family+0x10>
		return NRF_AF_PACKET;
   1ca4e:	2005      	movs	r0, #5
   1ca50:	4770      	bx	lr
		return NRF_AF_INET;
   1ca52:	2002      	movs	r0, #2
}
   1ca54:	4770      	bx	lr

0001ca56 <z_to_nrf_protocol>:
	switch (proto) {
   1ca56:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   1ca5a:	d01d      	beq.n	1ca98 <z_to_nrf_protocol+0x42>
   1ca5c:	dc08      	bgt.n	1ca70 <z_to_nrf_protocol+0x1a>
   1ca5e:	2806      	cmp	r0, #6
   1ca60:	d01d      	beq.n	1ca9e <z_to_nrf_protocol+0x48>
   1ca62:	2811      	cmp	r0, #17
   1ca64:	d01d      	beq.n	1caa2 <z_to_nrf_protocol+0x4c>
   1ca66:	2800      	cmp	r0, #0
		return -EPROTONOSUPPORT;
   1ca68:	bf18      	it	ne
   1ca6a:	f06f 002a 	mvnne.w	r0, #42	; 0x2a
   1ca6e:	4770      	bx	lr
	switch (proto) {
   1ca70:	f240 2301 	movw	r3, #513	; 0x201
   1ca74:	4298      	cmp	r0, r3
   1ca76:	d015      	beq.n	1caa4 <z_to_nrf_protocol+0x4e>
   1ca78:	dc06      	bgt.n	1ca88 <z_to_nrf_protocol+0x32>
   1ca7a:	f240 1311 	movw	r3, #273	; 0x111
   1ca7e:	4298      	cmp	r0, r3
		return -EPROTONOSUPPORT;
   1ca80:	bf08      	it	eq
   1ca82:	f44f 7087 	moveq.w	r0, #270	; 0x10e
   1ca86:	e7ef      	b.n	1ca68 <z_to_nrf_protocol+0x12>
	switch (proto) {
   1ca88:	f240 2302 	movw	r3, #514	; 0x202
   1ca8c:	4298      	cmp	r0, r3
   1ca8e:	d009      	beq.n	1caa4 <z_to_nrf_protocol+0x4e>
   1ca90:	f240 2303 	movw	r3, #515	; 0x203
   1ca94:	4298      	cmp	r0, r3
   1ca96:	e7e7      	b.n	1ca68 <z_to_nrf_protocol+0x12>
		return NRF_SPROTO_TLS1v2;
   1ca98:	f44f 7082 	mov.w	r0, #260	; 0x104
   1ca9c:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   1ca9e:	2001      	movs	r0, #1
   1caa0:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   1caa2:	2002      	movs	r0, #2
}
   1caa4:	4770      	bx	lr

0001caa6 <nrf91_bsdlib_socket_offload_init>:
}
   1caa6:	2000      	movs	r0, #0
   1caa8:	4770      	bx	lr

0001caaa <z_errno>:
   1caaa:	f7fc bfaf 	b.w	19a0c <z_impl_z_errno>

0001caae <nrf91_socket_offload_freeaddrinfo>:
{
   1caae:	b538      	push	{r3, r4, r5, lr}
   1cab0:	4604      	mov	r4, r0
	while (next != NULL) {
   1cab2:	b904      	cbnz	r4, 1cab6 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   1cab4:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   1cab6:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   1cab8:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   1caba:	f000 fd5a 	bl	1d572 <k_free>
		k_free(this);
   1cabe:	4620      	mov	r0, r4
   1cac0:	f000 fd57 	bl	1d572 <k_free>
		next = next->ai_next;
   1cac4:	462c      	mov	r4, r5
   1cac6:	e7f4      	b.n	1cab2 <nrf91_socket_offload_freeaddrinfo+0x4>

0001cac8 <z_to_nrf_addrinfo_hints>:
{
   1cac8:	b538      	push	{r3, r4, r5, lr}
   1caca:	460c      	mov	r4, r1
   1cacc:	4605      	mov	r5, r0
	memset(nrf_out, 0, sizeof(struct nrf_addrinfo));
   1cace:	2220      	movs	r2, #32
   1cad0:	2100      	movs	r1, #0
   1cad2:	4620      	mov	r0, r4
   1cad4:	f7ff f943 	bl	1bd5e <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   1cad8:	2300      	movs	r3, #0
   1cada:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1cadc:	68ab      	ldr	r3, [r5, #8]
	switch (socktype) {
   1cade:	2b03      	cmp	r3, #3
   1cae0:	d003      	beq.n	1caea <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   1cae2:	2b04      	cmp	r3, #4
   1cae4:	bf08      	it	eq
   1cae6:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1caea:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   1caec:	88a8      	ldrh	r0, [r5, #4]
   1caee:	f7ff ff9c 	bl	1ca2a <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1caf2:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
   1caf6:	d00b      	beq.n	1cb10 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   1caf8:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1cafa:	68e8      	ldr	r0, [r5, #12]
   1cafc:	f7ff ffab 	bl	1ca56 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1cb00:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1cb04:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1cb06:	d003      	beq.n	1cb10 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   1cb08:	69a8      	ldr	r0, [r5, #24]
   1cb0a:	b108      	cbz	r0, 1cb10 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   1cb0c:	61a0      	str	r0, [r4, #24]
	return 0;
   1cb0e:	2000      	movs	r0, #0
}
   1cb10:	bd38      	pop	{r3, r4, r5, pc}

0001cb12 <nrf91_socket_offload_send>:
{
   1cb12:	b570      	push	{r4, r5, r6, lr}
   1cb14:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1cb16:	4618      	mov	r0, r3
{
   1cb18:	4615      	mov	r5, r2
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1cb1a:	f7ff ff7c 	bl	1ca16 <z_to_nrf_flags>
   1cb1e:	462a      	mov	r2, r5
   1cb20:	4603      	mov	r3, r0
   1cb22:	4620      	mov	r0, r4
}
   1cb24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1cb28:	f7f9 b99a 	b.w	15e60 <nrf_send>

0001cb2c <nrf91_socket_offload_recv>:
{
   1cb2c:	b570      	push	{r4, r5, r6, lr}
   1cb2e:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1cb30:	4618      	mov	r0, r3
{
   1cb32:	4615      	mov	r5, r2
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1cb34:	f7ff ff6f 	bl	1ca16 <z_to_nrf_flags>
   1cb38:	462a      	mov	r2, r5
   1cb3a:	4603      	mov	r3, r0
   1cb3c:	4620      	mov	r0, r4
}
   1cb3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1cb42:	f7f9 b9c3 	b.w	15ecc <nrf_recv>

0001cb46 <nrf91_socket_offload_getsockopt>:
{
   1cb46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cb4a:	461d      	mov	r5, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   1cb4c:	2300      	movs	r3, #0
{
   1cb4e:	b086      	sub	sp, #24
   1cb50:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   1cb54:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1cb58:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   1cb5c:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   1cb60:	4607      	mov	r7, r0
   1cb62:	460c      	mov	r4, r1
   1cb64:	4616      	mov	r6, r2
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1cb66:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   1cb68:	d002      	beq.n	1cb70 <nrf91_socket_offload_getsockopt+0x2a>
   1cb6a:	dc2b      	bgt.n	1cbc4 <nrf91_socket_offload_getsockopt+0x7e>
   1cb6c:	2901      	cmp	r1, #1
   1cb6e:	d13d      	bne.n	1cbec <nrf91_socket_offload_getsockopt+0xa6>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   1cb70:	aa02      	add	r2, sp, #8
   1cb72:	4631      	mov	r1, r6
   1cb74:	4620      	mov	r0, r4
   1cb76:	f7f3 f863 	bl	fc40 <z_to_nrf_optname>
   1cb7a:	2800      	cmp	r0, #0
   1cb7c:	db36      	blt.n	1cbec <nrf91_socket_offload_getsockopt+0xa6>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   1cb7e:	2c01      	cmp	r4, #1
   1cb80:	d128      	bne.n	1cbd4 <nrf91_socket_offload_getsockopt+0x8e>
   1cb82:	2e14      	cmp	r6, #20
   1cb84:	d126      	bne.n	1cbd4 <nrf91_socket_offload_getsockopt+0x8e>
		nrf_optlen = sizeof(struct nrf_timeval);
   1cb86:	2308      	movs	r3, #8
   1cb88:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   1cb8a:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1cb8c:	aa03      	add	r2, sp, #12
   1cb8e:	9200      	str	r2, [sp, #0]
   1cb90:	4638      	mov	r0, r7
   1cb92:	9a02      	ldr	r2, [sp, #8]
   1cb94:	4621      	mov	r1, r4
   1cb96:	f7f9 fa19 	bl	15fcc <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   1cb9a:	4607      	mov	r7, r0
   1cb9c:	b970      	cbnz	r0, 1cbbc <nrf91_socket_offload_getsockopt+0x76>
   1cb9e:	b16d      	cbz	r5, 1cbbc <nrf91_socket_offload_getsockopt+0x76>
		*optlen = nrf_optlen;
   1cba0:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   1cba2:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   1cba4:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   1cba8:	d108      	bne.n	1cbbc <nrf91_socket_offload_getsockopt+0x76>
			if (optname == SO_ERROR) {
   1cbaa:	2e04      	cmp	r6, #4
   1cbac:	d114      	bne.n	1cbd8 <nrf91_socket_offload_getsockopt+0x92>
				bsd_os_errno_set(*(int *)optval);
   1cbae:	6828      	ldr	r0, [r5, #0]
   1cbb0:	f7f2 ff64 	bl	fa7c <bsd_os_errno_set>
				*(int *)optval = errno;
   1cbb4:	f7ff ff79 	bl	1caaa <z_errno>
   1cbb8:	6803      	ldr	r3, [r0, #0]
   1cbba:	602b      	str	r3, [r5, #0]
}
   1cbbc:	4638      	mov	r0, r7
   1cbbe:	b006      	add	sp, #24
   1cbc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1cbc4:	f240 2302 	movw	r3, #514	; 0x202
   1cbc8:	4299      	cmp	r1, r3
   1cbca:	d0d1      	beq.n	1cb70 <nrf91_socket_offload_getsockopt+0x2a>
   1cbcc:	f240 2303 	movw	r3, #515	; 0x203
   1cbd0:	4299      	cmp	r1, r3
   1cbd2:	e7cc      	b.n	1cb6e <nrf91_socket_offload_getsockopt+0x28>
   1cbd4:	462b      	mov	r3, r5
   1cbd6:	e7d9      	b.n	1cb8c <nrf91_socket_offload_getsockopt+0x46>
			} else if (optname == SO_RCVTIMEO) {
   1cbd8:	2e14      	cmp	r6, #20
   1cbda:	d1ef      	bne.n	1cbbc <nrf91_socket_offload_getsockopt+0x76>
				((struct timeval *)optval)->tv_sec =
   1cbdc:	9b04      	ldr	r3, [sp, #16]
   1cbde:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   1cbe0:	9b05      	ldr	r3, [sp, #20]
   1cbe2:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   1cbe4:	2308      	movs	r3, #8
   1cbe6:	f8c8 3000 	str.w	r3, [r8]
   1cbea:	e7e7      	b.n	1cbbc <nrf91_socket_offload_getsockopt+0x76>
	errno = ENOPROTOOPT;
   1cbec:	f7ff ff5d 	bl	1caaa <z_errno>
   1cbf0:	232a      	movs	r3, #42	; 0x2a
	return retval;
   1cbf2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	errno = ENOPROTOOPT;
   1cbf6:	6003      	str	r3, [r0, #0]
	return retval;
   1cbf8:	e7e0      	b.n	1cbbc <nrf91_socket_offload_getsockopt+0x76>

0001cbfa <nrf91_socket_offload_poll>:
{
   1cbfa:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cbfc:	b091      	sub	sp, #68	; 0x44
   1cbfe:	4605      	mov	r5, r0
   1cc00:	460c      	mov	r4, r1
   1cc02:	4616      	mov	r6, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   1cc04:	2100      	movs	r1, #0
   1cc06:	2240      	movs	r2, #64	; 0x40
   1cc08:	4668      	mov	r0, sp
   1cc0a:	f7ff f8a8 	bl	1bd5e <memset>
	for (int i = 0; i < nfds; i++) {
   1cc0e:	466a      	mov	r2, sp
   1cc10:	2100      	movs	r1, #0
		if (fds[i].events & POLLIN) {
   1cc12:	1d2f      	adds	r7, r5, #4
	for (int i = 0; i < nfds; i++) {
   1cc14:	42a1      	cmp	r1, r4
   1cc16:	db0c      	blt.n	1cc32 <nrf91_socket_offload_poll+0x38>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   1cc18:	4632      	mov	r2, r6
   1cc1a:	4621      	mov	r1, r4
   1cc1c:	4668      	mov	r0, sp
   1cc1e:	f7f9 f9f5 	bl	1600c <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   1cc22:	2200      	movs	r2, #0
   1cc24:	462b      	mov	r3, r5
		fds[i].revents = 0;
   1cc26:	4616      	mov	r6, r2
			fds[i].revents |= POLLIN;
   1cc28:	2701      	movs	r7, #1
	for (int i = 0; i < nfds; i++) {
   1cc2a:	42a2      	cmp	r2, r4
   1cc2c:	db1a      	blt.n	1cc64 <nrf91_socket_offload_poll+0x6a>
}
   1cc2e:	b011      	add	sp, #68	; 0x44
   1cc30:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   1cc32:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   1cc36:	f837 0031 	ldrh.w	r0, [r7, r1, lsl #3]
		tmp[i].handle = fds[i].fd;
   1cc3a:	6013      	str	r3, [r2, #0]
		if (fds[i].events & POLLIN) {
   1cc3c:	07c3      	lsls	r3, r0, #31
			tmp[i].requested |= NRF_POLLIN;
   1cc3e:	bf48      	it	mi
   1cc40:	8893      	ldrhmi	r3, [r2, #4]
	for (int i = 0; i < nfds; i++) {
   1cc42:	f101 0101 	add.w	r1, r1, #1
			tmp[i].requested |= NRF_POLLIN;
   1cc46:	bf44      	itt	mi
   1cc48:	f043 0301 	orrmi.w	r3, r3, #1
   1cc4c:	8093      	strhmi	r3, [r2, #4]
		if (fds[i].events & POLLOUT) {
   1cc4e:	0743      	lsls	r3, r0, #29
			tmp[i].requested |= NRF_POLLOUT;
   1cc50:	bf48      	it	mi
   1cc52:	8893      	ldrhmi	r3, [r2, #4]
   1cc54:	f102 0208 	add.w	r2, r2, #8
   1cc58:	bf44      	itt	mi
   1cc5a:	f043 0302 	orrmi.w	r3, r3, #2
   1cc5e:	f822 3c04 	strhmi.w	r3, [r2, #-4]
   1cc62:	e7d7      	b.n	1cc14 <nrf91_socket_offload_poll+0x1a>
		if (tmp[i].returned & NRF_POLLIN) {
   1cc64:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   1cc68:	88c9      	ldrh	r1, [r1, #6]
		fds[i].revents = 0;
   1cc6a:	80de      	strh	r6, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   1cc6c:	07cd      	lsls	r5, r1, #31
			fds[i].revents |= POLLIN;
   1cc6e:	bf48      	it	mi
   1cc70:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   1cc72:	078d      	lsls	r5, r1, #30
			fds[i].revents |= POLLOUT;
   1cc74:	bf48      	it	mi
   1cc76:	88dd      	ldrhmi	r5, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   1cc78:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   1cc7c:	bf44      	itt	mi
   1cc7e:	f045 0504 	orrmi.w	r5, r5, #4
   1cc82:	80dd      	strhmi	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   1cc84:	074d      	lsls	r5, r1, #29
			fds[i].revents |= POLLERR;
   1cc86:	bf48      	it	mi
   1cc88:	88dd      	ldrhmi	r5, [r3, #6]
   1cc8a:	f103 0308 	add.w	r3, r3, #8
   1cc8e:	bf44      	itt	mi
   1cc90:	f045 0508 	orrmi.w	r5, r5, #8
   1cc94:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   1cc98:	06cd      	lsls	r5, r1, #27
			fds[i].revents |= POLLNVAL;
   1cc9a:	bf42      	ittt	mi
   1cc9c:	f833 5c02 	ldrhmi.w	r5, [r3, #-2]
   1cca0:	f045 0520 	orrmi.w	r5, r5, #32
   1cca4:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   1cca8:	0709      	lsls	r1, r1, #28
			fds[i].revents |= POLLHUP;
   1ccaa:	bf42      	ittt	mi
   1ccac:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   1ccb0:	f041 0110 	orrmi.w	r1, r1, #16
   1ccb4:	f823 1c02 	strhmi.w	r1, [r3, #-2]
   1ccb8:	e7b7      	b.n	1cc2a <nrf91_socket_offload_poll+0x30>

0001ccba <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   1ccba:	f7f9 b933 	b.w	15f24 <nrf_listen>

0001ccbe <nrf91_socket_offload_close>:
	return nrf_close(sd);
   1ccbe:	f7f9 b8a5 	b.w	15e0c <nrf_close>

0001ccc2 <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   1ccc2:	2903      	cmp	r1, #3
{
   1ccc4:	b508      	push	{r3, lr}
	switch (cmd) {
   1ccc6:	d00b      	beq.n	1cce0 <nrf91_socket_offload_fcntl+0x1e>
   1ccc8:	2904      	cmp	r1, #4
   1ccca:	d111      	bne.n	1ccf0 <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   1cccc:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   1ccce:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   1ccd2:	d10d      	bne.n	1ccf0 <nrf91_socket_offload_fcntl+0x2e>
}
   1ccd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1ccd8:	1392      	asrs	r2, r2, #14
   1ccda:	2101      	movs	r1, #1
   1ccdc:	f7f9 b998 	b.w	16010 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   1cce0:	2200      	movs	r2, #0
   1cce2:	2102      	movs	r1, #2
   1cce4:	f7f9 f994 	bl	16010 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   1cce8:	0380      	lsls	r0, r0, #14
   1ccea:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   1ccee:	bd08      	pop	{r3, pc}
	errno = EINVAL;
   1ccf0:	f7ff fedb 	bl	1caaa <z_errno>
   1ccf4:	2316      	movs	r3, #22
   1ccf6:	6003      	str	r3, [r0, #0]
	return retval;
   1ccf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ccfc:	e7f7      	b.n	1ccee <nrf91_socket_offload_fcntl+0x2c>

0001ccfe <nrf91_socket_offload_recvfrom>:
{
   1ccfe:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cd00:	4605      	mov	r5, r0
   1cd02:	b08d      	sub	sp, #52	; 0x34
   1cd04:	4618      	mov	r0, r3
   1cd06:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   1cd0a:	4617      	mov	r7, r2
	if (from == NULL) {
   1cd0c:	f7ff fe83 	bl	1ca16 <z_to_nrf_flags>
   1cd10:	4603      	mov	r3, r0
   1cd12:	b94c      	cbnz	r4, 1cd28 <nrf91_socket_offload_recvfrom+0x2a>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1cd14:	4628      	mov	r0, r5
   1cd16:	e9cd 4400 	strd	r4, r4, [sp]
   1cd1a:	463a      	mov	r2, r7
   1cd1c:	f7f9 f8ba 	bl	15e94 <nrf_recvfrom>
   1cd20:	4605      	mov	r5, r0
}
   1cd22:	4628      	mov	r0, r5
   1cd24:	b00d      	add	sp, #52	; 0x34
   1cd26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   1cd28:	2224      	movs	r2, #36	; 0x24
   1cd2a:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1cd2c:	aa02      	add	r2, sp, #8
   1cd2e:	9201      	str	r2, [sp, #4]
   1cd30:	aa03      	add	r2, sp, #12
   1cd32:	9200      	str	r2, [sp, #0]
   1cd34:	4628      	mov	r0, r5
   1cd36:	463a      	mov	r2, r7
   1cd38:	f7f9 f8ac 	bl	15e94 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   1cd3c:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1cd3e:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   1cd40:	2b02      	cmp	r3, #2
   1cd42:	d109      	bne.n	1cd58 <nrf91_socket_offload_recvfrom+0x5a>
	ptr->sin_port = nrf_in->sin_port;
   1cd44:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1cd48:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1cd4a:	2301      	movs	r3, #1
   1cd4c:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1cd4e:	9b06      	ldr	r3, [sp, #24]
   1cd50:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   1cd52:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   1cd54:	6033      	str	r3, [r6, #0]
	return retval;
   1cd56:	e7e4      	b.n	1cd22 <nrf91_socket_offload_recvfrom+0x24>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   1cd58:	2b0a      	cmp	r3, #10
   1cd5a:	d1e2      	bne.n	1cd22 <nrf91_socket_offload_recvfrom+0x24>
	ptr->sin6_port = nrf_in->sin6_port;
   1cd5c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
	ptr->sin6_family = AF_INET6;
   1cd60:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   1cd62:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   1cd64:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1cd66:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   1cd68:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1cd6c:	a907      	add	r1, sp, #28
   1cd6e:	f7fe ffcc 	bl	1bd0a <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1cd72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1cd74:	7523      	strb	r3, [r4, #20]
			*fromlen = sizeof(struct sockaddr_in6);
   1cd76:	2318      	movs	r3, #24
   1cd78:	e7ec      	b.n	1cd54 <nrf91_socket_offload_recvfrom+0x56>

0001cd7a <nrf91_socket_offload_connect>:
{
   1cd7a:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   1cd7c:	880b      	ldrh	r3, [r1, #0]
{
   1cd7e:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   1cd80:	2b01      	cmp	r3, #1
{
   1cd82:	4606      	mov	r6, r0
   1cd84:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   1cd86:	d10e      	bne.n	1cda6 <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   1cd88:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1cd8a:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1cd8c:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   1cd90:	2302      	movs	r3, #2
   1cd92:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1cd94:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1cd96:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1cd9a:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   1cd9c:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1cd9e:	f7f9 f8af 	bl	15f00 <nrf_connect>
}
   1cda2:	b00a      	add	sp, #40	; 0x28
   1cda4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   1cda6:	2b02      	cmp	r3, #2
   1cda8:	d112      	bne.n	1cdd0 <nrf91_socket_offload_connect+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   1cdaa:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1cdac:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1cdae:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   1cdb2:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1cdb4:	2210      	movs	r2, #16
   1cdb6:	3104      	adds	r1, #4
   1cdb8:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   1cdba:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1cdbc:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1cdc0:	f7fe ffa3 	bl	1bd0a <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1cdc4:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1cdc6:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1cdc8:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1cdca:	a901      	add	r1, sp, #4
   1cdcc:	4630      	mov	r0, r6
   1cdce:	e7e6      	b.n	1cd9e <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   1cdd0:	f7f9 f896 	bl	15f00 <nrf_connect>
		if (retval < 0) {
   1cdd4:	2800      	cmp	r0, #0
   1cdd6:	dae4      	bge.n	1cda2 <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   1cdd8:	f7ff fe67 	bl	1caaa <z_errno>
   1cddc:	2323      	movs	r3, #35	; 0x23
   1cdde:	6003      	str	r3, [r0, #0]
   1cde0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cde4:	e7dd      	b.n	1cda2 <nrf91_socket_offload_connect+0x28>

0001cde6 <nrf91_socket_offload_socket>:
{
   1cde6:	b510      	push	{r4, lr}
	family = z_to_nrf_family(family);
   1cde8:	b280      	uxth	r0, r0
   1cdea:	f7ff fe1e 	bl	1ca2a <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1cdee:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
	family = z_to_nrf_family(family);
   1cdf2:	4604      	mov	r4, r0
	if (family == -EAFNOSUPPORT) {
   1cdf4:	d106      	bne.n	1ce04 <nrf91_socket_offload_socket+0x1e>
		errno = EAFNOSUPPORT;
   1cdf6:	f7ff fe58 	bl	1caaa <z_errno>
   1cdfa:	232f      	movs	r3, #47	; 0x2f
		errno = EPROTONOSUPPORT;
   1cdfc:	6003      	str	r3, [r0, #0]
}
   1cdfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ce02:	bd10      	pop	{r4, pc}
	switch (socktype) {
   1ce04:	2903      	cmp	r1, #3
   1ce06:	d003      	beq.n	1ce10 <nrf91_socket_offload_socket+0x2a>
		return NRF_SOCK_MGMT;
   1ce08:	2904      	cmp	r1, #4
   1ce0a:	bf08      	it	eq
   1ce0c:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   1ce10:	4610      	mov	r0, r2
   1ce12:	f7ff fe20 	bl	1ca56 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   1ce16:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	proto = z_to_nrf_protocol(proto);
   1ce1a:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   1ce1c:	d103      	bne.n	1ce26 <nrf91_socket_offload_socket+0x40>
		errno = EPROTONOSUPPORT;
   1ce1e:	f7ff fe44 	bl	1caaa <z_errno>
   1ce22:	232b      	movs	r3, #43	; 0x2b
   1ce24:	e7ea      	b.n	1cdfc <nrf91_socket_offload_socket+0x16>
	retval = nrf_socket(family, type, proto);
   1ce26:	4620      	mov	r0, r4
}
   1ce28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   1ce2c:	f7f8 bfdc 	b.w	15de8 <nrf_socket>

0001ce30 <nrf91_socket_offload_accept>:
{
   1ce30:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   1ce32:	2708      	movs	r7, #8
{
   1ce34:	b085      	sub	sp, #20
   1ce36:	460c      	mov	r4, r1
   1ce38:	4616      	mov	r6, r2
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   1ce3a:	eb0d 0107 	add.w	r1, sp, r7
   1ce3e:	aa01      	add	r2, sp, #4
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   1ce40:	9701      	str	r7, [sp, #4]
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   1ce42:	f7f9 f87f 	bl	15f44 <nrf_accept>
	if (retval < 0) {
   1ce46:	1e05      	subs	r5, r0, #0
   1ce48:	db23      	blt.n	1ce92 <nrf91_socket_offload_accept+0x62>
	if (nrf_addr.sa_family == NRF_AF_INET) {
   1ce4a:	9b03      	ldr	r3, [sp, #12]
   1ce4c:	2b02      	cmp	r3, #2
   1ce4e:	d10a      	bne.n	1ce66 <nrf91_socket_offload_accept+0x36>
	ptr->sin_port = nrf_in->sin_port;
   1ce50:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		*addrlen = sizeof(struct sockaddr_in);
   1ce54:	6037      	str	r7, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   1ce56:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1ce58:	2301      	movs	r3, #1
   1ce5a:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1ce5c:	9b05      	ldr	r3, [sp, #20]
   1ce5e:	6063      	str	r3, [r4, #4]
}
   1ce60:	4628      	mov	r0, r5
   1ce62:	b005      	add	sp, #20
   1ce64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (nrf_addr.sa_family == NRF_AF_INET6) {
   1ce66:	2b0a      	cmp	r3, #10
   1ce68:	d10f      	bne.n	1ce8a <nrf91_socket_offload_accept+0x5a>
		*addrlen = sizeof(struct sockaddr_in6);
   1ce6a:	2318      	movs	r3, #24
   1ce6c:	6033      	str	r3, [r6, #0]
	ptr->sin6_port = nrf_in->sin6_port;
   1ce6e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	ptr->sin6_family = AF_INET6;
   1ce72:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   1ce74:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   1ce76:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1ce78:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   1ce7a:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1ce7e:	a906      	add	r1, sp, #24
   1ce80:	f7fe ff43 	bl	1bd0a <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1ce84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ce86:	7523      	strb	r3, [r4, #20]
   1ce88:	e7ea      	b.n	1ce60 <nrf91_socket_offload_accept+0x30>
	errno = ENOTSUP;
   1ce8a:	f7ff fe0e 	bl	1caaa <z_errno>
   1ce8e:	2323      	movs	r3, #35	; 0x23
   1ce90:	6003      	str	r3, [r0, #0]
		return -1;
   1ce92:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1ce96:	e7e3      	b.n	1ce60 <nrf91_socket_offload_accept+0x30>

0001ce98 <nrf91_socket_offload_getaddrinfo>:
{
   1ce98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce9c:	4614      	mov	r4, r2
   1ce9e:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   1cea0:	2100      	movs	r1, #0
{
   1cea2:	b093      	sub	sp, #76	; 0x4c
   1cea4:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1cea6:	2220      	movs	r2, #32
   1cea8:	a802      	add	r0, sp, #8
{
   1ceaa:	4698      	mov	r8, r3
	struct nrf_addrinfo *nrf_res = NULL;
   1ceac:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1ceae:	f7fe ff56 	bl	1bd5e <memset>
	if (hints != NULL) {
   1ceb2:	b194      	cbz	r4, 1ceda <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   1ceb4:	a902      	add	r1, sp, #8
   1ceb6:	4620      	mov	r0, r4
   1ceb8:	f7ff fe06 	bl	1cac8 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   1cebc:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
   1cec0:	f000 80bf 	beq.w	1d042 <nrf91_socket_offload_getaddrinfo+0x1aa>
		} else if (error == -EAFNOSUPPORT) {
   1cec4:	302f      	adds	r0, #47	; 0x2f
   1cec6:	f000 80bf 	beq.w	1d048 <nrf91_socket_offload_getaddrinfo+0x1b0>
		if (hints->ai_next != NULL) {
   1ceca:	69e0      	ldr	r0, [r4, #28]
   1cecc:	b120      	cbz	r0, 1ced8 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   1cece:	ac0a      	add	r4, sp, #40	; 0x28
   1ced0:	4621      	mov	r1, r4
   1ced2:	f7ff fdf9 	bl	1cac8 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   1ced6:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   1ced8:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   1ceda:	4631      	mov	r1, r6
   1cedc:	4628      	mov	r0, r5
   1cede:	ab01      	add	r3, sp, #4
   1cee0:	4622      	mov	r2, r4
   1cee2:	f7f9 f88f 	bl	16004 <nrf_getaddrinfo>
	*res = NULL;
   1cee6:	2700      	movs	r7, #0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   1cee8:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   1ceea:	f8c8 7000 	str.w	r7, [r8]
		return AF_INET6;
   1ceee:	f04f 0902 	mov.w	r9, #2
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1cef2:	4605      	mov	r5, r0
   1cef4:	2800      	cmp	r0, #0
   1cef6:	d04a      	beq.n	1cf8e <nrf91_socket_offload_getaddrinfo+0xf6>
		nrf91_socket_offload_freeaddrinfo(*res);
   1cef8:	f8d8 0000 	ldr.w	r0, [r8]
   1cefc:	f7ff fdd7 	bl	1caae <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   1cf00:	2300      	movs	r3, #0
   1cf02:	f8c8 3000 	str.w	r3, [r8]
   1cf06:	e044      	b.n	1cf92 <nrf91_socket_offload_getaddrinfo+0xfa>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   1cf08:	2020      	movs	r0, #32
   1cf0a:	f7fc ffcf 	bl	19eac <k_malloc>
		if (next_z_res == NULL) {
   1cf0e:	4604      	mov	r4, r0
   1cf10:	2800      	cmp	r0, #0
   1cf12:	f000 8091 	beq.w	1d038 <nrf91_socket_offload_getaddrinfo+0x1a0>
	family = nrf_to_z_family(nrf_in->ai_family);
   1cf16:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1cf18:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   1cf1a:	2a05      	cmp	r2, #5
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   1cf1c:	e9c0 5506 	strd	r5, r5, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   1cf20:	6005      	str	r5, [r0, #0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1cf22:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   1cf24:	d03c      	beq.n	1cfa0 <nrf91_socket_offload_getaddrinfo+0x108>
   1cf26:	dc09      	bgt.n	1cf3c <nrf91_socket_offload_getaddrinfo+0xa4>
   1cf28:	2a01      	cmp	r2, #1
   1cf2a:	d03b      	beq.n	1cfa4 <nrf91_socket_offload_getaddrinfo+0x10c>
   1cf2c:	2a02      	cmp	r2, #2
   1cf2e:	d03b      	beq.n	1cfa8 <nrf91_socket_offload_getaddrinfo+0x110>
			k_free(next_z_res);
   1cf30:	4620      	mov	r0, r4
   1cf32:	f000 fb1e 	bl	1d572 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   1cf36:	f06f 0508 	mvn.w	r5, #8
   1cf3a:	e7dd      	b.n	1cef8 <nrf91_socket_offload_getaddrinfo+0x60>
	switch (nrf_family) {
   1cf3c:	2a0a      	cmp	r2, #10
   1cf3e:	d035      	beq.n	1cfac <nrf91_socket_offload_getaddrinfo+0x114>
   1cf40:	2a66      	cmp	r2, #102	; 0x66
   1cf42:	d1f5      	bne.n	1cf30 <nrf91_socket_offload_getaddrinfo+0x98>
		return AF_LTE;
   1cf44:	4613      	mov	r3, r2
	z_out->ai_family = family;
   1cf46:	6063      	str	r3, [r4, #4]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1cf48:	68f3      	ldr	r3, [r6, #12]
	switch (proto) {
   1cf4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1cf4e:	d04e      	beq.n	1cfee <nrf91_socket_offload_getaddrinfo+0x156>
   1cf50:	dc2e      	bgt.n	1cfb0 <nrf91_socket_offload_getaddrinfo+0x118>
   1cf52:	2b01      	cmp	r3, #1
   1cf54:	d050      	beq.n	1cff8 <nrf91_socket_offload_getaddrinfo+0x160>
   1cf56:	2b02      	cmp	r3, #2
   1cf58:	d04c      	beq.n	1cff4 <nrf91_socket_offload_getaddrinfo+0x15c>
   1cf5a:	2b00      	cmp	r3, #0
   1cf5c:	d130      	bne.n	1cfc0 <nrf91_socket_offload_getaddrinfo+0x128>
	if (nrf_in->ai_family == NRF_AF_INET) {
   1cf5e:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1cf60:	60e3      	str	r3, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   1cf62:	d14b      	bne.n	1cffc <nrf91_socket_offload_getaddrinfo+0x164>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   1cf64:	2008      	movs	r0, #8
   1cf66:	f7fc ffa1 	bl	19eac <k_malloc>
   1cf6a:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   1cf6c:	2800      	cmp	r0, #0
   1cf6e:	d060      	beq.n	1d032 <nrf91_socket_offload_getaddrinfo+0x19a>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   1cf70:	2308      	movs	r3, #8
   1cf72:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   1cf74:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   1cf76:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1cf78:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   1cf7a:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   1cf7c:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1cf7e:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   1cf80:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   1cf82:	2f00      	cmp	r7, #0
   1cf84:	d15b      	bne.n	1d03e <nrf91_socket_offload_getaddrinfo+0x1a6>
			*res = next_z_res;
   1cf86:	f8c8 4000 	str.w	r4, [r8]
		next_nrf_res = next_nrf_res->ai_next;
   1cf8a:	4627      	mov	r7, r4
   1cf8c:	69f6      	ldr	r6, [r6, #28]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1cf8e:	2e00      	cmp	r6, #0
   1cf90:	d1ba      	bne.n	1cf08 <nrf91_socket_offload_getaddrinfo+0x70>
	nrf_freeaddrinfo(nrf_res);
   1cf92:	9801      	ldr	r0, [sp, #4]
   1cf94:	f7f9 f838 	bl	16008 <nrf_freeaddrinfo>
}
   1cf98:	4628      	mov	r0, r5
   1cf9a:	b013      	add	sp, #76	; 0x4c
   1cf9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return AF_PACKET;
   1cfa0:	2303      	movs	r3, #3
   1cfa2:	e7d0      	b.n	1cf46 <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_LOCAL;
   1cfa4:	2367      	movs	r3, #103	; 0x67
   1cfa6:	e7ce      	b.n	1cf46 <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_INET;
   1cfa8:	2301      	movs	r3, #1
   1cfaa:	e7cc      	b.n	1cf46 <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_INET6;
   1cfac:	2302      	movs	r3, #2
   1cfae:	e7ca      	b.n	1cf46 <nrf91_socket_offload_getaddrinfo+0xae>
	switch (proto) {
   1cfb0:	f240 2101 	movw	r1, #513	; 0x201
   1cfb4:	428b      	cmp	r3, r1
   1cfb6:	d0d2      	beq.n	1cf5e <nrf91_socket_offload_getaddrinfo+0xc6>
   1cfb8:	dc0d      	bgt.n	1cfd6 <nrf91_socket_offload_getaddrinfo+0x13e>
   1cfba:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1cfbe:	d013      	beq.n	1cfe8 <nrf91_socket_offload_getaddrinfo+0x150>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1cfc0:	f06f 032a 	mvn.w	r3, #42	; 0x2a
   1cfc4:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   1cfc6:	2300      	movs	r3, #0
   1cfc8:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   1cfca:	4620      	mov	r0, r4
   1cfcc:	f000 fad1 	bl	1d572 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   1cfd0:	f06f 0506 	mvn.w	r5, #6
   1cfd4:	e790      	b.n	1cef8 <nrf91_socket_offload_getaddrinfo+0x60>
	switch (proto) {
   1cfd6:	f240 2102 	movw	r1, #514	; 0x202
   1cfda:	428b      	cmp	r3, r1
   1cfdc:	d0bf      	beq.n	1cf5e <nrf91_socket_offload_getaddrinfo+0xc6>
   1cfde:	f240 2103 	movw	r1, #515	; 0x203
   1cfe2:	428b      	cmp	r3, r1
   1cfe4:	d0bb      	beq.n	1cf5e <nrf91_socket_offload_getaddrinfo+0xc6>
   1cfe6:	e7eb      	b.n	1cfc0 <nrf91_socket_offload_getaddrinfo+0x128>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1cfe8:	f240 1311 	movw	r3, #273	; 0x111
   1cfec:	e7b7      	b.n	1cf5e <nrf91_socket_offload_getaddrinfo+0xc6>
   1cfee:	f44f 7381 	mov.w	r3, #258	; 0x102
   1cff2:	e7b4      	b.n	1cf5e <nrf91_socket_offload_getaddrinfo+0xc6>
   1cff4:	2311      	movs	r3, #17
   1cff6:	e7b2      	b.n	1cf5e <nrf91_socket_offload_getaddrinfo+0xc6>
   1cff8:	2306      	movs	r3, #6
   1cffa:	e7b0      	b.n	1cf5e <nrf91_socket_offload_getaddrinfo+0xc6>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   1cffc:	2a0a      	cmp	r2, #10
   1cffe:	d1e4      	bne.n	1cfca <nrf91_socket_offload_getaddrinfo+0x132>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1d000:	2018      	movs	r0, #24
   1d002:	f7fc ff53 	bl	19eac <k_malloc>
   1d006:	4682      	mov	sl, r0
   1d008:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   1d00a:	b190      	cbz	r0, 1d032 <nrf91_socket_offload_getaddrinfo+0x19a>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1d00c:	2318      	movs	r3, #24
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1d00e:	2210      	movs	r2, #16
			(const struct nrf_sockaddr_in6 *)nrf_in->ai_addr);
   1d010:	f8d6 b014 	ldr.w	fp, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1d014:	6123      	str	r3, [r4, #16]
	ptr->sin6_port = nrf_in->sin6_port;
   1d016:	f8bb 3008 	ldrh.w	r3, [fp, #8]
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1d01a:	eb0b 0102 	add.w	r1, fp, r2
	ptr->sin6_port = nrf_in->sin6_port;
   1d01e:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   1d020:	f820 9b04 	strh.w	r9, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1d024:	f7fe fe71 	bl	1bd0a <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1d028:	f8db 3020 	ldr.w	r3, [fp, #32]
   1d02c:	f88a 3014 	strb.w	r3, [sl, #20]
		} else if (error == -EAFNOSUPPORT) {
   1d030:	e7a7      	b.n	1cf82 <nrf91_socket_offload_getaddrinfo+0xea>
			k_free(next_z_res);
   1d032:	4620      	mov	r0, r4
   1d034:	f000 fa9d 	bl	1d572 <k_free>
			retval = DNS_EAI_MEMORY;
   1d038:	f06f 0509 	mvn.w	r5, #9
   1d03c:	e75c      	b.n	1cef8 <nrf91_socket_offload_getaddrinfo+0x60>
			latest_z_res->ai_next = next_z_res;
   1d03e:	61fc      	str	r4, [r7, #28]
   1d040:	e7a3      	b.n	1cf8a <nrf91_socket_offload_getaddrinfo+0xf2>
			return DNS_EAI_SOCKTYPE;
   1d042:	f06f 0506 	mvn.w	r5, #6
   1d046:	e7a7      	b.n	1cf98 <nrf91_socket_offload_getaddrinfo+0x100>
			return DNS_EAI_ADDRFAMILY;
   1d048:	f06f 0508 	mvn.w	r5, #8
   1d04c:	e7a4      	b.n	1cf98 <nrf91_socket_offload_getaddrinfo+0x100>

0001d04e <nrf91_socket_offload_setsockopt>:
{
   1d04e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   1d052:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   1d056:	b086      	sub	sp, #24
   1d058:	4680      	mov	r8, r0
   1d05a:	460c      	mov	r4, r1
   1d05c:	4617      	mov	r7, r2
   1d05e:	461d      	mov	r5, r3
   1d060:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	switch (z_in_level) {
   1d062:	d002      	beq.n	1d06a <nrf91_socket_offload_setsockopt+0x1c>
   1d064:	dc1c      	bgt.n	1d0a0 <nrf91_socket_offload_setsockopt+0x52>
   1d066:	2901      	cmp	r1, #1
   1d068:	d122      	bne.n	1d0b0 <nrf91_socket_offload_setsockopt+0x62>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   1d06a:	aa03      	add	r2, sp, #12
   1d06c:	4639      	mov	r1, r7
   1d06e:	4620      	mov	r0, r4
   1d070:	f7f2 fde6 	bl	fc40 <z_to_nrf_optname>
   1d074:	2800      	cmp	r0, #0
   1d076:	db1b      	blt.n	1d0b0 <nrf91_socket_offload_setsockopt+0x62>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   1d078:	2c01      	cmp	r4, #1
   1d07a:	d107      	bne.n	1d08c <nrf91_socket_offload_setsockopt+0x3e>
   1d07c:	2f14      	cmp	r7, #20
   1d07e:	d105      	bne.n	1d08c <nrf91_socket_offload_setsockopt+0x3e>
		nrf_optlen = sizeof(struct nrf_timeval);
   1d080:	2608      	movs	r6, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   1d082:	682b      	ldr	r3, [r5, #0]
   1d084:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1d086:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   1d088:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1d08a:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1d08c:	9600      	str	r6, [sp, #0]
   1d08e:	462b      	mov	r3, r5
   1d090:	9a03      	ldr	r2, [sp, #12]
   1d092:	4621      	mov	r1, r4
   1d094:	4640      	mov	r0, r8
   1d096:	f7f8 ff7d 	bl	15f94 <nrf_setsockopt>
}
   1d09a:	b006      	add	sp, #24
   1d09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1d0a0:	f240 2302 	movw	r3, #514	; 0x202
   1d0a4:	4299      	cmp	r1, r3
   1d0a6:	d0e0      	beq.n	1d06a <nrf91_socket_offload_setsockopt+0x1c>
   1d0a8:	f240 2303 	movw	r3, #515	; 0x203
   1d0ac:	4299      	cmp	r1, r3
   1d0ae:	e7db      	b.n	1d068 <nrf91_socket_offload_setsockopt+0x1a>
	errno = ENOPROTOOPT;
   1d0b0:	f7ff fcfb 	bl	1caaa <z_errno>
   1d0b4:	232a      	movs	r3, #42	; 0x2a
   1d0b6:	6003      	str	r3, [r0, #0]
   1d0b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d0bc:	e7ed      	b.n	1d09a <nrf91_socket_offload_setsockopt+0x4c>

0001d0be <nrf91_socket_offload_sendto>:
{
   1d0be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d0c2:	b08d      	sub	sp, #52	; 0x34
   1d0c4:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1d0c6:	4605      	mov	r5, r0
   1d0c8:	460e      	mov	r6, r1
   1d0ca:	4617      	mov	r7, r2
   1d0cc:	4698      	mov	r8, r3
	if (to == NULL) {
   1d0ce:	b96c      	cbnz	r4, 1d0ec <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1d0d0:	4618      	mov	r0, r3
   1d0d2:	f7ff fca0 	bl	1ca16 <z_to_nrf_flags>
   1d0d6:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1d0da:	4603      	mov	r3, r0
   1d0dc:	463a      	mov	r2, r7
   1d0de:	4631      	mov	r1, r6
   1d0e0:	4628      	mov	r0, r5
   1d0e2:	f7f8 fea1 	bl	15e28 <nrf_sendto>
}
   1d0e6:	b00d      	add	sp, #52	; 0x34
   1d0e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   1d0ec:	8823      	ldrh	r3, [r4, #0]
   1d0ee:	2b01      	cmp	r3, #1
   1d0f0:	d110      	bne.n	1d114 <nrf91_socket_offload_sendto+0x56>
	nrf_out->sin_port = ptr->sin_port;
   1d0f2:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1d0f4:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   1d0f6:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   1d0fa:	2302      	movs	r3, #2
   1d0fc:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1d0fe:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1d100:	4640      	mov	r0, r8
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1d102:	f88d 100c 	strb.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1d106:	9306      	str	r3, [sp, #24]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1d108:	f7ff fc85 	bl	1ca16 <z_to_nrf_flags>
   1d10c:	9101      	str	r1, [sp, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1d10e:	ab03      	add	r3, sp, #12
   1d110:	9300      	str	r3, [sp, #0]
   1d112:	e7e2      	b.n	1d0da <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   1d114:	2b02      	cmp	r3, #2
   1d116:	d115      	bne.n	1d144 <nrf91_socket_offload_sendto+0x86>
	nrf_out->sin6_port = ptr->sin6_port;
   1d118:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1d11a:	f04f 0924 	mov.w	r9, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1d11e:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin6_family = NRF_AF_INET6;
   1d122:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1d124:	2210      	movs	r2, #16
   1d126:	1d21      	adds	r1, r4, #4
   1d128:	a807      	add	r0, sp, #28
	nrf_out->sin6_family = NRF_AF_INET6;
   1d12a:	9304      	str	r3, [sp, #16]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1d12c:	f88d 900c 	strb.w	r9, [sp, #12]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1d130:	f7fe fdeb 	bl	1bd0a <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1d134:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1d136:	4640      	mov	r0, r8
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1d138:	930b      	str	r3, [sp, #44]	; 0x2c
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1d13a:	f7ff fc6c 	bl	1ca16 <z_to_nrf_flags>
   1d13e:	f8cd 9004 	str.w	r9, [sp, #4]
   1d142:	e7e4      	b.n	1d10e <nrf91_socket_offload_sendto+0x50>
	errno = ENOTSUP;
   1d144:	f7ff fcb1 	bl	1caaa <z_errno>
   1d148:	2323      	movs	r3, #35	; 0x23
   1d14a:	6003      	str	r3, [r0, #0]
	return retval;
   1d14c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d150:	e7c9      	b.n	1d0e6 <nrf91_socket_offload_sendto+0x28>

0001d152 <nrf91_socket_offload_bind>:
{
   1d152:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   1d154:	880b      	ldrh	r3, [r1, #0]
{
   1d156:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   1d158:	2b01      	cmp	r3, #1
{
   1d15a:	4606      	mov	r6, r0
   1d15c:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   1d15e:	d10e      	bne.n	1d17e <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   1d160:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1d162:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1d164:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   1d168:	2302      	movs	r3, #2
   1d16a:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1d16c:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1d16e:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1d172:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   1d174:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1d176:	f7f8 fefb 	bl	15f70 <nrf_bind>
}
   1d17a:	b00a      	add	sp, #40	; 0x28
   1d17c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   1d17e:	2b02      	cmp	r3, #2
   1d180:	d112      	bne.n	1d1a8 <nrf91_socket_offload_bind+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   1d182:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1d184:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1d186:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   1d18a:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1d18c:	2210      	movs	r2, #16
   1d18e:	3104      	adds	r1, #4
   1d190:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   1d192:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1d194:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1d198:	f7fe fdb7 	bl	1bd0a <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1d19c:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1d19e:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1d1a0:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1d1a2:	a901      	add	r1, sp, #4
   1d1a4:	4630      	mov	r0, r6
   1d1a6:	e7e6      	b.n	1d176 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   1d1a8:	f7ff fc7f 	bl	1caaa <z_errno>
   1d1ac:	2323      	movs	r3, #35	; 0x23
   1d1ae:	6003      	str	r3, [r0, #0]
   1d1b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d1b4:	e7e1      	b.n	1d17a <nrf91_socket_offload_bind+0x28>

0001d1b6 <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   1d1b6:	ea40 0301 	orr.w	r3, r0, r1
   1d1ba:	f033 030f 	bics.w	r3, r3, #15
   1d1be:	d101      	bne.n	1d1c4 <dk_set_leds_state+0xe>
   1d1c0:	f7f2 bdb2 	b.w	fd28 <dk_set_leds_state.part.7>
}
   1d1c4:	f06f 0015 	mvn.w	r0, #21
   1d1c8:	4770      	bx	lr

0001d1ca <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   1d1ca:	280d      	cmp	r0, #13
   1d1cc:	d004      	beq.n	1d1d8 <is_lfcr+0xe>
   1d1ce:	f1a0 030a 	sub.w	r3, r0, #10
   1d1d2:	4258      	negs	r0, r3
   1d1d4:	4158      	adcs	r0, r3
   1d1d6:	4770      	bx	lr
		return true;
   1d1d8:	2001      	movs	r0, #1
}
   1d1da:	4770      	bx	lr

0001d1dc <skip_command_prefix>:
{
   1d1dc:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   1d1de:	6802      	ldr	r2, [r0, #0]
{
   1d1e0:	4601      	mov	r1, r0
	*cmd += sizeof("AT") - 1;
   1d1e2:	1c93      	adds	r3, r2, #2
   1d1e4:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   1d1e6:	7894      	ldrb	r4, [r2, #2]
   1d1e8:	4620      	mov	r0, r4
   1d1ea:	f7ff ffee 	bl	1d1ca <is_lfcr>
   1d1ee:	b910      	cbnz	r0, 1d1f6 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1d1f0:	b10c      	cbz	r4, 1d1f6 <skip_command_prefix+0x1a>
	(*cmd)++;
   1d1f2:	3203      	adds	r2, #3
   1d1f4:	600a      	str	r2, [r1, #0]
}
   1d1f6:	bd10      	pop	{r4, pc}

0001d1f8 <is_valid_notification_char>:
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
}

static inline int toupper(int chr)
{
	return (int)((chr >= (int)'a' && chr <=
   1d1f8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1d1fc:	2b19      	cmp	r3, #25
   1d1fe:	bf98      	it	ls
   1d200:	3820      	subls	r0, #32
	if ((chr >= 'A') && (chr <= 'Z')) {
   1d202:	3841      	subs	r0, #65	; 0x41
   1d204:	b2c0      	uxtb	r0, r0
}
   1d206:	2819      	cmp	r0, #25
   1d208:	bf8c      	ite	hi
   1d20a:	2000      	movhi	r0, #0
   1d20c:	2001      	movls	r0, #1
   1d20e:	4770      	bx	lr

0001d210 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   1d210:	b510      	push	{r4, lr}
   1d212:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   1d214:	f7fe fd47 	bl	1bca6 <strlen>
   1d218:	2801      	cmp	r0, #1
   1d21a:	d91e      	bls.n	1d25a <is_command+0x4a>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   1d21c:	7823      	ldrb	r3, [r4, #0]
   1d21e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1d222:	2a19      	cmp	r2, #25
   1d224:	bf98      	it	ls
   1d226:	3b20      	subls	r3, #32
   1d228:	2b41      	cmp	r3, #65	; 0x41
   1d22a:	d116      	bne.n	1d25a <is_command+0x4a>
   1d22c:	7863      	ldrb	r3, [r4, #1]
   1d22e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1d232:	2a19      	cmp	r2, #25
   1d234:	bf98      	it	ls
   1d236:	3b20      	subls	r3, #32
   1d238:	2b54      	cmp	r3, #84	; 0x54
   1d23a:	d10e      	bne.n	1d25a <is_command+0x4a>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1d23c:	78a2      	ldrb	r2, [r4, #2]
   1d23e:	2a25      	cmp	r2, #37	; 0x25
   1d240:	d00d      	beq.n	1d25e <is_command+0x4e>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   1d242:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   1d246:	2b23      	cmp	r3, #35	; 0x23
   1d248:	d009      	beq.n	1d25e <is_command+0x4e>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   1d24a:	4610      	mov	r0, r2
   1d24c:	f7ff ffbd 	bl	1d1ca <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   1d250:	b910      	cbnz	r0, 1d258 <is_command+0x48>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1d252:	fab2 f082 	clz	r0, r2
   1d256:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   1d258:	bd10      	pop	{r4, pc}
		return false;
   1d25a:	2000      	movs	r0, #0
   1d25c:	e7fc      	b.n	1d258 <is_command+0x48>
		return true;
   1d25e:	2001      	movs	r0, #1
   1d260:	e7fa      	b.n	1d258 <is_command+0x48>

0001d262 <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   1d262:	6803      	ldr	r3, [r0, #0]
   1d264:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   1d266:	bf83      	ittte	hi
   1d268:	230c      	movhi	r3, #12
   1d26a:	6840      	ldrhi	r0, [r0, #4]
   1d26c:	fb03 0001 	mlahi	r0, r3, r1, r0
		return NULL;
   1d270:	2000      	movls	r0, #0
}
   1d272:	4770      	bx	lr

0001d274 <at_param_size>:
/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
	__ASSERT(param != NULL, "Parameter cannot be NULL.");

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   1d274:	7803      	ldrb	r3, [r0, #0]
   1d276:	2b01      	cmp	r3, #1
   1d278:	d006      	beq.n	1d288 <at_param_size+0x14>
		return sizeof(u16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   1d27a:	2b02      	cmp	r3, #2
   1d27c:	d006      	beq.n	1d28c <at_param_size+0x18>
		return sizeof(u32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   1d27e:	3b03      	subs	r3, #3
   1d280:	2b01      	cmp	r3, #1
   1d282:	d805      	bhi.n	1d290 <at_param_size+0x1c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   1d284:	6840      	ldr	r0, [r0, #4]
   1d286:	4770      	bx	lr
		return sizeof(u16_t);
   1d288:	2002      	movs	r0, #2
   1d28a:	4770      	bx	lr
		return sizeof(u32_t);
   1d28c:	2004      	movs	r0, #4
   1d28e:	4770      	bx	lr
	}

	return 0;
   1d290:	2000      	movs	r0, #0
}
   1d292:	4770      	bx	lr

0001d294 <at_param_clear>:
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1d294:	7803      	ldrb	r3, [r0, #0]
{
   1d296:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1d298:	3b03      	subs	r3, #3
   1d29a:	2b01      	cmp	r3, #1
{
   1d29c:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1d29e:	d802      	bhi.n	1d2a6 <at_param_clear+0x12>
		k_free(param->value.str_val);
   1d2a0:	6880      	ldr	r0, [r0, #8]
   1d2a2:	f000 f966 	bl	1d572 <k_free>
	param->value.int_val = 0;
   1d2a6:	2300      	movs	r3, #0
   1d2a8:	60a3      	str	r3, [r4, #8]
}
   1d2aa:	bd10      	pop	{r4, pc}

0001d2ac <at_params_list_init>:

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   1d2ac:	b538      	push	{r3, r4, r5, lr}
   1d2ae:	460d      	mov	r5, r1
	if (list == NULL) {
   1d2b0:	4604      	mov	r4, r0
   1d2b2:	b140      	cbz	r0, 1d2c6 <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   1d2b4:	210c      	movs	r1, #12
   1d2b6:	4628      	mov	r0, r5
   1d2b8:	f000 f960 	bl	1d57c <k_calloc>
   1d2bc:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   1d2be:	b128      	cbz	r0, 1d2cc <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   1d2c0:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   1d2c2:	6025      	str	r5, [r4, #0]
}
   1d2c4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1d2c6:	f06f 0015 	mvn.w	r0, #21
   1d2ca:	e7fb      	b.n	1d2c4 <at_params_list_init+0x18>
		return -ENOMEM;
   1d2cc:	f06f 000b 	mvn.w	r0, #11
   1d2d0:	e7f8      	b.n	1d2c4 <at_params_list_init+0x18>

0001d2d2 <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   1d2d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (list == NULL || list->params == NULL) {
   1d2d4:	4605      	mov	r5, r0
   1d2d6:	b130      	cbz	r0, 1d2e6 <at_params_list_clear+0x14>
   1d2d8:	6843      	ldr	r3, [r0, #4]
   1d2da:	b123      	cbz	r3, 1d2e6 <at_params_list_clear+0x14>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   1d2dc:	2400      	movs	r4, #0
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
   1d2de:	270c      	movs	r7, #12
	for (size_t i = 0; i < list->param_count; ++i) {
   1d2e0:	682b      	ldr	r3, [r5, #0]
   1d2e2:	429c      	cmp	r4, r3
   1d2e4:	d300      	bcc.n	1d2e8 <at_params_list_clear+0x16>
		at_param_init(&params[i]);
	}
}
   1d2e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		at_param_clear(&params[i]);
   1d2e8:	686e      	ldr	r6, [r5, #4]
   1d2ea:	fb07 6604 	mla	r6, r7, r4, r6
   1d2ee:	4630      	mov	r0, r6
   1d2f0:	f7ff ffd0 	bl	1d294 <at_param_clear>
	memset(param, 0, sizeof(struct at_param));
   1d2f4:	220c      	movs	r2, #12
   1d2f6:	2100      	movs	r1, #0
   1d2f8:	4630      	mov	r0, r6
   1d2fa:	f7fe fd30 	bl	1bd5e <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   1d2fe:	3401      	adds	r4, #1
   1d300:	e7ee      	b.n	1d2e0 <at_params_list_clear+0xe>

0001d302 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   1d302:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   1d304:	4604      	mov	r4, r0
   1d306:	b148      	cbz	r0, 1d31c <at_params_list_free+0x1a>
   1d308:	6843      	ldr	r3, [r0, #4]
   1d30a:	b13b      	cbz	r3, 1d31c <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   1d30c:	2500      	movs	r5, #0
	at_params_list_clear(list);
   1d30e:	f7ff ffe0 	bl	1d2d2 <at_params_list_clear>
	list->param_count = 0;
   1d312:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   1d314:	6860      	ldr	r0, [r4, #4]
   1d316:	f000 f92c 	bl	1d572 <k_free>
	list->params = NULL;
   1d31a:	6065      	str	r5, [r4, #4]
}
   1d31c:	bd38      	pop	{r3, r4, r5, pc}

0001d31e <at_params_short_put>:

int at_params_short_put(const struct at_param_list *list, size_t index,
			u16_t value)
{
   1d31e:	b538      	push	{r3, r4, r5, lr}
   1d320:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   1d322:	b160      	cbz	r0, 1d33e <at_params_short_put+0x20>
   1d324:	6843      	ldr	r3, [r0, #4]
   1d326:	b153      	cbz	r3, 1d33e <at_params_short_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1d328:	f7ff ff9b 	bl	1d262 <at_params_get>

	if (param == NULL) {
   1d32c:	4604      	mov	r4, r0
   1d32e:	b130      	cbz	r0, 1d33e <at_params_short_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   1d330:	f7ff ffb0 	bl	1d294 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_SHORT;
   1d334:	2301      	movs	r3, #1
	param->value.int_val = (u32_t)(value & USHRT_MAX);
	return 0;
   1d336:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   1d338:	7023      	strb	r3, [r4, #0]
	param->value.int_val = (u32_t)(value & USHRT_MAX);
   1d33a:	60a5      	str	r5, [r4, #8]
}
   1d33c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1d33e:	f06f 0015 	mvn.w	r0, #21
   1d342:	e7fb      	b.n	1d33c <at_params_short_put+0x1e>

0001d344 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   1d344:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   1d346:	b160      	cbz	r0, 1d362 <at_params_empty_put+0x1e>
   1d348:	6843      	ldr	r3, [r0, #4]
   1d34a:	b153      	cbz	r3, 1d362 <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1d34c:	f7ff ff89 	bl	1d262 <at_params_get>

	if (param == NULL) {
   1d350:	4604      	mov	r4, r0
   1d352:	b130      	cbz	r0, 1d362 <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	at_param_clear(param);
   1d354:	f7ff ff9e 	bl	1d294 <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   1d358:	2305      	movs	r3, #5
	param->value.int_val = 0;
   1d35a:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   1d35c:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   1d35e:	60a0      	str	r0, [r4, #8]

	return 0;
}
   1d360:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1d362:	f06f 0015 	mvn.w	r0, #21
   1d366:	e7fb      	b.n	1d360 <at_params_empty_put+0x1c>

0001d368 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      u32_t value)
{
   1d368:	b538      	push	{r3, r4, r5, lr}
   1d36a:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   1d36c:	b160      	cbz	r0, 1d388 <at_params_int_put+0x20>
   1d36e:	6843      	ldr	r3, [r0, #4]
   1d370:	b153      	cbz	r3, 1d388 <at_params_int_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1d372:	f7ff ff76 	bl	1d262 <at_params_get>

	if (param == NULL) {
   1d376:	4604      	mov	r4, r0
   1d378:	b130      	cbz	r0, 1d388 <at_params_int_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   1d37a:	f7ff ff8b 	bl	1d294 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   1d37e:	2302      	movs	r3, #2
	param->value.int_val = value;
	return 0;
   1d380:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_INT;
   1d382:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   1d384:	60a5      	str	r5, [r4, #8]
}
   1d386:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1d388:	f06f 0015 	mvn.w	r0, #21
   1d38c:	e7fb      	b.n	1d386 <at_params_int_put+0x1e>

0001d38e <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   1d38e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d390:	4616      	mov	r6, r2
   1d392:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   1d394:	b1c0      	cbz	r0, 1d3c8 <at_params_string_put+0x3a>
   1d396:	6843      	ldr	r3, [r0, #4]
   1d398:	b1b3      	cbz	r3, 1d3c8 <at_params_string_put+0x3a>
   1d39a:	b1aa      	cbz	r2, 1d3c8 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1d39c:	f7ff ff61 	bl	1d262 <at_params_get>

	if (param == NULL) {
   1d3a0:	4604      	mov	r4, r0
   1d3a2:	b188      	cbz	r0, 1d3c8 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   1d3a4:	1c68      	adds	r0, r5, #1
   1d3a6:	f7fc fd81 	bl	19eac <k_malloc>

	if (param_value == NULL) {
   1d3aa:	4607      	mov	r7, r0
   1d3ac:	b178      	cbz	r0, 1d3ce <at_params_string_put+0x40>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);
   1d3ae:	462a      	mov	r2, r5
   1d3b0:	4631      	mov	r1, r6
   1d3b2:	f7fe fcaa 	bl	1bd0a <memcpy>

	at_param_clear(param);
   1d3b6:	4620      	mov	r0, r4
   1d3b8:	f7ff ff6c 	bl	1d294 <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   1d3bc:	2303      	movs	r3, #3
	param->value.str_val = param_value;

	return 0;
   1d3be:	2000      	movs	r0, #0
	param->size = str_len;
   1d3c0:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   1d3c2:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   1d3c4:	60a7      	str	r7, [r4, #8]
}
   1d3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   1d3c8:	f06f 0015 	mvn.w	r0, #21
   1d3cc:	e7fb      	b.n	1d3c6 <at_params_string_put+0x38>
		return -ENOMEM;
   1d3ce:	f06f 000b 	mvn.w	r0, #11
   1d3d2:	e7f8      	b.n	1d3c6 <at_params_string_put+0x38>

0001d3d4 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const u32_t *array, size_t array_len)
{
   1d3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d3d6:	4616      	mov	r6, r2
   1d3d8:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   1d3da:	b1c0      	cbz	r0, 1d40e <at_params_array_put+0x3a>
   1d3dc:	6843      	ldr	r3, [r0, #4]
   1d3de:	b1b3      	cbz	r3, 1d40e <at_params_array_put+0x3a>
   1d3e0:	b1aa      	cbz	r2, 1d40e <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1d3e2:	f7ff ff3e 	bl	1d262 <at_params_get>

	if (param == NULL) {
   1d3e6:	4604      	mov	r4, r0
   1d3e8:	b188      	cbz	r0, 1d40e <at_params_array_put+0x3a>
		return -EINVAL;
	}

	u32_t *param_value = (u32_t *)k_malloc(array_len);
   1d3ea:	4628      	mov	r0, r5
   1d3ec:	f7fc fd5e 	bl	19eac <k_malloc>

	if (param_value == NULL) {
   1d3f0:	4607      	mov	r7, r0
   1d3f2:	b178      	cbz	r0, 1d414 <at_params_array_put+0x40>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);
   1d3f4:	462a      	mov	r2, r5
   1d3f6:	4631      	mov	r1, r6
   1d3f8:	f7fe fc87 	bl	1bd0a <memcpy>

	at_param_clear(param);
   1d3fc:	4620      	mov	r0, r4
   1d3fe:	f7ff ff49 	bl	1d294 <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   1d402:	2304      	movs	r3, #4
	param->value.array_val = param_value;

	return 0;
   1d404:	2000      	movs	r0, #0
	param->size = array_len;
   1d406:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   1d408:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   1d40a:	60a7      	str	r7, [r4, #8]
}
   1d40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   1d40e:	f06f 0015 	mvn.w	r0, #21
   1d412:	e7fb      	b.n	1d40c <at_params_array_put+0x38>
		return -ENOMEM;
   1d414:	f06f 000b 	mvn.w	r0, #11
   1d418:	e7f8      	b.n	1d40c <at_params_array_put+0x38>

0001d41a <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			u16_t *value)
{
   1d41a:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   1d41c:	b160      	cbz	r0, 1d438 <at_params_short_get+0x1e>
   1d41e:	6843      	ldr	r3, [r0, #4]
   1d420:	b153      	cbz	r3, 1d438 <at_params_short_get+0x1e>
   1d422:	b14a      	cbz	r2, 1d438 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1d424:	f7ff ff1d 	bl	1d262 <at_params_get>

	if (param == NULL) {
   1d428:	b130      	cbz	r0, 1d438 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   1d42a:	7803      	ldrb	r3, [r0, #0]
   1d42c:	2b01      	cmp	r3, #1
   1d42e:	d103      	bne.n	1d438 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	*value = (u16_t)param->value.int_val;
   1d430:	6883      	ldr	r3, [r0, #8]
	return 0;
   1d432:	2000      	movs	r0, #0
	*value = (u16_t)param->value.int_val;
   1d434:	8013      	strh	r3, [r2, #0]
}
   1d436:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1d438:	f06f 0015 	mvn.w	r0, #21
   1d43c:	e7fb      	b.n	1d436 <at_params_short_get+0x1c>

0001d43e <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      u32_t *value)
{
   1d43e:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   1d440:	b168      	cbz	r0, 1d45e <at_params_int_get+0x20>
   1d442:	6843      	ldr	r3, [r0, #4]
   1d444:	b15b      	cbz	r3, 1d45e <at_params_int_get+0x20>
   1d446:	b152      	cbz	r2, 1d45e <at_params_int_get+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1d448:	f7ff ff0b 	bl	1d262 <at_params_get>

	if (param == NULL) {
   1d44c:	b138      	cbz	r0, 1d45e <at_params_int_get+0x20>
		return -EINVAL;
	}

	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   1d44e:	7803      	ldrb	r3, [r0, #0]
   1d450:	3b01      	subs	r3, #1
   1d452:	2b01      	cmp	r3, #1
   1d454:	d803      	bhi.n	1d45e <at_params_int_get+0x20>
	    (param->type != AT_PARAM_TYPE_NUM_SHORT)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   1d456:	6883      	ldr	r3, [r0, #8]
	return 0;
   1d458:	2000      	movs	r0, #0
	*value = param->value.int_val;
   1d45a:	6013      	str	r3, [r2, #0]
}
   1d45c:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1d45e:	f06f 0015 	mvn.w	r0, #21
   1d462:	e7fb      	b.n	1d45c <at_params_int_get+0x1e>

0001d464 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   1d464:	b570      	push	{r4, r5, r6, lr}
   1d466:	4616      	mov	r6, r2
   1d468:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   1d46a:	b1c0      	cbz	r0, 1d49e <at_params_string_get+0x3a>
   1d46c:	6843      	ldr	r3, [r0, #4]
   1d46e:	b1b3      	cbz	r3, 1d49e <at_params_string_get+0x3a>
   1d470:	b1aa      	cbz	r2, 1d49e <at_params_string_get+0x3a>
	    value == NULL || len == NULL) {
   1d472:	b1a4      	cbz	r4, 1d49e <at_params_string_get+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1d474:	f7ff fef5 	bl	1d262 <at_params_get>

	if (param == NULL) {
   1d478:	4601      	mov	r1, r0
   1d47a:	b180      	cbz	r0, 1d49e <at_params_string_get+0x3a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   1d47c:	7803      	ldrb	r3, [r0, #0]
   1d47e:	2b03      	cmp	r3, #3
   1d480:	d10d      	bne.n	1d49e <at_params_string_get+0x3a>
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);
   1d482:	f7ff fef7 	bl	1d274 <at_param_size>

	if (*len < param_len) {
   1d486:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   1d488:	4605      	mov	r5, r0
	if (*len < param_len) {
   1d48a:	4283      	cmp	r3, r0
   1d48c:	d30a      	bcc.n	1d4a4 <at_params_string_get+0x40>
		return -ENOMEM;
	}

	memcpy(value, param->value.str_val, param_len);
   1d48e:	4602      	mov	r2, r0
   1d490:	6889      	ldr	r1, [r1, #8]
   1d492:	4630      	mov	r0, r6
   1d494:	f7fe fc39 	bl	1bd0a <memcpy>
	*len = param_len;

	return 0;
   1d498:	2000      	movs	r0, #0
	*len = param_len;
   1d49a:	6025      	str	r5, [r4, #0]
}
   1d49c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1d49e:	f06f 0015 	mvn.w	r0, #21
   1d4a2:	e7fb      	b.n	1d49c <at_params_string_get+0x38>
		return -ENOMEM;
   1d4a4:	f06f 000b 	mvn.w	r0, #11
   1d4a8:	e7f8      	b.n	1d49c <at_params_string_get+0x38>

0001d4aa <at_params_valid_count_get>:

	return 0;
}

u32_t at_params_valid_count_get(const struct at_param_list *list)
{
   1d4aa:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   1d4ac:	4604      	mov	r4, r0
   1d4ae:	b178      	cbz	r0, 1d4d0 <at_params_valid_count_get+0x26>
   1d4b0:	6840      	ldr	r0, [r0, #4]
   1d4b2:	b168      	cbz	r0, 1d4d0 <at_params_valid_count_get+0x26>
	if (index >= list->param_count) {
   1d4b4:	6822      	ldr	r2, [r4, #0]
   1d4b6:	b14a      	cbz	r2, 1d4cc <at_params_valid_count_get+0x22>
   1d4b8:	2200      	movs	r2, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   1d4ba:	7803      	ldrb	r3, [r0, #0]
   1d4bc:	b133      	cbz	r3, 1d4cc <at_params_valid_count_get+0x22>
		valid_i += 1;
   1d4be:	3201      	adds	r2, #1
		param = at_params_get(list, valid_i);
   1d4c0:	4611      	mov	r1, r2
   1d4c2:	4620      	mov	r0, r4
   1d4c4:	f7ff fecd 	bl	1d262 <at_params_get>
	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   1d4c8:	2800      	cmp	r0, #0
   1d4ca:	d1f6      	bne.n	1d4ba <at_params_valid_count_get+0x10>
	}

	return valid_i;
}
   1d4cc:	4610      	mov	r0, r2
   1d4ce:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1d4d0:	f06f 0215 	mvn.w	r2, #21
   1d4d4:	e7fa      	b.n	1d4cc <at_params_valid_count_get+0x22>

0001d4d6 <response_is_valid>:
{
   1d4d6:	b570      	push	{r4, r5, r6, lr}
   1d4d8:	4606      	mov	r6, r0
	if ((response_len < strlen(check)) ||
   1d4da:	4610      	mov	r0, r2
{
   1d4dc:	460d      	mov	r5, r1
   1d4de:	4614      	mov	r4, r2
	if ((response_len < strlen(check)) ||
   1d4e0:	f7fe fbe1 	bl	1bca6 <strlen>
   1d4e4:	42a8      	cmp	r0, r5
   1d4e6:	d808      	bhi.n	1d4fa <response_is_valid+0x24>
	    (memcmp(response, check, response_len) != 0)) {
   1d4e8:	462a      	mov	r2, r5
   1d4ea:	4621      	mov	r1, r4
   1d4ec:	4630      	mov	r0, r6
   1d4ee:	f7fe fbfc 	bl	1bcea <memcmp>
	if ((response_len < strlen(check)) ||
   1d4f2:	fab0 f080 	clz	r0, r0
   1d4f6:	0940      	lsrs	r0, r0, #5
}
   1d4f8:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   1d4fa:	2000      	movs	r0, #0
   1d4fc:	e7fc      	b.n	1d4f8 <response_is_valid+0x22>

0001d4fe <lte_lc_init_and_connect>:
{
   1d4fe:	b508      	push	{r3, lr}
	ret = w_lte_lc_init();
   1d500:	f7f3 fbb4 	bl	10c6c <w_lte_lc_init>
	if (ret) {
   1d504:	b918      	cbnz	r0, 1d50e <lte_lc_init_and_connect+0x10>
}
   1d506:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return w_lte_lc_connect();
   1d50a:	f7f3 bca7 	b.w	10e5c <w_lte_lc_connect>
}
   1d50e:	bd08      	pop	{r3, pc}

0001d510 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   1d510:	f7fe ba2a 	b.w	1b968 <z_clock_idle_exit>

0001d514 <k_mem_slab_init>:
{
   1d514:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1d516:	2400      	movs	r4, #0
   1d518:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1d51a:	ea41 0402 	orr.w	r4, r1, r2
   1d51e:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   1d522:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   1d526:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1d528:	d10c      	bne.n	1d544 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   1d52a:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1d52c:	42a3      	cmp	r3, r4
   1d52e:	d103      	bne.n	1d538 <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
   1d530:	e9c0 0000 	strd	r0, r0, [r0]
   1d534:	2000      	movs	r0, #0
}
   1d536:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1d538:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1d53a:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   1d53c:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   1d53e:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   1d540:	4411      	add	r1, r2
   1d542:	e7f3      	b.n	1d52c <k_mem_slab_init+0x18>
		return -EINVAL;
   1d544:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1d548:	e7f5      	b.n	1d536 <k_mem_slab_init+0x22>

0001d54a <k_mem_pool_malloc>:
{
   1d54a:	b513      	push	{r0, r1, r4, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1d54c:	2404      	movs	r4, #4
   1d54e:	190a      	adds	r2, r1, r4
   1d550:	d204      	bcs.n	1d55c <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   1d552:	2300      	movs	r3, #0
   1d554:	4669      	mov	r1, sp
   1d556:	f7fc fc31 	bl	19dbc <k_mem_pool_alloc>
   1d55a:	b110      	cbz	r0, 1d562 <k_mem_pool_malloc+0x18>
		return NULL;
   1d55c:	2000      	movs	r0, #0
}
   1d55e:	b002      	add	sp, #8
   1d560:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   1d562:	4622      	mov	r2, r4
   1d564:	a901      	add	r1, sp, #4
   1d566:	9800      	ldr	r0, [sp, #0]
   1d568:	f7fe fbcf 	bl	1bd0a <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   1d56c:	9800      	ldr	r0, [sp, #0]
   1d56e:	3004      	adds	r0, #4
   1d570:	e7f5      	b.n	1d55e <k_mem_pool_malloc+0x14>

0001d572 <k_free>:
	if (ptr != NULL) {
   1d572:	b110      	cbz	r0, 1d57a <k_free+0x8>
		k_mem_pool_free_id(ptr);
   1d574:	3804      	subs	r0, #4
   1d576:	f7fc bc6d 	b.w	19e54 <k_mem_pool_free_id>
}
   1d57a:	4770      	bx	lr

0001d57c <k_calloc>:
{
   1d57c:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   1d57e:	fba0 4501 	umull	r4, r5, r0, r1
   1d582:	b935      	cbnz	r5, 1d592 <k_calloc+0x16>
	ret = k_malloc(bounds);
   1d584:	4620      	mov	r0, r4
   1d586:	f7fc fc91 	bl	19eac <k_malloc>
	if (ret != NULL) {
   1d58a:	4606      	mov	r6, r0
   1d58c:	b918      	cbnz	r0, 1d596 <k_calloc+0x1a>
}
   1d58e:	4630      	mov	r0, r6
   1d590:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1d592:	2600      	movs	r6, #0
   1d594:	e7fb      	b.n	1d58e <k_calloc+0x12>
		(void)memset(ret, 0, bounds);
   1d596:	4622      	mov	r2, r4
   1d598:	4629      	mov	r1, r5
   1d59a:	f7fe fbe0 	bl	1bd5e <memset>
   1d59e:	e7f6      	b.n	1d58e <k_calloc+0x12>

0001d5a0 <z_impl_k_mutex_init>:
{
   1d5a0:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1d5a2:	2000      	movs	r0, #0
   1d5a4:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   1d5a8:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   1d5ac:	4770      	bx	lr

0001d5ae <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   1d5ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d5b2:	4604      	mov	r4, r0
   1d5b4:	460f      	mov	r7, r1
   1d5b6:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1d5b8:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1d5bc:	f04f 0220 	mov.w	r2, #32
   1d5c0:	f3ef 8611 	mrs	r6, BASEPRI
   1d5c4:	f382 8811 	msr	BASEPRI, r2
   1d5c8:	f3bf 8f6f 	isb	sy
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   1d5cc:	b1db      	cbz	r3, 1d606 <queue_insert+0x58>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   1d5ce:	2008      	movs	r0, #8
   1d5d0:	f7fc fc72 	bl	19eb8 <z_thread_malloc>
		if (anode == NULL) {
   1d5d4:	b938      	cbnz	r0, 1d5e6 <queue_insert+0x38>
	__asm__ volatile(
   1d5d6:	f386 8811 	msr	BASEPRI, r6
   1d5da:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   1d5de:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   1d5e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   1d5e6:	2301      	movs	r3, #1
		anode->data = data;
   1d5e8:	f8c0 8004 	str.w	r8, [r0, #4]
   1d5ec:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   1d5ee:	6803      	ldr	r3, [r0, #0]
   1d5f0:	f003 0203 	and.w	r2, r3, #3
   1d5f4:	b95f      	cbnz	r7, 1d60e <queue_insert+0x60>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d5f6:	6823      	ldr	r3, [r4, #0]
   1d5f8:	4313      	orrs	r3, r2
   1d5fa:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1d5fc:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1d5fe:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1d600:	b973      	cbnz	r3, 1d620 <queue_insert+0x72>
	list->tail = node;
   1d602:	6060      	str	r0, [r4, #4]
   1d604:	e00c      	b.n	1d620 <queue_insert+0x72>
	node->next_and_flags = flags;
   1d606:	f8c8 3000 	str.w	r3, [r8]
   1d60a:	4640      	mov	r0, r8
   1d60c:	e7ef      	b.n	1d5ee <queue_insert+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d60e:	683b      	ldr	r3, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1d610:	f033 0303 	bics.w	r3, r3, #3
   1d614:	d114      	bne.n	1d640 <queue_insert+0x92>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d616:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   1d618:	6862      	ldr	r2, [r4, #4]
   1d61a:	b95a      	cbnz	r2, 1d634 <queue_insert+0x86>
	list->head = node;
   1d61c:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1d620:	2104      	movs	r1, #4
   1d622:	4628      	mov	r0, r5
   1d624:	f000 fb8a 	bl	1dd3c <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1d628:	4628      	mov	r0, r5
   1d62a:	4631      	mov	r1, r6
   1d62c:	f000 f8c9 	bl	1d7c2 <z_reschedule>
	return 0;
   1d630:	2000      	movs	r0, #0
   1d632:	e7d6      	b.n	1d5e2 <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1d634:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d636:	f003 0303 	and.w	r3, r3, #3
   1d63a:	4303      	orrs	r3, r0
   1d63c:	6013      	str	r3, [r2, #0]
   1d63e:	e7e0      	b.n	1d602 <queue_insert+0x54>
   1d640:	4313      	orrs	r3, r2
   1d642:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1d644:	683b      	ldr	r3, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d646:	f003 0303 	and.w	r3, r3, #3
   1d64a:	4318      	orrs	r0, r3
   1d64c:	6038      	str	r0, [r7, #0]
   1d64e:	e7e7      	b.n	1d620 <queue_insert+0x72>

0001d650 <z_queue_node_peek>:
{
   1d650:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   1d652:	4604      	mov	r4, r0
   1d654:	b130      	cbz	r0, 1d664 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1d656:	6802      	ldr	r2, [r0, #0]
   1d658:	0793      	lsls	r3, r2, #30
   1d65a:	d003      	beq.n	1d664 <z_queue_node_peek+0x14>
		ret = anode->data;
   1d65c:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1d65e:	b109      	cbz	r1, 1d664 <z_queue_node_peek+0x14>
			k_free(anode);
   1d660:	f7ff ff87 	bl	1d572 <k_free>
}
   1d664:	4620      	mov	r0, r4
   1d666:	bd10      	pop	{r4, pc}

0001d668 <z_impl_k_queue_init>:
	list->head = NULL;
   1d668:	2300      	movs	r3, #0
	list->tail = NULL;
   1d66a:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&queue->poll_events);
   1d66e:	f100 0308 	add.w	r3, r0, #8
   1d672:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   1d676:	4770      	bx	lr

0001d678 <k_queue_append>:
	(void)queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   1d678:	460a      	mov	r2, r1
   1d67a:	2300      	movs	r3, #0
   1d67c:	6841      	ldr	r1, [r0, #4]
   1d67e:	f7ff bf96 	b.w	1d5ae <queue_insert>

0001d682 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   1d682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d686:	4604      	mov	r4, r0
   1d688:	b086      	sub	sp, #24
   1d68a:	460d      	mov	r5, r1
	__asm__ volatile(
   1d68c:	f04f 0320 	mov.w	r3, #32
   1d690:	f3ef 8711 	mrs	r7, BASEPRI
   1d694:	f383 8811 	msr	BASEPRI, r3
   1d698:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   1d69c:	6800      	ldr	r0, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1d69e:	b188      	cbz	r0, 1d6c4 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d6a0:	6803      	ldr	r3, [r0, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1d6a2:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d6a4:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1d6a8:	4290      	cmp	r0, r2
	list->head = node;
   1d6aa:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1d6ac:	bf08      	it	eq
   1d6ae:	6063      	streq	r3, [r4, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1d6b0:	2101      	movs	r1, #1
   1d6b2:	f7ff ffcd 	bl	1d650 <z_queue_node_peek>
	__asm__ volatile(
   1d6b6:	f387 8811 	msr	BASEPRI, r7
   1d6ba:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   1d6be:	b006      	add	sp, #24
   1d6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   1d6c4:	2900      	cmp	r1, #0
   1d6c6:	d0f6      	beq.n	1d6b6 <z_impl_k_queue_get+0x34>
   1d6c8:	f387 8811 	msr	BASEPRI, r7
   1d6cc:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   1d6d0:	2104      	movs	r1, #4
   1d6d2:	4602      	mov	r2, r0
   1d6d4:	4623      	mov	r3, r4
   1d6d6:	eb0d 0001 	add.w	r0, sp, r1
   1d6da:	f7fd fbd1 	bl	1ae80 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   1d6de:	1c6a      	adds	r2, r5, #1
   1d6e0:	d002      	beq.n	1d6e8 <z_impl_k_queue_get+0x66>
   1d6e2:	f000 f9f8 	bl	1dad6 <z_impl_k_uptime_get>
   1d6e6:	4606      	mov	r6, r0
{
   1d6e8:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   1d6ea:	9b04      	ldr	r3, [sp, #16]
   1d6ec:	f36f 3310 	bfc	r3, #12, #5
   1d6f0:	9304      	str	r3, [sp, #16]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&events, *(uintptr_t *)&num_events, *(uintptr_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1d6f2:	2101      	movs	r1, #1
   1d6f4:	1bea      	subs	r2, r5, r7
   1d6f6:	a801      	add	r0, sp, #4
   1d6f8:	f7fd fbd6 	bl	1aea8 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   1d6fc:	b118      	cbz	r0, 1d706 <z_impl_k_queue_get+0x84>
   1d6fe:	300b      	adds	r0, #11
   1d700:	d001      	beq.n	1d706 <z_impl_k_queue_get+0x84>
			return NULL;
   1d702:	2000      	movs	r0, #0
   1d704:	e7db      	b.n	1d6be <z_impl_k_queue_get+0x3c>
	__asm__ volatile(
   1d706:	f04f 0320 	mov.w	r3, #32
   1d70a:	f3ef 8811 	mrs	r8, BASEPRI
   1d70e:	f383 8811 	msr	BASEPRI, r3
   1d712:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   1d716:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   1d718:	b138      	cbz	r0, 1d72a <z_impl_k_queue_get+0xa8>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d71a:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1d71c:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d71e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1d722:	4290      	cmp	r0, r2
	list->head = node;
   1d724:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1d726:	bf08      	it	eq
   1d728:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   1d72a:	2101      	movs	r1, #1
   1d72c:	f7ff ff90 	bl	1d650 <z_queue_node_peek>
	__asm__ volatile(
   1d730:	f388 8811 	msr	BASEPRI, r8
   1d734:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   1d738:	2800      	cmp	r0, #0
   1d73a:	d1c0      	bne.n	1d6be <z_impl_k_queue_get+0x3c>
   1d73c:	1c6b      	adds	r3, r5, #1
   1d73e:	d0d4      	beq.n	1d6ea <z_impl_k_queue_get+0x68>
	return z_impl_k_uptime_get();
   1d740:	f000 f9c9 	bl	1dad6 <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   1d744:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   1d746:	42bd      	cmp	r5, r7
   1d748:	dacf      	bge.n	1d6ea <z_impl_k_queue_get+0x68>
   1d74a:	e7da      	b.n	1d702 <z_impl_k_queue_get+0x80>

0001d74c <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1d74c:	7b43      	ldrb	r3, [r0, #13]
   1d74e:	06db      	lsls	r3, r3, #27
   1d750:	bf03      	ittte	eq
   1d752:	6980      	ldreq	r0, [r0, #24]
   1d754:	fab0 f080 	clzeq	r0, r0
   1d758:	0940      	lsreq	r0, r0, #5
   1d75a:	2000      	movne	r0, #0
}
   1d75c:	4770      	bx	lr

0001d75e <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   1d75e:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1d762:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1d766:	4298      	cmp	r0, r3
   1d768:	bfac      	ite	ge
   1d76a:	2000      	movge	r0, #0
   1d76c:	2001      	movlt	r0, #1
   1d76e:	4770      	bx	lr

0001d770 <z_find_first_thread_to_unpend>:
{
   1d770:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d772:	f04f 0320 	mov.w	r3, #32
   1d776:	f3ef 8411 	mrs	r4, BASEPRI
   1d77a:	f383 8811 	msr	BASEPRI, r3
   1d77e:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1d782:	f000 f85d 	bl	1d840 <z_priq_dumb_best>
	__asm__ volatile(
   1d786:	f384 8811 	msr	BASEPRI, r4
   1d78a:	f3bf 8f6f 	isb	sy
}
   1d78e:	bd10      	pop	{r4, pc}

0001d790 <z_unpend_thread_no_timeout>:
{
   1d790:	b538      	push	{r3, r4, r5, lr}
   1d792:	4604      	mov	r4, r0
	__asm__ volatile(
   1d794:	f04f 0320 	mov.w	r3, #32
   1d798:	f3ef 8511 	mrs	r5, BASEPRI
   1d79c:	f383 8811 	msr	BASEPRI, r3
   1d7a0:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1d7a4:	4601      	mov	r1, r0
   1d7a6:	6880      	ldr	r0, [r0, #8]
   1d7a8:	f7fc fd60 	bl	1a26c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1d7ac:	7b63      	ldrb	r3, [r4, #13]
   1d7ae:	f023 0302 	bic.w	r3, r3, #2
   1d7b2:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1d7b4:	f385 8811 	msr	BASEPRI, r5
   1d7b8:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1d7bc:	2300      	movs	r3, #0
   1d7be:	60a3      	str	r3, [r4, #8]
}
   1d7c0:	bd38      	pop	{r3, r4, r5, pc}

0001d7c2 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1d7c2:	b921      	cbnz	r1, 1d7ce <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1d7c4:	f3ef 8005 	mrs	r0, IPSR
   1d7c8:	b908      	cbnz	r0, 1d7ce <z_reschedule+0xc>
   1d7ca:	f7f0 b841 	b.w	d850 <arch_swap>
   1d7ce:	f381 8811 	msr	BASEPRI, r1
   1d7d2:	f3bf 8f6f 	isb	sy
}
   1d7d6:	4770      	bx	lr

0001d7d8 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1d7d8:	4603      	mov	r3, r0
   1d7da:	b920      	cbnz	r0, 1d7e6 <z_reschedule_irqlock+0xe>
   1d7dc:	f3ef 8205 	mrs	r2, IPSR
   1d7e0:	b90a      	cbnz	r2, 1d7e6 <z_reschedule_irqlock+0xe>
   1d7e2:	f7f0 b835 	b.w	d850 <arch_swap>
   1d7e6:	f383 8811 	msr	BASEPRI, r3
   1d7ea:	f3bf 8f6f 	isb	sy
}
   1d7ee:	4770      	bx	lr

0001d7f0 <z_reschedule_unlocked>:
	__asm__ volatile(
   1d7f0:	f04f 0320 	mov.w	r3, #32
   1d7f4:	f3ef 8011 	mrs	r0, BASEPRI
   1d7f8:	f383 8811 	msr	BASEPRI, r3
   1d7fc:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1d800:	f7ff bfea 	b.w	1d7d8 <z_reschedule_irqlock>

0001d804 <z_unpend_thread>:
{
   1d804:	b538      	push	{r3, r4, r5, lr}
   1d806:	4604      	mov	r4, r0
   1d808:	f04f 0320 	mov.w	r3, #32
   1d80c:	f3ef 8511 	mrs	r5, BASEPRI
   1d810:	f383 8811 	msr	BASEPRI, r3
   1d814:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1d818:	4601      	mov	r1, r0
   1d81a:	6880      	ldr	r0, [r0, #8]
   1d81c:	f7fc fd26 	bl	1a26c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1d820:	7b63      	ldrb	r3, [r4, #13]
   1d822:	f023 0302 	bic.w	r3, r3, #2
   1d826:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1d828:	f385 8811 	msr	BASEPRI, r5
   1d82c:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1d830:	2300      	movs	r3, #0
	return z_abort_timeout(&thread->base.timeout);
   1d832:	f104 0018 	add.w	r0, r4, #24
   1d836:	60a3      	str	r3, [r4, #8]
}
   1d838:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1d83c:	f000 b907 	b.w	1da4e <z_abort_timeout>

0001d840 <z_priq_dumb_best>:
	return list->head == list;
   1d840:	6803      	ldr	r3, [r0, #0]
}
   1d842:	4298      	cmp	r0, r3
   1d844:	bf14      	ite	ne
   1d846:	4618      	movne	r0, r3
   1d848:	2000      	moveq	r0, #0
   1d84a:	4770      	bx	lr

0001d84c <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
   1d84c:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   1d850:	b570      	push	{r4, r5, r6, lr}
   1d852:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   1d854:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
   1d858:	b1cb      	cbz	r3, 1d88e <z_thread_timeout+0x42>
	__asm__ volatile(
   1d85a:	f04f 0320 	mov.w	r3, #32
   1d85e:	f3ef 8611 	mrs	r6, BASEPRI
   1d862:	f383 8811 	msr	BASEPRI, r3
   1d866:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1d86a:	4629      	mov	r1, r5
   1d86c:	f850 0c10 	ldr.w	r0, [r0, #-16]
   1d870:	f7fc fcfc 	bl	1a26c <z_priq_dumb_remove>
   1d874:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1d878:	f023 0302 	bic.w	r3, r3, #2
   1d87c:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
   1d880:	f386 8811 	msr	BASEPRI, r6
   1d884:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1d888:	2300      	movs	r3, #0
   1d88a:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1d88e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   1d892:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1d894:	f023 0314 	bic.w	r3, r3, #20
   1d898:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   1d89c:	f7ff ff56 	bl	1d74c <z_is_thread_ready>
   1d8a0:	b120      	cbz	r0, 1d8ac <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
   1d8a2:	4628      	mov	r0, r5
}
   1d8a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d8a8:	f7fc bd30 	b.w	1a30c <z_add_thread_to_ready_q>
   1d8ac:	bd70      	pop	{r4, r5, r6, pc}

0001d8ae <z_unpend_first_thread>:
{
   1d8ae:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1d8b0:	f04f 0320 	mov.w	r3, #32
   1d8b4:	f3ef 8211 	mrs	r2, BASEPRI
   1d8b8:	f383 8811 	msr	BASEPRI, r3
   1d8bc:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1d8c0:	f7ff ffbe 	bl	1d840 <z_priq_dumb_best>
   1d8c4:	4604      	mov	r4, r0
	__asm__ volatile(
   1d8c6:	f382 8811 	msr	BASEPRI, r2
   1d8ca:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   1d8ce:	b1c8      	cbz	r0, 1d904 <z_unpend_first_thread+0x56>
	__asm__ volatile(
   1d8d0:	f04f 0320 	mov.w	r3, #32
   1d8d4:	f3ef 8511 	mrs	r5, BASEPRI
   1d8d8:	f383 8811 	msr	BASEPRI, r3
   1d8dc:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1d8e0:	4601      	mov	r1, r0
   1d8e2:	6880      	ldr	r0, [r0, #8]
   1d8e4:	f7fc fcc2 	bl	1a26c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1d8e8:	7b63      	ldrb	r3, [r4, #13]
   1d8ea:	f023 0302 	bic.w	r3, r3, #2
   1d8ee:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1d8f0:	f385 8811 	msr	BASEPRI, r5
   1d8f4:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1d8f8:	2300      	movs	r3, #0
   1d8fa:	f104 0018 	add.w	r0, r4, #24
   1d8fe:	60a3      	str	r3, [r4, #8]
   1d900:	f000 f8a5 	bl	1da4e <z_abort_timeout>
}
   1d904:	4620      	mov	r0, r4
   1d906:	bd38      	pop	{r3, r4, r5, pc}

0001d908 <z_unpend_all>:
{
   1d908:	b570      	push	{r4, r5, r6, lr}
   1d90a:	4606      	mov	r6, r0
	int need_sched = 0;
   1d90c:	2500      	movs	r5, #0
   1d90e:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d910:	42a6      	cmp	r6, r4
   1d912:	d000      	beq.n	1d916 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1d914:	b90c      	cbnz	r4, 1d91a <z_unpend_all+0x12>
}
   1d916:	4628      	mov	r0, r5
   1d918:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(thread);
   1d91a:	4620      	mov	r0, r4
   1d91c:	f7ff ff72 	bl	1d804 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   1d920:	4620      	mov	r0, r4
   1d922:	f7ff ff13 	bl	1d74c <z_is_thread_ready>
		need_sched = 1;
   1d926:	2501      	movs	r5, #1
   1d928:	2800      	cmp	r0, #0
   1d92a:	d0f0      	beq.n	1d90e <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   1d92c:	4620      	mov	r0, r4
   1d92e:	f7fc fced 	bl	1a30c <z_add_thread_to_ready_q>
   1d932:	e7ec      	b.n	1d90e <z_unpend_all+0x6>

0001d934 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   1d934:	b15a      	cbz	r2, 1d94e <z_impl_k_sem_init+0x1a>
   1d936:	428a      	cmp	r2, r1
   1d938:	d309      	bcc.n	1d94e <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1d93a:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1d93e:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1d942:	e9c0 0000 	strd	r0, r0, [r0]
   1d946:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1d94a:	2000      	movs	r0, #0
   1d94c:	4770      	bx	lr
		return -EINVAL;
   1d94e:	f06f 0015 	mvn.w	r0, #21
}
   1d952:	4770      	bx	lr

0001d954 <k_is_in_isr>:
   1d954:	f3ef 8005 	mrs	r0, IPSR
}
   1d958:	3000      	adds	r0, #0
   1d95a:	bf18      	it	ne
   1d95c:	2001      	movne	r0, #1
   1d95e:	4770      	bx	lr

0001d960 <z_impl_k_thread_name_set>:
}
   1d960:	f06f 0046 	mvn.w	r0, #70	; 0x46
   1d964:	4770      	bx	lr

0001d966 <k_thread_name_get>:
}
   1d966:	2000      	movs	r0, #0
   1d968:	4770      	bx	lr

0001d96a <z_new_thread_init>:
{
   1d96a:	b510      	push	{r4, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   1d96c:	9c02      	ldr	r4, [sp, #8]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
   1d96e:	7383      	strb	r3, [r0, #14]
	thread_base->user_options = (u8_t)options;
   1d970:	7304      	strb	r4, [r0, #12]

	thread_base->sched_locked = 0U;
   1d972:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   1d974:	2404      	movs	r4, #4
	thread_base->sched_locked = 0U;
   1d976:	73c3      	strb	r3, [r0, #15]
	thread_base->thread_state = (u8_t)initial_state;
   1d978:	7344      	strb	r4, [r0, #13]
	node->prev = NULL;
   1d97a:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
   1d97e:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
   1d982:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
   1d986:	bd10      	pop	{r4, pc}

0001d988 <k_work_submit_to_queue>:
{
   1d988:	b500      	push	{lr}
   1d98a:	f101 0308 	add.w	r3, r1, #8
   1d98e:	e8d3 2fef 	ldaex	r2, [r3]
   1d992:	f042 0c01 	orr.w	ip, r2, #1
   1d996:	e8c3 cfee 	stlex	lr, ip, [r3]
   1d99a:	f1be 0f00 	cmp.w	lr, #0
   1d99e:	d1f6      	bne.n	1d98e <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1d9a0:	07d3      	lsls	r3, r2, #31
   1d9a2:	d403      	bmi.n	1d9ac <k_work_submit_to_queue+0x24>
}
   1d9a4:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1d9a8:	f7ff be66 	b.w	1d678 <k_queue_append>
}
   1d9ac:	f85d fb04 	ldr.w	pc, [sp], #4

0001d9b0 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   1d9b0:	f1a0 010c 	sub.w	r1, r0, #12
   1d9b4:	6900      	ldr	r0, [r0, #16]
   1d9b6:	f7ff bfe7 	b.w	1d988 <k_work_submit_to_queue>

0001d9ba <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   1d9ba:	69c3      	ldr	r3, [r0, #28]
{
   1d9bc:	b570      	push	{r4, r5, r6, lr}
   1d9be:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   1d9c0:	2b00      	cmp	r3, #0
   1d9c2:	d039      	beq.n	1da38 <work_cancel+0x7e>
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   1d9c4:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d9c8:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   1d9cc:	07db      	lsls	r3, r3, #31
   1d9ce:	d52f      	bpl.n	1da30 <work_cancel+0x76>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1d9d0:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   1d9d2:	69c2      	ldr	r2, [r0, #28]
   1d9d4:	6813      	ldr	r3, [r2, #0]
   1d9d6:	b913      	cbnz	r3, 1d9de <work_cancel+0x24>
			return -EINVAL;
   1d9d8:	f06f 0015 	mvn.w	r0, #21
}
   1d9dc:	bd70      	pop	{r4, r5, r6, pc}
   1d9de:	429c      	cmp	r4, r3
   1d9e0:	d121      	bne.n	1da26 <work_cancel+0x6c>
Z_GENLIST_REMOVE(sflist, sfnode)
   1d9e2:	6823      	ldr	r3, [r4, #0]
   1d9e4:	6856      	ldr	r6, [r2, #4]
   1d9e6:	f023 0003 	bic.w	r0, r3, #3
   1d9ea:	b991      	cbnz	r1, 1da12 <work_cancel+0x58>
   1d9ec:	42b4      	cmp	r4, r6
	list->head = node;
   1d9ee:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1d9f0:	d100      	bne.n	1d9f4 <work_cancel+0x3a>
	list->tail = node;
   1d9f2:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1d9f4:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d9f6:	f003 0303 	and.w	r3, r3, #3
   1d9fa:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   1d9fc:	2000      	movs	r0, #0
   1d9fe:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1da00:	e8d5 3fef 	ldaex	r3, [r5]
   1da04:	f023 0301 	bic.w	r3, r3, #1
   1da08:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1da0c:	2a00      	cmp	r2, #0
   1da0e:	d0e5      	beq.n	1d9dc <work_cancel+0x22>
   1da10:	e7f6      	b.n	1da00 <work_cancel+0x46>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1da12:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1da14:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   1da16:	f003 0303 	and.w	r3, r3, #3
   1da1a:	ea43 0300 	orr.w	r3, r3, r0
   1da1e:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1da20:	bf08      	it	eq
   1da22:	6051      	streq	r1, [r2, #4]
   1da24:	e7e6      	b.n	1d9f4 <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1da26:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1da28:	4619      	mov	r1, r3
   1da2a:	f020 0303 	bic.w	r3, r0, #3
   1da2e:	e7d2      	b.n	1d9d6 <work_cancel+0x1c>
		(void)z_abort_timeout(&work->timeout);
   1da30:	300c      	adds	r0, #12
   1da32:	f000 f80c 	bl	1da4e <z_abort_timeout>
   1da36:	e7e1      	b.n	1d9fc <work_cancel+0x42>
		return -EAGAIN;
   1da38:	f06f 000a 	mvn.w	r0, #10
   1da3c:	e7ce      	b.n	1d9dc <work_cancel+0x22>

0001da3e <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1da3e:	2300      	movs	r3, #0
   1da40:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   1da44:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   1da48:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   1da4a:	61c3      	str	r3, [r0, #28]
}
   1da4c:	4770      	bx	lr

0001da4e <z_abort_timeout>:
{
   1da4e:	b510      	push	{r4, lr}
	__asm__ volatile(
   1da50:	f04f 0220 	mov.w	r2, #32
   1da54:	f3ef 8411 	mrs	r4, BASEPRI
   1da58:	f382 8811 	msr	BASEPRI, r2
   1da5c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1da60:	6803      	ldr	r3, [r0, #0]
   1da62:	b13b      	cbz	r3, 1da74 <z_abort_timeout+0x26>
			remove_timeout(to);
   1da64:	f7fd f8d4 	bl	1ac10 <remove_timeout>
			ret = 0;
   1da68:	2000      	movs	r0, #0
	__asm__ volatile(
   1da6a:	f384 8811 	msr	BASEPRI, r4
   1da6e:	f3bf 8f6f 	isb	sy
}
   1da72:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1da74:	f06f 0015 	mvn.w	r0, #21
   1da78:	e7f7      	b.n	1da6a <z_abort_timeout+0x1c>

0001da7a <z_get_next_timeout_expiry>:
{
   1da7a:	b510      	push	{r4, lr}
	__asm__ volatile(
   1da7c:	f04f 0320 	mov.w	r3, #32
   1da80:	f3ef 8411 	mrs	r4, BASEPRI
   1da84:	f383 8811 	msr	BASEPRI, r3
   1da88:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1da8c:	f7fd f8d4 	bl	1ac38 <next_timeout>
	__asm__ volatile(
   1da90:	f384 8811 	msr	BASEPRI, r4
   1da94:	f3bf 8f6f 	isb	sy
}
   1da98:	bd10      	pop	{r4, pc}

0001da9a <z_set_timeout_expiry>:
{
   1da9a:	b570      	push	{r4, r5, r6, lr}
   1da9c:	4604      	mov	r4, r0
   1da9e:	460e      	mov	r6, r1
	__asm__ volatile(
   1daa0:	f04f 0320 	mov.w	r3, #32
   1daa4:	f3ef 8511 	mrs	r5, BASEPRI
   1daa8:	f383 8811 	msr	BASEPRI, r3
   1daac:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   1dab0:	f7fd f8c2 	bl	1ac38 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1dab4:	2801      	cmp	r0, #1
   1dab6:	dd05      	ble.n	1dac4 <z_set_timeout_expiry+0x2a>
   1dab8:	42a0      	cmp	r0, r4
   1daba:	dd03      	ble.n	1dac4 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   1dabc:	4631      	mov	r1, r6
   1dabe:	4620      	mov	r0, r4
   1dac0:	f7ef fe2e 	bl	d720 <z_clock_set_timeout>
	__asm__ volatile(
   1dac4:	f385 8811 	msr	BASEPRI, r5
   1dac8:	f3bf 8f6f 	isb	sy
}
   1dacc:	bd70      	pop	{r4, r5, r6, pc}

0001dace <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   1dace:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   1dad0:	f7fd f966 	bl	1ada0 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   1dad4:	bd08      	pop	{r3, pc}

0001dad6 <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   1dad6:	b510      	push	{r4, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
   1dad8:	f7fd f962 	bl	1ada0 <z_tick_get>
			return (t * to_hz + off) / from_hz;
   1dadc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1dae0:	fba0 2304 	umull	r2, r3, r0, r4
   1dae4:	fb04 3301 	mla	r3, r4, r1, r3
   1dae8:	0bd0      	lsrs	r0, r2, #15
}
   1daea:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1daee:	0bd9      	lsrs	r1, r3, #15
   1daf0:	bd10      	pop	{r4, pc}

0001daf2 <k_timer_init>:
	timer->status = 0U;
   1daf2:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1daf4:	e9c0 1206 	strd	r1, r2, [r0, #24]
   1daf8:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0U;
   1dafc:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   1dafe:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   1db02:	e9c0 3300 	strd	r3, r3, [r0]
	timer->user_data = NULL;
   1db06:	6283      	str	r3, [r0, #40]	; 0x28
}
   1db08:	4770      	bx	lr

0001db0a <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1db0a:	b510      	push	{r4, lr}
   1db0c:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   1db0e:	f7ff ff9e 	bl	1da4e <z_abort_timeout>

	if (inactive) {
   1db12:	bb00      	cbnz	r0, 1db56 <z_impl_k_timer_stop+0x4c>
		return;
	}

	if (timer->stop_fn != NULL) {
   1db14:	69e3      	ldr	r3, [r4, #28]
   1db16:	b10b      	cbz	r3, 1db1c <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1db18:	4620      	mov	r0, r4
   1db1a:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   1db1c:	f104 0010 	add.w	r0, r4, #16
   1db20:	2100      	movs	r1, #0
   1db22:	f7ff fe25 	bl	1d770 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   1db26:	4604      	mov	r4, r0
   1db28:	b1a8      	cbz	r0, 1db56 <z_impl_k_timer_stop+0x4c>
		z_unpend_thread_no_timeout(thread);
   1db2a:	f7ff fe31 	bl	1d790 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1db2e:	7b63      	ldrb	r3, [r4, #13]
   1db30:	06db      	lsls	r3, r3, #27
   1db32:	d104      	bne.n	1db3e <z_impl_k_timer_stop+0x34>
	if (z_is_thread_ready(thread)) {
   1db34:	69a3      	ldr	r3, [r4, #24]
   1db36:	b913      	cbnz	r3, 1db3e <z_impl_k_timer_stop+0x34>
		z_add_thread_to_ready_q(thread);
   1db38:	4620      	mov	r0, r4
   1db3a:	f7fc fbe7 	bl	1a30c <z_add_thread_to_ready_q>
	__asm__ volatile(
   1db3e:	f04f 0320 	mov.w	r3, #32
   1db42:	f3ef 8011 	mrs	r0, BASEPRI
   1db46:	f383 8811 	msr	BASEPRI, r3
   1db4a:	f3bf 8f6f 	isb	sy

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
		z_reschedule_unlocked();
	}
}
   1db4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   1db52:	f7ff be41 	b.w	1d7d8 <z_reschedule_irqlock>
   1db56:	bd10      	pop	{r4, pc}

0001db58 <clear_event_registrations>:
	while (num_events--) {
   1db58:	2314      	movs	r3, #20
{
   1db5a:	b570      	push	{r4, r5, r6, lr}
	event->poller = NULL;
   1db5c:	2400      	movs	r4, #0
   1db5e:	2601      	movs	r6, #1
   1db60:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   1db64:	4281      	cmp	r1, r0
   1db66:	d100      	bne.n	1db6a <clear_event_registrations+0x12>
}
   1db68:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   1db6a:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   1db6e:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   1db72:	f003 030f 	and.w	r3, r3, #15
   1db76:	2b04      	cmp	r3, #4
   1db78:	d80d      	bhi.n	1db96 <clear_event_registrations+0x3e>
   1db7a:	fa06 f303 	lsl.w	r3, r6, r3
   1db7e:	f013 0f16 	tst.w	r3, #22
   1db82:	d008      	beq.n	1db96 <clear_event_registrations+0x3e>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   1db84:	f851 3c14 	ldr.w	r3, [r1, #-20]
   1db88:	b12b      	cbz	r3, 1db96 <clear_event_registrations+0x3e>
	node->prev->next = node->next;
   1db8a:	f851 5c10 	ldr.w	r5, [r1, #-16]
   1db8e:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   1db90:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1db92:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
   1db96:	f382 8811 	msr	BASEPRI, r2
   1db9a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1db9e:	f04f 0320 	mov.w	r3, #32
   1dba2:	f3ef 8211 	mrs	r2, BASEPRI
   1dba6:	f383 8811 	msr	BASEPRI, r3
   1dbaa:	f3bf 8f6f 	isb	sy
   1dbae:	3914      	subs	r1, #20
   1dbb0:	e7d8      	b.n	1db64 <clear_event_registrations+0xc>

0001dbb2 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   1dbb2:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   1dbb4:	6884      	ldr	r4, [r0, #8]
{
   1dbb6:	4605      	mov	r5, r0
   1dbb8:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   1dbba:	b19c      	cbz	r4, 1dbe4 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   1dbbc:	68a3      	ldr	r3, [r4, #8]
   1dbbe:	b95b      	cbnz	r3, 1dbd8 <signal_poll_event+0x26>
	int retcode = 0;
   1dbc0:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   1dbc2:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1dbc4:	2300      	movs	r3, #0
   1dbc6:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   1dbc8:	68eb      	ldr	r3, [r5, #12]
   1dbca:	f3c3 3204 	ubfx	r2, r3, #12, #5
   1dbce:	4316      	orrs	r6, r2
   1dbd0:	f366 3310 	bfi	r3, r6, #12, #5
   1dbd4:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   1dbd6:	e004      	b.n	1dbe2 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   1dbd8:	4798      	blx	r3
		poller->is_polling = false;
   1dbda:	2300      	movs	r3, #0
		if (retcode < 0) {
   1dbdc:	2800      	cmp	r0, #0
		poller->is_polling = false;
   1dbde:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   1dbe0:	daf0      	bge.n	1dbc4 <signal_poll_event+0x12>
}
   1dbe2:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   1dbe4:	4620      	mov	r0, r4
   1dbe6:	e7ed      	b.n	1dbc4 <signal_poll_event+0x12>

0001dbe8 <k_poll_poller_cb>:
{
   1dbe8:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   1dbea:	6883      	ldr	r3, [r0, #8]
{
   1dbec:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   1dbee:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   1dbf0:	7b63      	ldrb	r3, [r4, #13]
   1dbf2:	079a      	lsls	r2, r3, #30
   1dbf4:	d401      	bmi.n	1dbfa <k_poll_poller_cb+0x12>
		return 0;
   1dbf6:	2000      	movs	r0, #0
}
   1dbf8:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   1dbfa:	6a23      	ldr	r3, [r4, #32]
   1dbfc:	3302      	adds	r3, #2
   1dbfe:	d012      	beq.n	1dc26 <k_poll_poller_cb+0x3e>
	z_unpend_thread(thread);
   1dc00:	4620      	mov	r0, r4
   1dc02:	f7ff fdff 	bl	1d804 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1dc06:	2d08      	cmp	r5, #8
   1dc08:	bf0c      	ite	eq
   1dc0a:	f06f 0303 	mvneq.w	r3, #3
   1dc0e:	2300      	movne	r3, #0
   1dc10:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1dc12:	7b63      	ldrb	r3, [r4, #13]
   1dc14:	06db      	lsls	r3, r3, #27
   1dc16:	d1ee      	bne.n	1dbf6 <k_poll_poller_cb+0xe>
	if (!z_is_thread_ready(thread)) {
   1dc18:	69a5      	ldr	r5, [r4, #24]
   1dc1a:	2d00      	cmp	r5, #0
   1dc1c:	d1eb      	bne.n	1dbf6 <k_poll_poller_cb+0xe>
		z_add_thread_to_ready_q(thread);
   1dc1e:	4620      	mov	r0, r4
   1dc20:	f7fc fb74 	bl	1a30c <z_add_thread_to_ready_q>
	return 0;
   1dc24:	e7e7      	b.n	1dbf6 <k_poll_poller_cb+0xe>
		return -EAGAIN;
   1dc26:	f06f 000a 	mvn.w	r0, #10
   1dc2a:	e7e5      	b.n	1dbf8 <k_poll_poller_cb+0x10>

0001dc2c <add_event>:
{
   1dc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dc2e:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1dc30:	e9d0 2300 	ldrd	r2, r3, [r0]
   1dc34:	4290      	cmp	r0, r2
   1dc36:	4604      	mov	r4, r0
   1dc38:	460d      	mov	r5, r1
   1dc3a:	d106      	bne.n	1dc4a <add_event+0x1e>
	node->prev = list->tail;
   1dc3c:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1dc3e:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   1dc40:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   1dc42:	6863      	ldr	r3, [r4, #4]
   1dc44:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1dc46:	6065      	str	r5, [r4, #4]
}
   1dc48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1dc4a:	2b00      	cmp	r3, #0
   1dc4c:	d0f6      	beq.n	1dc3c <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   1dc4e:	689b      	ldr	r3, [r3, #8]
   1dc50:	6879      	ldr	r1, [r7, #4]
   1dc52:	6858      	ldr	r0, [r3, #4]
   1dc54:	f7ff fd83 	bl	1d75e <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   1dc58:	2800      	cmp	r0, #0
   1dc5a:	d1ef      	bne.n	1dc3c <add_event+0x10>
	return list->head == list;
   1dc5c:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dc5e:	42b4      	cmp	r4, r6
   1dc60:	d0ec      	beq.n	1dc3c <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1dc62:	2e00      	cmp	r6, #0
   1dc64:	d0ea      	beq.n	1dc3c <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   1dc66:	68b3      	ldr	r3, [r6, #8]
   1dc68:	6878      	ldr	r0, [r7, #4]
   1dc6a:	6859      	ldr	r1, [r3, #4]
   1dc6c:	f7ff fd77 	bl	1d75e <z_is_t1_higher_prio_than_t2>
   1dc70:	b128      	cbz	r0, 1dc7e <add_event+0x52>
	node->prev = successor->prev;
   1dc72:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1dc74:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   1dc78:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1dc7a:	6075      	str	r5, [r6, #4]
			return;
   1dc7c:	e7e4      	b.n	1dc48 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1dc7e:	6863      	ldr	r3, [r4, #4]
   1dc80:	429e      	cmp	r6, r3
   1dc82:	d0db      	beq.n	1dc3c <add_event+0x10>
   1dc84:	6836      	ldr	r6, [r6, #0]
   1dc86:	e7ec      	b.n	1dc62 <add_event+0x36>

0001dc88 <register_events>:
{
   1dc88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1dc8c:	f04f 0b00 	mov.w	fp, #0
{
   1dc90:	4688      	mov	r8, r1
   1dc92:	4615      	mov	r5, r2
   1dc94:	4699      	mov	r9, r3
   1dc96:	4604      	mov	r4, r0
	int events_registered = 0;
   1dc98:	465e      	mov	r6, fp
	event->poller = NULL;
   1dc9a:	465f      	mov	r7, fp
	for (int ii = 0; ii < num_events; ii++) {
   1dc9c:	45c3      	cmp	fp, r8
   1dc9e:	db02      	blt.n	1dca6 <register_events+0x1e>
}
   1dca0:	4630      	mov	r0, r6
   1dca2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dca6:	f04f 0320 	mov.w	r3, #32
   1dcaa:	f3ef 8a11 	mrs	sl, BASEPRI
   1dcae:	f383 8811 	msr	BASEPRI, r3
   1dcb2:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1dcb6:	7b63      	ldrb	r3, [r4, #13]
   1dcb8:	f003 030f 	and.w	r3, r3, #15
   1dcbc:	2b02      	cmp	r3, #2
   1dcbe:	d005      	beq.n	1dccc <register_events+0x44>
   1dcc0:	2b04      	cmp	r3, #4
   1dcc2:	d006      	beq.n	1dcd2 <register_events+0x4a>
   1dcc4:	2b01      	cmp	r3, #1
   1dcc6:	d118      	bne.n	1dcfa <register_events+0x72>
		if (event->signal->signaled != 0U) {
   1dcc8:	6922      	ldr	r2, [r4, #16]
   1dcca:	e000      	b.n	1dcce <register_events+0x46>
		if (k_sem_count_get(event->sem) > 0) {
   1dccc:	6922      	ldr	r2, [r4, #16]
		if (event->signal->signaled != 0U) {
   1dcce:	6892      	ldr	r2, [r2, #8]
   1dcd0:	e001      	b.n	1dcd6 <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
   1dcd2:	6922      	ldr	r2, [r4, #16]
   1dcd4:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled != 0U) {
   1dcd6:	b182      	cbz	r2, 1dcfa <register_events+0x72>
	event->state |= state;
   1dcd8:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   1dcda:	60a7      	str	r7, [r4, #8]
	event->state |= state;
   1dcdc:	f3c2 3104 	ubfx	r1, r2, #12, #5
   1dce0:	430b      	orrs	r3, r1
   1dce2:	f363 3210 	bfi	r2, r3, #12, #5
   1dce6:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   1dce8:	702f      	strb	r7, [r5, #0]
	__asm__ volatile(
   1dcea:	f38a 8811 	msr	BASEPRI, sl
   1dcee:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1dcf2:	f10b 0b01 	add.w	fp, fp, #1
   1dcf6:	3414      	adds	r4, #20
   1dcf8:	e7d0      	b.n	1dc9c <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   1dcfa:	f1b9 0f00 	cmp.w	r9, #0
   1dcfe:	d1f4      	bne.n	1dcea <register_events+0x62>
   1dd00:	782b      	ldrb	r3, [r5, #0]
   1dd02:	2b00      	cmp	r3, #0
   1dd04:	d0f1      	beq.n	1dcea <register_events+0x62>
	switch (event->type) {
   1dd06:	7b63      	ldrb	r3, [r4, #13]
   1dd08:	f003 030f 	and.w	r3, r3, #15
   1dd0c:	2b02      	cmp	r3, #2
   1dd0e:	d007      	beq.n	1dd20 <register_events+0x98>
   1dd10:	2b04      	cmp	r3, #4
   1dd12:	d00e      	beq.n	1dd32 <register_events+0xaa>
   1dd14:	2b01      	cmp	r3, #1
   1dd16:	d109      	bne.n	1dd2c <register_events+0xa4>
		add_event(&event->signal->poll_events, event, poller);
   1dd18:	462a      	mov	r2, r5
   1dd1a:	4621      	mov	r1, r4
   1dd1c:	6920      	ldr	r0, [r4, #16]
   1dd1e:	e003      	b.n	1dd28 <register_events+0xa0>
		add_event(&event->sem->poll_events, event, poller);
   1dd20:	462a      	mov	r2, r5
   1dd22:	4621      	mov	r1, r4
   1dd24:	6920      	ldr	r0, [r4, #16]
   1dd26:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   1dd28:	f7ff ff80 	bl	1dc2c <add_event>
	event->poller = poller;
   1dd2c:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   1dd2e:	3601      	adds	r6, #1
   1dd30:	e7db      	b.n	1dcea <register_events+0x62>
		add_event(&event->queue->poll_events, event, poller);
   1dd32:	6920      	ldr	r0, [r4, #16]
   1dd34:	462a      	mov	r2, r5
   1dd36:	4621      	mov	r1, r4
   1dd38:	3008      	adds	r0, #8
   1dd3a:	e7f5      	b.n	1dd28 <register_events+0xa0>

0001dd3c <z_handle_obj_poll_events>:
	return list->head == list;
   1dd3c:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1dd3e:	4298      	cmp	r0, r3
   1dd40:	d009      	beq.n	1dd56 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1dd42:	e9d3 2000 	ldrd	r2, r0, [r3]
   1dd46:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   1dd48:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   1dd4a:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   1dd4c:	4618      	mov	r0, r3
	node->prev = NULL;
   1dd4e:	e9c3 2200 	strd	r2, r2, [r3]
   1dd52:	f7ff bf2e 	b.w	1dbb2 <signal_poll_event>
	}
}
   1dd56:	4770      	bx	lr

0001dd58 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   1dd58:	4770      	bx	lr
